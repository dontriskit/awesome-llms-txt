# Courier to RudderStack
Source: https://www.courier.com/docs/external-integrations/cdp/rudderstack/courier-to-rudderstack

Send events from Courier to RudderStack by configuring a RudderStack source, adding its write key and data plane URL to Courier, and viewing events like “Message Sent” in your RudderStack source page.

## Configuration

Add a source that would essentially be the origin for events sent from Courier could just be a Node.js source). Once a source is added, copy over write key and data plane URL to Courier RudderStack integration page.

<Frame caption="RudderStack Source Config">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/external-integrations/rudderstack/rudderstack-source-config.png" alt="RudderStack Source Config" />
</Frame>

<Frame caption="Courier RudderStack Source Config">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/external-integrations/rudderstack/courier-rudderstack-source-config.png" alt="Courier RudderStack Source Config" />
</Frame>

## Event sourcing

Courier would start sending the events generated (like Message Sent for instance) to your RudderStack instance. This should show up on your RudderStack source page.

<Frame caption="Courier to RudderStack Events">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/external-integrations/rudderstack/courier-to-rudderstack-events.png" alt="Courier to RudderStack Events" />
</Frame>


# Overview
Source: https://www.courier.com/docs/external-integrations/cdp/rudderstack/intro

Courier's RudderStack integration lets you seamlessly send your event data from a variety of event sources to Courier. All you need to do is configure Courier as a destination in RudderStack.

## Introduction

You can also add RudderStack configure (write key, data plane URL) inside Courier workspace with which Courier events can be sent to RudderStack.

## RudderStack to Courier

RudderStack supports Courier as a destination. Once you configure Courier destination inside RudderStack, you should be able to connect one or more sources, and you should see events flowing into Courier.

Events flowing in from RudderStack into Courier are visible on RudderStack integration page inside Courier Studio, from where you can map it to trigger notification workflows. For instance, you can trigger an automation that welcomes a new user if an `identify` event flows in from RudderStack.

Supported RudderStack Events:

* Group
* Identify
* Track

## Courier to RudderStack

Courier generates events during execution workflow (for instance, a message sent event is generated when a message is sent to a user by Courier). These events can be sourced outbound to RudderStack, which can further unlock other powerful use-cases and potentially wire up other destinations inside RudderStack.

## Example use-cases

Following are some examples of use-cases you could achieve with Courier Rudderstack integration

* User Sync from RudderStack to Courier
* Welcoming new users based on sign-up tracking
* Nudging users to upgrade to paid tier based on usage tracking


# RudderStack to Courier
Source: https://www.courier.com/docs/external-integrations/cdp/rudderstack/rudderstack-to-courier

Integrate Courier with RudderStack by connecting sources, adding your API key, and mapping identify, track, and group events to Courier automations using structured payloads and the Courier Studio UI.

## Configuration

Go to RudderStack destination and search for Courier.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/external-integrations/rudderstack/search-courier-destination.png" alt="Search Courier Destination" />
</Frame>

Connect one or more sources

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/external-integrations/rudderstack/connect-sources-to-courier-destination.png" alt="Connect Sources to Courier Destination" />
</Frame>

Add Courier API Key

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/external-integrations/rudderstack/courier-api-key.png" alt="Add Courier API Key" />
</Frame>

# Event trigger

You can trigger events either via the sources you connected or by directly calling rudderstack endpoints.

Courier destination supports `group`, `identify` and `track` events, which appear on Courier Rudderstack integration page inside Courier Studio UI.

Check <a href="https://www.rudderstack.com/docs/sources/event-streams/sdks/rudderstack-node-sdk/#sending-events">this</a> to learn more on sending events to your RudderStack instance.

Once events start flowing in from RudderStack into Courier, those appear on RudderStack integration page on Courier Studio.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/external-integrations/rudderstack/courier-inbound-rudderstack.png" alt="Courier Inbound from RudderStack" />
</Frame>

## Supported events

### Identify

RudderStack identify event when sent to Courier creates or updates the user profile. It uses userId as the user identifier and the `traits` get mapped to user profile attributes.

### Track

RudderStack track event when sent to Courier can trigger an automation or supply inline automations payload. The `properties` used inside the payload will be used for mapping it to Courier.

### Group

RudderStack group event when sent to Courier can create an account or trigger an automation. The `groupId` will be used as Account ID and `userId` (if not exists, `anonymousId`) will be used as User Identifier.

## Event mapping

Received RudderStack Events can be mapped to an existing automation, or a new automation can be initialized where the event is set as a trigger.

Click on the plus (+) icon under link automations and map the event to an existing automation template, or create a new automation template.

Properties should be scoped by courier.automation object, so for instance if you want to map userId to refs, your request to rudderstack would look like below (note courier.automation object):

```json Rudderstack Courier Automation Property Example
{
  "event": "user-checkout",
  "type": "track",
  "properties": {
    "courier": {
      "automation": {
        "data": {
          "userId": "my-user"
        }
      }
    }
  }
}
```

Mapped automation would look like below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/external-integrations/rudderstack/rudderstack-mapped-automation-v2.png" alt="RudderStack Mapped Automation V2" />
</Frame>

[Learn more about Courier Automations >](../../../tutorials/how-to-automate-message-sequences)


# Courier as a Segment Source
Source: https://www.courier.com/docs/external-integrations/cdp/segment/courier-source

Use Courier as a Segment Source by adding your Segment write key to Courier’s config to track message and audience events—like “Message Sent” or “Audience User Matched”—directly in Segment.

## Setting Up Courier as a Segment Source

1. In Segment, navigate to the *Sources* page (under "Connections").
2. Select your framework of choice (e.g., Node.js).
3. Obtain a write key. After adding Node.js as a source, you'll see a page with instructions on how to add Segment to your Node.js codebase.
   Copy the write key from this page.
4. In Courier's Segment configuration, paste your [Segment Write Key](https://segment.com/docs/connections/find-writekey/) in the *Segment write key* input field.

After adding your Segment write key, Courier will send updates to Segment. Update events include messages being sent, opened, clicked, delivered, unroutable, and undeliverable.

## Courier Events Sent to Segment

When Courier is set up as a Segment source, the following events can be tracked in Segment:

### Message Events

* `Message Clicked`
* `Message Delivered`
* `Message Opened`
* `Message Sent`
* `Message Undeliverable`
* `Message Unroutable`

### Audience Events

* `Audience User Matched`
* `Audience User Unmatched`


# Courier as a Segment Destination
Source: https://www.courier.com/docs/external-integrations/cdp/segment/segment-integration

Connect Segment to Courier as a destination by entering your Courier API key in Segment’s destination settings, enabling identify, track, and group events to trigger Courier automations, update profiles, and manage notification workflows.

> Courier's Destination for Segment provides an easy way to send data from web or mobile applications into Courier to improve notification delivery and management.

These events are visible on the [Segment integration page](https://app.courier.com/channels/segment) inside Courier Studio, where you can map them to trigger notification workflows. For example, you can trigger an automation that welcomes a new user when an `analytics.identify` event is received from Segment.

**Supported Segment Events:**

* `analytics.group`
* `analytics.identify`
* `analytics.track`

## Connecting Segment

1. Log into the Segment app and navigate to the [Destinations](https://segment.com/docs/connections/destinations) catalog page.
2. Click **Add Destination**.
3. Search for Courier in the Destinations Catalog and select the Courier destination.
4. Choose the Source that should send data to the Courier destination.
5. In the [Courier Integrations Page](https://app.courier.com/integrations), search for Segment and click on it to access the Courier API Key. If you don't see a key here, go to the [Courier Settings Page](https://app.courier.com/settings) and copy the Auth Token from the API Keys section.
6. Enter the Courier API Key or Auth Token in the API Key field of the Courier destination settings in Segment.
7. To validate the setup, navigate to the destination's "Event Tester" in Segment and click "Send Event" at the bottom of the page. In Courier Studio, refresh the page or wait a few seconds. If the destination setup was successful, the test event will appear in the list.

## Segment API

### Identify Calls

Segment Identify calls allow you to connect a user to their actions (Segment events) and record traits about them.
The user can be identified by their User ID and can hold additional traits such as their name and email.
These traits can be used to update Courier recipient profiles over time.

<CardGroup>
  <Card title="Learn more about Segment Identify" icon="angle-right" href="https://segment.com/docs/connections/spec/identify/" iconType="solid" horizontal />

  <Card title="Learn more about Courier Profiles" icon="angle-right" href="../../../reference/profiles/intro" iconType="solid" horizontal />
</CardGroup>

Example Payload

```json
{
  "messageId": "segment-test-message-iskh4123",
  "timestamp": "2024-05-21T18:00:18.913Z",
  "type": "identify",
  "email": "test@example.org",
  "traits": {
    "trait1": 2,
    "email": "test@example.org"
  },
  "userId": "rod-test"
}
```

### Track Calls

Segment Track calls allow you to record actions performed by your users, including any properties associated with their actions. The actions can be associated with properties that help you analyze these actions.

<CardGroup>
  <Card title="Learn more about Segment Track" icon="angle-right" href="https://segment.com/docs/connections/spec/track/" iconType="solid" horizontal />
</CardGroup>

Track events appear with a prefix of `track/` in Courier. Courier gathers data from the track's `properties` object. To send notifications based on a Segment event, these track events must be mapped to Courier Automations.

Here's an example Segment API call:

```jsx
analytics.track('Login Button Clicked', {
  messageId: "segment-test-message-a8rmf",
  timestamp: "2021-12-07T08:41:59.410Z",
  type: "track",
  email: "test@example.org",
  projectId: "4GgKeBoVJkT9EZL4vAmduv",
  properties: {
    property1: 1,
    property2: "test",
    property3: true
  },
  userId: "test-user-cqw3gr",
  event: "Segment Test Event Name"
})
```

The associated JSON from the Segment API call will be sent to Courier as a track event:

```json
{
  "messageId": "segment-test-message-a8rmf",
  "timestamp": "2021-12-07T08:41:59.410Z",
  "type": "track",
  "email": "test@example.org",
  "projectId": "4GgKeBoVJkT9EZL4vAmduv",
  "properties": {
    "property1": 1,
    "property2": "test",
    "property3": true
  },
  "userId": "test-user-cqw3gr",
  "event": "Segment Test Event Name"
}
```

The above JSON object is mapped into the Courier data object as follows:

```json
{
  "data": {
    "property1": 1,
    "property2": "test",
    "property3": true
  }
}
```

## Troubleshooting

If you continue to see the "No Segment events received yet." message in Courier, it could mean that Segment was unable to successfully set up your Courier workspace as a destination. To ensure that the test event sent by Segment is successfully received by Courier:

1. Double-check that your API Key was copied accurately into Segment.
2. Check where the `email` property is placed within the test JSON object in Segment. If it is at the top level of an identify call, move it within the `traits` object and resend the test event.
3. If you are still experiencing issues, please reach out to Courier Support.


# Chat API
Source: https://www.courier.com/docs/external-integrations/direct-message/chat

Looking for a way to send notifications via Chat API? This step-by-step tutorial will show you how to integrate the Chat API the easy way.

## Profile Requirements

To deliver a message to a recipient over Chat API, Courier must be provided a phone number or chat id.
This value should be included in the recipient profile as `chat_api`.

```json
{
  "message": {
    //RecipientProfile using phone number
    "to": {
      "chat_api": {
        "phone_number": "12345678"
      }
    }
  }
}
```

```json
{
  "message": {
    //RecipientProfile using phone number
    "to": {
      "chat_id": "<chat_id>"
    }
  }
}
```

## Template

In the notification’s integration settings, a quoted message id and mentioned phone numbers can be provided

## Override

Overrides can be used to change the request body that Courier uses to send a push message. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by Chat APIs `/sendMessage` endpoint ([see all send request body fields here](https://chat-api.com/en/swagger.html?_ga=2.118122049.934738336.1637606157-1510064799.1637365770#/messages/sendMessage)). Below is an example of overriding the token and the chat API instance for the configuration:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "chat_api": {
        "phone_number": "12345678"
      }
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "override": {
        "config": {
          "instanceId": "<yourInstanceId>",
          "token": "<yourToken>"
        }
      }
    }
  }
}
```


# Discord
Source: https://www.courier.com/docs/external-integrations/direct-message/discord

Looking for a way to send notifications via Discord? This step-by-step tutorial will show you how to integrate Discord's API the easy way.

## Discord Bot Requirements

To send notifications via Discord, a Discord Bot is required. You may use an existing or [create a new basic bot](https://discord.com/developers/docs/intro).

### Scopes

Update the `bot` scope with the following permissions:

* `View Channels`
* `Send Messages`
* Optional: `Read Message History` to send a message as a reply to another message

[Learn more about Adding Scopes and Permissions.](https://discord.com/developers/docs/getting-started#adding-scopes-and-permissions)

Once the permissions are finalized, go to the generated URL below. This URL will invite the bot to the server and authorize it with the permissions chosen.

## Profiles Requirements

The information required in the recipient profile is different based on the type of message you are sending.

### Sending a Direct Message

To send a message to a user, you'll need to supply the Discord profile object with a `user_id`:

1. Go to User Settings on Discord (next to profile on the bottom left),
2. Access the Advanced settings page and enable Developer Mode <Icon icon="square-check" iconType="solid" />,
3. Right click on the user and copy the user ID.

This is not the user tag. The user you are trying to message must be a member of a server the bot is installed in.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "discord": {
        "user_id": "617099137532932107"
      }
    }
  }
}
```

### Sending a Message to a Channel

To send a message to a channel, you'll need to supply the discord profile object with a `channel_id`:

1. Go to User Settings on Discord (next to profile on the bottom left),
2. Access the Advanced settings page and enable Developer Mode  <Icon icon="square-check" iconType="solid" />,
3. Right click on the channel and copy the channel ID.

The bot must be installed in the server to send to the channel.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "discord": {
        "channel_id": "768866348853383208"
      }
    }
  }
}
```

## Override

You can use a provider override to replace what we send to Discord's [Create Message](https://discord.com/developers/docs/resources/channel#create-message) endpoint. For example, you can choose to an an embed.

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "discord": {
        "channel_id": "768866348853383208"
      }
    },
    "providers": {
      "discord": {
        "override": {
          "body": {
            "embed": {
              "title": "Hello, Embed!",
              "description": "This is an embedded message."
            }
          }
        }
      }
    }
  }
}
```


# Chat Providers
Source: https://www.courier.com/docs/external-integrations/direct-message/intro

Chat apps are increasingly the preferred communication channel for many users. Courier integrates with many providers.

<Tip>
  **TIP**

  Can't find a provider? Send us a chat ↘ or email [support@courier.com](mailto:support@courier.com)
</Tip>


# Microsoft Teams
Source: https://www.courier.com/docs/external-integrations/direct-message/microsoft-teams

Integrate Microsoft Teams with Courier by creating a Teams app and bot, configuring scopes, installing it in Teams, linking it in Courier using your Bot ID and password, and optionally enhancing notifications using Adaptive Cards, profile-based targeting, and overrides.

## Create and Configure a Microsoft Teams App

<Steps titleSize="h3">
  <Step title="Step 1: Create a Microsoft Teams App">
    1. Open the [Microsoft Teams Developer Portal](https://dev.teams.microsoft.com/).
    2. In the sidebar, navigate to **Apps**.
    3. Click **New app**.
    4. Enter a name for your app and click **Add**.

    <Tip>
      We recommend adding `-app` to your app name to differentiate it clearly from your bot, especially if you manage multiple bots or apps.
    </Tip>

    5. Save your **App ID** and **App Password**—you'll need these later.
    6. Navigate to **Configure > Basic Information**.
    7. Complete the required fields (e.g., App ID, App Name).
    8. Click **Save**.
  </Step>

  <Step title="Step 2: Add Bot Functionality to the App">
    <Info>
      To send notifications via Courier, your Microsoft Teams app requires a bot. You can use an existing bot or create a new one.
    </Info>

    1. In the sidebar of the [Microsoft Teams Developer Portal](https://dev.teams.microsoft.com/), select **Configure > App Features**.
    2. Click **Bot** to add bot functionality.
    3. If you already have a bot, select it and skip to step 9. Otherwise, click **Create a new bot** to open the **Bot Management Tool**.
    4. In the **Bot Management Tool**, click **+ New Bot** and provide a unique name.

    <Tip>
      Use a distinct name for your bot to avoid confusion with your app.
    </Tip>

    5. Select your bot in the **Bot Management Tool**.
    6. Under **Client Secrets**, create and securely store a new client secret.
    7. Return to the [Microsoft Teams Developer Portal](https://dev.teams.microsoft.com/) and select your app.
    8. In **Configure > App Features**, click **Bot** again.
    9. Select your bot from the dropdown.
    10. Configure bot scopes:
        * Under **What can your bot do?**, select:
          * ✓ Only send notifications (one-way conversations)
        * Under **Select the scopes where people can use your bot**, select:
          * ✓ Personal (for 1:1 notifications)
          * ✓ Team (for channel notifications)
          * ✓ Group Chat (for group chat notifications)
    11. Click **Save**.
  </Step>

  <Step title="Step 3: Install the App in Teams">
    After configuring your app and bot, install the app in Microsoft Teams. There are two primary ways to install:

    <AccordionGroup>
      <Accordion title="Method 1: Direct Upload (Development/Testing)">
        1. In the [Microsoft Teams Developer Portal](https://dev.teams.microsoft.com/), open your app.
        2. Click **Publish** in the sidebar.
        3. Choose **App Package**.
        4. Download the app package (.zip file).
        5. In Microsoft Teams, click **Apps**.
        6. Navigate to **Manage Your Apps**.
        7. Click **Upload an App**, then select **Upload a Custom App**.
        8. Select the downloaded ZIP file.
        9. Click the dropdown next to **Add** to specify the installation type:

        * **Add to a Team** (channel notifications)
        * **Add to a Chat** (group notifications)
        * **Add to a Meeting** (meeting integrations)
      </Accordion>

      <Accordion title="Method 2: Organization App Store (Recommended for Production)">
        This method requires admin permissions.

        To publish your app to your organization's app store:

        1. In the [Microsoft Teams Developer Portal](https://dev.teams.microsoft.com/), open your app.
        2. Click **Publish** and select **Publish to Your Org**.
        3. Click **Publish** to submit your app for admin approval.

        Once submitted:

        1. In the [Microsoft Teams Admin Center](https://admin.teams.microsoft.com/), navigate to **Teams Apps > Manage Apps**.
        2. Click **Upload New App** and upload your app package.

        Once approved by your organization's admin:

        1. In Microsoft Teams, click **Apps**.
        2. Select **Built for Your Org**.
        3. Locate your app, click **Add**, and choose the appropriate installation location (team or chat).
      </Accordion>
    </AccordionGroup>

    <Note>
      For direct 1:1 notifications, users must either:

      * Start a chat with the bot.
      * Be @mentioned by the bot in a channel where it's installed.
      * Have the app pre-installed by an admin for individual use.
    </Note>

    <Note>
      Clicking **Add** alone makes the app available but does not install the bot across teams or chats. Always use the dropdown menu to specify the correct installation context, typically choosing **Add to a Team** for notifications.
    </Note>

    Ensure you save your generated password securely. Keep the **Messaging endpoint** blank for now.
  </Step>

  <Step title="Step 4: Configure Microsoft Teams Integration in Courier">
    Now that your Microsoft Teams app is ready, configure it in Courier:

    In Courier, navigate to **Integrations > [Microsoft Teams](https://app.courier.com/channels/msteams)**. Enter your `Bot ID` and `Bot Password`, then click **Install Provider**.

    <Info>
      Courier’s integration requires the Bot ID and Bot Password. You can find your Bot ID at:

      * [Microsoft Teams Developer Portal](https://dev.teams.microsoft.com/bots) > **Tools > Bot Management**: *"Bot ID"*
      * [Microsoft Bot Framework](https://dev.botframework.com/bots) > **\[Bot Name] > Settings**: *"Bot handle"*
      * [Azure Portal App Registration](https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/RegisteredApps) > **All Applications > \[Bot Name]**: *"Application (client) ID"*
      * [Microsoft Entra Admin Center](https://entra.microsoft.com/#view/Microsoft_AAD_RegisteredApps/ApplicationsListBlade/quickStartType~/null/sourceType/Microsoft_AAD_IAM): *"Application (client) ID"*
    </Info>
  </Step>
</Steps>

Congratulations! You've successfully created a Microsoft Teams Bot and configured it in Courier. You can now send notifications to Microsoft Teams channels and users.

## Courier → Recipient Flowchart

```mermaid
flowchart TB
    subgraph col1 [" "]
        Courier[("Courier
        (Notification Service)")]
        TeamsBot{{"Microsoft Teams Bot"}}
    end
    
    subgraph col2 [" "]
        BotService[["Bot Service
        (Bot Framework SDK)
        Deployed on Azure / Netlify / etc"]]
        TeamsApp{{"Microsoft Teams App"}}
    end
    
    subgraph col3 [" "]
        TeamsDestination[("Microsoft Teams
        Channel/Chat/User")]
    end

    Courier -- Send message
    Bot ID & Bot Client Secret --> TeamsBot
    TeamsBot -- Forward message to
    endpoint URL --> BotService
    BotService -- Send message
    App ID & App Password --> TeamsApp
    TeamsApp -- Deliver message --> TeamsDestination

    %% Invisible lines for layout
    Courier === TeamsBot
    TeamsBot === BotService
    BotService === TeamsApp
    TeamsApp === TeamsDestination

    style Courier fill:#803492,stroke:#333,color:#FFFFFF
    style BotService fill:#bbf,stroke:#333
    style TeamsBot fill:#bfb,stroke:#333
    style TeamsApp fill:#fbb,stroke:#333
    style TeamsDestination fill:#464EB8,stroke:#333,color:#FFFFFF
    linkStyle 4 stroke:none,fill:none
    linkStyle 5 stroke:none,fill:none
    linkStyle 6 stroke:none,fill:none
    linkStyle 7 stroke:none,fill:none
    classDef default stroke-width:2px
    style col1 fill:none,stroke:none
    style col2 fill:none,stroke:none
    style col3 fill:none,stroke:none
```

## Profile Requirements

To send notifications to Microsoft Teams, Courier requires the recipient's user profile to include an `ms_teams` object. This object must contain the following fields:

* `tenant_id`: Your Microsoft Teams tenant ID.
* `service_url`: The service URL for your region (e.g., `https://smba.trafficmanager.net/amer`).
* One of the following identifiers:
  * `user_id`
  * `email`
  * `conversation_id`
  * Combination of `team_id` and `channel_name`

<CodeGroup>
  ```json user_id
  {
    "message": {
      "to": {
        "ms_teams": {
          "user_id": "<user_id>",
          "tenant_id": "<tenant_id>",
          "service_url": "https://smba.trafficmanager.net/amer"
        }
      }
    }
  }
  ```

  ```json email
  {
    "message": {
      "to": {
        "ms_teams": {
          "email": "<user_email>",
          "tenant_id": "<tenant_id>",
          "service_url": "https://smba.trafficmanager.net/amer"
        }
      }
    }
  }
  ```

  ```json conversation_id
  {
    "message": {
      "to": {
        "ms_teams": {
          "conversation_id": "<conversation_id>",
          "tenant_id": "<tenant_id>",
          "service_url": "https://smba.trafficmanager.net/amer"
        }
      }
    }
  }
  ```

  ```json team_id+channel_name
  {
    "message": {
      "to": {
        "ms_teams": {
          "team_id": "<team_id>",
          "channel_name": "<channel_name>",
          "tenant_id": "<tenant_id>",
          "service_url": "https://smba.trafficmanager.net/amer"
        }
      }
    }
  }
  ```
</CodeGroup>

<Info>
  To find your `tenant_id`, navigate to `https://teams.microsoft.com/?tenantId` and copy the `tenantId` query parameter from the redirected URL. If the parameter isn't visible, click the three-dot menu next to your Team, select **Get link to team**, and locate the `tenantId` in the URL.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/microsoft-teams/profile-requirements-locate-tenant-id.png" alt="Locate Tenant ID in Microsoft Teams" />
  </Frame>
</Info>

<Info>
  For users in the Americas region, the standard service URL is `https://smba.trafficmanager.net/amer`.
</Info>

<Info>
  To send messages using either `email` or `channel_name`, your bot must have the following Microsoft Graph API permissions:

  * `ChannelSettings.Read.All` (requires admin consent)
  * `TeamSettings.Read.All` (requires admin consent)
  * `User.Read.All`

  These permissions allow Courier to resolve the `user_id` or `channel_id` using the Microsoft Graph API.
</Info>

## Overrides

Overrides allow you to change the Azure Bot's App ID and App Password directly within your Courier message payload:

```json
{
  "message": {
    [...],
    "providers": {
      "msteams": {
        "override": {
          "config": {
            "appId": "<App ID>",
            "appPassword": "<App Password>"
          }
        }
      }
    }
  }
}
```

## Adaptive Cards

Courier supports Microsoft Teams [Adaptive Cards](https://adaptivecards.io/) through Jsonnet blocks within the Template Designer. Adaptive Cards let you create interactive, visually appealing notifications for your users in Microsoft Teams.

### Using Jsonnet Blocks

Jsonnet blocks enable you to customize the appearance and functionality of Adaptive Cards sent through Microsoft Teams. Follow the steps below to create and send your first Adaptive Card:

1. In Courier’s Template Designer, add a new Microsoft Teams channel.
2. Insert a Jsonnet block within your message.

<Frame caption="Jsonnet Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/microsoft-teams/designer-jsonnet-block.png" />
</Frame>

3. Open the [Adaptive Cards Designer](https://adaptivecards.io/designer/) and select or create a card layout.
4. Copy the card JSON from the "Card Payload Editor" into your Courier Jsonnet block.

<Frame caption="Sample Jsonnet">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/microsoft-teams/designer-jsonnet-block-sample.png" />
</Frame>

### Sending an Adaptive Card

When sending your Adaptive Card, ensure your Courier message includes the necessary sample data from the Adaptive Cards Designer:

```json
{
  "message": {
    "to": {
      "user_id": "QUICKSTART_USER"
    },
    "template": "TGAV18XGBAM565JHKFZY3SJYZB52",
    "data": {
      "title": "Publish Adaptive Card Schema",
      "description": "Now that we have defined the main rules and features of the format, we need to produce a schema and publish it to GitHub. The schema will be the starting point of our reference documentation.",
      "creator": {
        "name": "Matt Hidinger",
        "profileImage": "https://pbs.twimg.com/profile_images/3647943215/d7f12830b3c17a5a9e4afcc370e3a37e_400x400.jpeg"
      },
      "createdUtc": "2017-02-14T06:08:39Z",
      "viewUrl": "https://adaptivecards.io",
      "properties": [
        {"key": "Board", "value": "Adaptive Cards"},
        {"key": "List", "value": "Backlog"},
        {"key": "Assigned to", "value": "Matt Hidinger"},
        {"key": "Due date", "value": "Not set"}
      ]
    }
  }
}
```

Ensure your recipient profile includes a valid `ms_teams` object with the appropriate fields (e.g., `conversation_id`). Once sent, your Adaptive Card will appear in Microsoft Teams:

<Frame caption="MS Teams Adaptive Card">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/microsoft-teams/MS-teams-adaptive-card.png" />
</Frame>

Congratulations, you've successfully sent an Adaptive Card through Courier!

### Using @Mentions in Adaptive Cards

To include mentions in Adaptive Cards, you'll need two key elements:

* `<at>username</at>` within the Jsonnet block.
* A corresponding `entities` object within the Adaptive Card JSON payload, including the Teams user ID of the mentioned individual.

Here's a sample mention:

```json
{
  "msteams": {
    "entities": [
      {
        "type": "mention",
        "text": "<at>John Doe</at>",
        "mentioned": {
          "id": "29:123124124124",
          "name": "John Doe"
        }
      }
    ]
  }
}
```

Now you're ready to enhance your Microsoft Teams notifications with interactive Adaptive Cards and mentions.


# Slack
Source: https://www.courier.com/docs/external-integrations/direct-message/slack

Send Slack messages with Courier by creating a Slack app with appropriate scopes, configuring it in Courier, designing a notification template, and delivering messages via the Send API using a recipient profile containing access_token and either channel, user_id, or email.

## Set Up Chat Using Slack

### Introduction

This step-by-step guide will walk you through sending a Slack Direct Message using Courier. You will:

#### Prerequisites

You will need both Courier and Slack accounts to complete this tutorial. If you don't have accounts already, sign up before proceeding. You will also need permission to create a Slack app, configure that app, and add it to a Slack workspace. If you do not have access already, you can create your own free Slack workspace.

* [Sign up for Courier](https://app.courier.com/signup)
* [Sign up for Slack](https://slack.com/get-started)
* [Create a Slack Workspace](https://slack.com/create#email)

<Note>
  **RELATED RESOURCES**

  * [Courier API Reference](../../reference/intro)
  * ["An Introduction to Slack Apps"](https://api.slack.com/start/overview)
  * ["Managing Slack Apps"](https://api.slack.com/slack-apps)
  * [Slack API Documentation](https://api.slack.com/)
  * [Bash Environment Variables](https://www.gnu.org/software/bash/manual/html_node/Environment.html)
  * [cURL](https://curl.haxx.se/)
</Note>

### Add the Slack Integration

Once logged in to Courier, navigate to the ["Integrations" page](https://app.courier.com/integrations). Click on the Slack Integration to configure it.

<Frame caption="Courier Slack Integration">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/integration.png" />
</Frame>

Courier Integrations each require different pieces of information based on the needs of the Integration provider. We will send our configuration details as part of our request body when sending a message. For now, click "Install."

#### Slack App

Our Slack app will be relatively simple. Slack allows for complex interactivity and menu interactions. For a full overview of what's possible, visit ["An Introduction to Slack Apps"](https://api.slack.com/start/overview). We will create an app that delivers direct messages only. If you would like to use an existing Slack App, you can skip to [OAuth Permissions](#scopes).

**Create a Slack App**

Once logged in to Slack, navigate to the ["Apps"](https://api.slack.com/apps) page, and click the "Create an App" button. This will open a modal with two form fields: "App Name," and "Slack Development Workspace."

<Frame caption="Create a Slack App">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/create-app.png" alt="Create a Slack App" />
</Frame>

For the "App Name," use something like "Courier Test App." The "Development Slack Workspace" drop-down should display Slack workspaces where you are authenticated. Select the workspace you will be using to build this app. Then, click "Create App."

<Frame caption="Slack App Console">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/app-console.png" alt="Slack App Console" />
</Frame>

**OAuth Permissions**

For this tutorial, we'll be sending a direct message using the email address associated with the recipient's Slack account. To do this, your app will need the following scopes: `chat:write`, `im:write`, `users:read`, and `users:read.email`. Navigate to the "OAuth & Permissions" page in the sidebar menu. In the Scopes section of the page, add these scopes as Bot Token Scopes.

<Frame caption="Slack OAuth Scopes">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/oauth-scopes.png" alt="Slack OAuth Scopes" />
</Frame>

At the top of this page is a button labeled "Install App to Workspace" or "Reinstall App" if you're using an existing Slack App. Click this button.

<Frame caption="Slack OAuth & Permissions">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/install-app.png" alt="Slack OAuth & Permissions" />
</Frame>

You should see a "Bot User OAuth Access Token." Make note of this value.

<Frame caption="Slack OAuth & Permissions after App install">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/workspace-token.png" alt="Slack OAuth & Permissions after App install" />
</Frame>

Congratulations, you've configured your Integration with Slack. Now, let's create a Notification.

### Create a Courier Notification

Navigate to the Courier ["Notifications" page](https://app.courier.com/designer/notifications) and click "Create Notification." Click on “Untitled Notification” to rename your notification — for this tutorial, call it “Test Appointment Reminder.” From your list of configured Integrations, click on the Slack button. Then, click the “Slack” box that has been added to the sidebar in order to bring up a Slack template.

<Frame caption="Courier Notification Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/courier-notification-template.png" alt="Courier Notification Template" />
</Frame>

Courier provides a visual template editor, so you can send notifications that are formatted professionally. You can add content blocks to the template by clicking appropriate icons. If you remove a content block, it is moved to your Library in the sidebar and can be dragged back to the template if necessary.

These content blocks can include variables using a mustache-like template syntax. Surround text with a single set of curly braces and that text will be interpreted as a variable (it will also be highlighted in green). For example, you may want to include a `{name}` variable (we'll cover the source of this variable data later in this tutorial).

For now, add a text block and fill it with whatever text you want to send. You can also copy the example below, which contains a few variables for demonstration.

```text
Hello {name},

This is an appointment reminder from Courier. We look forward to seeing you on {apt_date} at {apt_time}.

If you need to change your appointment for any reason, please contact us at least 24 hours in advance at {support_url} or {support_phone}.

Best regards,

Courier
```

<Frame caption="Courier Notification Template with Sample Message">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/courier-notification-template-sample.png" alt="Courier Notification Template with Sample Message" />
</Frame>

When you are finished, click Publish in the upper right corner and give it a Publish Message of "Initial notification."

### Send a Message

Courier passes messages to Integrations via the [Send endpoint](../../reference/intro). For this tutorial, we will send our messages with cURL, but you can use your preferred language and HTTP library. You can also use an API testing tool such as [Postman](https://www.getpostman.com/) or [Insomnia](https://insomnia.rest/). For additional code samples, see the ["Courier API Reference"](../../reference/intro).

#### Authorization

Courier supports both basic and token authorization. For this tutorial, we will use token authorization. You can read more about authorization in Courier's ["Authorization Overview"](../../reference/intro).

We must send an `Authorization` header with each request. The Courier Send API also requires an `event`. The authorization token and event values are the "Auth Token" and "Notification ID" we see in the detail view of our “Test Appointment Reminder” event. Click the gear icon next to the Notification's name to reveal them.

<Frame caption="Courier Authorization Credentials">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/auth-credentials.png" alt="Courier Authorization Credentials" />
</Frame>

As a best practice, let's assign these values to environment variables. In a Bash terminal, you can add the variables by typing `VARIABLE_NAME="<value>"`. Some examples are provided below. Note that the values are just examples. Do not copy them — be sure to use the tokens associated with your account instead.

**Courier Auth Token Variable**

```bash
COURIER_AUTH_TOKEN="YpW2yEaMDyNg6agN9yGkc9ycEg8MxiKVTiiu2WVc8"
```

**Notification ID**

```bash
COURIER_NOTIFICATION_ID="YpW2yEaMDyNg6agN9yGkc9ycEg8"
```

These variables will persist for as long as your Bash session remains alive. If you quit your terminal, you will need to recreate them. However you handle your authorization tokens, keep them secure, and never add them to source control.

To verify that you created the variables correctly, you can see them by typing `echo $VARIABLE_NAME`. For example, typing `echo $COURIER_AUTH_TOKEN` will print the Courier Auth Token value to the terminal.

#### Building the cURL Request

We want to send a POST request to `https://api.courier.com/send`. Let's build our cURL request line-by-line. First, we'll tell cURL this is a POST request.

```bash
curl --request POST
```

Next, add the `Authorization` header using the `COURIER_AUTH_TOKEN` variable we set earlier. We send this as a Bearer token.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
```

We also have a `Content-Type` header, which is `application/json`.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
--header "Content-Type: application/json" \
```

We will pass the body of our request using the cURL `--data` option. You will often send this data in JSON format. To improve working with cURL, Courier also supports a custom urlencoded format that can be used in the place of JSON. This format allows nested data values using square bracket syntax. This guide provides examples in both formats, so feel free to use the format that you like best.

Our `--data` option must also contain an `event` and `recipient`. Additionally, we will send `profile` and `data` objects.

The `event` value, for this example, is the "Notification ID" that we assigned to our `COURIER_NOTIFICATION_ID` environment variable earlier.

A `recipient` should be a unique identifier that does not change. This prevents duplicate entries in the event that a recipient changes their email or some other identifying value. We do not have any recipients in this tutorial, so we can enter any string value. Something like `“spike_spiegel”` will work.

The `profile` information is an object that includes any key-value pairs required by our Integrations. In the case of Slack, we need the "Bot User OAuth Access Token" and "Email associated with the recipient's Slack Account." These are sent as `access_token` and `email` respectively in a `slack` object. You can find the required keys for any Integration by selecting an Integration on the ["Integrations" page](../../external-integrations/email/intro).

Lastly, we define message variables inside the `data` object. Remember the variables we set in the visual template editor? This is where we provide the values. Our example message had `name`, `apt_date`, `apt_time`, `support_phone`, and `support_url` variables. For this tutorial, we can assign example strings to each.

Our `--data` object should look like this:

<Tabs>
  <Tab title="JSON">
    ```json
    {
      "event": "'"$COURIER_NOTIFICATION_ID"'",
      "recipient": "spike_spiegel",
      "profile": {
        "slack": {
          "access_token": "xoxb-487947363398-212718859602-bXYRRbrQHAijFnfnuKLM7JV1",
          "email": "spiegel@bebop.com"
        }
      },
      "data": {
        "name": "Spike Spiegel",
        "apt_date": "June 26",
        "apt_time": "8:44 PM",
        "support_phone": "555-555-5555",
        "support_url": "https://courier.com/docs"
      }
    }
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    --data "event=$COURIER_NOTIFICATION_ID" \
    --data "recipient=spike_spiegel" \
    --data "profile[slack][access_token]=xoxb-487947363398-212718859602-bXYRRbrQHAijFnfnuKLM7JV1" \
    --data "profile[slack][email]=spiegel@bebop.com" \
    --data "data[name]=Spike Spiegel" \
    --data "data[apt_date]=June 26" \
    --data "data[apt_time]=8:44 PM" \
    --data "data[support_phone]=555-555-5555" \
    ```
  </Tab>
</Tabs>

Now add the Send URL, `https://api.courier.com/send`, to complete the cURL request.

**Complete cURL Request in both Formats**

<Tabs>
  <Tab title="cURL in JSON">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data '{
      "event": "'"$COURIER_NOTIFICATION_ID"'",
      "recipient": "spike_spiegel",
      "profile": {
        "slack": {
          "access_token": "xoxb-487947363398-212718859602-bXYRRbrQHAijFnfnuKLM7JV1",
          "email": "spiegel@bebop.com"
        }
      },
     "data":  {
        "name": "Spike Spiegel",
        "apt_date": "June 26",
        "apt_time": "8:44 PM",
        "support_phone": "555-555-5555",
        "support_url": "https://courier.com/docs"
       }
     }' \
    https://api.courier.com/send
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data "event=$COURIER_NOTIFICATION_ID" \
    --data "recipient=spike_spiegel" \
    --data "profile[slack][access_token]=xoxb-487947363398-212718859602-bXYRRbrQHAijFnfnuKLM7JV1" \
    --data "profile[slack][email]=spiegel@bebop.com" \
    --data "data[name]=Spike Spiegel" \
    --data "data[apt_date]=June 26" \
    --data "data[apt_time]=8:44 PM" \
    --data "data[support_phone]=555-555-5555" \
    https://api.courier.com/send
    ```
  </Tab>
</Tabs>

Before sending this request, be sure to replace the `access_token` and `email` values with the Bot User OAuth Access Token and recipient's Slack Email. Also, note the `"'"$COURIER_NOTIFICATION_ID"'"` formatting in the JSON formatted `--data` option. The quotes are necessary to escape the JSON quotes and access the `COURIER_NOTIFICATION_ID` variable.

Paste your complete cURL request in either format in your terminal and hit "Return." You should receive a response like `{"messageId":"<message id string>"}`. You will also receive a Slack message from your Slack app.

<Frame caption="Send the cURL Request">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/send-curl-request.png" alt="Send the cURL Request" />
</Frame>

<br />

<Frame caption="Delivered Slack Message">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/delivered-message.png" alt="Delivered Slack Message" />
</Frame>

## Slack App Requirements

To send notifications via Slack, a Slack App is required. You may use an existing or [create a new basic app](https://api.slack.com/authentication/basics).

### Scopes

The Slack App must be granted the `chat:write` scope. Additional scopes may be required based on the type of message you send. You can modify scopes by selecting the Slack App from [Your Apps](https://api.slack.com/apps) and clicking “OAuth & Permissions” from the side menu.

### Bot User OAuth Access Token

In order to send a message on behalf of your Slack App using Courier, a Bot User Oauth Access Token will need to be passed in the recipient profile. We’ll refer to this token as the `access_token`. You can find this token by selecting the Slack App from [Your Apps](https://api.slack.com/apps) and clicking “OAuth & Permissions” from the side menu.

<Image img={require("../../assets/platform/channels/slack-oauth.png")} alt="Location of Bot User OAuth Access Token in Your Apps." />

<Tip>
  **HELPFUL TIP**

  The bot access token will always start with `xoxb-`.
</Tip>

## Profile Requirements

The information required in the recipient profile is different based on the type of message you are sending.

### Sending a Direct Message

To send a message to a user, you’ll need to specify the user along with `access_token`. There are 3 ways to do this.

:::caution Additional Scopes Required
Sending Direct Messages requires an additional scope. Be sure to grant the `im:write` scope to your Slack App.
:::

#### Use the Slack Button

Slack’s [Slack Button](https://api.slack.com/docs/slack-button) lets you easily connect your Slack App with your customer’s account. As part of the OAuth process that the Slack Button initiates, Slack will fire a webhook to your servers. Simply store what they send you for that user and send it along to Courier, we’ll take care of the rest.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "slack": {
        // Contents of the JSON object provided by Slack's OAuth access method
      }
    }
  }
}
```

#### Using the email associated with Slack

To simplify setting up the recipient profile, we allow you to specify the `email` used to log into the Slack Workspace and Courier will do the `user_id` lookup for you.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "slack": {
        "access_token": "xoxb-xxxxx",
        "email": "user@example.com"
      }
    }
  }
}
```

<Note>
  **ADDITIONAL SCOPES REQUIRED**

  Using this method requires additional scopes. Be sure to grant the `users:read` and `users:read.email` scopes to your Slack App.
</Note>

#### Using `user_id`

For testing, the `user_id` is found by finding the user in the Workspace Directory, clicking the … button, and selecting “Copy member ID”. For production use cases you would likely retrieve these IDs via the Slack API.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "slack": {
        "access_token": "xoxb-xxxxx",
        "user_id": "UEFNTF6QL"
      }
    }
  }
}
```

<Tip>
  **HELPFUL TIP**

  A `user_id` will always start with a `U` or `W`.
</Tip>

### Sending to a Public or Private Channel

<Note>
  **ADDITIONAL SCOPES REQUIRED**

  To send to a public channel your app isn't a member of, be sure to grant your Slack app the `chat:write.public` scope.
</Note>

To send a message to a public or private channel, you’ll need to pass its `channel` along with the `access_token`. The easiest way to get this value is to open Slack in a browser, navigate to the desired channel and copy it from the URL.

<Frame caption="Locating the Channel in the Slack Web Client">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/slack-channel-id.png" alt="Locating the channel in the Slack web client." />
</Frame>

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "slack": {
        "access_token": "xoxb-xxxxx",
        "channel": "CL2MR6HEX"
      }
    }
  }
}
```

In the event that you don't have direct access to the Slack Workspace, you can also retrieve the channel ids using the [`conversations.list`](https://api.slack.com/methods/conversations.list) method of the Slack Web API using the `access_token`. Be sure to request the `channels:read` scope.

Here is an example that will fetch all public Slack Channels for a workspace and create a Courier Profile for each one using the [Courier Node.js SDK](https://github.com/trycourier/courier-node).

```js
const { CourierClient } = require("@trycourier/courier");
const { WebClient } = require("@slack/web-api");

// Courier Access Token is stored in COURIER_ACCESS_TOKEN environment variable
const courier = CourierClient();
// SLACK TOKEN must be granted channels:read scope
const web = new WebClient(process.env.SLACK_TOKEN);

const main = async () => {
  // Fetch all public channels for Slack Workspace
  const { channels } = await web.conversations.list({
    types: "public_channel",
    exclude_archived: true,
  });

  // Create a Courier Profile for each channel
  for (let channel of channels) {
    const { id, name } = channel;
    const recipientId = `CHANNEL_${name.toUpperCase()}`;
    try {
      await courier.replaceProfile({
        recipientId,
        profile: {
          slack: {
            access_token: process.env.SLACK_TOKEN,
            channel: id,
          },
        },
      });
      console.log(`${recipientId}: Profile saved for channel ${name}`);
    } catch (ex) {
      console.log(`Error saving profile for channel: ${name}`, ex);
    }
  }
};

main();
```

This will allow you to send to a channel using a user id of `CHANNEL_` + the channel name in all upper case .If you wanted to send a message to the general channel, it would look like the following:

```json
{
  "message": {
    "to": {
      "user_id": "CHANNEL_GENERAL"
    },
    "template": "HELLO_SLACK",
    "data": {
      "hello": "world"
    }
  }
}
```

<Tip>
  **HELPFUL TIPS**

  * A `channel` will always start with a `C`.
  * Before you can send to a channel, your Slack app must be invited into it.
</Tip>

### Responding to a Slash Command

If you are working with a [Slash Command](https://api.slack.com/interactivity/slash-commands) and would like to respond to it, you can use the `response_url` from the [POST payload](https://api.slack.com/interactivity/slash-commands#app_command_handling). This URL can be passed to Courier as a Slack Incoming Webhook.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "slack": {
        "incoming_webhook": {
          "url": "https://hooks.slack.com/commands/1234/5678"
        }
      }
    }
  }
}
```

<Note>
  **SETTING THE `RESPONSE_TYPE`**

  Slash Command responses can either be sent as `in_channel` or `ephemeral`. You can set this using an override. Set `override.slack.body.response_type` to either `in_channel` or `ephemeral` in the `POST /send` payload. The default is `ephemeral`.
</Note>

Since the POST payload also contains the `channel_id` and `user_id`, you may also respond using the methods above. However, you will need to also use the `access_token`, make sure the proper scopes are applied, and make sure your app is in the channel if you are responding in channel.

### Incoming Webhooks

Incoming Webhooks are a simple way to post messages from your app to a specific public channel. Unless you have a specific use case, we recommend sending using one of the methods outlined above. Follow the [Incoming Webhooks Setup Guide](https://api.slack.com/messaging/webhooks) and pass the Webhook URL via `slack.incoming_webhook.url` to the recipient profile.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "slack": {
        "incoming_webhook": {
          "url": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
        }
      }
    }
  }
}
```

### Order of Precedence

The Slack profile should only contain an OAuth Response, Incoming Webhook, or the `access_token` and one of the following: `channel`, `user_id`, or `email`. If there are multiples, the order of precedence is as follows: `channel` > `user_id` > `email`. For example, if your profile is as follows:

```json
{
  "message": {
    "to": {
      "slack": {
        "access_token": "xoxb-xxxxx",
        "channel": "CL2MR6HEX",
        "user_id": "UEFNTF6QL"
      }
    }
  }
}
```

The notification will be sent using the `channel`.

<Tip>
  Helpful Tips

  We look for `channel`, `user_id`, or `email` in the incoming request to decide what channel to send the notifications to, and our logic is as follow:

  * if `channel` is provided in the request, we just use `channel`.
  * if `channel` is missing but `user_id` is provided in the request, we use `user_id`.
  * if `channel` and `user_id` are missing but `email` is provided in the request, we use `email` to derive the `channel`
</Tip>

## Override

You can use a provider override to replace what we send to Slack’s [chat.postMessage](https://api.slack.com/methods/chat.postMessage) method. For example, you can choose to have links unfurl.

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "slack": {
        "access_token": "xoxb-xxxxx",
        "user_id": "UEFNTF6QL"
      }
    },
    "providers": {
      "slack": {
        "override": {
          "body": {
            "unfurl_links": true
          }
        }
      }
    }
  }
}
```

## Common Uses

### Mentioning Users

You can mention users in a Slack message using the syntax `<@USER_ID>` in a Notification Designer Block. You can also use a variable to set the Slack User ID.

<Frame caption="Mentioning a User in a Slack Message Using a Variable">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/slack-mention.png" alt="Mentioning a user in a Slack message using a variable." />
</Frame>

Learn more about [Advanced formatting with special parsing](https://api.slack.com/reference/surfaces/formatting#advanced).

### Replying to a thread

To reply to a thread in a Slack channel, you need to set the `thread_ts` value in the `override.slack.body` object. This tells Slack to reply to the message at the specified timestamp.

You can retrieve the `thread_ts` value by using [`conversation.history`](https://api.slack.com/methods/conversations.history#examples) method of the Slack Web API using the `access_token`. Be sure to request the `channels:read` scope.

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "slack": {
        "access_token": "xoxb-xxxxx",
        "channel": "C025MTFJ1EV"
      }
    },
    "providers": {
      "slack": {
        "override": {
          "body": {
            "thread_ts": "1234567890.123456"
          }
        }
      }
    }
  }
}
```

## Updating Slack Notifications

> How to set the replacement key path in the Slack channel integration settings.

### Via Replacement Key

To update the content of a Slack notification previously sent via Courier, you need to set the "replacement key" path in the Slack [channel settings](../../platform/sending/channel-settings) within your notification template.

We typically use `ts` as the value. Courier will then look for this key in the data block you pass to our API and use that to update an existing message instead of posting a new one.

<Frame caption="Slack Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/slack-ts.gif" alt="Slack Channel Settings" />
</Frame>

### Replacement Key Path

You can set the replacement key path from the channel settings.

1. Open the notification
2. Hover over the Slack Channel (or Direct Message channel with Slack set as the integration)
3. Click on the Channel Settings slide out menu

<Frame caption="Slack Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/slack-settings.png" alt="Slack Channel Settings" />
</Frame>

4. Click to open the Slack integration

<Frame caption="Open the Slack Integration">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/slack-integration.png" alt="Slack Integration Tab" />
</Frame>

5. Set the Replacement Key Path

<Frame caption="Set the Replacement Key Path">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/slack/slack-replacement-key.png" alt="Slack Replacement Key Path" />
</Frame>

## Deprecated

### Legacy Profile Format

When the Courier Slack Integration first launched, the profile data was accepted in a different format. While it is recommended that you use the format outlined above, the following profile format may still work for some Slack Apps.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "slackToken": "xoxb-xxxxx",
      "slackChannel": "CL2MR6HEX"
    }
  }
}
```

Congratulations, you’re on your way to crafting a better notification strategy that your audience is sure to appreciate.


# Stream Chat
Source: https://www.courier.com/docs/external-integrations/direct-message/stream-chat

Send notifications via Stream Chat using Courier by specifying channelType and channelId or a messageId in the recipient profile, and optionally overriding message body, API credentials, or endpoint settings for full customization.

# Stream Chat

> [https://getstream.io/chat/](https://getstream.io/chat/)

## Profile Requirements

To deliver a message to a recipient over Stream Chat, Courier must be provided a channelType and channelId OR a messageId
This value should be included in the recipient profile as `streamChat`.

```json
{
  "message": {
    //RecipientProfile using channelType and channelId
    "to": {
      "streamChat": {
        "channelType": "messaging",
        "channelId": "my-channel-id"
      }
    }
  }
}
```

```json
{
  "message": {
    //RecipientProfile using messageId (required for updating an existing message)
    "to": {
      "streamChat": {
        "messageId": "my-message-id"
      }
    }
  }
}
```

## Override

Overrides can be used to change the request body that Courier uses to send the message. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates.

* You can override any of the fields supported by Stream Chat's `POST` `/channels/{type}/{id}/message` API endpoint.
  [See all send request body fields here.](https://getstream.io/chat/docs/rest/#/product%3Achat/SendMessage)
* You can also override the `apiKey`, `apiSecret` and `senderId` fields via the override config object
* You can also override `baseUrl` (defaulted to `https://chat-us-east-1.stream-io-api.com`)

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "streamChat": {
        "channelType": "messaging",
        "channelId": "my-channel-id"
      }
    },
    "data": {
      "name": "Foo Bar"
    },
    "providers": {
      "stream-chat": {
        "override": {
          "body": {
            "skip_push": true
          },
          "config": {
            "baseUrl": "<overriden-base-url>",
            "apiKey": "<overriden-api-key>",
            "apiSecret": "<overriden-api-secret>",
            "senderId": "<overriden-sender-id>"
          }
        }
      }
    }
  }
}
```


# Viber
Source: https://www.courier.com/docs/external-integrations/direct-message/viber

Send Viber notifications via Courier by registering a webhooks server, obtaining the recipient’s UserID after they message your bot, and including it as viber.receiver in the recipient profile along with your bot’s auth token.

## Viber Requirements

1. A Viber [bot account](https://partners.viber.com/account/create-bot-account). Make a note of the auth token.
2. An active webhooks server that can receive POST requests from Viber. Viber provides a [nodejs utility](https://www.npmjs.com/package/viber-bot)
   for handling these requests.
3. The recipient must have an active [Viber](https://www.viber.com/en/) account logged into either the iOS or Android app.

## Webhooks Server

Before sending notifications Viber requires a webhooks server to be registered. This can be done using the following cURL command:

```bash
 curl -X POST 'https://chatapi.viber.com/pa/set_webhook'\
      -H 'Content-Type: application/json'\
      -H 'X-Viber-Auth-Token: <VIBER_AUTH_TOKEN>'\
      -d '{ "url": "<YOUR_WEBHOOK_SERVER_URL>", "event_types": ["delivered"] }'
```

This webhooks server will receive [events](https://www.npmjs.com/package/viber-bot) from Viber such as UserID's of users who wish to subscribe, as well as notification delivery status events.

## Sending a Direct Message

To send a direct message to a user, supply the Viber `UserID` to the `viber.receiver` property of the recipient profile. This `UserID` is sent to the webhooks server after they send a message to the Viber bot.

```json
{
  "message": {
    "to": {
      "viber": {
        "receiver": "12943673=="
      }
    }
  }
}
```


# WhatsApp
Source: https://www.courier.com/docs/external-integrations/direct-message/whatsapp

Send WhatsApp messages via Courier using Twilio by including the recipient’s phone_number in their profile, using Twilio-approved message templates, and ensuring the content adheres to WhatsApp’s non-promotional category and verification guidelines.

Courier uses the [Twilio API for WhatsApp ](https://twilio.com/whatsapp) as our delivery partner.

## Profile Requirements

To deliver a message to a recipient over Twilio Whatsapp, Courier must be provided the recipient's SMS-compatible telephone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    "to": {
      "phone_number": "555-555-5555"
    }
  }
}
```

## Notification Categories

Whatsapp allows the following [notification categories](https://www.twilio.com/docs/whatsapp/tutorial/send-whatsapp-notification-messages-templates#whatsapp-notification-categories):

* Marketing
* Authentication
* Utility

Other types of categories will likely be rejected, including:

* Account Update
* Alert Update
* Appointment Update
* Auto-Reply
* Issue Resolution
* Payment Update
* Personal Finance Update
* Reservation Update
* Shipping Update
* Ticket Update
* Transportation Update

## WhatsApp Template Verification

When using WhatsApp templates with Twilio, it's essential to understand the verification process, as WhatsApp has stringent guidelines to ensure the quality and appropriateness of messages sent through their platform.

### Create the Template

**Template Structure:** WhatsApp [message templates](https://www.twilio.com/docs/whatsapp/tutorial/send-whatsapp-notification-messages-templates) are predefined messages that can include placeholders for dynamic content. Templates can be of various types such as text, media (images, documents), or interactive messages (buttons, list messages).

**Template Categories:** These are typically [categorized](#notification-categories) into use cases like transactional updates, customer service, or alerts.

### Submit the Template for Approval

**Access Twilio Console:** Navigate to the Twilio Console and go to the Messaging section.

**Create Template:** In the WhatsApp Templates section, create a new template. You'll need to provide details like the template name, category, language, and the message content. This content should be free of any promotional material as WhatsApp strictly disallows promotional content in templates.

**Submit for Review:** Once you've filled in the necessary details, [submit](https://www.twilio.com/docs/whatsapp/tutorial/message-template-approvals-statuses) the template for WhatsApp's review.

### WhatsApp Approval Process

**Review by WhatsApp:** After submission, the template goes through WhatsApp's review process. This usually takes a few minutes to up to 24 hours. WhatsApp reviews the template to ensure it complies with their policies.

Possible Outcomes:

* **Approved:** If the template meets WhatsApp's guidelines, it will be approved. You can now use this template to send messages via the Twilio API.

* **Rejected:** If the template does not meet the guidelines, it will be [rejected](https://www.twilio.com/docs/whatsapp/tutorial/message-template-approvals-statuses#common-rejection-reasons). Reasons for rejection could include promotional content, inappropriate language, or violating other WhatsApp policies. You will need to modify the template and resubmit it for approval.

### Using the Approved Template

**Integration with Courier:** Once your template is approved, you can use the [Send API](../../reference/send/message) to send messages using this template. You'll need to specify the template name and provide the necessary parameters for the placeholders in your API requests.

**Sending Messages:** When sending a message using an approved template, you make an API call with the required details. Twilio handles the rest, ensuring the message is delivered to the recipient via WhatsApp.

<Tip>
  **TEMPLATES DEFINITION**

  While Twilio defines the content of your notification as a `template`, the format of your notification is what's important for the verificaion process. Once it's approved, you can use [Courier Templates](../../platform/content/notification-designer/design-a-notification) as long as they follow the approved format design.
</Tip>

### Key Considerations

**Template Content:** Ensure that the content of your templates is clear, concise, and non-promotional. Include all necessary placeholders and provide sample values to give context during the review process.

**Localization:** If you need to send messages in multiple languages, you'll need to create and get approval for each language version of the template.

**Monitoring and Updates:** Keep an eye on the [performance](https://help.twilio.com/articles/360039737753-Recommendations-and-best-practices-for-creating-WhatsApp-Message-Templates) of your templates. If users frequently report your messages as spam, it might affect your ability to send messages. You may need to periodically update your templates to remain compliant with any new WhatsApp guidelines.


# Amply
Source: https://www.courier.com/docs/external-integrations/email/amply

Send email notifications via Amply using Courier by including the recipient’s email in their profile, and optionally overriding fields like sender name or adding attachments through the providers.amply.override object.

## Profile Requirements

To deliver a message to a recipient over Amply, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json title=JSON
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Override

You can use a provider override to replace what we send to Amply's Mail Send API. For example, you can use following payload to override `from email` with your request:

```json title=JSON
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "amply": {
        "override": {
          "config": {
            "fromName": "pigeons@courier.com"
          }
        }
      }
    }
  }
}
```

Everything inside of `message.providers.amply.override` will replace what we send to Amply's Messages API. You can see all the available options by visiting [Amply API docs](https://docs.sendamply.com/reference/mail-send).

## Sending Attachments

To include an attachment in the email, you can use the following override:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "data": {
      "hello": "world"
    },
    "providers": {
      "amply": {
        "override": {
          "attachments": [
            {
              "filename": "billing.pdf",
              "contentType": "application/pdf",
              "data": "Q29uZ3JhdHVsYXRpb25zLCB5b3UgY2FuIGJhc2U2NCBkZWNvZGUh"
            }
          ]
        }
      }
    }
  }
}
```


# AWS SES
Source: https://www.courier.com/docs/external-integrations/email/aws-ses

Integrate AWS SES with Courier by authenticating via Access Keys or IAM Role, verifying sender and recipient emails, and optionally customizing email content or attachments using overrides—while ensuring proper SES region, sandbox limits, and IAM permissions are configured.

## Setting Up Email with AWS SES

<Note>
  **INFO PREREQUISITES**

  Before beginning this tutorial, ensure you have an AWS SES account. If you do not have an AWS SES account yet, please sign up:

  * [Sign up for AWS SES ](https://portal.aws.amazon.com/billing/signup#/start)
</Note>

### Step 1: Add the AWS SES Integration to Courier

Before choosing an authentication method:

1. Log in to Courier

2. Navigate to the [Integrations](https://app.courier.com/integrations) page

3. Select the [AWS SES Integration](https://app.courier.com/integrations/aws-ses) to configure it

### Authentication Methods

AWS SES integration in Courier supports two authentication methods:

1. AWS Access Keys

2. AWS IAM Role (Cross-Account Trust)

Choose one of the following authentication methods to get started:

### Method 1: AWS Access Keys

* Create an AWS SES API Key:

  1. Log in to AWS SES

  2. Navigate to "Settings" → "My Security Credentials"

  3. Go to "Access management" → "Users"

  4. On the "Users" page, select "Add user" and follow the steps to create a new IAM user with `AmazonSESFullAccess` permissions

<Note>
  **INFO IMPORTANT**

  Be sure to download and save the Access Key ID and Secret Access Key upon user creation.
</Note>

<Info>
  **CREATING AND CONFIGURING A CUSTOM IAM POLICY**

  If your use case requires specific permissions beyond the `AmazonSESFullAccess` policy, you may need to create a custom IAM policy:

  1. In the AWS IAM console, navigate to "Policies" and select “Create policy.”

  2. Use the JSON editor to define the policy. Here's an example of a custom policy allowing specific SES actions:

  ```json
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Sid": "VisualEditor0",
        "Effect": "Allow",
        "Action": ["ses:SendRawEmail", "ses:GetSendStatistics"],
        "Resource": "*"
      }
    ]
  }
  ```

  3. After defining the policy, attach it to the IAM user created for AWS SES.
</Info>

* Integrate AWS SES API Key with Courier:
  After creating the IAM user and obtaining the API keys, add them to the Courier AWS SES integration page.

### Method 2: AWS IAM Role (Cross-Account Trust)

* Configure the minimum required IAM policy for sending emails:

```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ses:SendEmail",
                "ses:SendRawEmail"
            ],
            "Resource": [
              "arn:aws:ses:region:${YOUR_AWS_ACCOUNT_ID}:identity/example.com","arn:aws:ses:region:${YOUR_AWS_ACCOUNT_ID}:identity/specific@example.com"
            ]
        }
    ]
}
```

* Create an IAM Role with the following trust policy:

```json
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Principal": {
				"AWS": "515966497413"
			},
			"Action": "sts:AssumeRole",
			"Condition": {
				"StringEquals": {
					"sts:ExternalId": "${YOUR_COURIER_WORKSPACE_ID}"
				}
			}
		}
	]
}
```

* After creating the role, copy its ARN and paste it in the "Role ARN" field in the Courier AWS SES integration settings.

<Note>
  When using IAM Role authentication, you'll need to replace the following placeholders:

  * `${YOUR_AWS_ACCOUNT_ID}`: Your AWS account ID

  * `${YOUR_COURIER_WORKSPACE_ID}`: Your Courier workspace ID
</Note>

## Complete Your AWS SES Setup

After configuring your chosen authentication method, complete the following steps:

### Step 1: Add a Verified "From" Address in Courier

1. Add a verified email address (e.g., [support@example.com](mailto:support@example.com)) to the "From Address" field in Courier.

   * The "From" email address you set will be used for all emails sent via the AWS SES integration. You can [override this default "From" address](https://www.courier.com/docs/platform/content/notification-settings/email-fields/#setting-the-reply-to-cc-and-bcc-addresses) on a per channel basis within your templates.

2. Ensure the "From" address is a verified identity in your AWS-SES account.

3. For more information on verifying identities, see [Verifying an Identity for Amazon SES Sending Authorization <Icon icon="arrow-up-right-from-square" iconType="solid" />](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-identity-owner-tasks-verification.html).

<Warning>
  **AWS SES SANDBOX LIMITATIONS**

  New AWS SES accounts start in a limited state called the "SES sandbox." In this mode, you can only send emails to verified addresses and domains. To enable email sending to non-verified addresses, you must request AWS to lift these restrictions. For guidance on this process, see [Moving out of the Amazon SES sandbox](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html).
</Warning>

### Step 2: Configure AWS SES Region

Select your preferred AWS SES region from the dropdown menu in the Courier AWS SES integration.

### Step 3: Create and Send a Courier Notification using AWS SES

Refer to [Create and Send a Message](../../platform/sending/send-message) for instructions on building your notification template and sending a message with the Courier API using cURL.

## Profile Requirements for Message Delivery

To deliver a message via AWS SES, include the recipient's email address in the profile as shown below:

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }
    // ... rest of message definition
  }
}
```

## Overrides

Overrides in Courier offer the flexibility to customize settings specifically for AWS SES, adapting to more advanced email sending requirements. This is useful when you need to pass custom configurations, such as a MIME 1.0 string, instead of using the standard Courier template. While using Courier's override feature, you can modify various fields that are specific to AWS SES's `SendRawEmail` method.

For a comprehensive list of fields that can be overridden in the context of AWS SES, refer to the AWS documentation on the [SendRawEmail API](https://docs.aws.amazon.com/ses/latest/APIReference/API_SendRawEmail.html).

### Using Overrides to Modify Email Settings

Here’s an example of how to implement an override in Courier to modify the RawMessage data:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "email": "kpryde@xavierinstitute.edu"
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "aws-ses": {
        "override": {
          "body": {
            "RawMessage": {
              "Data": "<Mime 1.0 compatible message>"
            }
          },
          "config": {
            "accessKeyId": "<Access Key ID>",
            "secretAccessKey": "<Secret Access Key>"
          }
        }
      }
    }
  }
}
```

### Sending Attachments with Overrides

To include an attachment in your email, use the `attachments` override as follows:

```json
{
  "message": {
    "to": {
      "email": "kpryde@xavierinstitute.edu"
    },
    "template": "<COURIER_NOTIFICATION_ID>",
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "aws-ses": {
        "override": {
          "attachments": [
            {
              "filename": "hello.txt",
              "contentType": "text/plain",
              "data": "SGk="
            }
          ]
        }
      }
    }
  }
}
```

## Troubleshooting

> Dealing with Amazon SES requests can result in some errors. You can find them below to help you troubleshoot. You can also check the [Courier Logs](../../platform/logging/message-logs) to help debug any provier errors you may encounter. For anything else, you may contact [Courier Support](mailto:support@courier.com).

### Amazon SES 554 Error

This error occurs due to numerous reasons.

1. It occurs when you have not verified the sender email (sender identity) on Amazon SES.

2. If you're using the Amazon SES in the sandbox environment and have not verified the recipient's email address, you may encounter this error.

3. You may encounter this error when you've provided an invalid recipient email address.

#### Solution

You can try the [following](https://docs.aws.amazon.com/ses/latest/dg/troubleshoot-smtp.html) steps mentioned below.

* Open the Amazon SES console and verify that the sender email identity you are using has a verification status of `verified`.

* If you're using the sandbox environment, ensure that you have added the recipient email address as a verified identity on the SES console. It is mandatory to add the recipient emails on Amazon SES when running in the Sandbox environment.

* If both the sender and recipient email addresses are verified, ensure that you have provided the correct recipient email address for the "To" parameter.

* If none of the above works for you, verify that the region specified in your AWS SDK is the same region that contains the verified identities. For example, if the verified identities are located in the Virginia region (us-east-1), you should initialize the Amazon SES instance in the same region.

### Amazon SES Email Address is Not Verified

This error occurs if you try to send emails using an unverified identity in the region specified.

Additionally, this error occurs when sending emails in the sandbox environment using unverified sender and recipient email identities.

#### Solution

You may try the following to [resolve](https://docs.aws.amazon.com/ses/latest/dg/troubleshoot-error-messages.html) the error.

1. **Verify the region**

Verify that you are connected to SES in the region where all your verified identities are located.

1. **Confirm identity verification**

Confirm that the sender's identity has been verified. If you are using the sandbox environment, confirm the verification status of the recipient identities as well.

To do so, visit the SES Console and navigate to your verified identities. The status of the identities should be marked as "Verified" as shown below.

<Frame caption="Viewing the verified identities on SES">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/aws-ses/amazon-ses-verified-identities.png" />
</Frame>

If the status for your identity is `Unverified` you will have to verify the identity before sending the email.

1. **Verify email addresses**

If the identities have been verified, ensure that the email addresses you have provided are correctly spelled.

### AWS SES Timeout

This error occurs when the client (such as an EC2) cannot establish a TCP connection to the public endpoint of Amazon SES.

Generally, this is caused when the client (EC2) has a firewall to block outgoing connections on the SMTP ports (25, 587, or 465) or if the client does not have access to an internet connection.

#### Solution

To resolve the error, ensure that the client has an active/stable internet connection.

Hereafter, update the firewall rules on the client to allow outgoing connections on ports 25, 587, and 465 (depending on the port you use).

### AWS SES BCC Not Working

This error occurs when the recipient email in the "TO" field is present in the "BCC" field. Certain email providers do not allow the email to contain duplicate recipients.

Additionally, this error may occur if the email address in the "BCC" field does not exist.

#### Solution

To resolve the error, ensure that the recipient's email address is not the same as the `BCC` email address.

If the email addresses in the `BCC` are unique, verify the validity of the email addresses specified in the "BCC" list.

### Error: is not authorized to perform ses sendemail

This error occurs when an AWS service such as a Lambda function is not authorized to send an email using Amazon SES.

#### Solution

To resolve the error, you will need to attach a policy to the IAM role to allow the AWS resource to execute the `ses:SendEmail` action.

For example, if you wish to provide a Lambda function the permission to send an email using SES, you would have to create and attach an inline policy for the function's IAM role that allows the `ses:SendEmail` action. The inline policy is shown below.

```json
{
  "Version": "2012-10-17",
  "Statement" : [
     {
       "Sid": "Inline Policy for SES Send Email",
       "Effect": "Allow",
       "Resource" : "*",
       "Actions":[
         "ses:SendEmail"
       ]
     }
  ]
}
```

The inline policy shown above will ensure that the AWS service is allowed to execute the `SendEmail` action on an Amazon SES resource and will resolve the permission error.

### Amazon SES Authentication Credentials Invalid

This error occurs when the SMTP username and password provided to connect to the SMTP endpoint of Amazon SES are incorrect.

#### Solution

1. **Verify credentials:** Ensure that the username and password you enter are correct and the same one SES provided.

2. **Verify the region:** SMTP credentials in Amazon SES differ per region. Therefore, ensure that the credentials used are associated with your region.

3. **Use SMTP credentials and not console credentials:**

* It is important to note that the credentials used in the SMTP endpoint are not the same as those you use for AWS. It would help if you had the Amazon SES SMTP credentials to access the Amazon SES SMTP interface.

* You will have to create an IAM user that can invoke the SES services and generate SMTP credentials for the newly created IAM user. It can be done using the SES console.

* First, navigate to your SES account dashboard. You will see a section titled - "SMTP Settings." Under this, you should see the output shown below.

<Frame caption="Viewing SES Settings in AWS Console">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/aws-ses/aws-ses-authentication.png" />
</Frame>

Click "Create SMTP Credentials." This will direct you to the IAM Console, where you will be prompted to create an IAM User with the policies required to invoke SES.

<Frame caption="Creating the IAM user">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/aws-ses/aws-ses-settings.png" />
</Frame>

Afterward, click "Create." This will create the IAM User, generate the credentials, and display the output below.

<Frame caption="Viewing the SMTP credentials for IAM user">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/aws-ses/aws-ses-create-iam-user.png" />
</Frame>

To resolve the error, you can download the generated credentials and provide these values for the SMTP username/password.

### Amazon SES 530 Authentication Required

This error occurs when the SMTP credentials provided to Amazon SES are invalid. This can be the username, password, port, and endpoint. Additionally, this error may occur if you have not used TLS.

#### Solution

You can try the following to see which one fixes the error.

1. **Verify credentials:** Ensure that the SMTP username and password you provide are the same credentials you created for the IAM User with permissions to invoke SES.

2. **Verify the region:** Verify that you connect to SES in the region where all your verified identities are located.

3. **Verify SMTP configurations:** Visit the SES console and navigate to your account dashboard. In the account dashboard, you should see the SMTP configurations for SES.

<Frame caption="SMTP configurations for SES">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/aws-ses/amazon-ses-smtp-settings.png" />
</Frame>

Cross-check the SMTP configurations shown in the SES console with the endpoint and the port you've provided to ensure that SES has been configured correctly.

1. **Use the correct port:** Ensure that the port used is port - 587. Some users have experienced issues using the TLS Wrapper port and found that using port 587 (TLS port) fixes the error.

### AWS SES Rate Limit

Amazon SES has a limit of **one email per second** in the sandbox environment. However, you can exceed this rate for a short period, not for long periods.

#### Solution

To [resolve this error](https://docs.aws.amazon.com/ses/latest/dg/manage-sending-quotas.html), contact AWS and request production access for SES. Your request will be reviewed, and based on your use case, AWS will grant a reasonable email rate for your SES account. Later on, you can increase this rate by contacting AWS.

### AWS SES Email Not Received

This error occurs if the templated email is missing a handlebar parameter. For example, if the email template requires five handlebar parameters and you've specified only four, Amazon SES will send the email and will not display any error. However, the email will not get delivered to the recipient, causing this. It may be possible to debug by viewing the [Courier logs](../../platform/logging/message-logs) for any rendering errors.

#### Solution

To resolve the error, verify that all the required handlebar parameters have been added to the templated email parameters when sending the email.


# Gmail
Source: https://www.courier.com/docs/external-integrations/email/gmail

Send Gmail messages via Courier by authorizing your Gmail account through OAuth, providing the recipient's email in their profile, and optionally switching accounts via the integration settings—ideal for testing and small-scale sending due to Gmail's API rate limits.

> This is the documentation for the Courier Gmail email provider.

## Authorizing Courier for Gmail

When you set up Gmail as a provider and connect your gmail account, Courier will request permission to send emails on your behalf. Courier will not send any emails unless you explicitly make a send request using the provider.

<Note>
  **GMAIL QUOTA RATE LIMITS**

  Gmail's API has [limitations](https://developers.google.com/gmail/api/reference/quota) based on per-method quota usage (250 per second) thus Gmail is really intended for getting started fast, testing, or small-scale sending.
  Courier has a variety of [email provider integrations](../) that won't rate limit you.
</Note>

### OAuth Authorization

Google APIs use the OAuth protocol for authentication and authorization. Once given permission, Courier will request an access token from the Google Authorization Server, and send the token to the Google Gmail API on your behalf.

To give Courier access to your Gmail credentials, you will need to consent to Courier's requested Gmail scopes by signing into your desired Gmail inbox and allowing Courier permission.

### Updating Authorized Account

On the [Gmail Integration](https://app.courier.com/integrations/gmail) page, you can click on "Authorize a different Gmail inbox" to send messages from a different account. This will require you to give permissions for the new email account every time you change the account.

## Profile Requirements

To deliver a message to a recipient over Gmail, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Override

The Gmail provider will support overrides soon.


# Email Providers
Source: https://www.courier.com/docs/external-integrations/email/intro

Learn how to integrate Courier with email providers and use channel-level overrides to customize subjects, content, branding, and tracking in email notifications.

```json
// Recipient Profile
{
  "email": "support@courier.com"
}
```

## Email Channel Overrides

Use the email channel override property to override channel settings such as subject, reply to, from, cc, and bcc email addresses, along with HTML and text content. These overrides will apply to all your email channels within a template.

<Note>
  **OVERRIDES**

  Overrides occur **after** the render step in the notification lifecycle. This means the the rendered tab in the logs page **will not show** the end result for a notification that was rendered with overrides.
</Note>

**Data structure for the email channel override:**

```json
{
  "message": {
    // ...rest of request
    "channels": {
      "email": {
        "override": {
          "attachments": [],
          "bcc": "",
          "brand": {},
          "cc": "",
          "from": "",
          "html": "",
          "reply_to": "",
          "subject": "",
          "text": "",
          "tracking": {
            "open": false
          }
        }
      }
    }
  }
}
```

## Brand override

The `channels.email.override.brand` property uses same schema as the API request payload for the [POST /brands](../../reference/brands/create-a-brand) endpoint.

Brand elements that can be overridden:

* logo
* top bar color
* brand colors

**Example:**

```json
{
  "message": {
    // ...rest of request
    "channels": {
      "email": {
        "override": {
          "brand": {
            "settings": {
              "email": {
                "header": {
                  "logo": {
                    "image": "https://www.courier.com/logo.png",
                    "href": "https://www.courier.com"
                  },
                  "barColor": "#674ea7"
                }
              }
            }
          }
        }
      }
    }
  }
}
```

## Allowlist for AWS IP Addresses

Some email providers, such as Mailgun, offer [additional security](https://help.mailgun.com/hc/en-us/articles/360012244474-IP-Allowlist) to allowlist IP addresses to access their API. Courier is hosted on AWS and does not provide an IP range in the form of an allowlist.

As a workaround, users can subscribe to the `AmazonIpSpaceChanged` topic, and receive notifications about any changes to the AWS IP address ranges. For details, refer to the [AWS documentation](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html#subscribe-notifications).


# MailerSend
Source: https://www.courier.com/docs/external-integrations/email/mailersend

Send emails via MailerSend using Courier by verifying your domain, providing the recipient’s email, and optionally overriding fields like API key, sender address, or subject—while ensuring your domain is verified to avoid common 422 errors.

# MailerSend

## Profile Requirements

To deliver a message to a recipient over MailerSend, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Authentication Token Generation

First you need to add your domain and verify it.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/mailersend-domains.png" />
</Frame>

Click on “Manage” button and in the following screen generate an authentication token

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/mailersend-api-tokens.png" />
</Frame>

## Override

Overrides can be used to change the request body that Courier uses to send an email. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by MailerSend's `https://api.mailersend.com/v1/email` endpoint ([see all mail send request body fields here](https://developers.mailersend.com/api/v1/email.html#send-an-email). Below is an example of overriding the subject:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "profile": {
      "email": "hello@courier.com"
    },
    "data": {
      "name": "Abdul Ahmady"
    },
    "providers": {
      "mailersend": {
        "override": {
          "config": {
            "apiKey": "<YOUR_OVERRIDDEN_API_KEY>",
            "fromAddress": "<YOUR_OVERRIDDEN_From_ADDRESS>",
            "url": "<YOUR_OVERRIDDEN_URL>"
          }
        }
      }
    }
  }
}
```

## MailerSend 422 Response Code

When submitting an API request to MailerSend, you will get a numbered response code. One of the most common response error codes is a [422 error](https://www.mailersend.com/help/how-to-start-sending-emails#rest-api). This could be due to a couple of reasons:

|                                                                         |                                                                                                                                                                                                                                     |
| ----------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| From email must be verified                                             | The domain of the from email address must match the domain that the API token or SMTP credentials are from.                                                                                                                         |
| You must provide HTML and/or text versions of the email or template ID. | The API request is missing one of the 3 parameters needed to send the content, either the text or HTML version or the template ID.                                                                                                  |
| This file type is not supported.                                        | The attachment file encoded in Base 64 is not part of MailerSend supported filetypes. Please refer to [supported file types here](https://developers.mailersend.com/api/v1/email.html#supported-file-types "supported file types"). |
| The reply to email must be a valid email address.                       | The reply\_to email parameter is not a valid email address, it may be missing an "@", make sure it's a valid email address without typos.                                                                                           |
| Email quota reached                                                     | The account's quota has been reached. Make sure your account has been approved so you can send more than 100 emails per month.                                                                                                      |

Among these errors, the most common one our users encounter is the email domain verification. Please make sure your email domain is [verified with MailerSend](https://www.mailersend.com/help/how-to-verify-and-authenticate-a-sending-domain) before you start using it in your Courier integration.


# Mailgun
Source: https://www.courier.com/docs/external-integrations/email/mailgun

Learn how to send email notifications through Mailgun using Courier, including profile setup, API overrides, attachments, EU host support, delivery webhooks, and troubleshooting common errors.

## Profile Requirements

To deliver a message to a recipient over Mailgun, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Override

You can use a provider override to replace what we send to Mailgun's Messages API. For example, you can use [Mailgun's Tagging](https://documentation.mailgun.com/en/latest/user_manual.html#tagging) with your request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "mailgun": {
        "override": {
          "body": {
            "o:tag": "notifications"
          },
          "config": {
            "apiKey": "<your API Key>",
            "domain": "<domain>",
            "host": "<host>"
          }
        }
      }
    }
  }
}
```

Everything inside of `message.providers.mailgun.override` will replace what we send to Mailgun's Messages API.

For example, one could override the `fromAddress` field in the request Courier sends to Mailgun by including the override param and data inside the `config` object.

You can see all the available options by visiting [Mailgun API docs](https://documentation.mailgun.com/en/latest/api-sending.html).

<Info>
  **EU HOST**

  If you want to send emails using Mailgun's EU infrastructure, set the `host` to `api.eu.mailgun.net`:

  ```json
  "config": {
    "apiKey": "<your API Key>",
    "domain": "<domain>",
    "host": "api.eu.mailgun.net"
  }
  ```
</Info>

## Sending Attachments

To include an attachment in the email, you can use the following override:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "data": {
      "hello": "world"
    },
    "providers": {
      "mailgun": {
        "override": {
          "attachments": [
            {
              "filename": "billing.pdf",
              "contentType": "application/pdf",
              "data": "Q29uZ3JhdHVsYXRpb25zLCB5b3UgY2FuIGJhc2U2NCBkZWNvZGUh"
            }
          ]
        }
      }
    }
  }
}
```

## IP Address Range

Mailgun offers an [additional security](https://help.mailgun.com/hc/en-us/articles/360012244474-IP-Allowlist) feature that can whitelist certain IP addresses from accessing their API. Courier is hosted on AWS and does not provide an IP range in the form of an allow list.

AWS provides [a workaround](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html#subscribe-notifications) by allowing users to subscribe and update the changes themselves. Whenever there is a change to the AWS IP address ranges, AWS will send notifications to subscribers of the `AmazonIpSpaceChanged` topic.

## Setup mailhooks for delivery status updates

By default, after we send a message, Courier will poll Mailgun periodically to find out if the message was delivered successfully or not.
To get faster status updates, you can setup a webhook so Mailgun can report delivery status directly to Courier.

To start, login to Courier and visit the Mailgun provider configuration screen (from the Channels menu on the left side). There, you will find a Webhook URL.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/mailgun/courier-ui.png" />
</Frame>

Copy this URL, then login to Mailgun. On the left side, choose Sending, then Webhooks.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/mailgun/mailgun-ui.png" />
</Frame>

On the webhooks screen, first make sure the Domain selected on the top-right matches the Mailgun Domain on the Courier Mailgun configuration screen.
Then, click the green "Add webhook" button. For event type, choose "Delivered Messages". Now paste the webhook URL into the URL field and press "Create webhook."

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/mailgun/mailgun-form.png" />
</Frame>

Repeat the process to create a webhook for event type "Permanent Failure." Use the same URL for both webhooks.

Now that the webhook is configured, you will no longer need Courier to poll for status updates. We recommend waiting about an hour before disabling polling in order to make sure there is no gap in status reporting of any messages already in-flight.
When you are ready, return to the Courier Mailgun configuration screen. Flip the toggle switch labeled "Enable polling for status updates" into the off position. Then, press the Save button at the bottom of the screen.

## Troubleshooting

> Dealing with Mailgun requests can result in some errors. You can find them below to help you troubleshoot. You can also check the [Courier Logs](../../platform/logging/message-logs) to help debug any provier errors you may encounter. For anything else, you may contact [Courier Support](mailto:support@courier.com).

### 550 Error Mailgun

This error occurs when there is no active MX Record for the subdomain of the sender's hostname.

#### Solution

To resolve the error, visit your DNS and add the MX records for your subdomains. Afterward, wait about an hour or two to let the record changes propagate. Hereafter, you will not encounter this error.

### Mailgun Account Probation

Mailgun will place your account under probation and enforce a sending limit if you:

1. Send emails with high bounce rates.
2. Send too many bulk emails.
3. Send emails with high spam rates.

#### Solution

To resolve the error:

1. Mailgun recommends verifying your account through their Business Verification process.

2. Avoid sending bulky emails and remove all the email addresses that create bounces to avoid damaging your sender's reputation. It will automatically terminate your account from probation.


# Mailjet
Source: https://www.courier.com/docs/external-integrations/email/mailjet

Learn how to send email notifications using Courier and Mailjet, including setting up recipient profiles, using message overrides, and attaching files via Mailjet’s Send API.

## Profile Requirements

To deliver a message to a recipient over Mailjet, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Override

You can use a provider override to replace what we send to Mailjet's Send API. For example, you can add an attachment to your request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "mailjet": {
        "override": {
          "body": {
            "Attachments": [
              {
                "ContentType": "text/plain",
                "Filename": "test.txt",
                "content": "VGhpcyBpcyB5b3VyIGF0dGFjaGVkIGZpbGUhISEK"
              }
            ]
          }
        }
      }
    }
  }
}
```

Everything inside of `message.providers.mailjet.override` will replace what we send to Mailjet's Send API. You can see all the available options by visiting [Mailjet API docs](https://dev.mailjet.com/email/guides/send-api-V3/).


# Mandrill
Source: https://www.courier.com/docs/external-integrations/email/mandrill

Integrate Mandrill with Courier to send emails, override messages with custom payloads, import templates, and resolve common issues like merge vars, click tracking, and recipient visibility.

## Profile Requirements

To deliver a message to a recipient over Mandrill, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Override

You can use a provider override to replace what we send to Mandrill's Messages API. For example, you can add an attachment to your request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "mandrill": {
        "override": {
          "body": {
            "message": {
              "from_email": "me@courier.com",
              "subject": "Hi there",
              "from_name": "Rod",
              "attachments": [
                {
                  "type": "text/plain",
                  "name": "myfile.txt",
                  "content": "ZXhhbXBsZSBmaWxl"
                }
              ]
            }
          }
        }
      }
    }
  }
}
```

Everything inside of `messageproviders.mandrill.override` will replace what we send to Mandrill's Messages API. You can see all the available options by visiting [Mandrill API docs](https://mandrillapp.com/api/docs/messages.JSON.html).

## Template Import

You can import your Mandrill templates to use with Courier from the [Mandrill configuration page](https://app.courier.com/channels/mandrill).

<Note>
  **INFO**

  You will need to provide your Mandrill credentials in the configuration page to retrieve your saved templates from Mandrill.
</Note>

Templates ready for import will appear as selectable checkboxes that you can choose to import.

<Frame caption="Template Import Page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/template-import.png" />
</Frame>

## Troubleshooting

> Dealing with Mandrill requests can result in some errors. You can find them below to help you troubleshoot. You can also check the [Courier Logs](../../platform/logging/message-logs) to help debug any provier errors you may encounter. For anything else, you may contact [Courier Support](mailto:support@courier.com).

### Mandrill Click Tracking Not Working

The three most possible causes are that you have not enabled click tracking, the URL is too long, so Mandrill has disabled click-tracking, or the clicks are recorded but not updated in real-time.

**Solution**

* Verify whether click tracking is enabled.
  1. Login to the Mandrill account.
  2. Settings -> Sending defaults.
  3. Make sure your choice from the "Track Clicks" dropdown is something other than the "No click tracking" option.

Even though the opens and clicks get tracked in real-time, the status updates may delay from a few minutes to a more extended period. For instance, this may happen due to the load on their system. [Courier provides its own link tracking](../../platform/workspaces/intro) which you can use to track clicks on your notification templates.

### Mandrill BCC Not Working

Most possibly, Mandrill is ignoring the BCC headers and hence this error occurs.

**Solution**

1. Try using the `to` field rather than the `bcc` field and set `X-MC-PreserveRecipients` to `false`.
2. Or, specify the `bcc` address in the `to` field but declare their `type` as `bcc`. Add `preserve_recipients: true` under the message section. The code given below is an example of implementing this solution.

```json
{
   "to":[
      {
         "email":"to1.email@example.com",
         "name":"To Recipient Name",
         "type":"to"
      },
      {
         "email":"bcc1.email.@example.com",
         "name":"BCC1 Recipient Name",
         "type":"bcc"
      },
      {
         "email":"bcc2.email@example.com",
         "name":"BCC2 Recipient Name",
         "type":"bcc"
      }
   ]
}
```

You can read more about X-MC-PreserveRecipients [here](https://mailchimp.com/developer/transactional/docs/smtp-integration/#customize-messages-with-smtp-headers)

### Mandrill CC Emails Not Present

CC email fields passed to Mandrill's API can be done [through the designer](../../platform/content/notification-settings/email-fields), or through an API override definition.

Similar to BCC emails not being respected, `preserve_recipients` needs to be set to `true` in the override schema request so that CC emails can be passed to Mandrill's API. If this field isn't set to `true`, **CC emails will not be sent**.

**Solution**

```json
{
  // ... rest of message definition
   "providers":{
      "mandrill":{
         "override":{
            "body":{
               "message":{
                  "preserve_recipients":true, //This setting must be set to true when passing CC recipients.
                  "attachments":[
                     {
                        "name":"Top Secret",
                        "content":"ZXhhbXBsZSBmaWxl",
                        "type":"application/pdf"
                     }
                  ]
               }
            }
         }
      }
   }
}
```

### Mandrill Merge Vars Not Working

The cause for the Mandrill merge variables not working is possible because of an issue with the nesting.

**Solution**

You have to make sure the variables are nested in the `message` struct for it to work. Given below is an example of how it is done.

```javascript
var message = {
    to: "sample@gmail.com",
    mandrillOptions: {
        template_name: 'template1',
        template_content: [
        ],
        message: {
            "merge": true,
            "merge_language": "handlebars",
            "global_merge_vars": [{
                    "name": "fname",
                    "content": "Sample"
                },
                {
                    "name": "email",
                    "content": "sample@gmail.com"
                }
            ]
        }
    }
};
```


# OneSignal Email
Source: https://www.courier.com/docs/external-integrations/email/onesignal-email

Integrate OneSignal Email with Courier by configuring your App ID and REST API Key, and sending messages using either oneSignalPlayerID or oneSignalExternalUserId in recipient profiles.

## Configuration Requirements

You can get your OneSignal `App ID` and `REST API Key` by following [these instructions](https://documentation.onesignal.com/docs/accounts-and-keys).

## Profile Requirements

To deliver a message to a recipient over OneSigal, Courier must be
provided the recipient's [PlayerId](https://documentation.onesignal.com/docs/users#section-player-id) or [ExternalId](https://documentation.onesignal.com/docs/user-model-migration-guide#user-model). This ID should be included in the recipient profile as `oneSignalPlayerID` or `oneSignalExternalUserId`.

```json
{
  "message": {
    "to": {
       "oneSignalPlayerID": "..."
    }
  }
}
// or
{
  "message": {
    "to": {
       "oneSignalExternalUserId": "..."
    }
  }
}
```


# Postmark
Source: https://www.courier.com/docs/external-integrations/email/postmark

Integrate Postmark with Courier to send emails using recipient profiles, apply message overrides, and leverage Postmark templates and attachments with support for custom config like MessageStream.

## Profile Requirements

To deliver a message to a recipient over Postmark, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Subject Character Limit

<Info>
  The Postmark API imposes a subject line limit of \~60 characters. Due to encoding, using emojis or special characters in the subject line will decrease this limit.
</Info>

## Override

You can use a provider override to replace what we send to Postmark's Email API. For example, you can add [MessageStream](https://postmarkapp.com/support/article/1207-how-to-create-and-send-through-message-streams) and an attachment to your request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "postmark": {
        "override": {
          "config": {
            "MessageStream": "message_stream_id"
          },
          "body": {
            "Attachments": [
              {
                "Name": "readme.txt",
                "Content": "dGVzdCBjb250ZW50",
                "ContentType": "text/plain"
              }
            ]
          }
        }
      }
    }
  }
}
```

The `message.providers.postmark.override` property can be used to replace what we send to Postmark's Email API. Note: the override does not replace the entire object, only the elements that you define in the body of the override. You can see all the available options by visiting the [Postmark API docs](https://postmarkapp.com/developer/api/email-api).

## Using Postmark Templates

```json
{
	"message": {
		"to": {
			"email": "rodrigo@courier.com"
		},
		"template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
		"providers": {
			"postmark": {
				"override": {
					"config": {
						"url": "https://api.postmarkapp.com/email/withTemplate"
					},
					"body": {
						"TemplateId": "123456",
						"TemplateModel": {
							"product_url": "product_url_Value",
							"product_name": "product_name_Value",
							"name": "name_Value",
							"action_url": "action_url_Value",
							"login_url": "login_url_Value",
							"username": "username_Value",
							"trial_length": "trial_length_Value",
							"trial_start_date": "trial_start_date_Value",
							"trial_end_date": "trial_end_date_Value",
							"support_email": "support_email_Value",
							"live_chat_url": "live_chat_url_Value",
							"sender_name": "sender_name_Value",
							"help_url": "help_url_Value",
							"company_name": "company_name_Value",
							"company_address": "company_address_Value"
						}
					}
				}
			}
		}
	}
}
```

The `message.providers.postmark.override.config` property can be used to override Courier templates and use Postmark's [Templates API](https://postmarkapp.com/developer/api/templates-api).

Be sure to include the `https://api.postmarkapp.com/email/withTemplate` URL in the config object along with the `TemplateId` and `TemplateModel` in the the body.

<Warning>
  **MAPPING A COURIER TEMPLATE TO YOUR POSTMARK TEMPLATE OVERRIDE**

  When using Postmark templates - make sure your request uses a `template` parameter instead of `content`. Otherwise the `content` object will take presedence over the Postmark override. The `template_id` must be valid or an error will occur.
</Warning>


# Resend
Source: https://www.courier.com/docs/external-integrations/email/resend

Send email notifications via Courier using Resend by setting up an API key, configuring sender details, building dynamic templates, and using overrides for advanced customization.

## Introduction

This step-by-step guide will walk you through sending an email notification using Courier and Resend.

### Prerequisites

You will need both Courier and Resend accounts to complete this tutorial. If you don't have accounts already, sign up before proceeding.

<CardGroup>
  <Card title="Sign up for Courier" icon="angle-right" href="https://app.courier.com/signup" iconType="solid" horizontal />

  <Card title="Sign up for Resend" icon="angle-right" href="https://resend.com/signup" iconType="solid" horizontal />
</CardGroup>

<Note>
  **RELATED RESOURCES**

  * [Courier API Reference](../../reference/intro)
  * [Resend API Keys](https://resend.com/api-keys)
  * [Bash Environment Variables](https://www.gnu.org/software/bash/manual/html_node/Environment.html)
  * [cURL](https://curl.haxx.se/)
</Note>

## Add the Resend Integration

Once logged in to Courier, navigate to the ["Integrations" page](https://app.courier.com/integrations). Click on the Resend Integration to configure it.

Courier Integrations each require different pieces of information based on the needs of the Integration provider (see the requirements for each in the "Provider Documentation" section of the sidebar to the left). In the case of Resend, we need a Resend "API Key" and a "From Address."

### Resend API Key

Once logged in to Resend, navigate to ["API Keys"](https://resend.com/api-keys). On this page, you can create an API key, name it, and give it appropriate permissions.

Copy your API key from Resend, and paste it into the "API Key" field on the Courier Integration page.

### Resend From Address

Next, add an email address to the "From Address" field. This will usually be an address such as [noreply@mydomain.com](mailto:noreply@mydomain.com), [news@mydomain.com](mailto:news@mydomain.com), or [mail@mydomain.com](mailto:mail@mydomain.com), but any address you control is fine. Once both fields are complete, click the “Add Integration” button, then click "Save.”

## Create a Notification

Navigate to the Courier [Notifications page](https://app.courier.com/designer/notifications) and click “Create Notification.” Click on “Untitled Notification” to rename your notification — for this tutorial, call it “Test Appointment Reminder.” From your list of configured Integrations, click on the Resend button. Then, click the “Resend” box that has been added to the sidebar in order to bring up an email template.

You can add message blocks to the template by clicking one of the three icons on the mock-up email. The paper icon adds a text block. The hand icon adds a link. The list icon adds a repeatable list.

These text blocks can include variables using a mustache-like template syntax. Surround text with a single set of curly braces and that text will be interpreted as a variable (it will also be highlighted in green). For example, you may want to include a `{name}` variable (we'll cover the source of this variable data later in this tutorial).

Be sure to set the subject line for your email as well (click “New Subject” to edit it). You can also choose a different From Address — this will override the From Address in your Resend Integration settings.

Finish populating the email template with whatever text you want to send. You can also copy the example below, which contains a few variables for demonstration.

```text
Hello {name},

This is an appointment reminder from Courier. We look forward to seeing you on {apt_date} at {apt_time}.

If you need to change your appointment for any reason, please contact us at least 24 hours in advance at {support_url} or {support_phone}.

Best regards,

Courier
```

When you are finished, click Publish in the upper right corner and give it a Publish Message of "Initial notification."

## Send a Message

Courier passes messages to Integrations via the [Send endpoint](../../reference/send/message). For this tutorial, we will send our messages with cURL, but you can use your preferred language and HTTP library. You can also use an API testing tool such as [Postman](https://www.getpostman.com/) or [Insomnia](https://insomnia.rest/). For additional code samples, see the ["Courier API Reference"](../../reference/intro).

### Authorization

Courier supports both basic and token authorization. For this tutorial, we will use token authorization. You can read more about authorization in Courier's ["Authorization Overview"](../../reference/intro).

We must send an `Authorization` header with each request. The Courier Send API also requires an `event`. The authorization token and event values are the "Auth Token" and "Notification ID" we see in the detail view of our “Test Appointment Reminder” event. Click the gear icon next to the Notification's name to reveal them.

As a best practice, let's assign these values to environment variables. In a Bash terminal, you can add the variables by typing `VARIABLE_NAME="<value>"`. Some examples are provided below. Note that the values are just examples. Do not copy them — be sure to use the tokens associated with your account instead.

#### Courier Auth Token Variable

`COURIER_AUTH_TOKEN="YpW2yEaMDyNg6agN9yGkc9ycEg8MxiKVTiiu2WVc8"`

#### Notification ID

`COURIER_NOTIFICATION_ID="YpW2yEaMDyNg6agN9yGkc9ycEg8"`

These variables will persist for as long as your Bash session remains alive. If you quit your terminal, you will need to recreate them. However you handle your authorization tokens, keep them secure, and never add them to source control.

To verify that you created the variables correctly, you can see them by typing `echo $VARIABLE_NAME`. For example, typing `echo $COURIER_AUTH_TOKEN` will print the Courier Auth Token value to the terminal.

### Building the cURL Request

We want to send a POST request to `https://api.courier.com/send`. Let's build our cURL request line-by-line. First, we'll tell cURL this is a POST request.

```bash
curl --request POST
```

Next, add the `Authorization` header using the `COURIER_AUTH_TOKEN` variable we set earlier. We send this as a Bearer Token.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
```

We also have a `Content-Type` header, which is `application/json`.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
--header "Content-Type: application/json" \
```

We will pass the body of our request using the cURL `--data` option. You will often send this data in JSON format. To improve working with cURL, Courier also supports a custom urlencoded format that can be used in the place of JSON. This format allows nested data values using square bracket syntax. This guide provides examples in both formats, so feel free to use the format that you like best.

Our `--data` option must also contain an `event` and `recipient`. Additionally, we will send `profile` and `data` objects.

The `event` value, for this example, is the "Notification ID" that we assigned to our `COURIER_NOTIFICATION_ID` environment variable earlier.

A `recipient` should be a unique identifier that does not change. This prevents duplicate entries in the event that a recipient changes their email or some other identifying value. We do not have any recipients in this tutorial, so we can enter any string value. Something like “katherine\_pryde” will work.

The `profile` information is an object that includes any key-value pairs required by our Integrations. In the case of Resend, we need an `email` key and value. This is the address where our message will be delivered. You can find the required keys for any Integration by selecting an Integration on the ["Integrations" page](https://app.courier.com/integrations). See the ["Integration Provider Requirements"](../../external-integrations/email/intro) for details.

Lastly, we define message variables inside the `data` object. Remember the variables we set in the
visual template editor? This is where we provide the values. Our example message had `name`,
`apt_date`, `apt_time`, `support_phone`, and `support_url` variables. For this tutorial, we can
assign example strings to each.

Our `--data` option should look like this:

<Tabs>
  <Tab title="JSON">
    ```json
    {
      "message": {
        "template": "$COURIER_NOTIFICATION_ID",
        "to": {
          "email": "kpryde@xavierinstitute.edu"
        },
        "data": {
          "name": "Katherine Pryde",
          "apt_date": "July 31, 2019",
          "apt_time": "11:00 AM",
          "support_phone": "555-555-5555",
          "support_url": "https://courier.com/docs"
        }
      }
    }
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    --data "template=$COURIER_NOTIFICATION_ID" \
    --data "to[email]=kpryde@xavierinstitute.edu" \
    --data "data[name]=Katherine Pryde" \
    --data "data[apt_date]=July 31" \
    --data "data[apt_time]=11:00 AM" \
    --data "data[support_phone]=555-555-5555" \
    --data "data[support_url]=https://www.courier.com/docs/" \
    ```
  </Tab>
</Tabs>

Now add the Send URL, `https://api.courier.com/send`, to complete the cURL request.

#### Complete cURL Request in both Formats

<Tabs>
  <Tab title="cURL in JSON">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data '{
      "message": {
        "template": "'"$COURIER_NOTIFICATION_ID"'",
        "to": {
          "email": "kpryde@xavierinstitute.edu"
        },
        "data": {
          "name": "Katherine Pryde",
          "apt_date": "July 31",
          "apt_time": "11:00 AM",
          "support_phone": "555-555-5555",
          "support_url": "https://courier.com/docs"
        }
      }
    }' \
    https://api.courier.com/send
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data "message[template]=$COURIER_NOTIFICATION_ID" \
    --data "message[to][email]=kpryde@xavierinstitute.edu" \
    --data "message[data][name]=Katherine Pryde" \
    --data "message[data][apt_date]=July 31" \
    --data "message[data][apt_time]=11:00 AM" \
    --data "message[data][support_phone]=555-555-5555" \
    --data "message[data][support_url]=https://www.courier.com/docs/" \
    https://api.courier.com/send
    ```
  </Tab>
</Tabs>

Before sending this request, be sure to replace the `kpryde@xavierinstitute.edu` value with an email address you can access. Also, note the `"'"$COURIER_NOTIFICATION_ID"'"` formatting in the JSON formatted `--data` option. The quotes are necessary to escape the JSON quotes and access the `COURIER_NOTIFICATION_ID` variable.

Paste your complete cURL request in either format in your terminal and hit "Return." You should receive a response like `{"messageId":"<message id string>"}`. You will also receive an email at the address you specified in the request body. Be sure to check your spam folder if the message doesn’t arrive in your inbox.

Congratulations, you’re on your way to crafting a better notification strategy that your audience is sure to appreciate.

## Profile Requirements

To deliver a message to a recipient over Resend, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Sending Attachments

To include an attachment in the email, you can use the following override:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "data": {
      "hello": "world"
    },
    "providers": {
      "resend": {
        "override": {
          "attachments": [
            {
              "filename": "billing.pdf",
              "contentType": "application/pdf",
              "data": "Q29uZ3JhdHVsYXRpb25zLCB5b3UgY2FuIGJhc2U2NCBkZWNvZGUh"
            }
          ]
        }
      }
    }
  }
}
```

## Overrides (Advanced)

You can use a provider override to replace what we send to Resend's API. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by Resend's `/emails` endpoint. For example, you can use [Resend's Tagging](https://resend.com/docs/api-reference/emails/send-email) with your request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "resend": {
        "override": {
          "body": {
            "tags": [{ "name": "environment", "value": "development" }]
          }
        }
      }
    }
  }
}
```


# SendGrid
Source: https://www.courier.com/docs/external-integrations/email/sendgrid

Send email notifications through Courier using SendGrid by configuring an API key, sender address, optional template imports, and advanced overrides for full control over message delivery.

## Introduction

This step-by-step guide will walk you through sending an email notification using Courier and SendGrid. You will:

<TOCInline toc={toc.slice(1)} maxHeadingLevel={2} />

### Prerequisites

You will need both Courier and SendGrid accounts to complete this tutorial. If you don't have accounts already, sign up before proceeding.

<CardGroup>
  <Card title="Sign up for Courier" icon="angle-right" href="https://app.courier.com/signup" iconType="solid" horizontal />

  <Card title="Sign up for SendGrid" icon="angle-right" href="https://signup.sendgrid.com/" iconType="solid" horizontal />
</CardGroup>

<Note>
  **RELATED RESOURCES**

  * [Courier API Reference](../../reference/intro)
  * [SendGrid API Keys](https://sendgrid.com/docs/ui/account-and-settings/api-keys/)
  * [Bash Environment Variables](https://www.gnu.org/software/bash/manual/html_node/Environment.html)
  * [cURL](https://curl.haxx.se/)
</Note>

## Add the SendGrid Integration

Once logged in to Courier, navigate to the ["Integrations" page](https://app.courier.com/integrations). Click on the SendGrid Integration to configure it.

Courier Integrations each require different pieces of information based on the needs of the Integration provider (see the requirements for each in the "Provider Documentation" section of the sidebar to the left). In the case of SendGrid, we need a SendGrid "API Key" and a "From Address."

### SendGrid API Key

Once logged in to SendGrid, navigate to ["Settings" → "API Keys"](https://app.sendgrid.com/settings/api_keys). On this page, you can create an API key, name it, and give it appropriate permissions.

<Frame caption="SendGrid API Key Page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/api-key.png" />
</Frame>

API permissions can be complicated, but very little is needed for this guide (you can visit the ["API Keys"](https://sendgrid.com/docs/ui/account-and-settings/api-keys/) section of the [*SendGrid Knowledge Center*](https://sendgrid.com/docs/) for further details).

To send a message, your API key needs only "Mail Send" permissions. You can select “Restricted Access” and toggle on only this “Mail Send” setting for now.

<Frame caption="Creating a SendGrid API Key">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/creating-api-key.gif" />
</Frame>

<Note>
  **API KEY PERMISSIONS**

  In order for Courier to receive `delivered` events from SendGrid, your [API key permissions](https://sendgrid.com/en-us/blog/introducing-api-key-permissions) need to include `email activity` and `inbound parse` so that `delivered` events can be counted in your message metrics.
</Note>

Copy your API key from SendGrid, and paste it into the "API Key" field on the Courier Integration page.

<Frame caption="Add a SendGrid API Key to Courier">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/api-key-courier.png" />
</Frame>

### SendGrid From Address

Next, add an email address to the "From Address" field. This will usually be an address such as [noreply@mydomain.com](mailto:noreply@mydomain.com), [news@mydomain.com](mailto:news@mydomain.com), or [mail@mydomain.com](mailto:mail@mydomain.com), but any address you control is fine. Once both fields are complete, click the “Add Integration” button, then click "Save.”

<Frame caption="Add a SendGrid From Address to Courier">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/from-address.png" />
</Frame>

## Create a Notification

Navigate to the Courier [Notifications page](https://app.courier.com/designer/notifications) and click “Create Notification.” Click on “Untitled Notification” to rename your notification — for this tutorial, call it “Test Appointment Reminder.” From your list of configured Integrations, click on the SendGrid button. Then, click the “SendGrid” box that has been added to the sidebar in order to bring up an email template.

You can add message blocks to the template by clicking one of the three icons on the mock-up email. The paper icon adds a text block. The hand icon adds a link. The list icon adds a repeatable list.

<Frame caption="Courier Notification Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/courier-notification-template.png" />
</Frame>

These text blocks can include variables using a mustache-like template syntax. Surround text with a single set of curly braces and that text will be interpreted as a variable (it will also be highlighted in green). For example, you may want to include a `{name}` variable (we'll cover the source of this variable data later in this tutorial).

Be sure to set the subject line for your email as well (click “New Subject” to edit it). You can also choose a different From Address — this will override the From Address in your SendGrid Integration settings.

Finish populating the email template with whatever text you want to send. You can also copy the example below, which contains a few variables for demonstration.

```text
Hello {name},

This is an appointment reminder from Courier. We look forward to seeing you on {apt_date} at {apt_time}.

If you need to change your appointment for any reason, please contact us at least 24 hours in advance at {support_url} or {support_phone}.

Best regards,

Courier
```

<Frame caption="Courier Notification Template with Sample Message">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/courier-notification-template-sample.png" />
</Frame>

When you are finished, click Publish in the upper right corner and give it a Publish Message of "Initial notification."

## Send a Message

Courier passes messages to Integrations via the [Send endpoint](../../reference/send/message). For this tutorial, we will send our messages with cURL, but you can use your preferred language and HTTP library. You can also use an API testing tool such as [Postman](https://www.getpostman.com/) or [Insomnia](https://insomnia.rest/). For additional code samples, see the ["Courier API Reference"](../../reference/intro).

### Authorization

Courier supports both basic and token authorization. For this tutorial, we will use token authorization. You can read more about authorization in Courier's ["Authorization Overview"](../../reference/authorization).

We must send an `Authorization` header with each request. The Courier Send API also requires an `event`. The authorization token and event values are the "Auth Token" and "Notification ID" we see in the detail view of our “Test Appointment Reminder” event. Click the gear icon next to the Notification's name to reveal them.

<Frame caption="Courier Authorization Credentials">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/courier-auth-credentials.png" />
</Frame>

As a best practice, let's assign these values to environment variables. In a Bash terminal, you can add the variables by typing `VARIABLE_NAME="<value>"`. Some examples are provided below. Note that the values are just examples. Do not copy them — be sure to use the tokens associated with your account instead.

#### Courier Auth Token Variable

`COURIER_AUTH_TOKEN="YpW2yEaMDyNg6agN9yGkc9ycEg8MxiKVTiiu2WVc8"`

#### Notification ID

`COURIER_NOTIFICATION_ID="YpW2yEaMDyNg6agN9yGkc9ycEg8"`

These variables will persist for as long as your Bash session remains alive. If you quit your terminal, you will need to recreate them. However you handle your authorization tokens, keep them secure, and never add them to source control.

To verify that you created the variables correctly, you can see them by typing `echo $VARIABLE_NAME`. For example, typing `echo $COURIER_AUTH_TOKEN` will print the Courier Auth Token value to the terminal.

### Building the cURL Request

We want to send a POST request to `https://api.courier.com/send`. Let's build our cURL request line-by-line. First, we'll tell cURL this is a POST request.

```bash
curl --request POST
```

Next, add the `Authorization` header using the `COURIER_AUTH_TOKEN` variable we set earlier. We send this as a Bearer Token.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
```

We also have a `Content-Type` header, which is `application/json`.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
--header "Content-Type: application/json" \
```

We will pass the body of our request using the cURL `--data` option. You will often send this data in JSON format. To improve working with cURL, Courier also supports a custom urlencoded format that can be used in the place of JSON. This format allows nested data values using square bracket syntax. This guide provides examples in both formats, so feel free to use the format that you like best.

Our `--data` option must also contain an `event` and `recipient`. Additionally, we will send `profile` and `data` objects.

The `event` value, for this example, is the "Notification ID" that we assigned to our `COURIER_NOTIFICATION_ID` environment variable earlier.

A `recipient` should be a unique identifier that does not change. This prevents duplicate entries in the event that a recipient changes their email or some other identifying value. We do not have any recipients in this tutorial, so we can enter any string value. Something like “katherine\_pryde” will work.

The `profile` information is an object that includes any key-value pairs required by our Integrations. In the case of SendGrid, we need an `email` key and value. This is the address where our message will be delivered. You can find the required keys for any Integration by selecting an Integration on the ["Integrations" page](https://app.courier.com/integrations). See the ["Integration Provider Requirements"](../../external-integrations/email/intro) for details.

Lastly, we define message variables inside the `data` object. Remember the variables we set in the
visual template editor? This is where we provide the values. Our example message had `name`,
`apt_date`, `apt_time`, `support_phone`, and `support_url` variables. For this tutorial, we can
assign example strings to each.

Our `--data` option should look like this:

<Tabs groupId="code">
  <Tab title="JSON">
    ```json
    {
      "message": {
        "template": "$COURIER_NOTIFICATION_ID",
        "to": {
          "email": "kpryde@xavierinstitute.edu"
        },
        "data": {
          "name": "Katherine Pryde",
          "apt_date": "July 31, 2019",
          "apt_time": "11:00 AM",
          "support_phone": "555-555-5555",
          "support_url": "https://courier.com/docs"
        }
      }
    }
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    --data "template=$COURIER_NOTIFICATION_ID" \
    --data "to[email]=kpryde@xavierinstitute.edu" \
    --data "data[name]=Katherine Pryde" \
    --data "data[apt_date]=July 31" \
    --data "data[apt_time]=11:00 AM" \
    --data "data[support_phone]=555-555-5555" \
    --data "data[support_url]=https://www.courier.com/docs/" \
    ```
  </Tab>
</Tabs>

Now add the Send URL, `https://api.courier.com/send`, to complete the cURL request.

#### Complete cURL Request in both Formats

<Tabs>
  <Tab title="cURL in JSON">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data '{
      "message": {
        "template": "'"$COURIER_NOTIFICATION_ID"'",
        "to": {
          "email": "kpryde@xavierinstitute.edu"
        },
        "data": {
          "name": "Katherine Pryde",
          "apt_date": "July 31",
          "apt_time": "11:00 AM",
          "support_phone": "555-555-5555",
          "support_url": "https://courier.com/docs"
        }
      }
    }' \
    https://api.courier.com/send
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data "message[template]=$COURIER_NOTIFICATION_ID" \
    --data "message[to][email]=kpryde@xavierinstitute.edu" \
    --data "message[data][name]=Katherine Pryde" \
    --data "message[data][apt_date]=July 31" \
    --data "message[data][apt_time]=11:00 AM" \
    --data "message[data][support_phone]=555-555-5555" \
    --data "message[data][support_url]=https://www.courier.com/docs/" \
    https://api.courier.com/send
    ```
  </Tab>
</Tabs>

Before sending this request, be sure to replace the `kpryde@xavierinstitute.edu` value with an email address you can access. Also, note the `"'"$COURIER_NOTIFICATION_ID"'"` formatting in the JSON formatted `--data` option. The quotes are necessary to escape the JSON quotes and access the `COURIER_NOTIFICATION_ID` variable.

Paste your complete cURL request in either format in your terminal and hit "Return." You should receive a response like `{"messageId":"<message id string>"}`. You will also receive an email at the address you specified in the request body. Be sure to check your spam folder if the message doesn’t arrive in your inbox.

<Frame caption="Send the cURL Request">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/send-curl-request.png" />
</Frame>

<br />

<Frame caption="Delivered Email">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/delivered-email.png" />
</Frame>

Congratulations, you’re on your way to crafting a better notification strategy that your audience is sure to appreciate.

## Overrides (Advanced)

Overrides can be used to change the request body that Courier uses to send an email. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by SendGrid's `/mail/send` endpoint ([see all v3 mail send request body fields here](https://docs.sendgrid.com/api-reference/mail-send/mail-send)). Below is an example of overriding the subject and adding an attachment:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "email": "kpryde@xavierinstitute.edu"
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "sendgrid": {
        "override": {
          "body": {
            "attachments": [
              {
                "content": "eyJmb28iOiJiYXIifQ==",
                "type": "application/json",
                "filename": "SENDGRID_ATTACH.json"
              }
            ]
          }
        }
      }
    }
  }
}
```

## Profile Requirements

To deliver a message to a recipient over SendGrid, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Email Activity Tracking

For the SendGrid configuration, the toggle, *Enable Email Activity Tracking via Polling*, will allow Courier to use SendGrid’s Email Activity API to periodically check on the delivery status of sent emails. The API Key must have Read Access to the Email Activity, and the SendGrid account must have the additional email history add-on enabled. See the documentation for [API Keys](https://app.sendgrid.com/settings/api_keys) and [Email Activity](https://app.sendgrid.com/settings/billing/addons/email_activity) to ensure the SendGrid account is set up correctly.

<Frame caption="Enable read access to Email Activity on the API Key.">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/sendgrid-api-key-permissions.png" />
</Frame>

<Frame caption="Upgrade the plan to include extended email activity history.">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/sendgrid-addons.png" />
</Frame>

## Override

Overrides can be used to change the request body that Courier uses to send an email. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by SendGrid's `/mail/send` endpoint ([see all v3 mail send request body fields here](https://docs.sendgrid.com/api-reference/mail-send/mail-send)). Below is an example of overriding the subject and adding an attachment:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "email": "kpryde@xavierinstitute.edu"
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "sendgrid": {
        "override": {
          "body": {
            "subject": "Requested file - lockheed.json",
            "attachments": [
              {
                "content": "eyJmb28iOiJiYXIifQ==",
                "type": "application/json",
                "filename": "lockheed.json"
              }
            ]
          },
          "config": {
            "apiKey": "<your API Key>"
          }
        }
      }
    }
  }
}
```

## Template Import

You can import your SendGrid templates to use with Courier from the [SendGrid configuration page](https://app.courier.com/channels/sendgrid).

<Note>
  **INFO**

  You will need to provide your SendGrid credentials in the configuration page to retrieve your saved templates from SendGrid.
</Note>

Templates ready for import will appear as selectable checkboxes that you can choose to import.

<Frame caption="Template Import Page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/template-import.png" />
</Frame>

## SendGrid API Key Permissions

Before you can successfully import SendGrid Dynamic Templates, you will need to make sure of the following:

* SendGrid templates must be saved as [Dynamic Templates](https://docs.sendgrid.com/ui/sending-email/how-to-send-an-email-with-dynamic-templates).
* Your SendGrid API key must have [full access](https://docs.sendgrid.com/ui/account-and-settings/api-keys) for `Template Engine`.

<Frame caption="SendGrid API Key Permissions">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/sg-api-permissions.png" />
</Frame>

Once your SendGrid API key has the appropriate permissions, you will be able to see your templates ready for import from the template import tool.

## Setup Mailhooks for Delivery Status Updates

By default, after we send a message, Courier will poll Sendgrid periodically to find out if the message was delivered successfully or not.
To get faster status updates, you can setup a webhook so Sendgrid can report delivery status directly to Courier.

To start, login to Courier and visit the Sendgrid provider configuration screen (from the Channels menu on the left side). There, you will find a Webhook URL.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/courier-ui.png" />
</Frame>

Copy this URL, then login to Sendgrid. On the left side, choose Settings, then Mail Settings. Next, clink on the Event Webhooks link.

On the next page, click the Create new webhook button. Then fill out the form.

* Friendly Name - Whatever you like
* Post URL - Paste the URL you copied earlier from Courier's website.
* Deliverability Data - Check all 5 boxes.
* Security features - You can leave these disabled. The HTTPS URL you pasted includes a cryptographic token that Courier can use to verify incoming events belong only to you.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/webhook-form.png" />
</Frame>

Hit the Save button.

Now that the webhook is configured, you will no longer need Courier to poll for status updates. We recommend waiting about an hour before disabling polling in order to make sure there is no gap in status reporting of any messages already in-flight.
When you are ready, return to the Courier Sendgrid configuration screen. Flip the toggle switch labeled "Enable polling for status updates" into the off position. Then, press the Save button at the bottom of the screen.

## Troubleshooting

> Dealing with SendGrid requests can result in some errors. You can find them below to help you troubleshoot. You can also check the [Courier Logs](../../platform/logging/message-logs) to help debug any provier errors you may encounter. For anything else, you may contact [Courier Support](mailto:support@courier.com).

### SendGrid API Key Access Forbidden

This error occurs when the request you are trying to perform is not listed under [the allowed actions](https://docs.sendgrid.com/api-reference/api-key-permissions/api-key-permissions) of the SendGrid API key that you are using.

#### Solution

You can do one of the following.

1. You can perform actions allowed by the API key you generated.
2. Create a new SendGrid API key that allows the actions you wish to execute.

**Creating the new SendGrid API key with desired permissions**

When creating the SendGrid API key, you can [select the permissions](https://docs.sendgrid.com/ui/account-and-settings/api-keys) that you need in the setup guide. To do so, visit the SendGrid API keys console and select "Create API Key." It displays the figure shown below.

<Frame caption="Creating a new SendGrid API key">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/sendgrid/sendgrid-create-api-key.png" />
</Frame>

As illustrated above, SendGrid allows you to select three permission scopes:

* Full Access
* Restricted Access
* Billing Access.

In addition, you can select the access levels that you require for your API Key based on your requirements.

### Error: sendgrid invalid email

Whenever you try to send an email to an address that does not comply with internet email formatting standards, or if the email does not present on the recipient's mail server, you will get an invalid email error. This response might originate from either your server or the receiver's mail server.

SendGrid checks the email address format before sending it to ensure that it is legitimate. If the receiver server cannot locate the address, it will return a 550 bounce, indicating that the email address is invalid.

Inactive recipients who don't connect with your content have invalid email addresses. In addition, for a variety of reasons, unengaged email addresses may be invalid:

* Invalid emails may contain typos or misformatting, preventing them from reaching a legitimate inbox.

* An email can become invalid if the user's email address changes, leaving the prior email address empty. The biggest cause of emails being invalid is inactivity or lack of engagement.

* When an inbox provider, such as Earthlink, goes out of business or a server goes down for good, all email domains under that provider become "dead." The emails linked to this defunct domain are similarly invalid.

#### Solution

* Email verification for cleaning or "scrubbing" email lists to increase email deliverability and engagement rates using a variety of digital email verification tools.

* Sort your email list by why each address signed up for your newsletter. You can use this method to see if your emails are relevant to your readers. If your email communications are irrelevant or out-of-date, it can affect your total engagement rate by lowering open and click-through rates.

* Contacts can be divided into groups based on their level of interaction. Double-check that it is still legitimate if you come across an email that appears to be graymail. If not, add the address to the unsubscribe or opt-out list.

* Create a sunset policy. A sunset policy's purpose is to discover disengaged contacts regularly and remove or re-engage them from your email lists.

### Maximum Credits Exceeded SendGrid

SendGrid credits denote the number of emails that you can send. SendGrid uses one credit per email, and these credits get renewed at the start of every month. Therefore, [you will run into this error](https://docs.sendgrid.com/for-developers/sending-email/smtp-errors-and-troubleshooting) if you exceed the maximum number of emails your SendGrid account can send.

#### Solution

You will have to wait until your quota gets renewed to resolve this error. If this is not an option for you, you can upgrade your SendGrid plan and get more credits based on your requirements.

### SendGrid 535 Authentication Failed Bad Username Password

This error can happen due to the below reasons:

* Username and password are incorrect. Error 535 occurs when the username and password entered in the Email client are incorrect. Using the incorrect mail server can potentially result in authentication difficulties.

* The account has been disabled. Accounts might be disabled for a variety of reasons, including past-due payments or spamming difficulties.

* SMTP Authentication error can occur if your email client does not have SMTP authentication enabled.

#### Solution

* Check your username and password, billing plans, and account status.

* Check whether you have confirmed your email address.

* Configure SMTP Authentication.

* Your API Keys should be saved as environment variables. This is a far safer technique, with the additional benefit of only having to change them once rather than searching for them every time they're used.

* Set up sender authentication for domains so that SPF and DKIM can be set up. This functionality enables you to use industry-standard email authentication protocols to authenticate your domains with the Twilio SendGrid account.

### Sendgrid From Field Not Working

This indicates that the `from` address does not correspond to a verified Sender Identity. This error prevents an email from being sent until it is fixed.

#### Solution

Customers are asked to [authenticate their sender identities](https://docs.sendgrid.com/glossary/sender-authentication) in order to sustain the highest attainable sender reputations and to maintain legal sending behavior. The address your receivers will view as the sender of your emails is represented by a sender identity. You can use Domain Authentication or Single Sender Verification to authenticate one or more Sender Identities.


# SMTP
Source: https://www.courier.com/docs/external-integrations/email/smtp

Send emails via SMTP using Courier by including the recipient’s email and customizing delivery using NodeMailer-compatible overrides—for message content (like attachments) or transport settings (host, port, auth credentials).

## Profile Requirements

To deliver a message to a recipient over SMTP, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Override

### Message Override

You can use a provider override to replace what we send to SMTP using NodeMailer. For example, you can add an attachment to your request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "smtp": {
        "override": {
          "body": {
            "attachments": [
              {
                "filename": "text1.txt",
                "content": "aGVsbG8gd29ybGQh",
                "encoding": "base64"
              }
            ]
          }
        }
      }
    }
  }
}
```

Everything inside of `message.providers.smtp.override.body` will replace what we send using NodeMailer. You can see all the available options by visiting the [NodeMailer docs](https://nodemailer.com/message/).

### Transport Override

You may also override the [SMTP transport configuration](https://nodemailer.com/smtp/) using values passed to `message.providers.smtp.override`, like so:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "smtp": {
        "override": {
          "config": {
            "auth": {
              "user": "username",
              "pass": "hunter2"
            },
            "host": "smtp.example.com",
            "secure": true,
            "port": 465
          }
        }
      }
    }
  }
}
```


# SparkPost
Source: https://www.courier.com/docs/external-integrations/email/sparkpost

Send emails via SparkPost using Courier by including the recipient’s email in their profile and optionally using overrides to customize the Transmissions API request, such as adding attachments or modifying email content.

## Profile Requirements

To deliver a message to a recipient over SparkPost, Courier must be provided the recipient's email address. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "example@example.com"
    }

    // ... rest of message definition
  }
}
```

## Override

You can use a provider override to replace what we send to SparkPost's Transmissions API. For example, you can add an attachment to your request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "sparkpost": {
        "override": {
          "body": {
            "content": {
              "attachments": [
                {
                  "name": "billing.pdf",
                  "type": "application/pdf",
                  "data": "Q29uZ3JhdHVsYXRpb25zLCB5b3UgY2FuIGJhc2U2NCBkZWNvZGUh"
                }
              ]
            }
          }
        }
      }
    }
  }
}
```

Everything inside of `message.providers.sparkpost.override` will replace what we send to SparkPost's Transmissions API. You can see all the available options by visiting [SparkPost API docs](https://developers.sparkpost.com/api/transmissions/#header-request-body).


# External Notification Providers
Source: https://www.courier.com/docs/external-integrations/intro

Courier integrates with many different external notification providers for email, push, SMS, and more that fit your business use case. Courier offers an extensive list covering many different delivery channels, and we're continuously updating our existing integrations and adding new ones.



# Datadog
Source: https://www.courier.com/docs/external-integrations/observability/datadog

Courier’s observability integration with Datadog enables Business-tier users to monitor real-time metrics and logs across message delivery, automations, user activity, and channel performance by environment.

export const Button = ({href, children}) => {
  return <div className="not-prose group">
    <a href={href}>
      <button className="flex items-center space-x-2.5 py-1 px-4 bg-primary-dark dark:bg-white text-white dark:text-gray-950 rounded-xl group-hover:opacity-[0.9] font-medium">
        <span>
          {children}
        </span>
      </button>
    </a>
  </div>;
};

## Setup

1. Create a Datadog account if you don't have one.
2. Generate a Datadog [API key](https://app.datadoghq.com/organization-settings/api-keys).
3. Navigate to the [Datadog integration page](https://app.courier.com/integrations/catalog/datadog) in Courier and enter the API key you generated in step 2.
4. Verify that the [Datadog site parameter](https://docs.datadoghq.com/getting_started/site/#access-the-datadog-site) corresponds to the URL of your Datadog instance.

## Dashboard

Download the Courier Datadog Dashboard using the link below to easily monitor Courier within Datadog.

<Button href="https://github.com/trycourier/shareable/blob/main/courier-datadog-dashboard.json">
  Download Dashboard JSON
</Button>

<br />

<Frame caption="Datadog Dashboard">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/observability/datadog-dashboard.png" alt="Datadog Dashboard" />
</Frame>

## Available Datadog Metrics

Courier sends various metrics to Datadog to help you monitor and track the performance of your notifications. Here are the available metrics:

### Account Metrics

* `courier.account.created`
* `courier.account.deleted`
* `courier.account.updated`

### Account User Relationship Metrics

* `courier.account.user.added`
* `courier.account.user.removed`
* `courier.account.user.updated`

### Audience Metrics

* `courier.audience.matched`
* `courier.audience.unmatched`

### Automation Metrics

* `courier.automation.invoked`
* `courier.automation.throttled`
* `courier.automation.digest.triggered`
* `courier.automation.batch.triggered`
* `courier.automation.fetch-data-step.errored`

### Channel Metrics

* `courier.email.delivered`
* `courier.email.error`
* `courier.email.sent`
* `courier.email.undeliverable`
* `courier.sms.delivered`
* `courier.sms.error`
* `courier.sms.sent`
* `courier.sms.undeliverable`
* `courier.push.delivered`
* `courier.push.error`
* `courier.push.sent`
* `courier.push.undeliverable`
* `courier.direct_message.delivered`
* `courier.direct_message.error`
* `courier.direct_message.sent`
* `courier.direct_message.undeliverable`

### Debug Metric

* `courier.debug`

### Inbox Metrics

* `courier.inbox.connection_attempt`
* `courier.inbox.connection_error`
* `courier.inbox.reconnection_attempt`
* `courier.inbox.notification_attempt`

### List Metrics

* `courier.list.subscribed`
* `courier.list.unsubscribed`
* `courier.list.subscribe.failed`

### Message Metrics

* `courier.message.canceled`
* `courier.message.delivered`
* `courier.message.filtered`
* `courier.message.received`
* `courier.message.sent`
* `courier.message.throttled`
* `courier.message.total.clicked`
* `courier.message.total.opened`
* `courier.message.undeliverable`
* `courier.message.unique.clicked`
* `courier.message.unique.opened`
* `courier.message.unique.sent`
* `courier.message.unmapped`
* `courier.message.unroutable`

### User Metrics

* `courier.user.created`
* `courier.user.deleted`
* `courier.user.unsubscribed`
* `courier.user.updated`
* `courier.user.update.failed`

You can use these metrics to create custom dashboards and alerts in Datadog to monitor the health and performance of your Courier notifications.


# Introduction
Source: https://www.courier.com/docs/external-integrations/observability/intro



<Note>
  **INFO**

  This feature is available to [Business-tier](https://www.courier.com/pricing/) customers.
</Note>

Courier provides observability integrations to help you gain insights into your message delivery. You can use these insights to understand how your messages are being delivered and to identify any issues with your message delivery. Courier currently supports Datadog as an observability integration. We are working on adding more integrations.

## Metrics

Courier provides the following metrics:

### Account Metrics

* `courier.account.created`
* `courier.account.updated`
* `courier.account.deleted`

### Account User Relationship Metrics

* `courier.account.user.added`
* `courier.account.user.removed`

### Automation Metrics

* `courier.automation.invoked`
* `courier.automation.throttled`
* `courier.automation.digest.triggered`
* `courier.automation.batch.triggered`
* `courier.automation.fetch-data-step.errored`

### Message Delivery

* `courier.message.received`
* `courier.message.delivered`
* `courier.message.filtered`
* `courier.message.throttled`
* `courier.message.unmapped`
* `courier.message.unroutable`
* `courier.message.undeliverable`
* `courier.message.sent`
* `courier.message.unique.sent`
* `courier.message.unique.opened`
* `courier.message.unique.clicked`
* `courier.message.total.opened`
* `courier.message.total.clicked`

### User Profile

* `courier.user.created`
* `courier.user.updated`
* `courier.user.deleted`

### Channel Delivery

\[channel] can be any of the following: `email`, `sms`, `push`, or `chat`.

* `courier.[channel].delivered`
* `courier.[channel].error`
* `courier.[channel].sent`
* `courier.[channel].undeliverable`

### Inbox Connection Metrics

* `courier.inbox.connection_attempt`
* `courier.inbox.connection_error`
* `courier.inbox.notified`
* `courier.inbox.reconnection_attempt`

### List Subscription and Unsubscription

* `courier.list.subscribed`
* `courier.list.unsubscribed`

### Audiences

* `courier.audience.matched`
* `courier.audience.unmatched`

Metrics are pre-aggregated by a tumbling window of 10 seconds which are then sent in real-time to your observability integration (Datadog) when a message is `delivered`, `sent`, or `undeliverable` from Courier.

## Logs

Courier also provides logs that correspond to the metrics. These logs are also sent to your observability integration. Logs are sent in near real-time.

<Note>
  **NOTE**

  All the metrics and logs are segmented by your Courier `environment`, which could be `production` or `test`. You can use this to filter the metrics and logs by environment.

  We are working on adding more metrics and logs. If you have any suggestions, please [reach out to support](mailto:support@courier.com).
</Note>


# New Relic
Source: https://www.courier.com/docs/external-integrations/observability/new-relic

Set up Courier’s New Relic integration to forward delivery metrics and logs, customize ingestion endpoints, and visualize notification performance with a downloadable New Relic dashboard.

export const Button = ({href, children}) => {
  return <div className="not-prose group">
    <a href={href}>
      <button className="flex items-center space-x-2.5 py-1 px-4 bg-primary-dark dark:bg-white text-white dark:text-gray-950 rounded-xl group-hover:opacity-[0.9] font-medium">
        <span>
          {children}
        </span>
      </button>
    </a>
  </div>;
};

## Setup

* Create a New Relic account if you don't have one.
* Retrieve your [License key](https://one.newrelic.com/api-keys) for your account.
* Login to Courier and navigate to the Channels page.
* Click on New Relic channel and enter the License key from step 2 in the API Key field.

## New Relic Metrics Endpoint

Customers have the option to include a [Metrics Endpoint](https://docs.newrelic.com/docs/data-apis/ingest-apis/metric-api/report-metrics-metric-api/#api-endpoint) to your New Relic integration. If no endpoint is provided, the United States (US) endpoint will be used.

## New Relic Logs Endpoint

Customers have the option to include a [Logs Endpoint](https://docs.newrelic.com/docs/logs/log-api/introduction-log-api/#endpoint) to your New Relic integration. If no endpoint is provided, the United States (US) endpoint will be used.

## Dashboard

Download the Courier New Relic Dashboard using the link below to easily monitor Courier within New Relic.

<Button href="https://github.com/trycourier/shareable/blob/main/courier-new-relic-dashboard.json">
  Download Dashboard JSON
</Button>

## Diagram

<Frame caption="New Relic Dashboard">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/observability/new-relic-dashboard.png" alt="New Relic Dashboard" />
</Frame>


# AWS SNS
Source: https://www.courier.com/docs/external-integrations/other/aws-sns

Learn how to send push, SMS, and email notifications using Courier with AWS SNS, including setup, profile requirements, and support for override credentials.

## Adding the AWS SNS Integration

The AWS SNS provider is currently listed as a Push integration, although it can handle push, SMS, and email notifications. When adding it to your workflow in the designer, you can follow one of the two paths to add the integration:

1. **Add AWS SNS as a channel provider:** Click "Add Channel" and select the Push channel. A Push option will be added to the left menu under "Channels". Hover over this and click on the Settings icon that will appear. In the pop-up, navigate to "+ Add Integration" and search for AWS SNS.

<Frame caption="Push Channel">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/push-channel.png" alt="Push Channel" />
</Frame>

<Frame caption="Push Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/push-channel-settings.png" alt="Push Channel Settings" />
</Frame>

2. **Add AWS SNS as a provider:** Click "Add Channel" and use the search bar to find "AWS SNS"

<Frame caption="AWS SNS Integration">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/aws-sns-integration.png" alt="AWS SNS Integration" />
</Frame>

## Profile Requirements

### Push

To deliver a message to a mobile device over SNS, Courier must be provided either the Topic ARN, that the device is subscribed to, or the Target ARN that the device is subscribed to. If using a Target ARN, then this value should be included in the recipient profile as `target_arn`.

```json
{
  "message": {
    "to": {
      "target_arn": "your:target:arn"
    }
  }
}
```

If no `target_arn` is provided in the recipient profile then the Topic ARN will be used from the Courier configuration.

Either the Target ARN or the Topic ARN should be provided, not both.

### SMS

To deliver a message to a recipient over AWS SNS, Courier must be provided the recipient's phone number. This value should be included in the recipient profile as `phone_number`.

```json
  "message": {
    "to": {
      "phone_number": "+12345678901"
    }
  }
}
```

## Override

Overrides can be used to change the request body that Courier uses to send a sms message. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates.

You can override both the Access Key Id and the Secret Access Key supported by AWS SNS sdk ([see all send publish properties here](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SNS.html#publish-property)). Below is an example of overriding the Access Key Id and Secret Access Key for the configuration:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {},
    "data": {},
    "providers": {
      "aws-sns": {
        "override": {
          "config": {
            "accessKeyId": “<your Access Key Id>”,
            "secretAccessKey": "<your Secret Access Key>",
          }
        }
      }
    }
  }
}
```


# Beamer
Source: https://www.courier.com/docs/external-integrations/other/beamer

Learn how to use Courier to send Beamer push notifications with customizable override options like user targeting, push toggle, and publish status.

## Profile Requirements

No profile data is required for Beamer.

## Override

Overrides can be used to change the request body that Courier uses to send a push message. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override the following fields from Beamer’s `postcreation` object ([documented here in Beamer's API docs](https://www.getbeamer.com/api#definition-PostCreation)).

```json
{
  "filter": "",
  "filterUserId": "",
  "filterUrl": "",
  "sendPushNotification": "",
  "publish": ""
}
```

Below is an example of using the override to deliver a post to a specific known user id.

```json
{
  "providers": {
    "beamer": {
      "override": {
        "body": {
          "filterUserId": "YOUR USER ID",
          "sendPushNotification": "false",
          "publish": "true"
        }
      }
    }
  }
}
```


# Custom Provider
Source: https://www.courier.com/docs/external-integrations/other/custom-provider

Set up a Custom Provider in Courier’s Push channel to deliver rich push messages to your own webhook endpoint, with support for content blocks and full payload overrides.

To install the Custom Provider, navigate here: [https://app.courier.com/integrations/catalog/custom](https://app.courier.com/integrations/catalog/custom). You should be able to input your webhook http address and choose between a few different authentication models.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/custom-provider.png" alt="Custom Provider" />
</Frame>

After installing the Custom Provider, you should be able to add it to any Push Channel. After adding a "Push Channel", open up the Channel Settings Modal.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/custom-provider-settings.png" alt="Custom Provider Settings" />
</Frame>

You will see "Custom" in the list of "Installed Providers".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/custom-installed-provider.png" alt="Installed Custom Provider" />
</Frame>

You can now add a Title, and blocks to your designer. They will be sent over as both "plain text" and an array of "blocks" to the webhook configured.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/custom-provider-designer.png" alt="Custom Provider Designer" />
</Frame>

Upon sending the message, your webhook will receive a payload that looks like this:

```js
interface TextBlock {
  type: "text";
  text: string;
}

interface ActionBlock {
  type: "action";
  url: string;
  text: string;
}

interface PushMessage {
  type: "push";
  data: {
  	messageId: string;
    content: {
      title: string;
      body: string;
      blocks: Array<ActionBlock | TextBlock>
    }
  }
}
```

```json
{
  "type": "push",
  "data": {
    "messageId": "1-6140e057-2749378a31c6026f3dab823f",
    "content": {
      "blocks": [
        {
          "text": "My Body",
          "type": "text"
        },
        {
          "text": "Click Here",
          "url": "https://rubmz24skk.execute-api.us-east-1.amazonaws.com/dev/r/c4cf42e6-8cb1-4276-8a90-034ae2f38e65.wefvkrd7sbm0h8j3dtrezbem5qwe",
          "type": "action"
        }
      ],
      "body": "My Body\nClick Here: https://rubmz24skk.execute-api.us-east-1.amazonaws.com/dev/r/c4cf42e6-8cb1-4276-8a90-034ae2f38e65.9kwnzgbapy4914hdedrm4fwdaxjc",
      "title": "My Title"
    }
  }
}
```

## Override

You can use an override to replace what we send to your custom provider.

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "email": "example@example.com"
    },
    "providers": {
      "custom": {
        "override": {
          "body": {},
          "headers": {},
          "method": "POST",
          "url": ""
        }
      }
    }
  }
}
```


# Drift
Source: https://www.courier.com/docs/external-integrations/other/drift

Use Courier to trigger Drift conversations by providing a recipient email and optionally overriding Drift’s API request body and access token configuration.

## Profile Requirements

To start a conversation with a recipient over Drift, Courier must be provided the recipient's email. This value should be included in the recipient profile as `email`.

```json
{
  "message": {
    //RecipientProfile
    "to": {
      "email": "example@example.com"
    }
  }
}
```

## Override

Overrides can be used to change the request body that Courier uses to send an email. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by Drift’s `/conversations/new` endpoint ([see all send request body fields here](https://devdocs.drift.com/docs/creating-a-conversation)). Below is an example of overriding the “send to" email and the access token for the configuration:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "phone_number": "+12345678901"
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "provider": {
      "drift": {
        "override": {
          "body": {
            "from": "+109876543210"
          },
          "config": {
            "accessToken": "<youraccesstoken>"
          }
        }
      }
    }
  }
}
```


# Facebook Messenger
Source: https://www.courier.com/docs/external-integrations/other/facebook-messenger

Send notifications via Facebook Messenger by including the recipient’s Page-Scoped ID (facebookPSID) in their profile.

## Profile Requirements

To deliver a message to a recipient over Facebook Messenger, Courier must be provided the recipient's Page-Scoped ID (PSID). The value should be included in the recipient profile as `facebookPSID`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "facebookPSID": "1254477777772919"
    }
  }
}
```


# Intercom
Source: https://www.courier.com/docs/external-integrations/other/intercom

Send in-app messages via Intercom by including the user’s Intercom ID in their profile, with support for message and sender overrides.

## Profile Requirements

To deliver an in-app push message to a recipient over Intercom, Courier must be provided the recipient's Intercom's User ID. Courier assumes the User is of type `user`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "intercom": {
        "from": "012345",
        "to": {
          "id": "<Intercom User ID>"
        }
      }
    }
  }
}
```

## Override

You can use the provider override to replace what we send as an Intercom Message. Supported overrides include the message body and the From User ID. Here's an example where we override both:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "intercom": {
        "id": "<Intercom User ID>"
      }
    },
    "providers": {
      "intercom": {
        "override": {
          "body": {
            "body": "I overrode this message",
            "from": {
              "id": "012345"
            }
          }
        }
      }
    }
  }
}
```

Other supported overrides are [here](https://developers.intercom.com/intercom-api-reference/reference#admin-initiated-conversation).


# NowPush
Source: https://www.courier.com/docs/external-integrations/other/nowpush

Send cross-platform messages via NowPush by configuring optional fields like device_type, message_type, url, and apiKey directly in your Courier notification template.

## Profile Requirements

No profile data is required for NowPush. If `device_type`, `message_type`, `url` or `apiKey` are included in your notification template it will replace the configuration.

```json
{
  "message": {
    "to": {
      "nowpush": {
        "device_type": "browser",
        "message_type": "link",
        "url": "www.nowpush.com",
        "apiKey": ""
      }
    }
  }
}
```


# Opsgenie
Source: https://www.courier.com/docs/external-integrations/other/ops-genie

Easily trigger alerts in Opsgenie from Courier by using a template with the Opsgenie channel, optional dynamic data, and override support for custom messages and API keys.

## Profile Requirements

Opsgenie does not require any profile data. If you include the Opsgenie channel in your notification template, Courier will route the notification to Opsgenie.

```json
{
  "message": {
    // Recipient Profile
    "to": {},
    // Template with Opsgenie channel
    "template": "TEMPLATE_ID",
  }
}
```

## Configuration

<Note>
  **INFO**

  To configure the Opsgenie provider, **you must set a value in the `Message` field in the channel configuration**. You can use a static message or enhance it by using the data property in the API call payload.
</Note>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/opsgenie-channel-configuration.png" alt="OpsGenie Channel Configuration" />
</Frame>

To add dynamic content to your message, include the data property in the API call payload:

```json
{
  "message": {
    "data": {
      "metadata": {
        "greeting": "Hey... DO NOT PANIC..."
      }
    },
    "providers": {
      "opsgenie": {
        "override": {
          "config": {
            "apiKey": "YOUR API KEY"
          }
        }
      }
    },
    "template": "TEMPLATE_ID",
    "to": {}
  }
}
```

After processing the request, the notification will include the value from the `data` property.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/opsgenie-resulting-notification.png" alt="OpsGenie Resulting Notification" />
</Frame>

## Override

You can use overrides to change the configuration or request body that Courier sends to Opsgenie. For example, you can change the API key or the message body.

<Note>
  **INFO**

  If you are using Opsgenie in the Europe region, ensure that you use the URL `https://api.eu.opsgenie.com/v2` and the apiKey associated with
</Note>

```json
{
  "providers": {
    "opsgenie": {
      "override": {
        "config": {
          "apiKey": "YOUR API KEY",
          "url": "URL"
        },
        "headers": {},
        "body": {
          "message": "YOUR MESSAGE"
        }
      }
    }
  }
}
```


# PagerDuty
Source: https://www.courier.com/docs/external-integrations/other/pagerduty

Send real-time alerts to PagerDuty by connecting your service’s Events API v2 integration with Courier, including support for severity/source overrides and per-user routing key configuration.

## How to Configure PagerDuty:

### Prerequisites

* Pagerduty [account](https://www.pagerduty.com/sign-up/) with elevated privileges
* Pagerduty Service created and configured with Events API v2 integration

### Configure PagerDuty Integration

1. In your PagerDuty account, navigate to the desired Service and access its "Integrations" settings.
2. Add a new "Events API v2" integration and configure it according to your requirements.
3. Copy the Integration Key provided by PagerDuty for the newly created integration.
4. Navigate to the [PagerDuty integration setup page](https://app.courier.com/channels/pagerduty) in your Courier account and provide the necessary information, including the Integration Key.

|                  |                                                                                                     |
| ---------------- | --------------------------------------------------------------------------------------------------- |
| **Routing Key**  | Paste the Integration Key obtained from PagerDuty.                                                  |
| **Event Action** | Specify the event action (e.g., trigger) for the notifications.                                     |
| **Source**       | Enter the host name or fully qualified domain name (FQDN) of the source sending the notifications.  |
| **Severity**     | Choose the appropriate severity level (e.g., info, warning, error, critical) for the notifications. |

## Overrides

### Routing Key

You can override the routing key by specifying a `routing_key` in the user profile using `profile.pagerduty.routing_key`.

```json
{
  "profile": {
    "pagerduty": {
      "routing_key": "YOUR_PROFILE_SPECIFIC_ROUTING_KEY"
    }
  }
}
```

If a `routing_key` is specified in `profile.pagerduty`, it will take precedence over the routing key from the main configuration.

### Payload

You can use the provider override the payload sent to PagerDuty's Events API. Supported overrides include the Severity and Source.

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "user_id": "1234567890"
    },
    "providers": {
      "pagerduty": {
        "override": {
          "body": {
            "payload": {
              "severity": "error",
              "source": "a different source"
            }
          }
        }
      }
    }
  }
}
```

For more information on supported payload overrides, refer to the [PagerDuty Events API v2 documentation](https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2).


# Pushbullet
Source: https://www.courier.com/docs/external-integrations/other/pushbullet

Send push notifications via Pushbullet with customizable payloads using Courier’s override system—no recipient profile data required.

## Profile Requirements

No profile data is required for Pushbullet.

## Override

Overrides can be used to change the request body that Courier uses to send a push message. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by Pushbullet’s `/pushes` endpoint ([see all send request body fields here](https://docs.pushbullet.com/#create-push)).

Below is an example using the override to send a `url` by overriding the `type` of the push:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {},
    "providers": {
      "pushbullet": {
        "override": {
          "body": {
            "type": "link",
            "url": "https://www.courier.com"
          }
        }
      }
    }
  }
}
```


# Pusher
Source: https://www.courier.com/docs/external-integrations/other/pusher

Send real-time push notifications via Pusher by targeting a recipient’s Pusher channel and customizing payloads through Courier templates or jsonnet editor.

## Profile Requirements

To deliver a message to a recipient via Pusher, Courier must be provided a target object that contains the recipient's pusher channel. This value should be included in the recipient profile as 'pusher'.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "pusher": {
        "channel": "<PUSHER_CHANNEL>"
      }
    }
  }
}
```

## Template Requirements

Pusher can be used in Courier in two ways. One is via the "Push" channel the other is via a direct Pusher channel. When in the direct Pusher channel, a jsonnet editor will be provided for you to customize your payload. When Pusher is integrated via the push channel, a rich editor will be shown.

## Example Event

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "pusher": {
        "channel": "<PUSHER_CHANNEL>"
      }
    },
    "data": {
      "name": "Katherine Pryde"
    }
  }
}
```

## Tracking Events

Courier will include tracking URL information in the `data` attribute on the incoming message payload.

See [Courier push notification tracking](../push/intro#tracking)


# Splunk On Call
Source: https://www.courier.com/docs/external-integrations/other/splunk-on-call

Send incident alerts via Splunk On Call by specifying a target type and slug in the recipient profile, with support for summary configuration and override of API credentials.

## Profile Requirements

To deliver a message to a recipient over Splunk On-Call, Courier must be provided a target object that contains the recipient's type and slug. This value should be included in the recipient profile as `splunk_on_call`.

```json
//RecipientProfile
{
  "message": {
    "to": {
      "splunk-on-call": {
        "target": {
          "type": "User",
          "slug": "userSlug"
        }
      }
    }
  }
}
```

## Template Requirements

To deliver a message to a recipient over Splunk On-Call, Courier must be provided a summary in the notification’s integration settings

## Override

Overrides can be used to change the request body that Courier uses to send a push message. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by Splunk On-Call's `/api-public/v1/incidents` endpoint ([see all send request body fields here](https://portal.victorops.com/public/api-docs.html#/Incidents)). Below is an example of overriding the from username and the api key for the configuration:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "splunk-on-call": {
        "target": {
          "type": "User",
          "slug": "kpryde"
        }
      }
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "splunk-on-call": {
        "config": {
          "apiKey": "<your API Key>",
          "userName": "<youruserName>"
        }
      }
    }
  }
}
```


# Webhook Integration
Source: https://www.courier.com/docs/external-integrations/other/webhook-integration

Send HTTP requests via Courier’s Webhook provider using static or per-recipient dynamic destinations, with support for customizable methods, headers, authentication, and payload overrides.

## Profile Requirements

To deliver an HTTP request, Courier must be provided with a destination. For a static destination, you can specify the Webhook URL and Authorization type in the [webhook integration setup page](https://app.courier.com/integrations/webhook).

### Dynamic Destination

If you need to specify the webhook destination on a per recipient basis, you can choose "Dynamic Destination" and pass the information in the recipient profile. These values should be included in the recipient profile as `webhook`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "webhook": {
        "url": "https://www.example.com",
        "method": "POST", // default to "POST",
        "headers": {
          "Content-Type": "application/json"
        },
        "authentication": {
          "mode": "basic", //default to "none"
          "username": "AzureDiamond",
          "password": "hunter2"
        },
        "profile": "expanded" // default to "limited"
      }
    }
  }
}
```

#### Authentication

The webhooks provider supports basic and bearer authentication. You can select either type by setting `authentication.method` to `basic` or `bearer` and providing the credentials. Authentication defaults to `None` if not provided.

```json
{
  "mode": "basic", //default to "none"
  "username": "AzureDiamond",
  "password": "hunter2"
}
```

```json
{
  "mode": "bearer",
  "token": "ABCDEFG123456"
}
```

#### Expanded Profile

What profile information is included in the request payload can be specified by setting `profile` to either `limited` or `expanded` . The default setting is `limited` and will only included the profile data provided when the send API was called. Selecting `expanded` will include profile data merged from the profile database.

## Request Payload

Based on how the profile is configured, the webhook provider will send the following payload using what was passed into the send method.

```json
// Example Payload
{
  "message": {
    "template": "MY_EVENT",
    "to": {
      "email": "stan.pines@mysteryshack.com",
      "phone_number": "+12025550165"
    },
    "data": {
      "name": "Stan Pines",
      "location": "Gravity Falls, OR"
    }
  }
}
```

## Override

You can use a provider override to replace what we send to the destination.

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "data": {
      "hello": "world"
    },
    "providers": {
      "webhook": {
        "override": {
          "url": "https://www.example.com",
          "method": "PUT",
          "headers": {
            "X-Custom-Header": "Hello from Courier"
          },
          "body": {
            "key": "value"
          }
        }
      }
    }
  }
}
```


# Airship
Source: https://www.courier.com/docs/external-integrations/push/airship

Step-by-step guide for integrating Airship with Courier, including how to configure user profiles, use provider overrides for authentication, and track push notification events via Courier’s global attributes.

## Profile Requirements

To deliver a push notification to a recipient over Airship, Courier must be provided the recipient's Airship user id and devices. These values should be included in the recipient profile as `airship`.

```json
{
  "message": {
    "template": "{{event.id}}",
    "to": {
      "airship": {
        "audience": {
          "named_user": "{{recipient.user_id}}"
        },
        "device_types": ["ios"]
      }
    },
    "data": {
      "username": "Steph Courier"
    }
  }
}
```

## Override

You can use a provider override to replace what we send to Airship's API. For example, you can use basic auth with your send request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "airship": {
        "audience": {
          "named_user": "{{recipient.user_id}}"
        },
        "device_types": ["ios"]
      }
    },
    "data": {
      "dataForPushMessage": true
    },
    "providers": {
      "airship": {
        "override": {
          "body": {},
          "headers": {
            "Authorization": "Basic {{EncodedAppKey:AppSecret}}"
          }
        }
      }
    }
  }
}
```

Everything inside of `providers.airship.override` will replace what we send to Airship's API. You can see all the available options by visiting [Airship's website](https://docs.airship.com/api/ua/).

## Tracking Events

Courier will include tracking URL information in the `global_attributes` [data bag](https://www.notion.so/trycourier/Tracking-Push-events-d6fdb9015da44ae5a6acdc5fe6832571#04de2c636307494fad517a24d9a9dd40).

See Courier [push notification tracking](../push/intro#tracking)


# Apple Push Notifications Service (APNS)
Source: https://www.courier.com/docs/external-integrations/push/apple-push-notification

Step-by-step guide for integrating Apple Push Notifications Service (APNS) with Courier, including setup instructions, sending options with and without SDKs, manual token management, tracking, and advanced APNS overrides.

<div
  style={{
  position: 'relative',
  width: '100%',
  height: 0,
  paddingBottom: '56.25%'
}}
>
  <iframe
    style={{
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%'
  }}
    src="https://www.youtube.com/embed/xe_JHG9h-0Q?rel=0"
    title="YouTube video player"
    frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
    allowfullscreen
  />
</div>

## Setup

[Setup Video](#)

1. Go to your [Apple Developer Account](https://developer.apple.com/account)
2. Click "Certificates"
3. Click "Keys"
4. Click the "+" button
5. Name the Key
6. Click "Enable" on "Apple Push Notifications Service (APNs)"
7. Click "Continue"
8. Click "Register"
9. Click "Download"
10. Go to the [APNS Provider Configuration](https://app.courier.com/channels/apn)
11. Enter the required information
12. Click "Install Provider" or "Save"

## Getting APNS Tokens

### With a Courier Mobile SDK

Using a Courier Mobile SDK is the best way to set this up. All Courier Mobile SDKs sync APNS tokens to Courier and will be automatically managed. This allows you to send pushes directly to a `user_id` rather than APNS tokens.

| Mobile SDK                                                                | APNS Token Management | Tracking Analytics |
| :------------------------------------------------------------------------ | :-------------------: | :----------------: |
| [iOS](https://github.com/trycourier/courier-ios#readme)                   |       Automatic       |      Automatic     |
| [Android](https://github.com/trycourier/courier-android#readme)           |     Not Supported     |    Not Supported   |
| [React Native](https://github.com/trycourier/courier-react-native#readme) |       Automatic       |      Automatic     |
| [Flutter](https://github.com/trycourier/courier-flutter#readme)           |       Automatic       |      Automatic     |

### Without a Courier Mobile SDK

Follow [Apple's Documentation](https://developer.apple.com/documentation/usernotifications) to setup push notifications on your iOS device.

What APNS tokens look like:

```bash
469d754f85604fa6bcf98c4299ba9aa760a5a3b01c5ca7277342cf3fbcea5c91
```

<Warning>
  **MANUAL IMPLEMENTATION REQUIREMENTS**

  You will need to sync, store, and manage your user's APNS tokens. This likely will require you to create entries in your database, deploy separate endpoints, and add extra development time that can be avoided with a [Courier Mobile SDK](#with-a-courier-mobile-sdk).

  If you'd like Courier delivery and click tracking, you will also need to manually make a request to the `trackingUrl`.
</Warning>

## Sending Messages

This is a common example request you can make to the [`send`](../../reference/send/message/) api that shows:

1. `providers.apn.override.body.aps.YOUR_CUSTOM_KEY` for adding custom data to your payload. This is usually used for opening a specific screen in your app when the user takes action on a push notification.
2. `providers.apn.override.body.aps` for applying iOS specific values. You can learn more about these [here](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification).

### ClickAction and Data Mapping

In order to pass a click action link into your push notification, you will need to enable the data mapping toggle in the Push [channel settings](../../platform/content/notification-designer/notification-designer-overview).

<Frame caption="Data mapping enabled">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/data-mapping.png" />
</Frame>

You can then perform a send request that looks similar to this, passing the clickAction in the data payload.

```json
{
    "message": {
        "to": {
            "user_id": "mike_mill_made_it"
        },
        "template": "HY59FFJQTR4JGEGT25HQD2D201GK",
        "data": {
            "click_action": "https://courier.com"
        }
    }
}
```

<Warning>
  **WARNING PUSH SOUND & BADGING**

  Sounds and badges can only be configured in the override schema of a send request at this time, and are not compatible with a `template` field attached. If your push notifications require sounds and badges, then we recommend shaping your push request with `sound` and `badge` in the override as shown below.
</Warning>

### Sending to a `user_id` (Recommended)

```bash
curl --request POST \
  --url https://api.courier.com/send \
  --header 'Authorization: Bearer YOUR_AUTH_KEY' \
  --header 'Content-Type: application/json' \
  --data '{
	"message": {
		"to": {
			"user_id": "YOUR_USER_ID"
		},
		"content": {
			"title": "Hey there 👋",
			"body": "Have a great day 😁"
		},
		"routing": {
			"method": "all",
			"channels": [
				"apn"
			]
		},
		"providers": {
			"apn": {
				"override": {
					"body": {
						"aps": {
							"alert": {
								"title": "Hey there 👋",
								"body": "Have a great day 😁"
							},
							"sound": "ping.aiff",
							"badge": 99,
							"YOUR_CUSTOM_KEY": "YOUR_CUSTOM_VALUE"
						}
					}
				}
			}
		}
	}
}'
```

#### Silent Messages

```bash
curl --request POST \
  --url https://api.courier.com/send \
  --header 'Authorization: Bearer YOUR_AUTH_KEY' \
  --header 'Content-Type: application/json' \
  --data '{
	"message": {
		"to": {
			"user_id": "YOUR_USER_ID"
		},
		"content": {
			"title": "...",
			"body": "..."
		},
		"routing": {
			"method": "all",
			"channels": [
				"apn"
			]
		},
		"providers": {
			"apn": {
				"override": {
					"silent": true,
					"body": {
						"badge": 123
					}
				}
			}
		}
	}
}'
```

### Sending to a `token`

```bash
curl --request POST \
  --url https://api.courier.com/send \
  --header 'Authorization: Bearer YOUR_AUTH_KEY' \
  --header 'Content-Type: application/json' \
  --data '{
	"message": {
		"to": {
			"apn": {
				"token": "YOUR_APNS_TOKEN"
			}
		},
		"content": {
			"title": "Hey there 👋",
			"body": "Have a great day 😁"
		},
		"routing": {
			"method": "all",
			"channels": [
				"apn"
			]
		},
		"providers": {
			"apn": {
				"override": {
					"body": {
						"aps": {
							"alert": {
								"title": "Hey there 👋",
								"body": "Have a great day 😁"
							},
							"sound": "ping.aiff",
							"badge": 99,
							"YOUR_CUSTOM_KEY": "YOUR_CUSTOM_VALUE"
						}
					}
				}
			}
		}
	}
}'
```

### Sending to multiple `tokens`

```bash
curl --request POST \
  --url https://api.courier.com/send \
  --header 'Authorization: Bearer YOUR_AUTH_KEY' \
  --header 'Content-Type: application/json' \
  --data '{
	"message": {
		"to": {
			"apn": {
				"tokens": ["APNS_TOKEN_ONE", "APNS_TOKEN_TWO"]
			}
		},
		"content": {
			"title": "Hey there 👋",
			"body": "Have a great day 😁"
		},
		"routing": {
			"method": "all",
			"channels": [
				"apn"
			]
		},
		"providers": {
			"apn": {
				"override": {
					"body": {
						"aps": {
							"alert": {
								"title": "Hey there 👋",
								"body": "Have a great day 😁"
							},
							"sound": "ping.aiff",
							"badge": 99,
							"YOUR_CUSTOM_KEY": "YOUR_CUSTOM_VALUE"
						}
					}
				}
			}
		}
	}
}'
```

## Automatic Courier Mobile SDK Formatting

By default, Courier automatically formats parts of the APNS payload to make a better developer experience for you if you are working with a [Courier Mobile SDK](#with-a-courier-mobile-sdk). Here you can manage the [automatic APNS settings](https://app.courier.com/channels/apn).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/apns-auto-override.png" />
</Frame>

What this setting does:

1. Creates a simple toggle to send to Apple's production or sandbox push notification environment. Production (switch is on) is used in your production app and Sandbox (switch is off) is used for testing and development. [More Details](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns#2947606)
2. "Attach Mutable Content" supports Courier's [iOS Notification Service Extension](https://github.com/trycourier/courier-ios/blob/master/Docs/PushNotifications.md#4-add-the-notification-service-extension-optional-but-recommended) for better push notification delivery tracking.


# Expo
Source: https://www.courier.com/docs/external-integrations/push/expo

Step-by-step guide for integrating Expo push notifications with Courier, including support for single and multiple device tokens, provider overrides, APNs credential troubleshooting, and best practices for tracking and delivery.

## Profile Requirements

To deliver a push notification to a recipient over Expo, Courier must be provided the recipient's Exponent push token. It should be included in the recipient profile as `expo`.

### Single Token

To push a notification to a single device, you can pass the recipient's push token as a string to `expo.token`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "expo": {
        "token": "ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]"
      }
    }
  }
}
```

### Multiple Tokens

If the recipient has multiple devices and you'd like to push to all of them, you can pass the push tokens as an array of strings to `expo.tokens`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "expo": {
        "tokens": ["ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]", ...]
      }
    }
  }
}
```

<Note>
  **PROVIDING BOTH `TOKEN` AND `TOKENS` TO `EXPO`**

  If you pass values to both `token` and `tokens`, Courier will merge the value of `token` into the `tokens` array and dedupe it.
</Note>

## Override

You can use a provider override to replace what we send to Expo's API. For example, you can add a ttl value and turn off the sound with your send request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "expo": {
        "token": "ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]"
      }
    },
    "data": {
      "dataForPushMessage": true
    },
    "providers": {
      "expo": {
        "override": {
          "ttl": 10,
          "sound": null
        }
      }
    }
  }
}
```

Everything inside of `providers.expo.override` will replace what we send to Expo's API. Values that are not replaced will still be sent (the title, subtitle, body and data will still be generated and sent in the example above). You can see all the available options by visiting [Expo's website](https://docs.expo.dev/push-notifications/overview/).

## Tracking Events

Courier will include tracking URL information in the `data` attribute on the incoming message payload.

See [Courier push notification tracking](../push/intro#tracking)

## Troubleshooting

Tips for resolving response errors from Expo

### Could Not Find APNs Credentials

Excerpt from Expo's [Help Forum](https://forums.expo.dev/t/push-notification-error-could-not-find-apns-credentials-for-standalone-app/6955) on how they handle APN tokens:

> Expo push tokens work quite similarly to how Apple's tokens work with APN's, since Expo's server is a relatively thin service that relays notifications to Apple. Expo needs valid APN credentials to send push notifications. And as with APNs in general (not specific to Expo), it doesn't matter what APNs credentials you had at the time an iOS device provided a device token - the APN credentials just need to be valid at the time of sending the notification.

> So, if you revoke your APNs credentials or clear them from Expo, or if your APNs credentials expire (APN p12 certificates expire after one year), Apple will reject all of your push notifications until you provide Expo with valid APN credentials. To be clear, **your Expo push tokens and the underlying iOS device tokens are still valid** and will still work once you provide new, valid APN credentials.

> In this case, the error `Could not find APNs credentials for…` means that Expo does not have any copy of your APNs credentials (currently a p12 certificate). You will need to let Expo recreate the credentials for you (**recommended for most developers:** run `exp build:ios -c` to clear all of them and then run `exp build:ios` to let Expo re-provision them) or upload your own credentials from Apple's developer center (be sure to follow the instructions carefully.

* Your push key should be correctly configured at `https://expo.dev/accounts/[account]/projects/[project]/credentials?platform=ios`
* You've correctly set your bundle identifier in your configuration
* If you are explicitly passing in the `experienceId` in `Notifications.getExpoPushTokenAsync({ experienceId: 'xxxx' })`, make sure it is in the format of `@expo_account/expo_projectname`


# Firebase Cloud Messaging (FCM)
Source: https://www.courier.com/docs/external-integrations/push/firebase-fcm

Step-by-step guide for integrating Firebase Cloud Messaging (FCM) with Courier, including setup instructions, token management with or without SDKs, sending messages, using overrides, and enabling automatic formatting.

<Note>
  **INFO**

  Before you begin, ensure that you have created a Firebase project. If you haven't done so already, create a new project [here](https://firebase.google.com/).
</Note>

## Setup

To set up Courier with Firebase FCM integration, follow these steps:

### Configure FCM Provider

1. In your [Firebase Project](https://console.firebase.google.com/), go to "Project Settings" > "Service Accounts" and generate a new private key.
2. Copy the contents of the downloaded private key JSON file and paste it into the designated field in the [Courier FCM Provider Configuration](https://app.courier.com/channels/firebase-fcm).
3. Click "Install Provider" or "Save" to complete the configuration.

### Enable iOS Support (if required)

1. Integrate Firebase into your [iOS project](https://firebase.google.com/docs/ios/setup).
2. In your Firebase project settings, go to "Cloud Messaging" and select your iOS project under "Apple app configuration".
3. Create a new key in your [Apple Developer Account](https://developer.apple.com/account) with "Apple Push Notifications Service (APNs)" enabled.
4. Download the generated `.p8` file and upload it to your Firebase project settings under "Apple apps" > your app > "APNs Authentication Key".

## Getting FCM Tokens

### Using a Courier Mobile SDK

The recommended approach to set up Firebase Cloud Messaging (FCM) with Courier is to use a Courier Mobile SDK. All Courier Mobile SDKs automatically sync FCM tokens to Courier and manage them for you. This allows you to send push notifications directly to a `user_id` instead of managing FCM tokens manually.

| Mobile SDK                                                                                                                          |                                                     FCM Token Management                                                     | Tracking Analytics |
| :---------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------------------------------------------: | :----------------: |
| [<p><Icon icon="android" iconType="solid" size="24px" /> Android</p>](https://github.com/trycourier/courier-android#readme)         | [Setup](https://github.com/trycourier/courier-android/blob/master/Docs/PushNotifications.md#2-sync-push-notification-tokens) |      Automatic     |
| [<p><Icon icon="apple" iconType="solid" size="24px" /> iOS</p>](https://github.com/trycourier/courier-ios#readme)                   |  [Setup](https://github.com/trycourier/courier-react-native/blob/master/Docs/3_PushNotifications.md#automatic-token-syncing) |      Automatic     |
| [<p><Icon icon="react" iconType="solid" size="24px" /> React Native</p>](https://github.com/trycourier/courier-react-native#readme) |  [Setup](https://github.com/trycourier/courier-react-native/blob/master/Docs/3_PushNotifications.md#automatic-token-syncing) |      Automatic     |
| [<p><Icon icon="flutter" iconType="solid" size="24px" /> Flutter</p>](https://github.com/trycourier/courier-flutter#readme)         | [Setup](https://github.com/trycourier/courier-flutter/blob/master/Docs/3_PushNotifications.md#automatically-sync-tokens-ios) |      Automatic     |

### Without a Courier Mobile SDK

If you choose not to use a Courier Mobile SDK, follow the [Firebase Cloud Messaging Setup](https://firebase.google.com/docs/cloud-messaging) guide for your desired platform.

Example FCM token:

```bash
dYeufxa20kwFnykCny-gIN:APA91bEJxheJmH_zDvoHfPsCDZstJcuYfWuQrhztywoejlAK5HmDBEYNm7R8fNzk3bjQ3lPmkVi8uaoIX94SMV4ZXRPxG_IhfT_OkfmVHCAN6GtdAvELOXSjp6z1UHVVmMnAFTOa7YxW
```

<Warning>
  **MANUAL IMPLEMENTATION REQUIREMENTS**

  When implementing FCM without a Courier Mobile SDK, you will need to:

  * Sync, store, and manage your users' FCM tokens. This may require creating entries in your database, deploying separate endpoints, and adding extra development time that can be avoided by using a [Courier Mobile SDK](#using-a-courier-mobile-sdk).
  * Manually make a request to the `trackingUrl` if you want Courier delivery and click tracking.
</Warning>

## Sending Messages

Here's a common example request you can make to the [`send`](../../reference/send/message/) API, demonstrating:

1. `providers.firebase-fcm.override.body.data.YOUR_CUSTOM_KEY` for adding custom data to your payload. This is typically used for opening a specific screen in your app when the user interacts with a push notification. Firebase requires the `data` key to be flat. More details about FCM custom data can be found [here](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#Message.FIELDS.data).
2. `providers.firebase-fcm.override.body.apns` for applying iOS-specific values. You can learn more about these [here](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/generating_a_remote_notification).

### ClickAction and Data Mapping

In order to pass a click action link into your push notification, you will need to enable the data mapping toggle in the Push [channel settings](../../platform/content/notification-designer/notification-designer-overview).

<Frame caption="Data mapping enabled">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/data-mapping.png" />
</Frame>

You can then perform a send request that looks similar to this, passing the clickAction in the data payload.

```json
{
  "message": {
    "to": {
      "user_id": "mike_mill_made_it"
    },
    "template": "HY59FFJQTR4JGEGT25HQD2D201GK",
    "data": {
      "click_action": "https://courier.com"
    }
  }
}
```

<Warning>
  **PUSH SOUND & BADGING**

  Sounds and badges can only be configured in the override schema of a send request at this time, and are not compatible with a `template` field attached. If your push notifications require sounds and badges, then we recommend shaping your push request with `sound` and `badge` in the override as shown below.
</Warning>

### Sending to a `user_id` (Recommended)

```bash
curl --request POST \
  --url https://api.courier.com/send \
  --header 'Authorization: Bearer YOUR_AUTH_KEY' \
  --header 'Content-Type: application/json' \
  --data '{
	{
		"message": {
			"to": {
				"user_id": "YOUR_USER_ID"
			},
			"content": {
				"title": "Hey there 👋",
				"body": "Have a great day 😁"
			},
			"routing": {
				"method": "all",
				"channels": [
					"firebase-fcm"
				]
			},
			"providers": {
				"firebase-fcm": {
					"override": {
						"body": {
							"data": {
								"YOUR_CUSTOM_KEY": "YOUR_CUSTOM_VALUE"
							},
							"apns": {
								"payload": {
									"aps": {
										"sound": "ping.aiff",
										"badge": 99
									}
								}
							}
						}
					}
				}
			}
		}
	}
}'
```

### Sending to a `firebaseToken`

```bash
curl --request POST \
  --url https://api.courier.com/send \
  --header 'Authorization: Bearer YOUR_AUTH_KEY' \
  --header 'Content-Type: application/json' \
  --data '{
	{
		"message": {
			"to": {
				"firebaseToken": "YOUR_FCM_TOKEN"
			},
			"content": {
				"title": "Hey there 👋",
				"body": "Have a great day 😁"
			},
			"routing": {
				"method": "all",
				"channels": [
					"firebase-fcm"
				]
			},
			"providers": {
				"firebase-fcm": {
					"override": {
						"body": {
							"data": {
								"YOUR_CUSTOM_KEY": "YOUR_CUSTOM_VALUE"
							},
							"apns": {
								"payload": {
									"aps": {
										"sound": "ping.aiff",
										"badge": 99
									}
								}
							}
						}
					}
				}
			}
		}
	}
}'
```

### Sending to multiple `firebaseTokens`

```bash
curl --request POST \
  --url https://api.courier.com/send \
  --header 'Authorization: Bearer YOUR_AUTH_KEY' \
  --header 'Content-Type: application/json' \
  --data '{
	{
		"message": {
			"to": {
				"firebaseToken": ["FCM_TOKEN_ONE", "FCM_TOKEN_TWO"]
			},
			"content": {
				"title": "Hey there 👋",
				"body": "Have a great day 😁"
			},
			"routing": {
				"method": "all",
				"channels": [
					"firebase-fcm"
				]
			},
			"providers": {
				"firebase-fcm": {
					"override": {
						"body": {
							"data": {
								"YOUR_CUSTOM_KEY": "YOUR_CUSTOM_VALUE"
							},
							"apns": {
								"payload": {
									"aps": {
										"sound": "ping.aiff",
										"badge": 99
									}
								}
							}
						}
					}
				}
			}
		}
	}
}'
```

## Automatic Courier Mobile SDK Formatting

When working with a working with a [Courier Mobile SDK](#using-a-courier-mobile-sdk), Courier can automatically format the FCM payload to provide a better developer experience. You can toggle this feature in the [Courier FCM Provider Configuration](https://app.courier.com/channels/firebase-fcm).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/fcm-auto-override.png" />
</Frame>

When enabled, this feature:

1. Automatically delivers Android push notifications in the background. This allows for more accurate push notification delivery tracking and the ability to use your own [custom Android notification style](https://github.com/trycourier/courier-android#2-setup) consistently.
2. Supports Courier's [iOS Notification Service Extension](https://github.com/trycourier/courier-ios/blob/master/Docs/PushNotifications.md#4-add-the-notification-service-extension-optional-but-recommended) for improved push notification delivery tracking.

Here is an example of what the formatted [`send`](../../reference/send/message/) request looks like when this setting is enabled:

```bash
curl --request POST \
  --url https://api.courier.com/send \
  --header 'Authorization: Bearer YOUR_AUTH_KEY' \
  --header 'Content-Type: application/json' \
  --data '{
	"message": {
		"to": {
			"user_id": "YOUR_USER_ID"
		},
		"content": {
			"title": "Hey there 👋",
			"body": "Have a great day 😁"
		},
		"routing": {
			"method": "all",
			"channels": [
				"firebase-fcm"
			]
		},
		"firebase-fcm": {
			"override": {
				"notification": null, // Prevents Android system tray from taking over notification presentation
				"data": { // Used by Courier Android SDK to present your customized notification and track notification delivery in all Android states
					"title": "Hey there 👋",
					"body": "Have a great day 😁"
				},
				"apns": {
					"payload": {
						"aps": {
							"mutable-content": 1, // Used by the Courier iOS SDK Notification Service Extension
							"sound": "ping.aiff", // Provides a default sound or vibration if iOS device ringer is off
							"alert": {
								"title": "Hey there 👋",
								"body": "Have a great day 😁"
							}
						}
					}
				}
			}
		}
	}
}'
```


# Introduction
Source: https://www.courier.com/docs/external-integrations/push/intro

Overview of Courier’s push notification capabilities, including how to use push channel overrides, attach tracking URLs, and update notification status using the Courier client-side authentication token.

# Push Providers

Courier integrates with many different push providers. Each provider may have specific requirements in order to deliver a message to a recipient.

<Tip>
  **TIP**

  Can't find a provider? Send us a chat ↘ or email [support@courier.com](mailto:support@courier.com)
</Tip>

## Push channel override

Push channel overrides allow you to set the body, clickAction, data, icon, and title of a push notification.

**Data structure for the push channel override:**

```json
{
  "message": {
    "channels": {
      "push": {
        "override": {
          "body": "",
          "clickAction": "",
          "data": "",
          "icon": "",
          "title": ""
        }
      }
    }
    //... rest of message
  }
}
```

## Tracking

Courier will attach a trackingUrl for all push requests that allow the state of the push notification to be updated. See the provider-specific documentation for details about where the tracking URL can be found. To update the status of a notification, the Courier [client-side authentication token](https://www.notion.so/trycourier/Tracking-Push-events-d6fdb9015da44ae5a6acdc5fe6832571#1ea48b560055476db8c07812adf14e90) can be used.

### Example Message

```json
{
  "message": {
    "data": {
      "trackingUrl": "https://api.courier.com/e/123_channelTrackingId"
      // other data attributes
    }
    // other messages attributes
  }
}
```

### Example Request

```js
fetch("https://api.courier.com/e/123_channelTrackingId", {
  method: "POST",
  headers: {
    "X-Courier-Client-Key": "YOUR_COURIER_CLIENT_KEY",
  },
  body: JSON.stringify({
    event: "OPENED", // CLICKED, DELIVERED, OPENED, READ, UNREAD
  }),
});
```


# MagicBell
Source: https://www.courier.com/docs/external-integrations/push/magicbell

Learn how to integrate MagicBell with Courier to send in-app push notifications using email or external ID, with support for override fields like category and action URL.

## Profile Requirements

To deliver a message to in-app using MagicBell, Courier must be provided with either the email address of the recipient or an external ID.

### Email example:

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "email": "user@example.com"
    }
  }
}
```

### External ID:

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "magicbell": {
        "external_id": "user123"
      }
    }
  }
}
```

## Override

Overrides can be used to change the request body that Courier uses to send a message to MagicBell. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates.

Below is an example of overriding the Category & Action URL parameters in MagicBell:

```json
{
  "message": {
    "template": "example_template",
    "to": {
      "email": "user@example.com"
    },
    "data": {},
    "providers": {
      "magicbell": {
        "override": {
          "body": {
            "category": "new_message",
            "action_url": "https://example.com/example_link"
          }
        }
      }
    }
  }
}
```


# OneSignal Push
Source: https://www.courier.com/docs/external-integrations/push/onesignal-push

Learn how to send push notifications via OneSignal using Courier by configuring App ID and REST API Key, and passing either Player ID or External User ID in the recipient profile.

## Configuration Requirements

You can get your OneSignal `App ID` and `REST API Key` by following [these instructions](https://documentation.onesignal.com/docs/accounts-and-keys).

## Profile Requirements

To deliver a message to a recipient over OneSigal, Courier must be
provided the recipient's [PlayerId](https://documentation.onesignal.com/docs/users#section-player-id) or [ExternalId](https://documentation.onesignal.com/docs/user-model-migration-guide#user-model). This ID should be included in the recipient profile as `oneSignalPlayerID` or `oneSignalExternalUserId`.

```json
{
  "message": {
    "to": {
       "oneSignalPlayerID": "..."
    }
  }
}
// or
{
  "message": {
    "to": {
       "oneSignalExternalUserId": "..."
    }
  }
}
```


# Pusher Beams
Source: https://www.courier.com/docs/external-integrations/push/pusher-beams

Learn how to send push notifications using Pusher Beams via Courier, including examples for targeting users or interests with APNs or FCM delivery modes.

## Introduction

Pusher Beams can be used to send to either the users or to the interests. At least one `mode` out of web, apns or fcm is required.

## Send to interests

```json
{
  "message": {
    "to": {
      "pusherBeams": {
        "interests": ["interest-1", "interest-2"],
        "mode": ["apns", "fcm"]
      }
    }
  }
}
```

## Send to users

```json
{
  "message": {
    "to": {
      "pusherBeams": {
        "userIds": ["user-id-1", "user-id-2"],
        "mode": ["apns", "fcm"]
      }
    }
  }
}
```


# Africa's Talking
Source: https://www.courier.com/docs/external-integrations/sms/africas-talking

Guide to integrating Africa’s Talking SMS with Courier, including recipient profile setup and override options like custom short codes or sender IDs for advanced message customization.

## Profile Requirements

To deliver a message to a recipient over Africa's Talking SMS, Courier must be provided the recipient's SMS-compatible telephone number. This value should be included in the recipient profile as `phone_number`.

```json
// Recipient Profile
{
  "message": {
    "to": {
      "phone_number": "+27765559758"
    }
  }
}
```

## Override

You can use a provider override to replace what we send to Africa's Talking SMS API. For example, you can add a registered short code or alphanumberic from you Africa's Talking SMS Application to your request:

```json
{
  "message": {
    "template": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "to": {
      "phone_number": "+27765559758"
    },
    "providers": {
      "africastalking-sms": {
        "override": {
          "body": {
            "from": "12345"
          }
        }
      }
    }
  }
}
```

Everything inside of `providers.africastalking-sms.override` will replace what we send to Africa's Talking SMS API. You can see all the available options by visiting [Africa's Talking SMS docs](https://developers.africastalking.com/docs/sms/overview).


# Azure SMS
Source: https://www.courier.com/docs/external-integrations/sms/azure-sms

Step-by-step guide for integrating Azure Communication Service SMS with Courier, including required recipient profile structure and how to use overrides for customizing sender, message content, and authentication settings.

## Profile Requirements

To deliver an SMS message through Azure SMS, Courier must be provided the recipient's SMS-compatible phone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+11112223334"
    }
  }
}
```

## Overrides

Overrides can be used to change the request that Courier makes to the provider. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override the `authToken`, `from` and `email` as well as the `body` of the SMS content.

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "phone_number": "+12345678901"
    },
    "data": {
      "first_name": "Jane Doe"
    },
    "providers": {
      "azure-sms": {
        "override": {
          "body": {
            "to": "+19876543210",
            "message": "I am the right content for the SMS"
          },
          "config": {
            "from": "<override from number>",
            "accessKey": "<override access key>",
            "endpoint": "<override endpoint>"
          }
        }
      }
    }
  }
}
```


# SMS Providers
Source: https://www.courier.com/docs/external-integrations/sms/intro

Overview of Courier’s supported SMS providers, highlighting the required phone_number property in recipient profiles to send SMS messages and providing tips for contacting support if a provider is missing.

```json
// Recipient Profile
{
  "message": {
    "to": {
      "phone_number": "+12025550156"
    }
  }
}
```

<Tip>
  **TIP**

  Can't find a provider? Send us a chat or email [support@courier.com](mailto:support@courier.com)
</Tip>


# MessageBird
Source: https://www.courier.com/docs/external-integrations/sms/messagebird

Learn how to send SMS notifications through MessageBird by integrating with Courier and including the recipient’s phone_number in the message profile.

## Profile Requirements

To deliver a message to a recipient over MessageBird, Courier must be provided the recipient's SMS-compatible telephone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+491575556511"
    }
  }
}
```


# MessageMedia
Source: https://www.courier.com/docs/external-integrations/sms/messagemedia

Learn how to integrate MessageMedia with Courier to send SMS messages by including a valid phone_number in the recipient profile and routing notifications through MessageMedia’s API.

## Profile Requirements

To deliver a message to a recipient via MessageMedia, Courier must be provided the recipient's SMS-compatible telephone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+491575556511"
    }
  }
}
```


# Plivo
Source: https://www.courier.com/docs/external-integrations/sms/plivo

Learn how to integrate Plivo with Courier to send SMS notifications by configuring recipient phone numbers in E.164 format and connecting to Plivo’s API for streamlined message delivery.

## Profile Requirements

To deliver a message to a recipient over Plivo, Courier must be provided the recipient's SMS-compatible telephone number. Be sure that all phone numbers include country code, area code, and phone number without spaces or dashes. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+491575556511"
    }
  }
}
```


# Sinch
Source: https://www.courier.com/docs/external-integrations/sms/sinch

Learn how to send SMS notifications using Sinch by configuring Courier with the recipient’s phone number and integrating Sinch’s API for reliable and efficient message delivery.

## Profile Requirements

To deliver an SMS message through Sinch, Courier must be provided the recipient's SMS-compatible phone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+491575556511"
    }
  }
}
```


# SMSCentral
Source: https://www.courier.com/docs/external-integrations/sms/smscentral

Learn how to send SMS messages through SMSCentral using Courier by including the recipient’s phone number in the profile and configuring the integration for seamless text message delivery.

## Profile Requirements

To deliver an SMS message through SMSCentral, Courier must be provided the recipient's SMS-compatible phone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+491575556511"
    }
  }
}
```


# Telnyx
Source: https://www.courier.com/docs/external-integrations/sms/telnyx

Learn how to send SMS notifications via Telnyx using Courier, including how to structure recipient profiles, apply provider-specific overrides for message content and configuration, and customize Telnyx API requests.

## Profile Requirements

To deliver a message to a recipient over Telnyx, Courier must be provided the recipient's SMS-compatible telephone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+491575556511"
    }
  }
}
```

## Overrides

Overrides can be used to change the request body that Courier uses to send a message. Overrides are useful you would like to override the value that Courier generates. You can override any of the fields supported on the outgoing call to Telnyx.:

```json
{
  "message": {
    "event": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "phone_number": "+15551734686"
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "telnyx": {
        "override": {
          "body": {
            "text": "text override"
            "to": "+17777777777"
          },
          "config": {
            "apiKey": "<your API Key>",
            "from": "+15555555555",
            "url": "<alternate url>"
          }
        }
      }
    }
  }
}
```


# TextUs
Source: https://www.courier.com/docs/external-integrations/sms/textus

Send SMS messages using TextUs by integrating with Courier. Learn how to configure recipient profiles, override authentication and message content, and send customized text notifications with optional parameters.

## Profile Requirements

To deliver an SMS message through TextUs, Courier must be provided the recipient's SMS-compatible phone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+11112223334"
    }
  }
}
```

## Overrides

Overrides can be used to change the request that Courier makes to the provider. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override the `authToken`, `from` and `email` as well as the `body` of the SMS content.

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "phone_number": "+12345678901"
    },
    "data": {
      "first_name": "Jane Doe"
    },
    "providers": {
      "textus": {
        "override": {
          "body": {
            "to": "+109876543210",
            "body": "I am the right content for the SMS"
          },
          "config": {
            "from": "<override From number>",
            "authToken": "<override Auth Token>",
            "email": "<override Email>"
          }
        }
      }
    }
  }
}
```


# Twilio
Source: https://www.courier.com/docs/external-integrations/sms/twilio

Step-by-step guide for integrating Twilio with Courier to send SMS notifications, covering setup, message creation, sending via API, recipient profile requirements, overrides, and detailed troubleshooting for common Twilio errors.

## Set Up SMS Using Twilio

### Introduction

This step-by-step guide will walk you through sending an SMS notification using Courier and Twilio. You will:

### Prerequisites

You will need both Courier and Twilio accounts to complete this tutorial. If you don't have accounts already, sign up before proceeding.

<CardGroup>
  <Card title="Sign up for Courier" icon="angle-right" href="https://app.courier.com/signup" iconType="solid" horizontal />

  <Card title="Sign up for Twilio" icon="angle-right" href="https://www.twilio.com/try-twilio" iconType="solid" horizontal />
</CardGroup>

#### Twilio Onboarding

When creating a Twilio account, Twilio will ask several questions to help customize your experience. Most importantly, Twilio will ask for a project name. You can provide your company name, app name, or something else appropriate (you can always change the project name later). This is necessary because Twilio will assign credentials unique to this *project*.

<Note>
  **RELATED RESOURCES**

  * [Courier API Reference](../../reference/intro)
  * [Twilio Phone Numbers Product Page](https://www.twilio.com/phone-numbers)
  * [Twilio Phone Numbers API Docs](https://www.twilio.com/docs/phone-numbers)
  * [Twilio Programmable SMS Docs](https://www.twilio.com/docs/sms)
  * [Bash Environment Variables](https://www.gnu.org/software/bash/manual/html_node/Environment.html)
  * [cURL](https://curl.haxx.se/)
</Note>

### Add the Twilio Integration

Once logged in to Courier, navigate to the ["Integrations" page](https://app.courier.com/integrations). Click on the Twilio Integration to configure it.

Courier Integrations each require different pieces of information based on the needs of the Integration provider (see the requirements for each in the "Provider Documentation" section of the sidebar to the left). In the case of Twilio, we need an "Account SID," "Auth Token," and "Messaging Service SID." We will retrieve these from Twilio shortly.

<Frame caption="Courier's Twilio Configuration Page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/integration.png" />
</Frame>

#### Twilio Account SID and Auth Token

Once logged in to Twilio, navigate to the ["Dashboard"](https://www.twilio.com/console/project/settings) by clicking the house icon on the sidebar.

This page will display a section labeled "Project Info" with your "Account SID" and "Auth Token." Paste these into the corresponding fields on [Courier's Twilio Integration page](https://app.courier.com/integrations/twilio).

<Frame caption="Twilio Authorization Credentials">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/auth-credentials.png" />
</Frame>

#### Twilio Overview

To send messages, we need a Twilio phone number with SMS capabilities and a Twilio Messaging Service. We will walk through the basics together, but Twilio provides [excellent documentation of their services as well](https://www.twilio.com/docs/).

#### Twilio Phone Numbers

First, purchase a Twilio phone number. Navigate to the ["Phone Numbers"](https://www.twilio.com/console/phone-numbers/incoming) page of the [Twilio console](https://www.twilio.com/console) by clicking the circle icon in the sidebar, then "# Phone Numbers". Then, click on ["Buy a Number"](https://www.twilio.com/console/phone-numbers/search).

<Frame caption="Twilio Phone Number Menu">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/phone-number-menu.gif" />
</Frame>

You can search either for a specific number or by location. Select a number capable of sending SMS messages. Check the "SMS" box to filter for numbers with this functionality. Then click "Search." Twilio will load a list of available numbers with the capabilities and the price of each number listed in a table.

<Frame caption="Search for Phone Numbers">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/search-phone-number.gif" />
</Frame>

If you are new to Twilio, your trial account is initially funded with enough money to purchase a phone number and send many messages, so you won't have any expenses while completing this guide.

Select whichever available number appeals to you. You may be asked to comply with the regulatory requirements associated with the number — thorough regulatory documentation is provided by [Twilio](https://www.twilio.com/guidelines/regulatory). Be sure to use your number responsibly and comply with any requirements.

Click the "Buy This Number" button, and then select, "Setup number." This will load a phone number configuration page. We don't need to change anything for this tutorial.

<Frame caption="Buy a Phone Number">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/buy-phone-number.gif" />
</Frame>

#### Twilio Messaging Service

Now that we have a phone number, we need to create a Twilio Messaging Service that uses this number. Navigate to the ["Programmable SMS"](https://www.twilio.com/console/sms/dashboard) section of the Twilio console. This will display a Messaging Services dashboard. Navigate to the ["SMS"](https://www.twilio.com/console/sms/services) subsection in the sidebar.

<Frame caption="Twilio Messaging Services">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/messaging-service.png" />
</Frame>

This page displays a "Create new Messaging Service" link. Click this link to load a modal with two fields: "Friendly Name," and "Use Case."

Let's use "Courier SMS Service" for our "Friendly Name." There are several "Use Case" options. For this tutorial, we can select "Notifications, Outbound Only." For more about Twilio Messaging Services, see their ["Sending Messages" guide](https://www.twilio.com/docs/sms/send-messages#messaging-services). Next, click "Create."

<Frame caption="Configure the Messaging Service">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/configure-messaging-service.gif" />
</Frame>

Twilio will load a configuration page for your service. Thankfully, you shouldn't have to change anything here. You need only the "Service SID" at the top of the page. Copy this SID, and enter it into the "Messaging Service SID" field on [Courier's Twilio Integration page](https://app.courier.com/integrations/twilio). Click the "Add Integration" button. Then, click "Save."

<Frame caption="Twilio Service SID">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/service-sid.png" />
</Frame>

We have one thing left to configure. We must add our phone number to our Messaging Service. Go back to Twilio. Then navigate to your Twilio Messaging Service's configuration page. You will see two links in the sidebar beneath your "Courier SMS Service." Navigate to the "Numbers" subsection. This will load a page with an "Add an Existing Number" link. Click this link, and check the box to the right of the number you purchased earlier. Click "Add Selected."

<Frame caption="Add a Number to a Messaging Service">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/add-number.gif" />
</Frame>

### Create a Notification

Navigate to the Courier [Notifications page](https://app.courier.com/designer/notifications) and click “Create Notification”. Click on “Untitled Notification” to rename your notification — for this tutorial, call it “Test Appointment Reminder.” From your list of configured Integrations, click on the Twilio button. Then, click the “Twilio” box that has been added to the sidebar in order to bring up an SMS template.

You can add message blocks to the template by clicking one of the three icons on the mock-up smartphone. The paper icon adds a text block. The hand icon adds a link. The list icon adds a repeatable list.

<Frame caption="Courier Notification Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/courier-notification-template.png" />
</Frame>

These text blocks can include variables using a mustache-like template syntax. Surround text with a single set of curly braces and that text will be interpreted as a variable (it will also be highlighted in green). For example, you may want to include a `{name}` variable (we'll cover the source of this variable data later in this tutorial).

Finish populating the SMS template with whatever text you want to send. You can also copy the example below, which contains a few variables for demonstration.

```text
Hello {name},

This is an appointment reminder from Courier. We look forward to seeing you on {apt_date} at {apt_time}.

If you need to change your appointment for any reason, please contact us at least 24 hours in advance at {support_url} or {support_phone}.

Best regards,

Courier
```

<Frame caption="Courier Notification with Sample Message">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/courier-notification-template-sample.png" />
</Frame>

When you are finished, click Publish in the upper right corner and give it a Publish Message of "Initial notification."

### Send a Message

Courier passes messages to Integrations via the [Send endpoint](../../reference/send/message). For this tutorial, we will send our messages with cURL, but you can use your preferred language and HTTP library. You can also use an API testing tool such as [Postman](https://www.getpostman.com/) or [Insomnia](https://insomnia.rest/). For additional code samples, see the ["Courier API Reference"](../../reference/intro).

#### Authorization

Courier supports both basic and token authorization. For this tutorial, we will use token authorization. You can read more about authorization in Courier's ["Authorization Overview"](../../reference/authorization).

We must send an `Authorization` header with each request. The Courier Send API also requires an `event`. The authorization token and event values are the "Auth Token" and "Notification ID" we see in the detail view of our “Test Appointment Reminder” event. Click the gear icon next to the Notification's name to reveal them.

<Frame caption="Courier Authorization Credentials">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/courier-auth-credentials.png" />
</Frame>

As a best practice, let's assign these values to environment variables. In a Bash terminal, you can add the variables by typing `VARIABLE_NAME="<value>"`. Some examples are provided below. Note that the values are just examples. Do not copy them, and be sure to use the tokens associated with your account instead.

**Courier Auth Token Variable**

`COURIER_AUTH_TOKEN="YpW2yEaMDyNg6agN9yGkc9ycEg8MxiKVTiiu2WVc8"`

**Notification ID**

`COURIER_NOTIFICATION_ID="YpW2yEaMDyNg6agN9yGkc9ycEg8"`

These variables will persist for as long as your Bash session remains alive. If you quit your terminal, you will need to recreate them. However you handle your authorization tokens, keep them secure, and never add them to source control.

To verify that you created the variables correctly, you can see them by typing `echo $VARIABLE_NAME`. For example, typing `echo $COURIER_AUTH_TOKEN` will print the "Courier Auth Token" value to the terminal.

#### Building the cURL Request

We want to send a POST request to `https://api.courier.com/send`. Let's build our cURL request line-by-line. First, we'll tell cURL this is a POST request.

```bash
curl --request POST
```

Next, add the `Authorization` header using the `COURIER_AUTH_TOKEN` variable we set earlier. We send this as a Bearer token.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
```

We also have a `Content-Type` header, which is `application/json`.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
--header "Content-Type: application/json" \
```

We will pass the body of our request using the cURL `--data` option. You will often send this data in JSON format. To improve working with cURL, Courier also supports a custom urlencoded format that can be used in the place of JSON. This format allows nested data values using square bracket syntax. This guide provides examples in both formats, so feel free to use the format that you like best.

Our `--data` option must also contain an `event` and `recipient`. Additionally, we will send `profile` and `data` objects.

The `event` value, for this example, is the "Notification ID" that we assigned to our `COURIER_NOTIFICATION_ID` environment variable earlier.

A `recipient` should be a unique identifier that does not change. This prevents duplicate entries in the event that a recipient changes their email or some other identifying value. We do not have any recipients in this tutorial, so we can enter any string value. Something like `“peter_parker”` will work.

The `profile` information is an object that includes any key-value pairs required by our Integrations. In the case of Twilio, we need a `phone_number` key and value. This is the phone number where our message will be delivered. You can find the required keys for any Integration by selecting an Integration on the ["Integrations" page](https://app.courier.com/integrations). See the individual integration provider requirements for details.

Lastly, we define message variables inside the `data` object. Remember the variables we set in the
visual template editor? This is where we provide the values. Our example message had `name`,
`apt_date`, `apt_time`, `support_phone`, and `support_url` variables. For this tutorial, we can
assign example strings to each.

Our `--data` option should look like this:

<Tabs groupId="code">
  <Tab title="JSON">
    ```json
    {
      "event": "'"$COURIER_NOTIFICATION_ID"'",
      "recipient": "peter_parker",
      "profile": {
        "phone_number": "555-616-1962"
      },
      "data": {
        "name": "Peter Parker",
        "apt_date": "August 27, 2020",
        "apt_time": "11:00 AM",
        "support_phone": "555-555-5555",
        "support_url": "https://courier.com/docs"
      }
    }
    ```
  </Tab>

  <Tab title="cURL">
    ```bash
    --data "event=$COURIER_NOTIFICATION_ID" \
    --data "recipient=peter_parker" \
    --data "profile[phone_number]=555-616-1962" \
    --data "data[name]=Peter Parker" \
    --data "data[apt_date]=August 27" \
    --data "data[apt_time]=11:00 AM" \
    --data "data[support_phone]=555-555-5555" \
    --data "data[support_url]=https://www.courier.com/docs/" \
    ```
  </Tab>
</Tabs>

Now add the Send URL, `https://api.courier.com/send`, to complete the cURL request.

**Complete cURL Request in both Formats**

<Tabs>
  <Tab title="cURL in JSON">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data '{
      "event": "'"$COURIER_NOTIFICATION_ID"'",
      "recipient": "peter_parker",
      "profile": {
        "phone_number": "555-616-1962"
      },
      "data": {
        "name": "Peter Parker",
        "apt_date": "August 27",
        "apt_time": "11:00 AM",
        "support_phone": "555-555-5555",
        "support_url": "https://courier.com/docs"
      }
    }' \
    https://api.courier.com/send
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data "event=$COURIER_NOTIFICATION_ID" \
    --data "recipient=peter_parker" \
    --data "profile[phone_number]=555-616-1962" \
    --data "data[name]=Peter Parker" \
    --data "data[apt_date]=August 27" \
    --data "data[apt_time]=11:00 AM" \
    --data "data[support_phone]=555-555-5555" \
    --data "data[support_url]=https://www.courier.com/docs/" \
    https://api.courier.com/send
    ```
  </Tab>
</Tabs>

Before sending this request, be sure to replace the `555-616-1962` value with a phone number you can access. Also, note the `"'"$COURIER_NOTIFICATION_ID"'"` formatting in the JSON formatted `--data` option. The quotes are necessary to escape the JSON quotes and access the `COURIER_NOTIFICATION_ID` variable.

Paste your complete cURL request in either format in your terminal and hit "Return." You should receive a response like `{"messageId":"<message id string>"}`. You will also receive an SMS at the phone number you specified in the request body. If you do not receive a message, be sure the phone number provided in the `profile` is an approved number with Twilio. Twilio trial accounts may limit your ability to send messages to *unknown* numbers.

<Frame caption="Send the cURL Request">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/send-curl-request.png" />
</Frame>

<br />

<Frame caption="Delivered SMS Message">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/twilio/delivered-message.png" />
</Frame>

## Profile Requirements

To deliver a message to a recipient over Twilio, Courier must be provided the recipient's SMS-compatible phone number. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+491575556511"
    }
  }
}
```

## Overrides

<Warning>
  **TWILIO POLLING**

  Courier relies on configured credentials for status polling. Using overrides will fail to poll Twilio's API for status events. Use the Twilio integration without overrides to get sms events.
</Warning>

Overrides can be used to change the request body that Courier uses to send an SMS message. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates. You can override any of the fields supported by Twilio's `Messages.json` endpoint ([see all send request body fields here](https://www.twilio.com/docs/sms/api/message-resource#create-a-message-resource)). Below is an example of overriding the to phone number and the account SID + auth token for the configuration:

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "phone_number": "+12345678901"
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "twilio": {
        "override": {
          "body": {
            "to": "+109876543210"
          },
          "config": {
            "accountSid": "<your Account SID>",
            "authToken": "<your Auth Token>",
            "messagingServiceSid": "<your Messaging Service SID>"
          }
        }
      }
    }
  }
}
```

Congratulations, you're on your way to crafting a better notification strategy that your audience is sure to appreciate.

## Troubleshooting: Twilio Error Codes and Solutions

### Error Code 30003: Destination Unavailable

*Message failed to deliver due to unreachable destination.*

* Send another message via REST API or API Explorer
* Check device status, signal strength, and carrier network
* Use "Fallback to Long Code" feature if needed
* Open support request if issue persists

### Error Code 30007: Message Filtered

*Messages filtered by Twilio or carrier due to policy violations.*

* Ensure compliance with Twilio's Messaging and Acceptable Use Policies
* Secure account credentials
* Open support request if you suspect a mistake

### Error Code 30005: Unknown or Inactive Destination

*Issues with carrier, signal, or inactive number.*

* Verify number is active and formatted correctly (E.164)
* Check device status and signal
* Test with other devices on same carrier

### Error Code 30006: Landline or Unreachable Carrier

*Message sent to landline or unreachable carrier.*

* Use Lookup API to check if number is landline
* Try alternative phone number type

### Error Code 30008: Unknown Delivery Failure

*Message failed for unknown reasons.*

* Test with simpler message and different sender ID
* Check device roaming status
* Contact support with recent message SIDs if issue persists

### Error 11200: HTTP Retrieval Failure

*Failed to retrieve content from given URL.*

* Verify web server status and accessibility
* Check for network issues
* Ensure proper server configuration for static resources

### Error 12300: Invalid Content-Type

*Twilio unable to process URL's Content-Types.*

* Verify correct Content-Type returned by server
* Ensure URL refers to valid, acceptable resource

### Error 20003: Permission Denied

*Lack of permission to access requested resource.*

* Verify correct Auth Token and account SID combination
* Check account type (sub-account vs master, test vs live)
* Confirm API Key and Auth Token are valid

### Error 20404: Resource Not Found

*Requested resource doesn't exist or is unavailable.*

* Check resource exists and API case-sensitivity
* Verify account SID and base URL

### Error 21211: Invalid "To" Phone Number

*Incorrectly formatted or invalid recipient number.*

* Ensure E.164 format with correct country code
* Avoid calling/messaging a Twilio number from itself

### Error 21408: Permission Not Enabled for Region

*Permission not enabled for recipient's region.*

* Enable permission in Geo-Permissions settings

### Error 21610: SMS STOP Filter

*Recipient previously unsubscribed using "STOP" keyword.*

* Request recipient to text "START" to resubscribe
* Ensure consent for messaging

### Error 53000: Signaling Connection Error

*Lost or failed signaling communication.*

* Attempt multiple reconnections
* Try connecting to a different region

### Test Credentials Not Working

*Test credentials don't send actual messages or make calls.*

* For end-to-end testing, use trial credits in a separate project
* In production, use magic number +15005550006 as "From" number

### Webhook Not Working

*Issues with webhook functionality.*

* Check error logs for detailed information
* Test webhook in browser, check for HTTP redirects
* Contact Twilio support if unresolved

### Video/Audio Not Working

*Problems with video or audio transmission.*

* Check Twilio Status Pages for incidents
* Identify affected parties and regions
* Contact support with detailed information if persistent

### Send Message Not Working

*Unable to send messages successfully.*

* If opted out, text "START" or "YES" to opt-in
* Verify recipient number status, reception, and roaming
* Check "do not contact" list
* Contact support with failed message SIDs

### Import Twilio Not Working

*Issues importing the Twilio library.*

* Install library correctly: `pip3 install twilio`
* Check for conflicting `twilio.py` files
* Verify pip configuration
* Test with sample code snippet


# Vonage
Source: https://www.courier.com/docs/external-integrations/sms/vonage

Step-by-step tutorial for integrating Vonage (formerly Nexmo) with Courier to send SMS notifications, including required phone number formatting for recipient profiles.

## Profile Requirements

To deliver a message to a recipient over Vonage (formally Nexmo), Courier must be provided the recipient's SMS-compatible telephone number. Be sure that all phone numbers include country code, area code, and phone number without spaces or dashes. This value should be included in the recipient profile as `phone_number`.

```json
{
  "message": {
    // Recipient Profile
    "to": {
      "phone_number": "+491575556511"
    }
  }
}
```


# Courier Concepts
Source: https://www.courier.com/docs/getting-started/courier-concepts

Courier key concepts include notifications, audiences, channels, content blocks, brands, events, profiles, and overrides—each playing a role in designing, personalizing, routing, and delivering messages across SMS, email, push, and direct channels.

## Audience

An Audience is a user collection that automatically adheres to a set of rules. These rules can be as simple as:

```JSON
{
      "operator": "EQ",
      "path": "locale.city",
      "value": "San Francisco"
}
```

Which can also be extended to a complex set of operations. Audience rules can be defined in the Courier Web App or via the Audiences API.

## Automations

An [automation](../tutorials/how-to-automate-message-sequences) is a fully managed orchestration service that makes it easy to design complex notification workflows with the [API](../reference/automation/intro) or via the [Automations template designer](../platform/automations/designer).

## Brands

Brands let you apply a consistent look and feel to your email notifications. You can also use this feature to [white-label](../platform/content/brands/brands-in-email-notifications) email notifications you send on behalf of your customers to their end-user recipients or if you have multiple brands internally. Courier Brands are fully [API enabled](../reference/brands/intro).

## Channels

Courier notifications can be configured to send to different notification types or channels: `email`, `SMS`, `push` and `direct_message`.

## Channel Routing

Courier's [channel routing](../platform/sending/channel-priority) rules let you prioritize which channels are used to send your notifications. Channels are arranged in a top-to-bottom hierarchy.

## Content Blocks

[Content blocks](../platform/content/content-blocks/content-block-basics) are responsive and reusable content that can be used across channels inside a notification template.

## Conditions

[Conditions](../platform/sending/channel-settings/#conditions) in Courier let you apply conditionals to enable/disable content, channels, and notifications.

## Device Token

A device token is a unique key for the app-device combination issued by the Apple or Google push notification gateways. It allows gateways and push notification providers to route messages and ensure the notification is delivered only to the unique app-device combination for which it is intended. Courier's [Token Management API](../reference/token-management/intro) is used to store and track the status of user device tokens.

## Elemental

[Courier Elemental](../platform/content/elemental/intro) is a powerful JSON based syntax for describing the content of your notification in a way that will work for email, push, chat, or any channel you use to notify users.

## Events

An event is a unique identifier that can be mapped to an individual Notification. These events can be defined by you, i.e. `new-user` or by an incoming [event through Segment](../platform/automations/segment).

## Handlebars

Handlebars is a simple email templating language that generates HTML. Courier's Notification Designer offers template blocks that use Handlebars or switch to the [Handlebars editor](../platform/content/notification-designer/handlebars-designer) and build your entire template in HTML and CSS.

## List

A list is a static group of users defined by you via the [List API](../reference/lists/intro).

## Logs

Courier's notification [logs](../platform/logging/message-logs) provide a timeline along with insights into the status of sent messages and automations.

## Notifications

Notifications are messages you send through channels via the delivery systems you integrate with Courier. Each notification has a unique identifier known as the `notification_id` which you can find in the [notification settings](../platform/content/notification-designer/notification-designer-overview).

## Override

Overrides can be [used to change the request body](../external-integrations/email/intro/#email-channel-overrides) that Courier sends to a provider. Overrides are useful when you want to pass additional values to the downstream provider.

## Profile

A [profile](../reference/profiles/intro) is a JSON object that includes any key-value pairs required by external integrations.

## Provider

[Providers](https://www.courier.com/providers/) are the downstream channel service providers (Twilio, Sendgrid, APN, etc,) you connect to Courier to send notifications.

## Transactional Emails

Many courier customers use us to build transactional email notification templates. Although Courier does not actually send emails (that's done by the [email service providers](../external-integrations/email/intro) you integrate with Courier) you can add [unsubscribe links](../reference/user-preferences/intro) to your Courier email templates. Understanding when an email notification is transactional or relationship is important and the [CAN-SPAM](https://www.ftc.gov/business-guidance/resources/can-spam-act-compliance-guide-business) act's definition is a good place to start.

## White-labeling

[White labeling](../platform/content/brands/brands-in-email-notifications) is when you remove your brand and logo from notifications and instead use branding defined by your customer. In other words, white-label email notifications are sent by you on behalf of your customers to their end-users. This means end-users receiving email notifications you send see your customers' branding on the email.


# Courier Quickstart Guide
Source: https://www.courier.com/docs/getting-started/quickstart

Step-by-step quickstart guide for installing and using the Courier SDK to send notifications via email or other channels in Node.js, Python, Ruby, PHP, Java, Go, and C#. Includes code examples and message formatting tips.

This quickstart demonstrates how to send messages from applications using various programming languages.

## Prerequisites

1. [Sign-up](https://app.courier.com/signup) for a Courier Account and Workspace
2. Add an [integration](/external-integrations/intro).
3. Make sure you have installed the latest version of your preferred programming language
4. Install the [Courier SDK](/sdk-libraries/server-sdks) for your language

## Installation

<CodeGroup>
  ```bash Node.js
  npm install @trycourier/courier
  ```

  ```bash Python
  pip install trycourier
  # or
  poetry add trycourier
  ```

  ```bash Ruby
  # Add to Gemfile
  gem 'trycourier'
  # Then run
  gem install trycourier
  ```

  ```bash PHP
  composer require trycourier/courier
  ```

  ```bash Java
  # Add to pom.xml
  <dependency>
    <groupId>com.courier</groupId>
    <artifactId>courier-java</artifactId>
    <version>X.X.X</version>
    <scope>compile</scope>
  </dependency>

  # Then run
  mvn compile
  ```

  ```bash Go
  go get github.com/trycourier/courier-go/v2
  ```

  ```bash C#
  # Using .NET CLI
  dotnet add package Courier.Client

  # Using NuGet CLI
  nuget install Courier.Client
  ```
</CodeGroup>

## Initialize the SDK

First, import the Courier client and initialize it with your authorization token:

<CodeGroup>
  ```javascript Node.js
  const { CourierClient } = require("@trycourier/courier");
  const courier = new CourierClient({ authorizationToken: "<AUTH_TOKEN>" });
  ```

  ```python Python
  from courier.client import Courier

  client = Courier(authorization_token="<AUTH_TOKEN>")
  ```

  ```ruby Ruby
  require "trycourier"

  client = Courier::Client.new "<AUTH_TOKEN>"
  ```

  ```php PHP
  <?php
  require "./vendor/autoload.php";
  use Courier\CourierClient;

  $courier = new CourierClient("https://api.courier.com/send", "<AUTH_TOKEN>");
  ```

  ```java Java
  import services.Courier;
  import services.SendService;
  import models.SendEnhancedRequestBody;
  import models.SendEnhancedResponseBody;
  import models.SendRequestMessage;
  import com.google.gson.Gson;
  import java.io.IOException;
  import java.util.HashMap;

  Courier.init("<AUTH_TOKEN>");
  ```

  ```go Go
  import (
      "context"
      "log"
      "github.com/trycourier/courier-go/v2"
  )

  client := courier.CreateClient("<AUTH_TOKEN>", nil)
  ```

  ```csharp C#
  using Courier.Client;

  var courier = new Courier("<AUTH_TOKEN>");

  // Optional: Configure client options
  var courier = new Courier("<AUTH_TOKEN>", new ClientOptions {
      TimeoutInSeconds = 60,
      MaxRetries = 2
  });
  ```
</CodeGroup>

## Send a Message

Here's how to send a basic notification message:

<CodeGroup>
  ```javascript Node.js
  const { requestId } = await courier.send({
    message: {
      to: {
        email: "email@example.com",
      },
      content: {
        title: "Welcome!",
        body: "Thanks for signing up, {{name}}",
      },
      data: {
        name: "Peter Parker",
      },
      routing: {
        method: "single",
        channels: ["email"],
      },
    },
  });
  ```

  ```python Python
  response = client.send(
    message=courier.ContentMessage(
      to=courier.UserRecipient(
        email="email@example.com",
        data={
          "name": "Peter Parker",
        }
      ),
      content=courier.ElementalContentSugar(
        title="Welcome!",
        body="Thanks for signing up, {{name}}",
      ),
      routing=courier.Routing(
        method= "single",
        channels=["email"]
      )
    )
  )
  ```

  ```ruby Ruby
  res = client.send({
      message: {
          to: {
            "email" => "email@example.com",
          },
          content: {
            "title" => "Welcome!",
            "body" => "Thanks for signing up, {{name}}",
          },
          data: {
            "name" => "Peter Parker",
          },
          routing: {
            "method" => "single",
            "channels" => ["email"],
          },
      },
  })
  ```

  ```php PHP
  $result = $courier->sendEnhancedNotification(
    (object) [
      'to' => [
        'email' => "email@example.com",
      ],
      'content' => [
        'title' => "Welcome!",
        'body' => "Thanks for signing up, {{name}}",
      ],
      'data' => [
        'name' => "Peter Parker",
      ],
      'routing' => [
        'method' => "single",
        'channels' => ["email"],
      ],
    ],
  );
  ```

  ```java Java
  SendEnhancedRequestBody request = new SendEnhancedRequestBody();
  SendRequestMessage message = new SendRequestMessage();

  HashMap<String, String> to = new HashMap<String, String>();
  to.put("email", "email@example.com");
  message.setTo(to);

  HashMap<String, Object> content = new HashMap<String, Object>();
  content.put("title", "Welcome!");
  content.put("body", "Thanks for signing up, {{name}}");
  message.setContent(content);

  HashMap<String, Object> data = new HashMap<String, Object>();
  data.put("name", "Peter Parker");
  message.setData(data);

  HashMap<String, Object> routing = new HashMap<String, Object>();
  routing.put("method", "single");
  routing.put("channels", ["email"]);
  message.setRouting(routing);

  request.setMessage(message);
  SendEnhancedResponseBody response = new SendService().sendEnhancedMessage(request);
  ```

  ```go Go
  requestID, err := client.SendMessage(
    context.Background(),
    courier.SendMessageRequestBody{
      Message: map[string]interface{}{
        "to": map[string]string{
          "email": "email@example.com",
        },
        "content": map[string]string{
          "title": "Welcome!",
          "body": "Thanks for signing up, {{name}}",
        },
        "data": map[string]string{
          "name": "Peter Parker",
        },
        "routing": map[string]string{
          "method": "single",
          "channels": ["email"],
        },
      },
    },
  )
  ```

  ```csharp C#
  try 
  {
      var response = await courier.SendAsync(
          new SendMessageRequest 
          {
              Message = new Message 
              {
                  To = new Recipient 
                  {
                      Email = "email@example.com"
                  },
                  Content = new MessageContent 
                  {
                      Title = "Welcome!",
                      Body = "Thanks for signing up, {{name}}"
                  },
                  Data = new Dictionary<string, object> 
                  {
                      { "name", "Peter Parker" }
                  },
                  Routing = new MessageRouting 
                  {
                      Method = "single",
                      Channels = new[] { "email" }
                  }
              }
          });

      Console.WriteLine($"Message sent! Request ID: {response.RequestId}");
  }
  catch (CourierException e)
  {
      Console.WriteLine($"Error: {e.Message}");
      Console.WriteLine($"Status Code: {e.StatusCode}");
  }
  ```
</CodeGroup>

### Message Properties

The message object contains these main properties:

* `to`: Identifies the recipient (email address, phone number, etc.)
* `content`: The notification's title and body
* `data`: Variables to populate message templates
* `routing`: Controls which channel(s) deliver the message

The API call returns a request ID:

```json
{ "requestId": "87e7c05b-4f46-fda24e356e23" }
```

Monitor notification status in the [logs](https://app.courier.com/logs).


# What is Courier?
Source: https://www.courier.com/docs/getting-started/what-is-courier

Overview of Courier’s platform for designing, routing, and tracking cross-channel notifications via a unified API—supporting email, SMS, push, and direct messaging with integrations like Twilio, SendGrid, Firebase, and Slack.

## What Can I Do With Courier?

If you send notifications to users via [email](../external-integrations/email/intro), push, [SMS](../external-integrations/sms/intro), or [direct message](../external-integrations/direct-message/intro), you can use Courier to:

### Design Notification Content

Courier's [Notification Designer](../platform/content/notification-designer/notification-designer-overview) empowers every team member to build beautiful notifications.

* Drag & drop content without writing code.
* Consistent rendering across every email client.
* Re-use content for any channel.
* Consistent branding across all your notifications.

### Build Powerful Delivery Rules

Route each message to the most effective notification channel using a robust [delivery rules engine](../platform/sending/channel-priority) without touching your code.

* Drag and drop channel prioritization.
* Always send settings.
* "Best of" channel settings.

### Track Cross-Channel Delivery

Courier [Data Logs](https://help.courier.com/en/articles/4364860-using-the-data-logs) and Metrics give you insight into your notification performance across all channels.

* Find the best channel for each user.
* Compare deliverability across multiple providers.
* Detailed event log for every user on every channel.

## Which Providers Integrate With Courier?

Courier integrates with dozens of leading notification providers like Slack, Sendgrid, Twilio, Mailgun, Airship, Firebase, Facebook Messenger and more.

* [Email](../external-integrations/email/intro) integrations
* [Push](../external-integrations/push/intro) integrations
* [SMS](../external-integrations/sms/intro) integrations
* [Direct message](../external-integrations/direct-message/intro) integrations


# Courier Help Center
Source: https://www.courier.com/docs/help

Find the answers to your questions or explore helpful resources.

If you're having issues with the Courier platform, you can reach out to our support team and check other resources below.

<CardGroup size="medium">
  <Card title="Contact Support" icon="life-ring" icoonType="solid" href="mailto:support@courier.com">
    You can contact our support team here.

    **[support@courier.com](mailto:support@courier.com)** <Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Courier Status" icon="wave-pulse" icoonType="solid" href="https://status.courier.com/">
    <ServiceStatus />

    Monitor and subscribe to alerts regarding Courier infrastructure health.

    **See Status** <Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Ask the Community" icon="discord" icoonType="solid" href="https://discord.gg/courier">
    Join the Courier Discord community here.

    **Join the Courier Community** <Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Courier Changelog" icon="list" icoonType="solid" href="https://www.courier.com/changelog/">
    Stay up to date with new releases and bug fixes to the Courier platform.

    **View the Changelog** <Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>
</CardGroup>


# Batching
Source: https://www.courier.com/docs/platform/automations/automations2/batching

Learn how to use Courier’s Batching feature to group multiple events into a single notification using inactivity periods, max events, or wait time—reducing message volume and improving engagement.

<Note>
  **NOTE**

  Batching is currently in Public Beta and under active development. The API may change, and this feature is not covered under the Enterprise SLA.
</Note>

This reduces notification frequency and improves the likelihood of recipients engaging with the content.
Batching operates based on the following criteria:

1. **Period of inactivity**: If no events occur within a defined time span (e.g., one hour), all events since the last notification are bundled into a single notification.
2. **Maximum event count**: Notifications are held until a specified number of events (e.g., 100) have accumulated. These events are then summarized in a single notification.
3. **Maximum wait time**: All events that would have triggered notifications within a predefined duration (e.g., 24 hours) are summarized into a single notification.

Batching is supported across various channels (email, SMS, chat, in-app inbox, push) and providers (Twilio, Sendgrid, email SMTP, Slack, MS Teams, WeChat).

## Batching Example Use Cases

### Article Performance Summary

When an article is published on a news website, events are generated for each view, comment, and share.
Instead of sending a notification for each event, these events can be batched within an automation.
Once the initial surge of activity subsides or the maximum wait time is reached, the batch compiles view count, top comments, and share count data.
This summary is then sent to the author via email.

### Data Warehouse Analytics

A company processing large amounts of data may generate reports at different times.
An event is triggered upon each report's completion.
With batching, these reports can be grouped and sent in a single email once all the reports for the day are generated.

### Social Media Engagement

When a user creates a popular post that receives numerous likes within minutes, batching can be used to notify the user once the post hasn't received new likes for a specified period.
For example, "Your post received 17 likes."

## Creating A Batch

To create a batch, use the "Add to Batch" action, then click within the batch node to open the editor in the sidebar.

<iframe width="100%" height="400" src="./assets/digests-batching-throttling/creating-a-batch.mp4" allow="autoplay; encrypted-media" allowFullScreen />

## Configuring A Batch

To configure a batch, click on the batch node to open the editor in the sidebar.

<div className="table-wrapper">
  | Parameter        | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
  | ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
  | **Wait Period**  | Defines the period of inactivity before a batch is considered complete. If no events are received within this time frame, the batch will be finalized and sent to the next step.                                                                                                                                                                                                                                                                                                             |
  | **Max Wait**     | Defines the maximum amount of time to wait before finalizing the batch. If this time frame is reached, the batch will immediately complete, even if an event had been received within the "wait period."                                                                                                                                                                                                                                                                                     |
  | **Retain Items** | Defines the number of items to retain and send with the batch. Users can specify any positive integer value. Retention does not affect the tracked count. For example, if `Retain Items` is set to 10 and 15 items are received, the passed count will be 15, but only 10 items will be included in the batch. Options: **First *N***, **Last *N***, **Highest *N*** (requires `Sort Key`), **Lowest *N*** (requires `Sort Key`), where *N* is the user-specified number of items to retain. |
  | **Sort Key**     | Required when Highest or Lowest is selected for Retain Items. Defines the key of the data object to be used to determine item ordering. For example, if `Sort Key` is set to `refs.data.upvotes`, and the automation is invoked with `{ "data": { "upvotes": 5 }}`, `5` will be the value used to determine the order and position of the event in the items array.                                                                                                                          |
  | **Max Items**    | *(Optional)* Defines the maximum number of events to include in a batch before completion. When a batch has received this number of events, it will immediately finalize and send the batch to the next step.                                                                                                                                                                                                                                                                                |
  | **Scope**        | Defines the scope of the batch, determining how events are grouped together. Options: **Global** (default), **User**, **Dynamic**. See [Batch Scope](./#batch-scope) for more details.                                                                                                                                                                                                                                                                                                       |
  | **Category Key** | *(Optional)* Allows events to be grouped by categories. See [Working with Categories](./#batch-categories) for more details.                                                                                                                                                                                                                                                                                                                                                                 |
</div>

## Batch Scope

The `Scope` parameter in the batch node configuration allows you to define the scope of the batch.
It determines how events are grouped together within the batch.
There are three options for the batch scope:

| Scope                | Description                                                                                                                                                                                                                                                                                                                                 |
| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Global (default)** | • Events are grouped together based on the batch step ID.<br />• The batch will trigger and send the grouped events to the next step when either the maximum number of events is reached or the specified time period elapses.                                                                                                              |
| **User**             | • Events are grouped together based on the unique combination of `user_id` and batch step ID.<br />• The batch will trigger when enough events associated with a specific user are added to the batch or when the specified time period elapses, allowing for user-specific batching of events.                                             |
| **Dynamic**          | • Events are grouped together based on the `Batch Key` specified in the batch configuration, regardless of the batch step ID or automation they belong to.<br />• This allows for flexible event grouping based on specific criteria, but may lead to unexpected results as events from different batch steps or automations may be merged. |

<Warning>
  **CAUTION**

  Please note that the dynamic scope behavior is subject to change in future revisions of the automation system.
</Warning>

## Invoking a Batch

* When a batch node is invoked, Courier checks for an ongoing batch run for the configured scope.
  * **If none exists:**
    1. A new batch run is created.
    2. The current automation run is marked as pending.
    3. The system waits until the batch is complete before proceeding to the next step.
  * **If an existing batch run is found:**
    1. The data object is added to the existing batch.
    2. The current automation run is terminated.
    3. Steps connected to the batch are not executed, ensuring that nodes following a batch node are only executed once per batch run.

```ts
{
  batch: {
    // The number of events received for this category, may be different than items.length
    // depending on item retention configuration.
    count: number;
    // An array of the data objects of each automation added to this batch.
    items: any[];
  }
}
```

**Example:** If a batch automation is invoked 3 times with the following values:

```js Invoke
{
  data: {
    like_from: "Drew";
  }
}
```

```js Invoke
{
  data: {
    like_from: "Alex";
  }
}
```

```js Invoke
{
  data: {
    like_from: "Abby";
  }
}
```

The steps following the batch node would be provided this data object:

```js Completed Batch Data
{
  batch: {
    count: 3,
    items: [
      { like_from: "Drew" },
      { like_from: "Alex" },
      { like_from: "Abby" },
    ]
  }
}
```

This data can be accessed from a notification template using variable syntax.

<Frame caption="Accessing Batch Data from a Notification Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/digests-batching-throttling/batch-data-in-notification-template.png" alt="Accessing batch data from a notification template" />
</Frame>

## Batch Categories

When the `Category Key` is set to a dynamic value such as `refs.data.category_key`, events can be grouped by category in a batch run.
In this case, the batch is aggregated by category:

<Frame caption="Accessing Batch Data by Dynamic Category Key">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/digests-batching-throttling/dynamic-category-key.png" alt="Accessing batch data from a notification template" />
</Frame>

**Example:** In the batch node, `Category Key` is set to `refs.data.category_key`.
Each time the automation is invoked, a `category_key` is supplied.

Given the following invocations:

```js Invoke
{
  data: {
    category_key: "likes",
    like_from: "Drew"
  }
}
```

```js Invoke
{
  data: {
    category_key: "likes",
    like_from: "Alex"
  }
}
```

```js Invoke
{
data: {
  category_key: "comments",
  comment: "Excellent post!"
  }
}
```

The automation steps following the batch node would receive this data object:

```js Completed Batch Data
{
  "batch": {
    "likes": {
      "count": 2,
      "items": [
        { "like_from": "Drew" },
        { "like_from": "Alex" }
      ],
    },
    "comments": {
      "count": 1,
      "items": [
        { "comment": "Excellent post!" }
      ],
    },
  }
}
```


# Cancelling an Automation
Source: https://www.courier.com/docs/platform/automations/automations2/cancel

Courier Automations can be cancelled using a dynamic cancellation token. Add the token in settings, then invoke a separate automation with a “Cancel Automation” node referencing the same token.

## Add a Cancellation Token

To allow an automation to be cancelled, add a cancellation token to the automation.

1. Navigate to the settings tab of the automation you want to cancel.
2. Add a cancellation token. This can be any value desired. Its best to use a dynamic value so
   a specific automation invocation may be cancelled, rather than all running instances. For
   example, you may use `refs.data.userId`, which would allow the automation run to be associated
   with the user the automation would send to.
3. Publish the automation.

<iframe width="100%" height="400" src="./assets/setting-up-cancellation-token.mp4" allow="autoplay; encrypted-media" allowFullScreen />

4. Create a new automation
5. Add the `Cancel Automation` node
6. Set the token to the same token from step 2.
7. Publish

<iframe width="100%" height="400" src="./assets/setting-up-delay-and-send.mp4" allow="autoplay; encrypted-media" allowFullScreen />

An automation can also be canceled from automation logs.

1. Navigate to the [automation logs page](https://app.courier.com/logs/automations) in Courier.
2. Find your automation in the logs, you can search with a run Id or source.
3. If your automation has not finished processing, a cancel button will be shown in the run summary.
4. Clicking this button will cancel your automation.

<Frame caption="Canceling an automation from logs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/cancel-button-logs.png" alt="Accessing batch data from a notification template" />
</Frame>

## Templated Cancellation Token

It may be advantageous to create a compound key for your cancellation token. For example, if you want to have a cancellation token that combines two different fields, or a data field and a static string. In automations, most fields support Javascript string interpolation and the cancellation token is an example of one. The documentation above says you can use `refs`, for example `refs.data.userId` and the following would be identical in the cancellation token field, `${data.userId}`. For more advanced interpolation you can perform nested interpolations as well.

**Static Fields**

```javascript
${`onboarding-flow-${data.userId}`}
```

**Combining Fields**

```javascript
${`${data.userId}-${data.tenantId}`}
```


# Introduction
Source: https://www.courier.com/docs/platform/automations/automations2/control-flow

Courier Automations support conditional logic using “If” nodes. Conditions evaluate data, profile, step results, or custom JavaScript to determine which branch of the workflow to execute next.

For example, you may want to send one template if one data field represents a certain value, or another template if it does not:

## Condition Sources

The Control Flow `If` node has four different source options, data, profile, step ref and JS condition. These sources control whether to follow the True path or the False path by evaluating the sources.

### Data

Compare a field within the `data` key within the automation context with a value. For example:

| Condition                                                                                                                                                             | Automation Payload                                        | Evaluation |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------- | ---------- |
| ![data flow condition - not equals](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/data-flow-condition.png)    | `{{recipient: "user123", "data": {"foo": "bar"}}}`        | True       |
| ![data flow condition - one Of](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/data-flow-condition-one-of.png) | `{{recipient: "user123", "data": {"throw": "scissors"}}}` | False      |

### Profile

Compare a field within the `data` key within the automation context with a value. For example:

| Condition                                                                                                                                                                     | Automation Payload                                                                                           | Evaluation |
| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------ | ---------- |
| ![profile flow condition - equals](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/profile-flow-condition-equals.png)   | `{{recipient: "user123", "profile": {"user_id": "user123", first_name: "bryan" }}}`                          | True       |
| ![profile flow condition - one of](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/profile-flow-condition-contains.png) | `{{recipient: "user123", "profile": {"user_id": "user123", properties: { roles: ["admin", "developer"] }}}}` | True       |

### Step Ref

Step Ref is designed for you to check the status of a Send node. In order to use Step Ref, you must have a Send node and have the alias of the Send node defined in its configuration.

`CLICKED` | `DELIVERED` | `ENQUEUED` | `FILTERED` | `OPENED` | `SENT` | `SIMULATED` | `UNDELIVERABLE` | `UNMAPPED` | `UNROUTABLE`

<Frame caption="Automation Control Flow">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/control-flow.png" />
</Frame>

### JS Condition

Sometimes the value checking is not open ended enough to evaluate a condition. Using the JS Condition you can:

* manipulate the field value before comparing
* check for key existence
* Comparing date diffs as ISO strings
* manipulate nested arrays and objects

We will evaluate the manipulation into a Javascript Boolean after the equation

| Condition                                                                                                                                                                      | Automation Payload                                                                                    | Evaluation |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------- | ---------- |
| ![js condition value - map includes](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/js-condition-value-map-include.png) | `{{recipient: "user123", data: {names: [{name: "Alvin"}, {"name": "Simon"}, {"name": "Theo"}] }}} />` | False      |

#### JS Condition Values

Within the Data, Profile and Step Ref Sources, you may also use JS String evaluation in the value field

| Condition                                                                                                                                                       | Automation Payload                                        | Evaluation |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------- | ---------- |
| ![js condition value - date](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/js-condition-value-date.png) | `{{recipient: "user123", data: {ts: 1095869760000 }}} />` | True       |


# The Automations Designer
Source: https://www.courier.com/docs/platform/automations/automations2/designer

Courier’s Automations Designer is a visual builder for creating notification workflows. Add trigger and action nodes, configure logic, and invoke automations via API, triggers, or in-app testing.

## Creating an Automation

Start by navigating to the [automations page within the Courier
app](https://app.courier.com/automations). From there, a new automation template can be created by
clicking the `New Automation` Button.

<Frame caption="Automations Home Page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/automations-list-page.png" alt="Automations Home Page" />
</Frame>

## Renaming an Automation

To rename a template, click the name in the upper left hand corner of the designer. By default, the
name is "Untitled Automation". The name is automatically saved after being updated.

<Frame caption="Renaming an Automation Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/renaming.png" alt="Renaming an automation template" />
</Frame>

## Working with Automation Nodes

A new template starts with two placeholder nodes. A trigger placeholder, and an action placeholder.

The top placeholder with acts as a placeholder for an automation trigger node. A trigger node
defines what starts an automation run. The trigger is optional, a template can always be directly
triggered using the `api/automations/:template_id/invoke` api endpoint

The bottom one acts as a placeholder for action and control flow nodes.

To add nodes, expand from the list on the left and then click and drag a node onto the right. The
first trigger and action node will snap into their respective placeholders:

## Automation Invocation

<Warning>
  **CAUTION PUBLISH**

  **Be sure to publish the template before invoking (using the publish button on the upper right)**
</Warning>

There are a few ways to invoke a template, either directly in the automation template, through a trigger node, or through an api call.

See [Scheduling automations](./scheduling) or [Triggering With Segment](./segment) to get
an understanding of how trigger nodes work.

### Invoking an Automation using the API

To run an automation by api call, grab the automation template id or the alias from the settings section of
the designer and invoke it by calling POST `api/automations/:template_id_here/invoke`. View
[Automations API docs](https://www.courier.com/docs/reference/automation/invoke-template/) for
more details.

<Frame caption="Template ID Location">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/template-id-location.png" alt="Template ID location, settings tab" />
</Frame>

### Invoking an Automation from the Designer

You can invoke the automation template directly from the designer in the **Invoke** tab. This can be a good way to test the automation or to invoke very simple automation templates.
*Note:* Invoking from the designer will pass an empty data payload `{}` to the automation run

<Frame caption="Template Invoke Tab">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/template-invoke.png" alt="Template invoke tab" />
</Frame>


# Digests
Source: https://www.courier.com/docs/platform/automations/automations2/digest

Courier Digests let you aggregate user events (e.g., likes, reports) into scheduled notifications. Configure schedules, categories, and preferences, then use Automations to collect and release digest data.

<Note>
  **NOTE**

  Status: This product is under active development and is available in a Private Beta, please
  contact Courier support for access.
</Note>

Courier Automations can be leveraged to create recurring user digests on configured intervals. This can be useful for things like weekly reports or user digests, while also offering user schedule preferences if desired.

## Prerequisite: Configure a Digest in the Preferences Editor

The first step is to configure a digest with at least one schedule in the [Preferences Editor](https://app.courier.com/settings/preferences). In the Preferences Editor, either create a new subscription topic or open the settings of an existing one.

### Configure digest release schedule

In the digest section click on schedules. This is where you define the schedule(s) at which the digest will be released. One schedule is required here however multiple schedules can be configured to give your users preference. If you have multiple schedules configured, these will show in the hosted preferences page as options for the user to select. Note: the date-time picker is currently configured in local timezone. Users viewing our hosted preference page, or using our front-end preference components will also see as their local timezone.

<Frame caption="Digest Schedules">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/digest-schedules.png" alt="Digest Schedules" />
</Frame>

### Configure Digest Categories

Categories provides the ability to separate disparate data within the same digest. For example, you may want to sort by likes and comments for a weekly digest of the blog posts with the most engagement. Each category has a `retain` setting. This describes the specific events that will be retained when the digest is released. 10 highest/10 lowest require a sort\_key which is a data attribute in the event we will use to sort the events by.

<Frame caption="Digest Categories">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/digest-categories.png" alt="Digest Categories" />
</Frame>

* first 10: the first 10 events that come in
* last 10: the last 10 events that come in
* 10 highest: The 10 highest events sorted by a specific data attribute
* 10 lowest: The 10 lowest events sorted by a specific data attribute
  The default value is `digest` and will retain the first 10 items.
  When the digest is released, it will be sent with the following format:

```json
[category_key]: {
  count: <total number of events>
  items: [...] // the individual events that match the retain setting. Maximum length of 10
}
```

### Configure Other Digest Settings

Settings has a toggle to invoke the digest when empty for users within an audience. Typically the digest will only send to users that had events come in during the schedule window. This option means that users in the audience will have a digest sent to them even if there were no events matching their user\_id. This can be useful for fetching your own data in the automation and sending the digest to your users with that custom data

<Frame caption="Digest Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/digest-settings.png" alt="Digest Settings" />
</Frame>

## Working with Digests in Automations

Now that we have a digest configured in preferences, lets talk about adding events to the digest. There are two automation nodes that will be used to add/release digest events.

### Digest Event Collection

Configure an automation to gather events for the digest. In your automation template, add an "Add to Digest" node by right-clicking on the canvas and selecting it from the menu. In the configuration panel, choose the subscription topic where you've set up the digest. This node will accumulate events for each user, identified by their user\_id or userId in the event data.
Note: currently `user_id` and `userId` are accepted in the event data

<Frame caption="Automation Add to Digest">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/add-to-digest.png" alt="Automation add to digest" />
</Frame>

### Digest Release

Create an automation to process and send the compiled digest. In a new automation template, select the rounded trigger node and choose the "Digest" type from the "Trigger" section. Select the same subscription topic you used for event collection. This automation will activate according to the scheduled intervals you've configured for the digest, processing data for each user based on their default or selected schedule in preferences.

<Frame caption="Automation Digest Trigger">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/digest-trigger.png" alt="Automation digest trigger" />
</Frame>

The digest data payload will come into the automation in the structure

```json
[category_key]: {
  count: <total number of events>
  items: [...] // the individual events that match the retain setting. Maximum length of 10
}
```


# Accessing Dynamic Data
Source: https://www.courier.com/docs/platform/automations/automations2/dynamic

Courier Automations support dynamic data access using the refs object (e.g., refs.data.userId). You can remap nested values for cleaner templates and personalize notifications using mapped variables.

The `refs` object has access to the following properties:

* `brand`
  * type: string
  * description: A unique identifier that represents the brand that should be used for rendering the notification.
* `data`
  * type: object
  * description: An object that includes any data you want to pass to a message template or accessor type. The data will populate the corresponding template variables.
* `profile`
  * type: object
  * description: an object that includes any key-value pairs required by your chosen Integrations (see our Provider Documentation for the requirements for each Integration.) If profile information is included in the request and that information already exists in the profile for the recipientId, that information will be merged.
* `template`
  * type: string
  * description: A unique identifier that can be mapped to an individual Notification. This could be the "Notification ID” on Notification detail pages (see the Notifications page in the Courier app) or a custom string mapped to the event in settings.
* `recipient`
  * type: string
  * description: A unique identifier associated with the recipient of the delivered message, which can optionally map to a Courier managed profile. -->

These properties can all be set using the `invoke` api. Additionally, the data property can be initialized by triggers
such as Segment, or modified by actions such as `Fetch Data`.

For example, you can access the `userId` supplied by segment in a send node using `refs.data.userId`

<Frame caption="Accessing userId dynamically using refs.data.userId within the send node">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/refs-example.png" alt="Accessing userId dynamically using refs.data.userId within the send node" />
</Frame>

## Mapping Dynamic Data to Variables

By default, all `data` passed into an automation is passed through to the notification template in a send call. However, there are cases where you want to map specific data attributes to different variables.

1. Open a send node, click on the advanced section, and then click edit next to the `Data` field

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/send_data.png" alt="Editing Data Field" />
</Frame>

2. You can either the user the interactive JSON editor, or just modify the JSON in the text editor directly. The syntax to map the attribute is as follows:

```json
  "<new_attribute>": {
    "$ref": "data.<some_attribute>"
  }
```

### Example: Mapping Dynamic Data to a Variable

Let's say we have a segment event as a trigger for our automation. The event has a `vendor_name` attribute in the segment `properties` object and we want to map that to a `vendor` attribute in our send call.

<Frame caption="Segment Sample Data">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/segment_sample_data.png" alt="Segment Sample Data" />
</Frame>

We would use the following syntax:

```json
  "vendor": {
    "$ref": "data.properties.vendor_name"
  }
```

<Frame caption="Mapping Dynamic Data"> <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/send_dynamic_data_map.png" alt="Mapping Dynamic Data" /> </Frame> \`

In the notification template, you are now able to access the `vendor` property directly in a template variable `{vendor}` rather than destructing the data object `{data.properties.vendor_name}`

## Reserved Field values

The following field values are reserved for current and future interpolation features. They can
not be used literally in an input field.

* `refs`
* `data`
* `profile`


# Inbound Event Triggers
Source: https://www.courier.com/docs/platform/automations/automations2/inbound-events

Courier Automations support event triggers from CourierJS, Segment, and Rudderstack. These events—like track and identify—can initiate workflows within Automations via dedicated trigger nodes.

## Courier Inbound Events

[CourierJS SDK](https://github.com/trycourier/courier-js/tree/main/packages/courier-js) interfaces with our `track` API to send client-side application events
to Courier that can be then used in an Automations trigger node.

## Segment

With a [Segment third-party integration](https://courier.com/docs/external-integrations/segment/segment-integration/) both [`track`](https://segment.com/docs/connections/spec/track/)
and [`identify`](https://segment.com/docs/connections/spec/identify/) are automatically ingested using the Segment trigger node in Automations.
Refer to [Segment use cases](https://www.courier.com/docs/automations/segment/) for more information.

## Rudderstack

With an existing [Rudderstack third-party integration](https://www.courier.com/docs/external-integrations/rudderstack/) both [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/)
and [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) are automatically ingested into the Rudderstack trigger node in Automations.


# Automations
Source: https://www.courier.com/docs/platform/automations/automations2/intro

Courier Automations enable no-code workflows for scheduling, canceling, sequencing, and customizing notifications. Easily trigger messages from tools like Segment or APIs, with dynamic logic and real-time data fetching.

<Note>
  **Note**

  These docs cover the Automations 2 UI. For the latest version, see [Automations](../intro).
</Note>

Courier Automations are a powerful notification orchestration service. It allows anyone to easily design
smart notification delivery workflows, without having to code anything.

What can automations be used for?

* Delaying / Scheduling the delivery of a notifications
* Canceling the delivery of a notification
* Delivering notifications based on events from sources like Segment
* Sending multiple related notifications in a scheduled succession
* Selecting and delivering the correct notification automatically based on context data
* Fetching the latest data to be included in a notification


# Scheduling
Source: https://www.courier.com/docs/platform/automations/automations2/scheduling

Courier Automations support scheduled triggers via one-time, recurring, or cron-based scheduling. Set schedules in UTC-0, accounting for a 12-minute delay, without needing external API calls.

* **One-time:** Set the specific time and date to invoke the automation.
* **Recurrence:** Identify a repeat schedule for the automation to be invoked. This is similar to scheduling a repeat event in a calendar application.
* **Cron:** Similar to Recurrence but with more specificity using [crontab expressions](https://crontab.guru/).

Because scheduling is a part of Automations, it can be used across channels (eg. email, SMS, chat, in-app inbox, push) and providers (eg. Twilio, Sendgrid, email SMTP, Slack, MS Teams, WeChat).

## Setup Scheduling

To setup a scheduled automation, drag over the Schedule trigger from the triggers section onto the canvas. Publishing an automation template is sufficient to allow the trigger to invoke the automation on the provided schedule. You do not need to make a separate API call to invoke.

<Note>
  **SCHEDULE TRIGGER DELAY**

  Please note that the schedule trigger should be set to the [UTC-0 timezone](https://dayspedia.com/time/zones/utc+0/) and is delayed by 12 minutes. This means that your schedule should be set in **UTC-0 + 12'**.
</Note>

<iframe width="100%" height="400" src="/docs/platform/automations/automations2/assets/schedule.mp4" allow="autoplay; encrypted-media" allowFullScreen />


# Segment
Source: https://www.courier.com/docs/platform/automations/automations2/segment

Courier Automations can trigger from Segment events. Use Segment tracks like “Checkout Visited” or “Checkout Complete” to delay, send, or cancel notifications using user-based cancellation tokens.

## Segment Automation Trigger Example

In this example, we'll imagine an e-commerce site that sends out an email when a user successfully
checks out, or a reminder to finish checking out when they visit the page, but do not finish their
purchase.

For this, we'll need two automations. One for the reminder condition, the other for the checkout
success condition. We'll start with the reminder condition.

1. Create a new automation
2. Drag over the segment trigger and attach it to the correct track event. In our case, that is
   "Checkout Page Visited". Note: The track event dropdown is populated with events Courier has
   already received from Segment.

<iframe width="100%" height="400" src="/docs/platform/automations/automations2/assets/segment-track-1.mp4" allow="autoplay; encrypted-media" allowFullScreen />

3. The reminder should be sent out a couple of hours after the checkout page was visited, so
   add a delay node with the desired delay time
4. Connect the delay node to a new send node and select the desired template. We set the userId to
   `refs.data.userId`, which is the userId sent to us by segment.

<iframe width="100%" height="400" src="/docs/platform/automations/automations2/assets/setting-up-delay-and-send.mp4" allow="autoplay; encrypted-media" allowFullScreen />

5. If the user successfully checks out, we won't want to send this notification. We'll add a
   cancellation token so we can cancel this run in from our next automation. Navigate to the
   settings tab and set `cancellation` to `refs.data.userId`. This way we can cancel any instance
   of this automation associated with the same user the notification would otherwise be sent to.
6. Click publish to finalize the template

<iframe width="100%" height="400" src="/docs/platform/automations/automations2/assets/setting-up-cancellation-token.mp4" allow="autoplay; encrypted-media" allowFullScreen />

The next automation will cancel the reminder automation from above, and send an invoice on
successful checkout.

1. Create a new automation.
2. Add a Segment trigger node with a track event set to "Checkout Complete"

<iframe width="100%" height="400" src="/docs/platform/automations/automations2/assets/segment-checkout-complete.mp4" allow="autoplay; encrypted-media" allowFullScreen />

3. Add a cancel automation node and set the token to the user id. This will prevent the reminder
   to finish checking out from sending.

<iframe width="100%" height="400" src="/docs/platform/automations/automations2/assets/segment-cancel-node.mp4" allow="autoplay; encrypted-media" allowFullScreen />

4. Send the Checkout Complete notification

<iframe width="100%" height="400" src="/docs/platform/automations/automations2/assets/segment-send-checkout-complete.mp4" allow="autoplay; encrypted-media" allowFullScreen />


# Ad hoc Automation Steps
Source: https://www.courier.com/docs/platform/automations/automations2/steps

Courier’s ad hoc automation steps let you define workflows via API in a single request—supporting batching, delays, fetches, notifications, profile updates, cancellations, and invokes—without a saved template.

## Add to Batch

Add the data object to a batch. Any steps after "add-to-batch" are not executed until the batch
conditions are met and the batch is released. The subsequent steps are only invoked once per batch
run.

### Fields

| Field             | Type   | Required | Description                                                                                                                                                                                                                                                    |
| ----------------- | ------ | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action            | string | required | The type of element. For the add to batch Automation Step, this value should be `"add-to-batch"`.                                                                                                                                                              |
| batch\_id         | string | required | A unique id for the batch. This value must be the same for each event expected to be added to the batch                                                                                                                                                        |
| wait\_period      | string | required | Defines the period of inactivity before the batch is released. Specified as an ISO 8601 duration, [https://en.wikipedia.org/wiki/ISO\_8601#Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)                                                        |
| max\_wait\_period | string | required | Defines the maximum wait time before the batch should be released. Must be less than wait period. Maximum of 60 days. Specified as an ISO 8601 duration, [https://en.wikipedia.org/wiki/ISO\_8601#Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) |
| max\_items        | number |          | If specified, the batch will release as soon as this number is reached                                                                                                                                                                                         |
| retain            | object | required | Defines what items should be retained and passed along to the next steps when the batch is released                                                                                                                                                            |
| retain.type       | string | required | One of `first`, `last`, `highest`, `lowest`.                                                                                                                                                                                                                   |
| retain.count      | number | required | Currently, only 10 is supported                                                                                                                                                                                                                                |
| retain.sort\_key  | string |          | Defines the data value `data[sort_key]` that is used to sort the stored items. Required when type is set to `highest` or `lowest`.                                                                                                                             |
| category\_key     | string |          | Defines the field of the data object the batch is set to when complete. Defaults to `batch`                                                                                                                                                                    |

### Schema

```json
{
  "action": "add-to-batch",
  "wait_period": "",
  "max_wait_period": "",
  "max_items": 10,
  "retain": {
    "type": "first" | "last" | "highest" | "lowest",
    "count": 10,
    "sort_key": ""
  },
  "category_key": ""
}
```

## Cancel

Cancel an Automation Run that is In Progress.

### Fields

| Field              | Type   | Required | Description                                                                                                                                                |
| ------------------ | ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action             | string | required | The type of element. For the Cancel Automation Step, this value should be `"cancel"`.                                                                      |
| cancelation\_token | string |          | The string that is associated with the cancelable automation run. An Automation Run is cancelable if it has a `cancelation_token` value at execution time. |
| if                 | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                               |
| ref                | string |          | A pointer to step and its data.                                                                                                                            |

### Schema

```json
{
  "action": "cancel",
  "cancelation_token": "",
  "if": "",
  "ref": ""
}
```

## Delay

Wait a duration of time, before proceeding to the next Automation Step.

### Fields

| Field    | Type   | Required | Description                                                                                                                  |
| -------- | ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------- |
| action   | string | required | The type of element. For the Delay Automation Step, this value should be `"delay"`.                                          |
| duration | string |          | The human readable time duration. A duration value and unit is required, e.g. 5 minutes, 1 hour, 3 days                      |
| if       | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data. |
| ref      | string |          | A pointer to step and its data.                                                                                              |
| until    | string |          | The ISO 8601 timestamp that describes the length of the delay.                                                               |

Either `until` or `duration` is required.

### Schema

```json
{
  "action": "delay",
  "if": "",
  "ref": "",
  "until": "",
  "duration": ""
}
```

## Fetch Data

Fetch data via https and write the response to the `data` property of the Automation Run Cache.

### Fields

| Field               | Type   | Required | Description                                                                                                                                                                                               |
| ------------------- | ------ | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action              | string | required | The type of element. For the Fetch Data Automation Step, this value should be `"fetch-data"`.                                                                                                             |
| idempotency\_expiry | string |          | A unix epoch timestamp (seconds) or an ISO\_8601 date string that describes how long the idempotency\_key is valid.                                                                                       |
| idempotency\_key    | string |          | A unique value generated by the client which the server uses to recognize subsequent retries of the same request.                                                                                         |
| if                  | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                                                                              |
| merge\_strategy     | enum   |          | `replace`, `soft-merge`, `overwrite`, or `none`. If nothing is specified then the default strategy is `replace`. The strategy to merge the webhook response into the Automation Run Cache. Details below. |
| ref                 | string |          | A pointer to step and its data.                                                                                                                                                                           |
| webhook             | object |          | The webhook configuration of the resource that is accessible via http. See the `webhook` schema bellow.                                                                                                   |

The `merge_strategy` property can be any of the following values:

* `replace`
  * overwrite all properties in the Automation Cache with the http response. Remove's all in properties in the Automation Cache that do not exist in http response.
* `soft-merge`
  * only overwrite properties in the Automation Cache with the http response properties that do not yet exist in the Automation Cache.
* `overwrite`
  * overwrite all properties in the Automation Cache with the properties from the http response.
* `none`
  * do not make any changes to the Automation Cache if the Automation Cache already exists and has data. Otherwise initialize the Automation Cache.

The `webhook` can be configured with any of the following properties:

```json
{
  "webhook": {
    "body": {}, // optional
    "headers": {}, // optional
    "params": {}, // optional
    "method": "GET" | "POST", // optional, default GET
    "url": "<API_RESOURCE>"
  }
}
```

### Schema

```json
{
  "action": "fetch-data",
  "idempotency_expiry": "",
  "idempotency_key": "",
  "if": "",
  "merge_strategy": "replace" | "none" | "overwrite" | "soft-merge",
  "ref": "",
  "webhook": {
    "body": {}, // optional
    "headers": {}, // optional
    "params": {}, // optional
    "method": "GET" | "POST", // optional, default GET
    "url": "<API_RESOURCE>"
  }
}
```

## Invoke

Invoke another Automation Template

### Fields

| Field    | Type   | Required | Description                                                                                                                                         |
| -------- | ------ | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| action   | string | required | The type of element. For the Invoke Automation Step, this value should be `"invoke"`.                                                               |
| context  | string |          | The initial values of the Automation Run Cache to invoke the Automation Template with.                                                              |
| if       | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                        |
| ref      | string |          | A pointer to step and its data.                                                                                                                     |
| template | string | required | A unique identifier that can be mapped to an Automation Template. This could be the Template ID or the Alias from the Automation Template Designer. |

### Schema

```json
{
  "action": "invoke",
  "context": {
    "brand": "",
    "data": {},
    "profile": {},
    "template": "",
    "recipient": ""
  },
  "if": "",
  "ref": "",
  "template": ""
}
```

## Send (Legacy)

Send a Notification Template

### Fields

| Field               | Type   | Required | Description                                                                                                                                                                                                                                                                                                             |
| ------------------- | ------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action              | string | required | The type of element. For the Send Automation Step, this value should be `"send"`.                                                                                                                                                                                                                                       |
| recipient           | string | required | A unique identifier associated with the recipient of the delivered message.                                                                                                                                                                                                                                             |
| template            | string | required | A unique identifier that can be mapped to an individual Notification. This could be the "Notification ID” on Notification detail pages (see the Notifications page in the Courier app) or a custom string mapped to the event in settings.                                                                              |
| brand               | string |          | The brand id to be used in the notification.                                                                                                                                                                                                                                                                            |
| data                | string |          | An object that includes any data you want to pass to a message template. The data will populate the corresponding template variables.                                                                                                                                                                                   |
| if                  | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                                                                                                                                                                                            |
| idempotency\_expiry | string |          | A unix epoch timestamp (seconds) or an ISO\_8601 date string that describes how long the idempotency\_key is valid.                                                                                                                                                                                                     |
| idempotency\_key    | string |          | A unique value generated by the client which the server uses to recognize subsequent retries of the same request.                                                                                                                                                                                                       |
| override            | string |          | An object that is merged into the request sent by Courier to the provider to override properties or to gain access to features in the provider API that are not natively supported by Courier.                                                                                                                          |
| profile             | string |          | An object that includes any key-value pairs required by your chosen Integrations (see our Provider Documentation for the requirements for each Integration.) If profile information is included in the request and that information already exists in the profile for the recipientId, that information will be merged. |
| ref                 | string |          | A pointer to step and its data.                                                                                                                                                                                                                                                                                         |

### Schema

```json
{
  "action": "send",
  "brand": "",
  "data": {},
  "if": "",
  "idempotency_expiry": "",
  "idempotency_key": "",
  "override": {},
  "profile": {},
  "recipient": "",
  "ref": ""
}
```

## Send

Send a Notification Template

### Fields

| Field   | Type   | Required | Description                                                                                                                      |
| ------- | ------ | -------- | -------------------------------------------------------------------------------------------------------------------------------- |
| action  | string | required | The type of element. For the Send Automation Step, this value should be `"send"`.                                                |
| message | object | required | The Courier Message. For more information see [The Courier Message](../../../reference/send/message) in the /send api reference. |

### Schema

```json
{
  "action": "send",
  "message": {
    "to": {
      // profile
    },
    // either template or content is required but not both
    "template": "",
    "content": {}
  }
}
```

## Send List

Send a message to each recipient in the list. Optionally fetch data for each recipient via http and merge the response into the `data` property of the Automation Run Cache.

### Fields

| Field               | Type   | Required | Description                                                                                                                                                                                                                                |
| ------------------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| action              | string | required | The type of element. For the Send List Automation Step, this value should be `"send-list"`.                                                                                                                                                |
| brand               | string |          | The brand id to be used in the notification.                                                                                                                                                                                               |
| data                | string |          | An object that includes any data you want to pass to a message template. The data will populate the corresponding template variables.                                                                                                      |
| data\_source        | object |          | The webhook configuration of the resource that is accessible via http. See the `data_source` schema bellow.                                                                                                                                |
| idempotency\_expiry | string |          | A unix epoch timestamp (seconds) or an ISO\_8601 date string that describes how long the idempotency\_key is valid.                                                                                                                        |
| idempotency\_key    | string |          | A unique value generated by the client which the server uses to recognize subsequent retries of the same request.                                                                                                                          |
| if                  | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                                                                                                               |
| list                | string | required | The Courier List Id.                                                                                                                                                                                                                       |
| override            | string |          | An object sent by Courier to the provider to leverage features of the provider API or to simply override properties of the provider api call.                                                                                              |
| template            | string | required | A unique identifier that can be mapped to an individual Notification. This could be the "Notification ID” on Notification detail pages (see the Notifications page in the Courier app) or a custom string mapped to the event in settings. |
| ref                 | string |          | A pointer to step and its data.                                                                                                                                                                                                            |

The `merge_strategy` property of the steps `data_source` object, can be any of the following values:

* `replace`
  * overwrite all properties in the Automation Cache with the http response. Remove's all in properties in the Automation Cache that do not exist in http response.
* `soft-merge`
  * only overwrite properties in the Automation Cache with the http response properties that do not yet exist in the Automation Cache.
* `overwrite`
  * overwrite all properties in the Automation Cache with the properties from the http response.
* `none`
  * do not make any changes to the Automation Cache if the Automation Cache already exists and has data. Otherwise initialize the Automation Cache.

The `webhook` property of the steps `data_source` object, can be configured with any of the following properties:

```json
{
  "webhook": {
    "body": {}, // optional
    "headers": {}, // optional
    "params": {}, // optional
    "method": "GET" | "POST", // optional, default GET
    "url": "<API_RESOURCE>"
  }
}
```

### Schema

```json
{
  "action": "send-list",
  "brand": "",
  "data": {},
  "data_source": {
    "webhook": {
      "url": "WEBHOOK_URL",
      "method": "GET",
      "headers": {}
    },
    "merge_strategy": "replace"
  },
  "idempotency_expiry": "",
  "idempotency_key": "",
  "if": "",
  "list": "",
  "override": {},
  "ref": "",
  "template": ""
}
```

## Update Profile

Update the Courier Profile given a recipientId.

### Fields

| Field         | Type   | Required | Description                                                                                                                                                                                |
| ------------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| action        | string | required | The type of element. For the Update Profile Automation Step, this value should be `"update-profile"`.                                                                                      |
| if            | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                                                               |
| merge         | enum   |          | `replace`, `soft-merge`, `overwrite`, or `none`. If nothing is specified then the default strategy is `replace`. The strategy to merge new data into the recipient profile. Details below. |
| profile       | string |          | An object that includes any key-value pairs associated with the recipient profile                                                                                                          |
| recipient\_id | string |          | A unique identifier associated with the recipient profile you intend to update.                                                                                                            |
| ref           | string |          | A pointer to step and its data.                                                                                                                                                            |

The `merge` property can be any of the following values:

* `replace`
  * overwrite all properties in the recipient profile with the http response. Remove's all in properties in the recipient profile that do not exist in http response.
* `soft-merge`
  * only overwrite properties in the recipient profile with the http response properties that do not yet exist in the recipient profile.
* `overwrite`
  * overwrite all properties in the recipient profile with the properties from the http response.
* `none`
  * do not make any changes to the recipient profile if the recipient profile already exists and has data. Otherwise initialize the recipient profile

<Warning>
  **PROFILE MERGING**

  When using update-profile steps, be mindful with the aforementioned merge strategies that can update an existing profile that was [created with a Segment Identify event](../../../external-integrations/cdp/segment/segment-integration#identify-calls).
</Warning>

### Schema

```json
{
  "action": "update-profile",
  "if": "",
  "merge": "replace",
  "profile": {},
  "recipient_id": "",
  "ref": ""
}
```


# Throttle Node
Source: https://www.courier.com/docs/platform/automations/automations2/throttle

Throttle Nodes limit the number of automation-triggered messages per user or group within a set timeframe, preventing over-notification. Configure by user, global, or dynamic scope in Automations.

<Info>
  **NOTE**

  This product is in Private Beta and is under active development. Please email [support@courier.com](mailto:support@courier.com) for access.
</Info>

This avoids overwhelming users with messages pertaining to the same event. With throttling, any events that exceed a predefined limit will be dropped for a specific duration of time and will not pass to the next node.

Because Throttle is a part of Automations, it can apply across channels (eg. email, SMS, chat, in-app inbox, push) and providers (eg. Twilio, Sendgrid, email SMTP, Slack, MS Teams, WeChat).

## Throttle Node Example Use Cases

**Alert Notifications**

When sending alert notifications, you may want to limit the number of notifications sent to a user in a given period to avoid bombarding them with too many alerts.

**Email Campaigns**

If you are running an email campaign, you may want to limit the number of emails sent to a customer within a specific timeframe to avoid overwhelming them with too many messages.

In general, a Throttle step can be useful in any situation where you need to control the flow of data or limit the frequency of an action.

Courier will allow you to specify what next steps should be taken when the throttle is triggered, and what steps should be taken when the throttle is not triggered.

## Creating A Throttle Step

To create a Throttle, use the "Throttle" action, then fill out details in the step node.

Specify maximum number of events to allow through the throttle, and the time period to throttle by.

You have the options to throttle by:

| Scope     | Usage                                                                                                       |
| :-------- | :---------------------------------------------------------------------------------------------------------- |
| `user_id` | Apply throttling by using `user_id` coming from `data`                                                      |
| `GLOBAL`  | Let Courier decide the throttle parameter.                                                                  |
| `Dynamic` | You can use arbitrary value available in your `run_context` by referencing it like `refs.data.throttle_key` |

**Note:** This is a beta feature, and we are working on adding more options for throttling.

Below is an example of a throttle step that will allow 2 event to pass through for a given user in a 24 hour period before throttling.

In this example, the throttle is set to be applied by `user_id`. You have to supply `user_id` in the following manner to throttle the user.

```bash
curl --request POST \
  --url https://api.courier.com/automations/<automation_template_id>/invoke \
  --header 'Authorization: Bearer <replace_with_api_key>' \
  --header 'Content-Type: application/json' \
  --data '{
  "data": {
		"user_id": "<user_id>"
  }
}
```

<Frame caption="Creating Throttle Step">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/automations2/assets/digests-batching-throttling/throttle-step.png" alt="Creating throttle step" />
</Frame>


# Webhook Trigger
Source: https://www.courier.com/docs/platform/automations/automations2/webhook-trigger

Use Webhook Triggers to launch Automations from external systems. Pass JSON payloads, access event/user data, and trigger templates or workflows directly—ideal for real-time integrations with full context.

Webhook Triggers enable you to connect other products and systems to Courier and trigger Automations based on events that happen in those systems. You have the full context of the webhook event payload and can use this data within the automation to send notifications, update profiles, or run workflows using Automation steps. This guide will walk you through how to register an inbound webhook and set up a Webhook Trigger.

<Note>
  **BETA**

  This feature is currently in Beta, please reach out to Courier Support to have it enabled for your account.
</Note>

## Register an Inbound Webhook

1. Go to Settings > Inbound Webhooks and click the "Add Inbound Webhook" button.
2. You will be prompted to enter a name and description for the webhook.

After you save the webhook, you will be presented with a unique URL that you can use to send events to Courier. When you set up the webhook trigger in Automations, you will see a list of all of your registered inbound webhooks by the name. The events are tied to the name you select, and you cannot change the name after you save the webhook.

## Configure the Webhook

Use the webhook URL that was generated in the previous step to configure the webhook in your system. Exercise a normal workflow to trigger various events to Courier, which will enable them as configuration options in the Automation trigger.

### Inbound Webhook Payload

Courier accepts any payload up to 6Mb in size.

If the payload is a JSON object, Courier will parse the payload and make the data available to you in the Automation. If the payload is not a JSON object, Courier will make the entire payload available to you in the Automation as a raw string.

If the JSON object is an array, Courier will parse each object in the array and trigger an automation for each incoming event.

For JSON objects, Courier will extract the following fields if they are present.

* `event` - The name of the event that triggered the webhook. You can filter by the name when you set up the webhook trigger in Automations. If no string field named event is present, Courier will use "Custom" as the default name.
* `userId` - A user identifier attached to the event. Courier will use this value to identify the user in the Automation, and automatically load associated profile data into the automation context.
* `properties.courier.automation` - A JSON object containing one of the following fields:
  * `template` - The id of an existing automation template to invoke, instead of using a configured webhook trigger.
  * `steps` - A JSON object containing the steps for an ad-hoc automation to execute.

If you have an event name or user Id keyed by a different field name in the webhook payload, please reach out to Courier Support to have that field mapped.

## Using the Webhook trigger in an Automation

1. Go to Automations and create a new automation
2. Drag and drop "Webhook" from the list of triggers.
3. In the Source field, select your registered inbound webhook name.
4. After you select the webhook, you can select the event name from a list of any received events, or Custom if your payload did not contain named events.

The data payload in the webhook will be available to you in the Automation in the normal data object, accessed with `refs.data`.

If you don't see any options in the Event field, make sure you have sent at least one event to the webhook from the source system.


# Batching
Source: https://www.courier.com/docs/platform/automations/batching

Learn how to use Courier’s Batching feature to group multiple events into a single notification using inactivity periods, max events, or wait time—reducing message volume and improving engagement.

# Batching

<Info>
  **NOTE**

  Batching is currently in Public Beta and under active development. The API may change, and this feature is not covered under the Enterprise SLA.
</Info>

This reduces notification frequency and improves the likelihood of recipients engaging with the content.
Batching operates based on the following criteria:

1. **Period of inactivity**: If no events occur within a defined time span (e.g., one hour), all events since the last notification are bundled into a single notification.
2. **Maximum event count**: Notifications are held until a specified number of events (e.g., 100) have accumulated. These events are then summarized in a single notification.
3. **Maximum wait time**: All events that would have triggered notifications within a predefined duration (e.g., 24 hours) are summarized into a single notification.

Batching is supported across various channels (email, SMS, chat, in-app inbox, push) and providers (Twilio, Sendgrid, email SMTP, Slack, MS Teams, WeChat).

## Batching Example Use Cases

### Article Performance Summary

When an article is published on a news website, events are generated for each view, comment, and share.
Instead of sending a notification for each event, these events can be batched within an automation.
Once the initial surge of activity subsides or the maximum wait time is reached, the batch compiles view count, top comments, and share count data.
This summary is then sent to the author via email.

### Data Warehouse Analytics

A company processing large amounts of data may generate reports at different times.
An event is triggered upon each report's completion.
With batching, these reports can be grouped and sent in a single email once all the reports for the day are generated.

### Social Media Engagement

When a user creates a popular post that receives numerous likes within minutes, batching can be used to notify the user once the post hasn't received new likes for a specified period.
For example, "Your post received 17 likes."

## Creating A Batch

To create a batch, use the "Add to Batch" action, then click within the batch node to open the editor in the sidebar.

<iframe width="100%" height="400" src="./assets/digests-batching-throttling/creating-a-batch.mp4" allow="autoplay; encrypted-media" allowFullScreen />

## Configuring A Batch

To configure a batch, click on the batch node to open the editor in the sidebar.

<div className="table-wrapper">
  | Parameter        | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
  | ---------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
  | **Wait Period**  | Defines the period of inactivity before a batch is considered complete. If no events are received within this time frame, the batch will be finalized and sent to the next step.                                                                                                                                                                                                                                                                                                             |
  | **Max Wait**     | Defines the maximum amount of time to wait before finalizing the batch. If this time frame is reached, the batch will immediately complete, even if an event had been received within the "wait period."                                                                                                                                                                                                                                                                                     |
  | **Retain Items** | Defines the number of items to retain and send with the batch. Users can specify any positive integer value. Retention does not affect the tracked count. For example, if `Retain Items` is set to 10 and 15 items are received, the passed count will be 15, but only 10 items will be included in the batch. Options: **First *N***, **Last *N***, **Highest *N*** (requires `Sort Key`), **Lowest *N*** (requires `Sort Key`), where *N* is the user-specified number of items to retain. |
  | **Sort Key**     | Required when Highest or Lowest is selected for Retain Items. Defines the key of the data object to be used to determine item ordering. For example, if `Sort Key` is set to `refs.data.upvotes`, and the automation is invoked with `{ "data": { "upvotes": 5 }}`, `5` will be the value used to determine the order and position of the event in the items array.                                                                                                                          |
  | **Max Items**    | *(Optional)* Defines the maximum number of events to include in a batch before completion. When a batch has received this number of events, it will immediately finalize and send the batch to the next step.                                                                                                                                                                                                                                                                                |
  | **Scope**        | Defines the scope of the batch, determining how events are grouped together. Options: **Global** (default), **User**, **Dynamic**. See [Batch Scope](./#batch-scope) for more details.                                                                                                                                                                                                                                                                                                       |
  | **Category Key** | *(Optional)* Allows events to be grouped by categories. See [Working with Categories](./#batch-categories) for more details.                                                                                                                                                                                                                                                                                                                                                                 |
</div>

## Batch Scope

The `Scope` parameter in the batch node configuration allows you to define the scope of the batch.
It determines how events are grouped together within the batch.
There are three options for the batch scope:

| Scope                | Description                                                                                                                                                                                                                                                                                                                                 |
| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Global (default)** | • Events are grouped together based on the batch step ID.<br />• The batch will trigger and send the grouped events to the next step when either the maximum number of events is reached or the specified time period elapses.                                                                                                              |
| **User**             | • Events are grouped together based on the unique combination of `user_id` and batch step ID.<br />• The batch will trigger when enough events associated with a specific user are added to the batch or when the specified time period elapses, allowing for user-specific batching of events.                                             |
| **Dynamic**          | • Events are grouped together based on the `Batch Key` specified in the batch configuration, regardless of the batch step ID or automation they belong to.<br />• This allows for flexible event grouping based on specific criteria, but may lead to unexpected results as events from different batch steps or automations may be merged. |

<Warning>
  **CAUTION**

  Please note that the dynamic scope behavior is subject to change in future revisions of the automation system.
</Warning>

## Invoking an Automation Containing a Batch

* When an automation containing a batch node is invoked, Courier checks for an ongoing batch run for the configured scope.
  * **If none exists:**
    1. A new batch run is created.
    2. The current automation run is marked as pending.
    3. The system waits until the batch is complete before proceeding to the next step.
  * **If an existing batch run is found:**
    1. The data object is added to the existing batch.
    2. The current automation run is terminated.
    3. Steps connected to the batch are not executed, ensuring that nodes following a batch node are only executed once per batch run.

```ts
{
  batch: {
    // The number of events received for this category, may be different than items.length
    // depending on item retention configuration.
    count: number;
    // An array of the data objects of each automation added to this batch.
    items: any[];
  }
}
```

**Example:** If a batch automation is invoked 3 times with the following values:

```js Invoke 1
{
  data: {
    like_from: "Drew";
  }
}
```

```js Invoke 2
{
  data: {
    like_from: "Alex";
  }
}
```

```js Invoke 3
{
  data: {
    like_from: "Abby";
  }
}
```

The steps following the batch node would be provided this data object:

```js Completed Batch Data
{
  batch: {
    count: 3,
    items: [
      { like_from: "Drew" },
      { like_from: "Alex" },
      { like_from: "Abby" },
    ]
  }
}
```

This data can be accessed from a notification template using variable syntax.

<Frame caption="Accessing batch data from a notification template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digests-batching-throttling/batch-data-in-notification-template.png" alt="Accessing batch data from a notification template" />
</Frame>

## Batch Categories

When the `Category Key` is set to a dynamic value such as `refs.data.category_key`, events can be grouped by category in a batch run.
In this case, the batch is aggregated by category:

<Frame caption="Dynamic Category Key">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digests-batching-throttling/dynamic-category-key.png" alt="Accessing batch data from a notification template" />
</Frame>

**Example:** In the batch node, `Category Key` is set to `refs.data.category_key`.
Each time the automation is invoked, a `category_key` is supplied.

Given the following invocations:

```js Invoke
{
  data: {
    category_key: "likes",
    like_from: "Drew"
  }
}
```

```js Invoke
{
  data: {
    category_key: "likes",
    like_from: "Alex"
  }
}
```

```js Invoke
{
data: {
  category_key: "comments",
  comment: "Excellent post!"
  }
}
```

The automation steps following the batch node would receive this data object:

```js Completed Batch Data
{
  "batch": {
    "likes": {
      "count": 2,
      "items": [
        { "like_from": "Drew" },
        { "like_from": "Alex" }
      ],
    },
    "comments": {
      "count": 1,
      "items": [
        { "comment": "Excellent post!" }
      ],
    },
  }
}
```


# Cancelling An Automation
Source: https://www.courier.com/docs/platform/automations/cancel

Courier Automations can be cancelled using a dynamic cancellation token. Add the token in settings, then invoke a separate automation with a “Cancel Automation” node referencing the same token.

## Add a Cancellation Token

To allow an automation to be cancelled, add a cancellation token to the automation.

1. Navigate to the settings tab of the automation you want to cancel.
2. Add a cancellation token. This can be any value desired. Its best to use a dynamic value so
   a specific automation invocation may be cancelled, rather than all running instances. For
   example, you may use `refs.data.userId`, which would allow the automation run to be associated
   with the user the automation would send to.
3. Publish the Automation.
4. Create a new automation
5. Add the `Cancel Automation` node
6. Set the token to the same token from step 2.
7. Publish

An automation can also be canceled from automation logs.

1. Navigate to the [automation logs page](https://app.courier.com/logs/automations) in Courier.
2. Find your automation in the logs, you can search with a run Id or source.
3. If your automation has not finished processing, a cancel button will be shown in the run summary.
4. Clicking this button will cancel your automation.

<Frame caption="Canceling an Automation from Logs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/cancel-button-logs.png" alt="Canceling an automation from logs" />
</Frame>

## Templated Cancellation Token

It may be advantageous to create a compound key for your cancellation token. For example, if you want to have a cancellation token that combines two different fields, or a data field and a static string. In automations, most fields support Javascript string interpolation and the cancellation token is an example of one. The documentation above says you can use `refs`, for example `refs.data.userId` and the following would be identical in the cancellation token field, `${data.userId}`. For more advanced interpolation you can perform nested interpolations as well.

**Static Fields**

```javascript
${`onboarding-flow-${data.userId}`}
```

**Combining Fields**

```javascript
${`${data.userId}-${data.tenantId}`}
```


# If / Switch
Source: https://www.courier.com/docs/platform/automations/control-flow

Courier Automations support conditional logic using “If” nodes. Conditions evaluate data, profile, step results, or custom JavaScript to determine which branch of the workflow to execute next.

![If node example](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/profile-flow-condition-contains.png)

## Types of Control Flow

### If

The `If` node routes workflow execution based on a single condition. When the condition evaluates to true, the workflow follows the True branch; otherwise, it follows the False branch.

### Switch

The `Switch` node allows routing based on multiple conditions.
It evaluates conditions in order and routes to the first matching branch.
If no conditions match, the workflow follows the default branch.

## Condition Sources

The `If` and `Switch` nodes can evaluate boolean expressions from four different condition sources.

|                  |                                                             |
| ---------------- | ----------------------------------------------------------- |
| **Data**         | Compare values from the automation context's data object    |
| **Profile**      | Compare values from the automation context's profile object |
| **Step Ref**     | Monitor status of previous Send steps                       |
| **JS Condition** | Write custom JavaScript for complex logic                   |

### Data

*Compare a field within the `data` key of the automation context with a value.*

| Property     | Description                    | Example     |
| ------------ | ------------------------------ | ----------- |
| `Field`      | The data object to evaluate    | `data.foo`  |
| `Comparison` | The comparison operator to use | `is one of` |
| `Value`      | The value to compare against   | `bar, baz`  |

### Profile

*Compare a field within the `profile` key of the automation context with a value.*

| Property     | Description                    | Example           |
| ------------ | ------------------------------ | ----------------- |
| `Field`      | The profile object to evaluate | `address.country` |
| `Comparison` | The comparison operator to use | `is`              |
| `Value`      | The value to compare against   | `Canada`          |

### Step Ref

*Check the current status of an upstream Send node, using it's reference ID (Ref). The Ref value is defined in the Send node's configuration.*

| Property     | Description                    | Example                |
| ------------ | ------------------------------ | ---------------------- |
| `Ref`        | The send node's status object  | `welcome_email.status` |
| `Comparison` | The comparison operator to use | `is not`               |
| `Value`      | The value to compare against   | `CLICKED`              |

Possible [status](../logging/message-logs#send-status-key-and-definitions) values are: `CLICKED`, `DELIVERED`, `ENQUEUED`, `FILTERED`, `OPENED`, `SENT`, `SIMULATED`, `UNDELIVERABLE`, `UNMAPPED`, `UNROUTABLE`

### JS Condition

*Use JavaScript expressions when standard comparisons aren't sufficient.*

| Property     | Description                           | Example                                |
| ------------ | ------------------------------------- | -------------------------------------- |
| `Expression` | The javascript expression to evaluate | `data.expiry < (new Date()).getTime()` |

```javascript JS Condition examples
// Transform and compare values 
data.email.toLowerCase().includes('@company.com')

// Check for key existence or null values 
'preferences' in data && data.preferences !== null

// Compare date diffs as ISO strings 
Date.parse(data.lastLogin) < Date.now() - (30 * 24 * 60 * 60 * 1000)

// Manipulate nested arrays and objects 
data.orders.filter(order => order.total > 100).length > 0
```

#### Javascript Expressions in Value Fields

Javascript expressions can also be used in the `Value` field of Data, Profile, and Step Ref sources.

```javascript Examples
// Dynamic timestamps
${(new Date()).getTime()}

// Concatenate values
${data.firstName + ' ' + data.lastName}

// Default values
${profile.language || 'en'}
```


# Debugger
Source: https://www.courier.com/docs/platform/automations/debugger

Courier’s Automation Debugger simulates test events through automation workflows. It allows inspecting node-level data, verifying run context, and debugging errors before triggering automations via API or production events.

# Automation Debugger

Courier's automation debugging tool can be used to run a test event through your automation template and debug any errors you may come across.

## Creating a Test Run Context

Similar to notification templates, automations can now be tested with test run contexts passed in and saved as test events. These tests can mimic an incoming payload passed through [Segment](./segment), [inbound events](./inbound-events), or an [adhoc automation call](./steps). You can create a test event from the `Debug` tab in your automation template.

<Frame caption="Automation Test Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/debugger.png" alt="Automation Test Event" />
</Frame>

## Running The Test Run Context

With your automation test event configured, you can execute a test run through the debugging tool to simulate the event passed through the automation workflow. When ready, click on the `Run Again` button and select each node to see the data being passed.

<Frame caption="Test Event Trigger">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/debug-trigger.png" alt="Test Event Trigger" />
</Frame>

### Verifying Test Data

After running your simulated run, you can select each node in your workflow to verify that the data is passed through to each consecutive node. This can be helpful if you have several nodes that rely on incoming data payloads.

<Frame caption="Data Passed to Each Node">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/debug-check.png" alt="Data Passed to Each Node" />
</Frame>

## Run your Automation

After testing through the debugging tool, you can run your automation through an API call with the data payload you wish to pass.

```json
// POST https://api.courier.com/automations/:template_id/invoke
{
	"data": {
    "field_1": "fubar",
    "field_2": "fubar2"
},
  "profile": {
    "email": "rodrigo@courier.com",
    "phone_number": "+12345678910",
    "name": "Rod"
}
}
```

The automation run context will be show a successful run through the automation workflow with the data we tested!

<Frame caption="Successful Run Context">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/debug-success.png" alt="Successful Run Context" />
</Frame>

## Testing GET Profile Nodes

You can leverage Courier's debugging tool to test out a [GET Profile](./get-profile) node before promoting your template to production. The debugging tool can show you the run context that will be passed down your automation after fetching a profile.

<Frame caption="GET Profile Node">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/get-profile-node.png" alt="GET Profile Node" />
</Frame>


# The Automations Designer
Source: https://www.courier.com/docs/platform/automations/designer

Courier’s Automations Designer is a visual builder for creating notification workflows. Add trigger and action nodes, configure logic, and invoke automations via API, triggers, or in-app testing.

## Creating an Automation

Start by navigating to the [automations page within the Courier
app](https://app.courier.com/automations). From there, a new automation template can be created by
clicking the `New Automation` Button.

<Frame caption="Automations Home Page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/automations-list-page.png" alt="Automations Home Page" />
</Frame>

## Renaming an Automation

To rename a template, click the name in the upper left hand corner of the designer. By default, the
name is "Untitled Automation". The name is automatically saved after being updated.

<Frame caption="Renaming an Automation Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/renaming.png" alt="Renaming an automation template" />
</Frame>

## Working with Automation Nodes

A new template starts with a placeholder trigger node. A trigger node defines what starts an automation run.
The trigger is optional, a template can always be directly
triggered using the `api/automations/:template_id/invoke` api endpoint

To add nodes, expand from the list on the left and then click and drag a node onto the right. The
first trigger and action node will snap into their respective placeholders:

Nodes are executed sequentially through their connections, from top to bottom. To connect two
nodes, click and drag from the white dot at the bottom of the source node to the top of the
target node:

## Automation Invocation

<Warning>
  **PUBLISH**

  **Be sure to publish the template before invoking (using the publish button on the upper right)**
</Warning>

There are a few ways to invoke a template, either directly in the automation template, through a trigger node, or through an api call.

See [Scheduling automations](./scheduling) or [Triggering With Segment](./segment) to get
an understanding of how trigger nodes work.

### Difference View

When publishing a template, the automation designer will prompt the user with a difference view confirmation showing the changes between versions. You can confirm the changes on this window.

<Frame caption="Difference Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/diff-view.png" alt="Difference Modal" />
</Frame>

### Invoking an Automation using the API

To run an automation by api call, grab the automation template id or the alias from the settings section of
the designer and invoke it by calling POST `api/automations/:template_id_here/invoke`. View
[Automations API docs](https://www.courier.com/docs/reference/automation/invoke-template/) for
more details.

<Frame caption="Template ID Location, Settings Tab">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/template-id-location.png" alt="Template ID location, settings tab" />
</Frame>

### Invoking an Automation from the Designer

You can invoke the automation template directly from the designer in the **Invoke** tab. This can be a good way to test the automation or to invoke very simple automation templates.
*Note:* Invoking from the designer will pass an empty data payload `{}` to the automation run

<Frame caption="Template Invoke Tab">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/template-invoke.png" alt="Template invoke tab" />
</Frame>


# Automation Digests
Source: https://www.courier.com/docs/platform/automations/digest

Courier Digests let you aggregate user events (e.g., likes, reports) into scheduled notifications. Configure schedules, categories, and preferences, then use Automations to collect and release digest data.

# Digests

Courier Automations can be leveraged to create recurring user digests on configured intervals. This can be useful for things like weekly reports or user digests, while also offering user schedule preferences if desired.

<Note>
  For simple use cases of a digest, we have included a new digest feature that does not require automations; you can view it [here](../sending/digest-send).

  It is available for our business and enterprise customers and requires reaching out to [Courier Support](mailto:support@courier.com) or your account team for access.
</Note>

## Configure Digests in the Preferences Editor

The first step is to configure a digest with at least one schedule in the [Preferences Editor](https://app.courier.com/settings/preferences). In the Preferences Editor, either create a new subscription topic or open the settings of an existing one.

### Schedule a Digest

In the digest section click on schedules. This is where you define the schedule(s) at which the digest will be released. One schedule is required here however multiple schedules can be configured to give your users preference. If you have multiple schedules configured, these will show in the hosted preferences page as options for the user to select. Note: the date-time picker is currently configured in local timezone. Users viewing our hosted preference page, or using our front-end preference components will also see as their local timezone.

<Frame caption="Digest Schedules">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digest-schedules.png" alt="Digest Schedules" />
</Frame>

### Configure Digest Categories

Categories provides the ability to separate disparate data within the same digest. For example, you may want to sort by likes and comments for a weekly digest of the blog posts with the most engagement. Each category has a `retain` setting. This describes the specific events that will be retained when the digest is released. 10 highest/10 lowest require a sort\_key which is a data attribute in the event we will use to sort the events by.

<Frame caption="Digest Categories">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digest-categories.png" alt="Digest Categories" />
</Frame>

<Steps>
  <Step>
    * first 10: the first 10 events that come in
  </Step>

  <Step>
    * last 10: the last 10 events that come in
  </Step>

  <Step>
    * 10 highest: The 10 highest events sorted by a specific data attribute
  </Step>

  <Step>
    * 10 lowest: The 10 lowest events sorted by a specific data attribute
      The default value is `digest` and will retain the first 10 items.
      When the digest is released, it will be sent with the following format:
  </Step>
</Steps>

```js

[category_key]: {
  count: <total number of events>
  items: [...] // the individual events that match the retain setting. Maximum length of 10
}

```

### Configure Other Digest Settings

Settings has a toggle to invoke the digest when empty for users within an audience. Typically the digest will only send to users that had events come in during the schedule window. This option means that users in the audience will have a digest sent to them even if there were no events matching their user\_id. This can be useful for fetching your own data in the automation and sending the digest to your users with that custom data

<Frame caption="Digest Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digest-settings.png" alt="Digest Settings" />
</Frame>

## Mapping a Template to a Digest

A digest can be configured so that all digested events are triggered through an automation trigger configured in a template.

### Mapping the Template

From the digest settings in preferences, map the notification template you wish to use.

<Frame caption="Template Mapping">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digest-mapping.png" alt="Template Mapping" />
</Frame>

### Syncing the Digest to an Automation

The final step is to configure an automation with the trigger configured to the method the automation will be consuming the data. In this example, the digest events will be coming from Segment.

<Frame caption="Automation Digest">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digest-automation.png" alt="Automation Digest" />
</Frame>

After publishing, all digested events coming in will be visible in the logs until the schedule or number of retained items releases the digest.

<Frame caption="Digest Logs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digest-logs.png" alt="Digest Logs" />
</Frame>

## Working with Digests in Automations

Now that we have a digest configured in preferences, lets talk about adding events to the digest. There are two automation nodes that will be used to add/release digest events.

### Digest Event Collection

Configure an automation to gather events for the digest. In your automation template, add an "Add to Digest" node by right-clicking on the canvas and selecting it from the menu. In the configuration panel, choose the subscription topic where you've set up the digest. This node will accumulate events for each user, identified by their user\_id or userId in the event data.

<Note>
  Currently `user_id` and `userId` are accepted in the event data
</Note>

### Digest Release

Create an automation to process and send the compiled digest. In a new automation template, select the rounded trigger node and choose the "Digest" type from the "Trigger" section. Select the same subscription topic you used for event collection. This automation will activate according to the scheduled intervals you've configured for the digest, processing data for each user based on their default or selected schedule in preferences.

<Frame caption="Automation Digest Trigger">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digest-trigger.png" alt="Automation digest trigger" />
</Frame>

The digest data payload will come into the automation in the structure

```js
[category_key]: {
  count: <total number of events>
  items: [...] // the individual events that match the retain setting. Maximum length of 10
}
```


# Accessing Dynamic Data
Source: https://www.courier.com/docs/platform/automations/dynamic

Courier Automations support dynamic data access using the refs object (e.g., refs.data.userId). You can remap nested values for cleaner templates and personalize notifications using mapped variables.

The `refs` object has access to the following properties:

* `brand`
  * type: string
  * description: A unique identifier that represents the brand that should be used for rendering the notification.
* `data`
  * type: object
  * description: An object that includes any data you want to pass to a message template or accessor type. The data will populate the corresponding template variables.
* `profile`
  * type: object
  * description: an object that includes any key-value pairs required by your chosen Integrations (see our Provider Documentation for the requirements for each Integration.) If profile information is included in the request and that information already exists in the profile for the recipientId, that information will be merged.
* `template`
  * type: string
  * description: A unique identifier that can be mapped to an individual Notification. This could be the "Notification ID” on Notification detail pages (see the Notifications page in the Courier app) or a custom string mapped to the event in settings.
* `recipient`
  * type: string
  * description: A unique identifier associated with the recipient of the delivered message, which can optionally map to a Courier managed profile. -->

These properties can all be set using the `invoke` api. Additionally, the data property can be initialized by triggers
such as Segment, or modified by actions such as `Fetch Data`.

For example, you can access the `userId` supplied by segment in a send node using `refs.data.userId`

<Frame caption="Accessing userId dynamically using refs.data.userId within the send node">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/new-refs-example.png" alt="Accessing userId dynamically using refs.data.userId within the send node" />
</Frame>

## Mapping Dynamic Data to Variables

By default, all `data` passed into an automation is passed through to the notification template in a send call. However, there are cases where you want to map specific data attributes to different variables.

1. Open a send node, click on the advanced section, and then click edit next to the `Data` field

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/new-send_data.png" alt="Editing Send Node Data" />
</Frame>

2. You can either the user the interactive JSON editor, or just modify the JSON in the text editor directly. The syntax to map the attribute is as follows:

```json
  "<new_attribute>": {
    "$ref": "data.<some_attribute>"
  }
```

### Example: Mapping Dynamic Data to a Variable

Let's say we have a segment event as a trigger for our automation. The event has a `vendor_name` attribute in the segment `properties` object and we want to map that to a `vendor` attribute in our send call.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/segment_sample_data.png" alt="Segment Sample Data" />
</Frame>

We would use the following syntax:

```json
  "vendor": {
    "$ref": "data.properties.vendor_name"
  }
```

<Frame> <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/new-send_dynamic_data_map.png" alt="Dynamic Data Mapping" /> </Frame> \`\`\`

In the notification template, you are now able to access the `vendor` property directly in a template variable `{vendor}` rather than destructing the data object `{data.properties.vendor_name}`

## Reserved Field values

The following field values are reserved for current and future interpolation features. They can
not be used literally in an input field.

* `refs`
* `data`
* `profile`


# GET Profile
Source: https://www.courier.com/docs/platform/automations/get-profile

The GET Profile node fetches a user’s profile using user_id (e.g., refs.data.user_id) and attaches it to the automation context, enabling access via refs.profile in subsequent steps.

By default, the profile will be attached to the profile key in the run context
and can be accessed with `refs.profile`.

Generally, the user id should be set to a dynamic value from the data object
such as `refs.data.user_id`.

<Frame caption="GET Profile Node">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/get-profile-node.png" alt="GET Profile Node" />
</Frame>

{/* <iframe
  width="100%"
  height="400"
  src="/docs/platform/automations/assets/get-profile.mp4"
  allow="autoplay; encrypted-media"
  allowFullScreen
  ></iframe> */}


# Inbound Event Triggers
Source: https://www.courier.com/docs/platform/automations/inbound-events

Courier Automations support event triggers from CourierJS, Segment, and Rudderstack. These events—like track and identify—can initiate workflows within Automations via dedicated trigger nodes.

## Courier Inbound Events

[CourierJS SDK](https://github.com/trycourier/courier-js/tree/main/packages/courier-js) interfaces with our `track` API to send client-side application events
to Courier that can be then used in an Automations trigger node.

## Segment

With a [Segment third-party integration](../../external-integrations/cdp/segment/courier-source) both [`track`](https://segment.com/docs/connections/spec/track/)
and [`identify`](https://segment.com/docs/connections/spec/identify/) are automatically ingested using the Segment trigger node in Automations.
Refer to [Segment use cases](./segment) for more information.

## Rudderstack

With an existing [Rudderstack third-party integration](../../external-integrations/cdp/rudderstack/intro) both [`track`](https://www.rudderstack.com/docs/event-spec/standard-events/track/)
and [`identify`](https://www.rudderstack.com/docs/event-spec/standard-events/identify/) are automatically ingested into the Rudderstack trigger node in Automations.


# Automations
Source: https://www.courier.com/docs/platform/automations/intro

Courier Automations enable no-code workflows for scheduling, canceling, sequencing, and customizing notifications. Easily trigger messages from tools like Segment or APIs, with dynamic logic and real-time data fetching.

<Note>
  **NOTE**

  These docs cover the Automations v3 UI (July 2024). For the previous version, see [Automations 2](./automations2/intro).
</Note>

## Overview

What can automations be used for?

* Delaying / Scheduling the delivery of a notifications
* Canceling the delivery of a notification
* Delivering notifications based on events from sources like Segment
* Sending multiple related notifications in a scheduled succession
* Selecting and delivering the correct notification automatically based on context data
* Fetching the latest data to be included in a notification


# Scheduling
Source: https://www.courier.com/docs/platform/automations/scheduling

Courier Automations support scheduled triggers via one-time, recurring, or cron-based scheduling. Set schedules in UTC-0, accounting for a 12-minute delay, without needing external API calls.

* **One-time:** Set the specific time and date to invoke the automation.
* **Recurrence:** Identify a repeat schedule for the automation to be invoked. This is similar to scheduling a repeat event in a calendar application.
* **Cron:** Similar to Recurrence but with more specificity using [crontab expressions](https://crontab.guru/).

Because scheduling is a part of Automations, it can be used across channels (eg. email, SMS, chat, in-app inbox, push) and providers (eg. Twilio, Sendgrid, email SMTP, Slack, MS Teams, WeChat).

## Setup Scheduling

To setup a scheduled automation, drag over the Schedule trigger from the triggers section onto the canvas. Publishing an automation template is sufficient to allow the trigger to invoke the automation on the provided schedule. You do not need to make a separate API call to invoke.

<Warning>
  **TIMEZONE CONFIGURATION CHANGE (2024)**

  By default, the date time input is now relative to the timezone of your browser. You can change the timezone by clicking on the timezone dropdown and selecting the desired timezone. The date shown by the input after configuration will still be relative to the timezone of your browser.
</Warning>

<Note>
  **Schedule Trigger Delay**

  Please note that the schedule trigger is accurate to within \~12 minutes of selected time.
</Note>

<iframe width="100%" height="400" src="./assets/schedule.mp4" allow="autoplay; encrypted-media" allowFullScreen />


# Segment
Source: https://www.courier.com/docs/platform/automations/segment

Courier Automations can trigger from Segment events. Use Segment tracks like “Checkout Visited” or “Checkout Complete” to delay, send, or cancel notifications using user-based cancellation tokens.

## Segment Automation Trigger Example

In this example, we'll imagine an e-commerce site that sends out an email when a user successfully
checks out, or a reminder to finish checking out when they visit the page, but do not finish their
purchase.

For this, we'll need two automations. One for the reminder condition, the other for the checkout
success condition. We'll start with the reminder condition.

1. Create a new automation

2. Select the Segment trigger and choose correct `track` event. In our case, that is
   "Checkout Page Visited". Note: The track event dropdown is populated with events Courier has
   already received from Segment.

3. The reminder should be sent out a couple of hours after the checkout page was visited, so
   add a delay node with the desired delay time

4. Connect the delay node to a new send node and select the desired template. We set the userId to
   `refs.data.userId`, which is the userId sent to us by segment.

<Frame caption="UserId Referenced">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/checkout-visited.png" alt="UserId Referenced" />
</Frame>

5. If the user successfully checks out, we won't want to send this notification. We'll add a
   cancellation token so we can cancel this run in from our next automation. Navigate to the
   settings tab and set `cancellation` to `refs.data.userId`. This way we can cancel any instance
   of this automation associated with the same user the notification would otherwise be sent to.
6. Click publish to finalize the template

The next automation will cancel the reminder automation from above, and send an invoice on
successful checkout.

1. Create a new automation.
2. Add a Segment trigger node with a track event set to "Checkout Complete"

<Frame caption="New Automation">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/segment-checkout-complete.gif" alt="New Automation" />
</Frame>

3. Add a cancel automation node and set the token to the user id. This will prevent the reminder
   to finish checking out from sending.
4. Send the Checkout Complete notification


# Ad hoc Automation Steps
Source: https://www.courier.com/docs/platform/automations/steps

Courier’s ad hoc automation steps let you define workflows via API in a single request—supporting batching, delays, fetches, notifications, profile updates, cancellations, and invokes—without a saved template.

## Add to Batch

Add the data object to a batch. Any steps after "add-to-batch" are not executed until the batch
conditions are met and the batch is released. The subsequent steps are only invoked once per batch
run.

### Fields

| Field             | Type   | Required | Description                                                                                                                                                                                                                                                    |
| ----------------- | ------ | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action            | string | required | The type of element. For the add to batch Automation Step, this value should be `"add-to-batch"`.                                                                                                                                                              |
| batch\_id         | string | required | A unique id for the batch. This value must be the same for each event expected to be added to the batch                                                                                                                                                        |
| wait\_period      | string | required | Defines the period of inactivity before the batch is released. Specified as an ISO 8601 duration, [https://en.wikipedia.org/wiki/ISO\_8601#Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)                                                        |
| max\_wait\_period | string | required | Defines the maximum wait time before the batch should be released. Must be less than wait period. Maximum of 60 days. Specified as an ISO 8601 duration, [https://en.wikipedia.org/wiki/ISO\_8601#Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) |
| max\_items        | number |          | If specified, the batch will release as soon as this number is reached                                                                                                                                                                                         |
| retain            | object | required | Defines what items should be retained and passed along to the next steps when the batch is released                                                                                                                                                            |
| retain.type       | string | required | One of `first`, `last`, `highest`, `lowest`.                                                                                                                                                                                                                   |
| retain.count      | number | required | Currently, only 10 is supported                                                                                                                                                                                                                                |
| retain.sort\_key  | string |          | Defines the data value `data[sort_key]` that is used to sort the stored items. Required when type is set to `highest` or `lowest`.                                                                                                                             |
| category\_key     | string |          | Defines the field of the data object the batch is set to when complete. Defaults to `batch`                                                                                                                                                                    |

### Schema

```json
{
  "action": "add-to-batch",
  "wait_period": "",
  "max_wait_period": "",
  "max_items": 10,
  "retain": {
    "type": "first" | "last" | "highest" | "lowest",
    "count": 10,
    "sort_key": ""
  },
  "category_key": ""
}
```

## Cancel

Cancel an Automation Run that is In Progress.

### Fields

| Field              | Type   | Required | Description                                                                                                                                                |
| ------------------ | ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action             | string | required | The type of element. For the Cancel Automation Step, this value should be `"cancel"`.                                                                      |
| cancelation\_token | string |          | The string that is associated with the cancelable automation run. An Automation Run is cancelable if it has a `cancelation_token` value at execution time. |
| if                 | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                               |
| ref                | string |          | A pointer to step and its data.                                                                                                                            |

### Schema

```json
{
  "action": "cancel",
  "cancelation_token": "",
  "if": "",
  "ref": ""
}
```

## Delay

Wait a duration of time, before proceeding to the next Automation Step.

### Fields

| Field    | Type   | Required | Description                                                                                                                  |
| -------- | ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------- |
| action   | string | required | The type of element. For the Delay Automation Step, this value should be `"delay"`.                                          |
| duration | string |          | The human readable time duration. A duration value and unit is required, e.g. 5 minutes, 1 hour, 3 days                      |
| if       | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data. |
| ref      | string |          | A pointer to step and its data.                                                                                              |
| until    | string |          | The ISO 8601 timestamp that describes the length of the delay.                                                               |

Either `until` or `duration` is required.

### Schema

```json
{
  "action": "delay",
  "if": "",
  "ref": "",
  "until": "",
  "duration": ""
}
```

## Fetch Data

Fetch data via https and write the response to the `data` property of the Automation Run Cache.

### Fields

| Field               | Type   | Required | Description                                                                                                                                                                                               |
| ------------------- | ------ | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action              | string | required | The type of element. For the Fetch Data Automation Step, this value should be `"fetch-data"`.                                                                                                             |
| idempotency\_expiry | string |          | A unix epoch timestamp (seconds) or an ISO\_8601 date string that describes how long the idempotency\_key is valid.                                                                                       |
| idempotency\_key    | string |          | A unique value generated by the client which the server uses to recognize subsequent retries of the same request.                                                                                         |
| if                  | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                                                                              |
| merge\_strategy     | enum   |          | `replace`, `soft-merge`, `overwrite`, or `none`. If nothing is specified then the default strategy is `replace`. The strategy to merge the webhook response into the Automation Run Cache. Details below. |
| ref                 | string |          | A pointer to step and its data.                                                                                                                                                                           |
| webhook             | object |          | The webhook configuration of the resource that is accessible via http. See the `webhook` schema bellow.                                                                                                   |

The `merge_strategy` property can be any of the following values:

* `replace`
  * overwrite all properties in the Automation Cache with the http response. Remove's all in properties in the Automation Cache that do not exist in http response.
* `soft-merge`
  * only overwrite properties in the Automation Cache with the http response properties that do not yet exist in the Automation Cache.
* `overwrite`
  * overwrite all properties in the Automation Cache with the properties from the http response.
* `none`
  * do not make any changes to the Automation Cache if the Automation Cache already exists and has data. Otherwise initialize the Automation Cache.

The `webhook` can be configured with any of the following properties:

```json
{
  "webhook": {
    "body": {}, // optional
    "headers": {}, // optional
    "params": {}, // optional
    "method": "GET" | "POST", // optional, default GET
    "url": "<API_RESOURCE>"
  }
}
```

### Schema

```json
{
  "action": "fetch-data",
  "idempotency_expiry": "",
  "idempotency_key": "",
  "if": "",
  "merge_strategy": "replace" | "none" | "overwrite" | "soft-merge",
  "ref": "",
  "webhook": {
    "body": {}, // optional
    "headers": {}, // optional
    "params": {}, // optional
    "method": "GET" | "POST", // optional, default GET
    "url": "<API_RESOURCE>"
  }
}
```

## GET Profile

Bring a profile stored with Courier into scope

## Invoke

Invoke another Automation Template

| Field           | Type   | Required | Description                                                                                                                        |
| --------------- | ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------------- |
| user\_id        | string | required | The user id of the profile to load                                                                                                 |
| path            | string |          | Where the profile should be attached. Can be profile or `data.<field-name>` defaults to profile                                    |
| merge\_strategy | string |          | How to merge the profile with any existing profile already attached at the same path. "replace", "none", "overwrite", "soft-merge" |
| tenant\_id      | string |          | Load profile with tenant specific data                                                                                             |

### Fields

| Field    | Type   | Required | Description                                                                                                                                         |
| -------- | ------ | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| action   | string | required | The type of element. For the Invoke Automation Step, this value should be `"invoke"`.                                                               |
| context  | string |          | The initial values of the Automation Run Cache to invoke the Automation Template with.                                                              |
| if       | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                        |
| ref      | string |          | A pointer to step and its data.                                                                                                                     |
| template | string | required | A unique identifier that can be mapped to an Automation Template. This could be the Template ID or the Alias from the Automation Template Designer. |

### Schema

```json
{
  "action": "invoke",
  "context": {
    "brand": "",
    "data": {},
    "profile": {},
    "template": "",
    "recipient": ""
  },
  "if": "",
  "ref": "",
  "template": ""
}
```

## Send (Legacy)

Send a Notification Template

### Fields

| Field               | Type   | Required | Description                                                                                                                                                                                                                                                                                                             |
| ------------------- | ------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| action              | string | required | The type of element. For the Send Automation Step, this value should be `"send"`.                                                                                                                                                                                                                                       |
| recipient           | string | required | A unique identifier associated with the recipient of the delivered message.                                                                                                                                                                                                                                             |
| template            | string | required | A unique identifier that can be mapped to an individual Notification. This could be the "Notification ID” on Notification detail pages (see the Notifications page in the Courier app) or a custom string mapped to the event in settings.                                                                              |
| brand               | string |          | The brand id to be used in the notification.                                                                                                                                                                                                                                                                            |
| data                | string |          | An object that includes any data you want to pass to a message template. The data will populate the corresponding template variables.                                                                                                                                                                                   |
| if                  | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                                                                                                                                                                                            |
| idempotency\_expiry | string |          | A unix epoch timestamp (seconds) or an ISO\_8601 date string that describes how long the idempotency\_key is valid.                                                                                                                                                                                                     |
| idempotency\_key    | string |          | A unique value generated by the client which the server uses to recognize subsequent retries of the same request.                                                                                                                                                                                                       |
| override            | string |          | An object that is merged into the request sent by Courier to the provider to override properties or to gain access to features in the provider API that are not natively supported by Courier.                                                                                                                          |
| profile             | string |          | An object that includes any key-value pairs required by your chosen Integrations (see our Provider Documentation for the requirements for each Integration.) If profile information is included in the request and that information already exists in the profile for the recipientId, that information will be merged. |
| ref                 | string |          | A pointer to step and its data.                                                                                                                                                                                                                                                                                         |

### Schema

```json
{
  "action": "send",
  "brand": "",
  "data": {},
  "if": "",
  "idempotency_expiry": "",
  "idempotency_key": "",
  "override": {},
  "profile": {},
  "recipient": "",
  "ref": ""
}
```

## Send

Send a Notification Template

### Fields

| Field   | Type   | Required | Description                                                                                                                   |
| ------- | ------ | -------- | ----------------------------------------------------------------------------------------------------------------------------- |
| action  | string | required | The type of element. For the Send Automation Step, this value should be `"send"`.                                             |
| message | object | required | The Courier Message. For more information see [The Courier Message](../../reference/send/message) in the /send api reference. |

### Schema

```json
{
  "action": "send",
  "message": {
    "to": {
      // profile
    },
    // either template or content is required but not both
    "template": "",
    "content": {}
  }
}
```

## Send List

Send a message to each recipient in the list. Optionally fetch data for each recipient via http and merge the response into the `data` property of the Automation Run Cache.

### Fields

| Field               | Type   | Required | Description                                                                                                                                                                                                                                |
| ------------------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| action              | string | required | The type of element. For the Send List Automation Step, this value should be `"send-list"`.                                                                                                                                                |
| brand               | string |          | The brand id to be used in the notification.                                                                                                                                                                                               |
| data                | string |          | An object that includes any data you want to pass to a message template. The data will populate the corresponding template variables.                                                                                                      |
| data\_source        | object |          | The webhook configuration of the resource that is accessible via http. See the `data_source` schema bellow.                                                                                                                                |
| idempotency\_expiry | string |          | A unix epoch timestamp (seconds) or an ISO\_8601 date string that describes how long the idempotency\_key is valid.                                                                                                                        |
| idempotency\_key    | string |          | A unique value generated by the client which the server uses to recognize subsequent retries of the same request.                                                                                                                          |
| if                  | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                                                                                                               |
| list                | string | required | The Courier List Id.                                                                                                                                                                                                                       |
| override            | string |          | An object sent by Courier to the provider to leverage features of the provider API or to simply override properties of the provider api call.                                                                                              |
| template            | string | required | A unique identifier that can be mapped to an individual Notification. This could be the "Notification ID” on Notification detail pages (see the Notifications page in the Courier app) or a custom string mapped to the event in settings. |
| ref                 | string |          | A pointer to step and its data.                                                                                                                                                                                                            |

The `merge_strategy` property of the steps `data_source` object, can be any of the following values:

* `replace`
  * overwrite all properties in the Automation Cache with the http response. Remove's all in properties in the Automation Cache that do not exist in http response.
* `soft-merge`
  * only overwrite properties in the Automation Cache with the http response properties that do not yet exist in the Automation Cache.
* `overwrite`
  * overwrite all properties in the Automation Cache with the properties from the http response.
* `none`
  * do not make any changes to the Automation Cache if the Automation Cache already exists and has data. Otherwise initialize the Automation Cache.

The `webhook` property of the steps `data_source` object, can be configured with any of the following properties:

```json
{
  "webhook": {
    "body": {}, // optional
    "headers": {}, // optional
    "params": {}, // optional
    "method": "GET" | "POST", // optional, default GET
    "url": "<API_RESOURCE>"
  }
}
```

### Schema

```json
{
  "action": "send-list",
  "brand": "",
  "data": {},
  "data_source": {
    "webhook": {
      "url": "WEBHOOK_URL",
      "method": "GET",
      "headers": {}
    },
    "merge_strategy": "replace"
  },
  "idempotency_expiry": "",
  "idempotency_key": "",
  "if": "",
  "list": "",
  "override": {},
  "ref": "",
  "template": ""
}
```

## Update Profile

Update the Courier Profile given a recipientId.

### Fields

| Field         | Type   | Required | Description                                                                                                                                                                                |
| ------------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| action        | string | required | The type of element. For the Update Profile Automation Step, this value should be `"update-profile"`.                                                                                      |
| if            | string |          | A boolean expression whose value is used to determine the execution of the step. Can optionally consume step reference data.                                                               |
| merge         | enum   |          | `replace`, `soft-merge`, `overwrite`, or `none`. If nothing is specified then the default strategy is `replace`. The strategy to merge new data into the recipient profile. Details below. |
| profile       | string |          | An object that includes any key-value pairs associated with the recipient profile                                                                                                          |
| recipient\_id | string |          | A unique identifier associated with the recipient profile you intend to update.                                                                                                            |
| ref           | string |          | A pointer to step and its data.                                                                                                                                                            |

The `merge` property can be any of the following values:

* `replace`
  * overwrite all properties in the recipient profile with the http response. Remove's all in properties in the recipient profile that do not exist in http response.
* `soft-merge`
  * only overwrite properties in the recipient profile with the http response properties that do not yet exist in the recipient profile.
* `overwrite`
  * overwrite all properties in the recipient profile with the properties from the http response.
* `none`
  * do not make any changes to the recipient profile if the recipient profile already exists and has data. Otherwise initialize the recipient profile

:::warning Profile Merging

When using update-profile steps, be mindful with the aforementioned merge strategies that can update an existing profile that was [created with a Segment Identify event](../../external-integrations/cdp/segment/segment-integration#identify-calls).

:::

### Schema

```json
{
  "action": "update-profile",
  "if": "",
  "merge": "replace",
  "profile": {},
  "recipient_id": "",
  "ref": ""
}
```


# Throttle Node
Source: https://www.courier.com/docs/platform/automations/throttle

Throttle Nodes limit the number of automation-triggered messages per user or group within a set timeframe, preventing over-notification. Configure by user, global, or dynamic scope in Automations.

<Note>
  **NOTE**

  This product is in Private Beta and is under active development. Please email [support@courier.com](mailto:support@courier.com) for access.
</Note>

This avoids overwhelming users with messages pertaining to the same event. With throttling, any events that exceed a predefined limit will be dropped for a specific duration of time and will not pass to the next node.

Because Throttle is a part of Automations, it can apply across channels (eg. email, SMS, chat, in-app inbox, push) and providers (eg. Twilio, Sendgrid, email SMTP, Slack, MS Teams, WeChat).

## Throttle Node Example Use Cases

**Alert Notifications**

When sending alert notifications, you may want to limit the number of notifications sent to a user in a given period to avoid bombarding them with too many alerts.

**Email Campaigns**

If you are running an email campaign, you may want to limit the number of emails sent to a customer within a specific timeframe to avoid overwhelming them with too many messages.

In general, a Throttle step can be useful in any situation where you need to control the flow of data or limit the frequency of an action.

Courier will allow you to specify what next steps should be taken when the throttle is triggered, and what steps should be taken when the throttle is not triggered.

## Creating A Throttle Step

To create a Throttle, use the "Throttle" action, then fill out details in the step node.

Specify maximum number of events to allow through the throttle, and the time period to throttle by.

You have the options to throttle by:

| Scope     | Usage                                                                                                       |
| :-------- | :---------------------------------------------------------------------------------------------------------- |
| `user_id` | Apply throttling by using `user_id` coming from `data`                                                      |
| `GLOBAL`  | Let Courier decide the throttle parameter.                                                                  |
| `Dynamic` | You can use arbitrary value available in your `run_context` by referencing it like `refs.data.throttle_key` |

**Note:** This is a beta feature, and we are working on adding more options for throttling.

Below is an example of a throttle step that will allow 2 event to pass through for a given user in a 24 hour period before throttling.

In this example, the throttle is set to be applied by `user_id`. You have to supply `user_id` in the following manner to throttle the user.

```bash
curl --request POST \
  --url https://api.courier.com/automations/<automation_template_id>/invoke \
  --header 'Authorization: Bearer <replace_with_api_key>' \
  --header 'Content-Type: application/json' \
  --data '{
  "data": {
		"user_id": "<user_id>"
  }
}
```

<Frame caption="Creating Throttle Step">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/digests-batching-throttling/throttle-step.png" alt="Creating throttle step" />
</Frame>


# Webhook Trigger
Source: https://www.courier.com/docs/platform/automations/webhook-trigger

Use Webhook Triggers to launch Automations from external systems. Pass JSON payloads, access event/user data, and trigger templates or workflows directly—ideal for real-time integrations with full context.

<Note>
  **BETA**

  This feature is currently in Beta, please reach out to Courier Support to have it enabled for your account.
</Note>

## Register an Inbound Webhook

1. Go to Settings > Inbound Webhooks and click the "Add Inbound Webhook" button.
2. You will be prompted to enter a name and description for the webhook.

After you save the webhook, you will be presented with a unique URL that you can use to send events to Courier. When you set up the webhook trigger in Automations, you will see a list of all of your registered inbound webhooks by the name. The events are tied to the name you select, and you cannot change the name after you save the webhook.

### Configure the Webhook

Use the webhook URL that was generated in the previous step to configure the webhook in your system. Exercise a normal workflow to trigger various events to Courier, which will enable them as configuration options in the Automation trigger.

### Inbound Webhook Payload

Courier accepts any payload up to 6Mb in size.

If the payload is a JSON object, Courier will parse the payload and make the data available to you in the Automation. If the payload is not a JSON object, Courier will make the entire payload available to you in the Automation as a raw string.

If the JSON object is an array, Courier will parse each object in the array and trigger an automation for each incoming event.

For JSON objects, Courier will extract the following fields if they are present.

* `event` - The name of the event that triggered the webhook. You can filter by the name when you set up the webhook trigger in Automations. If no string field named event is present, Courier will use "Custom" as the default name.
* `userId` - A user identifier attached to the event. Courier will use this value to identify the user in the Automation, and automatically load associated profile data into the automation context.
* `properties.courier.automation` - A JSON object containing one of the following fields:
  * `template` - The id of an existing automation template to invoke, instead of using a configured webhook trigger.
  * `steps` - A JSON object containing the steps for an ad-hoc automation to execute.

If you have an event name or user Id keyed by a different field name in the webhook payload, please reach out to Courier Support to have that field mapped.

## Using the Webhook trigger in an Automation

1. Go to Automations and create a new automation
2. Drag and drop "Webhook" from the list of triggers.
3. In the Source field, select your registered inbound webhook name.
4. After you select the webhook, you can select the event name from a list of any received events, or Custom if your payload did not contain named events.

The data payload in the webhook will be available to you in the Automation in the normal data object, accessed with `refs.data`.

If you don't see any options in the Event field, make sure you have sent at least one event to the webhook from the source system.


# Asset Manager
Source: https://www.courier.com/docs/platform/content/asset-manager

Courier’s Asset Manager organizes templates, automations, and shared content. Users can filter assets by type, channel, or provider, and manage tags for streamlined content discovery and organization.

## What is an asset?

Assets are defined as user generated content and can be uploaded or created through the ui.

<Note>
  **INFO**

  ALL assets must be generated through the UI or API. Users cannot upload any form of content at this time.
</Note>

## Asset View

You can switch between a list view and table view in the Asset Manager to help organize your notification content.

## Filtering

You can filter the Asset Manager to display your content based on the following criteria:

* Type: This can be a notification template, automation, or shared content
* Channels: Filter your assets by which channels are currently configured for your templates.
* Providers: Filter by the providers configured.

## Tags

Tags are used to organize your notifications. You can learn more about [tag management here](../workspaces/notification-tags).

You can create and edit new tags in the Asset Manager. Assign a predefined color or create a new one with hex colors.


# Brand Snippets
Source: https://www.courier.com/docs/platform/content/brands/brand-snippets

Courier Brand Snippets are reusable Handlebars components. Create them under any brand, use them in templates via {{>snippet_name}}, customize with variables, and extend default snippets in custom brands.

## What are Brand Snippets?

Snippets are pieces of [handlebars](https://handlebarsjs.com/) code that you can copy and paste or pull into a Template Block using the snippet name.

<Frame caption="Brand Snippet">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-snippet.png" alt="Brand Snippet" />
</Frame>

## Creating a Brand Snippet

To create a Snippet, navigate to the **Brands** tab in the Courier app and select the brand you want to add the Snippet to. Click the **Snippets** tab and then click the **Add Snippet** button.

## Using Brand Snippets in Templates

To use Snippets add a **Template Block** to an email Notification, and simply call it using a Template Block: `{{>snippet_name}}`

<Frame caption="Brand Snippet Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-snippet-block.png" alt="Brand Snippet Block" />
</Frame>

Using the Notification preview allows you to see the Snippet rendered:

<Frame caption="Brand Snippet Preview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-snippet-preview.png" alt="Brand Snippet Preview" />
</Frame>

### Customizing Snippets with Variables

You can use variables to pull customized content into the Snippet, supplying the value for the variable inside the user profile sent via the Send API call.

<Frame caption="Brand Snippet Variables">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-snippet-variables.png" alt="Brand Snippet Variables" />
</Frame>

### Brand Snippets and the Default Brand

If a snippet exists in the default brand, but not in a custom brand, the default brand snippet *will* render in the custom brand as long as there isn't a snippet with the same name native to that custom brand.

This means you can put any or all of your snippets in the default brand and call them into multiple custom brands. Think of custom brands as extending the default. They can still have their own custom snippets as well.


# Branding Emails
Source: https://www.courier.com/docs/platform/content/brands/brands-in-email-notifications

Courier Brands let you create custom-styled email notifications. Customize logos, colors, headers, footers, or MJML templates. Reuse styles across brands and manage branding via the API.

> Courier's Brands feature enables you to create email notifications with a consistent look and feel.

<Frame caption="Brand Designer">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-designer.png" alt="Brand Designer" />
</Frame>

## White-Labeling Email Notifications

You can manage multiple brands, create reusable styling, and **white-label** email notifications sent on behalf of your customers to their end-user recipients, or if you have multiple brands internally.

## The Default Brand

* The default brand, along with any custom brand, can be customized and renamed.
* The default brand cannot be deleted.

**Customizing your default brand is important because:**

* Every email notification you create uses the Default Brand unless you manually disable Brands in the Notification settings.
* If you enable brands on a notification, your Default Brand will be the fallback for any Send API call that does not specify a brand in the user profile.

## Creating New Brands

* To create a new brand open the notification Designer, select **Brands** in the top menu and click **New Brand**.
* Giving your Brand an optional `brand_id` will allow your developers to manage your brand programmatically using the Brands API.

<Frame caption="New Brand">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/create-brand.png" alt="New Brand" style={{width: 400}} />
</Frame>

### Setting a Custom Brand as your Default

To set a custom brand as your default, open the brand settings and click Set As Default.

<Frame caption="Brand Settings Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/default-brand-modal.png" alt="Brand Settings Modal" />
</Frame>

## Customizing Brands

### Standard Template

Create and customize your Standard Template Brands in the following ways:

* Name
* Logo
* Brand colors (Primary, Secondary, Tertiary)
* Brand Header color
* Brand Footer Social URLs

<Note>
  **LOGO DIMENSIONS AND FILE SIZE LIMITS**

  * The logo must be a JPEG, PNG, or GIF
  * The defined width for email notification logos is 140px. There is no defined height.
  * The maximum file size is 5MB
</Note>

### Custom MJML/Handlebars Template

Use a Custom MJML/Handlebars Template to customize the header, footer and background color using HTML, [MJML](https://mjml.io/) or [Handlebars](https://handlebarsjs.com/guide/).

<Frame caption="Brand Custom Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-custom-template.png" alt="Brand Custom Template" style={{width: 500}} />
</Frame>

### Custom CSS style

You can customize the `<style>` element in the `Head` section of your Brands. In addition to the normal CSS class names, you can define the CSS for Courier blocks using Courier's [CSS Classnames](./css-classnames).

## Re-Using Custom Styling in Multiple Brands

You can re-use custom styling across multiple brands in two different ways.

* **Inherit from Default Brand** if both the default brand and the custom brand use the standard brand type.
* **Re-use CSS using Brand Snippets** if you want to share styling between standard and custom brand types.

### Inheriting from the Default Brand

Use the **Inherit from Default Brand** toggle to inherit the `Head`, `Header`, or `Footer` from the Default brand.

<Frame caption="Inherit from Default Brand">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-inherit-toggle.png" alt="Inherit from Default Brand" style={{width: 500}} />
</Frame>

### Re-using CSS using Brand Snippets

Use Brand Snippets to share custom styles between standard and custom brand templates (Handlebars & MJML).

1. In your default brand, create a [brand snippet](./brand-snippets) to contain your reusable CSS styling.
   You can define the CSS for Courier blocks using [Courier's CSS classnames](./css-classnames).
   Brand snippets in your Default brand can be referenced in custom brands **as long as the snippet name is unique**.

<Frame caption="CSS Snippet">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-style-snippet.png" alt="CSS Snippet" style={{width: 500}} />
</Frame>

2. In a custom brand, add the CSS snippet in the `Head` section, wrapped by `<style>` tags:

```html
<style>
    {{>css-snippet-1}}
</style>
```

## Previewing Brands in Email Notification Templates

To preview what your email notification will look like with different brands applied, open the **Preview** and then select the **Brand** from the **Preview Details > Brand** menu.

<Frame caption="Notification Preview Details">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-preview-details.png" alt="Notification Preview Details" style={{width: 250}} />
</Frame>

## Referencing Brand Attributes With Variables

You can reference brand attributes using variables e.g. `{{var "brand.social.facebook"}}`. Here is the schema for the brand information accessible via variables:

```ts
export const getBrandVariables = (
    brand?: IBrand
): {
    id?: string;
    colors?:
    |
    {
        primary: string;
        secondary: string;
        tertiary: string;
    } | {};
    email?: {
        header: {
            barColor?: string;
            logo: {
                href?: string;
                image?: string;
            };
        };
    };
    social?: {
        facebook?: string;
        instagram?: string;
        linkedin?: string;
        medium?: string;
        twitter?: string;
    };
}
```

## Sending a Branded Email

1. The Notification must have Brand Enabled switched on in the Notification Settings.
2. *(optional)* Include a Brand ID in the Send API call. If no Brand ID is provided, Courier will send using the Default Brand. See the [Send API documentation](../../../reference/send/message) for details.

<Frame caption="Brand Notification Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-notification-settings.png" alt="Brand Notification Settings" />
</Frame>

## Brands API

Courier Brands are fully **API enabled**. Developers can get, create, update and delete brands programmatically using the [Brands API](../../../reference/brands/intro).


# Email Template CSS Classes
Source: https://www.courier.com/docs/platform/content/brands/css-classnames

Courier lets you style email templates using inline CSS and standardized class names. Customize blocks, headers, footers, and text elements. Use !important to override styles and test changes carefully.

> Courier's standardized CSS classes allow you to customize element styles in your Brand email templates.

## Adding CSS to your Brand Email Notification Templates

Courier email template [CSS](https://www.w3schools.com/html/html_css.asp) is set using inline styles.

You can customize the  `<style>` element in the `<head>` section of your Brands using custom templates as well as brands built using the Designer UI.

<Tip>
  **OVERWRITING**

  To overwrite existing styles, you have to use `!important`.
</Tip>

### Brand Designer View

<Frame caption="Brand Designer View">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-designer-view.png" alt="Brand Designer View" />
</Frame>

### Custom Template View

<Frame caption="Custom Template View">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-custom-template-view.png" alt="Custom Template View" />
</Frame>

## MJML Rendering

Your email template CSS is rendered using [MJML](https://mjml.io/). This creates child components out of each component. Content is usually nested within a child element of one of the below CSS classes. To select all child elements recursively, use the universal selector(\*), for example:

```css

.c--block-text * {
    color: red;
}

```

<Note>
  **TESTING YOUR CHANGES**

  *We recommend that you carefully test the resulting changes to your CSS classes.*
</Note>

You can do this by creating an email notification with the relevant block types, then using the preview tab to observe the effect of your CSS changes.

## Content Block CSS Classes

* Action block: `.c--block-action`

* Divider block: `.c--block-divider`

* Image block: `.c--block-image`

* List block: `.c--block-list`

* Markdown block: `.c--block-markdown`

* Quote block: `.c--block-quote`

* Template block: `.c--block-template`

* Text block `.c--block-text`

### Text CSS Classes

* `.c--text-text`

* `.c--text-subtext`

* `.c--text-h1`

* `.c--text-h2`

* `.c--text-quote`

### Other CSS Classes

* `.c--email-footer`

* `.c--email-header`

* `.c--email-header img` (logo)

* `.c--social`

* `.c--email-body`


# White-Labeling Email Domains
Source: https://www.courier.com/docs/platform/content/brands/email-domain-white-labeling

Learn how to send emails from your customer’s domain by overriding email provider API keys and configuring sender addresses, enabling a fully white-labeled email experience via Courier’s Send API.

White-labeling involves two main components:

1. Using your customer's email service provider
2. Sending from your customer's email domain

Courier enables this by allowing you to override the API key of your email provider integration with your customer's provider API key.

## Set Up Email Service Provider Integrations

1. Add an integration in your Courier Workspace for each email provider you'd like to support.
2. Add those integrations to the email channel of the notification template you want to white-label.

<Note>
  **NOTE**

  The initial API keys for these integrations don't need to be valid if you're always overriding them via the Send API.
</Note>

## Configure Provider Selection

Use provider-level conditions to determine which provider gets used. For example:

* Send a data field named "email-provider" with the value "mailgun"
* Set a rule that only enables that provider if that value has been set

## Override the API Key

When sending an email, provide your customer's API key using the override section of the send command.

```json
{
  "event": "EVENT_ID",
  "recipient": {
    "id": "RECIPIENT_ID",
    "profile": {
      "email": "RECIPIENT_EMAIL",
      "email-provider": "mailgun"
    }
  },
  "data": {
    "override": {
      "mailgun": {
        "api_key": "CUSTOMER_API_KEY"
      }
    }
  }
}
```

## Set the 'From' Email Address

To use your customer's email address as the sender:

* Use a variable in the email channel settings
* Set this variable when sending the email

For more details, see [Customizing Email Address Fields](../notification-settings/email-fields).


# Branding Inbox
Source: https://www.courier.com/docs/platform/content/brands/how-to-brand-inbox-toast

Customize your Courier in-app toast and inbox using the Brands Designer—adjust colors, widget position, icons, border radius, and auto-close timer. Remember to publish changes to apply updates.

# Branding Courier Toast and Inbox

> Step-by-step guide to customizing the look and feel of your in-app toast and inbox using the Courier Brands Designer.

## Using the Courier In-App Brand Designer

You can customize the look and feel of the Courier in-app toast and inbox using the Brands designer. To get started, go to the [Brands](https://app.courier.com/designer/brands) tab in the Designer, open a brand then select **In-App**.

<Frame caption="Brands Designer">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/inbox-brands-designer.png" alt="Brands Designer" />
</Frame>

### Defining Your Brand Colors

If you previously set your brand colors for email, those colors are applied to In app as well. If not, you can define your brand colors in the in-app designer using [hex codes](https://htmlcolorcodes.com/).

<Frame caption="Brand Colors">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/inbox-brands-colors.png" alt="Brand Colors" style={{ width: 350 }} />
</Frame>

The **Primary** color will be used on the bell icon, unread message count and unread indicator, and the auto close timer bar on toast messages.

### Inbox Border Radius

You can define the curve on the corners of your inbox using the Inbox Border Radius field.

<Note>
  **INFO**

  Please be sure to include **px** at the end of your number.
</Note>

### Message Auto-Close Timer

The Message Auto Close Timer field sets the amount of time your toast notification will stay open before auto closing.

You can see the auto close timer in action within your Courier workspace when you use the 'Send' tab and receive the toast notification that action triggers.

<Frame caption="Auto-Close Countdown">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/inbox-countdown.png" alt="Auto-Close Countdown" style={{ width: 300 }} />
</Frame>

## Customizing Widgets

Courier Inbox widgets can be customizable in order to match your brand.

### Widget Position

You can set the launch location of the widget relative to the bell icon. This will allow you to embed the widget in the top, left or right hand navigation bar.

<Frame caption="Widget Position">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/inbox-widget-position.gif" alt="Auto-Close Countdown" style={{ width: 300 }} />
</Frame>

## Customizing In-App Icons

Courier's In-App Inbox uses icons in two places: the bell icon which indicates new messages, and the message icon, which is used in the toast message and inbox.

### Bell Icon

The bell icon is customizable. To set a custom bell icon, drag and drop a PNG or JPG file with a width of 25px or more.

<Frame caption="Widget Icon Upload">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/inbox-widget-icon.png" alt="Widget Icon Upload" style={{ width: 400 }} />
</Frame>

### Message Icon

The message icon is used on the in app toast and in the inbox. To set a custom message icon, drag and drop a PNG or JPG file with a width of 25px or more.

<Frame caption="Inbox Message Icon">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/inbox-message-icon.png" alt="Inbox Message Icon" />
</Frame>

You can disable the message icon if you don't want it to appear in the toast or inbox by checking the Disable Message Icon box. You cannot disable it in just one of those locations.

<Frame caption="Disable Message Icon">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/inbox-disable-icon.png" alt="Disable Message Icon" style={{ width: 400 }} />
</Frame>

## Publish Changes to Set Them Live

If you make edits to your in app branding or configuration, they will not be reflected in your application until you click *Publish Changes*.

<Frame caption="Publish Changes Button">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/inbox-publish-changes.png" alt="Publish Changes Button" />
</Frame>


# Checks System
Source: https://www.courier.com/docs/platform/content/checks-system

Courier’s Checks System enables custom approval workflows for notifications. Business-tier users can fetch, update, and resolve checks via API to control publishing after reviews or content updates.

<Note>
  **INFO**

  This feature is available to [Business-tier](https://www.courier.com/pricing/) customers.
</Note>

Checks System enables Courier customers to enable one or more checks that can be associated with multiple Courier features. As of now, we have checks configurable for the templates/notifications which is set to "custom".
[Internationalization Specification](./internationalization-specification) has an example on how custom check can be leveraged for template translations workflow.

## Fetching Checks

Checks API GET endpoint

`GET /notifications/:notification_id/:submission_id/checks`

Example - `GET /notifications/SFTYJKSF0241SVH2TWY97TTFFTQG/1630424150210/checks`

```json
{
  "checks": [
    {
      "id": "custom",
      "status": "PENDING",
      "type": "custom",
      "updated": 1630424150210
    }
  ]
}
```

## Updating Checks

Once all content has been updated, Courier can be notified that the process is completed and release the template to be published.

`PUT /notifications/:notification_id/:submission_id/checks`

```json
{
  "checks": [
    {
      "status": "RESOLVED"
    }
  ]
}
```


# Action Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/action-blocks

Action Blocks let you add buttons or links to Courier notifications. Configure text, URL actions, alignment, and styling. Behavior and appearance vary by channel, with limited support in SMS/chat.

Action Blocks in Courier allow you to add interactive elements to your notifications, enabling recipients to take immediate action directly from the message.
They typically appear as buttons or links, depending on the channel's capabilities.

<Frame caption="New Action Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/action-blocks/action-block-new.png" alt="New Action Block" />
</Frame>

## Configuring Action Blocks

When you select an action block, you are presented with a toolbar with the following formatting options depending on the notification channel.

<Frame caption="Action Block Options">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/action-blocks/action-block-options.gif" alt="New Action Block" />
</Frame>

### Text and Link

* Click the Edit icon to set the `Friendly Text` and `Action`. For most channels, the action is a URL. For Slack, you can opt to use a webhook.

### Button Type

* Select between different button styles, as well as a text-only link option

<Info>
  **NOTE**

  Action buttons are not available across all channels. For SMS and Chat options, the button will render as a URL.
</Info>

### Alignment

* Align the content of the block left, center or right.

### Color (Action Buttons Only)

* Select the button color. You can use a color from the palette or enter the hex value for a custom color - or select from pre-defined brand template colors. This option is only available for action buttons.


# Content Block Overview
Source: https://www.courier.com/docs/platform/content/content-blocks/content-block-basics

Courier Content Blocks are reusable, drag-and-drop components for building cross-channel notifications. They support variables, conditional logic, custom styling, and include types like text, image, markdown, list, and more.

Content Blocks are the building blocks of your notifications in Courier. - Content Blocks are reusable, drag-and-drop components that allow you to build notification content across multiple channels. Key features include:

* Responsive and cross-channel by default
* Reusable across different notification channels
* Support for [variables](../variables/inserting-variables) and [conditional filtering](../notification-settings/send-conditions#for-content-blocks)

## Type of Content Blocks

* Text Blocks
* Image Blocks
* Action Blocks
* Divider Blocks
* Markdown Blocks
* Quote Blocks
* Template Blocks
* List Blocks
* Jsonnet Blocks

Some blocks, like Text and Action Blocks, have channel-specific options or formatting. For example, you can set the color of a text block differently for email and SMS.

## Working with Content Blocks

### Adding Content Blocks

1. Create a new notification and add delivery channels
2. Use the content toolbar to add desired block types
3. Drag and drop blocks to reorder them

<Frame caption="Content Toolbar">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/block-basics/block-basics-blocks.png" alt="Content Toolbar" />
</Frame>

### Using the Content Block Library

The Block Library stores shared channel content:

* Displays blocks not in use by the selected channel
* Marks unused blocks for easy identification
* Allows deletion of unused blocks

<Frame caption="Block Library">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/block-basics/block-basics-library.gif" alt="Block Library" />
</Frame>

### Applying Conditional Filters

You can hide or show blocks based on specific conditions:

1. Select a block and click the filter button

<Frame caption="Filter Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/block-basics/block-basics-conditions.png" alt="Filter Settings" />
</Frame>

2. Set conditions in the modal that appears. You can use values passed in the data object or from the merged recipient profile for the property and values.

<Frame caption="Conditional Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/block-basics/block-basics-condition-modal.png" alt="Conditional Modal" />
</Frame>

You can use values passed in the data object or from the merged recipient profile for the property and values.
See [Content Block Conditions](../notification-settings/send-conditions#for-content-blocks) for more information.

### Customizing Block Settings

Each content block has block-specific settings. The available settings are block-dependent but include things like alignment, color, and text formatting.

<Frame caption="Block Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/block-basics/block-basics-settings.png" alt="Block Settings" />
</Frame>

### Removing a Block

Blocks can be removed from a channel by selecting the block and clicking the Remove Block button. This action will send it to the Block Library.

<Frame caption="Remove a Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/block-basics/block-basics-delete.png" alt="Remove a Block" />
</Frame>


# Divider Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/divider-blocks

Courier Divider Blocks visually separate content across all notification channels. In email, dividers are color-customizable. In SMS and messaging channels, they render as simple separators and support conditional display.

Divider Blocks in Courier provide a simple yet effective way to visually separate content within your notifications.
Divider Blocks are available across all notification channels, offering a consistent way to structure your message content.

<Frame caption="Example of a Divider Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/divider-block/divider-block-new.png" alt="Example of a Divider Block" />
</Frame>

## Channel Specific Behaviors

### Email

In email notifications, you can select a color for your divider block, using the color picker, a hex value, or preset brand colors.

<Frame caption="Divider Block Color Picker">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/divider-block/divider-block-color.png" alt="Divider Block Color Picker" />
</Frame>

### SMS and Direct Message

For SMS and other direct message channels, Divider Blocks appear as a simple, uneditable separator:

<Frame caption="SMS Divider">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/divider-block/divider-block-sms.png" alt="SMS Divider" />
</Frame>

## Filtering a Divider Block

Like with any content block, Diver Blocks can be hidden using a [conditions filter](../notification-settings/send-conditions#for-content-blocks).

**Read more:** [Content block basics](./content-block-basics)


# Image Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/image-blocks

Courier Image Blocks let you add visuals to notifications across email, SMS, push, and direct message channels. They support conditional display, channel-specific behavior, and best practices like alt text.

# Image Blocks

Image Blocks allow you to enhance your notifications with visual content across various channels.
Image Blocks can improve the engagement and effectiveness of your notifications by providing visual context or appeal.

<Frame caption="New Image Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/image-blocks/image-block-new.png" alt="New Image Block" />
</Frame>

## Channel-Specific Behaviors

### Email

In email notifications, Image Blocks display as embedded images, allowing for rich visual content.

### SMS, Push

For SMS and push notifications:

* Image Blocks appear as URLs
* The rendering of these URLs depends on the integrated channel provider

### Direct Message

For supported direct message integrations:

* Images are displayed in real-time within the Courier editor
* No preview links are shown

<Frame caption="Image Block Rendering">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/image-blocks/image-block-fb.png" alt="Image Block Rendering" />
</Frame>

## Advanced Usage

### Conditional Display

Like other content blocks, you can dynamically show or hide Image Blocks using [conditional filters](../notification-settings/send-conditions#for-content-blocks).

<Frame caption="Setting up an Image Block Filter">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/image-blocks/image-block-filter.png" alt="Setting up an Image Block filter" />
</Frame>

<Frame caption="Configuring Image Block Conditions">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/image-blocks/image-block-condition.png" alt="Configuring Image Block conditions" />
</Frame>

## Best Practices

1. **Optimize for Mobile**: Ensure images are responsive and look good on various device sizes
2. **File Size**: Keep image file sizes small to improve loading times, especially for email
3. **Relevance**: Use images that are relevant to your message content
4. **Accessibility**: Always include descriptive alt text for screen readers
5. **Fallback**: Provide text alternatives for channels that may not support images

**Read more:** [Content block basics](./content-block-basics)


# Jsonnet Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/jsonnet-blocks

Courier Jsonnet Blocks let you build dynamic Slack and Teams notifications using Jsonnet. Support includes data-driven templates, conditional logic, and reusable components for Block Kit and Adaptive Cards.

**Availability:** [Slack](../../../external-integrations/direct-message/slack), [Microsoft Teams](../../../external-integrations/direct-message/microsoft-teams)

Jsonnet Blocks enable you to create dynamic, customized content for Slack and Microsoft Teams notifications using the Jsonnet templating language.

[Jsonnet](https://learnxinyminutes.com/docs/jsonnet/) is a JSON to JSON templating language, which means that combining Jsonnet with your user data allows you to build and send dynamic, custom Slack blocks and MS Teams Adaptive Cards in your notifications.

<Frame caption="New Jsonnet Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/jsonnet-blocks/jsonnet-block-new.png" alt="New Jsonnet Block" style={{ width: 500 }} />
</Frame>

## Key Features

### Data Integration

* Access user data using the `data("variable")` syntax
* Dynamically populate message content based on user attributes or event data

### Templating

* Use Jsonnet's templating features to create reusable components
* Apply conditional logic to show or hide parts of your message

### Platform-Specific Elements

* Create Slack [Block Kit](https://api.slack.com/block-kit) elements
* Design Microsoft Teams [Adaptive Cards](https://adaptivecards.io/)

## Courier-Provided Templates

Courier offers several pre-built Jsonnet template blocks for common Block Kit actions:

* Buttons
* Dropdowns
* Images
* Text sections
* And more...

These templates can serve as starting points for your custom designs.

## Custom Block Kit Elements

You can also build your own [Block Kit](https://api.slack.com/block-kit) elements from scratch. The Jsonnet Block expects either a single Block Kit element or an array of elements.

## Demo: Designing Slack Notifications using Block Kit and Jsonnet

Watch this video tutorial to see Jsonnet Blocks in action:

<iframe src="https://www.youtube.com/embed/KPM4lx2Yq3U?rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" width="100%" height="400" />


# List Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/list-blocks

Courier List Blocks render dynamic arrays as styled lists across channels. Support includes simple, nested, and image-based lists. Configure using JSONPath, with scoped variables and conditional formatting.

List Blocks in Courier provide a powerful way to display complex, layered data across all notification channels.
List Blocks allow you to dynamically render arrays of data in your notifications. They're available across all channels and come in four main types:

1. Simple list
2. List with children
3. List with images (email only)
4. List with children and images (email only)

## Working With List Blocks

**Availability:** All channels

<Frame caption="New List Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/list-blocks/list-block-new.png" alt="New List Block" />
</Frame>

The repeatable list block allows you to easily display more complex layered data. This data is passed in the data object as an array during a send. The option to display an image differs by channel.

<Tip>
  **RENDERED OUTPUT**

  The rendered output of the list block is a table element. For more list customization options, you can use a [template block](./template-blocks) with [helpers](../notification-designer/handlebars-helpers).
</Tip>

<Frame caption="Simple List Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/list-blocks/list-block-simple.png" alt="Simple List Block" />
</Frame>

To switch from a simple list to numbered lists, add a list then open the list details:

<Frame caption="List Block Details">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/list-blocks/list-block-details.png" alt="List Block Details" />
</Frame>

## Types of List Blocks

### Simple List

Displays a row for each item in the specified array, similar to a [text block](./text-blocks) with variables scoped to the array.

To render a bulleted simple list, the background color for the list block must be set to `transaparent`.

<Frame caption="List Block Background Color">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/list-blocks/list-bg-color.png" alt="List Block Background Color" />
</Frame>

<Frame caption="Rendered Bulleted List">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/list-blocks/list-bullet.png" alt="Rendered Bulleted List" />
</Frame>

### List With Children

Similar to a simple list, but includes child rows for nested array data.

### List With Images

<Note>
  **INFO**

  Available for email channels only. Other channels display as list with children.
</Note>

Includes images alongside list items. Images can be linked and customized using variables.

### List With Children and Images

Combines features of lists with children and lists with images, allowing for complex, hierarchical data representation with visual elements.

## Configuring List Blocks

### Path

Set the JSONPath expression to point to the array you want to display. For example:

```json
{
  "data": {
    "trainers": [ "Ash", "Misty", "Brock"],
    "name": "Ash Ketchum",
    "region": "Kanto",
    "pokemon": [
      {
        "name": "Bulbasaur",
        "image": "https://example.com/001.png",
        "types": [
          { "name": "grass", "image": "https://example.com/grass.png" },
          { "name": "poison", "image": "https://example.com/poison.png" }
        ]
      },
      {
        "name": "Ivysaur",
        "image": "https://example.com/002.png",
        "types": [
          { "name": "grass", "image": "https://example.com/grass.png" },
          { "name": "poison", "image": "https://example.com/poison.png" }
        ]
      },
      {
        "name": "Venusaur",
        "image": "https://example.com/003.png",
        "types": [
          { "name": "grass", "image": "https://example.com/grass.png" },
          { "name": "poison", "image": "https://example.com/poison.png" }
        ]
      }
    ],
  }
}
```

To list all Pokemon, set the path to `pokemon`.

### Data References

* Inside path scope: Use `{propertyName}` to reference each item in the array
  * e.g. to display the name of the Pokemon, if the path is set to `pokemon`, you can use the variable `{name}`.
* Outside path scope: Use `{$.data.propertyName}` or `{propertyName}` if there isn't a property name conflict.
  * e.g. to display the top level `name` (Ash Ketchum), you can use the variable `{$.data.name}`.
  * e.g. to display the region, you can use the variable `{region}`.
* Array of strings: Use `{@}` to reference each item
  * e.g. to display each trainer in the `trainers` array, you can use the variable `{@}`.

### Styling

* Switch between bulleted and numbered lists in the list details
* Set background color for supported channels using the color picker

<Frame caption="List Block Configuration Details">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/list-blocks/list-block-details.png" alt="List Block Configuration Details" />
</Frame>


# Markdown Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/md-blocks

Markdown Blocks enable cross-channel rich content using standard Markdown syntax. Support dynamic variables, personalization, and conditional rendering—ideal for scalable, consistent notifications in email, SMS, push, and more.

Markdown Blocks allow you to create richly formatted content that can be rendered across multiple channels.
Markdown is a lightweight markup language that allows you to write formatted content using plain text syntax. Courier uses Markdown Blocks to enable flexible content creation that can adapt to different delivery channels.

<Frame caption="New Markdown Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/md-blocks/md-block-new.png" alt="New Markdown Block" />
</Frame>

## Key Features

* Cross-channel compatibility: Create content once and deliver it consistently across email, push, SMS and other channels.
* Rich formatting: Use Markdown syntax to add headings, lists, links, emphasis and more.
* Variable support: Insert dynamic user data and personalize content.
* Conditional rendering: Show or hide Markdown Blocks based on conditions.

## Working with Markdown Blocks

### Adding a Markdown Block

1. In the Courier designer, click the "+" icon to add a new block
2. Select "Markdown" from the block options
3. Enter your Markdown content in the editor

### Markdown Syntax

Courier supports standard Markdown syntax, including:

* Headings (# H1, ## H2, etc)
* Lists (bulleted and numbered)
* Links Link text
* Emphasis (italic, bold)
* And more

For a complete reference, see the [Markdown syntax guide](https://daringfireball.net/projects/markdown/syntax).

### Inserting Variables

To insert a variable into your Markdown, use double curly braces: `{{variable_name}}`. The variable will be replaced with actual data when the notification is sent


# Quote Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/quote-blocks

Quote Blocks in Courier emphasize key text with distinct formatting per channel—indentation for email and Slack, quotes for SMS. Ideal for highlighting citations or testimonials. Supports conditional visibility.

Quote Blocks allow you to highlight important text or citations across different notification channels.
Quote Blocks are designed to make specific text stand out from the rest of your notification content. They're particularly useful for emphasizing key points, displaying testimonials, or citing sources.

## Working with Quote Blocks

### Adding a Quote Block

1. In the Courier designer, click the "+" icon to add a new block
2. Select "Quote" from the block options
3. Enter the text you want to appear in the quote

### Cross-Channel Behaviors

Quote Blocks adapt their appearance based on the delivery channel:

#### Email

Creates an indented quote block with distinctive styling.

<Frame caption="Quote Block Appearance in Email">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/quote-blocks/quote-block-email.png" alt="Quote Block appearance in email" />
</Frame>

#### Slack

Text is indented and italicized to match Slack's quote formatting.

<Frame caption="Quote Block Appearance in Slack">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/quote-blocks/quote-block-slack.png" alt="Quote Block appearance in Slack" />
</Frame>

#### SMS / Direct Message

Automatically wraps the text in quotation marks.

<Frame caption="Quote Block Appearance in SMS/DM">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/quote-blocks/quote-block-sms.png" alt="Quote Block appearance in SMS/DM" />
</Frame>

## Conditional Rendering

Like with any content block, Quote Blocks can be hidden using a [conditions filter](../notification-settings/send-conditions#for-content-blocks).

**Read more:** [Content block basics](./content-block-basics)


# Template Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/template-blocks

Template Blocks in Courier enable custom HTML, CSS, and Handlebars for richly styled emails. Supports dynamic content, markdown, and inline HTML rendering. Not compatible with plain text previews.

Template Blocks allow you to leverage HTML, CSS, and Handlebars templating for highly customized email notifications in Courier.
Template Blocks provide a powerful way to create dynamic, richly formatted content for your email notifications.
They combine the flexibility of HTML and CSS with the dynamic capabilities of Handlebars templating.

<Warning>
  Plain Text

  Plain text preview is **not supported** for template blocks at this time. Anything created with template blocks will not render as plain text in emails.
</Warning>

<Frame caption="Template Block Boilerplate">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/template-blocks/template-block-standard.png" alt="Template Block Boilerplate" />
</Frame>

<Info>
  **Email Client Support**

  HTML and CSS support [varies by email client](https://www.campaignmonitor.com/css/).
</Info>

## Handlebars Templating Language

The Template Block supports Handlebars. You can learn about the language syntax from the [Handlebars Language Guide](https://handlebarsjs.com/guide/#language-features).

**Read more:** [Custom Courier Handlebars helpers](../notification-designer/handlebars-helpers).

## Styling with CSS and Handlebars

Combine CSS and Handlebars for dynamic styling:

<Frame caption="Template Block with CSS and Handlebars">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/template-blocks/template-block-styling.png" alt="Template Block with CSS and Handlebars" />
</Frame>

## Using Markdown in a Template Block

Render markdown between `{{#markdown}}` and `{{/markdown}}` within a template block.

```html
<div>
{{#markdown}}
  # Your Markdown Content

  - List item 1
  - List item 2
{{/markdown}}
</div>
```

## Using Replacement Variables in Handlebars

Insert variables from your JSON event data:

```handlebars
{{var "variable_name"}}
```

**Read More:**

* [Using replacement variables in Courier](../variables/inserting-variables)
* [Courier Handlebars helpers](../notification-designer/handlebars-helpers)

## Inserting HTML from Variables

To render HTML stored in a variable, use triple curly braces:

```handlebars
{{{htmlContent}}}
```


# Text Blocks
Source: https://www.courier.com/docs/platform/content/content-blocks/text-blocks

Courier Text Blocks allow rich text formatting, variables, and conditional rendering across channels. Customize appearance, embed links and images, and adapt formatting automatically for email, SMS, and direct messages.

Text Blocks provide a versatile way to add and format text in your notifications.

<Frame caption="New Text Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-new.png" alt="New Text Block" />
</Frame>

### Text Block Options

* **Variables**: Customize text across all channels and integrations using variables.
* **Background Color**: Adjust the background color to enhance the text block's appearance.
* **Insert Bulleted List**: For static bulleted lists, use this option. For dynamic content, refer to list blocks.
* **Hyperlink**: Add hyperlinks to text in any channel to create interactive notifications.

<Frame caption="Create a New Variable">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-variable.png" alt="Create a New Variable" />
</Frame>

## Show or Hide Text With Inline Conditions

Conditional text allows you to control the visibility of text within a Text Block across different channels. You can use filters to dynamically show or hide text based on data from the profile or data objects sent with the Send API.

<Frame caption="Conditionally Render Text">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-conditional.png" alt="Conditionally Render Text" />
</Frame>

<Frame caption="Choose Your Rendering Conditions">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-conditional-modal.png" alt="Choose Your Rendering Conditions" />
</Frame>

**Common Use Case**: Use inline conditions to provide fallback text when user-specific data is unavailable. For example, highlight the `profile.name` variable in your template and set a condition to hide it when the name property is empty. Then, add fallback text (e.g., "there") with a condition to display when `profile.name` is not present, resulting in a message like "Hi there," instead of "Hi `{profile.name}`,".

## Cross-Channel Formatting Behaviors

Courier automatically adjusts text formatting to suit the limitations of each channel and integration when using text blocks from the shared content library.

### Email

<Frame caption="Email Text Formatting">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-format.png" alt="Email Text Formatting" />
</Frame>

* Text blocks in emails offer advanced formatting options, such as inline images, bulleted lists, headers (H1, H2), subtext, text color, and alignment. These features are not available in SMS, push notifications, or Slack.
* You can also embed images inline:

<Frame caption="Inline Image">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-image.png" alt="Inline Image" />
</Frame>

* Highlight important text:

<Frame caption="Highlight Text">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-highlight.png" alt="Highlight Text" />
</Frame>

* Add static bulleted lists (use list blocks for dynamic content):

<Frame caption="Unordered List">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-bullet.png" alt="Unordered List" />
</Frame>

### Direct Message

* Formatting options such as bold and italic are available in certain direct message text blocks.

<Frame caption="Bold Formatting">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/text-blocks/text-block-bold.png" alt="Bold Formatting" />
</Frame>

### SMS

* SMS does not support text formatting. Bold, italic, headers, subtext, background colors, and alignment will revert to plain text.
* Hyperlinks formatted as anchor links will appear as URL hyperlinks in SMS.

## Conditional Rendering

Like with any content block, Text Blocks can be hidden using a [conditions filter](../notification-settings/send-conditions#for-content-blocks).

**Read more:** [Content block basics](./content-block-basics)


# Control Flow
Source: https://www.courier.com/docs/platform/content/elemental/control-flow

Courier Elemental supports if, loop, ref, and channels properties on elements, enabling conditional rendering, iteration, inter-element references, and channel-specific content in notification templates.

Each control flow property is optional.

## If

Conditionally renders an element.

**Applies to**: `text`, `meta`, `channel`, `group`, `action`, `image`.

### Examples

```json
{
  "type": "text",
  "content": "Hello, {{first_name}} {{last_name}}",
  "if": "data.some_field === 3"
}
```

## Ref

Names an element for reference by other elements. Referenced elements provide access to:

* Their properties
* A `visible` property (`true` if rendered, `false` otherwise)

**Note**: An element cannot reference another before it is defined.

**Applies to**: `text`, `meta`, `channel`, `group`, `action`, `image`.

### Example

```json
{
  "type": "text",
  "content": "Hello, {{first_name}} {{last_name}}",
  "ref": "el3"
},
{
  "type": "text",
  "content": "Hello **world**",
  "if": "refs.el3.visible"
}
```

## Loop

Renders an element multiple times based on an iterable data source.

* `loop` must evaluate to an iterable data source
* `$.item` refers to the current item in the iteration
* `$.index` provides the current index

<Tip>
  **c**

  When using `$.index` in loops, you can easily display a 1-based item number by using the `add` [handlebar helper](../notification-designer/handlebars-helpers#add):

  ```handlebars
  Item {{add $.index 1}}: {{$.item.name}}
  ```

  This will output "Item 1", "Item 2", etc., instead of starting from zero.
</Tip>

Applies to: `text`, `channel`, `group`, `action`, `image`.

### Example:

```json
{
  "type": "text",
  "content": "* {{$.item.name}} listed at {{$.item.price}}",
  "loop": "data.products"
}
```

Full message payload:

```json
{
  "message": {
    "content": {
      "version": "2022-01-01",
      "elements": [
        {
          "type": "text",
          "content": "* {{$.item.name}} listed at {{$.item.price}}",
          "loop": "data.products"
        }
      ]
    },
    "data": {
      "products": [
        {
          "name": "Mouse",
          "price": "$10"
        },
        {
          "name": "Keyboard",
          "price": "$20"
        }
      ]
    }
  }
}
```

Expanded result:

```json
{
  "type": "text",
  "content": "* Mouse listed at $10",
  "loop": "data.products"
},
{
  "type": "text",
  "content": "* Keyboard listed at $20",
  "loop": "data.products"
}
```

## Channels

Selectively renders an element based on the current channel.

**Valid channels**: `email`, `push`, `direct_message`, `sms`, or provider channels like `slack`.

**Applies to**: `text`, `meta`, `channel`, `group`, `action`, `image`.

### Example

```ts
{
  "type": "text",
  "content": "Hello, {{first_name}} {{last_name}}",
  "channels": ["email", "slack"]
}
```


# Elements
Source: https://www.courier.com/docs/platform/content/elemental/elements

Courier Elemental defines reusable content elements (text, image, action, quote, etc.) with rich properties, conditional logic, and localization support to build structured, cross-channel notification templates using JSON.

## Elemental Sugar

Syntactic Sugar to provide a fast shorthand for Courier Elemental Blocks.

### Fields

| Field | Type     | Required | Description                                                                   |
| ----- | -------- | -------- | ----------------------------------------------------------------------------- |
| title | `string` |          | The title to be displayed by supported channels i.e. push, email (as subject) |
| body  | `string` | required | The text content displayed in the notification.                               |

### Example

Elemental Sugar does not require the use of `message.content.version` nor does it require nesting block objects in `message.content.elements`.
Instead, simply pass Elemental Sugar properties directly under `message.content`:

```json
{
  "message": {
    // ... rest of message,

    "content": {
      "title": "Hello",
      "body": "World"
    }
  }
}
```

Elemental Sugar can be used alongside Elemental blocks:

```json
{
  "message": {
    // ... rest of message,

    "content": {
      "title": "Hello",
      "body": "World",
      "version": "2020-01-01",
      "elements": [
        // Courier Elemental Blocks
      ]
    }
  }
}
```

## Action Element

Allows the user to execute an action. Can be a button or a link.

### Fields

| Field             | Type     | Required | Description                                                                                            |
| ----------------- | -------- | -------- | ------------------------------------------------------------------------------------------------------ |
| type              | `string` | required | The type of element. For action elements, this value should be `action`.                               |
| content           | `string` | required | The text content of the action shown to the user.                                                      |
| href              | `string` | required | The target URL of the action.                                                                          |
| action\_id        | `string` |          | A unique id used to identify the action when it is executed.                                           |
| align             | `string` |          | The alignment of the action button. One of `center`, `left`, `right`, or `full`. Defaults to `center`. |
| background\_color | `string` |          | The background color of the action button.                                                             |
| style             | `string` |          | Can be `button` or `link`. Defaults to `button`.                                                       |
| locales           | `object` |          | Region specific content. See [locales docs](./locales) for more details.                               |

### Example

Basic usage:

```json
{
  "type": "action",
  "content": "Click me",
  "href": "https://example.com"
}
```

## Channel Element

The channel element allows a notification to be customized based on which channel it is sent through. For example, you may want
to display a detailed message when the notification is sent through email, and a more concise message in a push notification.

Channel elements are only valid as top-level elements; you cannot nest channel elements. If there is a channel element specified at the top-level of the document, all sibling elements must be channel elements.

Note: As an alternative, most elements support a `channel` property. Which allows you to selectively display an individual element on a per channel basis. See the [control flow docs](./control-flow) for more details.

### Fields

| Field    | Type               | Required | Description                                                                                                                                  |
| -------- | ------------------ | -------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| type     | `string`           | required | The type of element. For channel elements, this value should be `channel`.                                                                   |
| channel  | `string`           | required | The channel the contents of this element should be applied to. Can be `email`, `push`, `direct_message`, `sms` or a provider such as `slack` |
| elements | `CourierElement[]` |          | An array of elements to apply to the channel. If `raw` has not been specified, `elements` is `required`.                                     |
| raw      | `object`           |          | Raw data to apply to the channel. See example. If `elements` has not been specified, `raw` is `required`.                                    |

### Example

Basic Usage:

```json
{
  "type": "channel",
  "channel": "email",
  "elements": [
    {
      "type": "meta",
      "title": "My Subject"
    },
    {
      "type": "text",
      "content": "My email body"
    }
  ]
},
{
  "type": "channel",
  "channel": "default", // all other channels
  "elements": [
    {
      "type": "meta",
      "title": "My Title"
    },
    {
      "type": "text",
      "content": "Hello **world**"
    }
  ]
}
```

With raw:

```json
// Email
{
  "type": "channel",
  "channel": "email",
  "raw": {
    "subject": "My Subject",
    "html": "<mjml>...</mjml>",
    "text": "Lorem ipsum dolor, sit amet", // Supports Markdown
    "transformers": ["handlebars", "mjml"] // Parameter for templating engine.
  }
},

// Slack
{
  "type": "channel",
  "channel": "slack",
  "raw": {
    "slackBlocks": { ... } // Block Kit
  }
},

// Webhook
{
  "type": "channel",
  "channel": "webhook",
  "raw": {
    "payload": {
      "body": {
        "hello": "world"
      }
    }
  }
}
```

## Comment Element

The Comment element allows you to include comments in your Elemental structure that won't be rendered in the final output.

### Fields

| Field   | Type     | Required | Description                                                                |
| ------- | -------- | -------- | -------------------------------------------------------------------------- |
| type    | `string` | required | The type of element. For comment elements, this value should be `comment`. |
| comment | `string` |          | The comment text.                                                          |
| object  | `any`    |          | An optional object that can be included with the comment.                  |

### Example

````json
{
  "type": "comment",
  "comment": "This is a comment that won't be rendered in the output"
}

## Divider Element

Renders a dividing line between elements.

### Fields

| Field | Type   | Required | Description                                                                  |
| ----- | ------ | -------- | ---------------------------------------------------------------------------- |
| type  | `string` | required | The type of element. For divider elements, this value should be `divider`. |
| color | `string` |          | The CSS color to render the line with. I.E. `#fff`.                          |

### Example

```json
{
  "type": "divider",
  "color": "#800080"
}
````

## Group Element

Allows you to group elements together. This can be useful when used in combination with `if` or
`loop`. See [control flow docs](./control-flow) for more details.

### Fields

| Field    | Type               | Required | Description                                                            |
| -------- | ------------------ | -------- | ---------------------------------------------------------------------- |
| type     | `string`           | required | The type of element. For group elements, this value should be `group`. |
| elements | `CourierElement[]` | required | Sub elements to render.                                                |

### Example

```json
{
  "type": "group",
  "loop": "data.products",
  "elements": [
    {
      "type": "text",
      "content": "# {{$.item.name}}"
    },
    { "type": "divider" },
    {
      "type": "text",
      "content": "- Description: {{$.item.description}}"
    }
    {
      "type": "text",
      "content": "- Price: {{$.item.price}}"
    }
  ]
}
```

## HTML Element

The HTML element allows you to include raw HTML content in your notification.

### Fields

| Field   | Type     | Required | Description                                                             |
| ------- | -------- | -------- | ----------------------------------------------------------------------- |
| type    | `string` | required | The type of element. For image elements, this value should be `image`.  |
| content | `string` | required | The raw HTML content to be included in the notification.                |
| locales | `string` |          | Region specific content. See [locales](./locales) doc for more details. |

### Example

```json
{
  "type": "html",
  "content": "<h1>Hello,<strong>World!</strong></h1>"
}
```

## Image Element

Used to embed an image into the notification.

### Fields

| Field     | Type     | Required | Description                                                              |
| --------- | -------- | -------- | ------------------------------------------------------------------------ |
| type      | `string` | required | The type of element. For image elements, this value should be `image`.   |
| src       | `string` | required | The source of the image.                                                 |
| align     | `string` |          | The alignment of the image. One of `center`, `left`, `right`, or `full`. |
| alt\_text | `string` |          | Alternate text for the image.                                            |
| href      | `string` |          | A URL to link to when the image is clicked.                              |
| width     | `string` |          | CSS width properties to apply to the image. (I.E. 50px)                  |

### Example

```json
{
  "type": "image",
  "src": "../Images/logo.png"
}
```

## List Element

The List element allows you to create ordered or unordered lists in your notification.

### Fields

| Field      | Type                | Required | Description                                                          |
| ---------- | ------------------- | -------- | -------------------------------------------------------------------- |
| type       | `string`            | required | The type of element. For list elements, this value should be `list`. |
| list\_type | `string`            | required | The type of list. Can be `ordered` or `unordered`.                   |
| elements   | `ListItemElement[]` | required | An array of list item elements.                                      |
| imgSrc     | `string`            |          | Allows bullets to be rendered using an image (for unordered lists).  |
| imgHref    | `string`            |          | URL for the bullet image, if used.                                   |

### List Item Fields

| Field             | Type                                        | Required | Description                                         |
| ----------------- | ------------------------------------------- | -------- | --------------------------------------------------- |
| type              | `string`                                    | required | Should be `list-item`.                              |
| elements          | `TextContentElement[] OR ListItemElement[]` | required | Content of the list item, can include nested lists. |
| background\_color | `string`                                    |          | Background color for the list item.                 |

### Example

```json
{
  "type": "list",
  "list_type": "unordered",
  "elements": [
    {
      "type": "list-item",
      "elements": [
        { "type": "string", "content": "First item" }
      ]
    },
    {
      "type": "list-item",
      "elements": [
        { "type": "string", "content": "Second item" }
      ]
    }
  ]
}
```

## Meta Element

The meta element contains information describing the notification that may be used by a particular channel or provider. One important field is the title field which will be used as the title for channels that support it.

### Fields

| Field | Type     | Required | Description                                                                   |
| ----- | -------- | -------- | ----------------------------------------------------------------------------- |
| type  | `string` | required | The type of element. For meta elements, this value should be `meta`.          |
| title | `string` |          | The title to be displayed by supported channels i.e. push, email (as subject) |

### Example

Set the title

```json
{
  "type": "meta",
  "title": "Thank you for signing up!"
}
```

With handlebars:

```json
{
  "type": "meta",
  "title": "Hello, {{first_name}} {{last_name}}" // comes from data (data.first_name etc)
}
```

Channel filtered (see [control flow docs](./control-flow) for more details):

```json
{
  "type": "meta",
  "title": "This is an email!",
  "channels": ["email"]
},
{
  "type": "meta",
  "title": "This is a push notification!",
  "channels": ["push"]
}
```

## Quote Element

Renders a quote block.

### Fields

| Field         | Type     | Required | Description                                                              |
| ------------- | -------- | -------- | ------------------------------------------------------------------------ |
| type          | `string` | required | The type of element. For quote elements, this value should be `quote`.   |
| content       | `string` | required | The text value of the quote.                                             |
| align         | `string` |          | Alignment of the quote. One of `center`, `left`, `right`, or `full`.     |
| border\_color | `string` |          | CSS border color property (i.e. `#fff`).                                 |
| text\_style   | `string` |          | One of `text`, `h1`, `h2`, or `subtext`                                  |
| locales       | `object` |          | Region specific content. See [locales docs](./locales) for more details. |

### Example

```json
{
  "type": "quote",
  "content": "The future belongs to those who believe in the beauty of their dreams"
}
```

## Text Element

Represents a body of text to be rendered inside of the notification.

### Fields

| Field         | Type                   | Required | Description                                                                                                |
| ------------- | ---------------------- | -------- | ---------------------------------------------------------------------------------------------------------- |
| type          | `string`               | required | The type of element. For text elements, this value should be `text`.                                       |
| content       | `string`               | required | The text content displayed in the notification. Either this field must be specified, or the elements field |
| elements      | `TextContentElement[]` | required | An array of Text Content Elements. Either this field must be specified, or the content element field       |
| align         | `string`               |          | Text alignment. One of `left`, `center`, or `right`                                                        |
| text\_style   | `string`               |          | Allows the text to be rendered as a heading level. Can be `text`, `h1`, `h2`, or `subtext`                 |
| color         | `string`               |          | Specifies the color of text. Can be any valid css color value                                              |
| bold          | `boolean`              |          | Apply bold to the text                                                                                     |
| italic        | `boolean`              |          | Apply italics to the text                                                                                  |
| strikethrough | `boolean`              |          | Apply a strike through the text                                                                            |
| underline     | `boolean`              |          | Apply an underline to the text                                                                             |
| locales       | `object`               |          | Region specific content. See [locales docs](./locales) for more details.                                   |

### Example

Basic usage:

```json
{
  "type": "text",
  "content": "Thanks for signing up!"
}
```

With handlebars:

```json
{
  "type": "text",
  "content": "This is a notification I sent to {{first_name}}" // comes from the message.data property (i.e. data.first_name)
}
```

With locales:

```json
{
  "type": "text",
  "content": "This is a notification I sent to {{first_name}}",
  "locales": {
    "eu-fr": {
      "content": "Ceci est une notification que j'ai envoyée à {{first_name}}"
    }
  }
}
```

## Text Content Elements

The following elements can be applied as sub `elements` to the main text element. For now,
they must be a child of the text element.

### String Element

Renders a simple string. Similar to default behavior of text without a newline applied at the end

| Field         | Type      | Required | Description                                                                                |
| ------------- | --------- | -------- | ------------------------------------------------------------------------------------------ |
| type          | `string`  | required | The type of element. For string elements, this value should be `string`.                   |
| content       | `string`  | required | The text content displayed in the notification.                                            |
| align         | `string`  |          | Text alignment. One of `left`, `center`, or `right`                                        |
| text\_style   | `string`  |          | Allows the text to be rendered as a heading level. Can be `text`, `h1`, `h2`, or `subtext` |
| color         | `string`  |          | Specifies the color of text. Can be any valid css color value                              |
| bold          | `boolean` |          | Apply bold to the text                                                                     |
| italic        | `boolean` |          | Apply italics to the text                                                                  |
| strikethrough | `boolean` |          | Apply a strike through the text                                                            |
| underline     | `boolean` |          | Apply an underline to the text                                                             |
| locales       | `object`  |          | Region specific content. See [locales docs](./locales) for more details.                   |

### Link Element

Renders a link within a body of text.

| Field             | Type      | Required | Description                                                                                |
| ----------------- | --------- | -------- | ------------------------------------------------------------------------------------------ |
| type              | `string`  | required | The type of element. For link elements, this value should be `link`.                       |
| content           | `string`  | required | The text content displayed in the notification.                                            |
| href              | `string`  |          | The address to link to                                                                     |
| disable\_tracking | `boolean` |          | Disable tracking for the link                                                              |
| align             | `string`  |          | Text alignment. One of `left`, `center`, or `right`                                        |
| text\_style       | `string`  |          | Allows the text to be rendered as a heading level. Can be `text`, `h1`, `h2`, or `subtext` |
| color             | `string`  |          | Specifies the color of text. Can be any valid css color value                              |
| bold              | `boolean` |          | Apply bold to the text                                                                     |
| italic            | `boolean` |          | Apply italics to the text                                                                  |
| strikethrough     | `boolean` |          | Apply a strike through the text                                                            |
| underline         | `boolean` |          | Apply an underline to the text                                                             |
| locales           | `object`  |          | Region specific content. See [locales docs](./locales) for more details.                   |

### Img Element

Renders an image inline within a body of text.

| Field             | Type      | Required | Description                                                                                |
| ----------------- | --------- | -------- | ------------------------------------------------------------------------------------------ |
| type              | `string`  | required | The type of element. For inline image elements, this value should be `img`.                |
| src               | `string`  | required | The source address of the image                                                            |
| alt\_text         | `string`  |          | Text to used for screen readers and displayed on mouse hover                               |
| width             | `string`  |          | How wide the image should render. Can be any valid css width value                         |
| href              | `string`  |          | An address to link to                                                                      |
| disable\_tracking | `boolean` |          | Disable tracking for the link                                                              |
| align             | `string`  |          | Text alignment. One of `left`, `center`, or `right`                                        |
| text\_style       | `string`  |          | Allows the text to be rendered as a heading level. Can be `text`, `h1`, `h2`, or `subtext` |
| color             | `string`  |          | Specifies the color of text. Can be any valid css color value                              |
| bold              | `boolean` |          | Apply bold to the text                                                                     |
| italic            | `boolean` |          | Apply italics to the text                                                                  |
| strikethrough     | `boolean` |          | Apply a strike through the text                                                            |
| underline         | `boolean` |          | Apply an underline to the text                                                             |
| locales           | `object`  |          | Region specific content. See [locales docs](./locales) for more details.                   |

### Example

Basic example:

```json
{
  "type": "text",
  "elements": [
    { "type": "string", "content": "Hey! ", "bold": true },
    { "type": "link", "content": "Check out this site.", "href": "https://www.example.com" },
    { "type": "img", "src": "https://emoji.com/cool-emoji", "width": "5px" }
  ]
}
```

## Control Flow

All elements support additional properties for control flow:

| Field | Type     | Description                                                          |
| ----- | -------- | -------------------------------------------------------------------- |
| if    | `string` | A condition that determines whether the element should be rendered.  |
| loop  | `string` | An expression that allows the element to be repeated multiple times. |
| ref   | `string` | A reference identifier for the element.                              |

These properties enable dynamic content generation and conditional rendering within your Elemental structure.

### Examples

Conditional rendering:

```json
{
  "type": "text",
  "content": "This will only appear for premium users",
  "if": "{{user.isPremium}}"
}
```

Looping:

```json
{
  "type": "group",
  "loop": "{{items}}",
  "elements": [
    {
      "type": "text",
      "content": "Item: {{item.name}}"
    }
  ]
}
```

For more details on using these properties, see the [control flow](./control-flow) docs.


# Export to Elemental
Source: https://www.courier.com/docs/platform/content/elemental/export-to-elemental

Export to Elemental lets you convert Designer-built notifications into Courier Elemental JSON. Use the output in /send API requests. Some block types and features have limited support.

## Exporting Elemental Assets

1. In the Notification Designer, click the dropdown arrow next to "Publish"
2. Select "Export to Elemental"
3. Copy the JSON output containing the Elemental syntax

<Frame caption="Export to Elemental Dropdown">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/elemental/export-to-elemental.png" alt="Export to Elemental Dropdown" />
</Frame>

<Frame caption="Export to Elemental Output JSON">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/elemental/export-to-elemental-output.png" alt="Export to Elemental Output JSON" />
</Frame>

## Using Exported Elemental Syntax

The copied Elemental JSON can be used in your `/send` API requests by including it in the content object of the payload.

## Supported Block Types

The following Designer Studio block types can be exported to Elemental:

| Designer Block | Elemental Node Type(s)    |
| -------------- | ------------------------- |
| Text           | `text`, `list`            |
| Image          | `image`                   |
| Action         | `action`                  |
| Divider        | `divider`                 |
| Markdown       | `text` (format: markdown) |
| Quote          | `quote`                   |
| Template       | `HTML`                    |

<Warning>
  **LIMITATIONS**

  * List blocks are not directly supported
  * Jsonnet blocks are not supported
  * Block-level locales are not supported
</Warning>


# Courier Elemental
Source: https://www.courier.com/docs/platform/content/elemental/intro

Courier Elemental is a JSON-based templating format for defining notification content across channels. It supports localization, channel-specific customization, and dynamic logic using structured elements.

With Courier Elemental you can customize the look, language, and structure of your notification based on locale, channel, and other more advanced custom logic.

## Construct an Elemental Template

All Courier Elemental templates have the following top level structure:

```json
{
  "version": "2022-01-01",
  "elements": CourierElement[]
}
```

### Fields

| Field    | Type                         | Required | Description                             |
| -------- | ---------------------------- | -------- | --------------------------------------- |
| version  | string                       | required |                                         |
| elements | [CourierElement](./elements) | required | Array of [Courier Elements](./elements) |

## Usage

Courier Elemental can be used in place of a standard template in a `/send` call. To do so,
pass the elemental document as the `content` property of the message object:

```json
{
  "message": {
    "to": { /** etc */ },
    "content":{
      "elements": [
        {
          "type": "meta",
          "title": "My Title"
        },
        {
          "type": "text",
          "content": "Hello **world**"
        }
      ],
      "version": "2022-01-01",
    }
  }
}
```


# Locales
Source: https://www.courier.com/docs/platform/content/elemental/locales

Locales let you localize content for text, quote, and action blocks. Specify translations using a locales object, and Courier replaces content based on the recipient’s locale.

At the moment locales is restricted to elements that have a `content` property. This includes `action`, `quote`, and `text` elements.

Locales take the following interface:

```ts
interface Locales {
  [locale: string]: {
    content: string;
  };
}
```

When a `"locale"` is specified in the `message.to` field, each element that has content
for that `"locale"` will have their top level content property replaced by the locale specific
content.

```json
{
  "message": {
    "to": {
      "email": "person@example.com",
      "locale": "eu-fr"
    },
    "content": {
      "version": "2022-01-01",
      "elements": [
        {
          "type": "text",
          "content": "Hello",
          "locales": {
            "eu-fr": {
              "content": "Bonjour"
            }
          }
        }
      ]
    }
  }
}
```

In the above example, `Hello` would be replaced with `Bonjour`.


# Internationalization Specification
Source: https://www.courier.com/docs/platform/content/internationalization-specification

Courier supports localization by allowing templates to include translations per block and channel. Webhooks notify on submission, content is fetched via API, and translations are managed through locale endpoints.

## Flow

A notification template is changed and submitted for translation. Upon submission, an outbound webhook call will be made that will notify of a pending change submission. Upon receipt of the webhook event, the content for the notification template can be fetched and the translation process begun.

**Diagram**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/diagram.png" alt="Internationalization Specification Diagram" />
</Frame>

```json
{
  type: "notification:submitted",
  data: {
		id: "NOTIFICATION_ID_HERE",
    // ...
  }
```

## Fetching Content

When the "notification:submitted" is received

`GET /notifications/:notification_id/draft/content`

### Sample Template

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/sample-template.png" alt="Sample Template" />
</Frame>

### Sample Template Response

```json
{
  "blocks": [
    {
      "alias": "Greetings",
      "context": "This is where we greet a new user",
      "id": "block_43c114d9-9cfd-4340-808f-17e2fc7a4c87",
      "type": "text",
      "checksum": "fb60f2098fa407a4ff8d48e3e908d889",
      "content": "Hello <variable id=\"3\">{name}</variable>, Welcome to <highlight id=\"6\">Courier</highlight>!",
      "locales": {
        "fr_FR": "Bonjour <variable id=\"3\">{name}</variable>, bienvenu a <highlight id=\"6\">Courier</highlight>!"
      }
    },
    {
      "id": "block_f19dd58f-d32c-41b8-911c-239053d34803",
      "type": "markdown",
      "content": "Ready, <variable id=\"3\">{name}</variable>? Get started [here](http://daringfireball.net/projects/markdown/).",
      "checksum": "d06665ec3f663789db81474bc1a82fc5",
      "locales": {
        "fr_FR": "prêt, <variable id=\"3\">{name}</variable>? Commencer [ici](http://daringfireball.net/projects/markdown/)."
      }
    },
    {
      "id": "block_78863d66-54f2-4032-a897-cbed3abb2538",
      "type": "quote",
      "content": "<highlight id=\"3\">Marvel</highlight> is better than DC, do you agree <variable id=\"6\">{name}</variable>?",
      "checksum": "d6e5df4e00b54703e7048cbc5276863e",
      "locales": {
        "fr_FR": "<highlight id=\"3\">Marvel</highlight> mieux que DC, êtes-vous d'accord <variable id=\"3\">{name}</variable>?"
      }
    },
    {
      "id": "block_106b5136-1bf9-4842-bff7-cbae140fd3a3",
      "type": "action",
      "content": "Share",
      "checksum": "67561c1170434dcbfd9becb827672495",
      "locales": {
        "fr_FR": "Partagez"
      }
    },
    {
      "id": "block_9ec5eba6-8ab1-4938-96b0-0f6b63439619",
      "type": "list",
      "content": {
        "children": "<variable id=\"3\">{userName}</variable>",
        "parent": "<variable id=\"3\">{blogTitle}</variable> liked by"
      },
      "checksum": "a4f817cd1a363e95ce1400095937cad8",
      "locales": {
        "fr_FR": {
          "children": "<variable id=\"3\">{userName}</variable>",
          "parent": "<variable id=\"3\">{blogTitle}</variable> aimé par"
        }
      }
    },
    {
      "id": "block_31500deb-de21-436f-9ae6-98f08d569148",
      "type": "template",
      "content": "\n\n<div class=\"notes\">Thanks!</div>",
      "checksum": "c1a6639e8a83a4aba68004ad1a06f124",
      "locales": {
        "fr_FR": "\n\n<div class=\"notes\">Merci!</div>"
      }
    }
  ],
  "channels": [
    {
      "id": "channel_f2e7b2e9-187f-40d9-9725-636d6c59833a",
      "type": "email",
      "content": {
        "subject": "New Subject"
      },
      "checksum": "96bcf212afa5cae1c7918280743aec71",
      "locales": {
        "fr_FR": {
          "subject": "French New Subject"
        }
      }
    }
  ],
  "checksum": "22d224a20345f1e3d3cf4c231243a747"
}
```

## Block Alias and Context

Every block can optionally have an alias and a context. This can be used to have supplementary block information for organizing blocks better.

Retrieval: GET content endpoints can be used to retrieve alias and context per block

Updates: Can only be changed from the Courier UI by clicking on the block info(i) icon

<Frame caption="Template Block Info">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/template-block-info.png" alt="Template Block Info" />
</Frame>

<Frame caption="Block Info Dialog">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/block-info-dialog.png" alt="Block Info Dialog" />
</Frame>

## Block types supported

### Text Block

Example: Text block with a variable `{name}` and a highlight

<Frame caption="Text Block Example">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/text-block.png" alt="Text Block Example" />
</Frame>

Here's how the block JSON would look like

```json
{
  "alias": "Greetings",
  "context": "This is where we greet a new user",
  "id": "block_43c114d9-9cfd-4340-808f-17e2fc7a4c87",
  "type": "text",
  "content": "Hello <variable id=\"3\">{name}</variable>, Welcome to <highlight id=\"6\">Courier</highlight>!",
  "locales": {
    "fr_FR": "Bonjour <variable id=\"3\">{name}</variable>, bienvenu a <highlight id=\"6\">Courier</highlight>!"
  }
}
```

### Let's talk IDs

**Block ID:** This is the top level ID which every block gets and is prefixed with `block`.

**Variable ID:** Unique IDs that a variable inside a block content gets

**Highlight ID:** Unique IDs that a highlight inside a block content gets

*Note - All the IDs are auto-generated by Courier and are used in resolving the contents for the block. The locale variations PUT should also have exactly same IDs for accurate consolidation and resolution.*

### Quote Block

Example: Quote block with a variable `{name}` and a highlight

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/quote-block.png" alt="Quote Block Example" />
</Frame>

```json
{
  "id": "block_78863d66-54f2-4032-a897-cbed3abb2538",
  "type": "quote",
  "content": "<highlight id=\"3\">Marvel</highlight> is better than DC, do you agree <variable id=\"6\">{name}</variable>?",
  "locales": {
    "fr_FR": "<highlight id=\"3\">Marvel</highlight> mieux que DC, êtes-vous d'accord <variable id=\"3\">{name}</variable>?"
  }
}
```

## Markdown Block

Example: Markdown block with a variable `{name}`

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/markdown-block.png" alt="Markdown Block Example" />
</Frame>

```json
{
  "id": "block_f19dd58f-d32c-41b8-911c-239053d34803",
  "type": "markdown",
  "content": "Ready, <variable id=\"3\">{name}</variable>? Get started [here](http://daringfireball.net/projects/markdown/).",
  "locales": {
    "fr_FR": "prêt, <variable id=\"3\">{name}</variable>? Commencer [ici](http://daringfireball.net/projects/markdown/)."
  }
}
```

## Action Block

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/action-block.png" alt="Action Block Example" />
</Frame>

```json
{
  "id": "block_106b5136-1bf9-4842-bff7-cbae140fd3a3",
  "type": "action",
  "content": "Share it",
  "locales": {
    "fr_FR": "Partagez-le"
  }
}
```

## List Block

List blocks can get a bit confusing - [an article that can help](./content-blocks/list-blocks) an article that can help

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/list-block.png" alt="List Block Example" />
</Frame>

```json
{
  "id": "block_9ec5eba6-8ab1-4938-96b0-0f6b63439619",
  "type": "list",
  "content": {
    "children": "<variable id=\"3\">{userName}</variable>",
    "parent": "<variable id=\"3\">{blogTitle}</variable> liked by"
  },
  "locales": {
    "fr_FR": {
      "children": "<variable id=\"3\">{userName}</variable>",
      "parent": "<variable id=\"3\">{blogTitle}</variable> aimé par"
    }
  }
}
```

## Template Block

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/template-block.png" alt="Template Block Example" />
</Frame>

```json
{
  "id": "block_31500deb-de21-436f-9ae6-98f08d569148",
  "type": "template",
  "content": "\n\n<div class=\"notes\">Thanks!</div>"
  },
  "locales": {
     "fr_FR": "\n\n<div class=\"notes\">Merci!</div>"
  }
}
```

*Note: We intentionally omit styles and comments in the API response to optimize the translation payload*

## Checksum

We md5 hash the contents for each block, channel and notification so you could track if contents have ever changed in order to manage translations workflow as needed.

## Channels

We expose the email (subject) and push (title) to be localized (assuming you have those channels configured with your notification)

## Updating Content

When translated content is received, template content should be fetched and the new content should be overlaid. This can be repeated each time a piece of translated content is received.

`PUT /notifications/:notification_id/draft/locales`

```json
{
  "blocks": [
    {
      "id": "block_43c114d9-9cfd-4340-808f-17e2fc7a4c87",
      "type": "text",
      "locales": {
        "fr_FR": "Bonjour <variable id=\"3\">{name}</variable>, bienvenu a <highlight id=\"6\">Courier</highlight>!"
      }
    },
    {
      "id": "block_78863d66-54f2-4032-a897-cbed3abb2538",
      "type": "quote",
      "locales": {
        "fr_FR": "<highlight id=\"3\">Marvel</highlight> mieux que DC, êtes-vous d'accord <variable id=\"3\">{name}</variable>?"
      }
    },
    {
      "id": "block_f19dd58f-d32c-41b8-911c-239053d34803",
      "type": "markdown",
      "locales": {
        "fr_FR": "prêt, <variable id=\"3\">{name}</variable>? Commencer [ici](http://daringfireball.net/projects/markdown/)."
      }
    },
    {
      "id": "block_106b5136-1bf9-4842-bff7-cbae140fd3a3",
      "type": "action",
      "locales": {
        "fr_FR": "Partagez-le"
      }
    },
    {
      "id": "block_9ec5eba6-8ab1-4938-96b0-0f6b63439619",
      "type": "list",
      "locales": {
        "fr_FR": {
          "children": "<variable id=\"3\">{userName}</variable>",
          "parent": "<variable id=\"3\">{blogTitle}</variable> aimé par"
        }
      }
    },
    {
      "id": "block_31500deb-de21-436f-9ae6-98f08d569148",
      "type": "template",
      "locales": {
        "fr_FR": "\n\n<div class=\"notes\">Merci!</div>"
      }
    }
  ]
}
```

## Updating partial contents

In case you'd like to update a specific block or a channel's locales, or all blocks and channels for a specific locale (for ex: Chinese translations for a notification), we've got you covered. You can use the following endpoints -

### Update locales for a specific block

`POST /notifications/:notification_id/blocks/:block_id/locales`

or `POST /notifications/:id/draft/blocks/:blockId/locales`

```json
{
  "fr_FR": "French Lorem Ipsum",
  "it_IT": "Italian Lorem Ipsum"
}
```

### Update locales for a specific channel

`POST /notifications/:id/channels/:channelId/locales`

or `POST /notifications/:id/draft/channels/:channelId/locales`

```json
{
  "fr_FR": "French Subject",
  "it_IT": "Italian Subject"
}
```

### Update block and channel contents for a specific locale

`PUT /notifications/:id/locales/:localeid`

or `PUT /notifications/:id/draft/locales/:localeid`

```json
{
  "blocks": [
    {
      "id": "block_f4c81f75-8edb-4c8f-a50b-37193a580b7f",
      "content": "Italian text block content"
    },
    {
      "id": "block_fcb968bf-b0d1-48e0-b1b2-e23963de8479",
      "content": {
          "children": "Italian List block children",
          "parent": "Italian List block parent"
      }
    }
  ],
  "channels": [
    {
      "id": "channel_9f24f9a9-c597-4330-b357-7929a6dc8f33",
      "content": "Italian Subject"
    },
    {
      "id": "channel_20dda4a6-5439-4a71-953a-bc70a90e39f5",
      "content": "Italian Push Title"
    }
  ]
```

## Completing The Process

Once all content has been updated, Courier can be notified that the process is completed and release the template to be published.

`PUT /notifications/:notification_id/:submission_id/checks`

```json
{
  "checks": [
    {
      "id": "B5BYH93H4D4XRPJBMZJGB43TJEZ3", // check ID
      "status": "RESOLVED",
      "type": "custom"
    }
  ]
}
```

## Fetching Checks

Checks API GET endpoint

`GET /notifications/:notification_id/:submission_id/checks`

Example - `GET /notifications/SFTYJKSF0241SVH2TWY97TTFFTQG/1630424150210/checks`

```jsx
{
	"checks":[
		{
			"id":"B5BYH93H4D4XRPJBMZJGB43TJEZ3", // check ID
			"status":"PENDING",
			"type":"custom",
			"updated":1630424150210
		}
	]
}
```

## Locale based preview

Notification Preview section reflects localized content if there's a locale associated with the profile in your test-event. Here's an example -

I have `"locale": "fr_FR"` in the profile object of a test event

Localized Preview

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/localized-preview.png" alt="" />
</Frame>

Default Preview (no locale in the profile object of the test event)

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/default-preview.png" alt="" />
</Frame>

## Using locales while sending messages

You can use locale as a profile attribute while invoking Courier's /send endpoint. Here's an example -

```jsx
{
	"event": "<your-notification-or-event>",
	"recipient": "<your-recipient>",
	"profile": {
            "locale": "en_US"
         }
}
```

## Webhooks

As mentioned earlier in the doc, you could configure the webhooks in Settings → Webhooks and we'd call those when a notification was submitted for a review, when it was canceled and also when it got published. Please note: At this point we do not have a granular way to allocate webhooks so you could get other events (like message sent events) for the webhooks you add to the Settings, feel free to ignore/not handle those. Here's a couple of screenshots -

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/webhook-settings.png" alt="" />
</Frame>

<br />

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/edit-webhook-dialog.png" alt="" />
</Frame>

## Submitted Keys

Submitted keys are used when you have to send a notification that was submitted for a review but maybe not ready to be published. Basically, submitted is an interim state between Draft and Published. Here's how it works -

→ If notification was published, a submitted key send operation uses published notification contents

→ If notification was submitted for review, a submitted key send operation uses latest draft notification content

Submitted keys can be retrieved, updated or deleted from the Settings → API Keys UI.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/submitted-keys.png" alt="" />
</Frame>

## Block overrides

We also expose `blocks` via `overrides` object in case you need to override the contents on the fly during the send operations.


# Content
Source: https://www.courier.com/docs/platform/content/intro

Courier supports two content creation methods—Elemental JSON via the Send API and web-based Templates—both enabling channel-specific customization across SMS, email, push, and more for tailored message delivery.

* Elemental - a JSON syntax used when invoking the [Send API](../../reference/send/message)
* Templates - designed using our web-based editor

Both of these approaches support the ability to design content that is tailored to the channel it is being delivered to (sms, email, push, etc).


# How to Design a Notification
Source: https://www.courier.com/docs/platform/content/notification-designer/design-a-notification

Create a notification by adding channels, customizing content with reusable blocks, prioritizing integrations, publishing changes, and optionally rolling back versions—all using Courier’s visual Notification Designer.

> Step-by-step guide to creating notifications, adding content, and setting channel priority in the Courier Designer.

## Building Your First Notification

Designing a notification that's ready for a developer to send to users requires completion of 5 simple steps.

<iframe width="100%" height="400" src="https://www.youtube.com/embed/lvhRdNJMLbY" title="How To: Design Notifications with the Courier Design Studio" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

### Create a Notification

Select the Designer in the left-hand navigation, and click Create Notification.

<Frame caption="Create Your Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-create-notification.png" alt="Create Your Notification" />
</Frame>

### Add Notification Channels

Before you can customize a notification with content, you need to add at least one channel by clicking the `+ Add Channel` button.

<Frame caption="Add a Channel to Your Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-add-channel.png" alt="Add a Channel to Your Notification" />
</Frame>

After you click `+ Add Channel`, you have two options for adding Channels:

**Option 1: Add Channel Types**

You can add one of four channel types: email, push, SMS, or direct message.

<Frame caption="Users Have the Option to Choose Between Channels">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-add-channel-type.png" alt="Users Have the Option to Choose Between Channels" />
</Frame>

This option allows users to integrate one or more providers per channel.

<Frame caption="Users Can Have Multiple Providers Per Channel">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-multiple-channels.png" alt="Users Can Have Multiple Providers Per Channel" />
</Frame>

**Option 2: Add Integration Channels**

You also have the option to add an individual integration as a standalone channel.

<Frame caption="Integration as its Own Channel">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-add-integration-channels.png" alt="Integration as its Own Channel" />
</Frame>

A single-integration channel allows users to set send rules and send priority for a specific provider within your channel hierarchy.

<Frame caption="Channel Hierarchy">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-channel-rules.png" alt="Channel Hierarchy" />
</Frame>

<Warning>
  **INTEGRATE A PROVIDER**

  Before you can send a Notification, you **must** integrate a channel provider.
</Warning>

If you see a red exclamation icon, that means the channel does not have an integrated provider.

**Read:** [How to add an integration to a channel.](https://help.courier.com/en/articles/4382644-how-to-add-an-integration-to-a-channel)

<Frame caption="A Channel Needs to be Integrated">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-disconnected-integration.png" alt="A Channel Needs to be Integrated" />
</Frame>

### Prioritize Channels and Integrations

[Channel and Integration send priority](../../sending/channel-priority) is set on a per-notification basis. There are two levels of priority you can set for channels: **Best of** and **Always**.

<Frame caption="Channel Routing Rules">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-prioritize-rules.gif" alt="Channel Routing Rules" />
</Frame>

**Best of Prioritization**

* Courier attempts to send your notifications using the top to bottom priority order in the "Best of" channels list.
* You can change the priority of your channels using drag and drop.
* Best of is defined as the first channel where the Profile data is complete (as defined in the [integration docs](../../../external-integrations/email/intro) for that provider)
* Best of does not currently fallback if the send is unsuccessful, only when the profile data is incomplete.

**Always Prioritization**

* It's possible to set a notification to always send through certain channels.
* Courier will attempt to send the notifications through every channel in the **"Always send"** list in *addition* to the channels in the "Best of" list.
* To set a channel as "Always send", open the channel settings and flip the toggle from "Best of" to "Always". You can do this for one or more channels in the notification.

**Prioritizing Integrations within Channels**

* It's possible to add more than one Integration per channel.
* Open the Channel settings to drag and drop Integrations and set their priority.

**Read more:** [Setting send priority rules for channels and integration.](../../sending/channel-priority)

### Create Channel Content

Click to open a channel and begin creating content. Use the content toolbar to add [content blocks](../content-blocks/content-block-basics) and customize the content within them. These blocks are reusable across channels - so you only have to build your content once.

<Note>
  **CHANNEL REQUIREMENTS**

  Adding **at least one** Channel to a Notification is required before you can start adding content.
</Note>

<Frame caption="Build Your Notification with Content Blocks">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-channel-content.png" alt="Build Your Notification with Content Blocks" />
</Frame>

**Build Once, Send Everywhere**

Once you've built the content in one channel, simply open another and pull in the blocks you've already created from the content Library. Courier dynamically adjusts content blocks to match every channel's technical specifications.

You can use the toolbar to add new, reusable content blocks in any channel.

<Frame caption="Reuse Content Blocks in Your Channels">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-reusable-content.gif" alt="Publish Your Changes" />
</Frame>

### Publish Changes

Whenever you make a change to the content, channel priority, notification or channel settings, integrations, etc. you must publish the changes to production by clicking the "Publish Changes" button.

<Tip>
  **TIP**

  "Did I Publish Changes?" is always a good place to start when troubleshooting.
</Tip>

<Frame caption="Publish Your Changes">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-publish-changes.png" alt="Publish Your Changes" />
</Frame>

<Frame caption="Changes Published">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-published.png" alt="Changes Published" />
</Frame>

### Roll-Back Changes

You can roll back to any previously published versions in the Notification Settings under `Publish History`.

<Frame caption="Rollback Changes">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-rollback.png" alt="Rollback Changes" />
</Frame>

There you have it! A notification with prioritized channels that's ready for a developer to [integrate](/), connect to an Event and send via the Courier [Send API](../../../reference/send/intro).


# Environments, API Keys, and Assets
Source: https://www.courier.com/docs/platform/content/notification-designer/environments-api-keys

Courier provides isolated Test and Production environments with distinct API keys, enabling safe template development, testing, asset migration, and integration management without affecting live data or configurations.

# Understanding Environments

Every Courier workspace has two development environments: `Production` and `Test`. The two environments are isolated from one another, and all the assets within them (templates, brands, tags, subscription topics, integrations, API keys, log data, etc.) belong **only to that environment**.

## Production and Test Environments

Any changes made to a template and its associated assets are only applied within the current environment until you migrate the template and overwrite any changes to the corresponding `Notification ID` and assets in the other environment.

## Switching Between Environments

Use the environments toggle in the lower-left settings menu to switch between your Production and Test environments. Look for the `Test Environment` indicator at the top of the application window to confirm that you're in the test environment.

<Image img={require("../../../assets/guides/environments/environments-switch-toggle.png")} alt="Use the Environments Toggle to Switch Between Environments" />

<Info>
  **INFO**

  Simply switching from **Production** to **Test** does not impact your notifications in either environment in any way. It just changes the environment you are viewing.
</Info>

## API Keys and Environments

Within each environment, Production and Test, there are two states: `draft` and `published`. Each state has its own [unique API key](https://app.courier.com/settings/api-keys), giving you four distinct API keys.

The keys are prefaced in a way that helps you identify which key you are using:

* **pk\_prod\_** = The API key for your published data in the Production environment
* **dk\_prod\_** = The API key for your draft data in the Production environment
* **pk\_test\_** = The API key for your published data in the Test environment
* **dk\_test\_** = The API key for your draft data in the Test environment

<Frame caption="Your Test Environment API Keys">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-api-keys.png" alt="Your Test Environment API Keys" />
</Frame>

### Generate New API Keys

Courier customers have the ability to create new API keys and have more than 2 keys per environment to enable additional development workflows.

<Frame caption="Generate New API Keys">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-generate-keys.png" alt="Generate New API Keys" />
</Frame>

### Define the Routing Behavior of Custom API Keys

In addition to the ability to create new API Keys, Business Tier customers can define the routing behavior of their API Keys. A `mock` key will simulate the Courier notification/message lifecycle - but won't invoke the downstream provider. This lets you see how the request flows inside of Courier without incurring any send cost.

<Frame caption="Define Routing Behavior for Custom API Keys">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-api-routing.png" alt="Define Routing Behavior for Custom API Keys" />
</Frame>

## Notifications, Assets and Environments

The environments feature allows you to move a template and its associated assets (like brands, tags and subscription topics) between environments. You can move them from Test to Production and from Production to Test. You can also select the destination Tenant when migrating assets.

**In order to copy a template between environments.** Courier must also copy all dependencies attached to the template to ensure functionality is preserved. After you've copied associated assets once (e.g. Brand, Category), you will have the option to overwrite those in future migrations.

<Info>
  **NOTE**

  Courier will copy the current template. All other assets copied will be their most recent published version.
</Info>

### Migrating Templates and Assets Between Environments

1. Open the notification you wish to migration.
2. Open the dropdown menu in the 'Publish Changes' button.
3. Select 'Migrate Assets'.

<Frame caption="Migrate Your Template and Assets">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-migrate-assets.png" alt="Migrate Your Template and Assets" />
</Frame>

<Frame caption="Click the 'Copy Assets' Button to be Prompted by a Confirmation Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-copy-assets.png" alt="Click the 'Copy Assets' Button to be Prompted by a Confirmation Modal" />
</Frame>

4. **Select either 'Copy Assets' or 'Copy And Publish' option.**

<Frame caption="Copy Templates and Assets Confirmation Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-publish-assets.png" alt="Copy Templates and Assets Confirmation Modal" />
</Frame>

<Frame caption="Confirm by Selecting 'Copy And Publish'">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-copy-publish.png" alt="Confirm by Selecting 'Copy And Publish'" />
</Frame>

### Migrating Templates to Another Workspace

If you have multiple workspaces, migrating a template between workspaces is as easy as selecting from a dropdown menu.

1. In the migrate assets modal, choose a `Destination Workspace` from the dropdown menu.

<Frame caption="Select Destination Workspace From Dropdown">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-workspace-copy.png" alt="Select Destination Workspace From Dropdown" />
</Frame>

2. Select the workspace you wish to migrate your template to.

<Frame caption="Choose the Destination Workspace">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-workspace-dropdown.png" alt="Choose the Destination Workspace" />
</Frame>

3. The template will be migrated to the selected workspace and environment.

<Frame caption="Migrated Template in New Workspace">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-copied-template.png" alt="Migrated Template in New Workspace" />
</Frame>

### Event Mapping and Template Migration

If you have an [event mapped](../../../platform/sending/create-map-events) to a template that you are migrating between environments, the event and its mapping will automatically migrate as well.

If the associated event is already mapped to a different template in the destination environment, then you will receive an error:

<Frame caption="Event Mapping Error">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-migration-error.png" alt="Event Mapping Error" />
</Frame>

## Integrations and Environments

Your integrations exist across environments, so you only need to add your integration once and it will be available in both Production and Test.

### Adding a Test Environment Configuration

By default, all of your integrations work in both the test and production environments. But, if you'd prefer an extra layer of security, you can add a test API key for your integration that will only send notifications from Courier's test environment.

The Test Configuration means Courier will use this configuration when sending a notification using a test API Key.

<Frame caption="Courier Integrations Allow Users to Set An Integration for Both Environments">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/environments/environments-test-integration.jpeg" alt="Courier Integrations Allow Users to Set An Integration for Both Environments" />
</Frame>

## Data Logs, Metrics, and Environments

Your [Data Logs](https://help.courier.com/en/articles/4364860-using-the-data-logs) and Metrics are environment-specific. Sends of Notifications using the `pk_test_` and `dk_test_` keys will only appear in the Data and Metrics dashboard of the Test environment. While `pk_prod_` and `dk_prod_` sends will only appear in the Data Logs and Metrics for the Production environment.

## Segment and Environments

To use Courier environments with Segment, create multiple Courier sources in Segment with different Environment API keys.

One way to implement this could be:

1. Send your production data from Segment to your Courier production environment using the published Production key `pk_prod_`.
2. Set up a second destination to send data from Segment to your Courier Test environment using the published Test key `pk_test_`.
3. [Map the Track events to your templates](../../../platform/sending/create-map-events) in the test environment.

**For more details, read:** [Setting up Courier's Segment integration](https://help.courier.com/en/articles/4438651-setting-up-courier-s-segment-integration).

## Environments and Billing

Note that billing takes both test and production sends into account.


# Handlebars Editor for Email Notifications
Source: https://www.courier.com/docs/platform/content/notification-designer/handlebars-designer

Courier’s Handlebars editor allows direct HTML/Handlebars editing for email templates, ideal for importing custom designs. Edits are channel-specific and non-reusable—consider template blocks for shared, cross-channel content.

> It's possible to edit the HTML of a Courier Email notification directly using the Handlebars template override.

## Override the Notification Designer With Handlebars

If you want to edit the HTML / Handlebars code of an Email Notification directly, you can switch from the Notification Designer to the Handlebars editor.

<Frame caption="Create Your Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/handlebars-toggle.png" alt="Create Your Notification" />
</Frame>

This is a useful way to import existing HTML templates into Courier.

<Frame caption="HTML Template Editor">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/handlebars-editor.png" alt="Create Your Notification" />
</Frame>

<Warning>
  **NOTE**

  Content created using the Handlebars override is not reusable across channels.
</Warning>

If you need to use Handlebars for a portion of your email, use [template blocks](../content-blocks/template-blocks) and combine them with other [block types](../notification-designer/notification-designer-overview#reusable-drag-and-drop-content) to allow your non-handlebars code content to be re-used in other channels.

Edits made in the Handlebars editor will not apply to other Email notifications. To define the look and feel of all your emails at once, [customize your default brand template](../brands/brands-in-email-notifications#customizing-brands).


# Handlebars Helpers
Source: https://www.courier.com/docs/platform/content/notification-designer/handlebars-helpers

Courier Handlebars Helpers extend core templating with logic, math, string formatting, localization, control flow, and data operations—enabling personalized, dynamic notifications using {{var}}, {{if}}, {{format}}, and more.

> Courier's custom Handlebars helpers for use in email template overrides and custom brand templates.

The default Handlebars helpers can be found [here](https://handlebarsjs.com/guide/block-helpers.html).

<Tip>
  **NOTE**

  Check out our [common use cases documentation](./handlebars-usecases) on details on how to use these functions. Don't see a custom handlebars helper you need in the list? [Share your use case](mailto:support@courier.com).
</Tip>

## Courier Handlebars Helpers

## Logic

### and

Returns `true` if all arguments are truthy, `false` if one argument is falsy, and `true` if no arguments

**Parameters**

* `input` **{String|Number }**

**Note:** Data and profile can have booleans.

**Example:**

```handlebars
{{#if (and (var "boolean") (var "another_boolean"))}}
  <strong>True</strong>
{{else}}
  <strong>False</strong>
{{/if}}
<!-- Output: dependent on variables, 'true' will render if condition returns true -->

<!-- Reference a "profile" variable -->
{{#if (and (var "profile.boolean") (var "profile.another_boolean"))}}
  <strong>True</strong>
{{else}}
  <strong>False</strong>
{{/if}}
```

### condition

Use the if statement to specify a block of code to be executed if a condition is true. Will throw an error if the operator is unsupported.

* Require two operands separated by an operator.
* Run the appropriate operation on the operands.

**Parameters**

* `input` **{String|Number}**

**Note:** Data and profile can have booleans.

**Example:**

```handlebars
{{#if (condition (var "eligible") "==" "yes")}}
  <strong>Hello!</strong>
{{else}}
  <strong>Bye</strong>
{{/if}}
<!-- Output: dependent on variable -->

<!-- Reference a "profile" variable -->
{{#if (condition (var "profile.name") "==" "rod")}}
  <strong>Hello {{var "profile.name"}}!</strong>
{{else}}
  <strong>Hello there</strong>
{{/if}}

<!-- Reference a boolean -->
{{#if (condition (var "profile.hungry") "==" "true")}}
  <strong>{{var "profile.name"}} is hungry!</strong>
{{else}}
  <strong>{{var "profile.name"}} is not hungry</strong>
{{/if}}
```

### conditional

* Loops through all arguments and ensures all are truthy if using the "and" logical operator.
* Loops through all arguments and ensures one is truthy if using the "or" logical operator.
* Returns true if the conditions passed, false otherwise (use #unless helper to hide content if condition passes).

**Parameters**

* `input` **{String|Number}**

**Note:** Data and profile can have booleans.

```handlebars
{{conditional
  (filter "data" "customer.name" "EQUALS" "josh")
  (filter "profile" "email" "CONTAINS" "@trycourier.com")
}}
<!-- Output: dependent on variable -->
```

{/* ### filter

  **Usage:**

  - `{{conditional (filter "data" "customer.name" "EQUALS" "josh") (filter "profile" "email" "CONTAINS" "@trycourier.com")}}`

  **Should:**

  - Require a `source`, `sourceProperty` and `operator`.
  - Value is optional as `IS_EMPTY` and `NOT_EMPTY` operators do not need it.
  - Get source operand from `source` + `sourceProperty`.
  - Use operator to compare source `operand` with value `operand`.

  ### json-parse

  **Usage:**

  - `{{text-block (params data=(json-parse "{ \"anInlineObject\": true }"))}}`

  **Should:**

  - Parse a `JSON` string and return the result.
  - Throw if it encounters a parse error. */}

***

### not

Return `false` if the argument is truthy. Returns `true` if argument is `false`, `undefined`, `null`, `""`, `0`, or `[]`

**Parameters**

* `input`

**Example**

```handlebars
{{not true}}
<!-- Output: false -->

{{not "string"}}
<!-- Output: false -->

{{not "" }}
<!-- Output: true -->

{{not undefined }}
<!-- Output: true -->
```

### or

Returns `true` if one argument is truthy, `false` if all argument are falsy, and `false` if no arguments.

**Parameters**

* `input` **{String|Number}**

**Note:** Data and profile can have booleans.

```handlebars
{{#if (or (var "boolean") (var "another_boolean"))}}
  <strong>True</strong>
{{else}}
  <strong>False</strong>
{{/if}}
<!-- Output: dependent on variables, 'true' will render if condition returns true -->

<!-- Reference a "profile" variable -->
{{#if (or (var "profile.boolean") (var "profile.another_boolean"))}}
  <strong>True</strong>
{{else}}
  <strong>False</strong>
{{/if}}
```

## Data

### default

Returns the `value` if it is not nullish.

**Parameters**

* `input` **{String|Number}**

**Note:** Data and profile can have booleans.

**Example:**

```handlebars
{{default undefined (var "customer")}}
<!-- Output: Returns the default value -->
```

### each

Iterates over a list. Inside the block, you can use `this` to reference the element being iterated over.

**Parameters**

* `input` **{String|Number}**

**Example:**

```json
"data": {
    "people": [
      {
        "name": "Rod"
      },
      {
        "name": "TK"
      },
      {
        "name": "Suhas"
      }
    ]
  }
```

```handlebars
<ul>
  {{#each people}}
    <li>{{this.name}}</li>
  {{/each}}
</ul>
<!-- Output: unordered list -->
```

{/* - Set the `@variableHandler` scope when rendering each element.  */}

<Note>
  **NOTE**

  This is a modified version of [this Handlebars helper](https://github.com/handlebars-lang/handlebars.js/blob/212f9d930b1a39599da2646ac23da64f6552b9d0/lib/handlebars/helpers/each.js).
</Note>

### path

Use the variable handler to resolve a `JSONPath`, and returns the resolved value, similar to [var](#var). Returns undefined if the value was not found.

**Parameters**

* `input` **{String}**

**Example:**

```handlebars
{{path "profile.doesNotExist"}}
<!-- Output: -->

{{var "profile.doesNotExist"}}
<!-- Output: {profile.doesNotExist} -->

{{#if (path "profile.doesNotExist")}}
abc123
{{/if}}
<!-- Output: -->

{{#if (var "profile.doesNotExist")}}
abc123
{{/if}}
<!-- Output: abc123 -->
```

### set

Set the value of a variable specified by `name`. The top level names cannot start with `brand`, `data`, `event`, `profile`, `recipient`, `urls`

**Parameters**

* `name` **{String}**
* `input` **{String}**

**Example:**

```handlebars
<!-- Set and re-use a default value-->
{{set "name" (default (path "profile.firstName") "valued_customer" )}}
Dear {{name}},

<!-- Make a variable more readable -->
{{set "city" (path "profile.address.primary.city")}}
{{city}}
<!-- Output: Santa Cruz -->

{{set "month" (datetime-format 1554145200000 "%B")}}
{{month}}
<!-- Output: April-->
```

### var

Uses the variable handler to resolve a `JSONPath`, and returns the resolved value, similar to [path](#path). Returns the variable reference as a string `{data.doesNotExist}` if the value was not found.

**Parameters**

* `input` **{String}**

**Example:**

```handlebars
{{path "profile.doesNotExist"}}
<!-- Output: -->

{{var "profile.doesNotExist"}}
<!-- Output: {profile.doesNotExist} -->

{{#if (path "profile.doesNotExist")}}
abc123
{{/if}}
<!-- Output: -->

{{#if (var "profile.doesNotExist")}}
abc123
{{/if}}
<!-- Output: abc123 -->
```

### with

<Note>
  **NOTE**

  This helper is a modified version of the [Handlebars `with` helper](https://github.com/handlebars-lang/handlebars.js/blob/212f9d930b1a39599da2646ac23da64f6552b9d0/lib/handlebars/helpers/with.js).
</Note>

Sets the variable scope when rendering the block content.

**Parameters**

* `input` **{String}**

**Example:**

```handlebars
{{#with person}}
{{firstname}} {{lastname}}
{{/with}}
<!-- Output: Marty Banks -->
```

when run in this context

```json
{
  person: {
    firstname: "Marty",
    lastname: "Banks"
  }
}
```

## String

### capitalize

Returns the capitalized first character of a given string.

**Parameters**

* `input` **{String}**

**Example**

```handlebars
{{capitalize "foo"}}
<!-- Output: Foo -->

<!-- Reference a "data" variable -->
{{capitalize (var "name")}}

<!-- Reference a "profile" variable -->
{{capitalize (var "profile.name")}}
```

### concat

Stringifies all arguments and joins them using the provided separator. Should use `null` string for the separator by default and should return a null string if no arguments.

**Parameters**

* `input` **{String|Number}**

**Example**

```handlebars
{{concat "hello" " " "world"}}
<!-- Output: hello world -->

<!-- Reference a "data" variable -->
{{concat "hello" " " (var "name")}}

<!-- Reference a "profile" variable -->
{{concat "hello" " " (var "profile.name")}}
```

### format

Returns a formatted string given a [format](https://github.com/alexei/sprintf.js) and set of arguments.

**Parameters**

* `input` **{String | Number}**

**Example:**

```handlebars
{{format "%.2f" (var "number")}}
<!-- If number = 1 | Output: 1.00 -->
```

### datetime-format

Returns a formatted date string, can be set to a user IANA Timezone
This helper will throw if an invalid date is provided.

**Parameters**

* `input` **{String|Number}**

**Examples**

```handlebars
{{datetime-format 1554145200000 "%a, %B %d %I:%M %p"}}
<!-- Output: Mon, April 01 7:00 pm-->

{{datetime-format 1554145200000 "%a, %B %d %I:%M %p" "America/Los_Angeles"}}
<!-- Output: Mon, April 01 12:00 pm-->

{{datetime-format "2019-04-01T12:00:00.000Z" "%a, %B %d %I:%M %p"}}
<!-- Output: Mon, April 01 12:00 pm-->

{{datetime-format "2019-04-01T12:00:00.000Z" "%a, %B %d %I:%M %p" "America/Los_Angeles"}}
<!-- Output: Mon, April 01 5:00 am-->
```

<Note>
  **INFO**

  [See full list of format options](https://support.sendwithus.com/jinja/jinja_time/#datetime-format)
  along with an additional option %p to add am, pm
</Note>

### trim-left

Removes whitespace from the beginning of a string, without modifying the original string.

**Parameters**

* `input` **{String}**

**Example:**

```handlebars
{{trim-left "  a string"}}
<!-- Output: a string -->
```

### trim-one-char-right

<Note>
  **INFO**

  This helper is for dealing with the following [escaping issue](https://github.com/handlebars-lang/handlebars.js/issues/1159).
</Note>

Returns the string with the last character removed.

**Parameters**

* `input` **{String}**

**Example:**

```handlebars
{{a-block (params text=(trim-one-char-right "ends with\ "))}}
```

### trim-right

Removes whitespace from the end of a string, without modifying the original string.

**Parameters**

* `input` **{String}**

**Example:**

```handlebars
{{trim-right "a string  "}}
<!-- Output: a string -->
```

### trim

Removes whitespace from the beginning and end of a string, without modifying the original string.

**Parameters**

* `input` **{String}**

**Example:**

```handlebars
{{trim "  a string  "}}
<!-- Output: a string -->
```

### truncate

Truncates the string to the number of characters defined in the helper

**Parameters**

* `input` **{String}**
* `length` **{Number}**
* *(optional)* `suffix` **{String}**

**Example:**

```handlebars
{{ truncate "some very long string" 9 }}
<!-- Output: some very -->

{{ truncate "some very long string" 9 "..." }}
<!-- Output: some very... -->
```

## Math

### abs

Return the magnitude of a number. This helper will throw an error if it encounters a value that is not a number.

**Parameters**

* `input` **{Number}**

**Example**

```handlebars
{{abs -10}}
<!-- Output: 10 -->

<!-- Reference a "data" variable -->
{{abs (var "negative_number")}}

<!-- Reference a "profile" variable -->
{{abs (var "profile.negative_number")}}
```

### add

Returns the the sum of two operands. This helper will throw an error if it encounters an input value that is not a number.

**Parameters**

* `term` **{Number}**
* `term` **{Number}**

**Example**

```handlebars
{{add 5 3}}
<!-- Output: 8 -->

{{add -1 -3}}
<!-- Output: -4 -->

<!-- Reference a "data" variable -->
{{add (var "term_1") (var "term_2")}}

<!-- Reference a "profile" variable -->
{{add (var "profile.term_1") (var "profile.term_2")}}
```

### ceil

Returns the least integer greater than or equal to the decimal number input. This helper will throw an error if it encounters a value that is not a number.

**Parameters**

* `input` **{Number}**

**Example**

```handlebars
{{ceil .95}}
<!-- Output: 1 -->

{{ceil 1.01}}
<!-- Output: 2 -->

{{ceil -1.01}}
<!-- Output: -1 -->

<!-- Reference a "data" variable -->
{{ceil (var "some_number")}}

<!-- Reference a "profile" variable -->
{{ceil (var "profile.some_number")}}
```

### divide

Returns the quotient of its operands where the left operand is the dividend and the right operand is the divisor. This helper will throw an error if it encounters an input value that is not a number or if the divisor is `0`.

**Parameters**

* `dividend` **{Number}**
* `divisor` **{Number}**

**Example**

```handlebars
{{divide 12 2}}
<!-- Output: 6 -->

{{divide 3 2}}
<!-- Output: 1.5 -->

<!-- Reference a "data" variable -->
{{divide (var "dividend") (var "divisor")}}

<!-- Reference a "profile" variable -->
{{divide (var "profile.dividend") (var "profile.divisor")}}
```

### floor

Returns the largest integer less than or equal to a given number. This helper will throw an error if it encounters a value that is not a number.

**Parameters**

* `input` **{Number}**

**Example**

```handlebars
{{floor .95}}
<!-- Output: 0 -->

{{floor 1.01}}
<!-- Output: 1 -->

{{floor -1.01}}
<!-- Output: -2 -->

<!-- Reference a "data" variable -->
{{floor (var "some_number")}}

<!-- Reference a "profile" variable -->
{{floor (var "profile.some_number")}}
```

### inc

Increase value by 1.

**Parameters**

* `input` **{Number}**

**Example:**

```handlebars
{{inc (var "value")}}
<!-- If value = 1 | Output: 2 -->
```

### mod

Returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.

This helper will throw an error if it encounters an input value that is not a number or if the divisor is `0`.

**Parameters**

* `dividend` **{Number}**
* `divisor` **{Number}**

**Usage:**

**Example**

```handlebars
{{mod 13 5}}
<!-- Output: 3 -->

{{mod -13 5}}
<!-- Output: -3 -->

{{mod 4 2}}
<!-- Output: 0 -->

<!-- Reference a "data" variable -->
{{mod (var "dividend") (var "divisor)}}

<!-- Reference a "profile" variable -->
{{mod (var "profile.dividend") (var "profile.divisor)}}
```

### multiply

Returns the product of two operands. This helper will throw an error if it encounters an input value that is not a number.

**Parameters**

* `multiplier` **{Number}**
* `multiplicand` **{Number}**

**Example**

```handlebars
{{multiply 12 2}}
<!-- Output: 24 -->

{{multiply -12 2}}
<!-- Output: -24 -->

<!-- Reference a "data" variable -->
{{multiply (var "multiplier") (var "multiplicand")}}

<!-- Reference a "profile" variable -->
{{multiply (var "profile.multiplier") (var "profile.multiplicand")}}
```

### round

Returns the value of a number rounded to the nearest integer. This helper will throw an error if it encounters an input value that is not a number.

**Parameters**

* `input` **{Number}**

**Example**

```handlebars
{{round 1.5}}
<!-- Output: 2 -->

{{round 1.4}}
<!-- Output: 1 -->

{{round -1.4}}
<!-- Output: -1 -->

{{round -1.5}}
<!-- Output: -2 -->

<!-- Reference a "data" variable -->
{{round (var "some_variable")}}

<!-- Reference a "profile" variable -->
{{round (var "profile.some_variable")}}
```

### subtract (sub)

Returns the difference of two operands. This helper will throw an error if it encounters an input value that is not a number.

**Parameters**

* `term` **{Number}**
* `term` **{Number}**

**Example**

```handlebars
{{subtract 5 3}}
<!-- Output: 2 -->

{{sub 5 3}}
<!-- Output: 2 -->

{{subtract 3.5 5}}
<!-- Output: -1.5 -->

<!-- Reference a "data" variable -->
{{subtract (var "term_1") (var "term_2")}}

<!-- Reference a "profile" variable -->
{{subtract (var "profile.term_1") (var "profile.term_2")}}
```

## SendWithUs Helpers

SendWithUs helpers are available to help ease migration from your existing Jinja templates to Courier rendered messages.

### swu\_datetimeformat

Returns a formatted date string. This helper will throw if an invalid date is provided.

**Parameters**

* `input` **{String|Number}**

**Examples**

```handlebars
{{swu_datetimeformat 1554145200000 "%a, %B %d"}}
<!-- Output: Mon, April 01 -->

{{swu_datetimeformat "2019-04-01T12:00:00.000Z" "%a, %B %d"}}
<!-- Output: Mon, April 01 -->
```

<Note>
  **INFO**

  [See full list of format options](https://support.sendwithus.com/jinja/jinja_time/#datetime-format)
</Note>

### swu\_iso8601\_to\_time

Returns an ISO-8601 date string as epoch milliseconds. This helper will throw if an invalid date is provided.

**Parameters**

* `input` **{String}**

**Examples**

```handlebars
{{swu_iso8601_to_time "2019-04-01T12:00:00.000Z"}}
<!-- Output: 1554145200000 -->

<!-- Reference a "data" variable -->
{{swu_iso8601_to_time (var "some_date_variable")}}

<!-- Reference a "profile" variable -->
{{swu_iso8601_to_time (var "profile.some_date_variable")}}
```

### swu\_timestamp\_to\_time

Returns an Unix epoch timestamp (seconds) as a millisecond epoch time value. This helper will throw if an invalid unix epoch date is not provided.

**Parameters**

* `input` **{Number}**

**Examples**

```handlebars
{{swu_timestamp_to_time 1554145200}}
<!-- Output: 1554145200000 -->

<!-- Reference a "data" variable -->
{{swu_timestamp_to_time (var "some_timestamp")}}

<!-- Reference a "profile" variable -->
{{swu_timestamp_to_time (var "profile.some_timestamp")}}
```

### translate

Translates a string based on the key, profile locale and .po translations you have uploaded to Courier.

**Parameters**

* `key` **{String}**
* `args` **{String}** (multiple, space separated arguments)
* `domain` **{String}** (only scoped to "default" right now)
* `locale` **{String}** (fetched automatically from profile right now)

**Examples**

```handlebars
{{t "Salutation"}}
<!-- Output: "Welcome" -->

<!-- Pass profile attributes as arguments -->
{{t "Salutation" profile.first_name profile.last_name}}
<!-- Output: "Welcome, John Doe" -->
```


# Handlebars Use Cases
Source: https://www.courier.com/docs/platform/content/notification-designer/handlebars-usecases

Courier Handlebars support conditional rendering, pluralization, localization, and custom variable transformations—enabling dynamic content generation using

## Simple Use Cases

### Conditionally rendering content

`#if` blocks can be used to control whether content is rendered.

```handlebars
<!-- equal -->
{{#if (condition (var "some_variable") "==" "show")}}
  <div align="center">Hello!</div>
{{/if}}

<!-- strict equal -->
{{#if (condition (var "some_variable") "===" "show")}}
  <div align="center">Hello!</div>
{{/if}}

<!-- not equal -->
{{#if (condition (var "some_variable") "!=" "hide")}}
  <div align="center">Hello!</div>
{{/if}}

<!-- greater than -->
{{#if (condition (var "some_array.length") ">" 0)}}
  <div align="center">Hello!</div>
{{/if}}

<!-- greater than or equal -->
{{#if (condition (var "some_array.length") ">=" 0)}}
  <div align="center">Hello!</div>
{{/if}}

<!-- less than -->
{{#if (condition (var "some_array.length") "<" 0)}}
  <div align="center">Hello!</div>
{{/if}}

<!-- less than or equal -->
{{#if (condition (var "some_array.length") "<=" 0)}}
  <div align="center">Hello!</div>
{{/if}}
```

### Pluralizing Text

The `formatMessage` helper can be used to pluralize text in rendered content. Pluralization respects the [ICU format](https://unicode-org.github.io/icu/userguide/format_parse/messages/) and entries follow [Unicode CLDR rules](https://cldr.unicode.org/index/cldr-spec/plural-rules).

**Example**

```handlebars
Your list contains
{{formatMessage
  "{itemCount, plural,
    =0 {no items}
    one {# item}
    other {# items}
}"
  itemCount=itemCount
}}.
```

## Setting Variables in the payload

Using a Handlebars block, you can transform and set a variable, which can then be used in a template

```handlebars
{{ set "number_rounded (round (var "data.number" )) }}
```

|                                                       Designer                                                                         |                                                       Preview                                                                         |
| :------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------: |
| ![kewl](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/content/notification-designer/set-variable-designer.png) | ![kewl](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/content/notification-designer/set-variable-preview.png) |

### Using the intl block for localization

You can wrap Handlebars functions with the intl block in order to access internationalization features including currency, number formatting and dates. See [Handlebars-intl](https://github.com/formatjs/handlebars-intl) for more information.

```handlebars
{{#intl formats=intl.formats locales="en-US"}}
  {{set
    "winPct_formatted"
    (formatMessage "{winPct, number, maximumFractionDigits=2}" winPct=(var "data.winPct"))
  }}
{{/intl}}
```


# Internationalization of Notification Content
Source: https://www.courier.com/docs/platform/content/notification-designer/internationalizing-notifications

Courier supports multi-language notifications using locale-based conditions, separate templates per language, or dynamic variables. Choose a model based on supported languages and template complexity.

> How to send multi-language notifications with Courier.

There are multiple ways to internationalize your notifications with Courier. The best option for your use case depends on the number of languages you support and the complexity of your notification templates.

## Multi-language Internationalization Models for Notifications

### Multiple Channels, One Template

In this model (one channel per language), the logic defining which notification to fire lives in Courier under the channel settings as [send conditions](../notification-settings/send-conditions).
This model works well for single-channel notifications or multi-channel notifications when you support just a few languages. Notifications templates can get large and complex when you have multiple channel types (email, SMS, DM, push) and support many languages. If this is true for your use case, consider using the multiple templates (one per language) model for internationalization.

**To use this internationalization model, you'll need to use:**

* [Channel-level conditionals](../notification-settings/send-conditions#for-notifications-and-channels)
* Profile data either sent as part of the send command [profile object](../variables/inserting-variables#the-user-profile) or stored in Courier as part of a recipient [profile](../../../reference/profiles/intro)

### Steps

1. Store a "locale" property on each user profile inside of Courier, with [ISO 639-1](https://www.andiamo.co.uk/resources/iso-language-codes/) language code values like `en-us`, `en`, `fr`, `fr-be`, `fr-ca`, etc. (or include it as part of the send command data payload).
2. Add a channel for each language to your template:

<Frame caption="Each Channel Corresponds to a Different Language">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-content/internationalization-template.png" alt="Each Channel Corresponds to a Different Language" />
</Frame>

3. Set up a conditional to match the corresponding language:

<Frame caption="Set a Conditional">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-content/internationalization-conditional.png" alt="Set a Conditional" />
</Frame>

## Multiple Templates

In this internationalization model (one template per language), the logic defining which notification to fire lives in your system rather than within Courier. This model is best for multi-channel notifications when you support many languages.

**To implement this internationalization model:**

1. Create a [notification template](../notification-designer/design-a-notification) for each language you support (i.e., five supported languages = five versions of the same notification).
2. Map a unique language-based event to each template.
3. Trigger the language-specific event to send the notification to users with that.

<Frame caption="Templates Organized by Region">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-content/internationalization-designer-overview.png" alt="Templates Organized by Region" />
</Frame>

<Frame caption="Map an Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-content/internationalization-event.png" alt="Map an Event" />
</Frame>

## Pull Translated Content From the Data Payload

To use this (one template) method, you will need to send the translated content as part of the data payload and pull it into the [content block(s)](../notification-designer/notification-designer-overview#reusable-drag-and-drop-content) in the notification template with Variables or handlebars code.

1. Translate the content and store it in your backend
2. Include the translated content in the JSON data object of the [Send event](../../../reference/send/intro)
3. Pull the translated content into the notification template from the Send event data payload using variables.

### Template Using Variables

<Frame caption="Populate Your Template with Variables">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-content/internationalization-variables.png" alt="Populate Your Template with Variables" />
</Frame>

### Test Event With Variable Values

<Frame caption="Test Event With Variable Values">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-content/internationalization-test-event.png" alt="Test Out Your Variables Inside a Test Event" />
</Frame>

### Preview Your Language-Specific Template With Values Pulled From Variables

<Frame caption="Preview Your Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-content/internationalization-preview.png" alt="Preview Your Template" />
</Frame>

## Internationalization Specification

Courier Business customers have access to [Internationalization Specification](../internationalization-specification) features.

## Formatting Emails

For more information on formatting dates and numbers within an email, see [Handlebars Use Cases](./handlebars-usecases)


# Jsonnet Webhook Designer
Source: https://www.courier.com/docs/platform/content/notification-designer/jsonnet-webhook-designer

Courier’s Webhook Designer lets you configure HTTP payloads using a Jsonnet editor. Set static or dynamic destinations, define custom payloads, and manage webhook delivery via the Webhook integration.

Courier supports sending HTTP requests to a specified destination using the Webhook provider.

## Setting Up Your Webhook Destination

To deliver an HTTP request, Courier must be provided with a destination. For details on how to set up a dynamic destination, see the [Webhook integration developer documentation](../../../external-integrations/other/webhook-integration).

For a static destination, you can specify the Webhook URL and Authorization type in the [webhook integration setup page](https://app.courier.com/channels/webhook).

## Configuring Your Webhook Payload

The webhook notification designer lets you configure the payload of your webhook integration using a [Jsonnet](https://jsonnet.org/) code editor.

<Frame caption="Jsonnet Webhook">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/design-notifications/design-jsonnet-webhook.png" alt="Jsonnet Webhook" />
</Frame>


# Notification Designer Overview
Source: https://www.courier.com/docs/platform/content/notification-designer/notification-designer-overview

Courier’s Notification Designer enables anyone to build, preview, and manage multi-channel notifications using drag-and-drop blocks, test events, brand templates, channel settings, and reusable content—all without coding.

> An introduction to Courier's Notification Designer, empowering every team member to create beautiful, multi-channel notifications.

## Notification Designer

Courier's Notification Designer studio empowers every team member to build beautiful, multi-channel notifications with an easy-to-use graphic user interface.

### Create Notifications

<Frame caption="Create a Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/designer-overview/designer-create-notification.png" alt="Create a Notification" />
</Frame>

### Add and Prioritize Channels

Add new channels to a Notification with a single click then drag them to reorder their [send priority](../../sending/channel-priority).

### Reusable, Drag and Drop Content

Every channel allows you to use drag and drop content blocks to place content without writing any code. Content you create in one channel is available in the Content Library for use in other channels.

* Consistent rendering across every email client.

* Reuse content in any channel.

**Read more:** [How to build a notification that's ready to send](./design-a-notification).

### Preview Your Notifications

<Frame caption="Designer Preview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/designer-overview/designer-preview.png" alt="Designer Preview" />
</Frame>

The Designer allows one to [preview](./how-to-preview-notification) branding, content with test variables, and Handlebars code in every channel.

* Create Test Events to validate your [JSON Paths](../variables/json-paths-variables) and [dynamic variables](../variables/inserting-variables).
* Preview Emails in multiple brands.
* Send preview emails.

<Frame caption="Preview Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/designer-overview/designer-preview-brand.gif" alt="Designer Preview" />
</Frame>

### Access Notification and Channel Settings

Access the [notification settings](../notification-settings/general-settings) to set send conditions, configure Brands, view publish history and more.

<Frame caption="Notification Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/designer-overview/designer-notification-settings.png" alt="Notification Settings" />
</Frame>

Access the channel settings to manage channel send conditions, reorder integration send priority and delete your channel.

<Frame caption="Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/designer-overview/designer-channel-settings.png" alt="Channel Settings" />
</Frame>

### View, Search, and Filter Your Notification List

Use the search field to locate a Notification by name, channel or tag. Create tags and then use the tag filter to narrow your list view.

## Brand Designer

The Brand Designer lets you give your email notifications a consistent look and feel for you and your customers.

### Create and Apply Consistent Branding Across Notifications

* Branded email templates
* Reusable brand code snippets
* White-labeled email branding

Read more about [customizing and using Brands](../brands/brands-in-email-notifications).

<Frame caption="Brand Designer">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/designer-overview/designer-branding.png" alt="Brand Designer" />
</Frame>


# How to Send a Notification
Source: https://www.courier.com/docs/platform/content/notification-designer/send-a-notification

Generate and customize code snippets to send Courier notifications using your stack, event, and recipient ID. Test notifications with selected events and brands before integrating into your codebase.

> A step-by-step guide to generating the code snippet required to integrate a Notification into your codebase and send it to your users.

## Send a Notification

Once you have completed the [Design](./design-a-notification) and [Preview](./how-to-preview-notification) steps, the last step is to generate a code snippet you can test and integrate with your codebase.

<Frame caption="Send Tab">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-tab.png" alt="Send Tab" />
</Frame>

To send a Notification, a developer needs to integrate the code snippet generated by Courier with your codebase. Integration options include [Courier's SDKs](https://github.com/trycourier) and making an HTTP request directly to the Courier [Send API](../../../reference/send/intro).

If you have missed any of the steps required to send the Notification, you will see a call to action for that step in the Send Tab.

<Frame caption="Call to Action to Successfully Send a Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-tab-warnings.png" alt="Call to Action to Successfully Send a Notification" />
</Frame>

### Generating a Code Snippet to Integrate in Your Codebase.

Once you have completed the required steps, you'll be able to generate a code snippet and send a test Notification.

<Frame caption="Code Snippet">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-code.jpeg" alt="Code Snippet" />
</Frame>

To generate the right code snippet for your database to start sending your Notification to live users, confirm you have the right selection for these three settings:

1. Select your programming stack
2. Set the notification event
3. Recipient id setting

### Sending a Test Notification

After you configure the Code Snippet, setting these values will allow you to send a test Notification from the Send Tab:

4. Select a test event
5. Select the brand (Email notifications)
6. Send a test notification
7. Copy the code snippet

## Sending Prerequisites

### 1. Select the Programming Stack for Your Code Snippet

<Frame caption="Choose Your Programming Stack">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-code-stack.gif" alt="Code Snippet" />
</Frame>

* Switch programming languages to generate the code snippet in the language needed to integrate the Notification into your codebase.
* Clicking [View SDK](https://github.com/trycourier) in the Send tab will link you directly to the SDK for the language you've selected.

### 2. Select a Notification Event

<Frame caption="Select an Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-event.png" alt="Select an Event" />
</Frame>

* The [Notification Event](https://help.courier.com/en/articles/4189555-send-basics-how-notifications-are-triggered-and-sent-with-courier) included in the code snippet is used to identify and trigger the correct Notification.
* This `event` can be either the Notification ID or the Event ID mapped to it in the Event Settings.

### 3. The Recipient Id

* A unique identifier associated with the recipient of the delivered message.
* The string in the code snippet is randomly generated to enable the test send.
* You can click into the field and customize it.
* When integrating into your codebase, your app will need to insert the correct Recipient ID into the `send` command.

## Sending a Test Notification Prerequisites

Once you have completed steps 1-3 to generate the correct code snippet, complete steps 4 and 5 to send a test Notification via your integrated channels.

To send a test notification, you'll need:

* A valid [Integration](https://help.courier.com/en/articles/4382644-how-to-add-an-integration-to-a-channel) added to at least one Notification Channel.
* A [Test Event](./how-to-preview-notification) in the Preview tab with valid recipient data in the profile

### 4. Select a Test Event

Select the Test Event with the profile data of the recipient for your test Notification.

<Frame caption="Select a Test Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-test-event.png" alt="Select a Test Event" />
</Frame>

**Read More:** [Creating Test Events in the preview tag.](./how-to-preview-notification)

### 5. Specify the Brand

If you are testing an Email Notification, you can specify which of your [Brand Email Templates](../brands/brands-in-email-notifications#customizing-brands) you want to have applied to the test. If you don't specify a brand, Courier will apply your [Default Brand](../brands/brands-in-email-notifications#the-default-brand).

<Frame caption="Select a Brand">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-select-brand.png" alt="Select a Brand" />
</Frame>

### 6. Send a Test Notification

Once you've completed steps 1-5, click `Send Notification`. Check the [Data Logs](https://help.courier.com/en/articles/4364860-using-the-notification-data-logs) to review the results.

<Frame caption="Send a Test Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-test-send.png" alt="Send a Test Notification" />
</Frame>

### 7. Copy the Code Snippet

You can click on the `Copy to Clipboard` button to paste and integrate it into your codebase or share it with your developer through other channels.

<Frame caption="Copy your Code Snippet">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-copy-button.png" alt="Copy your Code Snippet" />
</Frame>

If you're not sure how to do that, here are a few options for sharing the Code Snippet:

* Sharing code snippets [via Slack](https://slack.com/slack-tips/share-code-snippets).
* Sharing code snippets [via MS Teams](https://support.microsoft.com/en-us/office/send-code-snippets-in-a-message-in-teams-5406fe2b-2771-4b9a-bd73-656914f6ab3c).
* Send the Code Snippet as plain text [via Gmail](https://www.lifewire.com/how-to-send-a-message-in-plain-text-from-gmail-1171963#:~:text=To%20send%20an%20email%20in,re%2Dselect%20the%20menu%20option.).
* Create and share a [Github Gist](https://docs.github.com/en/github/writing-on-github/creating-gists#creating-a-gist).


# Customizing Email Address Fields
Source: https://www.courier.com/docs/platform/content/notification-settings/email-fields

Customize the ‘From’, ‘Reply-To’, ‘CC’, and ‘BCC’ fields per notification or globally via integration settings. Channel settings override defaults and support dynamic variables for personalized address handling.

> How to set the sender name and email address for your email notification's 'From', 'Reply To', 'CC' and 'BCC' fields.

Courier allows you to define the From name and email by default or per notification.

The `Reply to`, `CC`, and `BCC` addresses are set per notification within the channel settings.

## Setting the 'From' Name and Email Address

You can set the 'From' name and email address for email notifications in two ways:

1. The default provider integration settings
2. On a per-channel basis using the email channel settings.

<Note>
  **INFO**

  The channel settings will *always* override the default provider integration settings on the channel and notification where they are set.
</Note>

## Setting Default Address Fields in the Integration Settings

By default, email notifications will use the `from` name and `email` address you set in your provider integration settings.

Some providers allow us to provide you a `From Email Address` field alongside a `From Name` field.

<Frame caption="Email From Field">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/email-reply/email-from.png" alt="Email From Field" />
</Frame>

When the provider integration settings don't allow a Sender Name field use the `Sender Name <example@youremailprovider.com>` format to define the `from` name that will display in your recipient's email client.

<Frame caption="Email API">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/email-reply/email-api.png" alt="Email From Field" />
</Frame>

### Overriding the Default From Name and Email Via Channel Settings

To override the integration default and define your sender name for a specific channel within a single notification, open the [channel settings](../../sending/channel-settings).

<Frame caption="Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/email-reply/email-channel-settings.png" alt="Channel Settings" />
</Frame>

Once you open the channel settings you'll see the email configuration fields for setting the `From` email.

Use the `Sender Name <example@youremailprovider.com>` format to define a name.

## Setting the 'Reply To', 'CC' and 'BCC' Addresses

To set the `Reply To`, `CC` and `BCC` addresses, open the email channel settings and add your email addresses into the corresponding fields.

<Info>
  **NOTE**

  You can use [variables](../variables/inserting-variables) to dynamically set any of these email addresses.
</Info>

<Frame caption="General Notification Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/email-reply/email-general.png" alt="General Notification Settings" />
</Frame>


# General Settings
Source: https://www.courier.com/docs/platform/content/notification-settings/general-settings

Notification Settings let you manage a notification’s ID, brand, conditions, subscription topic, and events—plus add internal notes, tag messages, and access publish history or rollback changes.

> A quick introduction to the Notification settings: where they are, what information they provide and what you can do with them.

There are five sections of the Notification Settings.

* General
* Notes
* Events
* Conditions
* Publish History

## Opening the Notification Settings

To view the Notification settings, open the notification in the designer list, then click the settings icon next to the Notification name.

<Frame caption="Access Notification General Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-settings/notification-settings-main.png" alt="Access Notification General Settings" />
</Frame>

## General Settings

<Frame caption="General Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-settings/notification-settings-general.png" alt="General Settings" />
</Frame>

### Notification ID

* The Notification ID is a unique string assigned to the notification by Courier.
* When you make a successful Send API request, Courier returns the Notification ID mapped to the event used to trigger it.
* You can also use the Notification ID as the event object in your Send

### Auth Token

* A Tenant-level token required to send Notifications.
* You can also find your Tenant's AuthToken in the [General Settings](https://app.courier.com/settings).

### Brand Config

* Brands are "enabled" by default so each new email notification will use your [Default Brand](../brands/brands-in-email-notifications#customizing-brands) template unless you disable it.
* Brands must be "enabled" to use [Custom Brands](../brands/brands-in-email-notifications#sending-a-branded-email) on email notifications.

### Subscription Topic

* Use Subscription Topic to group notification templates and let end users set preferences to more than one notification at a time.

### Message Tags

<Info>
  **NOTE**

  This is under a feature flag currently, please reach out to Courier support or your account team to turn on.
</Info>

* While designing a template, you may want to select which view you would like this appear in an inbox or how to internally tag your messages.
* You can enter a comma separated list of tags and those will automatically be put into the `metadata.tags` [docs](../../../reference/send/message) field when sending to the user.
* This allows them to be filtered in a view on the inbox using one of those tags or filtered with our [Messages API](../../../reference/logs/list).

<Frame caption="Notification Settings Message Tags">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/inbox/designer-settings-message-tags.png" alt="Notification Settings Message Tags Image" />
</Frame>

### Notification Config

* Even if you've assigned a notification to a Category, you can define whether or not you want the notification to inherit settings from the category or define them at the Notification level with this setting.

<Frame caption="Configuration Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-settings/notification-settings-config.png" alt="Configuration Settings" />
</Frame>

### Created

* Timestamp of when the notification was created.

### Duplicate

* The Duplicate button allows you to duplicate all content, channels and configurations created in this notification into a new notification.
* The duplicate will not share the same Notification ID.

### Delete

* The Delete button permanently deletes the notification and all its content.

## Notes

<Frame caption="Notification Notes">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-settings/notification-settings-notes.png" alt="Notification Notes" />
</Frame>

Notes let you create and edit an internal note about the Notification. Once a note has been added, you'll see a new note icon in the main notifications list – clicking this opens a read-only view of the note directly within the list view.

<Frame caption="Notification Designer Overview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-settings/notification-settings-notes-designer.png" alt="Notification Designer Overview" />
</Frame>

## Events

You can map an existing Event trigger to the notification in the Events section of the Notification settings.

<Frame caption="Event Mapping Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-settings/notification-settings-events.png" alt="Event Mapping Settings" />
</Frame>

**Read more:** [Creating Events](../../sending/create-map-events)

## Conditions

Using the Conditions tool in the Notification settings allows you to use properties from the data or profile objects provided by the [Send API](../../../reference/send/intro) call or [User Profile](../../../reference/profiles/intro) to prevent the notification from sending when specific conditions are met.

## Publish History

* Publish History allows you to see who published versions of the Notification and when they published it.
* Rollback allows you to revert to any previously published version.

<Note>
  **NOTE**

  You will lose any unpublished work if you click **Rollback**.
</Note>

<Frame caption="Notification Versioning">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-settings/notification-settings-history.png" alt="Notification Versioning" />
</Frame>


# Using Send Conditions
Source: https://www.courier.com/docs/platform/content/notification-settings/send-conditions

Courier allows you to conditionally disable entire notifications, channels, or content blocks using data or profile properties—configured via Notification or Channel settings with customizable logic filters.

> How to set conditional send rules to disable Notifications or Channels using properties from the Send API data object or User Profile.

Using the `Conditions` functionality in the Notification and Channel settings allows you to use properties from the data or profile objects provided by the [Send API](../../../reference/send/intro) call or [User Profile](../../../reference/profiles/intro) to prevent the notification from sending when specific conditions are met.

If you want to disable the *entire* notification, set your conditions in the [Notification Settings](./general-settings). To disable specific Channels within the Notification, set your condition in the [Channel settings](../../sending/channel-settings).

<Info>
  **NOTE**

  * Channel conditions only apply to the channel where you set them.
  * [User preferences](../../../reference/user-preferences/intro) will take precedence over channel conditions. If a user has `custom_routing` channels configured, channel conditions will **not** be applied.
  * A channel can be disabled by using [missing variable guardrails](../variables/variable-not-found).
</Info>

## Setting Send Conditions

### For Notifications and Channels

Open the Notification / Block Settings and select the Conditions tab.

<Frame caption="Notification Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-conditions/send-conditions-settings.png" alt="Notification Settings" />
</Frame>

<br />

<Frame caption="Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-conditions/send-conditions-channel-settings.png" alt="Channel Settings" />
</Frame>

### For Content Blocks

Open the conditional settings modal from the content block you wish to set conditions to.

<Frame caption="Content Block Conditions">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-conditions/send-conditions-filter.png" alt="Content Block Conditions" />
</Frame>

## Setting Conditions

1. Select the `source` of the `property` and `values` to either render or hide when certain conditions are met.

<Tip>
  **TIP**

  You can access nested values using dot notation.
</Tip>

<Frame caption="Conditions Source">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-conditions/send-conditions-condition-filter.png" alt="Conditions Source" />
</Frame>

2. Set the property name, operator and value that you want to disable/enable the notification, channel, or content block.

<Frame caption="Condition Operators">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-conditions/send-conditions-operator.png" alt="Condition Operators" />
</Frame>

<Warning>
  **IMPORTANT**

  If you set multiple conditions, **all** conditions must be met to disable the message.
</Warning>

<Frame caption="Multiple Conditions">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-conditions/send-conditions-double.png" alt="Multiple Conditions" />
</Frame>


# Template Approval Workflow
Source: https://www.courier.com/docs/platform/content/template-approval-workflow

Courier’s template approval workflow enables draft submissions, emits notification:submitted webhooks, and integrates with external review systems. Approved templates are published via API; drafts remain locked until resolved or canceled.

## Flow

A notification template is changed and submitted for review. Upon submission, an outbound webhook call will be made that will notify of a pending change submission. Upon receipt of the webhook event, a review and approval process can run and then publish the template via API call.

**Diagram**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/template-approval-workflow/diagram.png" alt="" />
</Frame>

## Enable Notification Checks for a Template

Checks need to be enabled for each template you want to require an approval workflow for.

1. Open the notification template
2. Click the Settings gear
3. Navigate to the Checks tab
4. Enable custom checks

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/template-approval-workflow/template-checks.png" alt="" />
</Frame>

The template's publish button will be replaced with an option to send it for review.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/template-approval-workflow/template-send-for-review.png" alt="" />
</Frame>

After a template has been sent for review, it will enter a Read Only state where no changes can be made to the latest draft. Users can cancel the submission to restore the template to a draft state and make additional changes.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/template-approval-workflow/template-read-only.png" alt="" />
</Frame>

Sending a template for review emits a webhook event with type "notification:submitted".

## Webhooks

Configure a webhook in Settings → Webhooks. This webhook will be called when a notification is submitted for a review, when it was canceled and also when a notification is published. Please note: At this point we do not have a granular way to allocate webhooks so you will receive other events (message sent events) for the webhooks you add to the Settings, so filter on the event type.

<Frame caption="Webhook Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/webhook-settings.png" alt="" />
</Frame>

<Frame caption="Edit Webhook Dialog">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/edit-webhook-dialog.png" alt="" />
</Frame>

### Event Types

```json
{
  "data": {
    "id": "<NOTIFICATION_ID>",
    "submission_id": <SUBMISSION_ID>
  },
  "type": "notification:submitted"
}
```

To see examples of other notification submission event types, review the [webhook documentation](../workspaces/outbound-webhooks).

Once you have received a notification:submitted event, you can trigger an approval workflow that runs outside of Courier. Once the workflow is complete and the template is approved to be published, see [Publishing the template](#publishing-the-template).

## Fetching Content (Optional)

When the "notification:submitted" event is received, the content can be retrieved by calling the Notification Content API. The response can be used to include additional details or template content in your approval workflow.

`GET /notifications/:notification_id/draft/content`

### Sample Template

<Frame caption="Sample Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/sample-template.png" alt="" />
</Frame>

### Sample Template Response

```json
{
  "blocks": [
    {
      "alias": "Greetings",
      "context": "This is where we greet a new user",
      "id": "block_43c114d9-9cfd-4340-808f-17e2fc7a4c87",
      "type": "text",
      "checksum": "fb60f2098fa407a4ff8d48e3e908d889",
      "content": "Hello <variable id=\"3\">{name}</variable>, Welcome to <highlight id=\"6\">Courier</highlight>!",
    },
    {
      "id": "block_f19dd58f-d32c-41b8-911c-239053d34803",
      "type": "markdown",
      "content": "Ready, <variable id=\"3\">{name}</variable>? Get started [here](http://daringfireball.net/projects/markdown/).",
      "checksum": "d06665ec3f663789db81474bc1a82fc5",
    },
    {
      "id": "block_78863d66-54f2-4032-a897-cbed3abb2538",
      "type": "quote",
      "content": "<highlight id=\"3\">Marvel</highlight> is better than DC, do you agree <variable id=\"6\">{name}</variable>?",
      "checksum": "d6e5df4e00b54703e7048cbc5276863e",
    },
    {
      "id": "block_106b5136-1bf9-4842-bff7-cbae140fd3a3",
      "type": "action",
      "content": "Share",
      "checksum": "67561c1170434dcbfd9becb827672495",
    },
    {
      "id": "block_9ec5eba6-8ab1-4938-96b0-0f6b63439619",
      "type": "list",
      "content": {
        "children": "<variable id=\"3\">{userName}</variable>",
        "parent": "<variable id=\"3\">{blogTitle}</variable> liked by"
      },
      "checksum": "a4f817cd1a363e95ce1400095937cad8",
    },
    {
      "id": "block_31500deb-de21-436f-9ae6-98f08d569148",
      "type": "template",
      "content": "\n\n<div class=\"notes\">Thanks!</div>",
      "checksum": "c1a6639e8a83a4aba68004ad1a06f124",
    }
  ],
  "channels": [
    {
      "id": "channel_f2e7b2e9-187f-40d9-9725-636d6c59833a",
      "type": "email",
      "content": {
        "subject": "New Subject"
      },
      "checksum": "96bcf212afa5cae1c7918280743aec71",
    }
  ],
  "checksum": "22d224a20345f1e3d3cf4c231243a747"
}
```

### Checksum

We md5 hash the contents for each block, channel and notification so you could track if contents have ever changed in order to manage translations workflow as needed.

## Publishing the template

Once all checks are resolved, Courier can be notified that the process is completed and release the template to be published.

`PUT /notifications/:notification_id/:submission_id/checks`

```json
{
  "checks": [
    {
      "status": "RESOLVED"
    }
  ]
}
```

If you wish to reject a request to publish a template, see [Cancel a submission](#cancel-a-submission). The check status can be set to `FAILED` or `PENDING` using PUT as well, which can be used for more complex state management in approval workflows.

### Fetching Checks

Checks API GET endpoint

`GET /notifications/:notification_id/:submission_id/checks`

Example - `GET /notifications/SFTYJKSF0241SVH2TWY97TTFFTQG/1630424150210/checks`

```json
{
	"checks":[
		{
			"id":"B5BYH93H4D4XRPJBMZJGB43TJEZ3", // check ID
			"status":"PENDING",
			"type":"custom",
			"updated":1630424150210
		}
	]
}
```

### Cancel a Submission

A request to publish a template can be cancelled by deleting the submission. This will move the template back to a draft state. Checks for the submission will also be updated to a FAILED state. Once a submission has been cancelled, setting the check to RESOLVED will not publish that submission.

`DELETE /notifications/:notification_id/:submission_id/checks`

## Submitted Keys

Submitted keys are used when you have to send a notification that was submitted for a review but maybe not ready to be published. Basically, submitted is an interim state between Draft and Published. Here's how it works -

→ If notification was published, a submitted key send operation uses published notification contents

→ If notification was submitted for review, a submitted key send operation uses latest draft notification content

Submitted keys can be retrieved, updated or deleted from the Settings → API Keys UI.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/internationalization-specification/submitted-keys.png" alt="" />
</Frame>


# Inserting Data with Variables
Source: https://www.courier.com/docs/platform/content/variables/inserting-variables

Courier lets you personalize notifications by inserting variables from data, profile, tenant, or brand objects—usable in content blocks, Handlebars, email fields, and conditional logic.

> Personalize your Courier notifications using **variables** from different data sources and insert them into various parts of a notification.

**Read More:** [JSONPath Expressions](./json-paths-variables)

## Data Sources for Substitution Variables

Courier enables you to use **variables** to insert dynamic values into your notifications from five sources:

### The Data Object

The **Data** object is an optional property of the [send](../../../reference/send/intro) command that allows you to pass arbitrary key-value pairs into your message template.

```json
{
  "customer": {
    "id": "cust_abc123",
    "name": "Acme Corporation",
    "email": "contact@acme.com",
    "plan": {
      "id": "plan_enterprise",
      "name": "Enterprise",
      "price": {
        "currency": "USD",
        "amount": 99.99,
        "interval": "month"
      },
      "features": [
        "Unlimited users",
        "Priority support",
        "Custom branding"
      ]
    }
  },
  "usage": {
    "period": {
      "start": "2024-05-01",
      "end": "2024-05-31"
    },
    "activeUsers": 250,
    "storage": {
      "used": 2048,
      "limit": 5120,
      "unit": "GB"
    },
    "apiCalls": 125000,
    "customDomains": 3
  },
  "billing": {
    "nextInvoiceDate": "2024-06-01",
    "balance": {
      "currency": "USD",
      "amount": 0
    },
    "paymentMethod": {
      "type": "CreditCard",
      "lastFour": "1234"
    }
  }
}
```

<Tip>
  **REFERENCING DATA OBJECT VARIABLES**

  Courier automatically references the `data` path by default. You do not need to include `data` in your variable path if the key-value pair is at the top level of the **Data** object. Nested values need to begin the path where the data value originates, e.g. `{first_layer.second_layer}`
</Tip>

<Warning>
  **VARIABLE NAMING CONVENTIONS**

  When using variables in your notification content, ensure that the variable names are in either *camelCase* or *snake\_case* format. Using dashes or other unsupported characters in variable names will result in a rendering error.

  * Valid variable name: `{firstName}` or `{first_name}`
  * Invalid variable name: `{first-name}`
</Warning>

### The User Profile

**User Profile** data can be sourced from two places:

* The `profile` object in the [Send API](../../../reference/send/intro) request.
* The **User Profile** associated with the recipient ID, created via the [Profiles API](../../../reference/profiles/intro).

```json
{
  "userId": "user456",
  "name": {
    "firstName": "Jane",
    "lastName": "Doe",
    "middleName": "Elizabeth"
  },
  "email": "jane.doe@example.com",
  "phone": "+1 555 9876543",
  "dateOfBirth": "1992-11-23",
  "gender": "Female",
  "address": {
    "street": "123 Main St",
    "city": "Anytown",
    "state": "CA",
    "zipCode": "12345",
    "country": "USA"
  },
  "locale": "en-US",
  "timezone": "America/Los_Angeles",
  "preferences": {
    "language": "en",
    "currency": "USD",
    "theme": "dark"
  },
  "account": {
    "createdAt": "2021-08-15T09:30:12Z",
    "plan": "basic",
    "status": "active"
  },
  "subscription": {
    "id": "sub_xyz789",
    "startDate": "2023-06-01",
    "endDate": "2024-05-31",
    "paymentMethod": {
      "type": "CreditCard",
      "lastFour": "5678"
    }
  },
  "socialProfiles": {
    "twitter": "https://twitter.com/janedoe",
    "linkedin": "https://linkedin.com/in/janedoe"
  },
  "permissions": [
    "view_reports",
    "manage_users",
    "create_projects"
  ],
  "integrations": [
    {
      "name": "GitHub",
      "enabled": true,
      "credentials": {
        "accessToken": "abc123def456"
      }
    },
    {
      "name": "Slack",
      "enabled": false
    }
  ],
  "teams": [
    {
      "id": "team_abc123",
      "name": "Marketing Team",
      "role": "member"
    },
    {
      "id": "team_def456",
      "name": "Engineering Team",
      "role": "admin"
    }
  ]
}
```

<Note>
  **PRECEDENCE OF PROFILE DATA**

  If a conflict arises between the `profile` object in the Send API request and the User Profile, the `profile` object in the Send API request takes precedence.
</Note>

**Read More:** [JSON Paths and Variables Basics](./json-paths-variables)

### Built-in Variables

Courier provides a set of predefined variables that are automatically populated with relevant data during the send process. These built-in variables can be used in your notification content and settings.

The available built-in variables include:

* `{courier.environment}`: *The environment, e.g., "production" or "test".*
* `{courier.scope}`: *The notification scope, e.g., "published" or "draft".*
* `{event}`: *The event associated with the notification.*
* `{messageId}`: *The unique identifier for the message.*
* `{openTrackingId}`: *The tracking ID for email open events.*
* `{recipient}`: *The recipient ID.*
* `{subscriptionTopicId}`: *The ID of the subscription topic, if applicable.*
* `{template}`: *The name of the template used for the notification.*
* `{unsubscribeTrackingId}`: *The tracking ID for unsubscribe events.*
* `{urls.opened}`: *The URL for tracking email opens.*
* `{urls.unsubscribe}`: *The unsubscribe URL.*
* `{urls.preferences}`: *The URL for managing the user's notification preferences.*
* `{var "datetime.year"}`: *Load the current year in your notification.*

### Tenant Object

The **Tenant** object can be referenced to insert values specific to the tenant or organization, such as the tenant name.

### Brand Object

The **Brand** object can be referenced to insert variables based on the active brand used in the notification. These variables can include brand names, colors, logos, or other branding elements.

## Using Variables in Notifications

Variables can be used to insert data into:

* Notification content across all types
* [Content Blocks](../content-blocks/content-block-basics) (Text, Action, Markdown, Quote, Template, List)
* [Handlebars code](../notification-designer/handlebars-designer) (Template blocks, Email templates, Brands)
* [Email subject line and addresses](../../sending/channel-settings) (From, To, CC, BCC)
* [Notification Conditions](../notification-settings/send-conditions) to control notification sending
* [Channel Conditions](../notification-settings/send-conditions#for-notifications-and-channels) to enable or disable specific channels
* [Filters](../notification-designer/notification-designer-overview#reusable-drag-and-drop-content) to conditionally show or hide content blocks

<Frame caption="Example of Variable Replacement in Rendered Preview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-data/data-variables-before-after.png" alt="Example of Variable Replacement in Rendered Preview" />
</Frame>

The Notification Designer supports using external data in various places, such as:

### Inserting Variables Into Content Blocks

To insert variables into Content Blocks, enclose the variable name within single curly brackets: `{variable_name}`. Properly formatted variables inside Text, Markdown, Quote, and List Blocks will be highlighted in green.

<Frame caption="Text Block With Variables">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-data/data-content-block.png" alt="Text Block With Variables" />
</Frame>

### Inserting Variables into Handlebars

To insert data into Handlebars, use double curly brackets `{{ }}` around the variable, following the same paths as in Content Blocks. However, you must include the Handlebars [`var`](../notification-designer/handlebars-helpers/#var) or [`path`](../notification-designer/handlebars-helpers/#path) helper to insert a variable from your JSON event:

* Data object: `{{var "variable_name"}}`
* Profile data: `{{var "profile.variable_name"}}`

Handlebars code is used in the Template Content Block type, Brand Templates, and the Handlebars override within Email Notifications.

### Inserting Variables into Email Fields

In addition to the Handlebars Template override, variables are supported in the `Subject` line, `From` address, `Reply-To`, `CC`, and `BCC` fields in the email [channel settings](../notification-settings/email-fields).

<Frame caption="Email Subject With Variables">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-data/data-email.png" alt="Email Subject With Variables" />
</Frame>

<Frame caption="Email Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/notification-data/data-notification-settings.png" alt="Email Channel Settings" />
</Frame>


# JSONPath Expressions
Source: https://www.courier.com/docs/platform/content/variables/json-paths-variables

JSONPath lets you dynamically access data, profile, tenant, and brand values within Courier notifications, enabling personalized content via intuitive paths like profile.name or data.orderId.

> JSON paths and variables allow you to insert data supplied in the Courier Notification Context into your notifications.

## Structure of the Courier Notification Context

The Courier Notification Context object has the following structure:

```json
{
 "data": { ... },
 "profile": { ... },
 "tenant": { ... },
 "brand": { ... }
}
```

* `data`: *An object passed to the* `send` *method*
* `profile`: *An object containing merged profile data from the* `send` *method and stored in Courier*
* `tenant`: *An object containing information about the tenant, such as the company name and other settings*
* `brand`: *An object containing branding information, such as colors, logos, and social media links*

## Accessing Data using JSONPath Expressions

To access data from the Courier Notification Context, you can use **[JSONPath](https://www.npmjs.com/package/jsonpath)** expressions. **JSONPath** is a query language that allows you to extract data from JSON objects using a simple and intuitive syntax.

Here are some examples of how to access data from the Courier Notification Context using JSONPath:

* To access a property from the **[Data](../../../reference/send/message#the-data-property)** object: `$.profile.someProp` or `data.someProp` or `someProp`. Courier will automatically query the data object for any path not prefixed with `$.data`
* To access a property from the **[Profile](../../../reference/profiles/intro)** object: `$.profile.someProp` or `profile.someProp`
* To access a property from the **[Tenant](../../../reference/tenants/intro)** object: `$.tenant.someProp` or `tenant.someProp`
* To access a property from the **[Brand](../../../reference/brands/intro)** settings object: `$.brand.someProp` or `brand.someProp`

```ts
{
  id: string;
  colors: {
    primary: string;
    secondary: string;
    tertiary: string;
  };
  inapp: {
    borderRadius: string;
    disableMessageIcon: boolean;
    placement: "top" | "bottom" | "left" | "right";
    emptyState: {
      textColor: string;
      text: string;
    };
    icons: {
      bell: string;
      message: string;
    };
  };
  email: {
    header: {
      barColor: string;
      logo: {
        href: string;
        image: string;
      };
    };
  };
  social: {
    facebook?: string;
    instagram?: string;
    linkedin?: string;
    medium?: string;
    twitter?: string;
  };
}
```


# Throw on Variable Not Found (Beta)
Source: https://www.courier.com/docs/platform/content/variables/variable-not-found

This feature prevents messages from sending if required variables are missing. It checks only rendered blocks and provides detailed error visibility in previews, logs, and observability integrations.

<Note>
  **NOTE**

  Throw on Variable Not Found is currently in Public Beta.
</Note>

Throw on Variable Not Found is a feature that can be toggled within a notification template Settings page under the Advanced section. When turning this feature on, Courier will prevent any channel from sending a message where variables were not fulfilled. For example, if you have a block of text on your email template that says `Hello {profile.first_name},` but the Courier profile doesn't have first\_name and first\_name wasn't provided in the Send API call, then we will throw an error while rendering this email template.

The feature is available when rendering a Preview Test event and visible within Message Log render events

**Preview**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/content/variables/variable-not-found-on-preview.png" alt="Screenshot of Variable Not Found on Preview" />
</Frame>

**Logs**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/content/variables/variable-not-found-on-logs.png" alt="Screenshot of Variable Not Found on Logs" />
</Frame>

## Conditional Blocks and Conditional Text

This feature runs its check after all conditionals have been evaluated and only checks the final blocks that will be sent to the provider. For example,

1. Put a conditional on profile.first\_name for a text block
2. Use `{profile.first_name}` within that block
3. Courier renders the template, but doesn't render that block because it fails the condition
4. Throw on Variable Not Found will not invoke, and the render will succeed and send

**Example**

<Frame caption="Screenshot of a Conditional Block">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/content/variables/hide-conditional.png" alt="Screenshot of a Conditional Block" />
</Frame>

The screenshot above is a conditional on the visible text block. If profile.first\_name does not exist, the text block will not display. Throw on Variable Not Found will not affect this message.

## Multiple channels

If you are sending to multiple channels and each provider has different variables, only the channel that fails the check will fail to send. For example, if using `{profile.first_name}` in an email template but not in a Courier Inbox template, then Email will fail to render and send if I do not have a profile.first\_name, but the Inbox will render and send it successfully.

## Observability

Like other provider errors, these render errors will appear in [Outbound Webhooks](../../workspaces/outbound-webhooks) and our [Observability](../../../external-integrations/observability/intro) integrations under any channel updates.


# Installing the Inbox Provider
Source: https://www.courier.com/docs/platform/inbox/authentication

Install the Courier Inbox Provider to enable in-app messaging. Use clientKey and userId or secure with JWTs. JWTs support scopes and expiration, recommended over deprecated HMAC authentication.

Once you've installed the Provider, you'll notice some authentication options that allow you to secure the notification data that is delivered to the client SDKs.

## Default Authentication (No Auth)

By default, you can use the Web Inbox SDK components without authentication beyond your `clientKey` and `userId`. Before going to production, you should implement stricter authentication using JWT tokens.

When initializing the mobile SDKs (iOS and Android) you must supply an `accessToken` in addition to the `clientKey` and `userId`. Please review the authentication docs for [iOS](https://github.com/trycourier/courier-ios/blob/master/Docs/Authentication.md) and [Android](https://github.com/trycourier/courier-android/blob/master/Docs/Authentication.md) for more information about how set the accessToken both for development and production.

## JSON Web Tokens Authentication

When getting ready for production, we recommend implementing authentication in the form of a [JWT](https://jwt.io/).  You can use our [Issue Token API](https://www.courier.com/docs/reference/auth/issue-token/) to make things easier.  A JWT should be generated on a per-user basis in your backend and be supplied to your frontend.

An example payload for an issue-token would look like:

```json
{
  "scope": "user_id:{{userId}} inbox:read:messages inbox:write:events"
}
```

### JWT Expiration

You can also set an expiration date for the JWT by providing the following scope:

```json
{
  "scope": "user_id:{{userId}} inbox:read:messages inbox:write:events",
  "expires_in": "2 days"
}
```

The result of this API will look like:

```json
{
  "token": "MY_JWT_TOKEN"
}
```

This token will then be passed into the client components and serve as your per-user authentication.

## HMAC Authentication (Deprecated)

We recommend JWT over HMAC as JWT allows developers to set more specific scopes.

HMAC is a way to add extra security to your application, more so than just having approved domains and a client key. HMAC allows you to generate a signature for each user you have in your system. It is a hash of the `userId` and your API Key.

```ts
import crypto from "crypto";

const userSignature =
  crypto
    .createHmac("sha256", apiKey)
    .update(userId)
    .digest("hex");
```

<Warning>
  **CAUTION**

  Make sure you DO NOT do this on your frontend because your API Key is private and you do not want to leak it. This HMAC should be generated on the backend and either embedded in your frontend via SSR or can be returned with an API endpoint (for each user).
</Warning>


# Using a Notification Template
Source: https://www.courier.com/docs/platform/inbox/designer

Courier allows sending notifications via templates by referencing a Template or Event ID. Enable Inbox channel and data mapping to customize and pass variables dynamically using the Send API.

You can create  notification templates using the [Designer](https://app.courier.com/designer). After you create a template (or edit an existing one), add a new channel and select "Inbox". This will provide you with a blank template that you can use to customize the content that will delivered with that notification.

<Note>
  **INFO**

  Note: pinning is not available in the mobile (iOS and Android) SDKs.
</Note>

When calling the API, simply replace the `content` field with a `template` field that defines either a Template ID or an Event ID.

```json
{
	"message": {
		"to": {
			"user_id": "<USER_ID>"
		},
		"template": "<TEMPLATE_ID or EVENT_ID>",
		"data": {
			"villain": "Darth Vader"
		}
		"routing": {
			"method": "single",
			"channels": ["inbox"]
		}
	}
}
```

## Data Mapping

Information in `data` will be passed through, but requires "data mapping" inside of the template's channel settings to pass through to the SDK. You can toggle data mapping on in the Inbox channel settings.

<Frame caption="Data mapping enabled">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/platform/channels/data-mapping.png" />
</Frame>


# Inbox Push Notifications
Source: https://www.courier.com/docs/platform/inbox/intro

Courier Inbox offers a unified notification system for web, iOS, and Android, supporting real-time delivery, synced events across channels, unread tracking, custom views, and full user preference control.

<Frame caption="Centralized Notification System for iOS, Web, and Android">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/inbox/assets/inbox-all-sdks.png" alt="Centralized Notification System for iOS, Web and Android" />
</Frame>

Inbox is available for web, iOS and Android applications and is fully customizable, so you can tailor the look and feel to match your app's branding and style.

You can configure Inbox to work alongside other messaging channels that you use, including email, SMS, push notifications and more. For example, if you send a notification to both the `inbox` and `email` channels and the user opens the email, their Inbox notification will be marked as read.

Inbox supports common mobile use cases. For example, if you send a notification to both the `inbox` and `push` channels your mobile users will receive an inbox message and a push notification.

## Key Inbox Features

Inbox includes a number of key features, such as:

* Sending notifications using a single, simple REST API.
* Supporting web, iOS and Android apps.
* Delivering notifications in realtime over our websocket infrastructure.
* Providing unread notification counts.
* Synchronized message events between Inbox and other delivery channels.
* Triggering events when notifications are delivered/opened and when users mark notifications as read.
* Filtering messages into separate views
* Built in user preferences

### Live Inbox Demo

Check out a live demo of Inbox for Web at: [reactinappnotification.com](https://reactinappnotification.com).

### Email and Inbox Event Sync

By default, Email and Inbox channels that make up the same notification template will have synced [event statuses](../logging/message-logs/#inbox-and-channel-sync). This means that if a notification was sent with an in-app `inbox` and `email` channels, `opening` the email will mark the in-app inbox notification as `read`. Users can opt out of this feature by toggling the `Opt out of inbox sync` toggle from the [Courier Inbox integration](https://app.courier.com/integrations/catalog/courier). Toggling this will mark email and inbox events separately and not dependent on an email being opened.

<Frame caption="Centralized Notification System for iOS, Web, and Android">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/inbox/assets/inbox-sync-toggle.png" alt="Inbox Toggle Sync" />
</Frame>

## Legacy Courier Push Provider

* There is no plan to sunset the legacy Courier Push provider, but feature development has stopped.
* New features will only be built into the Courier Inbox provider.
* Customers who had the Courier Push provider configured prior to the launch of the Inbox channel will see both Push and Inbox providers.
* Customers can have a mix of Inbox and Push providers in their workspace without any problems.
* We encourage customers to build new notifications using the Courier Inbox provider moving forward.


# Android SDK
Source: https://www.courier.com/docs/platform/inbox/mobile/android-sdk

Use Courier’s Android SDK to send, display, and manage in-app notifications in Android apps. Visit https://github.com/trycourier/courier-android for full setup instructions and examples.

<Frame caption="Inbox for Android">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/inbox/assets/courier-android-sdk-hero.png" alt="Inbox for Android" />
</Frame>

Please visit the Github repo for the Courier Android SDK for detailed documentation and examples:

[https://github.com/trycourier/courier-android](https://github.com/trycourier/courier-android)


# iOS SDK
Source: https://www.courier.com/docs/platform/inbox/mobile/ios-sdk

Implement the Courier Inbox iOS SDK to seamlessly send and manage in-app notifications in your iOS apps. Learn about setup, customization, and notification delivery for iOS devices.

<Frame caption="Inbox for iOS">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/inbox/assets/courier-ios-sdk-hero.png" alt="Inbox for iOS" />
</Frame>

Please visit the Github repo for the Courier iOS SDK for detailed documentation and examples:

[https://github.com/trycourier/courier-ios](https://github.com/trycourier/courier-ios)


# Sending a Courier Inbox Message
Source: https://www.courier.com/docs/platform/inbox/sending-a-message

Send Courier Inbox messages using the standard Send API, specifying inbox as the channel. Include dynamic data, deep links, and use Elemental syntax for cross-platform message formatting.

```json
{
	"message": {
		"to": {
			"user_id": <USER_ID>
		},
		"content": {
			"title": "How does {{ villain }} like his toast?",
			"body": "On the dark side."
		},
		"data": {
			"villain": "Darth Vader"
		}
		"routing": {
			"method": "single",
			"channels": ["inbox"]
		}
	}
}
```

## Passing Data for an Inbox Request

If you provide information in the `data` field, it will be passed automatically through to the SDK.

<Tip>
  **TIP**

  If you pass information in `data` that isn't referenced in your `content` payload or in a `template` that you specify, it will still be passed through to your app. For example, this is useful when trying to launch a specific screen in your app on mobile with a deep link:
</Tip>

`data.deeplinkUrl = https://starwars.com/villains/darth_maul`

## Using Courier Elemental Syntax

Inbox SDKs support a subset of [Elemental](../content/elemental/intro) syntax for composing inline messages.

| Element | Web                                           | iOS                                           | Android                                       |
| :------ | :-------------------------------------------- | :-------------------------------------------- | :-------------------------------------------- |
| Title   | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Body    | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |
| Text    | <Icon icon="square-check" iconType="solid" /> |                                               |                                               |
| Action  | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> | <Icon icon="square-check" iconType="solid" /> |


# Inbox Views
Source: https://www.courier.com/docs/platform/inbox/views

Courier Inbox supports filtered views like read/unread, archived, preferences, and tag-based categories using React, Components, or GraphQL APIs—ideal for building customized message filtering experiences.

Read, Unread, and tagged messages are all examples of different views you can use in the inbox. There is support for the inbox views in Courier's GraphQL Client, React-hooks and Components. Views are not yet supported in our Mobile SDKs natively in our mobile SDKs, but are available through CourierClient. If you need help implementing them, do not hesitate to reach out and we can help guide you through the APIs and interacting with the Client to create your own views.

## Notifications (Default)

By default, the Courier inbox provides all messages via its API's sorted by time received. Both read and unread statuses are retrieved, but archived messages are filtered out. Pinned messages are returned and displayed at the top and in the APIs will be a separate object (messages key vs pinned key).

## Unread / Read Views

Having an unread view may be the experience you'd like to present to your end users. You can configure the Inbox with these views when implementing it in your front-end.

**React Inbox**

```js
<Inbox
  views={[
      {id: "unread", label: "Unread", params: {status: "unread"}},
      {id: "read", label: "Read", params: {status: "read"}}
  ]}
/>
```

**Components Inbox**

```js
window.courierConfig = {
  components: {
      inbox: {
          views: [
              {id: "unread", label: "Unread", params: {status: "unread"}},
              {id: "read", label: "Read", params: {status: "read"}}
          ]
      }
  }
}
```

## Archived Messages

You retrieve and display messages that a user as archived by exposing the Archive view.

**React Inbox**

```js
<Inbox
  views={[
      {id: "notifications", label: "Messages"}},
      {id: "archived", label: "Archived", params: {archived: true}}
  ]}
/>
```

**Components Inbox**

```js
window.courierConfig = {
  components: {
      inbox: {
          views: [
              {id: "notifications", label: "Messages"}},
              {id: "archived", label: "Archived", params: {archived: true}}
          ]
      }
  }
}
```

## Inbox Preferences

You can allow a user to see and change their user preferences by adding the preference view.

**React Inbox**

```js
<Inbox
  views={[
      {id: "notifications", label: "Messages"},
      {id: "preferences", label: "Preferences"}
  ]}
/>
```

**Components Inbox**

```js
window.courierConfig = {
  components: {
      inbox: {
          views: [
              {id: "notifications", label: "Messages"},
              {id: "preferences", label: "Preferences"}
          ]
      }
  }
}
```

## Custom Filtered Views

You can create filtered views for the inbox by specifying which tags you would like to filter on. By using `metadata.tags` in the [Send API](../../reference/send/message), inbox messages will be tagged with the same information and can be retrieved and displayed as a view. Tags accepts and array and a view can be filtered by a multiple types.

```json
{
  "message": {
    "template": "JFGC0K5X554AWXM38JPFFXBNFRDW",
    "profile": {
      "user_id": "claude"
    },
    "data": {
      "refund_amount": "$12.34"
    },
    "metadata": {
      "tags": ["refund"]
    }
  }
}
```

**React Inbox**

```js
<Inbox
  views={[
      {id: "notifications", label: "Messages"}},
      {id: "refunds", label: "Refund", params: {tags: ['refund']}},
      {id: "orders", label: "Orders", params: {tags: ['order']}},
      {id: "transactions", label: "All Transactions", params: {tags: ['refund', 'order']}},
      {id: "sales", label: "Sales", params: {tags: ['sales']}}
  ]}
/>
```

```js
window.courierConfig = {
  components: {
      inbox: {
              {id: "notifications", label: "Messages"}},
              {id: "refunds", label: "Refund", params: {tags: ['refund']}},
              {id: "orders", label: "Orders", params: {tags: ['order']}},
              {id: "transactions", label: "All Transactions", params: {tags: ['refund', 'order']}},
              {id: "sales", label: "Sales", params: {tags: ['sales']}}
          ]
      }
  }
}
```

### Inbox Hooks, window\.fetchMessages() and GraphQL for custom filtered views

If you are building your own user interface with our APIs, we support custom views in there as well. Here are a few examples.

**@trycourier/client-graphql**

```js
import { Inbox } from "@trycourier/client-graphql"
inboxApi = Inbox({
  clientKey: "abc123",
  userId: "me123"
});
const messageCount = await inboxApi.getInboxMessages({
  tags?: ['order', 'refund'],
});
```

**Components APIs**

```js
window.courier.inbox.fetchMessages({ params:{tags: ['order','refund']}})
console.log(window.courier.inbox.messages)
```

**Hooks example**

```mdx
const MessageList = () => {
    let {fetchMessages, messages} = useInbox()

    let handleClick = ()  => {
        fetchMessages({ params:{tags: ['order','refund']}})
    }

return <div >
    <button onClick={handleClick}>get transaction messages</button>
        <ul>
            {messages.map(m=><li key={m.id}>{m.title}</li>)}
        </ul>
    </div>
}
```

### Custom Tags, Bookmarks, Saved Messages

Courier Inbox allows you to add then remove tags that weren't part of the `metadata.tags` which is useful for building a custom "Save Message" or "Bookmark" feature. You can add and remove tags then use the same filtering logic as above to filter the inbox by a tag.

**Hooks Example**

```tsx
const {addTag, removeTag, fetchMessages} = useInbox()

const saveTag = (message_id: string, tag: string) => {
    addTag(message_i, 'save')
}

const unsaveTag = (message_id: string, tag: string) => {
    removeTag(message_i, 'save')
}

const toggleSave = (message: IInboxMessagePreview) => {
    const save_tag = 'save'
    if (message.tags?.includes(save_tag))
        removeTag(message.id, save_tag)
    } else {
        addTag(message.id, save_tag)
    }
}

fetchMessages({ params:{tags: ['save']}})
```

### Adding View to the template designer

<Info>
  **NOTE**

  This is under a feature flag currently, please reach out to Courier support or your account team to turn on.
</Info>

While designing a template, you may want to select which view you would like this appear in an inbox. You can enter a comma separated list of tags and those will automatically be put into the `metadata.tags` field when sending to the user. This allows them to be filtered in a view on the inbox using one of those tags.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/inbox/assets/designer-settings-message-tags.png" alt="Template Designer Settings to Add Tags" />

  ![Template Designer Settings to Add Tags](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/inbox/assets/designer-settings-message-tags.png)
</Frame>


# JavaScript Web SDK
Source: https://www.courier.com/docs/platform/inbox/web/javascript-sdk

Embed <courier-inbox> and <courier-toast> in non-React apps using Courier’s JS SDK. Initialize with clientKey and userId via window.courierConfig. Include the appropriate script version.

For non-React apps, we have a set of custom elements that you can embed in your web app.

## Initialization

If you have all the necessary information to initialize the SDK when the page renders (`clientKey`, `userId`, etc) you can initialize the SDK like this:

```html
<body>
  <section>
    <h1>Hello World</h1>
    <courier-toast></courier-toast>
    <courier-inbox></courier-inbox>
  </section>
  <script type="text/javascript">
    window.courierConfig = {
      clientKey: "{{CLIENT_KEY}}",
      userId: "{{USER_ID}}",
    };
  </script>
  <!-- Be sure to use the appropriate version -->
  <script src="https://courier-components-xvdza5.s3.amazonaws.com/v{{CURRENT_VERSION}}.js"></script>
</body>
```

Github Docs: [Courier Inbox JS SDK](https://github.com/trycourier/courier-react/tree/main/packages/components)


# Inbox for React.js Web SDK
Source: https://www.courier.com/docs/platform/inbox/web/react-sdk

Install @trycourier/react-provider to enable Inbox and Toast components. Wrap your app in CourierProvider, use JWT for auth, and leverage hooks like useInbox for full customization.

## Installation

In your React.js project, install the following dependency:

```bash
yarn add @trycourier/react-provider
```

or

```bash
npm i @trycourier/react-provider
```

The `react-provider` component is required in order to use other components like `react-inbox` and `react-toast` and is responsible for authentication, API calls and state management.

You can initialize the `react-provider` in your app like this:

```jsx
import { CourierProvider } from "@trycourier/react-provider";

function App() {
  return (
    <CourierProvider
      userId={<userId>}
      clientKey={<clientKey>}>
    </CourierProvider>
  );
}
```

<Note>
  **INFO**

  Courier React components utilize specific endpoint URLs that may require inclusion in the site's **Content Security Policy (CSP)** records.

  **courier-react \< v5.0.0**

  * `https://fxw3r7gdm9.execute-api.us-east-1.amazonaws.com`
  * `wss://1x60p1o3h8.execute-api.us-east-1.amazonaws.com`

  \*\*courier-react v5.0.0 + \*\*

  * `https://inbox.courier.com`
  * `wss://realtime.courier.com`
</Note>

## Authentication

There are two methods for handling authentication: JWT and HMAC. JWT is our recommended method, HMAC is being deprecated.

### JWT Auth Enabled

```jsx
import { useState, useEffect } from "react";
import { CourierProvider } from "@trycourier/react-provider";

function App() {
  const [authentication, setAuthentication] = useState();

  useEffect(() => {
    const response = await fetchJWTAuthTokenFromYourBackend(<userId>);
    setAuthentication(response);
  }, []);

  return (
    <CourierProvider
      userId={<userId>}
      authentication={authentication}>
    </CourierProvider>
  );
}
```

### HMAC Auth Enabled

```jsx
import { useState, useEffect } from "react";
import { CourierProvider } from "@trycourier/react-provider";

function App() {
  const [userSignature, setUserSignature] = useState();

  useEffect(() => {
    const response = await fetchHMACUserSignatureFromYourBackend(<userId>);
    setUserSignature(response);
  }, []);

  return (
    <CourierProvider
      clientKey={process.env.CLIENT_KEY}
      userId={<userId>}
      userSignature={userSignature}>
    </CourierProvider>
  );
}
```

## Inbox Component

The `<Inbox>` React component displays list of recent notifications that the user has received.

```bash
yarn add @trycourier/react-inbox
```

or

```bash
npm i @trycourier/react-inbox
```

In order to use `<Inbox>` you need to ensure that it is included in the component tree below where you have defined the `<CourierProvider>` ([read more about React Context](https://react.dev/learn/passing-data-deeply-with-context)). Here's a simple example:

```jsx
import { CourierProvider } from "@trycourier/react-provider";
import { Inbox } from "@trycourier/react-inbox";

function App() {
  return (
    <CourierProvider userId={<userId>} clientKey={<clientKey>}>
      <Inbox/>
    </CourierProvider>
  );
}
```

### Events

Each message in the inbox supports the following events:

* When the Inbox is opened and a message is in view, an `opened` event will fire for that message. The `opened` event will only fire once per message.
* Messages can be marked as `read` and `unread` by the user, which will fire the corresponding events.
* Messages can be marked as `archived` by the user, which will fire the corresponding event. Archived messages will not be returned when fetching messages from the API.
* If "Click Tracking" is enabled, clicking a message that has an action will created a `clicked` event and also mark the message as `read`.

Github Docs: [@trycourier/react-inbox](https://github.com/trycourier/courier-react/tree/main/packages/react-inbox)

## Toast Component

The `<Toast>` component displays a toast message when a new message has been received.

```bash
yarn add @trycourier/react-toast
```

or

```bash
npm i @trycourier/react-toast
```

```jsx
import { CourierProvider } from "@trycourier/react-provider";
import { Toast } from "@trycourier/react-toast";

function App() {
  return (
    <CourierProvider userId={<userId>} clientKey={<clientKey>}>
      <Toast/>
    </CourierProvider>
  );
}
```

Github Docs: [@trycourier/react-toast](https://github.com/trycourier/courier-react/tree/main/packages/react-toast)

## React Hooks

React Hooks (`useInbox`, `useToast`, `useCourier`) exist as a separate package so that you can build your own interface using our api and state management without having to install all the dependencies that `@trycourier/react-inbox` or other react-dom based packages include.

This also enables using this package with react-native in a much simpler way.

### useInbox

```jsx
import { CourierProvider } from "@trycourier/react-provider";
import { useInbox } from "@trycourier/react-hooks";

const MyInbox = () => {
  const inbox = useInbox();

  useEffect(() => {
    inbox.fetchMessages();
  }, []);

  const handleReadMessage = (message) => (event) => {
    event.preventDefault();
    inbox.markMessageRead(
      message.messageId,
      message.trackingIds.readTrackingId
    );
  };

  const handleUnreadMessage = (message) => (event) => {
    event.preventDefault();
    inbox.markMessageUnread(message.messageId);
  };

  const handleArchiveMessage = (message) => (event) => {
    event.preventDefault();
    inbox.markMessageArchived(message.messageId);
  };

  return (
    <Container>
      {inbox.messages.map((message) => {
        return (
          <Message>
            {message.read ? (
              <>
                <button onClick={handleUnreadMessage(message)}>
                  Unread Me
                </button>
                <button onClick={handleArchiveMessage(message)}>
                  Archive Me
                </button>
              </>
            ) : (
              <button onClick={handleReadMessage(message)}>Read Me</button>
            )}
          </Message>
        );
      })}
    </Container>
  );
};

const MyApp = () => {
  return (
    <CourierProvider userId={<userId>} clientKey={<clientKey>}>
      <MyInbox />
    </CourierProvider>
  );
};
```

Github Docs: [@trycourier/react-hooks](https://github.com/trycourier/courier-react/tree/main/packages/react-hooks)

### useToast

If you do not want to use Courier to trigger a toast notification then you can always invoke the toast locally with the useToast hook. Below is an example creating a notification from the client rather than creating it from a transport. Do not forget to wrap this component with a CourierProvider somewhere up the component hierarchy chain.

```jsx
import { CourierProvider } from "@trycourier/react-provider";
import { Toast, useToast } from "@trycourier/react-toast";

const MyComponent = () => {
  // We can access this because the parent is a `CourierProvider`
  const [toast] = useToast();

  return (
    <button onClick={() => toast("You just made a notification 🎉")}></button>
  );
};

const App = () => {
  return (
    <CourierProvider userId={<userId>} clientKey={<clientKey>}>
      <Toast />
      <MyComponent />
    </CourierProvider>
  );
};
```

Github Docs: [@trycourier/react-toast](https://github.com/trycourier/courier-react/tree/main/packages/react-toast)


# Analytics
Source: https://www.courier.com/docs/platform/logging/analytics

Courier’s Analytics (Business-tier) provides template-level insights—tracking send volume, delivery rates, opens, clicks, and errors—filtered by channel, provider, and date range, with special handling for SendGrid delivery events.

<Note>
  **INFO**

  This feature is available to [Business-tier](https://www.courier.com/pricing/) customers.
</Note>

We currently support template-level analytics that lets you gain insights on Send volume and Channel performances.

## Template Analytics (Notification metrics)

This feature gives granular statistical data points on a particular template. You can visually infer how a notification template is performing across multiple channels through a particular time range.

**Diagram**

<Frame caption="Template Analytics Page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/analytics/template-analytics.png" alt="Template Analytics Page" />
</Frame>

### Send volume

A chart visualization on how the notification send volume has evolved over time.

### Channel performance

A tabular representation of sends, delivered, opened, clicked and errors - for each channel and provider. This can help determine the ideal channel and/or provider for your notification template!

### Delivered Events

Some email providers like [SendGrid](../../external-integrations/email/sendgrid) offer granularity for their API keys, and will need [further customization](https://sendgrid.com/en-us/blog/introducing-api-key-permissions) so that `delivered` events can be sent to Courier.

<Note>
  **API KEY PERMISSIONS**

  In order for Courier to receive `delivered` events from SendGrid, your [API key permissions](https://sendgrid.com/en-us/blog/introducing-api-key-permissions) need to include `email activity` and `inbound parse` so that `delivered` events can be counted in your message metrics.
</Note>


# Audit Trail
Source: https://www.courier.com/docs/platform/logging/audit-trail

Courier’s Audit Trail (for Business-tier) tracks workspace user activity like API key changes, user actions, publishing events, and outbound integration updates—accessible via UI and public APIs.

<Note>
  **INFO**

  This feature is available to [Business-tier](https://www.courier.com/pricing/) customers.
</Note>

The Audit Trail will display supported events related to workspace authentication, security, and core functionality when triggered.

## Supported Events

API Key

* API Key Created
* API Key Deleted
* API Key Rotated

User

* User Invited
* User Role Changed
* User Deleted
* User Logout

Workspace

* Workspace Name Changed
* Workspace Discoverability Updated
* Workspace Accessibility Updated
* SSO Required Enabled/Disabled
* Click-Through Tracking Enabled/Disabled

Design Assets

* Notification Published
* Notification Deleted
* Brand Published
* Brand Deleted
* Automation Template Published
* Automation Template Deleted
* Preferences Page Published
* Preferences Notification Linked/Unlinked
* Preferences Section Created/Deleted
* Preferences Section Channel Added/Removed
* Preferences Topic Created/Deleted
* Preferences Topic Default Status Changed

Outbound Integrations

* Segment Source Created/Archived/Updated/Restored
* Rudderstack Source Created/Archived/Updated/Restored

## External API support

How to’s and best practices for setting up Courier, using the Notification Designer and other features.

Audit trail functionality is accessible via our public facing APIs including all the SDKs. [Check this out for more details](https://www.courier.com/docs/reference/audit-events/).


# Custom Domain Tracking
Source: https://www.courier.com/docs/platform/logging/custom-domain-tracking

Business-tier Courier customers can use a custom tracking domain instead of ct0.app. Setup involves DNS configuration and coordination with Courier Support for certificate validation and domain activation.

<Note>
  **INFO**

  This feature is available to [Business-tier](https://www.courier.com/pricing/) customers.
</Note>

By default, Courier uses `ct0.app` for link tracking. Customers can opt for custom tracking domain (ex: tracking.mywebsite.com) if interested!

## Setting up custom tracking

While we are planning on making this a self-served process soon, at the moment it requires you working with Courier Support.

### Provide us the tracking URL

This would typically be something like `tracking.mywebsite.com`

### Modifying DNS entries

This step requires adding 2 new DNS records on your end.

a. First one is for cert validation. Based on your tracking URL, Courier will create a certificate and ask you to confirm/validate.
This cert is required so our infrastructure allows requests redirected from you during tracking resolution. Work with Courier support staff to get this added.

b. Second one is adding `tracking.mywebsite.com` CNAME `tracking.ct0.app`

### Go live

After updating the DNS records, work with Courier support who will enable this feature for you. Once enabled, all links would be routed through your tracking domain.


# Logging
Source: https://www.courier.com/docs/platform/logging/intro

Courier offers robust tools for debugging and analytics, including message logs, automation logs, event timelines, and error tracking to help developers monitor, troubleshoot, and optimize notification delivery across channels.



# Message Logs
Source: https://www.courier.com/docs/platform/logging/message-logs

Courier Message Logs track each message’s status—Queued, Sent, Delivered, Opened, Clicked—with filtering by status, provider, recipient, and timeline events. Includes inbox sync, automation logs, and error insights.

> A guide to the Courier data logs and how to navigate the information they provide about messages, automation, recipients and lists.

<Frame caption="Courier Message Logs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/data-logs/logs-navbar.png" alt="Courier Message Logs" />
</Frame>

## Using the Message Logs

The Courier Message Logs provide a timeline and insights into the status of your notifications, recipients, lists and automations. Each step in the Send status has a visual representation.

### Your Notification Data at a Glance

The message logs convey a great deal of information in the summary view:

* The `Status` of each message send request
* The `Notification` and `Recipient` of associate with each `Send` status
* The `Provider` channels for the notification

### Send Status Key and Definitions

| Status        | Email                                                                                                                                                                               | Push (iOS, Android, Courier Inbox)                                                                                                                                                                                                   | SMS                                                                                                                                                         | Chat                                                                                                                                                        |
| ------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Queued**    | Courier has received a properly formatted and valid Send API request and is attempting to Send the Notification.                                                                    | Courier has received a properly formatted and valid Send API request and is attempting to Send the Notification.                                                                                                                     | Courier has received a properly formatted and valid Send API request and is attempting to Send the Notification.                                            | Courier has received a properly formatted and valid Send API request and is attempting to Send the Notification.                                            |
| **Sent**      | Courier sent the request to the downstream provider. A `200` response will be given by Courier but could return `undeliverable` if the provider rejects it.                         | Courier sent the request to the downstream provider. A `200` response will be given by Courier but could return `undeliverable` if the provider rejects it.                                                                          | Courier sent the request to the downstream provider. A `200` response will be given by Courier but could return `undeliverable` if the provider rejects it. | Courier sent the request to the downstream provider. A `200` response will be given by Courier but could return `undeliverable` if the provider rejects it. |
| **Delivered** | Channel providers allow Courier to confirm that the message was accepted (in the case of Email, this means it hit their inbox). Webhooks are available for status delivery updates. | The Push provider has confirmed delivery. <br /><br /> For **Courier Inbox**, a message is marked as Delivered if the user was online at send-time and received a toast pop-up message.                                              | Courier has received a delivered response from the downstream provider. **Not all SMS providers return a `delivered` status**                               | The Chat provider has confirmed delivery.                                                                                                                   |
| **Opened**    | If open tracking is enabled, the request was delivered and opened by the recipient.                                                                                                 | Push notifications are marked as `delivered` when the push message reaches the device.                                                                                                                                               | n/a                                                                                                                                                         | n/a                                                                                                                                                         |
| **Clicked**   | If link tracking is enabled for your workspace, Courier will change the status to `clicked` when a recipient clicks on links sent in the notification.                              | If link tracking is enabled for your workspace, Courier will change the status to `clicked` when a recipient clicks on links sent in the notification. For Inbox, the notification is marked `clicked` if a user clicks the message. | n/a                                                                                                                                                         | If link tracking is enabled for your workspace, Courier will change the status to `clicked` when a recipient clicks on links sent in the notification.      |

### Inbox and Channel Sync

Notification event states are synchronized between the [inbox](../inbox/intro/) and other channels within a notification template. For example, if a notification was sent with an in-app `inbox` and `email` channels, `opening` the email will mark the in-app inbox notification as `read`.

<Note>
  This flow only works one way. Reading an inbox message will not mark an email as `opened`.
</Note>

### Other Message Statuses

* **Canceled:** The message delivery was canceled.
* **Undeliverable:** The channel provider did not accept the send request from Courier.
* **Unmapped:** the Notification ID does not exist or the Event ID included in the send command is not mapped to a Notification.
* **Has Errors:** indicates that the timeline in the Send detail view includes an error response.
* **Throttled:** Notifications are being throttled either because there are [send limits](../sending/guardrails) in effect, or your workspace has reached its free quota.
* **Simulated:** Notifications are being sent with a [mock key](../content/notification-designer/environments-api-keys) and are simulating the message lifecycle without sending to the downstream provider.

### Histogram

The logs histogram gives Courier users insights and breaks down delivery metrics for specific days and groups events in color-coordinated graphs.

<Frame caption="Logs Histogram">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/data-logs/logs-histogram.png" alt="Detailed View" />
</Frame>

Users can drag-select within the histogram to bring up a detailed custom date view.

<Frame caption="Drag Select View">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/data-logs/logs-histogram.gif" alt="Detailed View" />
</Frame>

### Notification Log Detail View

To view the details of a Notification Send, click the Notification in the list view to open the Log details.

<Frame caption="Detailed View">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/data-logs/logs-detailed.png" alt="Detailed View" />
</Frame>

### Send Detail View

When you click a Notification to open the Log Detail view you will see a Summary and Timeline.

* **Summary -** See details like the Message and Recipient IDs, as well as Date and time stamps for Send stages (Enqueued, Sent, First Delivery, Status, etc.).
* **Timeline -** Detailed timeline of every step in the timeline. The timeline can be scrolled and events in the timeline can be clicked to open additional details.

### Timeline Event View

If you want to see the details of any event in the timeline, click it to open. As an example, you can click into the `Error Encountered` tab in the timeline to review the error message.

<Frame caption="Error Tab">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/data-logs/logs-error.png" alt="Error Tab" />
</Frame>

### Filtering your Message Logs

The message log includes a filter to search and narrow your notification logs by send `Status`, `Errors`, or to inspect the results of specific `Providers`, `Notifications`, or `Recipient`.

### Date, Recipient and Notification Filters

* The Log date filter allows you to filter to see notifications send on specific dates (see the [pricing page](https://www.courier.com/pricing/) for details on log retention timeframes).
* Filter by Email or Recipient ID
* Filter by a specific Notification or search them all.

### Notification Status Filter

You can filter your Notification Logs by selecting one or more Status types: Queued, Sent, Delivered, Opened, Clicked, Undeliverable or Unmapped.

<Note>
  **INFO**

  Unmapped means that an Event was posted to our Send API with an `eventId` that does not [map to a notification](https://help.courier.com/en/articles/4189555-send-basics-how-notifications-are-triggered-and-sent-with-courier) or an invalid notification ID.
</Note>

### Error Status Filter

You can also identify notifications with any status that also have errors.

### Provider Filter

You can review the logs of any combination of your integrated providers by selecting them in the `Provider` filter.

## Automation Logs

The [Automation](../automations/intro) logs provide detailed insights into the status of an automation run as well as step details.

### Automation Run List

<Frame caption="Automation Logs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/data-logs/logs-automation.png" alt="Automation Logs" />
</Frame>

Clicking into one of the automation in log opens the run summary, providing details on each of the steps in the automation.

<Frame caption="Automation Run Summary">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/data-logs/logs-detailed-automation.png" alt="Automation Run Summary" />
</Frame>


# Get Rendered Notification Content
Source: https://www.courier.com/docs/platform/logging/rendered-content

Use Courier’s Messages API to retrieve rendered content of sent notifications. First, fetch message history, then retrieve the rendered output using the provided root-relative URL from the response.

> The Courier [Messages API](../../reference/logs/output-by-id) lets you get the rendered output of any Courier notification in your send history using the "Get Message Content" endpoint.

To fetch the content for a given message there are two API calls that you need to make

1. Fetch message history using GET /messages/:message\_id/history and the message ID that was returned in response to your send command.

2. Fetch message content using a  root-relative URL

## Fetch Message History

Message history can be fetched by calling the history [endpoint](../../reference/logs/history-by-id) or by calling the getMessageHistory function in our SDKs.

Message history will contain a `RENDERED` event that contains links to the rendered output for the message.

<Frame caption="Example of a Rendered Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/message-rendered/rendered-sample.png" alt="Example of a Rendered Event" />
</Frame>

## Fetch Message Content

The output section in the history response contains the root-relative URL that can be used to fetch the content that was rendered and sent to the provider. The output url must be appended to the Courier API host ([https://api.courier.com](https://api.courier.com)).

Here is an example of a rendered push event:

<Frame caption="Example of a Rendered Push Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/message-rendered/rendered-content.png" alt="Example of a Rendered Push Event" />
</Frame>

## Rendered Content for Emails

`HTML` content is returned with a `content-type` of text/html  and the response is raw HTML:

```json
content-type: text/html
content-length: 32015
date: Tue, 26 Oct 2021 17:10:10 GMT
x-amzn-requestid: e9d54717-3cb0-4f1e-a47a-b64317738596
access-control-allow-origin: *
strict-transport-security: max-age=31536000;includeSubDomains;preload
x-amz-apigw-id: H01x2GapIAMFgnA=
x-content-type-options: nosniff
x-amzn-trace-id: Root=1-61783672-23906a806f14d99d7d10ee9e
access-control-allow-credentials: true
x-cache: Miss from cloudfront
via: 1.1 55429f2d64d86ac51a104a1c84030e14.cloudfront.net (CloudFront)
x-amz-cf-pop: SFO5-C1
x-amz-cf-id: TOmwTJ_vtG_PZ5EIxf0nSqJ9wz7YBcg0j0uRsMFqghDd0eY5-jB7jw==
```

The sample response:

<Frame caption="Example of an Email Response">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/message-rendered/rendered-response.png" alt="Example of an Email Response" />
</Frame>


# null
Source: https://www.courier.com/docs/platform/overview

Courier provides a unified platform for content creation, user targeting, preferences, automations, inboxes, and observability to build, manage, and scale personalized notifications across channels.

Our platform is designed around a small number of key concepts that make it easy to build powerful notification experiences while also being flexible enough to integrate into whatever kind of application or system you may be building.

<CardGroup>
  <Card title="Content" href="platform/content/intro" icon="page">
    Constructing the content of the notification, including the use of templates, dynamic variables
    and channel agnostic markup.
  </Card>

  <Card title="Sending" href="platform/sending/send-message" icon="paper-plane-top">
    Sending notifications, including setting limits and handling retries.
  </Card>

  <Card title="Users" href="platform/users" icon="users">
    Specifying the recipient or recipients of the notification.
  </Card>

  <Card title="Preferences" href="platform/preferences/intro" icon="list">
    Respecting user delivery preferences and drop-in user preference components.
  </Card>

  <Card title="Tenants" href="platform/tenants/intro" icon="building">
    Organize users hierarchically with flexible metadata, custom branding, and group-level preferences to manage notifications across your organization's structure.
  </Card>

  <Card title="Automations" href="platform/automations/intro" icon="arrow-progress">
    Create fully managed notification workflows and implement scheduling, batching, and throttling
    with zero lines of code.
  </Card>

  <Card title="Inbox" href="platform/inbox/intro" icon="inbox">
    Embed a modern notification inbox to your app with our web, iOS, and Android SDKs.
  </Card>

  <Card title="Workspaces" href="platform/workspaces/intro" icon="circle-check">
    Setup test and production environments, manage access control and configure the behavior of your
    apps.
  </Card>

  <Card title="Logging" href="platform/logging/intro" icon="database">
    Logging, analytics, and observability.
  </Card>
</CardGroup>


# Preference Center
Source: https://www.courier.com/docs/platform/preferences/hosted-page

The Preference Center is a customizable, Courier-hosted page where users manage notification preferences, delivery channels, and unsubscribe settings—accessible via {$.urls.preferences} in templates or footers.

> The Preference Center is a Courier-hosted page that recipients are redirected to where they can customize and set their preferred notification delivery methods.

<Frame caption="Preference Center">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-hosted-page.png" alt="Preference Center" />
</Frame>

A recipient can select to opt-in or out of a notification (depending on the subscription topic default state)
as well as select the preferred delivery channel for a notification (business-tier feature) from this page.

## Preference Center Link

When designing a notification template, users can insert a variable link `{$.urls.preferences}` to the Courier Preference Center that will provide an auto-generated url.
This link will open the hosted Preference Center where the recipient can configure their notifications preferences.

<Note>
  **USER ID**

  In order for a recipient to successfully set their preferences from a notification, you must include `to.user_id` in the [Send request](../../reference/send/message).
  This is because the `user_id` maps the recipient profile to their set preferences. If no `user_id` is present in the request, the preferences method will not register.
</Note>

### Adding Preferences Link To Notification Text

Link to the Preference Center from within a notification body by creating a link, and specify `{$.urls.preferences}` as the URL.

<Frame caption="Preferences URL">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-hyperlink.png" alt="Preferences URL" />
</Frame>

<Note>
  **NOTIFICATION PREVIEW**

  Sending a preview email from the notification template will **attach a mock URL** instead of the preference hosted page.
</Note>

### Adding Preferences Link To Brand Footer

The Preference Center link variable `{$.urls.preferences}` can also be added to directly to the brand footer.

<Frame caption="Brand Template With Preferences Hyperlink">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-brand-with-link.png" alt="Brand Template With Preferences Hyperlink" />
</Frame>

### Unsubscribe Link

In addition to the Preferences Center, an unsubscribe link can be added to unsubscribe recipients from the entire subscription topic. Use `{$.urls.unsubscribe}` to add an auto-generated unsubscribe link to your notification.

<Frame caption="Unsubscribe Hyperlink">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-unsubscribe.png" alt="Unsubscribe Hyperlink" />
</Frame>

The unsubscribe link will redirect a recipient to a Preferences page confirmation that they have been unsubscribed from the **entire notification and topic**.

<Note>
  **SINGLE SUBSCRIPTION TOPIC**

  The unsubscribe link will opt a user out of the entire notification including any channels associated to it and redirect them to a *successfully unsubscribed* confirmation page. The page will only display the subscription topic associated to that notification.
</Note>

<Frame caption="Unsubscribe Page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-unsubscribe-page.png" alt="Unsubscribe Page" />
</Frame>

## Preference Center Branding

Just like with email templates, the Preference Center can be customized with your [brand](../content/brands/brands-in-email-notifications).
The Preference Center will use the the logo and colors from your [default brand](https://app.courier.com/database/brands).

## Preview the Preference Center

To preview the Hosted Preference Page, navigate to the [Preference Editor](https://app.courier.com/settings/preferences) and click on `Preview Page`.

<Frame caption="Preview Button in Preference Editor">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-preview-page.png" alt="Preview Button in Preference Editor" />
</Frame>

## Delivery Channel Customization

If a notification template has multiple delivery channels configured, a recipient will be able to customize and set their preferred delivery channel from the Preferences Page.

<Note>
  **BUSINESS TIER FEATURE**

  Delivery Channel customization is a Courier Business feature. Please [contact](https://www.courier.com/request-demo/) our Product Experts for more details.
</Note>

Delivery channel customization allows recipients to choose their preferred delivery channel from the hosted preferences page. Recipient's custom delivery channels can be reflected as a `custom_routing` array in the response when calling the [Preferences API](../../reference/user-preferences/get-subscription-topic-preferences).

```json
{
	"topic": {
		"custom_routing": [
			"email"
		],
		"has_custom_routing": true,
		"default_status": "OPTED_IN",
		"section_id": "_ysuowndfnousd",
		"section_name": "Notifications",
		"status": "OPTED_IN",
		"topic_id": "TOPIC_ID",
		"topic_name": "Tips and Tricks"
	}
}
```

<Note>
  **CHANNEL CONDITIONS**

  Channel [disable/enable conditions](../content/notification-settings/send-conditions) in a notification template **will not** take precedence when a user has `custom_routing` channels in their preferences topic. A channel can be disabled by using [missing variable guardrails](../content/variables/variable-not-found).
</Note>

## Remove 'Powered by Courier' Watermark

[Developer and Business tier](https://www.courier.com/pricing/) customers have the option to remove the 'Powered by Courier' watermark from the Preference Center.

1. Go to the [workspace settings](https://app.courier.com/settings/general)
2. Toggle "Remove Courier branding and watermark"
3. Re-publish hosted page in [Preference Editor](https://app.courier.com/settings/preferences)


# Preferences
Source: https://www.courier.com/docs/platform/preferences/intro

Courier Preferences lets users manage which notifications they receive and through which channels via topics and sections—accessible through the Preference Center, React components, or the Preferences API.

<Tip>
  **CHANNEL DELIVERY CUSTOMIZATION**

  Channel Delivery Customization — i.e. allowing users to choose specific channels (email, push, SMS) for different topics — is only available to customers on the Business & Enterprise tier. [Request a demo](https://www.courier.com/request-demo/)
</Tip>

## How Preferences Work

Notification templates that contain similar information can be designated to **Subscription Topics**. Subscription topics that are related can be grouped into **Preference Sections**.

You can create and manage these sections and topics in the **Preferences Editor**. Once configured, you can enable users to set their communication preferences via our hosted **Preference Center**, [Preferences React Components](https://github.com/trycourier/courier-react/tree/main/packages/react-preferences), or the [User Preferences API](../../reference/user-preferences/intro).

### Subscription Topics

Subscription topics are categories of notifications that users can opt-in and out of. For example:

* *Promotions*
* *Order Status Updates*
* *Event Announcements*
* *Payment Processing*
* *Password Changes*

<Note>
  **INFO**

  A notification template can only be mapped to a single subscription topic.
</Note>

#### Subscription Topic Default State

Subscription topics are configured to have a default state of **ON**, **OFF**, or **REQUIRED**. Users can opt-in or opt-out of a subscription topic to override these default settings. A topic set as **REQUIRED** will prevent users from opting out of those notifications.

Learn more about Subscription Topics [here](./preferences-editor/#subscription-topics).

### Preference Sections

**Preference Sections** are groups of subscription topics that your users can manage their preferred communications channels with. For example:

* *Marketing*
* *Billing*
* *Sign-in and Security*

Learn more about Preference Sections [here](./preferences-editor/#preference-sections).

## Using your Preferences

Use the **Preferences Editor** to create and configure individual Subscription topics and Preference Sections.

Learn more about the Preferences Editor [here](./preferences-editor/).

### Preference Center

The **Preference Center** is a Courier-hosted page that displays **Subscription Topics** and **Preference Sections** for users to set their communication preferences.
This page can be customized in the **Preferences Editor**.
For enterprise customers, the page is styled by your default brand and displays your logo and links in the header and footer respectively.

When sending a notification that is linked to a subscription topic, user preferences are respected first before tenant preferences, notification conditions, or channel conditions.

<Note>
  **PREREQUISITE: USER ID**

  In order for a recipient to successfully set their preferences from a link within a notification, you must include `to.user_id` in the [Send request](../../reference/send/message). This is because the `user_id` ties the recipient profile to their set preferences. If no `user_id` is present in the request, the preferences method will not register.
</Note>

Learn more about the hosted Preference Center [here](./hosted-page).

### Tenants and User Preferences

Tenants and User Preferences can be used together to create preferences per user


# Preferences Editor
Source: https://www.courier.com/docs/platform/preferences/preferences-editor

Courier’s Preferences Editor lets you configure subscription topics and preference sections, set default opt-in states, enable channel-specific delivery preferences, and map notifications to topics for user-managed notification settings.

> Use the **Preferences Editor** to create and configure individual Subscription topics and Preference Sections.

<Frame caption="Preferences Editor">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-editor-zoomed-in.png" alt="Preferences Editor" />
</Frame>

## Subscription Topics

**Subscription Topics** are categories of notifications that users can opt-in and out of.
For example, welcome and onboarding notifications could be mapped to an `Onboarding` topic.

<Note>
  **INFO**

  A notification template can only be mapped to a single subscription topic.
</Note>

### Configuration

You can set topic properties like **Name**, the **Section** it will be in, and its **Default State**.

<Frame caption="Subscription Topic Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-topic-settings.png" alt="Subscription Topic Settings" />
</Frame>

### Topic Data

<Note>
  Topic Data is a feature of Advanced User Preferences and is only available for Enterprise customers. Please reach out to [support@courier.com](mailto:support@courier.com) for more information.
</Note>

For a subscription topic, you can provide arbitrary metadata to our API, which allows you to make *Custom Preferences Page*. Use cases include:

* Filter subscription topics by metadata

* Create custom logic for controlling&#x20;

* Maintaining custom topic descriptions

![](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/image.png)

### Default State

The **Default State** defines whether a topic can be opted in or out, and whether it's always required.

* `On` - Users who do not take any action will automatically receive notifications in this grouping.

* `Off` - Users will not receive these notifications unless they change their preferences.

* `Required` - Users will not be able to opt-out of these notifications.

## Preference Sections

**Preference Sections** group subscription topics together and determine which topic delivery channels users can opt in/out of.

### Delivery Channel Selection

<Note>
  **BUSINESS TIER**

  Channel Selection is a Courier Business feature. [Contact sales](https://courier.na.chilipiper.com/book/me/sahil-cochinwala) for more details.
</Note>

**Delivery Channel Selection** gives recipients the ability to select and set the preference for their preferred delivery channel from the Preferences Hosted page.

Channel selection must be enabled for the subscription topic in order for users to customize their delivery channel preferences.

<Frame caption="Preference Section Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-channel-settings.png" alt="Preference Section Settings" />
</Frame>

<br />

<Frame caption="Hosted Page Channel Selection">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/channel-selection.png" alt="Hosted Page Channel Selection" />
</Frame>

### Channel Delivery Customization & Preferences API

<Warning>
  **CUSTOM\_ROUTING**

  The `custom_routing` array in the [user preferences API](../../reference/user-preferences/get-subscription-topic-preferences) response indicates the user's custom channel delivery. Channel Delivery Customization **must be enabled** to use `custom_routing`.
</Warning>

```json
{
	"topic": {
		"custom_routing": [
			"email",
			"push",
			"webhook"
		],
		"has_custom_routing": true,
		"default_status": "OPTED_IN",
		"section_id": "5p8ROfompcN6Sg_2WR92A",
		"section_name": "Notifications",
		"status": "OPTED_IN",
		"topic_id": "FPPGTQRQTRM8TSPZGZAY9296WB37",
		"topic_name": "SMS"
	}
}
```

## How to Map a Notification Template to a Subscription Topic

There are three ways to map a notification template to a subscription topic:

### Topic Settings

In the **Subscription Topic Settings**, you can select one or more notification templates.

<Frame caption="Linked Notifications in Subscription Topic Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-linked-notifications.png" alt="Linked Notifications in Subscription Topic Settings" />
</Frame>

### Template Creation

When [creating a new notification](../content/notification-designer/design-a-notification#create-a-notification),
you can select a subscription topic.

<Frame caption="New Notification Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-new-notification.png" alt="New Notification Modal" />
</Frame>

### Notification Settings

In the **Notification Designer**, you can select a subscription topic.

<Frame caption="Notification Settings in the Notification Designer">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-topic-dropdown.png" alt="Notification Settings in the Notification Designer" />
</Frame>


# Introduction
Source: https://www.courier.com/docs/platform/preferences/use-guides/embed-courier-preferences

This guide shows how to embed Courier’s Preferences Center in a React or non-React app, enabling users to manage notification topics (e.g., facts, pictures, jokes) via components or hooks.

> Courier provides an npm package [@trycourier/react-preferences](https://www.npmjs.com/package/@trycourier/react-preferences) that contains Courier preference enabled React components.
> Courier Preferences components are ready to plug into your React app to immediately configure user preferences.

In this Guide, we will add the `PreferencesList` component into a simple Typescript React App that will allow a user to configure which notifications they wish to receive.
You can see the final code here [Newsletter Preferences](https://github.com/trycourier/courier-guides/tree/main/preferences-center)

## Using Hooks to Create Custom Preferences

These [hooks](https://github.com/trycourier/courier-react/blob/main/packages/react-preferences/src/components/PreferencesV4.tsx) exist as a separate package so that you can build your own interface using our api and state management without having to install all the dependencies that `@trycourier/react-inbox` or other react-dom based packages include. This is Courier's out-of-the-box preference page for reference which uses the same hook.

You can use [this sample tester](https://bwebs.github.io/courier-test/window-preferences.html) to explore and understand Courier's `preference` component.

## Context

Let's imagine we have created a newsletter for bird lovers using Courier. When a user first signs up for our newsletter, they are automatically subscribed to receive bird facts.
Our newsletter also allows a user to receive bird pictures and bird jokes, but they must choose to sign up for extra communications.
We want to create a Typescript React app that will allow users to see and customize their subscribed topics.

### Set Up Newsletter Notifications

We want to have 3 subscription topics for our fellow bird lovers: facts, pictures, and jokes.
Let's create a notification to template for these subscription topics for 3 birds: Pigeons, Hummingbirds, and Budgies.
For simplicity and demonstration, we can create 1 template per bird per topic for a total of 9 notifications.

**Example Fact Notification:**

<Frame caption="Example Fact Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/fact-notification.png" alt="Example Fact Notification" />
</Frame>

**Example Picture Notification:**

<Frame caption="Example Picture Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/picture-notification.png" alt="Example Picture Notification" />
</Frame>

**Example Joke Notification:**

<Frame caption="Example Joke Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/joke-notification.png" alt="Example Joke Notification" />
</Frame>

**Total Notifications:**

<Frame caption="Total Notifications">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/notification-screenshot.png" alt="Total Notifications" />
</Frame>

In order to easily know which message we are sending, we can add a descriptive event name in notification settings

<Frame caption="Notification with Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/notification-event.png" alt="Notification with event" />
</Frame>

### Set Up the Newsletter Preferences

Let's set up our newsletter preferences section by navigating the preferences in Courier Designer.
We can edit the section, and name it Newsletter, as well as pick the channels for delivery.

<Frame caption="Newsletter Section">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/update-section.png" alt="Newsletter section" />
</Frame>

Next, let's create the subscription topics.

The first subscription topic, will be our facts topic. We want to have the default status to be `OPTED_IN` so our users don't need to change anything to receive these notifications.

<Frame caption="Facts Subscription Topic">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/facts-subscription-topic-create.png" alt="Facts subscription topic" />
</Frame>

We will link our 3 bird fact notification templates to this topic

<Frame caption="Facts Subscription Topic Linked Notifications">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/facts-subscription-link-notifications.png" alt="Facts subscription topic linked notifications" />
</Frame>

The second and third topics, pictures and jokes respectfully, should have an `OPTED_OUT` status, so users have to set their preferences to receive them. We will link the remaining notifications to these topics

<Frame caption="Pictures Subscription Topic">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/pictures-subscription-topic-create.png" alt="Pictures subscription topic" />
</Frame>

<Frame caption="Pictures Subscription Topic Linked Notifications">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/pictures-subscription-link-notifications.png" alt="Pictures subscription topic linked notifications" />
</Frame>

Our Preferences Designer should look like this.

<Frame caption="Preferences Center Designer">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/preferences-center-screenshot.png" alt="Preferences Center Designer" />
</Frame>

When we preview the Hosted Preferences Page we get something that looks like this.

<Frame caption="Preferences Center Designer Preview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/preferences-center-preview.png" alt="Preferences Center Designer Preview" />
</Frame>

> Publish the page to continue

## Embedding the Preferences Center into a Typescript React app

In this example, we will be adding the Courier Preferences Center to a Typescript React App that uses Webpack 5.
You can look at the companion code [here.](https://github.com/trycourier/courier-guides/tree/main/preferences-center)

In our code we used the following:

* React 17,
* Typescript,
* Webpack 5
* Material UI
* Eslint
* Yarn

## Adding and Configuring Courier Provider

In Courier Studio, configure the Courier Provider under [channels.](https://app.courier.com/channels/courier)
Scroll all the way to the bottom and click install provider. Copy and paste your public Client Key and add it to your app as an environment variable in an .env file.

We named our variable `REACT_APP_COURIER_CLIENT_KEY`

Now, add the trycourier packages @trycourier/react-hooks, @trycourier/react-provider, and @trycourier/react-preferences like so

```bash
yarn add @trycourier/react-hooks @trycourier/react-provider @trycourier/react-preferences
```

<Warning>
  All @trycourier packages must be the same version
</Warning>

You also need to add styled-components as it is a peer dependency

```bash
yarn add styled-components
```

Embed Courier Provider into your code

```jsx
import {CourierProvider} from '@trycourier/react-provider';

    <CourierProvider
        clientKey={clientKey}
        userId={userName}>
    </CourierProvider>
```

<Note>
  **CONFIGURATION**

  `clientKey` is obtained from the [Courier Provider](https://app.courier.com/channels/courier) in the Studio App.
  userId is a unique id for the user whose preferences you wish to target.
  In order for a recipient to successfully have their preferences respected by a notification, you must include `to.user_id` in the Send request.
  This is because the `user_id` ties the recipient profile to their set preferences. If no `user_id` is present in the request, the preferences method will not register.

  In the sample app, a dialogue has been created for user input, but the user\_id can be hardcoded or an environment variable.
</Note>

## Adding Courier Preferences List

Now we can add PreferencesList as a child of CourierProvider. CourierProvider will provide preferences with our user context,
this will allow PreferencesList to configure the user preferences without the need for more code configuration.

```jsx
import {CourierProvider} from '@trycourier/react-provider';
import {PreferenceList} from '@trycourier/react-preferences';
    <CourierProvider
        clientKey={clientKey}
        userId={userName}>
        <PreferenceList />
    </CourierProvider>
```

## Using the Preferences App

When we first open the sample app, we will see our userName input modal to target the specific user whose preferences we wish to change.

<Frame caption="Username Modal Empty">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/preferences-app-empty-modal.png" alt="Username modal empty" />
</Frame>

Once we have submitted a username, we will see the default view of our Preferences Center.

<Frame caption="Username Modal Filled">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/preferences-app-modal-filled.png" alt="Username modal filled" />
</Frame>

This list will look the same as the preview of our published preferences center.

<Frame caption="Preferences App Default">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/preferences-app-default.png" alt="Preferences App Default" />
</Frame>

### Subscribing to Notifications

We can switch the subscription toggles on to subscribe the user into the pictures and jokes subscription topics.
We can send the user a message with a picture.

<Note>
  **USER ID**

  In order for a recipient to successfully have their preferences respected by a notification, you must include `to.user_id` in the Send request. This is because the `user_id` ties the recipient profile to their set preferences. If no `user_id` is present in the request, the preferences method will not register.
</Note>

<Frame caption="Preferences App Subscribed To All">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/preferences-app-subscribe.png" alt="Preferences App Subscribed To All" />
</Frame>

Courier will see the user is opted in and the message will be sent.
The Courier log determining subscription will look like this

<Frame caption="User Preferences Opted In">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/user-opted-in.png" alt="User preferences opted in" />
</Frame>

### Unsubscribing from Notifications

We can click the toggles again to unsubscribe the user from the bird jokes topic.
We can send the user a message with a joke.

<Note>
  **USER ID**

  In order for a recipient to successfully have their preferences respected by a notification, you must include `to.user_id` in the Send request. This is because the `user_id` ties the recipient profile to their set preferences. If no `user_id` is present in the request, the preferences method will not register.
</Note>

<Frame caption="Preferences App Unsubscribed From Jokes">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/preferences-app-unsubscribe.png" alt="Preferences App Unsubscribed From Jokes" />
</Frame>

Courier will see the user is opted out and the message will not be sent.
The Courier log determining unsubscribe will look like this

<Frame caption="User Preferences Opted Out">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/preferences/use-guides/assets/user-opted-out.png" alt="User preferences opted out" />
</Frame>

## Embedding the Preferences Center to Non-React Builds

You can embed the Preferences Center to non-React builds by using the implementation below:

```html
<div id="root">
  <noscript>JavaScript is required.</noscript>
	<!-- This embedded component comes from the courier-component script defined below and should render the same UI as the hosted preferences page from Courier -->
  <courier-preference-page />
  <div id="root" />
  <script type="text/javascript">
    window.courierConfig = {
      clientKey: clientKey, // You can get your client key from https://app.courier.com/settings/api-keys
      userId: userId // The user ID corresponding to the user who is viewing and modifying preferences.
    }
  </script>
  <script src="https://courier-components-xvdza5.s3.amazonaws.com/v3.6.4.js"></script>
</div>
```

We hope this guide was useful to embed the Courier Preferences Center into a simple Typescript React app.


# User Preference Logs
Source: https://www.courier.com/docs/platform/preferences/user-preferences-logs

Courier logs all user notification preference changes in the “Preferences Logs” section of each user’s page—offering visibility into when and how preferences are updated across channels or topics.

> Courier tracks when your users update their notification preferences and logs the changes in the "Preferences Logs" section of a user's page in Courier.

User preference logs track all preference changes made by your users. To find these logs, navigate to the "Preferences Logs" section of a user's page.

<Frame caption="Preference Logs in users page">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preferences-ui/preferences-user-logs.png" alt="Preference Logs in users page" />
</Frame>


# Send Priority Rules
Source: https://www.courier.com/docs/platform/sending/channel-priority

Configure Courier’s channel and integration priority to control notification routing, fallbacks, and overrides—ensuring delivery via the best available method based on user data and preferences.

> How to configure Channel and Integration priority, send rules and preferences in Courier.

## Setting Channel and Integration Send Priority

The priority of the Channels and Integrations you select for your Notification are arranged in a top-to-bottom hierarchy. To change priority, simply drag and drop Channels and Integrations up or down.

<Frame caption="Priority Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/priority-settings.gif" alt="Always Send Routing" />
</Frame>

**Read more:** [What are Channels and Integrations?](https://help.courier.com/en/articles/4196354-what-are-channels-and-integrations)

## Understanding Channel and Integration Send Priority

Notifications can be designed to send through multiple prioritized channels or integrations. Integrations within a channel can also be prioritized.

### Why Send Priority Matters

Your Notification will send via the highest-ranked Integration for which you have provided user contact information. You must provide Courier your user's contact information within their Courier recipient [Profile](../../reference/profiles/intro) or via the [Send API](../../reference/send/message) call itself.

Take, for example, a notification that is designed to send via Twilio, Slack or email - in that order of priority:

<Frame caption="Priority Routing Overview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/priority-routing-overview.png" alt="Priority Routing Overview" />
</Frame>

Courier will first attempt to send the notification via Twilio. If the recipient has a phone number in their profile, the Notification will send via Twilio only. If they don't have a phone number, Courier will look for a Slack account. Finally, if they don't have a phone number or slack account, Courier will look for an email address.

In the same example, there are two integrations in the email channel settings, SendGrid and Mailgun:

<Frame caption="Integration Priority">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/priority-integrations.png" alt="Integration Priority" />
</Frame>

Because SendGrid is at the top in priority order, Courier will attempt to send this notification to users with an email in their profile via SendGrid first. If that is unsuccessful, it will try again using Mailgun.

Just like channels, Integrations are prioritized in a top-to-bottom hierarchy which can be changed using drag and drop.

### Always Send Rule

There is also the option to “Always send to” a certain Integration. For example, a Notification might be configured for Twilio, Slack and email, in that order. The sender can choose to “Always send to” email, overriding the hierarchy so that every recipient receives an email (provided their profile contains an email address).

Then, in addition to email, recipients with a Slack configuration in their profile will receive a Slack message as well. Recipients who do not have a Slack configuration in their profile, but do have a phone number, will receive the message via Twilio, as well as email.

Always send to can be done for any channel, and is managed in the Channel Settings:

<Frame caption="Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/priority-channel-settings.png" alt="Channel Settings" />
</Frame>

<br />

<Frame caption="Always Send Routing">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/priority-always.png" alt="Always Send Routing" />
</Frame>

## User-Specific Sending Preferences

A sender can also assign a preferred Integration to a specific recipient, using the [Preferences API](../../reference/user-preferences). This will override the hierarchy of the Channel Rules and send the message only via the Integration specified in the recipient's [Profile](../../reference/profiles).


# Channel Settings
Source: https://www.courier.com/docs/platform/sending/channel-settings

Channel Settings let you configure delivery rules, priorities, and integrations per channel—enabling conditional logic, advanced email options, and precise control over notification behavior.

> A quick introduction to the Channel settings: where they are, what information they provide and what you can do with them.

There are three sections of the Channel Settings. Read on for details.

* General
* Conditions
* Integrations

## Opening the Channel Settings

To view the Channel Settings, open the Notification in the designer list, then click the settings icon next to the Notification name

<Frame caption="Channel Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/channel-settings.png" alt="Channel Settings" />
</Frame>

## General Settings

<Frame caption="General Notification Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/channel-general-settings.png" alt="General Notification Settings" />
</Frame>

### Rename

* Name or rename the Channel

### Always Send To

* When set to "Best Of" the Channel will only attempt to send if none of the channels prioritized above it were unsuccessful.
* When set to "Always" the Channel will be removed from the send priority hierarchy so that every recipient receives the message via this Channel (provided their profile contains the necessary data).

Continue reading about setting [Channel priority rules](./channel-priority).

### Disable

* When set to Disabled, the Channel will not send under any conditions and will be skipped in the "Best of" Channel send hierarchy.

### Remove

* The Channel will be removed from the Notification and can be done safely without deleting any content created in this Channel from the Library.

### Email-specific General Settings

* To configure the From address, Reply-To address, CC addresses, and BCC addresses on an email, open the Channel settings.
* For a more advanced approach, you can use [replacement variables](../content/variables/inserting-variables) in these fields to customize the addresses.

<Frame caption="Email Specific Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/channel-email-specific.png" alt="Email Specific Settings" />
</Frame>

## Conditions

Using the Conditions tool in the Channel settings allows you to use properties from the `data` or `profile` objects provided by the [Send API](../../reference/send/message) call or [User Profile](../../reference/profiles/intro) to prevent the Notification from sending when specific conditions are met.

<Info>
  **NOTE**

  Channel Conditions are applied only to the specific Channel within the Notification where you set them.

  **Read more:** [Using Send Conditions](../content/notification-settings/send-conditions).
</Info>

## Integrations

You can manage and configure integrations for each Channel within the channel settings.

* View and add previously configured integrations
* Integrate new channel providers.
* Set [integration send priority](./channel-priority).

<Frame caption="Channel Integrations">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/channel-integrations.png" alt="Channel Integrations" />
</Frame>

<br />

<Frame caption="Channel Integration Configs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/channel-settings/channel-integration-settings.png" alt="Channel Integration Configs" />
</Frame>


# Create and Map Events to Trigger Notifications
Source: https://www.courier.com/docs/platform/sending/create-map-events

Courier events trigger notifications using either Notification IDs or custom Event IDs, which can be mapped via settings, logs, or API—enabling flexible, code-free notification management.

> Introduction to the basics of building and using events to trigger your Courier notifications.

## Using Template Aliases to trigger your Courier Notifications

To trigger a Notification, you can use an `event` property in the [Send command](../../reference/send/message) which functions as a template alias. A template alias is a unique identifier that can be mapped to an individual Notification. This could be the "Notification ID” found in the Notification Setting or a custom string mapped to the event in [Template Alias Settings](https://app.courier.com/settings/events).

### Option 1: Using the Notification ID as the Event Trigger

The Notification ID (or `id` in the Courier API) is a unique identifier for each notification you create in the [Courier Notification Designer](../content/notification-designer/notification-designer-overview). You can find this id in the notification settings modal by clicking on the gear on next to the notification name.

<Frame caption="Notification ID">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/events-designer/events-notification-id.png" alt="Notification ID" />
</Frame>

### Option 2: Creating and Using a Custom Event ID String as the Event Trigger

While you can send the Notification ID (`id`) as the triggering event you can also create an Event ID. This `event` is a string describing an action or occurrence within your application. This can be defined by you, i.e. `new-user`, or by an incoming integration like [Segment](https://segment.com/).

**What Benefits Does Using an Event ID Offer Over the Notification ID as a Trigger?**

Creating an `event` means that you can associate that event string with *any* notification. In other words, you can avoid code changes on your end when you want to send a different (or additional) notification with the same `event`.

Because the Event ID is a string you create, you can give your events descriptive names that make it clear what action from your application the event represents like `user-created`.

## Creating and Mapping Events

There are several ways to create an event and map it to a Notification ID (id): Events settings, Event Log and the Events API

### Events Settings

To create an Event ID and map it to a Notification using the [Events Settings](https://app.courier.com/settings/events), open Settings > Events in the Courier web app and click ' Create New Event.

<Frame caption="Events Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/events-designer/events-event-settings.png" alt="Events Settings" />
</Frame>

Next, give the new Event ID a name that indicates the user action trigger that it represents (ex: user-created).

To map the Event ID to a Notification, select the Notification you want to trigger with this event from the Notification drop down menu.

<Frame caption="Map an Event to a Notification">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/events-designer/events-map-notification.png" alt="Map an Event to a Notification" />
</Frame>

### Mapping a Segment Track Event to a Notification

When creating an event map for a Segment track event, you will need the match the name of the Segment track event exactly when you create the event mapping using this format `Segment-TrackEvent:your_event`

<Frame caption="Your Segment Track Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/events-designer/events-segment-track.png" alt="Your Segment Track Event" />
</Frame>

### Mapping Inbound Events to Notification Templates

You can map inbound events to a notification in the Data Logs. That can be accomplished directly on the Event Log in the Courier App. To identify any unmapped events coming from Segment, or other sources, select the `Unmapped` status filter in your Data logs.

<Frame caption="Select Unmapped in the Logs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/events-designer/events-unmapped-log.png" alt="Select Unmapped in the Logs" />
</Frame>

### Map an Event From the Notification Settings

You can also map a notification template to an existing event in the [notification settings](../content/notification-settings/general-settings).

<Frame caption="Map an Event from the Notification Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/events-designer/events-notification-settings.png" alt="Map an Event from the Notification Settings" />
</Frame>

### Map an Unmapped Data Log Event to a Template

<Frame caption="An Unmapped Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/events-designer/events-unmapped-template.png" alt="An Unmapped Event" />
</Frame>

1. Click the event to open it
2. Click on the "Not Delivered" event in the Timeline.
3. Click "Map to Notification"
4. Select the notification you want to map the event to.

<Frame caption="Map to a Notification From the Logs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/events-designer/events-not-delivered.png" alt="Map to a Notification From the Logs" />
</Frame>


# Delay
Source: https://www.courier.com/docs/platform/sending/delay

Courier supports message delivery delays via duration, exact timestamps, or business-hour windows, with flexible timezone handling and visibility through message logs.

1. delay by X milliseconds (`delay.duration`)
2. specify the ISO 8601 timestamp string (`delay.until`)
3. specify a Deliver Window using a partial implementation of [opening\_hours](https://wiki.openstreetmap.org/wiki/Key:opening_hours) (`delay.until`). This also supports timezone offsets from within a user profile `timezone` key or `message.to.timezone`.

## Logging

When a delay is accepted via the API, you can verify it by viewing the Message Log for the request. You should see a `Request Delayed` event that specifies the time in GMT that the send take place.

**Example:**

```json
{
  "delay": {
    "duration": 120000
  },
  "details": {
    "duration": "Message delivery has been delayed by 2 minutes.",
    "date": "The message will be delivered on October 09, 2024 at 8:36 GMT+00:00"
  }
}
```

## Duration

Specifying a `delay.duration` will delay the send by this number of milliseconds. For example, this payload will send to the inbox only have 2 minutes.

```json
{
  "message": {
      "to": {"user_id": "test"},
      "delay": {"duration": 120000},
      "content": {"title": "Wait!", "body": "for 2 minutes"},
      "routing": {"method": "single", "channels": ["inbox"]
    }
}
```

<Note>
  **DURATION IS ROUNDED UP TO NEXT MINUTE**

  When using `delay.duration`, we will round up to the next minute
</Note>

## Timestamp

You can specify an [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp string in `delay.until`. Courier will calculate the delay and send the message at this time for you.

```json
{
  "message": {
    "to": {"user_id": "test-date-midnight"},
    "delay": {"until": "2025-01-01"},
    "template": "az09"
  }
}

{
  "message": {
    "to": {"user_id": "test-withtimezone"},
    "delay": {"until": "2024-10-11T06:37:25+7:00"},
    "template": "az09"
  }
}

{
  "message": {
    "to": {"user_id": "test-atutc"},
    "delay": {"until": "2024-10-11T06:37:25Z"},
    "template": "az09"
  }
}
```

## Delivery Window

You can specify a Delivery Window using a partial implementation of [opening\_hours](https://wiki.openstreetmap.org/wiki/Key:opening_hours) (`delay.until`). This also supports timezone offsets from within a user profile `timezone` key or `message.to.timezone`. Based on the current time and the opening\_hours string, Courier will calculate if it can send right now (is open) or delay until the next window.

* By default, Delivery Window will calculate the timezone in UTC, however it can be overridden by the `timezone` key stored in the user profile or provided in the request `message.to.timezone`. Timezone can follow either [IANA timezones](https://www.iana.org/time-zones) or UTC+- syntax (UTC+4, UTC-5).
* Opening hours calcuation is inclusive at the start of the range, and exclusive at the end of the range. For example, sending at Mo 08:00 exactly with Delivery Window `Mo-Fr 08:00-12:00` will **not** delay. Sending at Mo 12:00 exactly with Delivery Window `Mo-Fr 08:00-12:00` will delay until Tu 08:00

**Examples:**

* Business Hours **(Mo-Fr 09:00-17:00)**
* Weekend **(Fr-Mo 17:00-09:00)**
* Only Mornings **(Su-Sa 08:00-12:00)**
* Single Day **(Mo 09:00-12:00, 14:00-18:00)**
* Same Day Different Entries **(Mo 09:00-12:00; Mo 14:00-18:00)**
* Non-Consecutive Entries **(Mo 09:00-12:00; We 14:00-18:00)**
* Only at 11am **(Su-Mo 11:00-11:00)**

### Examples

```json
// /send Thursday at noon, will send
// /send Saturday at noon, will delay until 8am the following Monday
{
  "message": {
    "to": {
      "user_id":  "test123",
      "timezone": "Americas/Los_Angeles"
    },
    "delay": {
      "until": "Mo-Fr 08:00-16:30"
    }
  }
}

// If different profiles have different timezones, the calculation will also happen independently.
// /send at Friday at 23:00 UTC, America/Los_Angeles is open and will send now,
// Americas/New_York is closed and will delay until Monday
{
  "message": {
    "to": [
      {
        "user_id":  "test123",
        "timezone": "Americas/Los_Angeles"
      },
      {
        "user_id":  "test456",
        "timezone": "Americas/New_York"
      }
    ],
    "delay": {
      "until": "Mo-Fr 08:00-16:30"
    }
  }
}
```

<Note>
  **PARTIAL OPENING HOURS SUPPORT**

  We currently don't support the full opening\_hours specifications like exceptions and public holidays. Please submit feedback to [support@courier.com](mailto:support@courier.com) or your account team if Delivery Window is covering your use case for business hours or dynamic delays, please let us know.
</Note>


# Delivery Pipeline Resilience
Source: https://www.courier.com/docs/platform/sending/delivery-pipeline-resilience

Courier uses exponential backoff retry strategies to ensure reliable message, webhook delivery, and status tracking over 72 hours despite temporary network or integration failures.

## Notification Send Retries

### Retry Conditions

Courier will attempt to resend a notification under the following circumstances:

* No response from the integration (e.g., network connection lost)
* Integration response indicates a temporary issue (e.g., server overload, rate limit exceeded)
* Uncaught exception in Courier's pipeline

### Retry Strategy

Our retry strategy employs an exponential backoff approach:

1. Immediate retry for the first 10 attempts
2. 1-hour delay before the 11th attempt
3. 2-hour delay before the 12th attempt
4. 3-hour delay for attempts 13 through 25

This strategy spans 72 hours (3 days), maximizing the chances of successful delivery.

## Delivery Status Check Retries

### Retry Conditions

Courier will retry delivery status checks under these conditions:

* No response from the integration (e.g., network connection lost)
* Integration response indicates a temporary issue (e.g., server overload)
* Temporary failure in resolving the delivery status
* Uncaught exception in Courier's pipeline

### Retry Strategy

We employ the same exponential backoff strategy for status checks:

1. Immediate retry for the first 10 attempts
2. 1-hour delay before the 11th attempt
3. 2-hour delay before the 12th attempt
4. 3-hour delay for attempts 13 through 25

This approach ensures thorough tracking of delivery statuses over a 72-hour period.

## Outbound Webhook Delivery Retries

### Retry Conditions

Courier will attempt to retry outbound webhook delivery under the following circumstances:

* Internal Courier errors occur
* Network errors are encountered
* Certain retryable HTTP errors are received

### Retry Strategy

Our outbound webhook retry strategy employs an exponential backoff approach:

1. Initial retries with increasing delays: 5, 10, 20, 40, 60, 120, 240, 480, 720, 900 seconds
2. After the 10th retry, a consistent 15-minute delay is used for subsequent attempts
3. Up to 296 retry attempts are made, spanning a maximum of 3 days

## Courier Status Page

You can track Courier's services status [here](https://status.courier.com/)


# Digesting a Send API
Source: https://www.courier.com/docs/platform/sending/digest-send

Courier’s Digest Send API aggregates messages into scheduled digests based on user preferences—no code changes required—using linked templates, categories, and schedules for efficient notification delivery.

<Note>
  **NOTE**

  Digests were first introduced in automations [docs](../automations/digest) and may still be used for more complicated use cases. For simple use cases, this document also gives examples of using the /send API to aggregate messages into Digests based on the user's preference. You would use one or the other for a [Subscription Topic](../preferences/intro)

  It is available for our business and enterprise customers and requires contacting [Courier Support](mailto:support@courier.com)]\(mailto:[support@courier.com](mailto:support@courier.com)) or your account team for access.
</Note>

## Configure a digest in preferences

The first step is configuring a digest with at least one schedule in the [Preferences Editor](https://app.courier.com/settings/preferences). In the Preferences Editor, either create a new subscription topic or open the settings of an existing one.

### Linked Notifications

While editing a Subscription Topic, you should link all the templates you would want to be digested if a user selects a digest. For example, if you have notifications for social engagements in your application (likes, comments, etc.), you can link each corresponding notification template. Then, in the Settings section, you must select the Linked Digest Template.

### Linked Digest Template

The Linked Digest Template, found in a Subscription Topic's Digest Settings, is the template you would use for aggregated notifications in the digest. By selecting this template, you are opting to use this feature. In the social engagements example above, you might have a template that displays many likes and comments you have aggregated and a few of the most recent examples. When a user has a digest schedule selected, the Linked Digest Template will be the one that is triggered if the user has aggregated notifications.

<Info>
  **INFO**

  Removing the Linked Digest Template will stop digested notifications from being sent. However, messages to the original template will be sent to users who have selected a digest. Aggregated messages won't be removed until a schedule is triggered.
</Info>

### Schedules

In the digest section, click on schedules. Schedules are user-selected release preferences; we recommend an instant schedule as the default for a digest send to allow users to opt into a digest. One schedule is required. If you have numerous schedules configured, these will show on the hosted preferences page as options for the user to select. Note: the date-time picker is currently configured in the local timezone. Users viewing our hosted preference page or using our front-end preference components will also see their local timezone.

<Frame caption="Digest Schedules">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/automations/digest-schedules.png" alt="Digest Schedules" />
</Frame>

### Categories

Categories provides the ability to separate disparate data within the same digest. For example, you may want to sort by likes and comments for a weekly digest of the blog posts with the most engagement. Each category has a `retain` setting. This describes the specific events that will be retained when the digest is released. 10 highest/10 lowest require a sort\_key which is a data attribute in the event we will use to sort the events by.

<Frame caption="Digest Categories">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/automations/digest-categories.png" alt="Digest Categories" />
</Frame>

* first 10: the first 10 events that come in

* last 10: the last 10 events that come in

* 10 highest: The 10 highest events sorted by a specific data attribute

* 10 lowest: The 10 lowest events sorted by a specific data attribute
  The default value is `digest` and will retain the first 10 items.
  When the digest is released, it will be sent with the following format:

```json
[category_key]: {
  count: <total number of events>
  items: [...] // the individual events that match the retain setting. Maximum length of 10
}
```

### Settings

Settings have a toggle to invoke the digest when empty for users within an audience. Typically, the digest will only be sent to users with events during the schedule window. This option means that users in the audience will have a digest sent to them even if no events match their user\_id. This can be useful for fetching your data in the automation and sending the digest to your users with that custom data

<Frame caption="Digest Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/automations/digest-settings.png" alt="Digest Settings" />
</Frame>

## Testing the Digest Send

In this example, there are two template aliases `like` and `comment`, a third template `social_digest`, and a "Social" Subscription Topic.

Like /send body

```json
{
  "message": {
    "to": {
      "user_id": "user1"
    }
  },
  "template_id": "like"
}
```

Comment /send body

```json
{
  "message": {
    "to": {
      "user_id": "user1"
    }
  },
  "template_id": "like"
}
```

* Link Like and Comment templates to the Social Subscription Topic

* Open the Social Subscript Topic and choose Social Digest as the Linked Template

* Turn on digests and create an Instant schedule (default) and another schedule (e.g., Daily at 9am)

* Send a message to Like; you should see a successful message in the logs

* Send a message to Comment; you should see a successful message in the logs

* Using the API or a [Preference Tester](https://bwebs.github.io/courier-test/window-preferences.html) change `user1` preference from Instant to the schedule you created above

* Send a message to Like; you should see a `DIGESTED` message in the logs

* Wait until the scheduled time and see the Social Digest template being sent.

## When to use automations

Digesting can be implemented through the Send API and the Automation Invoke API. Generally, most use cases can be solved using this feature without Automations; however, the following list of items may move you into the automations invocation instead.

* Digests will only have profile data from the first send, and the current profile will be stored in the courier when the digest is sent. If you need more up-to-date information from your backend, you might consider using a Fetch Data step in an automation

* Conditional logic for sending to other templates

* Changing the routing mechanism based on the data payload
  Gathering up-to-date data with a fetch data step

## Logging

A new status `DIGESTED` will appear in the log when a user has a Subscription Topic schedule set that's not `Instant` and the Digest settings have the Linked Digest Template selected. Upon triggering a digest via the schedule, a new message log will show the Linked Digest Template and all the collected items associated with the digest.


# Automated Failover
Source: https://www.courier.com/docs/platform/sending/failover

Courier ensures message delivery with automated retries, provider/channel failover, and customizable timeouts—automatically switching routes if an error or delay occurs, maintaining resilience across providers and channels.

Courier automatically retries notifications when the downstream provider returns these HTTP error codes:

* `408` **Request Timeout** - The provider took too long to respond
* `429` **Too Many Requests** - Rate limiting or throttling
* `>=500` **Server Errors** - Internal server errors, service unavailable, etc.

## Provider Failover

Configure multiple providers in a single channel to ensure delivery when your primary provider has issues.

<Card title="Provider Failover Example">
  If you configure SES as a backup for SendGrid, Courier will automatically switch to SES if SendGrid experiences an outage or throttling.
</Card>

Provider failovers are configured in:

* A template's channel settings
* The `message.channels.[channel_name].routing_method` property of the [Send API](https://www.courier.com/docs/reference/send/message).

## Channel Failover

Configure multiple channels in your routing to ensure your message reaches the recipient.

<Card title="Channel Failover Example">
  If you configure a **Best of: Email, Push, SMS** sequence, Courier will try email first, then push if email fails, and finally SMS if both previous channels fail.
</Card>

Channel failovers are configured in:

* A template's routing configuration, using "Best Of" channels
* The `message.routing` property of the Send API

## Message Timeouts

Courier uses tiered timeouts to control failover behavior. By default:

* **Message timeout**: 72 hours (259200000ms)
* **Channel timeout**: 30 minutes (1800000ms)
* **Provider timeout**: 5 minutes (300000ms)

These can be overridden using timeout configurations in your send request.
All timeouts are specified in milliseconds.

### Timeout Configuration

You can configure timeouts at multiple levels:

1. Global timeouts via `message.timeout`:
   * `message.timeout.provider` - Applies to all providers
   * `message.timeout.channel` - Applies to all channels
   * `message.timeout.message` - Overall message timeout

2. Channel-specific timeouts via `message.channels.[channel].timeout`
   * Example: `message.channels.direct_message.timeout`
   * Overrides the global channel timeout (`message.timeout.channel`)

3. Provider-specific timeouts via `message.providers.[provider].timeout`
   * Example: `message.providers.slack.timeout`
   * Overrides the global provider timeout (`message.timeout.provider`)

<Note>
  More specific timeouts take precedence over global timeouts. For example, `message.channels.direct_message.timeout` will override `message.timeout.channel` for the direct message channel.
</Note>

### Example

```json
{
  "message": {
    "timeout": {
      /** Attempt each provider for 10 seconds before moving on to the next provider */
      "provider": 10000,
      /** Attempt each channel for 1 minute before moving to the next channel */
      "channel": 60000,
      /** Overall message timeout of 2 minutes */
      "message": 120000
    },
    "channels": {
      "direct_message": {
        /** Override timeout for direct message channel to 50 seconds */
        "timeout": 50000
      }
    },
    "providers": {
      "slack": {
        /** Override timeout for Slack provider to 20 seconds */
        "timeout": 20000
      }
    }
  }
}
```


# Send Limits
Source: https://www.courier.com/docs/platform/sending/guardrails

Courier’s Send Limits let business-tier users cap message volume by user, topic, or account across time periods—ensuring compliance, reducing overload, and protecting delivery reliability with throttling logs.

We allow you to set limits on any/all of the following:

* Global (all messages)
* Per-user
* Per-user per-subscription topic
* Per-account

In addition, you may exclude some subscription topics from the global and per-user limits.

Available time periods are:

* billing period
* hour
* day
* week (starting on Sunday)
* month

## How it works

Each time a message is sent, we increment a counter against each of the limits you have configured that apply to that message. If the message pushes the counter over one of the limits, we will not send the message.
The message will appear in the logs as "Throttled". We will send an email notifying your administrator(s) when this happens. You will receive at most one such email in a 24-hour period. You can check the logs for more details
on which messages are affected.

## Observability

If you use our Observability features, you will receive a metric counting throttled messages, as well as a log record.

## Settings

You can configure Send Limits in your workspace settings. More details below.

### Global message limit

This limits the total number of messages you can send during each time period. Any message with an excluded subscription topic will still count toward the limit, but will not itself be throttled, even if you go over the limit.

### Per-user message limit

This limits the number of messages you can send to an individual user. To work, users must have a profile with Courier. Any message with an excluded subscription topic will still count toward the limit, but will not itself be throttled, even if you go over the limit.

### Subscription

This limits the number of messages you can send to an individual user, for a given subscription topic. You can set a different limit for each topic, or no limit at all.

### Per-account message limit

This limits the number of messages you can send to an individual account. To work, account must be created using Courier's [Account API](../../reference/tenants/create-replace/). If you send messages to [users with an account](../../reference/tenants/intro), the messages will count toward the account limit. Any sends to users without an account will not count toward account limits.

### Limit exclusions

Some messages should always be sent, even if they would normally go over a limit. For example, important system updates, password-reset emails, etc.. Simply add the subscription topic(s) of messages you want excluded from limits here. Messages with these topics will still count toward the limits, but will never themselves be throttled.

<Frame caption="Send Limits Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/guardrails/settings.png" alt="Send Limits settings screenshot" />
</Frame>


# Create and Send an Email Notification
Source: https://www.courier.com/docs/platform/sending/send-message

This tutorial walks through creating an email notification in Courier, setting variables, authorizing via token, and sending the message using cURL or JSON, with optional provider-specific overrides.

## Prerequisites

You will need both Courier and a channel provider account integrated with Courier to complete this tutorial. If you don't have accounts already, sign up before proceeding.

* [Sign up for Courier](https://app.courier.com/)
* Sign up for one of [Courier's supported integrations](https://help.courier.com/en/articles/4169750-what-notification-providers-can-i-integrate-with-courier)

<Note>
  **RELATED RESOURCES**

  * [Courier API Reference](../../reference/intro)
  * [Courier Integrations Settings page](https://app.courier.com/integrations)
  * [Bash Environment Variables](https://www.gnu.org/software/bash/manual/html_node/Environment.html)
  * [cURL](https://curl.haxx.se/)
</Note>

## Add an Integration to Courier

Create an account with one of Courier's [supported channel providers](https://help.courier.com/en/articles/4169750-what-notification-providers-can-i-integrate-with-courier) and integrate it on your [Courier Integrations Settings page](https://app.courier.com/integrations).

## Create a Notification

Navigate to the Courier [Notifications page](https://app.courier.com/designer/notifications) and click “Create Notification.” Click on “Untitled Notification” to rename your notification — for this tutorial, call it “Test Appointment Reminder.” Choose an integration from your list of configured Integrations. Then, click the channel box for that integration that is added to the sidebar to open the template designer.

You can add message blocks to the template by clicking one of the content block icons on the mock-up email.

<Frame caption="Courier Notification Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-message/courier-notification-template.png" alt="Courier Notification Template" />
</Frame>

These text blocks can include variables using a mustache-like template syntax. Surround text with a single set of curly braces and that text will be interpreted as a variable (it will also be highlighted in green). For example, you may want to include a `{name}` variable (we'll cover the source of this variable data later in this tutorial).

If you are creating an email notification, be sure to set the subject line for your email (click “New Subject” to edit it).

Finish populating the notification template with whatever text you want to send. You can also copy the example below, which contains a few variables for demonstration.

```text
Hello {name},

This is an appointment reminder from Courier. We look forward to seeing you on {apt_date} at {apt_time}.

If you need to change your appointment for any reason, please contact us at least 24 hours in advance at {support_url} or {support_phone}.

Best regards,

Courier
```

<Frame caption="Courier Notification Template with Sample Message">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-message/courier-notification-template-sample.png" alt="Courier Notification Template with Sample Message" />
</Frame>

When you are finished, click Publish in the upper right corner.

## Send a Message

Courier passes messages to Integrations via the [Send endpoint](../../reference/send/message) . For this tutorial, we will send our messages with cURL, but you can use your preferred language and HTTP library. You can also use an API testing tool such as [Postman](https://www.getpostman.com/) or [Insomnia](https://insomnia.rest/). For additional code samples, see the ["Courier API Reference."](../../reference/intro)

### Authorization

Courier supports both basic and token authorization. For this tutorial, we will use token authorization. You can read more about authorization in Courier's ["Authorization Overview"](../../reference/authorization).

We must send an `Authorization` header with each request. The Courier Send API also requires an `event`. The authorization token and event values are the "Auth Token" and "Notification ID" we see in the detail view of our “Test Appointment Reminder” event. Click the gear icon next to the Notification's name to reveal them.

<Frame caption="Courier Authorization Credentials">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-message/courier-auth-credentials.png" alt="Courier Authorization Credentials" />
</Frame>

As a best practice, let's assign these values to environment variables. In a Bash terminal, you can add the variables by typing `VARIABLE_NAME="<value>"`. Some examples are provided below. Note that the values are just examples. Do not copy them — be sure to use the tokens associated with your account instead.

#### Courier Auth Token Variable

`COURIER_AUTH_TOKEN="YpW2yEaMDyNg6agN9yGkc9ycEg8MxiKVTiiu2WVc8"`

#### Notification ID

`COURIER_NOTIFICATION_ID="YpW2yEaMDyNg6agN9yGkc9ycEg8"`

These variables will persist for as long as your Bash session remains alive. If you quit your terminal, you will need to recreate them. However you handle your authorization tokens, keep them secure, and never add them to source control.

To verify that you created the variables correctly, you can see them by typing `echo $VARIABLE_NAME`. For example, typing `echo $COURIER_AUTH_TOKEN` will print the Courier Auth Token value to the terminal.

### Building the cURL Request

We want to send a POST request to `https://api.courier.com/send`. Let's build our cURL request line-by-line. First, we'll tell cURL this is a POST request.

```bash
curl --request POST
```

Next, add the `Authorization` header using the `COURIER_AUTH_TOKEN` variable we set earlier. We send this as a Bearer Token.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
```

We also have a `Content-Type` header, which is `application/json`.

```bash
curl --request POST \
--header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
--header "Content-Type: application/json" \
```

We will pass the body of our request using the cURL `--data` option. You will often send this data in JSON format. To improve working with cURL, Courier also supports a custom urlencoded format that can be used in the place of JSON. This format allows nested data values using square bracket syntax. This guide provides examples in both formats, so feel free to use the format that you like best.

Our `--data` option must also contain an `event` and `recipient`. Additionally, we will send `profile` and `data` objects.

The `event` value, for this example, is the "Notification ID" that we assigned to our `COURIER_NOTIFICATION_ID` environment variable earlier.

A `recipient` should be a unique identifier that does not change. This prevents duplicate entries in the event that a recipient changes their email or some other identifying value. We do not have any recipients in this tutorial, so we can enter any string value. Something like “katherine\_pryde” will work.

The `profile` information is an object that includes any key-value pairs required by our Integrations. You can find the required keys for any Integration by selecting an Integration on the ["Integrations" page](https://app.courier.com/integrations). See the individual integration provider requirements for details.

Lastly, we define message variables inside the `data` object. Remember the variables we set in the
visual template editor? This is where we provide the values. Our example message had `name`,
`apt_date`, `apt_time`, `support_phone`, and `support_url` variables. For this tutorial, we can
assign example strings to each.

Our `--data` option should look like this:

<Tabs>
  <Tab title="JSON">
    ```json
    {
      "message": {
        "template": "'"$COURIER_NOTIFICATION_ID"'",
        "to": {
          "email": "kpryde@xavierinstitute.edu"
        },
        "data": {
          "name": "Katherine Pryde",
          "apt_date": "July 31, 2019",
          "apt_time": "11:00 AM",
          "support_phone": "555-555-5555",
          "support_url": "https://courier.com/docs"
        }
      }
    }
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    --data "message[template]=$COURIER_NOTIFICATION_ID" \
    --data "message[to][email]=kpryde@xavierinstitute.edu" \
    --data "message[data][name]=Katherine Pryde" \
    --data "message[data][apt_date]=July 31" \
    --data "message[data][apt_time]=11:00 AM" \
    --data "message[data][support_phone]=555-555-5555" \
    --data "message[data][support_url]=https://www.courier.com/docs/" \
    ```
  </Tab>
</Tabs>

Now add the Send URL, `https://api.courier.com/send`, to complete the cURL request.

#### Complete cURL Request in both Formats

<Tabs>
  <Tab title="cURL in JSON">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data '{
      "message": {
        "template": "'"$COURIER_NOTIFICATION_ID"'",
        "to": {
          "email": "kpryde@xavierinstitute.edu"
        },
        "data": {
          "name": "Katherine Pryde",
          "apt_date": "July 31",
          "apt_time": "11:00 AM",
          "support_phone": "555-555-5555",
          "support_url": "https://courier.com/docs"
        }
      }
    }' \
    https://api.courier.com/send
    ```
  </Tab>

  <Tab title="cURL urlencoded">
    ```bash
    curl --request POST \
    --header "Authorization: Bearer $COURIER_AUTH_TOKEN" \
    --header "Content-Type: application/json" \
    --data "message[template]=$COURIER_NOTIFICATION_ID" \
    --data "message[to][email]=kpryde@xavierinstitute.edu" \
    --data "message[data][name]=Katherine Pryde" \
    --data "message[data][apt_date]=July 31" \
    --data "message[data][apt_time]=11:00 AM" \
    --data "message[data][support_phone]=555-555-5555" \
    --data "message[data][support_url]=https://www.courier.com/docs/" \
    https://api.courier.com/send
    ```
  </Tab>
</Tabs>

Before sending this request, be sure to replace the `kpryde@xavierinstitute.edu` value with an email address you can access. Also, note the `"'"$COURIER_NOTIFICATION_ID"'"` formatting in the JSON formatted `--data` option. The quotes are necessary to escape the JSON quotes and access the `COURIER_NOTIFICATION_ID` variable.

Paste your complete cURL request in either format in your terminal and hit "Return." You should receive a response like `{"messageId":"<message id string>"}`. You will also receive an email at the address you specified in the request body. Be sure to check your spam folder if the message doesn’t arrive in your inbox.

<Frame caption="Send the cURL Request">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-message/send-curl-request.png" alt="Send the cURL Request" />
</Frame>

<br />

<Frame caption="Delivered Email">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-message/delivered-email.png" alt="Delivered Email" />
</Frame>

Congratulations, you’re on your way to crafting a better notification strategy that your audience is sure to appreciate.

## Overrides (Advanced)

Overrides can be used to change the request body that Courier uses to send an email. Overrides are useful when a field is not yet supported by Courier or you would like to override the value that Courier generates.

For a list of fields you can override for any Courier integration provider, see the "Overrides" section of that individual provider's integration doc.

Below is an example of overriding the subject and adding an attachment to a SendGrid email.

```json
{
  "message": {
    "template": "<COURIER_NOTIFICATION_ID>",
    "to": {
      "email": "kpryde@xavierinstitute.edu"
    },
    "data": {
      "name": "Katherine Pryde"
    },
    "providers": {
      "sendgrid": {
        "override": {
          "body": {
            "attachments": [
              {
                "content": "eyJmb28iOiJiYXIifQ==",
                "type": "application/json",
                "filename": "SENDGRID_ATTACH.json"
              }
            ]
          }
        }
      }
    }
  }
}
```


# Inbox and Tenants
Source: https://www.courier.com/docs/platform/tenants/inbox

Send Inbox notifications to tenant-specific or global inboxes by configuring tenantId, enabling multi-workspace support and ensuring proper visibility across SDKs.

For example, if you send an inbox notification to user1 with context `tenantA` but do not instantiate the Inbox SDK with `tenantA`, you will not see the message. This allows you to build inbox configurations mapping to your different workspaces. Alternatively, you can create a global inbox by not sending a `tenant_id`

<Note>
  **TENANT AUTO-INFER**

  Courier may also be auto-inferring the Tenant based on a single-user tenant membership, so if you have created tenant memberships, you need to set up your Inbox and Toast SDKs with a `tenantId`. More details on [auto-infer here](./intro#auto-infer-tenant-context-for-user)

  ## React

  You can instantiate the Courier React [Inbox](https://www.npmjs.com/package/@trycourier/react-inbox) and [Toast](https://www.npmjs.com/package/@trycourier/react-toast) components

  ```jsx
  <CourierProvider clientKey="..." userId="user1" tenantId="tenantA">
    <Inbox />
    <Toast />
    {children}
  </CourierProvider>
  ```

  ## Components

  ```javascript
  window.courier.init({
    clientKey: "...",
    userId: "user1",
    tenantId: "tenantA",
  });
  ```
</Note>


# Tenants
Source: https://www.courier.com/docs/platform/tenants/intro

Tenants in Courier are hierarchical groups that manage user preferences, metadata, and branding. They support scoped notifications, default routing, custom branding, and can inherit settings from parent tenants.

Tenants can have three types of metadata: User Profile data, Default Preferences, and Properties. In addition to this metadata, Tenants can have their own default brand and parent tenants. Tenants allow you to map your user relationships to entities like organizations, roles, groups, or projects so that users can have different preferences and messages for tenants.
The use cases for tenants

* Users can opt-out of parent tenant notifications but opt-into child tenant notifications. Alternatively, users can opt-out of user-level notifications but opt-in to specific tenant notifications.
* Sending to a list of tenant members
* Storing provider credentials like Slack workspace bot keys
* Provide alternative default branding to a group of users
* Tenants can have their preference defaults as well as channel defaults. For example, tenant A can override a global preference, such as opting in instead of opting out and only using Slack instead of SMS, Slack, or Email.
* Disable templates from being sent to a specific tenant by referencing the tenant metadata in the template configuration.
* Tenants can have a maximum send limit configured in your workspace configuration.
* Build notifications using tenant metadata, such as company name, workspace name, etc.

## Metadata

### Parent Tenants

Tenants have a built-in hierarchy enabling tenants to have parent tenants. For example, you may have users who belong to roles; those roles belong to a workspace. You can map that same hierarchy with tenants.

While loading tenant profile data, we'll start at the parent and merge in child metadata, with child data overwriting parent data where there are collisions.

<Note>
  **FOUR LAYERS OF HIERARCHY**

  Currently, Courier only supports four layers of tenant hierarchy. For example if you have a hierarchy like the following.

  ```treeview
  tenant0
  └── tenantQ
      └── tenantP
          ├── tenantR1
          │   └── tenantR1D1
          └── tenantR2
              ├── tenantR2D1
              └── tenantR2D2
  ```

  Loading a tenant context of tenantR2 will load in tenant0, tenantQ, tenantP, tenantR2.

  However, loading a tenant context of tenantR2D2 will start at tenantQ, and also load tenantP, tenantR2, then finally tenantR2D2
</Note>

When data is loaded through a hierarchy, the topmost parent is loaded first, then the next, and next, overwriting keys within the metadata properties as it goes.

**For example:**

* Parent Tenant

```json
{
  "brand_id": "brandX",
  "user_profile": {
    "key1": "value1",
    "key3": "valueA"
  }
}
```

Child Tenant

```json
{
  "brand_id": "brandY",
  "user_profile": {
    "key2": "value2",
    "key3": "valueB"
  }
}
```

Merged

```json
{
  "brand_id": "brandY",
  "user_profile": {
    "key1": "value1",
    "key2": "value2",
    "key3": "valueB"
  }
}
```

### Brands

You may specify a brand as the default for a tenant. Specifying a default brand allows inbox, inbox messages, and email messages to be applied based on the tenant context instead of on the global level. Providing the brand in the Notification Send can still override this setting.

### User Profile

There may be data from a tenant you would like applied to the user's profile information based on the tenant context that's loaded. The User Profile section in Courier Studio (`user_profile` key in the API) will merge into the user profile.

All the parent tenant user\_metadata will merge, following the rules in [Parent Tenants](#parent-tenants). After that, the User's profile data from Courier is merged following the Send API call's to/profile context.

**Resolved Tenant Context**

```json
{
  "user_profile": {
    "key1": "value1",
    "key2": "valueA",
    "key3": "X",
    "foo": "bar"
  }
}
```

Courier User Profile

```json
{
  "key2": "valueB",
  "key4": "Y",
  "foo": "baz"
}
```

This is also a common place to store per tenant Slack and Microsoft Teams Bot Tokens.

```json
"slack": {
    "access_token": "xoxb-..."
}
```

**Send Context**

```json
{
  "to": {
    "key2": "valueC",
    "key5": true
  }
}
```

**Merged Profile Context**

```json
{
  "foo": "baz",
  "key1": "value1",
  "key2": "valueC",
  "key3": "X",
  "key4": "Y",
  "key5": true
}
```

### Default Preferences

You can set a Tenant's Default Preferences for [Subscription Topics](../preferences/preferences-editor/#subscription-topics) by providing the topics you want to override. For example if your Product Notifications (id: 72YE3TJK7S40KWN427Y69FD4D4FH) should be defaulted OPTED\_IN for one tenant.

Via Courier Studio:

```javascript
{
  "items": [
    {
      "id": "72YE3TJK7S40KWN427Y69FD4D4FH",
      "status": "OPTED_IN",
      "type": "subscription_topic"
    }
  ]
}
```

Via REST or SDK:

```javascript
// PUT /tenants/:tenant_id
// Body
{
  "name": "default-preferences-test",
  "default_preferences": {
    "items": [
      {
        "id": "72YE3TJK7S40KWN427Y69FD4D4FH",
        "status": "OPTED_IN"
      }
    ]
  }
}
```

You may also put a default custom routing for a tenant

```javascript
{
  "items": [
    {
      "id": "72YE3TJK7S40KWN427Y69FD4D4FH",
      "status": "OPTED_IN",
      "type": "subscription_topic",
      "has_custom_routing": true,
      "custom_routing": ["inbox", "push", "sms"]
    }
  ]
}
```

<Note>
  **USER'S PREFERENCES**

  Default Tenant Preferences will change the default behavior for any user/tenant combination who has not updated their preferences for the subscription\_topic\_id yet. Users who have already made a selection for this tenant will keep their current preference
</Note>

### Properties

Tenants allow arbitrary properties that are accessible to a template.

## Customer Data Platform Integrations

For both [Rudderstack](../../external-integrations/cdp/rudderstack/intro) and [Segment](../../external-integrations/cdp/segment/courier-source) integrations, we support the `group` event, which will create a user tenant membership between the user\_id in the group call and the `groupId`

## Rest API

Courier has a range of APIs for managing [Tenants](../../reference/tenants). Including

* CRUD Tenants
* Add/Remove User Tenant Membership
* List all tenants for a user
* List all users for a tenant

## Auto-Infer Tenant Context for User

By default, if a user has a single User Tenant Membership and a Send request does not specify the tenant in the context. Courier will load the tenant information into the context by default. Auto-infer is excellent for studio, list, or audience messages because required provider information may be stored at the tenant level.

<Info>
  **DISABLING AUTOMATIC TENANT PROFILE LOAD**

  In complex deployments with multiple tenants for users or preferences that don't belong to a tenant, we can enable a setting that allows you to control this behavior. Reach out to [support@courier.com](mailto:support@courier.com) for access to the setting.
</Info>


# Sending With Tenants
Source: https://www.courier.com/docs/platform/tenants/sending

Courier supports tenant-based sending to fan out messages to all tenant members, individual users with tenant context, or nested child tenant hierarchies using include_children.

## Send to tenant members

You can notify a list of tenant members by specifying the tenant\_id in the to field. Courier will fan out the message to each user with a tenant membership, look up each user's profile data, and send the notification.

For example, an inline Inbox notification send:

```json
{
  "to": {
    "tenant_id": "tenantA"
  },
  "content": {
    "title": "Hello, {first_name}!",
    "body": "Brought to you by {$.tenant.name}"
  },
  "routing": {
    "method": "single",
    "channels": ["inbox"]
  }
}
```

Will fan out to these list members and send three notifications

```json
// GET /tenants/tenantA/users
// Returns:
{
  "has_more": false,
  "items": [
    {
      "tenant_id": "tenantA",
      "profile": {},
      "type": "user",
      "user_id": "billy_williams"
    },
    {
      "tenant_id": "tenantA",
      "profile": {},
      "type": "user",
      "user_id": "ron_santo"
    },
    {
      "tenant_id": "tenantA",
      "profile": {},
      "type": "user",
      "user_id": "kerry_wood"
    }
  ],
  "next_url": null,
  "type": "list",
  "url": "/tenants/tenantA"
}
```

## Send to a user with a tenant context

You can be explicit about the tenant context when sending a notification. For example, this inbox send:

```json
{
  "message": {
    "to": {
      "user_id": "user1",
      "context": {
        "tenant_id": "tenantA"
      }
    },
    "content": {
      "title": "Hello, {first_name}!",
      "body": "Brought to you by {$.tenant.name}"
    },
    "routing": {
      "method": "single",
      "channels": ["inbox"]
    }
  }
}
```

Will send a notification to `user1` with the context information of `tenantA`.
This includes default preferences, profile values, the brand of tenantA
and any other data attached to `tenantA` that may be referenced by the template.

Note that user preferences and data take precedent over the context loaded from
the tenant.

<Note>
  **TENANT CONTEXT WITHOUT MEMBERSHIP**

  A user is not required to be a tenant member to use a tenant context. For example, if user1 does not have a tenant membership to tenantA, you still send a call like the following:

  ```json
  {
    "message": {
      "to": {
        "context": {
          "tenant_id": "tenantA"
        },
        "user_id": "user1"
      },
      "template": "ABC"
    }
  }
  ```
</Note>

This pattern is useful when your tenants have metadata or credentials for a provider, but you don't anticipate needing to notify each user in the tenant.

## Send to users of children tenants

If you have linked parent and child tenants and want to send to all users that would be part of the children tenants, you can send to all children users by using `include_children` key.

```json
{
  "to": {
    "tenant_id": "ParentTenantA",
    "include_children": true
  },
  "content": {
    "title": "Hello, {first_name}!",
    "body": "Brought to you by {$.tenant.name}"
  },
  "routing": {
    "method": "single",
    "channels": ["inbox"]
  }
}
```

In the following hierarchy and using `include_children`, Courier would fan out the above request to all five users (User1, User2, User3, User4, User5).

```yaml
- ParentTenantA
  child tenants:
    - ChildTenantA1
      user members:
        - User1
        - User2
    - ChildTenantA2
      child tenants:
        - ChildTenantA2-admin
          user_members:
            - User5
      user members:
        - User2
        - User3
  user members:
    - User4
```


# User Tenant Preferences
Source: https://www.courier.com/docs/platform/tenants/user-tenant-preferences

Courier allows users to manage notification preferences per tenant, supporting layered opt-in/out choices based on tenant-specific or inherited defaults.

Adding tenant context allows multiple layers of preferences for a single user. For example, if you design tenants to map to your data objects, e.g., you're a cloud provider and have cloud projects. The user can opt-in to the production notifications for prod-project, but opt-out of notifications for stage-project

## Tenant Defaults

If a user has not updated their own preferences for a tenant, they will use the defaults as provided by the tenant. Each tenant can have their own defaults, see more in [Default Preferences](./intro#default-preferences)

### Parent Tenant Defaults

When using parent tenants, tenant preferences follow the same hierarchy loading technique described in [Parent Tenants](./intro#parent-tenants). When loading the hierarchy, parent tenants' default preferences will be pulled in first and can updated by child tenants.

<Note>
  **TENANT AUTO-INFER**

  Courier may also be auto-inferring the Tenant based on a single-user tenant membership, so if you have created tenant memberships, you need to set up your Inbox and Toast SDKs with a `tenantId`. More details on [auto-infer here](./intro#auto-infer-tenant-context-for-user)
</Note>


# null
Source: https://www.courier.com/docs/platform/users

Courier defines users (recipients) as notification targets, supporting inline addresses, stored profiles, lists, dynamic audiences, tenants, and tokens for personalized, multi-channel notification delivery.

You'll sometimes see the term `recipient` used, but these mean the same thing. There are several different ways to define which users will receive a notification.

The code samples below illustrate a subset of the `message` object used to make a call to the [send API](../reference/send/intro).

## Inline Recipient Addresses

The simplest way to send a notification is to specify either an `email` or a `phone_number`.

```json
"to": {
    "email": "luke@skywalker.com"
}
```

## User Profiles

Courier supports storing recipient information in a [User Profile](../reference/profiles) record, and then referencing a `user_id` when calling `send`. One of the benefits of this approach is that the specific channel that is used to deliver the notification can be deferred to a later step where routing rules are applied.

```json
"to": {
    "user_id": "luke1234"
}
```

## Lists and Audiences

If you want to send a notification to more than one user, you can add as many users as you like to a [List](../reference/lists) and then pass the `list_id`.

```json
"to": {
    "list_id": "rebel-alliance"
}
```

Instead of using a static list of users, you can alternatively create an [Audience](../reference/audiences/intro) that will dynamically include users based on their attributes and a set of custom filtering rules that you define.

```json
"to": {
    "audience_id": "currently-on-hoth"
}
```

## Tenants

Courier has a hierarchical database object called Tenants that maps to use cases like workspaces, organizations, projects, groups, and/or roles within your application. Users can belong to zero to many tenants, have preferences based on tenants, and separate Inbox's.

See the Tenants [Documentation](./tenants/intro) or [API](../reference/tenants) for usage. A single user can be associated with multiple tenants, and you can specify a `tenant_id` when sending a message to ensure the correct preferences and configuration values are applied.

## User Authentication Tokens

When sending push notifications to mobile devices, developers need to [create tokens](../reference/token-management) that are mapped to the users they are sending notifications to.

Once you create a token and attach it to a user and provider, you do not need to include it in the call to the [Send API](../reference/send/message) when you send a push notification.

```json
"message": {
    "to": {
        "user_id": "luke1234",
    },
    "content": {
        "title": "Where do Sith go shopping?",
        "body": "At the Darth Maul!"
    },
    "routing": {
        "method": "single",
        "channels": [
            "push"
        ]
    }
}
```

Additionally, if you use use the Courier [client SDK libraries](../sdk-libraries/intro) in your mobile application, they will automatically handle token generation and rotation for you automatically, so you won't need to handle [token management](../reference/token-management) in your code.


# Removing the Courier Watermark
Source: https://www.courier.com/docs/platform/workspaces/courier-branding

You can remove the “Powered by Courier” watermark from your notifications via the General Settings page—this is a paid feature available on select plans.

> The Courier Watermark is the "Powered by Courier" footer.

<Note>
  **INFO**

  Removing the Courier Watermark is a paid feature. For pricing details, please visit our [Pricing Page](https://www.courier.com/pricing/).
</Note>

You can remove the Courier Watermark from your notifications by following these steps:

1. Navigate to the [General Settings](https://app.courier.com/settings/general) page in your Courier workspace.
2. Locate the "Watermark" section.
3. Toggle the switch to remove the watermark from your notifications.

<Frame caption="Toggle switch to hide the Courier Watermark">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-branding/branding-toggle.png" alt="Toggle switch to hide the Courier Watermark" />
</Frame>


# Workspaces
Source: https://www.courier.com/docs/platform/workspaces/intro

A Courier Workspace provides environments, user access control, billing, usage monitoring, and webhook configuration for managing your notification infrastructure.

A Workspace gives you the ability to:

* Set-up Test and Production environments
* Manage developer access and RBAC
* Monitor usage
* Configure webhooks
* Manage billing


# Organizing and Filtering Notifications with Tags
Source: https://www.courier.com/docs/platform/workspaces/notification-tags

Add custom tags to Courier notifications to easily filter and search by multiple criteria, improving organization beyond basic name or channel searches.

> Adding tags to your Notifications helps you filter and search your Courier notifications.

Tags are especially valuable because you can filter on more than one tag at a time, while the search field only allows you to search one term at a time.

## Create, Tag or Untag Using the Notification List View Modal

* Open the tag's dropdown menu on the far right of its list row.
* Type a new tag name into the Create Tag field and assign it a color.
* Once the tag is created, click on it to assign it to the Notification.
* To tag the Notification with an existing tag, simply click on the tag name.

## Create, Edit Tag Color, and Delete Tags With the Tags Tool

* To create a tag in the filter view, simply type a tag name into the create tag field and hit return.
* To edit a tag's color, click on the color indicator next to the tag name.
* To edit a tag name, click into the tag's name field.
* To delete a tag, click on the tag's count number.

## Filtering and Searching Your Notifications

You can search your Notifications by a single Name, Channel or Tag with the Filter tool.

* The Tags tool allows you filter down your Notification by selecting multiple tags.

* You can also use the Filter search in combination with the Tags tool to narrow the results of selected tags.


# Okta Integration
Source: https://www.courier.com/docs/platform/workspaces/okta-integration

Set up Okta SSO and SCIM provisioning with Courier to enable secure logins, role management, and automated user syncing via SAML 2.0 and Okta’s admin interface.

## Prerequisites

* An Okta account with Admin privileges.
* Each user must be invited to courier via email before they can log in with Okta.
* Some of these steps require information to be received from *and* sent to courier. Before continuing, contact Courier support and ask for assistance in setting up Okta Sign in.

## Create the App Integration in Okta

1. Navigate to the Applications > Applications section of the Okta admin panel
2. Hit the "Create App Integration Button":

<Frame caption="Create App Integration button">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/create-app.png" alt="Create App Integration button." />
</Frame>

3. Select SAML 2.0 and hit "Next"

<Frame caption="Select Sign-in Method">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/saml.png" alt="Select Sign-in Method" />
</Frame>

4. Enter `Courier` as the app name and optionally provide the Courier logo (available after the screenshot) then click "Next"

<Frame caption="App Name & Logo">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/general-settings.png" alt="App Name & Logo" />
</Frame>

<Note>
  **DOWNLOAD COURIER LOGO**

  <CourierSvg class="" />

  <br />

  <div class="button-group">
    <a class="button button--primary" href="pathname:///img/logo_2023.png" download="courier_logo">Download PNG </a>
  </div>
</Note>

5. Contact Courier support for a `Single sign on URL` and an `Audience URI`. Enter them in their respective fields under SAML settings.

<Frame caption="SSO URL and Audience URI fields">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/settings-urls.png" alt="SSO URL and Audience URI fields" />
</Frame>

6. In the **Attribute Statements** section, enter the following information:

| Name                                                                 | Name Format | Value      |
| -------------------------------------------------------------------- | ----------- | ---------- |
| `id`                                                                 | Unspecified | user.id    |
| `http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress` | Unspecified | user.email |

<Frame caption="Okta attribute statements">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/attributes.png" alt="Okta attribute statements." />
</Frame>

7. Hit the "Next" button towards the bottom of the page
8. Under the "Application Feedback" section, select "I'm an Okta customer adding an internal app" and hit "Finish":

<Frame caption="Okta feedback form">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/feedback-form.png" alt="Okta feedback form" />
</Frame>

9. From the "Sign On" tab of the new Courier application integration, find the Metadata URL. Copy the link address and send it to the Courier support team member

<Frame caption="Okta Metadata URL">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/metadata.png" alt="Okta Metadata URL" />
</Frame>

That's all thats needed to allow sign in with Okta. Be sure to assign users using the Assignments tab of Courier App Integration.

## Creating a Courier Bookmark App

Bookmark apps are used to direct users to a specific web page using Okta applications. Below is a step-by-step process to create a Courier bookmark app within the Okta Admin Panel.

<Note>
  **INFO**

  Before you can create a bookmark, you will need a bookmark URL from Courier for IdP initiated SSO to work. Please [contact Support](mailto:support@courier.com) to get set up with the bookmark URL.
</Note>

### Steps

1. Make sure you're logged-in to the Okta admin panel as an `Admin`.
2. Expand the `Applications` drop-down in the left pane, then click `Applications`.
3. Click `Browse App Catalog`.
4. Search for `Bookmark App`, select it from the list of results, and click `Add` in the left pane.
5. Choose an app name, in this example `Courier Login`, which will be the display name.
6. Copy the URL supplied by Courier Support directly to into the URL box:

<Frame caption="Okta Bookmark App Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/okta-bookmark-app.png" alt="Okta Bookmark App Settings" />
</Frame>

7. Click `Save`.
8. Assign to users to test.

## Migrating Users To Okta

1. From the [Settings > Security](https://app.courier.com/settings/security) page, confirm that "Require Google SSO" is not checked

<Frame caption="Google SSO Setup">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/google-sso.png" alt="" />
</Frame>

2. From the [Settings > Team](https://app.courier.com/settings/team) page in Courier, remove and then re-invite users who should sign in with Okta

## After the invites are sent

### To accept an Okta invitation users should follow these steps:

1. Sign out of Courier
2. Click the "join" button from the email invite
3. Enter your work email (the email address your invite was sent to)
4. Hit continue

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/log-in.png" alt="" />
</Frame>

<br />

<Note>
  **INFO**

  Users with Okta logins to Courier **MUST** use the email login process.

  <Frame caption="Email Login Process">
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/log-in-email.png" alt="" style={{width: 500}} />
  </Frame>
</Note>

## User Provisioning with Okta SCIM v2

1. Contact Courier support for a SCIM endpoint URL and bearer token
2. Navigate to the Courier App from the Okta admin panel
3. Navigate to the provisioning tab and click "Edit"

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/provisioning.png" alt="" />
</Frame>

4. Enter the URL provided by Courier into the "SCIM connector base URL"
5. Enter `userName` into the "Unique identifier field for users"
6. Check "Push New Users" and "Push Profile Updates" for the "Supported provisioning actions"
7. For "Authentication Mode" select `HTTP Header`
8. Enter the Bearer token provided by Courier

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/scim-auth.png" alt="" />
</Frame>

9. Hit "Save"
10. After 30 seconds the provisioning tab should have a "To App" section on the left. If it doesn't, try refreshing the page. Once it appears select it and hit the "Edit" button
11. Check the "Create Users", "Update User Attributes", and "Deactivate Users" features and hit save

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/to-app-settings.png" alt="" />
</Frame>

12. Using the side menu navigate to Directory > Profile Editor and hit the edit profile button of the Courier App

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/profile-editor.png" alt="" />
</Frame>

13. Hit the "Add Attribute" button

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/profile-editor-attributes.png" alt="" />
</Frame>

14. Enter the following values:
    * Data type: `string`
    * Display name: `Role`
    * Variable name: `role`
    * External name: `role`
    * External namespace: `urn:ietf:params:scim:schemas:core:2.0:User`
    * Description: `Courier Role`

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/add-attribute-form.png" alt="" />
</Frame>

15. Check the "Define enumerated list of values" checkbox and enter the following values:

* Display Name: `Admin`, Value: `ADMINISTRATOR`
* Display Name: `Manager`, Value: `MANAGER`
* Display Name: `Developer`, Value: `DEVELOPER`
* Display Name: `Designer`, Value: `DESIGNER`
* Display Name: `Support`, Value: `SUPPORT_SPECIALIST`
* Display Name: `Analyst`, Value: `ANALYST`

16. Check the "Attribute required" checkbox and hit "save"

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/okta/add-attribute-form-extra.png" alt="" />
</Frame>

<br />

<Note>
  **INFO**
  If users were already assigned to the Courier app before provisioning was setup, you will need to edit their assignment and update their role.
</Note>

### Finalizing User Provisioning

* Changes to user assignments in the Courier Okta app will automatically be reflected in the Courier Workspace.
* Users will receive an invite via email to Courier when added.
* Users are automatically removed from the Courier Workspace when no longer assigned in Okta.


# Outbound Webhooks
Source: https://www.courier.com/docs/platform/workspaces/outbound-webhooks

Courier’s outbound webhooks notify your app of events like message updates or audience changes, with secure HMAC verification and customizable event handling via POST endpoints.

Courier can use webhooks to notify your application when an event occurs in your account.

## Adding a New Webhook Destination

1. Visit [https://app.courier.com/settings/general](https://app.courier.com/settings/general)
2. Click the "+ Outbound Webhook" button
3. Enter the new webhook destination information (this should accept a `POST` request)

## Handling Requests from Courier

### Read the Event Data

Courier sends the event data in the request body. Each event is structured as an object with a `type` property and related resource data nested under the `data` property.

### Handle the Event

Courier currently supports the following event types:

* `message:updated`
* `notification:submitted`
* `notification:submission_canceled`
* `notification:published`
* `audiences:updated`
* `audiences:user:matched`
* `audiences:user:unmatched`
* `audiences:calculated`

Your webhook should be prepared to handle any of these events based on the `type` property in the received payload. Additional event types may be added in the future.

### Return a 200 Response

Send a successful 200 response to Courier as quickly as possible. Write any long-running processes as code that can run asynchronously outside the webhook endpoint.

## Verifying Signatures

Verify the events that Courier sends to your webhook endpoints. Courier can optionally sign the webhook events it sends to your endpoints by including a signature in each event's `courier-signature` header. This allows you to verify that the events were sent by Courier, not by a third party.

```bash
t=1631816343012,signature=33777cdae0468ff0939b3609d02d14e6e80ca093c2ea233455f0767055218875
```

Courier generates signatures using a hash-based message authentication code (HMAC) with SHA-256.

### Step 1: Extract the Timestamp and Signature from the Header

Split the header using the `,` character as the separator to get a list of elements. Then split each element using the `=` character as the separator to get a prefix and value pair.

The value for the prefix `t` corresponds to the timestamp, and `signature` corresponds to the signature.

Before you can verify signatures, you need to retrieve your endpoint's secret from your [Webhooks settings](https://app.courier.com/settings/webhooks) by clicking on a webhook configuration.

### Step 2: Prepare the `signed_payload` String

The `signed_payload` string is created by concatenating:

* The timestamp (as a string)
* The actual JSON payload (i.e., the request body)

### Step 3: Determine the Expected Signature

Compute an HMAC with the SHA256 hash function. Use the Courier webhook secret as the key and the payload string as the message.

```js
const examplePayload = {
  data: {
    enqueued: 1631833955972,
    event: 'SNKDF4GZK94M0NHXBJQDF8GAQWM1',
    id: '1-6143cf63-4f27670f6304f465462695f2',
    providers: [],
    recipient: 'c156665c-a76c-4440-9676-f25c1b04ba93',
    recipientId: 'c156665c-a76c-4440-9676-f25c1b04ba93',
    status: 'ENQUEUED',
  },
  type: 'message:updated',
};

function parseHeader(header: string) {
  if (typeof header !== 'string') {
    return null;
  }

  return header.split(',').reduce((accum, item) => {
    const kv = item.split('=');

    if (kv[0] === 't') {
      accum.timestamp = kv[1];
    }
    if (kv[0] === 'signature') {
      accum.signature = kv[1];
    }

    return accum;
  }, { timestamp: -1, signature: '' });
}

// headers refers to the request headers from the incoming webhook event from Courier
const headerDetails = parseHeader(headers['courier-signature']);

const unfoldedSignature = crypto
  .createHmac('sha256', secret)
  .update(`${headerDetails.timestamp}.${JSON.stringify(examplePayload)}`, 'utf8')
  .digest('hex');

const isValid = unfoldedSignature === headerDetails.signature;
```

### Step 4: Compare the Signatures

Compare the signature (or signatures) in the header to the expected signature. For an equality match, compute the difference between the current timestamp and the received timestamp, then decide if the difference is within your tolerance.

To protect against timing attacks, use constant-time string comparison to compare the expected signature to each of the received signatures.

## Event Data

### message:updated

The `data` property in the webhook response payload for the `message:updated` event is identical to the information returned from the [GET /message/:message\_id](../../reference/logs/by-id) endpoint.

For example, when an email is sent, it goes from `ENQUEUED` → `SENT` → `DELIVERED` → `OPENED`.

Here's a rundown of how the payloads would look for each event:

**Example Payload for an ENQUEUED Event**

```json
{
  "data": {
    "enqueued": 1630512466717,
    "event": "SFTYJKSF0241SVH2TWY97TTFFTQG",
    "id": "1-612fa552-15f7d6ba51bf229857c037a7",
    "notification": "SFTYJKSF0241SVH2TWY97TTFFTQG",
    "providers": [],
    "recipient": "b19fb0e0-8cd6-4337-b41c-92c780c80d1a",
    "recipientId": "b19fb0e0-8cd6-4337-b41c-92c780c80d1a",
    "status": "ENQUEUED"
  },
  "type": "message:updated"
}
```

**Example payload for SENT event**

```json
{
  "data": {
    "enqueued": 1630512466717,
    "event": "SFTYJKSF0241SVH2TWY97TTFFTQG",
    "id": "1-612fa552-15f7d6ba51bf229857c037a7",
    "notification": "SFTYJKSF0241SVH2TWY97TTFFTQG",
    "providers": [
      // provider specific info
    ],
    "recipient": "b19fb0e0-8cd6-4337-b41c-92c780c80d1a",
    "recipientId": "b19fb0e0-8cd6-4337-b41c-92c780c80d1a",
    "sent": 1630512468691,
    "status": "SENT"
  },
  "type": "message:updated"
}
```

**Example payload for DELIVERED event**

```json
{
  "data": {
    "delivered": 1630512501708,
    "enqueued": 1630512466717,
    "event": "SFTYJKSF0241SVH2TWY97TTFFTQG",
    "id": "1-612fa552-15f7d6ba51bf229857c037a7",
    "notification": "SFTYJKSF0241SVH2TWY97TTFFTQG",
    "providers": [
      // provider specific info
    ],
    "recipient": "b19fb0e0-8cd6-4337-b41c-92c780c80d1a",
    "recipientId": "b19fb0e0-8cd6-4337-b41c-92c780c80d1a",
    "sent": 1630512468691,
    "status": "DELIVERED"
  },
  "type": "message:updated"
}
```

**Example payload for OPENED event**

```json
{
  "data": {
    "delivered": 1630512501708,
    "enqueued": 1630512466717,
    "event": "SFTYJKSF0241SVH2TWY97TTFFTQG",
    "id": "1-612fa552-15f7d6ba51bf229857c037a7",
    "notification": "SFTYJKSF0241SVH2TWY97TTFFTQG",
    "opened": 1630518873072,
    "providers": [
      // provider specific info
    ],
    "recipient": "b19fb0e0-8cd6-4337-b41c-92c780c80d1a",
    "recipientId": "b19fb0e0-8cd6-4337-b41c-92c780c80d1a",
    "sent": 1630512468691,
    "status": "OPENED"
  },
  "type": "message:updated"
}
```

\*\* Example payload for UNROUTABLE event \*\*

```json
{
  "data": {
    "enqueued": 1644594639213,
    "error": "No providers added",
    "event": "5QDEPHNXMC49GVP83X69J1SXV7CE",
    "id": "1-620685cf-bf64c91e464de93a283cb791",
    "notification": "5QDEPHNXMC49GVP83X69J1SXV7CE",
    "providers": [],
    "reason": "NO_PROVIDERS",
    "recipient": "ab666576-ac30-4d5f-9559-29b85e94a8a4",
    "recipientId": "ab666576-ac30-4d5f-9559-29b85e94a8a4",
    "status": "UNROUTABLE"
  },
  "type": "message:updated"
}
```

\*\* Example payload for UNDELIVERABLE event \*\*

```json
{
  "data": {
    "enqueued": 1644595488228,
    "error": "Notification opted out by user",
    "event": "AVV5FVHYX5MJX3NT634DM3EMAYE0",
    "id": "1-62068920-79afc13b939d3b7a4ad1e376",
    "notification": "AVV5FVHYX5MJX3NT634DM3EMAYE0",
    "providers": [
      {
        "error": "Notification opted out by user",
        "status": "UNDELIVERABLE"
      }
    ],
    "reason": "UNSUBSCRIBED",
    "recipient": "suhas@courier.com",
    "recipientId": "suhas_stable_issue_2",
    "status": "UNDELIVERABLE"
  },
  "type": "message:updated"
}
```

***

For the notification template submission workflow, Courier emits `notification:submitted`, `notification:submission_canceled`, and `notification:published` events.

### notification:submitted

Example:

```json
{
  "data": {
    "id": "<NOTIFICATION_ID>",
    "submission_id": 1620095270807 // submission ID is a timestamp of submission
  },
  "type": "notification:submitted"
}
```

### notification:submission\_canceled

Example:

```json
{
  "data": {
    "id": "<NOTIFICATION_ID>",
    "canceled_at": 1620095280807,
    "submission_id": 1620095270807
  },
  "type": "notification:submission_canceled"
}
```

### notification:published

Example

```json
{
  "data": {
    "id": "<NOTIFICATION_ID>",
    "published_at": 1620095270807
  },
  "type": "notification:published"
}
```

### audiences:updated

This event is fired when your [audience](../../reference/audiences/intro) is created or updated.

Example:

```json
{
  "data": {
    "audience_id": "software-engineers",
    "audience_version": 11,
    "filter": {
      "path": "title",
      "value": "Software Engineer",
      "operator": "EQ"
    }
  },
  "type": "audiences:updated"
}
```

### audiences:user:matched

This event is fired when a user is matched to an audience. This usually happens when a user is created or updated. If user's [profile](../../reference/profiles/replace) matches any of the audience's filters, the user is matched to the audience.

Example:

```json
{
  "data": {
    "audience_id": "software-engineers",
    "audience_version": 11,
    "reason": "EQ('title', 'Software Engineer') => true",
    "user_id": "suhas"
  },
  "type": "audiences:user:matched"
}
```

### audiences:user:unmatched

This event is fired when a user is unmatched to an audience. This usually happens when a user is [removed](https://www.courier.com/docs/reference/profiles/delete/) or updated in such a way that it no longer matches any of the audience's filters.

Example

```json
{
  "data": {
    "audience_id": "favorite-fooss-players",
    "audience_version": 4,
    "reason": "EQ('favorite_game', 'fosss') => true, EQ('gender', 'pigeon') => true, EQ('style', 'defend') => true",
    "user_id": "suhas_with_foss"
  },
  "type": "audiences:user:unmatched"
}
```

### audiences:calculated

This event is fired when Courier is done calculating audiences. This is a background process that runs every time you create or update an audience. It can take variable time depending on total number of users you have created in your Courier workspace.

Example

```json
{
  "data": {
    "audience_id": "software-engineers",
    "user_count": 1,
    "total_users": 28,
    "total_users_filtered": 27
  },
  "type": "audiences:calculated"
}
```


# Roles and Permissions
Source: https://www.courier.com/docs/platform/workspaces/roles-permissions

Courier’s Business Tier offers role-based access control, allowing admins to assign predefined roles with varying access levels to teammates for secure, organized platform usage and log visibility.

> Understanding Courier's roles and permissions and how to assign roles to members of your tenant.

Free and Developer tier users can [upgrade to access roles](https://app.courier.com/settings/billing).

## Assigning Roles to Teammates in Your Tenant

Workspace administrators can [invite teammates](./team-security#inviting-team-members-to-your-workspace) and assign/change teammate roles from a pre-defined list of roles.

<Note>
  **ACCESSING TEAM SETTINGS**

  Go to **Settings > Team** to invite, assign and manage team member roles.
</Note>

<Frame caption="Team Roles">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/roles-permissions.png" alt="Team Roles" />
</Frame>

## Roles and Role-Based Feature Access

Below you'll find the complete list of pre-defined roles and their feature access.

<Note>
  **NOTE**

  Access to the data logs has three pre-defined levels
</Note>

* **Level 1:** View a list of messages with a high-level summary.
* **Level 2:** View list of messages with high-level summary and message status details (received, sent, delivered). Level 2 allows users to open the request received tab, which includes the profile data and their respective PII as well as any data passed via the request which may include PHI.
* **Full Access:** List of messages in logs along with high-level summary, message status details (received, sent, delivered). Rendered message visible in Logs.

| Role                   | Description                                                                                                    | Feature Access                                                                                                                                                                               |
| ---------------------- | -------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Admin**              | Best for company administrators and business owners. Has permissions for everything.                           | \*   Full read and write access<br />\*   Account management<br />\*   Edit Access to API keys                                                                                               |
| **Manager**            | Best for a team manager who doesn't need to update users or billing.                                           | \*   Full read and write access<br />\*   View Access to API keys                                                                                                                            |
| **Developer**          | Best for engineers and developers who will primarily work with Courier's API and template designer.            | \*   Read-only access in the Live environment<br />\*   Full read and write access in the Test environment<br />\*   Level 2 Logs Access in Production<br />\*   Full Access to Logs in Test |
| **Designer**           | Has the ability to update templates and brands but can't update integrations or settings.                      | \*   Full read and write access for the Designer, Brands and Metrics.<br />\*   Read-only access for integrations and Lists<br />\*   Level 1 Logs Access                                    |
| **Support Specialist** | Best for customer support specialists regularly use the platform but don't need to update templates or brands. | \*   Read-only access to Designer, Brands, Integrations.<br />\*   Full read and write access in Lists and Metrics<br />\*   Full Logs access                                                |
| **Analyst**            | Best for users who need full read-only access to the platform (except logs).                                   | \*   Read-only access to the Designer, Brands, Integrations and Lists<br />\*   Full access to Metrics<br />\*   Level 2 Logs Access                                                         |


# Workspace Security Settings
Source: https://www.courier.com/docs/platform/workspaces/team-security

Manage team invites, enable Google or Okta SSO, and control workspace discoverability for verified domains in Courier’s workspace settings for enhanced access control and security.

> How to add teammates to your Courier Account, require Google SSO, and making your workspace domain discoverable for your teammates.

## Inviting Team Members to your Workspace

1. Open [Settings](https://app.courier.com/settings) > Team
2. Click 'Invite User'
3. Invite one email at a time

<Frame caption="Workspace Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/workspace-security/workspace-settings.png" alt="Workspace Settings" />
</Frame>

<br />

<Frame caption="Invite a User">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/workspace-security/workspace-team.png" alt="Invite a User" />
</Frame>

<br />

<Frame caption="Send Invite">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/workspace-security/workspace-invite.png" alt="Send Invite" />
</Frame>

## Security Settings

Single sign-on options for workspace team members.

### Require Google SSO

To require your teammates to log in via Google SSO:

1. Open [Settings](https://app.courier.com/settings) > Team
2. Check `Require Google SSO` from configured domains

<Frame caption="SSO Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/workspace-security/workspace-sso.png" alt="SSO Settings" />
</Frame>

### Make your Workspace Discoverable

You can elect to allow users who sign up with emails that match your domain to discover and request joining this workspace. They will not have access unless you grant it.

1. Open [Settings](https://app.courier.com/settings) > Team
2. Confirm your email domain is in the list of Approved Domains (if not, contact support).
3. Check `Users from approved domains should be able to discover my workspace` under **Discoverability & Security**.
4. This will allow for your workspace to be discoverable and give you 3 options from a drop down menu from which you can toggle your preferences.
   * Everyone from an approved domain can request access means an admin needs to approve the request.
   * Everyone from approved domain can join means users from an approved domain can join right away.
   * Must be added by an IT admin means an IT admin needs to manually add new members (this is specific for companies using Okta provisioning).

<Frame caption="Discoverability Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/workspace-security/workspace-discoverability.png" alt="Discoverability Settings" />
</Frame>

### Okta SSO

Allow your team members to sign in to Courier with Okta Single-Sign-On.

<Note>
  **INFO**

  Okta SSO is a Courier Business feature. Please [contact](https://www.courier.com/request-demo/) our Product Experts for more details on our pricing plans.
</Note>

**Read more:** [Okta Integration](./okta-integration)

## Remove Users From Your Account

To remove a user, you can open the drop-down menu to the right of the user's email address, and select `Remove User`.

<Frame caption="Remove a User">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/workspace-security/workspace-remove.png" alt="Remove a User" />
</Frame>


# Tracking Email Opens and Clicks
Source: https://www.courier.com/docs/platform/workspaces/track-email-opens

Courier supports open and click tracking for emails, with provider-specific setup and optional per-link tracking overrides in action or text blocks.

> Setting up and managing open and click-through tracking for email notifications.

## Courier Email Tracking Settings

Courier allows you to turn on email open and click-through tracking in your Live environment.

To enable these settings in Courier, navigate to the [General](https://app.courier.com/settings/general) tab of the Courier App settings.

<Frame caption="Courier General Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/email-opens-clicks/email-opens-settings.png" alt="Courier General Settings" />
</Frame>

### Provider Email Tracking Settings

Some email providers require additional settings on their end to enable these settings in Courier to take effect.

* Sendgrid [Tracking Settings](https://sendgrid.com/docs/ui/account-and-settings/tracking/)
* Mailgun [Tracking Messages](https://documentation.mailgun.com/en/latest/user_manual.html#tracking-messages)

## Disable Tracking Links On a Link-By-Link Basis

If you have link-tracking turned on in your Courier settings, you can disable link tracking on a link-by-link basis in the action block settings or the hyperlink settings.

### Disable Link Tracking in an Action Block

<Frame caption="Action Block Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/email-opens-clicks/email-cta-tracking.png" alt="Action Block Settings" />
</Frame>

### Disable Link Tracking in a Text Block Hyperlink

<Frame caption="Hyperlink Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/email-opens-clicks/email-link-tracking.png" alt="Hyperlink Settings" />
</Frame>


# Get an audience
Source: https://www.courier.com/docs/reference/audiences/by-id

get /audiences/{audience_id}
Returns the specified audience by id.



# Delete an audience
Source: https://www.courier.com/docs/reference/audiences/delete

delete /audiences/{audience_id}
Deletes the specified audience.



# Usage
Source: https://www.courier.com/docs/reference/audiences/example-usage

Send messages to a defined audience by specifying the audience_id in the to field of the Send endpoint payload.

```json
{
  "message": {
    "to": {
      "audience_id": "<audience_id>"
    },
    "content": {
      "title": "Hello World",
      "body": "Hello there"
    },
    "routing": {
      "channels": ["push", "sms"],
      "method": "single"
    }
  }
}
```


# Audiences
Source: https://www.courier.com/docs/reference/audiences/intro

Courier Audiences let you dynamically group users based on rules and filters, enabling targeted notifications without manual list management.



# List audience members
Source: https://www.courier.com/docs/reference/audiences/list-audience-members

get /audiences/{audience_id}/members
Get list of members of an audience.



# List all audiences
Source: https://www.courier.com/docs/reference/audiences/list-audiences

get /audiences
Get the audiences associated with the authorization token.



# Audience Operators
Source: https://www.courier.com/docs/reference/audiences/operators

Use audience operators to target users by matching profile attributes using logical, string, numeric, date, and existence-based conditions—including support for nested AND/OR filters.

Courier supports the following operators:

## Equality & Inequality

### `EQ`

Checks if a specified attribute is equal to a given value.

```ts
{
  "operator": "EQ",
  "value": "Oakland",
  "path": "location.city"
}
```

### `NEQ`

Checks if a specified attribute is not equal to a given value.

```ts
{
  "operator": "NEQ",
  "value": "sonicpigeons.com",
  "path": "company"
}
```

## String Comparison

### `STARTS_WITH`

Checks if a specified attribute starts with a given value.

```ts
{
  "operator": "STARTS_WITH",
  "value": "pigeons",
  "path": "email"
}
```

### `ENDS_WITH`

Checks if a specified attribute ends with a given value.

```ts
{
  "operator": "ENDS_WITH",
  "value": "sonicpigeons.com",
  "path": "email"
}
```

### `INCLUDES`

Checks if a specific attribute in the user's profile includes any of the specified values.

```ts
{
  "operator": "INCLUDES",
  "value": ["push", "email"],
  "path": "favorite_notification_channel"
}
```

### `OMIT`

Checks if a specified attribute is not included in the user's profile.

```ts
{
  "operator": "OMIT",
  "value": "email",
  "path": "favorite_notification_channel"
}
```

## Numeric Comparison

### `GT`

Checks if a specific numeric attribute in the user's profile is greater than a specified value.

```ts
{
  "operator": "GT",
  "value": "100",
  "path": "foss_ball_victories"
}
```

### `GTE`

Checks if a specific numeric attribute in the user's profile is greater than or equal to a specified value.

```ts
{
  "operator": "GTE",
  "value": "99",
  "path": "foss_ball_victories"
}
```

### `LT`

Checks if a specific numeric attribute in the user's profile is less than a specified value.

```ts
{
  "operator": "LT",
  "value": "100",
  "path": "foss_ball_victories"
}
```

### `LTE`

Checks if a specific numeric attribute in the user's profile is less than or equal to a specified value.

```ts
{
  "operator": "LTE",
  "value": "99",
  "path": "foss_ball_victories"
}
```

## Date Comparison

### `IS_BEFORE`

Checks if a specified date attribute is before a given date. The date should be in ISO 8601 format.

```ts
{
  "operator": "IS_BEFORE",
  "value": "1990-01-01",
  "path": "date_of_birth"
}
```

### `IS_AFTER`

Checks if a specified date attribute is after a given date. The date should be in ISO 8601 format.

```ts
{
  "operator": "IS_AFTER",
  "value": "1990-01-01",
  "path": "date_of_birth"
}
```

## Existence

### `EXISTS`

Checks if a specific attribute exists in the user's profile.

```ts
{
  "operator": "EXISTS",
  "value": "true", // false if you want to check for the absence of the attribute
  "path": "email"
}
```

## Special Operators

### `MEMBER_OF`

Checks if the user is a member of the tenant specified in the path.

```ts
{
  "operator": "MEMBER_OF",
  "value": "acme",
  "path": "account_id"
}
```

<Warning>
  **caution**

  All operators are case-sensitive.
</Warning>

## Nested Operator Examples

Here are some examples demonstrating how to use nested operators for more complex audience targeting:

### Combining AND and OR Operators

#### Scenario: Notify Software Engineers in San Francisco or Oakland

```json
{
  "operator": "AND",
  "filters": [
    {
      "operator": "EQ",
      "path": "title",
      "value": "Software Engineer"
    },
    {
      "operator": "OR",
      "filters": [
        {
          "operator": "EQ",
          "path": "location.city",
          "value": "Oakland"
        },
        {
          "operator": "EQ",
          "path": "location.city",
          "value": "San Francisco"
        }
      ]
    }
  ]
}
```

### Combining Equality and Inclusion Checks

#### Scenario: Notify Software Engineers who like TypeScript

```json
{
  "operator": "AND",
  "filters": [
    {
      "operator": "EQ",
      "path": "title",
      "value": "Software Engineer"
    },
    {
      "operator": "INCLUDES",
      "path": "favorite_programming_languages",
      "value": "Typescript"
    }
  ]
}
```


# Update an audience
Source: https://www.courier.com/docs/reference/audiences/put

put /audiences/{audience_id}
Creates or updates audience.



# Get an audit event
Source: https://www.courier.com/docs/reference/audit-events/by-id

get /audit-events/{audit-event-id}
Fetch a specific audit event by ID.



# Audit Events
Source: https://www.courier.com/docs/reference/audit-events/intro

Courier’s Audit Events API lets Business-tier users query auditable events in their workspace, offering traceability via the Audit Trail for actions and changes made.

<Note>
  **INFO**

  This feature is available to [Business-tier](https://www.courier.com/pricing/) customers.
</Note>

The Audit Events API allows you to query events Courier has audited in your workspace.

Review the [Audit Trail guide](../../platform/logging/audit-trail/) for more information on how Audit Trail works.


# Get all audit events
Source: https://www.courier.com/docs/reference/audit-events/list

get /audit-events
Fetch the list of audit events



# Introduction
Source: https://www.courier.com/docs/reference/auth/intro

Use the Auth API to generate tokens with fine-grained permissions for accessing users, messages, brands, inbox events, and preferences based on scoped roles.

# Auth Token Management

* `user_id:<user-id>` - Gives the token access to a given user. Multiple can be listed. Ex `user_id:pigeon user_id:bluebird`. User ID scopes must be used in conjunction with other scopes to specify which resources of the user the token can access.
* `read:messages` - Gives the token access to read messages. Must be used in conjunction with one or more user\_ids.
* `read:user-tokens` - Gives the token access to read user tokens. Must be used in conjunction with one or more `user_id` scopes.
* `write:user-tokens` - Gives the token access to write user tokens. Must be used in conjunction with one or more `user_id` scopes.
* `read:brands[:<brand_id>]` Give the token access to read brands, optionally restricted to a specific brand\_id. Examples `read:brands`, `read:brands:my_brand`.
* `write:brands[:<brand_id>]` Give the token access to read brands, optionally restricted to a specific brand\_id. Examples `write:brands`, `write:brands:my_brand`.
* `inbox:read:messages` Give the token access to read inbox messages.
* `inbox:write:events` Give the token access to write inbox events, such as mark message as read.
* `read:preferences` Give the token access to read user preferences.
* `write:preferences` Give the token access to write user preferences.


# Create an auth token
Source: https://www.courier.com/docs/reference/auth/issue-token

post /auth/issue-token
Returns a new access token.



# Authentication
Source: https://www.courier.com/docs/reference/authorization

Authenticate with the Courier REST API using either Bearer tokens or Base64-encoded Basic Auth credentials, ensuring secure access to send notifications across supported languages.

## Token Auth​

Courier assigns you an "Auth Token" when you [Register your account](https://app.courier.com/signup). You can retrieve this token from any of your [Notification](https://app.courier.com/assets/templates) detail pages.

<Frame caption="Courier Auth Token">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/notification-in-detail-view.dec48aa.1312.png" />
</Frame>

This token should be passed as a `Bearer Token` in an `Authorization` header with each request. Remember, it is best not to store an authorization token in your source control but instead reference values stored in environment variables or some other configuration. However you handle your tokens, be sure to keep them private and secure.

<Tabs>
  <Tab title="cURL">
    ```bash
    curl --request POST \
         --url https://api.courier.com/send \
         --header 'Authorization: Bearer <token>'
    ```
  </Tab>

  <Tab title="Ruby">
    ```ruby
    require 'uri'
    require 'net/http'
    require 'openssl'

    url = URI("https://api.courier.com/send")

    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Post.new(url)
    request["Authorization"] = 'Bearer <token>'
    ```
  </Tab>

  <Tab title="Python">
    ```python
    import requests

    url = "https://api.courier.com/send"

    headers = {
      'Authorization': "Bearer <token>"
    }
    ```
  </Tab>

  <Tab title="JavaScript">
    ```js
    const xhr = new XMLHttpRequest();

    xhr.addEventListener("readystatechange", function () {
      if (this.readyState === this.DONE) {
        console.log(this.responseText);
      }
    });

    xhr.open("POST", "https://api.courier.com/send");
    xhr.setRequestHeader("Authorization", "Bearer <token>");

    xhr.send(data);
    ```
  </Tab>
</Tabs>

## Basic Auth

Basic Auth works by passing a username and password in an `Authorization` header. These credentials should be Base64 encoded, which can typically be accomplished using a function or method available in your language of choice. For example, JavaScript provides the `btoa()` and `atob()` functions to Base64 encode and decode respectively.

A username of `normanosborn@oscorp.com` and password of `goblin616` are concatenated to `normanosborn@oscorp.com:goblin616`. This concatenated string becomes "bm9ybWFub3Nib3JuQG9zY29ycC5jb206Z29ibGluNjE2" once it is Base64 encoded.

<Tabs>
  <Tab title="cURL">
    ```bash
    curl --request POST \
         --url https://api.courier.com/send \
         --header 'Authorization: Basic <Base64 encoded string>'
    ```
  </Tab>

  <Tab title="Ruby">
    ```ruby
    require 'uri'
    require 'net/http'
    require 'openssl'

    url = URI("https://api.courier.com/send")

    http = Net::HTTP.new(url.host, url.port)
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE

    request = Net::HTTP::Post.new(url)
    request["Authorization"] = 'Basic <Base64 encoded string>'
    ```
  </Tab>

  <Tab title="Python">
    ```python
    import requests

    url = "https://api.courier.com/send"

    headers = {
      'Authorization': "Basic <Base64 encoded string>"
    }
    ```
  </Tab>

  <Tab title="JavaScript">
    ```js
    const xhr = new XMLHttpRequest();

    xhr.addEventListener("readystatechange", function () {
      if (this.readyState === this.DONE) {
        console.log(this.responseText);
      }
    });

    xhr.open("POST", "https://api.courier.com/send");
    xhr.setRequestHeader("Authorization", "Basic <Base64 encoded string>");

    xhr.send(data);
    ```
  </Tab>
</Tabs>

To authenticate with the Courier REST API, use the email associated with your account as the username and the Auth Token as your password.


# Automations API
Source: https://www.courier.com/docs/reference/automation/intro

The Automations API enables invoking automation templates or ad hoc workflows, and retrieving automation run details, streamlining notification orchestration through Courier.

* Invoke an existing automation template
* Invoke an adhoc automation (An automation supplied in the call via JSON)
* Get information about an automation run, the "Automation Run Object:
  To learn more about Automations, including examples, instructions on how to use the designer, and information about what Automations can do visit the [automations guide](../../platform/automations/).


# Invoke Ad Hoc Automation
Source: https://www.courier.com/docs/reference/automation/invoke

post /automations/invoke
Invoke an ad hoc automation run. This endpoint accepts a JSON payload with a series of automation steps. For information about what steps are available, checkout the ad hoc automation guide [here](https://www.courier.com/docs/automations/steps/).



# Invoke an Automation
Source: https://www.courier.com/docs/reference/automation/invoke-template

post /automations/{templateId}/invoke
Invoke an automation run from an automation template.



# Create a new brand
Source: https://www.courier.com/docs/reference/brands/create-a-brand

post /brands



# Delete a brand
Source: https://www.courier.com/docs/reference/brands/deleta-a-brand

delete /brands/{brand_id}
Delete a brand by brand ID.



# Get a brand
Source: https://www.courier.com/docs/reference/brands/get-a-brand

get /brands/{brand_id}
Fetch a specific brand by brand ID.



# Brands API
Source: https://www.courier.com/docs/reference/brands/intro

The Brands API enables programmatic creation and management of branded email templates with custom themes, instantly updating all notifications using the brand.



# List brands
Source: https://www.courier.com/docs/reference/brands/list-brands

get /brands
Get the list of brands.



# Replace a brand
Source: https://www.courier.com/docs/reference/brands/update-a-brand

put /brands/{brand_id}
Replace an existing brand with the supplied values.



# Add users
Source: https://www.courier.com/docs/reference/bulk/add_users

post /bulk/{job_id}
Ingest user data into a Bulk Job



# Create a bulk job
Source: https://www.courier.com/docs/reference/bulk/create_job

post /bulk



# Get a Job
Source: https://www.courier.com/docs/reference/bulk/get_job

get /bulk/{job_id}
Get a bulk job



# Get users
Source: https://www.courier.com/docs/reference/bulk/get_users

get /bulk/{job_id}/users
Get Bulk Job Users



# Introduction
Source: https://www.courier.com/docs/reference/bulk/intro

Programmatically manage branded email templates with the Brands API, enabling automatic updates to headers, footers, and styling across all associated notifications.

New to bulk processing? Check out this guide to start sending bulk notifications in minutes.


# Run a job
Source: https://www.courier.com/docs/reference/bulk/run_job

post /bulk/{job_id}/run
Run a bulk job



# Idempotent Requests
Source: https://www.courier.com/docs/reference/idempotent-requests

Courier supports idempotent [idempotency](https://en.wikipedia.org/wiki/Idempotence) POST requests using an Idempotency-Key header to safely retry without duplication, storing results for 24 hours (configurable up to 1 year).

This is useful when an API call is disrupted in transit and you do not receive a response. For example, if a request to [send a notification](./send/message) does not respond due to a network connection error, you can retry the request with the same idempotency key to guarantee that no more than one notification is sent.

To perform an idempotent request, provide an additional `Idempotency-Key: <key>` header to the request.

```bash cuRL
curl --request POST \
     --url https://api.courier.com/send \
     --header 'accept: application/json' \
     --header 'content-type: application/json' \
     --header 'Idempotency-Key: 5de04035-9105-4c76-a6dc-fd20441a5ab9' \
     --data "event=RESET_PASSWORD"
     --data "recipient=AzureDiamond"
     --data "data[resetToken]=7c334d35"
```

Courier's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key, regardless of whether it succeeded or failed. Subsequent requests with the same key return the same result, including `500` errors.

An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.

Keys are eligible to be removed from the system after they're at least 24 hours old, and a new request is generated if a key is reused after the original has been pruned.

Results are only saved if an API endpoint started executing. If incoming parameters failed validation, or the request conflicted with another that was executing concurrently, no idempotent result is saved because no API endpoint began execution. It is safe to retry these requests.

All `POST` requests accept idempotency keys. Sending idempotency keys in `GET` and `DELETE` requests has no effect and should be avoided, as these requests are idempotent by definition.

## Idempotency Key Expiration

By default, the idempotency key specified will be eligible for reuse after 24 hours. There is no need to manually prune the keys.

The expiration of the idempotency key can be altered by setting a `x-idempotency-expiration` header value. The value of this header can be either epoch milliseconds or an ISO-8601 formatted date string. The minimum value that can be set is 24 hours. The maximum value that can be set is 1 year.

**Note**: idempotency key expiration cannot be updated until the original request expires, even if you make a new request is with the same key and different `x-idempotency-expiration` header value.


# Courier Track Event
Source: https://www.courier.com/docs/reference/inbound/courier-track-event

post /inbound/courier



# Introduction
Source: https://www.courier.com/docs/reference/intro

The Courier REST API enables sending messages, retrieving message details, and managing user profiles and preferences across your audience.

If you're new to Courier, you can also follow one of our [Getting Started with Courier Guides](../getting-started/quickstarts/nodejs) to send your first mess


# Get a list
Source: https://www.courier.com/docs/reference/lists/by-id

get /lists/{list_id}
Returns a list based on the list ID provided.



# Delete a list
Source: https://www.courier.com/docs/reference/lists/delete

delete /lists/{list_id}
Delete a list by list ID.



# Unsubscribe a user from a list
Source: https://www.courier.com/docs/reference/lists/delete-subscription

delete /lists/{list_id}/subscriptions/{user_id}
Delete a subscription to a list by list ID and user ID.



# Lists
Source: https://www.courier.com/docs/reference/lists/intro

The Lists API enables creating static user groups by subscribing/unsubscribing users, ideal for sending messages to predefined sets of recipients.



# Get all lists
Source: https://www.courier.com/docs/reference/lists/list

get /lists
Returns all of the lists, with the ability to filter based on a pattern.



# Add subscribers to a list
Source: https://www.courier.com/docs/reference/lists/post-subscribe

post /lists/{list_id}/subscriptions
Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.



# Subscribe users to a list
Source: https://www.courier.com/docs/reference/lists/put-subscribe

put /lists/{list_id}/subscriptions
Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.



# Subscribe a single user to a list
Source: https://www.courier.com/docs/reference/lists/recipient-subscribe

put /lists/{list_id}/subscriptions/{user_id}
Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).



# Update a list
Source: https://www.courier.com/docs/reference/lists/replace

put /lists/{list_id}
Create or replace an existing list with the supplied values.



# Restore a list
Source: https://www.courier.com/docs/reference/lists/restore

put /lists/{list_id}/restore
Restore a previously deleted list.



# Get the subscriptions for a list
Source: https://www.courier.com/docs/reference/lists/subscriptions

get /lists/{list_id}/subscriptions
Get the list's subscriptions.



# Archive message
Source: https://www.courier.com/docs/reference/logs/archive-request-by-id

put /requests/{request_id}/archive



# Get message
Source: https://www.courier.com/docs/reference/logs/by-id

get /messages/{message_id}
Fetch the status of a message you've previously sent.



# Cancel message
Source: https://www.courier.com/docs/reference/logs/cancel

post /messages/{message_id}/cancel
Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).



# Get message history
Source: https://www.courier.com/docs/reference/logs/history-by-id

get /messages/{message_id}/history
Fetch the array of events of a message you've previously sent.



# Messages
Source: https://www.courier.com/docs/reference/logs/intro

The Messages API lets you retrieve, filter, and paginate message logs across channels, with support for event metadata, delivery tracking, and message cancellation.

# Introduction

Courier's /messages endpoint is designed to retrieve logs related to your message activity. This feature allows developers to track and analyze events, such as message deliveries or errors, across multiple notification channels.

## Key Features

1. Filter Options: You can filter logs by event type (e.g., delivery status), channel (email, SMS, etc.), or specific recipient.
2. Pagination: Results are paginated, enabling you to retrieve logs in manageable chunks.
3. Event Metadata: Logs include timestamps, event IDs, and detailed information about the status of each notification.

## Usage Example

To query logs, send a `GET` request to the `/messages` endpoint with optional query parameters like `event`, `messageId`, `recipient`, or `status`. An example of a query might include:

```bash
https://api.courier.com/messages?event=7SM32JEF1QMDN2N6D3YYMN5T79A2&status=OPENED&status=SENT&cursor=MTcwNTAxMTg2MDg2NiwxLTY1YTA2YTk1LTQ5YTA0MWY0YzNmOTExZmZmNDU2NGFkYw==
```

## Message Response

The response from the API will return a `paging` object if there are more than 10 results. Users can use the `cursor` in subsequent query calls to paginate over the results. Only 10 can be fetched at a time.

### Message Latency

<Warning>The latency for retreiving message queries can range between a few seconds to a couple minutes in some exceptional cases. We recommend you implement message query fetching with a delay to avoid retreiving empty content.</Warning>

```json
{
	"paging": {
		"cursor": "MTY5MjgxMjc2NzUyOCwxLTY0ZTY0NWUwLTUwMjZlNTZiNjQ0ZTE0MmFkOWNjYWI5ZQ==",
		"more": true
	},
	"results": [
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		},
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		},
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		},
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		},
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		},
		{
			"enqueued": 1694035495519,
			"event": "<string>",
			"id": "<string>",
			"listId": "<string>",
			"listMessageId": "<string>",
			"notification": "<string>",
			"recipient": "rodrigo@courier.com",
			"recipientId": "<string>",
			"sent": 1694035497475,
			"status": "SENT",
			"tags": [
				"opt-out"
			]
		},
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		},
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		},
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		},
		{
			"enqueued": 1699560266998,
			"event": "<string>",
			"id": "<string>",
			"notification": "<string>",
			"opened": 1699733991001,
			"recipient": "rodrigo@courier.com",
			"recipientId": "email_2be96bfd56e7ea829bcab86862086406",
			"sent": 1699560269425,
			"status": "OPENED"
		}
	]
}
```


# List messages
Source: https://www.courier.com/docs/reference/logs/list

get /messages
Fetch the statuses of messages you've previously sent.



# Get message content
Source: https://www.courier.com/docs/reference/logs/output-by-id

get /messages/{message_id}/output



# null
Source: https://www.courier.com/docs/reference/notifications/delete-notifications-checks

delete /notifications/{id}/{submissionId}/checks



# null
Source: https://www.courier.com/docs/reference/notifications/get-notifications

get /notifications



# null
Source: https://www.courier.com/docs/reference/notifications/get-notifications-checks

get /notifications/{id}/{submissionId}/checks



# null
Source: https://www.courier.com/docs/reference/notifications/get-notifications-content

get /notifications/{id}/content



# null
Source: https://www.courier.com/docs/reference/notifications/get-notifications-draftcontent

get /notifications/{id}/draft/content



# null
Source: https://www.courier.com/docs/reference/notifications/put-notifications-checks

put /notifications/{id}/{submissionId}/checks



# Get a profile
Source: https://www.courier.com/docs/reference/profiles/by-id

get /profiles/{user_id}
Returns the specified user profile.



# Create a profile
Source: https://www.courier.com/docs/reference/profiles/create

post /profiles/{user_id}
Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.



# Delete a profile
Source: https://www.courier.com/docs/reference/profiles/delete

delete /profiles/{user_id}
Deletes the specified user profile.



# Profiles API
Source: https://www.courier.com/docs/reference/profiles/intro

The Profiles API allows you to manage profile information associated with a [user](/docs/platform/users/). The profile object conforms with [OIDC standard claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).

user\_id Special Characters

Courier handles special characters automatically for user\_ids that are created with these characters (`@`, `#`, `%`, etc). These characters will be automatically encoded, so we suggest creating user\_ids without special characters.


# Update a profile
Source: https://www.courier.com/docs/reference/profiles/patch

patch /profiles/{user_id}



# Delete list subscriptions
Source: https://www.courier.com/docs/reference/profiles/remove-subscription

delete /profiles/{user_id}/lists
Removes all list subscriptions for given user.



# Replace a profile
Source: https://www.courier.com/docs/reference/profiles/replace

put /profiles/{user_id}
When using `PUT`, be sure to include all the key-value pairs required by the recipient's profile.
Any key-value pairs that exist in the profile but fail to be included in the `PUT` request will be
removed from the profile. Remember, a `PUT` update is a full replacement of the data. For partial updates,
use the [Patch](https://www.courier.com/docs/reference/profiles/patch/) request.



# Subscribe to one or more lists
Source: https://www.courier.com/docs/reference/profiles/subscribe-to-list

post /profiles/{user_id}/lists
Subscribes the given user to one or more lists. If the list does not exist, it will be created.



# Get list subscriptions
Source: https://www.courier.com/docs/reference/profiles/subscribed-list

get /profiles/{user_id}/lists
Returns the subscribed lists for a specified user.



# Rate Limiting
Source: https://www.courier.com/docs/reference/rate-limits

Most Courier APIs have no rate limits, but some—like List, Event, and Brand creation—are limited to 20 requests per minute. Login, invite, and category actions have additional limits.

## Send API

No rate limit.

If your send requests occur at a rate that exceeds your provider’s rate limit, Courier’s Send pipeline will retry your message for 72 hours following these [send retry rules](https://www.courier.com/docs/platform/sending/delivery-pipeline-resilience/).

## Profiles API

No rate limit.

Some Courier customers like to hit the Profiles API before or after hitting the Send endpoint as part of their Notifications send workflow. The Profiles API is built to scale with this type of workflow.

## Preferences API

No rate limit.

## Logs API

No rate limit.

## Lists API

* `POST` requests to the subscriptions endpoint are rate-limited to 20 creations per minute.
* `PUT` requests to the Lists API are rate-limited to 20 creations per minute.
* `GET` requests to the Lists API are not rate-limited.

## Events API

* `PUT` requests to the Events API are rate-limited to 20 creations per minute.
* `GET` requests to the Events API are not rate-limited.

## Brands API

* `PUT` requests to the Brands API are rate-limited to 20 creations per minute.
* `GET` requests to the Brands API are not rate-limited.

## Other Rate Limits

* **Invitations**: 50 invites per 15 minutes
* **Login attempts**: 5 attempts per 5 minutes
* **Categories**: 20 creations per minute


# Introduction
Source: https://www.courier.com/docs/reference/send/intro

Courier’s Send API delivers messages asynchronously to users, lists, or audiences using either templates or ad-hoc content, with flexible routing and support for attachments.

Recipients come in several forms:

* [User](../profiles/by-id) - A single user
* [List](../lists/by-id) - A pre-defined list of users stored with Courier
* [List pattern](../../tutorials/how-to-send-to-a-list-or-list-pattern-using-wildcarding) - A pattern that can target multiple lists of users at once
* [Audience](../audiences/intro) - A Courier audience containing users.

**You may also pass an array containing any combination of the above.**

**For ad-hoc users:**

```json
{
    "message": {
        "to": {
            "email": "darth@vader.com",
            "phone_number": "+123456789"
        }
    }
}
```

**For ad-hoc lists:**

```json
{
    "message": {
        "to": [
            {"email": "example1@courier.com"},
            {"email": "example2@courier.com"}
        ]
    }
}
```

There are two styles of notification sending:

* by template
* ad-hoc

To send by template, first create a notification using Courier Studio, then pass the template ID in your send call. To send ad-hoc, include the content of the notification directly in the send call using Elemental.

## Sending Attachments

To add an attachment, you'll need to first retrieve it from an encoder and convert it to a base64 string. Then you'll be able to add it to the send call using a provider override.

```json
{
   "providers":{
      "sendgrid":{
         "override":{
            "body":{
               "subject":"Requested file - lockheed.json",
               "attachments":[
                  {
                     "content":"eyJmb28iOiJiYXIifQ==", //base64 encoded attachment
                     "type":"application/json",
                     "filename":"lockheed.json"
                  }
               ]
            },
            "config":{
               "apiKey":"<your API Key>"
            }
         }
      }
   }
}
```

## Workspace Routing

Channel routing can be defined 3 ways:

* At the [template level](../../platform/sending/channel-priority)
* Inline with the request as a `routing` object
* Globally as the default workspace routing

Workspace routing is the default global routing strategy that can be [configured from the integrations page](https://app.courier.com/integrations/routing). This will allow users to send an inline message without the `routing` object present, and Courier will use your workspace routing settings to send your notification.

This object is not necessary if workspace routing is configured:

```json
"routing": {
			"method": "single",
			"channels": [
				"email"
			]
		}
```

<Frame caption="Workspace Routing">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/workspace-routing.png" alt="Workspace Routing" />
</Frame>

With this setting, you can send a request like so:

```json
{
	"message": {
		"content": {
			"title": "Hello there {first_name}",
			"body": "Hello, world from {testing}"
		},
		"data": {},
		"to": {
			"email": "rodrigo@courier.com"
		}
		
	}
}
```


# Send a message
Source: https://www.courier.com/docs/reference/send/message

post /send
Use the send API to send a message to one or more recipients.



# Create or Replace a Tenant
Source: https://www.courier.com/docs/reference/tenants/create-replace

put /tenants/{tenant_id}



# Create Tenant Preferences
Source: https://www.courier.com/docs/reference/tenants/create-tenant-prefs

put /tenants/{tenant_id}/default_preferences/items/{topic_id}



# Delete a Tenant
Source: https://www.courier.com/docs/reference/tenants/delete-tenant

delete /tenants/{tenant_id}



# Get a Tenant
Source: https://www.courier.com/docs/reference/tenants/get-tenant

get /tenants/{tenant_id}



# Get a List of Tenants
Source: https://www.courier.com/docs/reference/tenants/get-tenants

get /tenants



# Tenants
Source: https://www.courier.com/docs/reference/tenants/intro

Courier’s Tenants API supports multi-tenant messaging, allowing personalized, branded notifications per tenant context, including user-specific preferences and bulk tenant-member delivery.

Use Cases:

* Sending branded notifications on behalf of a tenant
* Creating slack-bots on behalf of a tenant

## Send Call Examples

**Send to a user using the `ACME` tenant as context:**

The notification will be sent using ACME branding and will load default preferences from the ACME tenant if the user hasn't configured the notification preferences for themselves.

```yaml
POST https://api.courier.com/send

{
  message: {
    template: "my_template",
    to: {
      user_id: "person",
    },
    context: {
      tenant_id: "ACME"
    }
  }
}
```

**Send to all members of the ACME tenant:**

The following call address ACME as the recipient of the notification. This will deliver the notification to all members of ACME.

```yaml
POST https://api.courier.com/send

{
  message: {
    template: "acme_company_news_letter",
    to: {
      tenant_id: "ACME"
    }
  }
}
```


# Remove Tenant Preferences
Source: https://www.courier.com/docs/reference/tenants/remove-tenant-prefs

delete /tenants/{tenant_id}/default_preferences/items/{topic_id}



# Get Users in Tenant
Source: https://www.courier.com/docs/reference/tenants/user-membership

get /tenants/{tenant_id}/users



# Get single token
Source: https://www.courier.com/docs/reference/token-management/get-token

get /users/{user_id}/tokens/{token}
Get single token available for a `:token`



# Get all tokens
Source: https://www.courier.com/docs/reference/token-management/get-tokens

get /users/{user_id}/tokens
Gets all tokens available for a :user_id



# Introduction
Source: https://www.courier.com/docs/reference/token-management/intro

Courier’s Token Management API simplifies push notification delivery by storing and routing device tokens per user across multiple providers and SDKs, while automatically managing token validity.

This API allows you to [`/send`](../send/message) messages to a `:user_id` and Courier will automatically route the messages to the correct device tokens.

Multiple tokens with mulitiple providers can be managed in Courier for a user, allowing you to send a message to multiple devices with a single [`/send`](../send/message) call.

Token status is automatically tracked and invalid or expired tokens are handled for you.

Token Management APIs are all endpoints prefixed with `/users/:user_id/tokens`

Push Notification Providers:

* [(FCM) Firebase Cloud Messaging](https://app.courier.com/channels/firebase-fcm)
* [(APNS) Apple Push Notification Service](https://app.courier.com/channels/apn)
* [Expo](https://app.courier.com/channels/expo)
* [OneSignal](https://app.courier.com/channels/onesignal)

Courier Mobile SDKs:

* [iOS](https://github.com/trycourier/courier-ios)
* [Android](https://github.com/trycourier/courier-android)
* [Flutter](https://github.com/trycourier/courier-flutter)
* [React Native](https://github.com/trycourier/courier-react-native)

If are you using a Courier Mobile SDK:

* iOS will automatically manage APNS tokens
* Android will automatically manage FCM tokens

If you need to support FCM on iOS, see the mobile docs for your SDK for more details:

* [iOS FCM](https://github.com/trycourier/courier-ios#support-fcm-firebase-cloud-messaging)
* [Flutter FCM](https://github.com/trycourier/courier-flutter#5-managing-user-state)
* [React Native FCM](https://github.com/trycourier/courier-react-native#courier-react-native-overview)


# Update a token
Source: https://www.courier.com/docs/reference/token-management/patch-token

patch /users/{user_id}/tokens/{token}
Apply a JSON Patch (RFC 6902) to the specified token.



# Add single token to user
Source: https://www.courier.com/docs/reference/token-management/put-token

put /users/{user_id}/tokens/{token}
Adds a single token to a user and overwrites a matching existing token.



# Add multiple tokens to user
Source: https://www.courier.com/docs/reference/token-management/put-tokens

put /users/{user_id}/tokens
Adds multiple tokens to a user and overwrites matching existing tokens.



# Get a translation
Source: https://www.courier.com/docs/reference/translations/get_translation

get /translations/{domain}/{locale}
Get translations by locale



# Translations
Source: https://www.courier.com/docs/reference/translations/intro

Courier’s Translations API enables localization by uploading .po ([https://www.gnu.org/software/gettext/manual/html\_node/PO-Files.html](https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html)) files per locale and using the t helper in templates to serve translated content based on user profile locale.

A typical translations workflow would look like:

1. Inserting/Updating a .po file per locale for your workspace
2. Using [Courier's `t` handlebar helper](../../platform/content/notification-designer/handlebars-helpers/#translate) in the notification template where you would like Courier to use translated content.
3. Courier will look at profile locale and pick up corresponding translation content.


# Update translations by locale
Source: https://www.courier.com/docs/reference/translations/put_translation

put /translations/{domain}/{locale}
Update a translation



# Get user subscription topic
Source: https://www.courier.com/docs/reference/user-preferences/get-subscription-topic-preferences

get /users/{user_id}/preferences/{topic_id}
Fetch user preferences for a specific subscription topic.



# User Preferences API
Source: https://www.courier.com/docs/reference/user-preferences/intro

The User Preferences API lets you list, retrieve, and update notification preferences per topic, including custom channel delivery when custom_routing is enabled.

> Courier's Preference API allows you to list and update user preferences for the notifications they receive.

<Warning>
  **CUSTOM\_ROUTING**

  The `custom_routing` array in the user preferences API response indicates the user's custom channel delivery. [Channel Delivery Customization](../../platform/preferences/preferences-editor/) **must be enabled** to use `custom_routing`.
</Warning>

## List

> Provides the ability get all subscription topic preferences available for a specific user.

## Get Preferences per subscription topic

> Provides the ability to get user preferences for a specific user on a specific subscription topic.

## Update Preferences per subscription topic

> Provides the ability to opt a user in or out of receiving a notification and customize delivery channels.


# Get user's preferences
Source: https://www.courier.com/docs/reference/user-preferences/list-all-user-preferences

get /users/{user_id}/preferences
Fetch all user preferences.



# Update or Create user preferences for a specific subscription topic
Source: https://www.courier.com/docs/reference/user-preferences/update-subscription-topic-preferences

put /users/{user_id}/preferences/{topic_id}
Update or Create user preferences for a specific subscription topic.



# Add a User to a Single Tenant
Source: https://www.courier.com/docs/reference/usertenants/add-a-user-to-a-single-tenant

put /users/{user_id}/tenants/{tenant_id}
This endpoint is used to add a single tenant.

A custom profile can also be supplied with the tenant.
This profile will be merged with the user's main profile
when sending to the user with that tenant.



# Add a User to Multiple Tenants
Source: https://www.courier.com/docs/reference/usertenants/add-a-user-to-multiple-tenants

put /users/{user_id}/tenants
This endpoint is used to add a user to
multiple tenants in one call.
A custom profile can also be supplied for each tenant.
This profile will be merged with the user's main
profile when sending to the user with that tenant.



# Get tenants associated with a given user
Source: https://www.courier.com/docs/reference/usertenants/get-tenants-associated-with-a-given-user

get /users/{user_id}/tenants
Returns a paginated list of user tenant associations.



# Remove User from a Tenant
Source: https://www.courier.com/docs/reference/usertenants/remove-user-from-a-tenant

delete /users/{user_id}/tenants/{tenant_id}
Removes a user from the supplied tenant.



# Remove User From All Associated Tenants
Source: https://www.courier.com/docs/reference/usertenants/remove-user-from-all-associated-tenants

delete /users/{user_id}/tenants
Removes a user from any tenants they may have been associated with.



# Courier Vocabulary
Source: https://www.courier.com/docs/reference/vocabulary

Courier uses Notifications (message templates), Integrations (delivery providers), and Channel Rules (send priorities) to manage how messages are sent across channels like Slack, email, and SMS.

## Notifications

**Notifications** are the messages you pass to the delivery systems that you integrate with Courier. More specifically, a Notification is a template for a type of message that can be sent more than once. For example, you might create an "Appointment Reminder" Notification or “Reset Password” Notifications.

Notifications can contain variables, (e.g. `{name}` or `{apt_time}`) so that the same Notification can be sent to many people (on their delivery system of choice — see Channel Rules below).

**Notifications** can be sent using one or many Integrations…

## Integrations

Courier passes your **Notifications** to the service providers you already use. Rather than replace these existing providers, Courier **integrates** with them. By building on top of these delivery channels, which we call **Integrations**, Courier simplifies your notification strategy, allowing you to manage multiple service providers in one place.

To see a list of all available Integrations, visit our [Integrations Documentation](../external-integrations/intro)

Courier then provides the ability to prioritize these **Integrations** using **Channel Rules**…

## Channel Rules

Courier allows you to prioritize which Integrations are used to send your Notifications. Selected Integrations are arranged in a top-to-bottom hierarchy. The Notification sends via the highest-ranked Integration for which the user has contact information listed.

For example, a Notification could utilize Slack and email, in that order. If the recipient has a Slack account in their Courier recipient profile, the Notification will send via Slack only. If they have no Slack account listed, but do have an email address listed, it will send via email.

<Frame caption="A Notification with multiple Integrations">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/notification-channel-rules.2c7e8d1.1312.png" />
</Frame>

There is also the option to “Always send to” a certain Integration. For example, a Notification might be configured for Slack, Twilio, and email, in that order. The sender can choose to “Always send to” email, overriding the hierarchy, so that every recipient receives an email (provided their profile contains an email address). Then, in addition to email, recipients with a Slack configuration in their profile will receive a Slack message as well. Recipients who do not have a Slack configuration in their profile, but do have a phone number, will receive the message via Twilio, as well as email.

<Frame caption="Courier Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/notification-channel-rules-w-always-send-to.341c96c.1312.png" />
</Frame>

A sender can also assign a preferred Integration to a specific recipient, using the Preferences API below. This will override the hierarchy of the Channel Rules and send the message only via the Integration specified in the recipient’s profile.


# Client SDKs
Source: https://www.courier.com/docs/sdk-libraries/client-sdks/intro

Courier offers client SDKs for React, JavaScript, iOS, Android, React Native, and Flutter to simplify integration across web and mobile platforms.

<CardGroup cols={3}>
  <Card title="React.js" icon="react" href="./react-sdk" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="iOS" icon="apple" href="https://github.com/trycourier/courier-ios" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Android" icon="android" href="https://github.com/trycourier/courier-android" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="JavaScript" icon="js" href="https://github.com/trycourier/courier-js" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="React Native" icon="react" href="https://github.com/trycourier/courier-react-native" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Flutter" icon="flutter" href="https://github.com/trycourier/courier-flutter" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>
</CardGroup>


# React.js SDK
Source: https://www.courier.com/docs/sdk-libraries/client-sdks/react-sdk

The Courier React SDK offers UI components and hooks—like Toast, Inbox, and useInbox—that integrate seamlessly with a CourierProvider for building interactive notification experiences in React apps.

## The Courier Provider

Before you can use any of the UI components, you need to initialize the Courier Provider. This establishes an authenticated connection to Courier for a specified user and provides a [context](https://reactjs.org/docs/context.html) object that is required for the UI components.

Installation: `yarn add @trycourier/react-provider`

Usage:

```jsx
import { CourierProvider } from "@trycourier/react-provider";

function App() {
  return (
    <CourierProvider
      userId={<userId>}
      clientKey={<clientKey>}>
    </CourierProvider>
  );
}
```

More info: [https://github.com/trycourier/courier-react/tree/main/packages/react-provider](https://github.com/trycourier/courier-react/tree/main/packages/react-provider)

## The Toast UI component

The Toast UI component is used to display brief, optional-expiring windows of information to a user.

Installation: `yarn add @trycourier/react-toast`

Usage:

```jsx
import { Toast } from "@trycourier/react-toast";

function Component() {
  return (
        <Toast />
    );
}
```

Note: you must ensure that the Courier Provider has been initialized in a parent component in order for the Toast component to work properly.

More info: [https://github.com/trycourier/courier-react/tree/main/packages/react-toast](https://github.com/trycourier/courier-react/tree/main/packages/react-toast)

## The Inbox UI component

`Inbox` is a component used to display a history of `read` and `unread` messages to a user. If we send a message to a user when they are not logged in, or if they didn't interact with the message before it disappeared, we also have an Inbox to show the history of messages received.

Installation: Installation: `yarn add @trycourier/react-inbox`

Usage:

```jsx
import { Toast } from "@trycourier/react-inbox";

function Component() {
  return (
        <Inbox />
    );
}
```

Note: you must ensure that the Courier Provider has been initialized in a parent component in order for the Inbox component to work properly.

More info: [https://github.com/trycourier/courier-react/tree/main/packages/react-inbox](https://github.com/trycourier/courier-react/tree/main/packages/react-inbox)

## React Hooks

For developers that want to build their own Inbox UIs, there is a custom React Hook that you can use to receive data about messages and interact with them programmatically.

Installation: `yarn add @trycourier/react-hooks`

Usage:

```jsx
import { useInbox } from "@trycourier/react-hooks";

const MyInbox = () => {
  const inbox = useInbox();

  useEffect(() => {
    inbox.fetchMessages();
  }, []);

  return (
    <div>{ JSON.stringify(inbox.messages, null, 2) }</div>
  )
}
```

Note: you must ensure that the Courier Provider has been initialized in a parent component in order for the useInbox hook to work properly.

More info: [https://github.com/trycourier/courier-react/tree/main/packages/react-hooks](https://github.com/trycourier/courier-react/tree/main/packages/react-hooks)


# SDK Libraries
Source: https://www.courier.com/docs/sdk-libraries/intro

Courier provides server and client SDKs for easy API integration, along with embeddable Inbox and Preference components for web, iOS, and Android apps.

The Courier Platform included embeddable [Inbox](../platform/inbox/intro) and [Preference](../platform/preferences/intro) components and [client SDKs](../sdk-libraries/client-sdks/intro) for web, iOS and Android.


# Server SDKs
Source: https://www.courier.com/docs/sdk-libraries/server-sdks

Courier supports official server SDKs for Node.js, Python, Ruby, Go, Java, PHP, and C#—all available on GitHub for seamless API integration.

## Officially Supported Libraries

<CardGroup cols={3}>
  <Card title="Node.js" icon="node-js" href="https://github.com/trycourier/courier-node" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Python" icon="python" href="https://github.com/trycourier/courier-python" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Ruby" icon="gem" href="https://github.com/trycourier/courier-ruby" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Go" icon="golang" href="https://github.com/trycourier/courier-go" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="Java" icon="java" href="https://github.com/trycourier/courier-java" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="PHP" icon="php" href="https://github.com/trycourier/courier-php" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>

  <Card title="C#" icon="code" href="https://github.com/trycourier/courier-csharp" horizontal iconType="solid">
    Learn More<Icon icon="arrow-right" iconType="solid" size="12" />
  </Card>
</CardGroup>


# Courier CLI
Source: https://www.courier.com/docs/tools/cli

The Courier CLI helps developers manage notifications, users, automations, and translations directly from the command line, streamlining integration and testing workflows across environments.

<Info>
  **NOTE**

  This feature is currently in Public Beta and is under active development. Please note that the API may change and that this feature is not covered under the Enterprise SLA.
</Info>

It’s simple to install, works on macOS, Windows, and Linux, and offers a range of functionality to enhance your developer experience with Courier. You can use the Courier CLI to:

* Send messages from the command line to users, lists, or audiences
* Track events to trigger your Courier Automations
* Push & pull industry-standard translation files for internationalizing your content

## Installing the Courier CLI

From the command-line, use the following command to install the Courier CLI and set your API key:

```bash
$ npm install -g @trycourier/cli
$ courier config --apikey <your-api-key>
```

### Requirements

* Courier CLI has only been tested on node.js v18+

## Authenticate the CLI

The fastest way to get started is to run:

```bash
$ courier config --apikey <your-api-key>
```

Courier CLI looks for an environment variable named `COURIER_API_KEY`. It will load that key from the first location it finds in the following list:

* A `.courier` file in the current working directory
* `~/.courier` (in your home directory)
* A `COURIER_API_KEY` value otherwise set in your environment (such as via `~/.profile` or `~/.zshrc`)

You can find your Courier API key in your [Courier Settings](https://app.courier.com/settings/api-keys).

## Commands

* `courier config` – Set your Courier API key
* `courier whoami` – Display the currently authenticated workspace
* `courier send` - Send a notification to a user, list, or audience
* `courier track` - Send a track event to trigger a Courier Automations
* `courier users:get` - Fetch the data for a given user ID
* `courier users:set` - Overwrite a user's profile with the provided data
* `courier digests:flush` – Flush any currently queued events for a given user + digest
* `courier translations:upload` - Upload .PO files to your Courier workspace
* `courier translations:download` - Download .PO files from your Courier workspace

For more details, run `courier` to see a list of commands and their arguments & options.

## Examples

```bash
$ courier send --tel 555-867-5309 --body "Hey Jenny\\!"
$ courier send --user user123 --template my-template-id --foo bar
$ courier send --email user@example.com --title "My Subject" --body "My Body"
$ courier send --user user123 --title "Important\\!" --body "Lorem Ipsum" --channels sms,push
$ courier send --user user123 --elemental my-template.json --foo bar

$ courier track my-event user123 --foo bar

$ courier users:get user123
$ courier users:set user123 --email user@example.com --tel 555-867-5309

$ courier digests:flush user123 my-digest-id

$ courier translations:upload en-US ./translations/en-US.po
$ courier translations:download en-US --text > example.en-US.po
```

You can find the source for the Courier CLI on [Github](https://github.com/trycourier/courier-cli).


# Courier and Postman
Source: https://www.courier.com/docs/tools/courier-postman

Explore and test Courier’s API using the official Postman collection—fork it, configure environments with your API keys, and start making requests with ease.

Courier's Postman collection is available for everyone who wants to get familiar with Courier's API. We'll help you get started in this guide.

From Postman, you'll need to fork the Courier API Collection into your Postman workspace and create [Postman environments](https://learning.postman.com/docs/sending-requests/variables/managing-environments/) that map to your [API environment keys](../platform/content/notification-designer/environments-api-keys/) from Courier.

## Getting Started with Courier's Postman Collection

<Steps>
  <Step title="Install Postman">[Install Postman](https://www.postman.com/downloads/) to get started with Courier's API collection.</Step>
  <Step title="Fork the Collection">Navigate to [Courier's API Postman Collection](https://www.postman.com/trycourier/courier-s-public-workspace/collection/aiy9mtt/courier-api?action=share\&source=copy-link\&creator=38408779) and fork the collection so that you can pull any changes we make to the source collection.</Step>
</Steps>

## Configure your Courier API Key Environments

You can create a Postman environment for each of your Courier environments. You can store your API keys in environment-level variables and easily use them when making API calls with our different endpoints.

You can follow Postman's instructions on how to set up environments [here](https://learning.postman.com/docs/sending-requests/variables/managing-environments/).


# How to Understand Automation Concepts
Source: https://www.courier.com/docs/tutorials/how-to-automate-message-sequences

Create flexible, programmable workflows with Courier Automations using step-based schemas to send, delay, fetch data, update profiles, and manage message flows with conditional logic and idempotency.

## Introduction to Courier Automations

* Courier Automations provide a toolset to design and implement complex notification workflows which allow you to send [automation templates](../platform/automations/designer) through an API, or a programmatic [ad-hoc automation](../reference/automation/invoke).
* An Automation is a schema definition that enables developers to easily express complex use cases such as digests, delayed messages, scheduled messages, sending messages to an ad hoc list, and escalation messages.
* At a high level, an Automation schema is composed of two parts, Context Properties and Steps like `send`, `delay`, `update-profile`, `fetch-data` where each step represents a specific action that the automation will execute on your behalf when an event is sent to the Automation API.

### Sample Ad-Hoc Automation Schema:

```json
// URL: https://api.courier.com/automations/invoke
// Method: POST
{
   "automation":{
      "steps":[
         {
            "action": "send",
            "template": "SAMPLE_TEMPLATE"
         },
         {
            "action": "delay",
            "until": "20240408T080910.123"
         }
      ]
   },
   "data":{
      "name": "Spike Spiegel",
      "age": 27
   },
   "profile":{
      "user_id": "spiegel",
      "email": "spike@bebop.com"
   }
}
```

## Automation Run Context

* The run context refers to a set of special properties, that are used to invoke an automation. Context properties are available to all steps at Step Execution Time.
* Run Context can be defined as part of an ad-hoc automation or passed as a first-class object to an automation template.

### Run Context Properties:

| Property    | Type   | Description                                                                                                                                                                                                                                                                                                           |
| ----------- | ------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `brand`     | string | A unique identifier that represents the brand should be used to render the notification.                                                                                                                                                                                                                              |
| `data`      | object | An object that includes any data you want to pass to a message template or accessor type. The data will populate the corresponding template variables.                                                                                                                                                                |
| `profile`   | object | An object that includes any key-value pairs required by your chosen integrations (see our Provider Documentation for the requirements for each Integration.) If profile information is included in the request and that information already exists in the profile for the `user_id`, that information will be merged. |
| `template`  | string | A unique identifier that can be mapped to an individual notification. This can be the `notification_id`.                                                                                                                                                                                                              |
| `recipient` | string | A unique identifier. Associated with the recipient of the delivered message, which can optionally map to a Courier user profile.                                                                                                                                                                                      |

## Structuring With Automation Steps

Steps are the fundamental building blocks of an automation schema. Automation steps are a set of actions the automation will execute on your behalf, which are used together to implement complex messaging workflows.

There are seven Automation steps that you can use to build your workflow:

| Action           | Description                                                                                                                                                                                             |
| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `send`           | A `send` step will deliver a single notification to a recipient. The recipient and template properties are required. Template refers to the `event` or `notification_id` of the notification to be sent |
| `send-list`      | Send a message to each recipient in the list. Accepts a `list_id` value.                                                                                                                                |
| `fetch-data`     | Fetch data via `HTTPS` and write the response to the `data` property of the Automation run context.                                                                                                     |
| `delay`          | Wait a duration of time before proceeding to the next automation step. Accepts `duration` and `until` values.                                                                                           |
| `update-profile` | Update the Courier profile of a given `user_id`.                                                                                                                                                        |
| `invoke`         | Invoke another automation template. Accepts `template` as a unique identifier that can be mapped to another automation template.                                                                        |
| `cancel`         | Cancel an automation run that is In progress. Accepts a string that is associated with the cancelable automation run as `cancelation_token`.                                                            |

#### Send Schema

For `send` steps, the `recipient` and `template` properties are required. `recipient` refers to any nonempty `recipient_id` that you can define to keep track of and identify the notification's recipient across messages.

```json
{
  "action": "send",
  "data": {}, // optional
  "if": "<CONDITIONAL_EXPRESSION>", // optional javascript boolean expression
  "override": {}, // optional: send provider override
  "profile": {}, // optional
  "recipient": "<RECIPIENT_ID>",
  "ref": "<REFERENCE>", // optional
  "template": "<TEMPLATE_ID>",
  "idempotency_expiry": "<IDEMPOTENT_EXPIRATION>", // optional
  "idempotency_key": "<IDEMPOTENT_KEY>" // optional
}
```

#### Send-List Schema

For send-list actions, the `list` and `template` properties are required.

```json
{
  "action": "send-list",
  "brand": "<BRAND_ID>", // optional
  "if": "<CONDITIONAL_EXPRESSION>", // optional boolean expression
  "ref": "<REFERENCE>", // optional
  "override": {}, // optional: send provider override
  "data": {}, // optional
  "list": "<LIST_ID>",
  "template": "<TEMPLATE_NAME_OR_ID>",
  "data_source": { // optional
    "webhook": {
      "body": {}, // optional
      "headers": {}, // optional
      "params": {}, // optional
      "method": "GET" | "POST", // optional, default GET
      "url": "<API_RESOURCE>"
    },
    "merge_strategy": "replace|overwrite|soft-merge|none"
   },
  "idempotency_expiry": "<IDEMPOTENT_EXPIRATION>", // optional
  "idempotency_key": "<IDEMPOTENT_KEY>" // optional
}
```

* You can use the `data-source` property to define an API resource to be used to render a notification template. If using `data-source`, a [merge strategy](#merge-strategy) and a webhook with a url must be given.
* The `data_source.webhooks.url` should accept a `recipientId` query string parameter.
* The response from the `data_source` property will be merged with the existing automation `data` that was defined at runtime, based on the merge strategy, and will be passed to the notification template as the data property. See more on the different merge strategies under the `update-profile` section.

**Example: Idempotent `send-list` step**

```json
{
  "action": "send-list",
  "webhook": {
    "body": {}, // optional
    "headers": {}, // optional
    "params": {}, // optional
    "method": "GET" | "POST", // optional, default GET
    "url": "<API_RESOURCE>" //HTTPS protocol required
  },
  "merge_strategy": "replace|overwrite|soft-merge|none",
  "if": "<CONDITIONAL_EXPRESSION>", // optional boolean expression
  "ref": "<REFERENCE>", // optional
  "idempotency_expiry": "<IDEMPOTENT_EXPIRATION>", // optional
  "idempotency_key": "<IDEMPOTENT_KEY>" // optional
}
```

<Note>
  **SEND IDEMPOTENCY FEATURES**
  a
  `send` and `send-list` steps support idempotency for safely retrying requests without accidentally performing the same operation twice.

  To define an idempotent `send` or `send-list` step, provide an `idempotency_key` property on the step. An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.

  In addition to the `idempotency_key` , you can define an `idempotency_expiry` that allows you to set an expiration on the `idempotency_key` that is longer than 24 hours (up to 1 year).

  **See [Idempotent Requests](../reference/idempotent-requests) for more on Idempotency.**
</Note>

#### Fetch-Data Schema

A fetch-data step will fetch data from an API resource and store it into run context to be used for subsequent step executions. `webhook` and `merge_strategy` are required.

```json
{
  "action": "fetch-data",
  "webhook": {
    "body": {}, // optional
    "headers": {}, // optional
    "params": {}, // optional
    "method": "GET" | "POST", // optional, default GET
    "url": "<API_RESOURCE>"
  },
  "merge_strategy": "replace|overwrite|soft-merge|none",
  "if": "<CONDITIONAL_EXPRESSION>", // optional boolean expression
  "ref": "<REFERENCE>", // optional
  "idempotency_expiry": "<IDEMPOTENT_EXPIRATION>", // optional
  "idempotency_key": "<IDEMPOTENT_KEY>" // optional
}
```

The response from the `fetch-data` step will be merged with the existing automation `data` that was defined at runtime, based on the [merge strategy](#merge-strategy), and will be passed to the notification template as the `data` property.

#### Delay Schema

There are two ways to delay an automation step

* Delay `until` a specific time
* Delay for a `duration` of time

<Note>
  When using the delay step, an automation will be processed serially. Each item in the automation is processed one at a time and the next step will not be undertaken until the current one has completed.

  There is a 5-15 minute variance in when delay step actions will finish processing.
</Note>

**Delay Until a Specific Time**

To delay a step until a specific time, set the time using an [ISO-8601 timestamp](https://www.w3.org/TR/NOTE-datetime).

```json
{
  "action": "delay",
  "until": "2021-02-18T18:40:05.960Z", // ISO-8601timestamp
  "if": "<CONDITIONAL_EXPRESSION>", // optional boolean expression
  "ref": "<REFERENCE>" // optional
}
```

**Delay For a Period of Time**

You are able to delay an automation step for the following whole increments: -

* minute(s)
* hours(s)
* day(s)
* month(s)

```json
{
  "action": "delay",
  "duration": "1 hour",
  "if": "<CONDITIONAL_EXPRESSION>", // optional boolean expression
  "ref": "<REFERENCE>" // optional
}
```

#### Update-Profile Schema

An `update-profile` step will update the recipient's profile according to the `merge` strategy provided in the step. `recipient_id`, `profile`, and `merge` are required.

```json
{
  "action": "update-profile",
  "recipient_id": "<RECIPIENT_ID>",
  "profile": {},
  "merge": "replace|overwrite|soft-merge|none",
  "if": "<CONDITIONAL_EXPRESSION>", // optional boolean expression
  "ref": "<REFERENCE>" // optional
}
```

#### Invoke Schema

The invoke step allows you to execute another automation template. The `template` property is required, and the optional context object defines the `data` and properties to invoke the new, targeted template with.

```json
{
  "action": "invoke",
  "template": "<TEMPLATE_ID>",
  "context": {
    //optional
    "brand": "<BRAND_ID>", // optional
    "data": {}, // optional
    "profile": {}, // optional
    "template": "<NOTIFICATION_TEMPLATE>", // optional
    "recipient": "<RECIPIENT_ID>" // optional
  },
  "if": "<CONDITIONAL_EXPRESSION>", // optional boolean expression
  "ref": "<REFERENCE>" // optional
}
```

#### Cancel Schema

Automations can be marked as [cancelable](../platform/automations/cancel) by providing a `cancelationToken` then canceled by providing a cancellation token on a subsequent automation. All automations with a matching cancellation token will be canceled.

```json
{
  "cancelationToken": "<CANCELATION_TOKEN>",
  "steps": [
    // ... step configuration
  ]
}
```

**If you want to cancel automation on a per-recipient basis there are two options:**

1. Use Ad Hoc automation and provide a unique `cancelationToken` per recipient
2. OR Use an automation template and set a dynamic cancellation token each time you invoke the automation like this:

```json
{
  "cancelation_token": {
    "$ref": "data.foo.token"
  },
  "steps": [
    {
      "action": "",
      "template": "",
      "recipient": "",
      "profile": {
        "email": ""
      }
    }
  ]
}
```

##### Cancelling automations using a `cancelationToken`

```json
{
  "steps": [
    {
      "action": "cancel",
      "cancelationToken": "<CANCELATION_TOKEN>",
      "if": "<CONDITIONAL_EXPRESSION>", // optional boolean expression
      "ref": "<REFERENCE>" // optional
    }
  ]
}
```

### Step Conditionals

* For each type of step, you can define conditions that will determine if a step is executed or not. - Adding an `if` property to a step makes it a conditional step.
* The value of the `if` property should be a [valid javascript expression](../platform/automations/control-flow/#js-condition) that evaluates to a boolean.
* Properties set in the run context are available for use in these expressions.

**Example:** The following send step has a conditional expression that should evaluate to true. Therefore, the step will be executed.

```json
{
  "template": "TEST",
  "recipient": "abcd-1234-efgh-5678",
  "profile": {
    "email": "test@gmail.com"
  },
  "data": {
    "foo": "send-it"
  },
  "automation": {
    "steps": [
      {
        "action": "send",
        "if": "data.foo === 'send-it'"
      }
    ]
  }
}
```

### Step References

* You can define a [step-level reference](../platform/automations/dynamic/#example-mapping-dynamic-data-to-a-variable), by adding a `ref` property to a step definition.
* In the conditionals of subsequent steps, you can then reference metadata about the sent message using the word `refs`.

**Example**
If you only want to send a follow-up message if that message hasn't been opened yet, you can define the following automation run:

```json
{
  "automation": {
    "steps": [
      {
        "action": "send",
        "template": "OUTREACH",
        "ref": "outreach"
      },
      {
        "action": "delay",
        "delayFor": "24 hours"
      },
      {
        "action": "send",
        "template": "FOLLOWUP",
        "ref": "followup",
        "if": "refs.outreach.status < MessageStatus.Opened"
      }
    ]
  }
}
```

In the above example, `refs.outreach` allows us to access information in the step context of the first send step. For send steps, this step context includes information about the status of the send notification.

### Merge Strategy

Some automation steps require or include a merge strategy.

**In the following merge strategy definitions, A = data defined in the step; B = existing data.**

| Strategy     | Description                                                                                      |
| ------------ | ------------------------------------------------------------------------------------------------ |
| `replace`    | Overwrites all properties in `B` from `A`; **remove** properties in `B` that do not exist in `A` |
| `overwrite`  | Overwrite all properties in `B` from `A`                                                         |
| `soft-merge` | Only overwrites properties in `B` from `A` that do not yet exist in `B`                          |
| `none`       | No changes to `B` if `B` already exists; else `B` = `A`                                          |

### Run-Step Composition

There are a few object properties that can be defined at both the step and the run level. Run level data and profile properties will compose into each step, with already provided step level properties taking precedence.

For example, the "Title" property will compose into and be available for each step.

```json
{
  [...]
  "data": {
    "Title": "Back to the Future"
  }
  "automation": {
    "steps": [
      {
        [...]
        "data": {
          "Username": "Doc Brown"
        }
      },
      {
        [...]
        "data": {
          "Username": "Marty McFly"
        }
      },
      [...]
    ]
  }
}
```


# How To Configure Multi-Channel Routing
Source: https://www.courier.com/docs/tutorials/how-to-configure-multi-channel-routing

Configure multi-channel routing in Courier using the routing object in the Send API or the visual designer to prioritize, fallback, or deliver messages across email, SMS, push, and chat channels.

Courier makes it easy to set custom routing rules and ensure your user's get exactly the product notification experience you intend.

## Routing in the Send API

The `routing` object allows you to select various channels and decide which ones you want to send messages to.

When the `method` property is defined as `single`, Courier will attempt to the send messages to only one channel. In the example below, it will first attempt SMS and fail since `phone_number` is not included in the user profile. Next, it will attempt to send via email *instead*. If the email is sent successfully, it will not attempt to send a push or chat notification.

```json
"message": {
      "to": {
        "email": "example@email.com",
      },
      "routing": {
        "method": "single",
        "channels": ["email", "sms", "push", "chat"],
      },
    },
```

When the `method` property is defined as `all`, Courier will attempt to send messages to all listed channels. In the example below, Courier will send the message via email and SMS. Since the push and chat profile requirements are not completed, it will not be able to send via those channels.

```json
"to": {
    "phone_number": "123456789",
    "email": "example@email.com",
    "slack": {
        "access_token": "xoxb-xxxxx",
        "email": "user@example.com"
      },
    "apn": {
                "token": "YOUR_APNS_TOKEN"
            }
},
"routing": {
    "method": "all",
    "channels": ["sms", "email", "push", "chat"],
}
```

Ensure that for all channels listed, the profile requirements are met. You can find information about profile requirements for a provider in the respective integration documentation.

Learn more about setting up routing in the [API sandbox](../reference/authorization) documentation.

<Frame caption="API Sandbox">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/api-sandbox.png" />
</Frame>

## Routing in the Designer

The priority of the channels you select for your notification are arranged in a top-to-bottom hierarchy. To change priority, simply drag and drop your notification channels.

<Frame caption="Channel Priority">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/reorder-channel-priority.gif" />
</Frame>

Courier will attempt to send the notification to the best channel possible, starting from the top and going to the bottom, based on the provided user contact information. You must provide Courier with user's contact information within their [Courier recipient profile](../reference/profiles/intro) or via the [Send API](../reference/send/message) call itself.

Take, for example, a notification that is designed to send via `email`, `SMS` or `push`, in that order of priority:

<Frame caption="Overview of the Designer Routing">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/channel-priority-sample.png" />
</Frame>

Courier will first attempt to send the notification via email. If the recipient has an email address in their profile, the notification will send via email only. If they don't have an email address, Courier will look for a phone number. Finally, if they don't have an email or phone number, Courier will look for a push configuration.

You can also choose to 'always send' to a specific channel. In order to do this, select the channel settings and turn on `Always`.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/channel-settings-always-send-to.png" />
</Frame>

Now Courier will always send this notification via email as well as to the best of the other channels.

<Frame caption="Always send to email and best of to sms and push">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/notification-always-send-to.png" />
</Frame>

The routing settings created in the designer can always be overridden using the [preferences API](../reference/user-preferences/intro). This will override the hierarchy of the channel rules and send the message only via the Integration specified in the recipient’s [profile](../reference/profiles/intro).


# How To Configure User Preferences
Source: https://www.courier.com/docs/tutorials/how-to-configure-user-preferences

Use the Preferences API to manage user opt-in status and channel delivery preferences per topic, enabling personalized, GDPR-compliant notification control—plus custom routing for Enterprise users.

With Courier's [Preferences API](../reference/user-preferences/update-subscription-topic-preferences/) users can create and update their recipients' delivery preferences through an API call.

# Understanding User Preferences

User Preferences gives your users the ability to control which notification topics they receive, through the channels of their choice. This feature is designed to give your users control over their communication preferences and to help you comply with data privacy regulations like GDPR and CCPA. Your users can set their own preferences through the preferences [hosted page](../platform/preferences/hosted-page/), or they can be manually updated through the API.

## Configuring User Preferences

To create or edit a user's preference, you will need to gather some important keys for the path parameters:

* The recipient's unique `user_id` that preferences are attached to.
* The preference subscription `topic_id` that can be found in the [preferences editor](../platform/preferences/preferences-editor/).

### Configuring the Request Body

The preference request must contain a `topic` object with a required `status` parameter. One of the following statuses are required for each preference call made to a topic:

* `opted_in` - The user is opted in to the topic and any notifications mapped to it.
* `opted_out` - The user is opted out of the topic and its corresponding notifications.
* `required` - The user cannot opt out of this topic and its notifications.

A sample request to the preferences endpoint looks like this:

```json
// PUT https://api.courier.com/users/:user_id/preferences/:topic_id
{
	"topic": {
		"status": "OPTED_IN" // This field is required
	}
}
```

## Preferences and Custom Routing

For Courier customers on the Enterprise plan, you have the ability to set a `custom_routing` object for your recipients. This object translates to [channel delivery customization](../platform/preferences/preferences-editor#delivery-channel-selection) in the Preferences Center.

This configuration sets a specific channel delivery preference for each user. For example if a notification had 3 delivery channels (email, sms, push) and the recipient only wanted `email`, a request could be shaped like so:

```json
// PUT https://api.courier.com/users/:user_id/preferences/:topic_id
{
	"topic": {
		"status": "OPTED_IN", // This field is required
        "has_custom_routing": true, // Available for business tier only
		"custom_routing": [
			"email"
		]
	}
}
```

Please note that for `custom_routing` to work, the [notification template](../platform/sending/channel-priority#understanding-channel-and-integration-send-priority) must have multiple delivery channels configured and be part of a subscription topic.


# How to Create and Send Your First Brand
Source: https://www.courier.com/docs/tutorials/how-to-create-and-use-brands

Create and apply consistent visual styles to your notifications using Courier Brands—customize logos, colors, headers, footers, and test branding directly via the Designer or Send API.

## Overview

Courier's Brands feature enables you to create and maintain a consistent visual identity for your email and inbox notifications.
Whether you're sending notifications under your own brand or white-labeling them for your customers, Brands provides tooling and options for configuring logos, colors, headers, and footers.
In this tutorial, you'll learn how to create and customize your first brand in Courier.

<Frame>
  ![Brand Designer UI](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/brand_ui.png)
</Frame>

## What You'll Build

We'll create a brand that includes:

* A custom logo
* Your brand colors
* A styled header and footer
* Social media links

## What is a Brand?

A Brand in Courier is a reusable configuration object that defines the visual styling and templating rules to apply to an email or inbox notification.
Each Brand contains a set of customizable attributes that determine how your emails and inbox messages appear to recipients, including visual elements, styling rules, and reusable code components.

## Understanding Email Brand Templates

Courier offers three types of email brand templates:

<AccordionGroup>
  <Accordion title="Standard Template (We'll use this today)">
    * Perfect for most use cases
    * Easy to configure with a visual interface
    * Includes pre-built header and footer layouts
  </Accordion>

  <Accordion title="Handlebars Template">
    * Offers more control over header and footer
    * Uses Handlebars templating language
    * Good for custom layouts while maintaining ease of use
  </Accordion>

  <Accordion title="Custom MJML/Handlebars Template">
    * Complete control over email layout
    * Requires MJML and/or Handlebars knowledge
    * Best for highly customized designs
  </Accordion>
</AccordionGroup>

We'll focus on the Standard Template in this tutorial, as it's the most straightforward way to get started with branding.

## Step-by-Step Walkthrough

<Tip>
  Prepare your brand assets (logo, color codes, social media links) before starting this tutorial. Having these ready will make the process much smoother!
</Tip>

<Steps>
  <Step title="Access the Brand Designer">
    1. Log into your Courier account
    2. Navigate to the Designer section
    3. Click on "Brands" in the top menu
    4. Click "New Brand"
  </Step>

  <Step title="Set Up Your Brand">
    1. Enter a name for your brand (e.g., "My Company Brand")
    2. (Optional) Add a brand\_id if you plan to manage the brand via API
    3. Click "Create Brand"
  </Step>

  <Step title="Upload Your Logo">
    1. In the Brand Designer, locate the Logo section
    2. Click "Upload Logo" or drag and drop your logo file
    3. Your logo should be:
       * JPEG, PNG, or GIF format
       * Maximum 5MB in size
       * Ideally 140px wide (height is flexible)
  </Step>

  <Step title="Define Your Brand Colors">
    1. In the Brand Designer, locate the Brand Colors section
    2. Set your Primary Color - this will be used for buttons and important elements
    3. Set Secondary and Tertiary colors - these create accent elements
    4. Set your Header Color - this appears at the top of your emails
  </Step>

  <Step title="Configure Your Footer">
    1. In the Brand Designer, locate the Footer section
    2. Add your company name and a copy right declaration using the current year variable `© {datetime.year}`
    3. You can also include other [built-in variables](../platform/content/variables/inserting-variables#built-in-variables) like `{urls.unsubscribe}` and `{urls.preferences}`
    4. Add a social media link - for testing purposes you can use Courier's Linkedin Page `https://www.linkedin.com/company/trycourier/`
  </Step>

  <Step title="Preview Your Brand">
    1. Click the "Preview" button
    2. Review how your brand looks in a sample email
    3. Make any adjustments needed
  </Step>

  <Step title="Publish Your Brand">
    * Click the "Publish" button

    Your brand is now available for use in your notifications! 🙌
  </Step>

  <Step title="Configure notifications to use your brand">
    <AccordionGroup>
      <Accordion title="Set as Default (Optional but Recommended)">
        Setting a brand as default is important because:

        * It becomes the fallback brand for all notifications that don't specify a different brand
        * Any new email templates you create will automatically use this brand
        * It ensures consistency across your communications

        To set as default:

        1. Open brand settings
        2. Click "Set as Default"
      </Accordion>

      <Accordion title="Configure a notification to use your brand (Optional if default)">
        If you've set your brand as default, you can skip this step. Otherwise, to use this brand in specific notifications:

        1. Open the notification you want to brand
        2. Go to Notification Settings
        3. Select your brand from the dropdown menu
      </Accordion>
    </AccordionGroup>
  </Step>

  <Step title="Test Your Brand">
    **Option 1: Test via Template**

    1. Open any email template that uses your brand
    2. Click the "Send" tab at the top
    3. Fill in the test recipient details
    4. Send a test notification

    **Option 2: Use the Send API**

    1. Use the [Send API](https://www.courier.com/docs/reference/send/message)  and include your brand\_id in the request body:

    ```bash POST /send {7}
    curl --request POST \
    --url https://api.courier.com/send \
    --header 'Authorization: Bearer YOUR_AUTH_TOKEN' \
    --header 'Content-Type: application/json' \
    --data '{
            "message": {
            "brand_id": "your-brand-id",
            "to": {
                "email": "recipient@example.com"
            },
            "content": {
                "title": "Testing My New Brand",
                "body": "This is a test message using my custom brand!"
            }
            }
        }'
    ```
  </Step>
</Steps>

## Advanced Options

While we used the Standard email template in this tutorial, remember that Courier also offers:

* Custom MJML templates for advanced email layouts
* Handlebars templates for dynamic content
* Custom CSS styling

Ready to explore these options? Check out our [advanced branding documentation](../platform/content/brands/brands-in-email-notifications).

## Next Steps

Now that you've created your first brand, try:

* Creating multiple brands for different use cases
* Testing your branded notifications
* Exploring the [Brands API](../reference/brands/intro) for programmatic management of Courier Brands


# Design Your First Notification Template
Source: https://www.courier.com/docs/tutorials/how-to-design-your-first-notification

Learn to design your first Courier notification template by configuring channels, adding content blocks and variables, previewing with test data, and publishing with custom branding and preferences.

In this tutorial, we will walk you through creating your first notification template in Courier. You'll learn how to configure channels, add variables, and preview your notification before sending it to users.

<Frame>
  ![Notification Designer](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/designer.png)
</Frame>

***

## Walkthrough

<Steps>
  <Step title="Create a New Notification Template">
    1. Log in to your Courier dashboard.
    2. Navigate to **Assets** and click **+ New** -> **Message Template**.
    3. Name your template and click **Create Template**.
  </Step>

  <Step title="Configure Channels and Providers">
    1. Under the **Add Notification Channels**, select **Email**.
    2. In the left sidepane under **Channels**, hover over **Email** and click on the cog icon to open the channel settings.
    3. Choose an email provider (e.g. SendGrid).

    <Note>
      If you have not installed an email provider, don't worry -- this can be done later on.
    </Note>
  </Step>

  <Step title="Add Notification Content">
    1. Use the content toolbar to add content blocks. Start by adding a **Text** block. Click on the "T" icon.
    2. We should start the email with a simple greeting. Click on the text block to edit the text content, and replace the text with `Hello, Ana!`.
    3. Add an action block, which contains a button that users can click on.
    4. Feel free to expirement with the editor and add more content blocks as needed.

    ![Text Block](https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/designer-text-block.png)
  </Step>

  <Step title="Add Variables for Dynamic Data">
    In the content editor, use placeholders like `{profile.name}` to insert dynamic data.
    This will personalize the notification based on dynamic data, such as recipient information, order details, event details, etc.

    1. Replace `Ana` with `{profile.name}` to dynamically change the name for each individual recipient.
    2. Click on the action block, and then the pencil icon to open the action block settings. Replace the current URL with `{invite-url}`, and then click **Apply**.

    <Frame caption="Action Block with variable URL">
      <img class="center" src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/designer-action-block.png" />
    </Frame>
  </Step>

  <Step title="(optional) Set Branding and Subscription Topics">
    <AccordionGroup>
      <Accordion title="Override the Default Brand">
        Brands allow you to apply your company's colors, logos, fonts, social media links, and other header/footer items to your notifications to ensure a consistent look and feel.

        1. In the upper right of the notification designer, click on the gear icon to open the **template settings**.
        2. In the **General** tab, under the Brand Config section, you can enable/disable branding to select a specific brand to apply to this template. to apply consistent brand colors, logos, and fonts.
           * A default brand is applied if no brand is selected.
           * If you have not set up a brand, you can do so in the **Database -> Brands** section of the dashboard.
      </Accordion>

      <Accordion title="Configure the Subscription Topics">
        Subscription Topics (i.e. preferences) enable users to select which topics (i.e. categories) of notifications they want to receive.

        1. In the Template Settings -> General tab, the Subscription Topic section let's you specify which topic this notification belongs to.
        2. Select a topic from the dropdown list. If you have not set up topics, you can do so in **Settings -> Preferences Editor**
      </Accordion>
    </AccordionGroup>
  </Step>

  <Step title="Preview the Notification">
    Use the **Test Event** feature to preview your notification with the brand and example data.

    1. Click the Preview tab at the top of the editor, and then click "Create Test Event".
    2. In your Test Event, replace the data object with:

    ```
    "Data": {
        "invite-url": "https://www.example.com",
      },
    ```

    3. Add a name to the user profile:

    ```
    "profile": {
        "email": "user@example.com",
        "name": "Example User"
      },
    ```

    4. Notice in the preview that our variables have been replaced with the test data.
  </Step>

  <Step title="Publish the Notification">
    Once you’re satisfied with the preview, click **Publish** to save your notification content and settings.
  </Step>
</Steps>

***

## Key Concepts

<AccordionGroup>
  <Accordion title="Channels and Providers">
    * **Channels** are platforms for sending notifications (Email, SMS, Push, etc.).
    * **Providers** handle delivery for specific channels (e.g., Twilio for SMS, SendGrid for Email).
  </Accordion>

  <Accordion title="Using Variables">
    Variables allow you to insert dynamic data into your notification template. For example, `{profile.firstName}` can be used to personalize an email by addressing the recipient by name.
  </Accordion>

  <Accordion title="Test Events">
    A **Test Event** lets you preview how your notification will look when sent with real data. This ensures that all variables are populated correctly and that the notification appears as expected across different channels.
  </Accordion>
</AccordionGroup>


# How To Safely Format Emails
Source: https://www.courier.com/docs/tutorials/how-to-format-emails

Follow HTML-safe practices—like inline CSS, basic tags, table layouts, and email-safe fonts—to ensure consistent email rendering across clients when designing Courier-compatible email templates.

Here are some HTML-safe formatting techniques commonly used in emails:

## Inline CSS

Use inline CSS styles rather than external or internal stylesheets. This ensures that your styling is more likely to be rendered consistently across various email clients. Additionally, you can leverage the [brands designer](../platform/content/brands/brands-in-email-notifications) to apply CSS styles to your email templates.

<Warning>
  **STYLES IN HEAD**

  Some email clients like [Gmail will only support](https://www.emailonacid.com/blog/article/email-development/12_things_you_must_know_when_developing_for_gmail_and_gmail_mobile_apps-2/#:~:text=link%20will%20appear.-,4.%20Gmail%20only%20supports%20%3Cstyle%3E%20in%20the%20%3Chead%3E,-Gmail%20does%20support) `<styles>` in the `<head>` element.
</Warning>

## Basic HTML tags

Stick to basic HTML tags like `<p>`, `<div>`, `<span>`, `<a>`, `<strong>`, `<em>`, `<ul>`, `<ol>`, `<li>`, `<h1>` to `<h6>`, etc. These are widely supported across email clients.

## Tables

Tables are often used for layout in HTML emails because they are well-supported across different email clients. However, keep your table structures simple and avoid complex nesting.

Email clients like gmail will impose certain limitations on HTML tables like:

* Handling of nested tables can be inconsistent, leading to layout distortions or unexpected behavior in the email layout.
* Lack of support conditional formatting for table cells, which limits dynamic content presentation within tables.

## Inline Images

Embed images using the `<img>` tag and provide appropriate alt attributes for accessibility. Make sure to host your images on a reliable server.

<Note>
  **IMAGE HOSTING**

  Courier does not host images at this time for `src` paths. The exception is using [Image Blocks](../platform/content/content-blocks/image-blocks) for your templates which will host the image on our server.
</Note>

## Links

Use the `<a>` tag for hyperlinks. Ensure that all links are clickable and provide descriptive anchor text.

## Font Styles

Use CSS for basic font styles like color, size, family, and weight. Avoid using web fonts that may not be supported by all email clients.

### Web Fonts

While desktop fonts are loaded onto an individual computer so they can be used in word processors and other applications, web fonts are stored online and downloaded by browsers. When someone accesses a page on a website, web fonts are specified through CSS ⸺ often using the `@font-face` declaration.

**Email clients that do support web fonts include:**

* Apple Mail
* iOS Mail
* Android Mail (not Gmail)
* Thunderbird
* Outlook for macOS

### Web Safe Fonts

Fonts that are deemed web safe are more likely to be supported across email clients. However, it's important to note that even though a font is classified as web safe, it doesn't guarantee complete safety for use in email marketing.

* Arial (sans-serif)
* Verdana (sans-serif)
* Helvetica (sans-serif)
* Tahoma (sans-serif)
* Trebuchet MS (sans-serif)
* Times New Roman (serif)
* Georgia (serif)
* Garamond (serif)
* Courier New (monospace)
* Brush Script MT (cursive)

### Email Safe Fonts

While the font choices may not be particularly thrilling, opting for these options guarantees a uniform experience across various email platforms. Additionally, you might [discover an email-safe font](https://www.emailonacid.com/blog/article/email-development/best-font-for-email-everything-you-need-to-know-about-email-safe-fonts/) that mirrors your brand's preferred typeface.

* Arial
* Courier New
* Georgia
* Times New Roman
* Trebuchet
* Verdana

## Background Colors

You can set background colors for elements using CSS. Keep in mind that some email clients may not fully support background colors.

## Responsive Design

Consider using responsive design techniques to ensure that your email renders well on different devices and screen sizes. [Media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries) can be used to adjust the layout based on the viewport size.

## Testing

Always [test your HTML emails](./notification-designer/how-to-preview-notification) across different email clients and devices to ensure consistent rendering. There are tools available that can help with email testing, such as [Litmus](https://www.litmus.com/) or [Email on Acid](https://www.emailonacid.com/).

By following these guidelines, you can create HTML emails that are compatible with a wide range of email clients while still allowing for attractive and engaging formatting. If you have any questions regarding email styles and formatting, you can always [reach out to our support team](mailto:support@courier.com).


# How to Implement Courier Inbox
Source: https://www.courier.com/docs/tutorials/how-to-implement-inbox

Courier Inbox provides an in-app notification center powered by JWT-authenticated React components, allowing users to view and manage real-time and historical messages directly within your web application.

# Courier Inbox

The Courier Inbox acts as a convenient in-app notification feed with a clean interface where users can view notifications in real time directly inside your web app. It also lets them view their message history of all past notifications that you've sent to them.

## Installation

To integrate the Inbox feature, you'll need a backend to retrieve messages. This functionality is managed through the `CourierProvider` and requires an active [Courier account](https://app.courier.com/).

Steps to Set Up Inbox:

<Steps>
  <Step title="Install the Courier Provider">
    Navigate to the Integrations page and install the Courier Provider.
  </Step>

  <Step title="Create a JWT">
    After installation, you'll need a [JWT](../platform/inbox/authentication) to authenticate your users.
  </Step>

  <Step title="Configure the CourierProvider">
    Use JWTs to initialize and configure the CourierProvider in your application.
  </Step>
</Steps>

This setup enables seamless message retrieval for the Inbox.

### JWTs

A JWT should be [generated](../reference/auth/issue-token) on a per-user basis in your backend and be supplied to your frontend. When using JWT authentication, be sure to enable JWT support on the [Courier Inbox Provider](https://app.courier.com/integrations/catalog/courier)

<Frame caption="Inbox JWT">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/inbox-integration.png" />
</Frame>

The recommended way of doing authentication with Courier Inbox is to generate a JWT token for each user using the inbox.

The required scopes are the following:

* `read:messages` - Courier can fetch the messages
* `write:events` - Courier can create events like read/unread/archive

An example payload to the issue-token api looks like :

```json
{
  "scope": "user_id:{{userId}} inbox:read:messages inbox:write:events"
}
```

<Info>
  If you need your tokens to expire periodically you can pass an `expires_in` property to the token generation.
</Info>

### CourierProvider

Install the following packages to get started:

```node
yarn add/npm i @trycourier/react-provider
yarn add/npm i @trycourier/react-inbox
```

<Note>
  `@trycourier/react-provider` is a peer dependeny of `@trycourier/react-inbox` and must also be installed
</Note>

In order for the `Inbox` component to be placed in the dom you will need to use the `CourierProvider`. This will handle context and give us access Courier's backend API.

The `CourierProvider` & `Inbox` hierarchy:

```jsx
//App.js
import { CourierProvider } from "@trycourier/react-provider";
import { Inbox } from "@trycourier/react-inbox";

function App() {
  return (
    <CourierProvider>
      <Inbox />
    </CourierProvider>
  );
}
```

## Implementation

To implement the Courier Inbox in a React application, you can use the `@trycourier/react-inbox` package mentioned previously, which provides components for integrating a notification inbox seamlessly. Here's a basic example:

```jsx
//App.js
import { useState, useEffect } from "react";
import { CourierProvider } from "@trycourier/react-provider";
import { Inbox } from "@trycourier/react-inbox";

function App() {
  const [authorization, setAuthorization] = useState();

  useEffect(() => {
    const response = await fetchAuthToken();
    setAuthorization(response.token);

    const interval = setInterval(async () => {
      const response = await fetchAuthToken();
      setAuthorization(response.token);
    }, 300000);

    return () => clearInterval(interval);
  }, []);

  return (
    <CourierProvider userId={yourUserId} authorization={authorization}>
      <Inbox />
    </CourierProvider>
  );
}
```

## Sending Inbox Messages

In your frontend, the `Inbox` component will be visible straight away as a bell icon. Clicking this will initially show you an empty inbox until you start sending messages.

<Frame caption="Inbox Icon">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/inbox-empty.jpg" />
</Frame>

### Send a Notification to Inbox

The fastest way to test this is to send a request to the [Courier API](../reference/send/message).

```json
// https://api.courier.com/send
{
    "message": {
          "to": {
            "user_id":"<YOUR_COURIER_USER_ID>", // user_id must have the appropriate JWT permissions mentioned previously
          },
          "content": {
            "title":"Push up!",
            "body":"Hi {{name}}, just testing that the notification displays as a toast."
          },
          "routing": {
            "method":"single",
            "channels":["inbox"]
          },
          "data": {
            "name":"<YOUR_NAME>"
          }
    }
}
```

You should now be able to see your message displayed in the Inbox.

<Frame caption="Inbox First Message">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/inbox-message.jpg" />
</Frame>


# How to Use Test Events
Source: https://www.courier.com/docs/tutorials/how-to-preview-notification

Use Test Events in the Notification Designer to preview and validate variables, branding, and message content across channels before sending, including support for email previews and logs-based test event creation.

This step-by-step guide helps you define test events and use the preview function across multiple delivery channels.

## Previewing Your Notification

You can preview the final rendered output of a notification in the notification designer's `preview` tab.

### Using Test Events

When you initially open the preview tab on the demo Welcome to Courier email, there will be a generic "Welcome Example" event with an empty profile.

This is why any variables you insert into the Example template will not work until you add your own custom Test Event or update the JSON of the Welcome Example.

<Frame caption="New Test Event">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preview-notifications/preview-notification-test-event.png" alt="New Test Event" />
</Frame>

<Note>
  **INFO**

  In order to send an email notification or SMS via the [Send Tab](../platform/content/notification-designer/design-a-notification), you will need to include an email and/or phone # in the `profile` object of the test event Json.
</Note>

### Previewing Variables

To preview and validate any variables you've built into the Notification, you need to create a test event.

<Steps>
  <Step title="Managing Test Events in the Preview">
    * Click `manage` Test Events in the Preview.
  </Step>

  <Step title="Format Using JSON">
    * Add valid JSON key/value pairs with values in the data and/or profile objects for your variables.
  </Step>
</Steps>

**Read More:** [JSON Paths](../platform/content/variables/json-paths-variables) and [Using Substitution Variables](../platform/content/variables/inserting-variables) in your Notifications.

### Creating Test Events From Logs

When you send an event to Courier, that event can be viewed in the [Data Log](../platform/logging/message-logs). You can turn those events from the data into a test event - it will be located in the preview tab of the event it is mapped to. Open "Event Received" in the Timeline and click "Save as Test Event."

<Frame caption="Create a Test Event From the Logs">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preview-notifications/preview-notification-log-event.png" alt="Create a Test Event From the Logs" />
</Frame>

### Email Preview

Email is the only channel that will show a fully rendered image as it will appear to the recipient in the preview. In other channels the preview only allows you to validate the variables.

#### Plain Text Preview

The Plain Text Preview toggle lets you switch your Email preview between HTML and plain text versions.

<Frame caption="Plain Text Preview Toggle">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preview-notifications/preview-notification-text.png" alt="Plain Text Preview Toggle" />
</Frame>

<Frame caption="Plain Text Preview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preview-notifications/preview-notification-text-preview.png" alt="Plain Text Preview" />
</Frame>

#### Sending a Test Email

When previewing an Email Notification, you can send a test email by selecting yourself or other members of your Tenant to receive it.

### SMS Preview

<Frame caption="Preview Your SMS Before Sending">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preview-notifications/preview-notification-sms.png" alt="SMS Preview" />
</Frame>

### Preview Emails Across Multiple Brands

When previewing an Email, if you have created multiple [Brand Templates](../platform/content/brands/brands-in-email-notifications#customizing-brands), you can switch between them. If you haven't, then the Email preview will use your [Default Brand design](../platform/content/brands/brands-in-email-notifications#the-default-brand).

<Frame caption="Select a Brand to Preview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/preview-notifications/preview-notification-test-brand.png" alt="Select a Brand to Preview" />
</Frame>


# How To Send A Product Notification
Source: https://www.courier.com/docs/tutorials/how-to-send-a-notification

Send product notifications using the Courier Send API or trigger them from Segment events via Courier Automations for real-time, branded communication.

## Send a Notification

There are two primary ways in which you can send a notification. You can trigger a send via the [Courier Send API](../reference/send/intro), or via a [Segment event](./how-to-send-notifications-with-segment).

You can access the code snippet to send your notification via the Courier Send API by selecting the `Send` tab from within the notification designer, and select the runtime that you want to use to make the send call from.

<Frame caption="Your Product Notification Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/notification-send-tab.png" />
</Frame>

### Generating a Code Snippet

Once you have completed the required steps, you'll be able to generate a code snippet and send a test Notification.

<Frame caption="Code Snippet">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/send-notification/send-notification-code.jpeg" />
</Frame>

To generate the right code snippet for your stack and start sending your notification to live users, confirm you have the right selection for these three settings:

<Steps>
  <Step title="Select Your Programming Stack">
    * Choose between a list of programming languages that best fits your server stack to send your notification
  </Step>

  <Step title="Set the Notification Test Event">
    * Choose the [test event](../platform/content/notification-designer/how-to-preview-notification/) you wish to use with your notification to include the correct data and recipient profile sent in the request.
  </Step>

  <Step title="Recipient Profile Set">
    * Make sure your test event includes a [recipient profile](../platform/users/) so the request can successfully send.
  </Step>
</Steps>

### Sending a Test Notification

After you configure the code snippet, setting these values will allow you to send a test Notification from the Send Tab:

<Steps>
  <Step title="Select a Test event">
    * Selecting a test event modifies the send request with the selected `data` and `profile` payloads you wish to test your request with.
  </Step>

  <Step title="Select a Brand">
    * Brand selection is used to give your notification content a consistent look depending on your company brand colors and styling. Available for Email and Courier Inbox.
  </Step>

  <Step title="Send a Test Notification">
    * Alternatively, instead of copying a code snippet and sending it, you can send directly from the send tab page by clicking `Send Test`.
  </Step>

  <Step title="Copy the Code Snippet">
    * The code snippet can be copied and pasted in your implementation to fire off a notification.
  </Step>
</Steps>

**Read more:** [How to Send a Notification](../platform/content/notification-designer/send-a-notification)

## Sending With Segment

In order to trigger a notification from a Segment event, you will first need to install the [Courier destination](https://segment.com/docs/connections/destinations/catalog/courier/) in your Segment account, and then [create a Courier automation](./how-to-send-an-automation/).

<Frame caption="Automations Overview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/automations-list-page.png" />
</Frame>

### Linking Segment to an Automation

Once you have created an Automation, you need to configure the Segment event as the automation trigger.

<Frame caption="Setting Up Your Automations Triggers">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/segment-checkout-complete.gif" />
</Frame>


# How to Send a One-Time Notification
Source: https://www.courier.com/docs/tutorials/how-to-send-a-one-time-notification

Send personalized, branded one-time notifications instantly via Courier’s UI across email, SMS, or chat—no code or automation required.

## What is a one-time notification?

A one-time notification is a notification that is sent to your users manually using Courier's UI. This product feature enables a one time send to be crafted and sent to your users in under 5 minutes.
If you need to update your users quickly with a notification, One-Time Send is the tool for you.

## How to use Courier’s One-Time Send feature

Select which channel you’d like to send a notification through. A provider will then automatically be chosen for you. This
selection is only made given that you have configured providers on your account. From here, write your message, and then send the notification immediately or schedule the notification for later.

## How do I send notifications with the SMS channel?

The SMS channel includes a safeguard for sending notifications. First, write out a text message you would like to send to a user. In order to have this notification sent, first input text and then hit the
‘enter/return’ key on your keyboard to *activate* a text. Your UI will have your text appear activated within a blue text bubble. To send this SMS notification, after activation, you must then click on
"Send Now" or "Schedule", depending on whether you'd want to send this notification immediately or schedule it for later.

It’s important to note that texts are sent in the order of the blue text bubbles. You can delete blue text bubbles as well by clicking on the “x” found within the bubble. We will be
introducing more functionality to this section in the near future. Below is an image of what it looks like upon hitting ‘enter/return’, *activating* a SMS notification.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/qs-sms-channel-screenshot.png" />
</Frame>

## How do I change my branding?

Your default brand will only be present within Courier's One-Time Send. Ensure that you have a **default branding option** selected, this option will show up within ont-time send for you automatically.
To change your branding default settings, visit our page on [brands](https://app.courier.com/designer/brands).

Once you’ve created the branding that you’d like to view within Courier's One-Time Send, then hit the gear icon on the top left to visit the settings module in order to make it your default branding.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/qs-branding.png" />
</Frame>

From here, select the option “Set as Default”. Note, if you do **not see this option** this means that this brand is currently **set as your default branding**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/qs-set-as-default.png" />
</Frame>

These changes will be reflected within our UI.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/qs-showing-branding.png" />
</Frame>

## How do I add users?

If you’re choosing to send to users via Email or SMS, you can directly write the recipient’s email address or phone number (with area code included) right into the “To:” section of Courier's One-Time Send and
ensure that you hit 'enter/return' afterwards to register this input.

You can also add users by visiting our “Users” tab [here](https://app.courier.com/database/users). Here you can add users, and create lists, and audiences as well. Once this is complete, these changes/additions
will be visible through Courier's One-Time Send. Simply search for your recipient and you will see them appear in the dropdown of options.

## How can I start sending Slack and/or Teams notifications?

Both Slack and Teams are providers that connect to the Courier app within the 'Chat' channel. In order to start sending notifications through Slack and/or Teams, both providers must
be configured providers.

You can preview a list of Chat providers we provide [here](../external-integrations/direct-message/intro). Select whichever provider interests you, and configure it.
Upon configuration, you will see your configuration appear within Courier's One-Time Send.

## How do I personalize my notifications to users?

Adding variables can help you personalize your notifications when sending to your users. You can extract user profile information, making
your notification more personalized to your users.

Here's a [comprehensive guide](../platform/content/variables/inserting-variables/) on how to use variables within your notifications.

## How do I preview a notification?

Crafting and previewing a notification is synchronous within Courier's One-Time Send. We’ve completely gotten rid of the preview as the notification that you craft is what the user will evidently see. Give this a try,
craft an email notification, and send it to yourself. You’ll see that the experience of crafting a notification and receiving is quite literally the same. This applies to all channels and hopefully makes your experience much easier as a customer.


# How To Send Automations
Source: https://www.courier.com/docs/tutorials/how-to-send-an-automation

Learn how to send automated notifications using Courier’s API with ad-hoc definitions or reusable automation templates.

## Automation Schema

It's possible to define an Automation Schema in two ways:

1. Ad-Hoc
2. Automation template

### Ad-Hoc Automations

Ad-hoc automations are one-time schema definitions that allow run context to be defined in the schema itself:

```json
{
  "automation": {
    "recipient": "abcd-1234-wxyz-6789",
    "data": {
      "title": "Weekly Digest"
    }
      "steps": [
      {
        "action": "fetch-data",
        "webhook": {
          "url": "https://main.app/digest"
        },
        "merge_strategy": "replace"
      },
      {
        "action": "send",
        "template": "WEEKLY-DIGEST",
        "profile": {
          "email": "test@courier.com"
        }
      }
    ]
  }
}
```

### Automation Templates

<Note>
  **AUTOMATION TEMPLATE VISUAL DESIGNER**

  An automation template is a re-usable, pre-defined list of automation steps created in the [automation design studio](../platform/automations/designer).

  Published templates are run or "invoked" using the Courier Automation API automations/:templateId/invoke endpoint.
</Note>

By default, an automation template is a JSON schema definition of the following format:

```json
{
  "cancelation_token": "",
  "steps": []
}
```

Run context is passed in the API request body as a first-class object, and its values are referenced at the step level by using Accessor Types.

**Structure**

```js
// define global variables here
{
  sources: ["<EVENT_NAME>"], // list of event source that this
  template can be triggered by
  steps: [], // a list of automation steps
}
```

At runtime, you can pass a data and/or profile property into your template.

```js
//1.define the template to send to a list of users
local list=data('users', []);
{
  steps: [
    {
      action: "send",
      profile: {
        email: email
      },
      recipient: item.userId,

    }
    for item in list
  for email in item.email
  ]
}

//2.make the api call and provide the user list

{
  event: "SEND-TO-USERS",
  user: "abc-123",
  //defaultrecipientdata: {
    users: [
      {
        userId: "123-abc-123",
        email: [
          'user1@gmail.com',
          'user1_altl@gmail.com'
        ]
      },
      {
        userId: "abc-123-abc",
        email: [
          'user2@yahoo.com'
        ]
      },

    ]
  }
}
```

## Invoking Automations

To trigger an automation run, there are two apis that can be called with your Courier API token.

* `automations/invoke`
* `automations/{templateId}/invoke`

### Invoke An Ad-Hoc Automation Via API

`POST - /automations/invoke`

Invoke an ad hoc automation run, by providing a valid automation definition in the request body.

**Structure**

```json
{
  "brand": "<BRAND_ID>", // optional: brand id
  "template": "<TEMPLATE_NAME_OR_ID>", //optional
  "recipient": "<RECIPIENT_ID>", //optional: user id for automation
  "data": {}, //optional: root level data for the ad hoc automation
  "profile": {},
  //optional root level profile information for ad hoc
  "automation": {
    "cancelationToken": "<CANCELATION_TOKEN>",
    //optional: can be used to later cancel the running automation
    "steps": [
      {
        "action": "send",
        "data": {}, //optional: uses root level data if not present
        "profile": {},
        //optional: uses root level profile if not present
        "recipient": "<RECIPIENT_ID>",
        //recipient of the message. will fallback to root recipient
        "template": "<TEMPLATE_ID>",
        //the notification template to use,
        "brand": "<BRAND_ID>",
        //optional: will use root level brand_id if not present
        "override": {}, //optional: send provider override
        "if": "<CONDITIONAL_EXPRESSION>"
        //optional javascript boolean expression
        //see send step documtenation above for more details
      },
      {
        "action": "delay"
        //either duration or until is required
        //see delay step documentation above for more details
      },
      {
        "action": "cancel",
        "cancelationToken": "<CANCELATION_TOKEN>",
        "if": "<CONDITIONAL_EXPRESSION>"
        //optional javascript boolean expression
        //see cancel step documentation above for more details
      }
    ]
  }
}
```

### Invoke an Automation Template Via API

`POST - /automations/{templateId}/invoke`

**Structure**

```json
{
  "template": "<TEMPLATE_NAME_OR_ID>",
   // optional: the automation template name
  "recipient": "<RECIPIENT_ID>",
   // optional: recipient id for the automation run
  "data": {}
   // optional: root level data to be passed into automation template
  "profile": {}
   // optional: root level profile information to be passed into your automation template
}
```

### Invoke a Template Via Segment

You can trigger an automation template via Segment event in the [Automations Visual Designer](../platform/automations/designer).

<Note>
  **INTEGRATE SEGMENT**

  You can follow Courier's Segment [integration guide here](../external-integrations/cdp/segment/segment-integration).
</Note>

Once you have fished setting up Courier's Segment Integration

1. Open the Automation you wish to trigger via Segment event
2. Click to open the Start step
3. Select the segment event type(s) you want to trigger this event.

<Warning>
  **TRACK EVENT REQUIRES AN EXACT NAME MATCH**

  If you select a Segment Track event trigger to invoke your template, you must provide an event name that is the exact match to the event's name in Segment.
</Warning>

## Automation Examples

### Sending a Digest Notification

Use automations to fetch data and render it in a group digest or send a digest with recipient-specific data to every member of a list.

#### Generic Digest

A generic digest is when every recipient in the list receives the same notification with the same data. To automate a generic digest, simply define a fetch-data step, followed by a send-list step. The data that is fetched, will be used to render a notification that is sent to each recipient.

This automation definition can be saved as an [automation template](../platform/automations/designer) and scheduled to be invoked on any recurring interval or once on a specific date.

```json
{
  "automation": {
    "steps": [
      {
        "action": "fetch-data",
        "webhook": {
          "url": "https://main.app/digest"
        },
        "merge_strategy": "replace"
      },
      {
        "action": "send-list",
        "list": "TEAM-LIST",
        "template": "WEEKLY-GENERIC-DIGEST"
      }
    ]
  }
}
```

#### Recipient Digest

A recipient digest is when every recipient in the list receives a unique notification with recipient-specific data.

To automate a recipient digest, define a send-list step with a `data_source` property. Specific data will be fetched for each recipient and will be used to render a notification that is sent to each recipient. Note that the `data_source.url` should accept a recipientId query string parameter.

This automation definition can be saved as a template and scheduled to be invoked on any recurring interval or once on a specific date.

```json
{
  "automation": {
    "steps": [
      {
        "action": "send-list",
        "list": "TEAM-LIST",
        "template": "WEEKLY-RECIPIENT-DIGEST",
        "data_source": {
          "webhook": {
            "url": "https://main.app/digest",
            "method": "GET"
          },
          "merge_strategy": "replace"
        }
      }
    ]
  }
}
```

#### Example Recipient Digest

As an example, you could use the recipient digest to send a weekly update to students of an online school platform.

By calling the data source, and getting the following payload:

```json
{
  "data": {
    "title": "Weekly Progress Report",
    "username": "Count von Count",
    "school": "B.Birds's Online Math Academy",
    "nums": 1,
    "courses": [
      {
        "name": "Counting",
        "progress": "90%",
        "grade": "A+"
      }
    ]
  },
  "profile": {},
  "override": {}
}
```

You could send the following notification with each individual student's progress:

<Frame caption="Recipient digest notification template example.">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/example-notification-weekly-progress.png" />
</Frame>

<Frame caption="Preview of the recipient digest template.">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/example-notification-weekly-progress-preview.png" />
</Frame>

### Batch Send to an Ad-Hoc List of Recipients

How to use Courier automations to batch send notifications to an ad hoc group of multiple recipients built at run time.

Automations allow you to use the `send` action to deliver a message, or series of messages, to a list of users that you build dynamically at run time with a single [Automation API](../reference/automation/invoke) call.

Data for each message can vary per step. This includes data, profile, and the template.

**Here is an example:**

```json
// POST /automations/invoke
{
  "automation": {
    "steps": [
      {
        "action": "send",
        "data": {},
        "profile": {},
        "recipient": "<RECIPIENT_ID_1>",
        "template": "<TEMPLATE_ID_1>"
      },
      {
        "action": "send",
        "data": {},
        "profile": {},
        "recipient": "RECIPIENT_ID_2",
        "template": "TEMPLATE_ID_2"
      }
      // ... more send events
    ]
  }
}
```


# How To Send Bulk Notifications
Source: https://www.courier.com/docs/tutorials/how-to-send-bulk-notifications

Learn how to use Courier’s Bulk API to send notifications to large user groups with batched ingestion and a single execution call.

The Bulk API makes it possible to incrementally build a notification that goes out to a very large number of users and then execute the send with a single API call. While the Send API can be used to deliver messages to multiple recipients, the Bulk API provides more tools to examine the progress of the job as it executes.

Like sending a single message, the Bulk API can used across channels (eg. email, SMS, chat, in-app inbox, push) and providers (eg. Twilio, Sendgrid, etc).

## Create a Bulk Job

Bulk jobs must first be defined. The structure of a job mimics the set of available configuration values for sending an individual message.

**Request:**

```json
// POST https://api.courier.com/bulk
{
  "message": {
    "brand": "my-brand", // optional brand id
    "data": {}, // global data bag used for all users
    "locale": "en_US", // optional
    "message": {
        "template": "my-notification-or-event",
    }
  }
}
```

<Note>
  All bulk endpoints also support idempotent requests using the `Idempotency-Key` header.
</Note>

**Response:**

```json
// Status: 201
{
  "jobId": "1-61e9dd53-b5bb6c863b7ffbe83ad4b28d"
}
```

## Ingest Users to the Bulk Job

Using the job ID, multiple users can be ingested into the job.

<Note>
  The ingestion does **not** have to happen in a single call, you could have multiple ingestion invocations as long as job is **not** triggered. The bulk job **will not expire** until it is invoked.
</Note>

**Request:**

```json
// POST https://api.courier.com/bulk/{jobId}
{
  "users": [
    {
      "profile": {}, // optional, similar to /send profile object
      "preferences": {}, // optional, similar to preferences API
      "to": {
        "user_id": "spike_spiegel",
        "data": {    // optional, takes precedence over global message data bag
        "recipientName": "Spike Spiegel"
      }
      }
    }
  ]
}
```

**Response with errors:**

```json
{
  // gives errors for each user if found
  "errors": [
    {
      "error": "Duplicate user",
      "user": {
        "profile": {
          "email": "foo@bar.com"
        },
        "data": {
          "recipientName": "Foo Bar"
        },
        "recipient": "foo-bar"
      }
    }
  ],
  // gives total count of users that were successfully ingested
  "total": 1
}
```

## Executing the Job

Once you have added the users to your job, it can be triggered by calling the `/run` endpoint with the `jobId`.

<Note>
  A `jobId` can only be triggered once. If you wish to send messages to more users after the job was triggered, you'll have to create a new job definition and add the remaining users to the new job.
</Note>

**Request:**

```json
// POST https://api.courier.com/bulk/{jobId}/run
```

**Response:**

```json
// Status: 202
```

## Fetching Bulk Job Information

### Job Status

The `jobId` can be used to track the status of the individual messages in the bulk job. You should expect the status as you see in the `GET /messages` endpoint which includes delivery statistics like `sent`, `delivered`, `clicked` and more.

```json
// GET https://api.courier.com/bulk/{jobId}
{
  "job": {
    "definition": {
      "event": "V7E6M48EFQMB78H746QCCD1KSRAA"
    },
    "enqueued": 2, // placed on the pipeline
    "failures": 0, // errors during bulk job processing
    "received": 2, // count of users in a bulk job
    "status": "COMPLETED" // status of the job
  }
}
```

### Job Items/Users

```json
// GET https://api.courier.com/bulk/{jobId}/users?cursor={cursor}
{
  "items": [
    {
      "profile": {
        "email": "foo@courier.com"
      },
      "data": {
        "recipientName": "Foo"
      },
      "recipient": "foo",
      "messageId": "1-61e9dd7d-13c08339357603322c433d55", // Courier Message ID
      "status": "ENQUEUED"
    },
    {
      "profile": {
        "email": "bar@courier.com"
      },
      "data": {
        "recipientName": "Bar"
      },
      "recipient": "bar",
      "status": "PENDING"
    }
  ],
  "paging": {
    "cursor": "cursor",
    "more": true
  }
}
```

### Message Information

The `messageId` from each item is the same as you get from looking up an individual message from `/send` requests. Messages are visible on the [Courier Logs](../platform/logging/message-logs) or can be fetched via Messages API as expected. If you have [Outbound Webhooks](../platform/workspaces/outbound-webhooks) configured, Courier will invoke it with the message data throughout the lifecycle of the message.


# How To Send Digests
Source: https://www.courier.com/docs/tutorials/how-to-send-digests

Learn how to build scheduled digests using Courier’s preferences, automation workflows, and subscription topics to batch and send grouped event data.

# Sending Digests With Automations

Courier's digest workflow consists of the following mechanisms:

* Preference topics to set a configured interval
* Message templates that reference the digested event data sent to a recipient
* Automations to ingest the incoming digest data, and to trigger the digest.

## Creating a Digest in Preferences

To create your first digest, you will need to create a new subscription topic with at least one schedule. Head over to the [preferences editor](https://app.courier.com/settings/preferences) and create a new subscription topic.

<Note>
  Notification templates **don't need to be mapped** to a digest subscription topic since they are triggered through an automation.
</Note>

## Digest Settings

Once your digest subscription topic is created, you need to enable the `digests` toggle to allow scheduling, configure categories, link notifications, and access more advanced settings.

### Schedules

This section is for defining the schedule the digest will be released. At least one is required, but multiple schedules are accepted to give your users a preference of their desired schedule. They will have the choice to edit this through the [preferences hosted page](../platform/preferences/hosted-page/).

We can add one schedule for now. This will be our default schedule.

<Frame caption="Digest Schedule">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/digest-schedule.png" alt="Digest Schedule" />
</Frame>

### Categories

Every digest should have a category. There will always be a default category key, in this case it's `digest`. This is how the data will be released to the automation under a specific category key.

<Note>
  For `10 highest` or `10 lowest` retain items, a `sort-key` will be required so Courier can sort which items it needs to sort.
</Note>

<Frame caption="Digest Category Key">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/digest-category.png" alt="Digest Category Key" />
</Frame>

With the current retain setting for sorting the **10 highest likes**, Courier will digest the 10 highest `likes` items coming in from event payloads.

Sample payload:

```json
{
    "channel": "server",
    "email": "rodrigo@courier.com",
    "event": "tweet",
    "likes": 20, // Courier will digest the highest 10 likes out of n events
    "messageId": "segment-test-message-asc5f",
    "projectId": "dvH4TNFwoeMr729ExtJ8aQ",
    "properties": {
      "property1": 1,
      "property2": "test",
      "property3": true
    },
    "replay": true,
    "timestamp": "2025-01-10T16:57:29.568Z",
    "tweet": "Hello World",
    "type": "track",
    "userId": "rod"
  }
```

## Digesting With Automations

The next step in the digest process is to link automations to the subscription topic that holds the digest settings. We will need to use 2 separate automations:

* One that adds the events to the digest
* The digest trigger that adds the digested events to a notification

### Adding to Digest

The first automation will add incoming events from the specified trigger into the digest. The digest node should be mapped to the preference topic that holds your digest settings.

<Frame caption="Add to Digest Automation">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/add-digest.png" alt="Add to Digest Automation" />
</Frame>

### Digest Trigger

The second automation will trigger once the retained items are met. The send step will consume the incoming data and should be configured to parse the data accordingly. Make sure all your templates are published before sending any events.

<Frame caption="Trigger Digest Automation">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/trigger-digest.png" alt="Trigger Digest Automation" />
</Frame>

## Digested Events

Courier's Automation Logs will give you insight on digested events triggered by automations. Each event that comes in will be marked as `add-to-digest`.

<Frame caption="Digest Log">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/add-digest-log.png" alt="Digest Log" />
</Frame>

Once the retained strategy is met, the automation logs will show a triggered event with (in our case) the top ten likes gathered from the events.

<Frame caption="Digest Trigger Invoked">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/digested-log.png" alt="Digest Trigger Invoked" />
</Frame>

Subsequently, the message logs will contain the digested data and pass it to the notification template.

<Frame caption="Digest Context Passed to Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/message-log-digest.png" alt="Digest Context Passed to Template" />
</Frame>


# How To Send Notifications With Segment
Source: https://www.courier.com/docs/tutorials/how-to-send-notifications-with-segment

Integrate Segment with Courier to trigger automated notifications from tracked user events in your app.

Courier's destination for Segment provides an easy way to send data from web or mobile applications into Courier to automate notification delivery and management. Event data can flow from your application through Segment's integration into Courier.

## Overview

How Courier API calls work with Segment:

1. In your application, Segment identifies a user action and creates a track/identify API call.
2. The Segment event API call sends the event to Courier
   * Segment `properties` JSON data is passed into the Courier Send API as elements of the `data` JSON object
   * Segment's `userId` is used to locate the recipient in Courier with the same ID or create a new one when none are found
3. Courier receives the event from Segment
4. The event within Courier triggers any [automations linked](../platform/automations/segment) to it
5. The linked automations run send any notifications that are linked to them

Sample Segment data payload:

```json
{
  "brand": null,
  "data": {
    "channel": "server",
    "email": "test@example.org",
    "event": "Rod-Test",
    "messageId": "segment-test-message-7cn29",
    "projectId": "dvH4TNFwoeMr729ExtJ8aQ",
    "properties": {    //Segment properties object nested inside the Courier data object
      "email": "rodrigo@courier.com",
      "property2": "test",
      "property3": true
    },
    "replay": true,
    "timestamp": "2024-10-02T16:23:03.956Z",
    "type": "track",
    "userId": "test-user-hke8ei"
  },
  "profile": null,
  "recipient": "test-user-hke8ei"
}
```

### Before Starting

Prior to sending notifications with Segment you will need the following:

* A Segment account
* A notification template configured with a downstream provider within Courier
* Segment [integrated](../external-integrations/cdp/segment/segment-integration) to Courier.

[Learn more about Courier Automation concepts >](../tutorials/how-to-automate-message-sequences)

### Linking Automations

Linking automations to Segment events allows you to create a flow of actions that will be triggered by specific events. This means that whenever an event occurs in your application and is sent through Segment, any linked Courier automations will trigger a workflow to send a notification with the data passed from the event.

* In the [Segment integration page](https://app.courier.com/integrations/catalog/segment), locate the event you want to link, click the + sign on the second column, and select the automation of your choice.

* From an automation template, you can link an automation to a segment event from the dropdown menu.

<Frame caption="Courier Automation Segment Dropdown">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/platform/automations/assets/segment-checkout-complete.gif" />
</Frame>

Additionally, `refs.data.properties` points to the data object from Segment. `refs.data.userid` references this data from Segment directly and auto populates the recipient ID in the automation send step (see Automation Send Step figure below). Below the recipient ID, add the "Profile" optional field with the following JSON to get the user's email from the Segment data object:

```json
{
  "$ref": "data.email"
}
```


# How To Create And Send To A List Or List Pattern
Source: https://www.courier.com/docs/tutorials/how-to-send-to-a-list-or-list-pattern-using-wildcarding

Learn how to structure Courier list IDs for wildcarding and send notifications to groups using lists or list patterns.

The Courier Lists API lets you create Lists and associate one or more recipients with them in the Courier database. Then send to a list or a list pattern. Following the list pattern guidelines outlined in this document enables wildcarding.

<iframe width="100%" height="400" src="https://www.youtube.com/embed/0k70TmgSK8o?si=dIL32x81U3lGtNvS" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

## Why use Lists?

Many times there are groups of users you want to message with the same notification triggered by the same event. In the past, this meant tens or sometimes thousands of API calls, triggering the same notification over and over. With Courier’s Lists API, you’re able to create lists, subscribe recipient profiles to them and send to every user on the list with a single Send API call.

When you send to a list, Courier handles the message fan-out following user preferences and your channel priorities–to deliver across Push, Email, SMS, Messaging Apps, and more.

With the Lists API, you can easily do things like:

* Reach every user in a shared workspace.
* Notify all users who follow a specific project.
* Alert users subscribed to a blog category
* Message users who opt into specific notifications.

## What are Lists and Lists Patterns?

A list usually represents some kind object in your system. Once you've created a List, you can send a message to all the recipients you subscribed to that List with a single Send API call (Courier handles the fan-out).

When naming your Courier Lists, we recommend you follow our List Pattern guidelines. Using this pattern will allow you to use wildcarding to send to multiple Lists with a single Send API call.

## Understanding and defining List ID Patterns

Courier supports List IDs with up to four parts to enable wildcard sending.

Thinking about how to structure your List IDs according to Courier's List pattern support (up to four parts in a List) will allow you to send to multiple List parts within a related pattern using a single API call.

\*\*Follow this basic pattern when defining List IDs.

* `part1`
* `part1.part2`
* `part1.part2.part3`
* `part1.part2.part3.part4`

<Warning>
  **CAUTION**

  You must specifically subscribe users to every List or List part that apply to them.
</Warning>

Each ID string is its own List. If you provide `part1.part2` as the List id when creating a List, that's a single List with the id of `part1.part2`

Example: subscribing a user to `part1.part2` \*does not \*automatically subscribe users to `part1`

## List Pattern Examples

**As an example, let's apply this relational pattern to Pokémon:**

* `pokemon`
* `pokemon.type`
* `pokemon.type.generation`
* `pokemon.type.generation.evolution`

**So a list of List IDs following this pattern could be:**

* `pokemon`
* `pokemon.grass`
* `pokemon.fire`
* `pokemon.grass.gen1`
* `pokemon.grass.gen2`
* `pokemon.fire.gen1`
* `pokemon.fire.gen2`
* `pokemon.grass.gen1.evolution1`
* `pokemon.fire.gen1.evolution1`

## Using Patterns and wildcards to send to multiple Lists at a time

Following this four-part List pattern allows you to send to more than one List at the same time by using wildcards. You can wildcard up to 3 of the 4 parts within a List pattern.
Using a single asterisk `*` will wild card every List within that part.

Using a double asterisk `**` will wild card every List in every part that follows the first part. IE it's like saying "all List that start with".

**Here are a few wildcard examples using our Pokemon Lists:**

**pokemon.\*.gen1**

`pokemon.*.gen1` would ***only*** send to the ***unique*** users subscribed to ***these exact lists:***

* `pokemon.grass.gen1`
* `pokemon.fire.gen1`

\*\*pokemon.grass.\* \*\*

`pokemon.grass.*` would ***only*** send to the ***unique*** users subscribed to ***these exact lists:***

* `pokemon.grass.gen1`
* `pokemon.grass.gen2`

**pokemon.fire.\*\***

`pokemon.fire.**` would ***only*** send to the ***unique*** users subscribed to ***these exact lists:***

* `pokemon.fire.gen1`
* `pokemon.fire.gen2`
* `pokemon.fire.gen1.evolution1`

**pokemon.\*\***
While `pokemon.**` would send to every ***unique*** user subscribed to any list below `pokemon`.

* `pokemon.grass`
* `pokemon.fire`
* `pokemon.grass.gen1`
* `pokemon.grass.gen2`
* `pokemon.fire.gen1`
* `pokemon.fire.gen2`
* `pokemon.grass.gen1.evolution1`
* `pokemon.fire.gen1.evolution1`

## Invalid Lists, List Patterns and Wildcards

<Warning>
  Examples of invalid list IDs, patterns and wildcarding
  The following are examples of invalid List IDs, Patterns and wildcarding that Courier List and Patterns do not support.

  **Invalid List IDs:**

  * Empty strings.
  * List IDs may not include \* or # in the in the name.
  * List IDs my not start or end with a period . or include consecutive periods ..
  * List IDs may not include spaces ex: list name would be invalid while, list\_name would be valid.
  * List IDs may not include more than four parts. ie root\_part.part.part.part.part etc. would be invalid.

  **Examples of Invalid List Patterns and wildcards**

  `**` : List Patterns cannot match all Lists. It is not possible to send to all Lists using wildcards, so sending a request with only (\*\*) will fail.

  `**.part` : List Pattern cannot include a starts with (\*\*) anywhere but at the end.

  `*.**` : List Pattern cannot include an asterisk (\*) followed by asterisks (\*\*)

  `part.*.` : List Pattern cannot end with a period (.).

  `.part.part` : List Pattern cannot start with a period (.).

  `..part.*` :List Pattern cannot include consecutive periods (..).

  `part .part.part` List Pattern cannot include spaces.

  `part.***` : List Pattern cannot include more than two consecutive asterisks.

  `poke**`, `pokemon.fire.g*` : The wildcard (\*) or (\*\*) must replace the entire part name within the List pattern.
</Warning>

## Sending to a list or list pattern

To send to a list or list pattern use the `POST /send` endpoint

<Note>
  **SEND API**

  [POST /send](../reference/send/message)
</Note>

**Sending to a list**

```bash
curl --request POST \
     --url https://api.courier.com/send \
     --header 'Accept: application/json' \
     --header 'Authorization: Bearer TOKEN GOES HERE' \
     --header 'Content-Type: application/json' \
     --data '
{
     "list_id": "pokemon.grass",
     "event": "04de5ab9-8314-2e39d6b"
}
'
```

**Sending to a list pattern**

```bash
curl --request POST \
     --url https://api.courier.com/send \
     --header 'Accept: application/json' \
     --header 'Authorization: Bearer TOKEN GOES HERE' \
     --header 'Content-Type: application/json' \
     --data '
{
     "list_pattern": "pokemon.fire.**",
     "event": "04de5ab9-8314-2e39d6b"
}
'
```


# How To Send Your First Message
Source: https://www.courier.com/docs/tutorials/how-to-send-your-first-message

Learn how to send your first notification using Courier with both templated and inline messages via the designer or API.

Welcome to Courier! In this guide we'll walk you through the basics for sending your first notification through different methods:

1. A templated message
2. An inline message

Courier offers both a web-based [notification designer](../platform/content/notification-designer/notification-designer-overview) so that anyone, regardless of technical proficiency, can create and edit templates, and a robust [API infrastructure](../reference/send/message) that can be used to send messages programmatically through your [preferred tech stack](../sdk-libraries/intro).

## Creating a Templated Notification

To create your first notification, head to the [asset manager](../platform/content/asset-manager) and create a notification from the `new` button. Select `Message Template`, and follow the prompt to name your notification.

### Configure Delivery Channels

After creating your message template, you will need to add the delivery channels you want to use with your template. For now, we'll use an `email` channel and select [SendGrid](../external-integrations/email/sendgrid) as the provider.

<Frame caption="Select your channel provider">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/tutorials/channel-selection.gif" />
</Frame>

#### Delivery Routing Strategy

By default, message templates in the Courier designer will be configured to use the `best of` [routing strategy](../platform/sending/channel-priority). This means that if your message template has multiple delivery channels, Courier will send to the first channel in the list and fallback on the following channels if the send request encounters a profile error. Below you can find a brief breakdown of the different routing strategies:

| Strategy           | Routing Description                                                                                                                                                                                                                                   | API Definition |
| ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------- |
| **Best of**        | Courier will attempt to send to the first channel configured in the message template. Any subsequent channels will be used if the request encounters an `INCOMPLETE_PROFILE` error, and continue down the list until all options have been exhausted. | `single`       |
| **Always send to** | Courier will send to **all** configured channels in the message template.                                                                                                                                                                             | `all`          |

### Create Your Notification Content

Now that you have selected a channel and provider, you can begin creating content to your notification using [content blocks](../platform/content/content-blocks/content-block-basics). If you're hitting writer's block, Courier offers an [AI content assistant](../tutorials/how-to-use-AI-to-build-notifications) that can help you draft a message based on the prompt you provide. For this example, we'll create a message using some text blocks, image blocks, and CTA buttons.

Once you're happy with the content in your email channel, you can create another channel and repurpose the blocks you've already created from the Content Library. Courier dynamically adjusts content blocks to match every channel's technical specifications. In this case, the `SMS` channel has created a URL since buttons cannot be rendered for SMS messages.

#### Preparing a Test Event to Configure Data and Recipients

As a developer-focused product, Courier uses JSON-formatted data payloads to programmatically insert related customer data into your templates such as names, dates, email, phone numbers and other [user-specific information](../reference/profiles/by-id) that pertains to the recipient. The following breakdown highlights two important aspects of a Courier send request:

| JSON Object | Description                                                                                                                                                                                                                                                                                                                                                                                                                                            | API Definition |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------- |
| Data        | The data object in the send request stores all data about a recipient. This can come from an event like Segment Track, which includes information like date, flight time, name, etc. Placeholder variables inside a message template will reference the key-value pairs in this field. If the template has `{name}`, then Courier will look for the equivalent key value in the test event `"name": "John Doe"` and populate the template accordingly. | `data`         |
| Profile     | The profile object contains all your recipient information. This can be an `email`, `phone_number`, and not limited to other custom fields. Profile objects can also include names, but if you want to reference data from the profile in your message template, you must format the path like `{profile.name}`.                                                                                                                                       | `to`           |

For now, copy and paste this sample test event and use it for your send and replace the email field with your own.

```JSON
{
  "data": {
    "name": "Spike Spiegel"
  },
  "profile": {
    "email": "REPLACE_WITH_YOUR_EMAIL"
  }
}
```

### Preview and Publish your Notification

After editing your template, you can [preview](../platform/content/notification-designer/how-to-preview-notification) your notification from the `preview` tab to see how it will render in different email clients. Here you can also see how [dynamic variables](../platform/content/variables/inserting-variables) will render from the test data in your test events.

To make your changes live and ready to use, you need to `Publish` your changes from the top right corner. Now it's time to send.

### Sending your Templated Notification

Now that you're happy with your message template, how it looks, and you've published it, it's time to send. We'll cover 2 ways you can send your notification:

* Through the `send` tab in the message template
* Through an API platform like Postman or Insomnia

#### Sending from the Designer

Once your template is ready to send, you can head to the `send` tab and click on the green`Send Test` button. Courier will send the notification to the email you provided in the previous test event. You can [check the logs](../platform/logging/message-logs) to see the status of the send.

#### Sending from an API Platform

Using an API platform to test your notification sends requires the following to make a successful send:

* An API endpoint we will be making the request to.
* Your message template ID. This is an alphanumerical ID in all caps.
* Your [Courier API key](../platform/content/notification-designer/environments-api-keys) from the environment you're sending from.
* A configured JSON body consisting of at least a `profile`.

The send API uses the `https://api.courier.com/send` endpoint to send messages. Copy this and paste in your API platform editor.

Your message template ID can be found in the main [notification settings](../platform/content/notification-settings/general-settings) by clicking on the cog at the top right. Additionally, you can copy your environment API key here and use it in the header of your API request.

Use the example JSON body below and paste it to your API platform editor, replacing the `template`, and `email` fields with your own:

<Info>
  Remember, the `to` object is the same as `profile`.
</Info>

```JSON
// Endpoint: https://api.courier.com/send
// Method: POST
{
	"message": {
		"template": "REPLACE_WITH_YOUR_TEMPLATE_ID",
		"to": {
			"email": "REPLACE_WITH_YOUR_EMAIL"
		},
		"data": {
			"name": "Spike Spiegel"
		}
	}
}
```


# How to Use AI to Build Notifications
Source: https://www.courier.com/docs/tutorials/how-to-use-AI-to-build-notifications

Use Courier’s AI content generator to quickly create, edit, and refine email notifications with smart prompts and content suggestions.

## Creating New Notifications

Using Courier's AI content generator can help users create email templates by inserting prompts into the AI content generator.

### Using an Intuitive Notification Title

The title you use for the new notification would be an input to the AI which will determine the generated content. Enter a notification title and check the Use AI checkbox.

<Frame caption="AI Notification Title">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/notification-title.png" />
</Frame>

Examples of titles you can use:

* Password Reset Request
* Login Verification
* Subscribe to Our Newsletter
* Forgot Password
* Upgrade Pricing Tier
* Add Your Social Media
* Free Tier Limit Exceeded
* New Feature Launch

### Generated Notification

The Courier AI content generator will build a notification with multiple text blocks and email channel by default. You can add a provider or switch to a channel of your choosing.

<Frame caption="AI Generated Notification Content">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/generated-notification.png" />
</Frame>

## Editing Notification Content

You can use the AI to edit notification content using the content generator toolbar.

### AI Bulb Icon

A text block toolbar includes a bulb icon which opens an AI content generator modal. You can use this modal to dictate the prompt for the AI to use for your content.

<Frame caption="Content Generator Toolbar">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/content-generator-toolbar.png" />
</Frame>

### Prompt the AI to Generate Content

Insert a prompt which provides some context to the AI. Then click `Generate Content`.

<Frame caption="Content Generator Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/content-generator-toolbar-prompt.png" />
</Frame>

### Adding Content to the Notification

You can use the generated content as is, or edit it to best fit your use case. Click `Add Content` to apply your desired content on the text block.

<Frame caption="Content Generator Output">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/content-generator-toolbar-output.png" />
</Frame>

Your text block content will be replaced with the AI-generated content. You can keep exploring with the AI generator as many times as you'd like, or update the content directly.

<Frame caption="AI Content Applied">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/content-generator-toolbar-output-applied.png" />
</Frame>

## Content Generation Prompts

To help you get started, you can follow some resources that could help you explore with different prompts. Please reach out to Courier Support if you have any questions/feedback!

<a href="https://docs.google.com/spreadsheets/d/1EuciDyKqFg2CIoQS89tF238oGtJq8a4mRx8kV9eA1Lc/edit#gid=2011839893" target="_blank" rel="noreferrer">
  List of +50 GPT-3 prompts that you can try on your own
</a>


# How to Use Brands to Customize Email Notifications
Source: https://www.courier.com/docs/tutorials/how-to-use-brands-to-customize

Learn how to customize and manage branded email templates in Courier using the visual designer, custom code, and the Brands API.

## Brand or White-Label your Email Notifications

Courier's Brands feature set lets you apply a consistent look and feel to your email notifications. You can also use this feature to *white-label* email notifications you send on behalf of your customers to their end-user recipients or if you have multiple brands internally.

Courier Brands are also fully API enabled. Developers can get, create, update and delete brands programmatically using our [Brands API](../reference/brands/intro).

<iframe width="100%" height="400" src="https://www.youtube.com/embed/AR5joIs9Zeo?si=5sqPPe7pPgFN5RK7" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

### Using Your Default Brand

Your default brand, along with any custom brand, can be customized and renamed. The default brand cannot be deleted.

*Customizing your default brand is important because:*

* Every email notification you create uses the Default Brand unless you manually disable Brands in the Notification settings.

* If you enable brands on a notification, your Default Brand will be the fallback for any Send API call that does not specify a brand in the user profile.

## Creating a New Brand

* To create a new brand open the notification Designer, select **Brands** in the top menu and click **New Brand**.
* Giving your Brand an optional `brand_id` will allow your developers to manage your brand programmatically using the Brands API.

<Frame caption="New Brand Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/create-brand.gif" />
</Frame>

### Setting a Custom Brand as your Default

To set a custom brand as your default, open the brand settings and click Set As Default.

<Frame caption="Brands Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/set-brand-as-default.png" />
</Frame>

<br />

<Frame caption="Brand Settings Modal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-settings.png" />
</Frame>

## Customizing your Brands

### Use the Notification Designer to customize a Brand

Using the Notification Designer you can create and customize your Brands in the following ways:

* Name
* Logo ([dimensions and requirements](../platform/content/brands/brands-in-email-notifications)).
* Brand colors (Primary, Secondary, Tertiary)
* Brand Header color
* Brand Footer Social links

### Use a Custom Template to create your brand look

If you prefer, you can use code to customize your Brand header and footer by selecting the *Use Custom Template* option in the Brand Designer.

Custom Templates combine the best of both worlds by allowing you to ensure brand consistency using Handlebars and HTML or [MJML](https://mjml.io/) to customize the header, footer and email body background while using the drag & drop content designer to create the body of the email with content blocks that can be reused across channels.

<Frame caption="Brand Custom Template">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-custom-template.png" />
</Frame>

### Customize your Brand Template CSS

You can customize the `<style>` element in the `<head>` section of your Brands using custom templates as well as brands built using the Designer UI. Read more about Courier's [CSS Classnames](../platform/content/brands/css-classnames).

### Preview your Brand-Enabled Email Notifications

To preview what your email notification will look like with different brands applied, open the **Preview** then select the **Brand** from the **Preview Details > Brand** menu.

<Frame caption="Notification Preview Details">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-preview-details.png" />
</Frame>

### Customizing your brand using variables

Any brand attribute you can customize in the brand designer UI, you can also set via variables like `{{var "brand.social.facebook"}}` for example.

Here is the schema for the brand information accessible via variables:

```js
export const getBrandVariables = (
  brand?: IBrand
): {
  id?: string;
  colors?:
    | {
        primary: string;
        secondary: string;
        tertiary: string;
      }
    | {};
  email?: {
    header: {
      barColor?: string;
      logo: {
        href?: string;
        image?: string;
      };
    };
  };
  social?: {
    facebook?: string;
    instagram?: string;
    linkedin?: string;
    medium?: string;
    twitter?: string;
  };
}
```

## Create Custom, Reusable Code With Snippets

Snippets are pieces of [handlebars](https://handlebarsjs.com/) code that you can copy and paste or pull into a Template Block using the snippet name.

<Frame caption="Brand Snippet">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-snippet.png" />
</Frame>

To use Snippets add a **Template Block** to an email Notification, and simply call it using a Template Block: `{{>snippet_name}}`

<Frame caption="Brand Snippet Block.">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-snippet-block.png" />
</Frame>

Using the Notification preview allows you to see the Snippet rendered:

<Frame caption="Brand Snippet Preview">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-snippet-preview.png" />
</Frame>

### Customize your Snippet Content Using Variables

You can use variables to pull customized content into the Snippet, supplying the value for the variable inside the user profile sent via the Send API call.

<Frame caption="Brand Snippet Variables">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-snippet-variables.png" />
</Frame>

### Snippets and the Default Brand

If a snippet exists in the default brand, but not in a custom brand, the default brand snippet *will* render in the custom brand as long as there isn't a snippet with the same name native to that custom brand.

This means you can put any or all of your snippets in the default brand and call them into multiple custom brands. Think of custom brands as extending the default. They can still have their own custom snippets as well.

## Sending a Branded Email Notification

1. The Notification must be brand enabled in the Notification Settings.
2. Include a Brand ID in the Send API call (if no Brand ID is provided, Courier will send using the Default Brand. See the [Send API documentation](../reference/send/message) for details.

<Frame caption="Brand Notification Settings">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/courier-4f1f25dc/assets/guides/courier-app/brand-notification-settings.png" />
</Frame>


# Tutorials
Source: https://www.courier.com/docs/tutorials/index

A categorized overview of Courier tutorials to help you design, send, and manage notifications using Automations, the REST API, Inbox, Preferences, and more—covering both technical setup and UI configuration.

## Automations

<CardGroup>
  <Card title="How to Understand Automation Concepts" icon="diagram-project" href="./how-to-automate-message-sequences/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How To Send Automations" icon="robot" href="./how-to-send-an-automation/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How To Send Notifications With Segment" icon="diagram-project" href="./how-to-send-notifications-with-segment/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How To Send Digests" icon="envelopes-bulk" href="./how-to-send-digests/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>
</CardGroup>

## Content

<CardGroup>
  <Card title="Design Your First Notification Template" icon="palette" href="./how-to-design-your-first-notification/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How to Use AI to Build Notifications" icon="robot" href="./how-to-use-AI-to-build-notifications/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How to Use Brands to Customize Email Notifications" icon="copyright" href="./how-to-use-brands-to-customize/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How to Preview Notifications With Test Events" icon="magnifying-glass" href="./how-to-preview-notification/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>
</CardGroup>

## Courier Inbox

<CardGroup>
  <Card title="How To Implement Your Inbox Component" icon="bird" href="./how-to-implement-inbox">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>
</CardGroup>

## REST API

<CardGroup>
  <Card title="How To Send Bulk Notifications" icon="code" href="./how-to-send-bulk-notifications">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How To Create And Send To A List Or List Pattern" icon="code" href="./how-to-send-to-a-list-or-list-pattern-using-wildcarding">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How To Configure User Preferences" icon="code" href="./how-to-configure-user-preferences">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>
</CardGroup>

## Sending

<CardGroup>
  <Card title="How To Send A Product Notification" icon="newspaper" href="./how-to-send-a-notification/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How to Send a One-Time Notification" icon="paper-plane-top" href="./how-to-send-a-one-time-notification/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How To Send Your First Message" icon="mailbox-flag-up" href="./how-to-send-your-first-message/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>

  <Card title="How To Safely Format Your Emails" icon="typewriter" href="./how-to-format-emails/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>
</CardGroup>

## UI

<CardGroup>
  <Card title="How To Configure Multi-Channel Routing" icon="list-tree" href="./how-to-configure-multi-channel-routing/">
    Learn More<Icon icon="arrow-right" iconType="solid" />
  </Card>
</CardGroup>


# Welcome to the Courier Documentation
Source: https://www.courier.com/docs/welcome

Find all the tutorials and resources you need to build product notifications with Courier.

<CardGroup>
  <Card title="Getting Started" href="getting-started/what-is-courier" icon="rocket">
    Learn what Courier is, what the key concepts are, and how to send your first notification using
    your programming language of choice.
  </Card>

  <Card title="Tutorials" href="tutorials/index" icon="graduation-cap">
    Learn basic Courier platform concepts that cover everything from adding providers to sending
    notifications to a list.
  </Card>

  <Card title="In-App Notifications" href="platform/inbox/intro" icon="bell">
    Courier Inbox provides UI components, APIs, and SDKs to build a real-time notification system for web, iOS, and Android applications
  </Card>

  <Card title="API Reference" href="reference/intro" icon="book">
    Programmatically send and manage notifications using our standardized REST API.
  </Card>
</CardGroup>

<Card title="SDK Libraries" href="sdk-libraries/intro" icon="code">
  Seamlessly integrate Courier into your application. Our SDKs provide powerful, robust tools to enhance your notification workflows.
</Card>


