# ActionKit Logs
Source: https://docs.useparagon.com/actionkit/actionkit-logs

Search, view, and trace logs for all of your ActionKit requests.

## Overview

Quickly search, view, and trace through logs of your ActionKit calls in Task History. The Actions tab within Task History provides a timeline of all ActionKit usage, including all *List Actions* and *Run Action* requests.

With ActionKit Logs:

* Understand how your AI agent is performing ActionKit calls on behalf of your users.
* Investigate why Action calls fail for particular Connected Users.
* Discover which ActionKits requests your users are utilizing and the parameters used to make those requests.

<Warning>
  ActionKit Logs are currently in *beta* and is included with access to ActionKit. While in *beta*, Logs are subject to deletion and their contents may change.
</Warning>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202025-02-24%20at%2016.22.07@2x.png)
</Frame>

## Filtering

Filters allow you to view the history of specific requests that meet criteria, including:

* **User ID**

* **Integration name**

* **Status**
  * Success
  * Errored

* **Action name**

* **Trace ID**

  * When an ActionKit request errors, a trace or `requestId` is returned via the API response. Provide this ID to filter for the request.

  ```json
  // Sameple ActionKit error response with a requestId
  {
    "message": "{\"message\":\"Unable to update Task\",\"details\":{\"err\":\"Team not authorized\",\"ECODE\":\"OAUTH_027\"}}",
    "code": "41070",
    "status": 500,
    "meta": {
      "requestId": "4c7445d2-1972-4ed6-9e47-46053bf1d45f"
    }
  }
  ```

* **Date range**

  * Filter by the date the ActionKit request was received by Paragon.

Clicking into an Action call opens a Log Trace view, which shows the underlying logs of an ActionKit call.

## Log Trace

The Log Trace view shows logs from your ActionKit request. These logs display information about the initial HTTP request received by Paragon, events within Paragon's system, and any API requests made to the integration providers.

With Log Trace:

* Clicking into a log shows additional information such as an integration API `response` , error messages, and HTTP status codes.
* The `body` of API requests are displayed only in logs classified with an *Error* severity level. All other logs do not retain the contents of the body.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Area.gif)
</Frame>

## Log Behaviors and Limitations

* ActionKit Logs are automatically refreshed and displayed every 60 seconds.
* Each request to `POST /actions` and `GET /actions` is an ActionKit request and is assigned a unique Trace ID.
* ActionKit Logs are retained for 30 days.


# ActionKit Playground
Source: https://docs.useparagon.com/actionkit/actionkit-playground

Try ActionKit in the Playground, a sandbox to test chatting with an agent that has access to ActionKit tools.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Actions%20Playground]%202025-01-09%20at%2004.33.42%20PM@2x.png" alt="" />
</Frame>

<Info>
  **Get the source on GitHub**

  Find the source code for ActionKit Playground on our [GitHub repository](https://github.com/useparagon/actionkit-playground).
</Info>

## Setup

To run the ActionKit Playground locally, you will need the following:

* [Node.js](https://nodejs.org/en) ≥ v22 and `pnpm` available in \$PATH ([Install instructions](https://pnpm.io/installation))
* OpenAI API Key
* Paragon Project ID and [Signing Key](/getting-started/installing-the-connect-sdk#setup)

<Accordion title="How do I find my Project ID?">
  You can copy your Project ID by clicking Copy Project ID under the Environment switcher:

  <Frame>
    ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/\[Paragon]%202025-02-17%20at%2010.49.44%20PM.gif)
  </Frame>
</Accordion>

Start by cloning the source of Playground locally:

```bash
git clone git@github.com:useparagon/actionkit-playground.git && cd actionkit-playground
```

Install the dependencies with pnpm:

```bash
pnpm install
```

Next, create a local SQLite database by running the migration script:

```bash
pnpm migrate
```

Then, copy the `.env.example` into a `.env.local` file:

```bash
cp .env.example .env.local
```

In the `.env.local` file, provide your values for OPENAI\_API\_KEY, PARAGON\_SIGNING\_KEY, and NEXT\_PUBLIC\_PARAGON\_PROJECT\_ID.

Finally, run Playground:

```bash
pnpm dev
```

Playground will start locally on port 3000 by default.

## Using the Playground

The Playground is intended to help guide development of your own integration-enabled agents.

Try connecting integrations that will be relevant to your customers and iterating on system prompts that reflect the goals of the agents you are building.

Here's how to start using the Playground:

### 1. Connect an account in the sidebar

When you click on an integration, the [Connect Portal](/connect-portal/connect-portal-customization) will appear. In your app, you can place the Connect Portal wherever your users will find integrations.

**Note**: Only [Active integrations](/getting-started/displaying-the-connect-portal#activating-the-integration) that are supported by ActionKit will appear in the sidebar.

### 2. Add Actions to the chat

Once you have connected an integration account, you can add Actions to a chat by expanding the integration in the sidebar and clicking the checkmark next to the action name.

In your app, you can control what Actions a chat has access to with your own application logic.

### 3. Customize system instructions

Write instructions for your agent in the System Instructions input at top of the conversation.

For example: "You are a sales copilot that assists users with doing research on potential prospects and allows them to update their CRM with their findings..."

### 4. Send a chat

Try messaging your agent. When your agent uses a tool, a row will appear to show the tool-calling status, with input and output from the ActionKit API.

To start a new chat with new context, click the top-left navigation menu and select **New chat**. You can also navigate a history of previous chats in the sidebar.

## Troubleshooting

#### Error: Invalid keyData

This means that your Signing Key was not correctly formatted or supplied.

Make sure that you have a `.env.local` file (copied from `.env.example`) that includes a value for PARAGON\_SIGNING\_KEY. The value should be on one line, separated with `\n`.

#### Integrations are not loading

Check your browser console (Inspect Element > Console).

If you are seeing 401 responses from the Paragon API, double-check the values for your NEXT\_PUBLIC\_PARAGON\_PROJECT\_ID and PARAGON\_SIGNING\_KEY.

#### **Integrations are not appearing**

Verify that [ActionKit-compatible integrations](/actionkit/supported-integrations) have been added to your Paragon project and are [Active](/getting-started/displaying-the-connect-portal#activating-the-integration).

#### **Error generating response. An unknown error occurred.**

Check the shell / terminal window where you are running `pnpm dev` to see any possible errors.

If you are getting rate limit errors associated with your OpenAI account, the chat may stop or fail to save once the conversation reaches a certain length, or if you select too many tools at once.

* **Resolution:** Keep message contents smaller in size and restrict tools to only those that are necessary to a given message.


# Implementation Examples
Source: https://docs.useparagon.com/actionkit/implementation-examples

See example implementations with ActionKit in common frameworks and using OpenAI's client library

### Vercel AI SDK

```js
import { generateText, jsonSchema, tool } from "ai";
import { openai } from "@ai-sdk/openai";

const response = await fetch(
  "https://actionkit.useparagon.com/projects/<Project ID>/actions",
  {
    method: "GET",
    headers: {
      Authorization: `Bearer ${paragonUserToken}`,
    },
  }
);

const { actions, errors } = await response.json();

if (errors.length === 0) {
  await generateText({
    model: openai("gpt-4o"),
    tools: Object.fromEntries(
      actions.map((action) => [
        action.function.name,
        tool({
          description: tool.function.description,
          parameters: jsonSchema(tool.function.parameters),
          execute: async (params: any, { toolCallId }) => {
            try {
              const response = await fetch(
                `https://actionkit.useparagon.com/projects/<Project ID>/actions`,
                {
                  method: "POST",
                  body: JSON.stringify({
                    action: tool.function.name,
                    parameters: params,
                  }),
                  headers: {
                    Authorization: `Bearer ${session.paragonUserToken}`,
                    "Content-Type": "application/json",
                  },
                }
              );
              const output = await response.json();
              if (!response.ok) {
                throw new Error(JSON.stringify(output, null, 2));
              }
              return output;
            } catch (err) {
              if (err instanceof Error) {
                return { error: { message: err.message } };
              }
              return err;
            }
          },
        }),
      ])
    ),
    toolChoice: "auto",
    temperature: 0,
    system: "You are a helpful assistant. Be as concise as possible.",
    prompt: "Help me create a new task in Jira.",
  });
}
```

### LangGraph / LangChain

```py
import json
import requests
from typing import Annotated, Any, TypedDict
from langchain.tools import BaseTool
from langchain.schema import HumanMessage
from langgraph.graph import StateGraph, START, END
from langgraph.graph.message import add_messages
from langgraph.prebuilt import ToolNode, tools_condition
from langchain_openai import ChatOpenAI

PARAGON_PROJECT_ID = ""
PARAGON_USER_TOKEN = ""
OPENAI_API_KEY = ""

class ActionKitTool(BaseTool):
    name: str
    description: str
    action_name: str
    paragon_token: str

    def _run(self, tool_input: str) -> str:
        try:
            params = json.loads(tool_input)
            response = requests.post(
                url=f"https://actionkit.useparagon.com/projects/{PARAGON_PROJECT_ID}/actions",
                headers={
                    "Authorization": f"Bearer {self.paragon_token}",
                    "Content-Type": "application/json",
                },
                json={
                    "action": self.action_name,
                    "parameters": params,
                },
                timeout=30
            )
            data = response.json()

            if not response.ok:
                raise ValueError(json.dumps(data, indent=2))

            return json.dumps(data)
        except Exception as e:
            return json.dumps({"error": {"message": str(e)}})

class State(TypedDict):
    messages: Annotated[list, add_messages]

def main():
    graph_builder = StateGraph(State)
    url = f"https://actionkit.useparagon.com/projects/{PARAGON_PROJECT_ID}/actions"
    headers = {"Authorization": f"Bearer {PARAGON_USER_TOKEN}"}
    
    resp = requests.get(url, headers=headers)
    json_resp = resp.json()
    actions = json_resp.get("actions", [])
    errors = json_resp.get("errors", [])

    if not actions:
        print("Failed to fetch Paragon actions or encountered errors:")
        print(errors)
        return

    tools = []
    for integration in actions:
        integration_actions = actions.get(integration)
        for action in integration_actions:
            func_def = action["function"]
            tool_name = func_def["name"]
            tool_description = func_def["description"]

            paragon_tool = ActionKitTool(
                name=tool_name,
                description=tool_description,
                action_name=tool_name,
                paragon_token=PARAGON_USER_TOKEN
            )
            tools.append(paragon_tool)

    llm = ChatOpenAI(
        openai_api_key=OPENAI_API_KEY,
        model_name="o1"
    )
    
    def chatbot(state: State):
        return {"messages": [llm.bind_tools(tools).invoke(state["messages"])]}
    
    graph_builder.add_node("chatbot", chatbot)
    tools_node = ToolNode(tools=tools)
    graph_builder.add_node("tools", tools_node)
    graph_builder.add_conditional_edges(
        "chatbot",
        tools_condition,
    )
    graph_builder.add_edge("tools", "chatbot")
    graph_builder.add_edge(START, "chatbot")

    graph = graph_builder.compile()

    def stream_graph_updates(user_input: str):
        for event in graph.stream({"messages": [{"role": "user", "content": user_input}]}):
            for value in event.values():
                print("Assistant:", value["messages"][-1].content)

    while True:
        try:
            user_input = input("User: ")
            if user_input.lower() in ["quit", "exit", "q"]:
                print("Goodbye!")
                break

            stream_graph_updates(user_input)
        except:
            # fallback if input() is not available
            user_input = "What do you know about LangGraph?"
            print("User: " + user_input)
            stream_graph_updates(user_input)
            break

if __name__ == "__main__":
    main()
```

### Other implementations

If you’re not using TypeScript, you can pass the JSON Schema specs from the ActionKit to the request to your LLM. Here is an example in Python with OpenAI’s library:

```py
import requests
from openai import OpenAI
client = OpenAI()

actions_url = f"https://actionkit.useparagon.com/projects/{project_id}/actions"
actions_auth_header = {
	"Authorization": f"Bearer {user_token}"
}
get_actions_params = {
    "format": "json_schema",
    "categories": "crm,project_management"
}

response = requests.get(actions_url, params=params, headers=actions_auth_header)
paragon_tools = response.json()

messages = [{"role": "user", "content": "Help me create a Jira ticket"}]
completion = client.chat.completions.create(
  model="gpt-4o",
  messages=messages,
  tools=paragon_tools["actions"],
  tool_choice="auto"
)
```

When passing the specs directly, you will also need to respond to the agent’s request to use a tool and route it to the ActionKit:

```py
message = completion["choices"][0]["message"]

if message.get("function_call"):
    function_name = message["function_call"]["name"]
    arguments = json.loads(message["function_call"]["arguments"])
    
    # Check if this tool uses ActionKit
    if any(tool["name"] == function_name for tool in paragon_tools["actions"]):
        run_actions_body = {
            "action": function_name,
            "parameters": arguments
        }

        # Run Action
        response = requests.post(actions_url, body=run_actions_body, headers=actions_auth_header)
        result = response.json()
        messages.append({
            "role": "function",
            "name": function_name,
            "content": json.dumps(result)
        })

        # Return to chat with tool result
        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            tools=paragon_tools,
            tool_choice="auto"
        )
```


# Overview
Source: https://docs.useparagon.com/actionkit/overview

ActionKit is an API to give your agentic AI product access to Paragon's catalog pre-built Integration Actions as tools.

<Frame>
  ![Page cover image](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/ActionKit%20-%20Step%20into%20ActionKit%2010%20\(2\).png)
</Frame>

**ActionKit** allows you to call one-off Integration Actions for your users (like Salesforce: Create Record or Google Drive: Get Files), without building and deploying specific workflows.

The ActionKit is designed to give AI agents the ability to call out to integration logic as a part of a prompt or ongoing conversation with a user. The API exposes JSON Schema specs to easily provide your agent with capabilities including:

* Creating tasks in Jira based on action items an agent recognizes from a meeting transcript
* Querying real-time sales reports in Shopify when an agent is asked questions about online sales
* Creating a Google Docs draft to start a project based on a user prompt

ActionKit can also be used to allow your users to configure their own automations in your app using available Actions or to build UI components in your app powered by Actions, like displaying a table of Salesforce opportunities or a dropdown to select Jira projects.

## Getting Started

<Tip>
  **Need help getting started with ActionKit?** Schedule a personalized onboarding with our Product team [here](https://useparagon.com/book-demo-actionkit).
</Tip>

To use ActionKit, you will need to have set up the following:

### 1. Add the Paragon SDK to your app

See [Installing the SDK](/getting-started/installing-the-connect-sdk) for adding the Paragon SDK to your app. With the SDK, you can prompt users to connect their accounts inside of your app using the [Connect Portal](/connect-portal/connect-portal-customization).

Alternatively, you can use one of the below options for testing or development purposes:

* [ActionKit Playground](/actionkit/actionkit-playground): an open-source sandbox to test chatting with an agent that has access to ActionKit tools
* [Hosted Demo Environment](/demo): an in-browser implementation of the SDK to test connecting accounts to your integrations

### 2. Activate an ActionKit integration in your Paragon project

You can add and configure an integration by visiting the Catalog page in your Paragon dashboard (see [Adding Integrations](/getting-started/adding-an-integration)).

See [Supported Integrations](/actionkit/supported-integrations) for integrations currently supported in ActionKit.

### 3. Connect an account

Use your app (or Playground or demo.useparagon.com) to connect an account (e.g. a Salesforce account) using the Connect Portal.

<Info>
  If you are having issues connecting an account, you may need to add your own OAuth app credentials.

  See [Connect your developer app to Paragon](/getting-started/adding-an-integration#connect-your-developer-app-to-paragon).
</Info>

Once an account is connected, you can start testing the API described below with the user ID that you are testing with.

If you are running the Playground locally, the ID is `playground.local-static-user`

## Usage

ActionKit is available as an API, so you can use it with any LLM that supports tool/function calling.

**Base URL**

```js
https://actionkit.useparagon.com/projects/[Project ID]
```

<Accordion title="For on-premise instances">
  ```js
  https://worker-actionkit.[On-Prem Base URL]/projects/[Project ID]
  ```
</Accordion>

**Authentication**

To authenticate to ActionKit API, present a Bearer token with the Paragon User Token (a JWT):

```js
Authorization: Bearer [Paragon User Token]
```

This is the same token that you used to call `.authenticate` with the Paragon SDK. See examples in [Installing the SDK](/getting-started/installing-the-connect-sdk).

## Endpoints

### List Actions

Every Connected User will have access to different Actions, depending on what Integrations you have enabled in your project and what accounts they have connected. You can list available Actions using the `GET /actions` endpoint.

<Info>
  **The schema returned by Actions may be user-specific.** For example, if the user has custom fields defined for Salesforce Opportunities, they will appear in their version of the `SALESFORCE_CREATE_RECORD_OPPORTUNITY` Action schema.
</Info>

**URL**

```bash
GET /actions
```

**Parameters**

| Key                      | Description                                                                                                                                                                                                                                                                                                                                             | Default       |
| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- |
| **format**               | The response format for available actions.                                                                                                                                                                                                                                                                                                              | `json_schema` |
| **limit\_to\_available** | If `true`, only `available_actions` will be returned. <br />Otherwise, `all_actions` will include all Actions from Integrations in your project, regardless of the accounts your user has connected.                                                                                                                                                    | `true`        |
| **reload\_fields**       | If `true`, forcibly reload any custom fields that belong to the schema for included Actions. This may result in additional latency added to your request. <br /><br />By default, Paragon will cache your user’s fields and refresh them periodically. Fields have a TTL of 8 hours, and `reload_fields` will immediately invalidate any cached fields. | `false`       |
| **integrations**         | Filter by specific integrations that the user has connected. By default, all integrations are returned. <br />Example: <br /> `salesforce,hubspot`                                                                                                                                                                                                      |               |
| **categories**           | Filter by specific integration categories, based on integrations the user has connected. By default, all integrations from all categories are returned. <br />Example: <br /> `crm,project_management`                                                                                                                                                  |               |

**Output**

| Key     | Description                                                                                      |
| ------- | ------------------------------------------------------------------------------------------------ |
| actions | A map of integrations with a list of Action definitions, in the selected format.                 |
| errors  | An array of errors, if there were any problems loading Action definitions for some integrations. |

<Accordion title="Example response">
  ```json
  {
    "actions": {
      "hubspot": [{
        "type": "function",
        "function": {
          "name": "HUBSPOT_CREATE_RECORD_CONTACTS",
          "description": "Create a contact in HubSpot CRM",
          "parameters": {
            "type": "object",
            "properties": {
              "field-email": {
                "type": "string",
                "description": "Email"
              },
              "field-firstname": {
                "type": "string",
                "description": "First Name"
              },
              "field-lastname": {
                "type": "string",
                "description": "Last Name"
              },
              "field-jobtitle": {
                "type": "string",
                "description": "Job Title"
              },
              "field-company": {
                "type": "string",
                "description": "Company Name"
              },
              "field-hubspot_owner_id": {
                "type": "string",
                "description": "Contact Owner: The HubSpot user who is assigned to this contact. Use Connect Portal Workflow Settings to allow users to select an Owner. (example value: \\"{{settings.owner}}\\")"
              },
              "field-lifecyclestage": {
                "type": "string",
                "description": "Lifecycle Stage: Defaults to the user’s first Lifecycle Stage if not provided. Use Connect Portal Workflow Settings to allow users to select a Lifecycle Stage. (example value: \\"{{settings.lifecycleStage}}\\")"
              },
              "field-hs_lead_status": {
                "type": "string",
                "description": "Lead Status: Defaults to the user’s first Lead Status if not provided. Use Connect Portal Workflow Settings to allow users to select a Lead Status. (example value: \\"{{settings.leadStatus}}\\")"
              },
              "additionalFieldsJSON": {
                "type": "string",
                "description": "Additional Fields: Specify any other fields that should be updated in JSON below. Use Connect Portal Workflow Settings to allow users to select which Contact fields to update. (example value: \\"{\\n  \\"property_number\\": \\"17\\",\\n  \\"property_dropdown\\": \\"choice_b\\",\\n  \\"property_radio\\": \\"option_1\\",\\n  \\"property_string\\": \\"value\\",\\n  \\"property_date\\": \\"1572480000000\\"\\n}\\")"
              }
            },
            "required": [
              "recordType",
              "field-email"
            ],
            "additionalProperties": false,
            "$schema": "<http://json-schema.org/draft-07/schema#>"
          }
        }
      }]
    },
    "errors": []
  }
  ```
</Accordion>

### Run Action

To run an Action, call the Run Actions endpoint with the required parameters.

**URL**

```bash
POST /actions
```

**Request body**

```json
{
    "action": "SLACK_SEND_MESSAGE",
    "parameters": {
        "channel": "#general",
        "message": "Hello world!"
    }
}
```

<Accordion title="Example response">
  Note: Responses will vary by integration provider. Paragon returns the API response of the last request that was used to run this Action.

  ```json
  {
      "ok": true,
      "channel": "CSQCUNXBP",
      "ts": "1739896301.418839",
      "message": {
          "user": "U0101SYAC07",
          "type": "message",
          "ts": "1739896301.418839",
          "bot_id": "B0101SYAB3R",
          "app_id": "A01001G1G7J",
          "text": "test",
          "team": "TM7FL705V",
          "bot_profile": {
              "id": "B0101SYAB3R",
              "app_id": "A01001G1G7J",
              "name": "Paragon",
              "icons": {
                  "image_36": "https://avatars.slack-edge.com/2020-03-24/1022919802484_c4af0a8de9e9c25f4b58_36.png",
                  "image_48": "https://avatars.slack-edge.com/2020-03-24/1022919802484_c4af0a8de9e9c25f4b58_48.png",
                  "image_72": "https://avatars.slack-edge.com/2020-03-24/1022919802484_c4af0a8de9e9c25f4b58_72.png"
              },
              "deleted": false,
              "updated": 1587073960,
              "team_id": "TM7FL705V"
          },
          "blocks": [
              {
                  "type": "section",
                  "block_id": "iAHFB",
                  "text": {
                      "type": "mrkdwn",
                      "text": "test",
                      "verbatim": false
                  }
              }
          ]
      },
      "response_metadata": {
          "scopes": [
              "app_mentions:read",
              "chat:write",
              "chat:write.public",
              "channels:read",
              "reactions:write",
              "chat:write.customize",
              "im:read",
              "im:write",
              "users:read",
              "groups:read",
              "channels:manage",
              "groups:write",
              "mpim:write",
              "team:read",
              "channels:history",
              "users:read.email",
              "files:read",
              "files:write"
          ],
          "acceptedScopes": [
              "chat:write"
          ]
      }
  }
  ```
</Accordion>

<Accordion title="Example Error">
  ```json
  {
      "message": "Your authorization token has expired.",
      "code": "7203",
      "status": 401,
      "meta": {
          "projectId": "ddcd1f1a-440d-4d48-97ab-44878b77f800"
      }
  }
  ```
</Accordion>


# Supported Integrations
Source: https://docs.useparagon.com/actionkit/supported-integrations



We are rapidly expanding support for ActionKit across the Integrations Catalog. If you have a request to add a specific integration, please [contact us](mailto:support@useparagon.com).

* Asana
* Azure DevOps
* BambooHR
* Box
* ClickUp
* Gmail
* GitHub
* Google Calendar
* Google Drive
* Google Sheets
* HubSpot
* Jira
* Marketo
* Notion
* Outlook
* Salesforce
* Shopify
* Slack
* Zendesk
* Zoom

**Coming soon:**

* Facebook Ads
* GitHub
* Google Ads
* Google Docs
* Linear
* Microsoft Teams
* OneDrive
* ServiceNow
* SharePoint
* Trello


# SDK / API Reference
Source: https://docs.useparagon.com/apis/api-reference



## Paragon SDK and API Methods

Below are all the public functions exposed on the Paragon SDK global, accessible at `window.paragon`, and/or the Paragon REST API.

**For **[on-premise](/on-premise/hosting-paragon-on-premise)**/single-tenant users:**

If you are using an on-prem/single-tenant instance of Paragon, you can call the `.configureGlobal` function to point the SDK to use the base hostname of your Paragon instance.

```js
import { paragon } from "@useparagon/connect";

// If your login URL is https://dashboard.mycompany.paragon.so:
paragon.configureGlobal({
  host: "mycompany.paragon.so",
});
```

### .authenticate(projectId: string, userToken: string)

`.authenticate` should be called at the beginning of your application's lifecycle in all cases. This is to make sure that the `userToken` is always as fresh as possible, with respect to your user's existing session on your own site.

```js JavaScript SDK
await paragon.authenticate(
  // You can find your project ID in the Overview tab of any Integration
  "38b1f170-0c43-4eae-9a04-ab85325d99f7",

  // See Setup for how to encode your user token
  "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.ey..."
);
```

Once `.authenticate` has been called, you can access the user's integration state with `.getUser()`. `.authenticate()` only needs to be called when using the Paragon SDK - when making requests to the Paragon REST API, you should instead provide the Paragon User Token in the Authorization header.

### .connect(integrationType: string, installOptions?: InstallOptions)

Call `.connect` to launch your Connect Portal for a specific integration provider. You can find the `integrationType` identifier you need in the Overview page for the integration.

```js JavaScript SDK
paragon.connect("salesforce");
```

This function must be called after the Paragon SDK has completed authentication. You can `await` the Promise returned by `#.authenticate-projectid-string-usertoken-string` to show a loading state before users are able to access the Connect Portal.

You *must* have an integration configured of this `integrationType` in your Paragon project for the Connect Portal to appear. Otherwise, this function does nothing.

<Accordion title="Optional `installOptions`">
  * `onSuccess` Callback invoked when an integration is successfully enabled.

  - `onError` Callback if an unexpected error occurs.

  - `accountType` For integrations that support multiple account types, you can optionally designate a specific `accountType` to skip the account selection dialog.

    * `default`

    * `sandbox`

  **Example**

  ```js
  paragon.connect("salesforce", {
    // Only allow production-type Salesforce accounts to connect
    accountType: "default",
  });
  ```
</Accordion>

You can also connect multiple accounts for the same integration.

<Card title="Multi Account Authorization" href="/apis/api-reference/multi-account-authorization" horizontal />

### .disableWorkflow(workflowId: string) -> Promise

Call `.disableWorkflow` to turn off a workflow for a user by ID.

<CodeGroup>
  ```javascript JavaScript SDK
  paragon.disableWorkflow("<Workflow ID>");
  ```

  REST API

  ```bash REST API
  DELETE https://api.useparagon.com/projects/<Project ID>/sdk/workflows/<Workflow ID>

  Authorization: Bearer <Paragon User Token>
  ```
</CodeGroup>

### .enableWorkflow(workflowId: string) -> Promise

Call `.enableWorkflow` to turn on a workflow for a user by ID.

<CodeGroup>
  ```javascript JavaScript SDK
  paragon.enableWorkflow("<Workflow ID>");
  ```

  REST API

  ```bash REST API
  POST https://api.useparagon.com/projects/<Project ID>/sdk/workflows/<Workflow ID>

  Authorization: Bearer <Paragon User Token>
  ```
</CodeGroup>

### .getIntegrationMetadata(integrationType: string?)

Call `.getIntegrationMetadata` to get the `name`, `brandColor`, and `icon`, for any of your active integration providers. This is a great way to create your integrations page!

<CodeGroup>
  ```JS JavaScript SDK
  paragon.getIntegrationMetadata();

  // Response
  {
      [
          {
              type: 'salesforce',
              name: 'Salesforce',
              brandColor: '#057ACF',
              icon: 'https://cdn.useparagon.com/2.35.0/dashboard/public/integrations/salesforce.svg'
          },
          {
              type: 'hubspot',
              name: 'Hubspot',
              brandColor: '#F67600',
              icon: 'https://cdn.useparagon.com/2.35.0/dashboard/public/integrations/hubspot.svg'
          },
          {
              type: 'slack',
              name: 'Slack',
              brandColor: '#4A154B',
              icon: 'https://cdn.useparagon.com/2.35.0/dashboard/public/integrations/slack.svg'
          }
      ]
  }
  ```

  ```bash REST API
  GET https://api.useparagon.com/projects/<Paragon Project ID>/sdk/metadata

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  // Response
  {
      [
          {
              type: 'salesforce',
              name: 'Salesforce',
              brandColor: '#057ACF',
              icon: 'https://cdn.useparagon.com/2.35.0/dashboard/public/integrations/salesforce.svg'
          },
          {
              type: 'hubspot',
              name: 'Hubspot',
              brandColor: '#F67600',
              icon: 'https://cdn.useparagon.com/2.35.0/dashboard/public/integrations/hubspot.svg'
          },
          {
              type: 'slack',
              name: 'Slack',
              brandColor: '#4A154B',
              icon: 'https://cdn.useparagon.com/2.35.0/dashboard/public/integrations/slack.svg'
          }
      ]
  }
  ```
</CodeGroup>

### .getUser() → ParagonUser

Call `.getUser` to retrieve the currently authenticated user and their connected integration state.

A **ParagonUser** is an object shaped like:

<CodeGroup>
  ```javascript JavaScript SDK
  paragon.getUser();

  // Response
  {
  	authenticated: true,
  	userId: "xyz", // The user ID you specified in the signed JWT
  	integrations: {
  		salesforce: {
  			configuredWorkflows: {},
  			credentialId: "987654-56a7-89b1-cd23-456789abcdef",
  			credentialStatus: "VALID",
  			enabled: true
  			providerData: {
  				instanceURL: "https://mycompany.my.salesforce.com"
  			},
  			providerId: "1234567890"
  		},
  		shopify: {
  			configuredWorkflows: {},
  			enabled: false
  		}
  	}
  }
  ```

  ```bash REST API
  GET https://api.useparagon.com/projects/<Paragon Project ID>/sdk/me

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  // Response
  {
  	authenticated: true,
  	userId: "xyz", // The user ID you specified in the signed JWT
  	integrations: {
  		salesforce: {
  			configuredWorkflows: {},
  			credentialId: "987654-56a7-89b1-cd23-456789abcdef",
  			credentialStatus: "VALID",
  			enabled: true
  			providerData: {
  				instanceURL: "https://mycompany.my.salesforce.com"
  				},
  			providerId: "1234567890"
  		},
  		shopify: {
  			configuredWorkflows: {},
  			enabled: false
  		}
  	}
  }
  ```
</CodeGroup>

If the user is not authenticated, you'll receive back only `{ authenticated: false }` instead. Please check the `authenticated` property before using the `user.integrations` field.

### .event(name: string, json: JSON)

App Events can be sent from your application using the Paragon SDK or REST API. In both cases, you must pass two parameters:

* **name** - the event name defined in your App Event

* **payload** - the event payload that should match the event schema defined in your App Event

See the code examples below for how to send App Events using the Paragon SDK or API.

<CodeGroup>
  ```javascript JavaScript SDK
  var eventName = "Contact Created";
  var eventPayload = { "name": "Brandon", "email": "b@useparagon.com" };

  // Called once during your user's session
  paragon.authenticate("project-id", <Paragon User Token>);

  // Trigger the "Contact Created" App Event
  paragon.event(eventName, eventPayload);
  ```

  ```bash REST API
  // Trigger the "Contact Created" App Event
  POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/events/trigger

  // Headers
  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  // Body
  {
      "name": "Contact Created",
      "payload": {
          "name": "Brandon",
          "email": "b@useparagon.com"
      }
  }
  ```
</CodeGroup>

When sending live events from your application, Paragon will not validate that your event payload matches the defined event schema.

### .installIntegration(integrationType: string, installOptions?: InstallOptions) -> Promise\<IntegrationInstallEvent>

<Info>
  This function should be used only if you are using your own components to show connected integrations and their status, instead of the Connect Portal.

  Otherwise, you can use [the `.connect` function](/apis/api-reference#connect-integrationtype%3A-string%2C-installoptions%3F%3A-installoptions).
</Info>

The `.installIntegration` can be used to start the connection process for an integration *without* the Connect Portal appearing over your user interface. You can find the `integrationType` identifier you need in the Overview page for the integration.

This function resolves with the `IntegrationInstallEvent` in the same format available in `paragon.subscribe`. You can use this to get the newly created credential by awaiting the returned Promise.

This function rejects the returned Promise if the integration is already installed for the authenticated user.

```js JavaScript SDK
const { credential } = await paragon.installIntegration("googledrive");
```

**Note**: If the integration specified by `integrationType` requires API keys or post-authentication options, the Connect Portal will still appear to capture those values from your user at that time. The Connect Portal will automatically be dismissed after those values are entered.

This function accepts the same optional install options as [#.connect-integration](/apis/api-reference#connect-integrationtype%3A-string%2C-installoptions%3F%3A-installoptions).

### .subscribe(eventName: string, handler: Function)

Call `.subscribe` to subscribe to different events and changes from the Paragon SDK. You can find the possible `eventNames` below:

| Event Type                | Usage in `.subscribe()`    | Usage in `.connect()` |
| ------------------------- | -------------------------- | --------------------- |
| **Integration enabled**   | `"onIntegrationInstall"`   | `"onInstall"`         |
| **Integration disabled**  | `"onIntegrationUninstall"` | `"onUninstall"`       |
| **Workflow state change** | `"onWorkflowChange"`       | `"onWorkflowChange"`  |
| **Connect Portal opened** | `"onPortalOpen"`           | `"onOpen"`            |
| **Connect Portal closed** | `"onPortalClose"`          | `"onClose"`           |

Subscribing to SDK Events applies to all integrations *globally*. Specifying callbacks to `.connect()` only applies to a currently open Connect Portal *locally*.

See the code examples below for how to subscribe to events using the Paragon SDK.

<CodeGroup>
  ```typescript Integration Enabled / Disabled
  type IntegrationInstallEvent = {
    integrationId: string;
    integrationType: VisibleConnectAction;
    credential: Credential;
    credentialId: string;
  };

  // Using global subscribe
  paragon.subscribe(
    "onIntegrationInstall",
    (event: IntegrationInstallEvent, user: AuthenticatedConnectUser) => { /* ... */ }
  );
  ```

  ```typescript Workflow State Changed
  type WorkflowStateChangeEvent = {
    integrationId: string;
    workflowId: string;
  };

  // Using global subscribe
  paragon.subscribe(
    "onWorkflowChange",
    (event: WorkflowStateChangeEvent, user: AuthenticatedConnectUser) => { /* ... */ }
  );
  ```

  ```typescript Connect Portal Opened / Closed
  type PortalOpenEvent = {
    integrationId: string;
    integrationType: VisibleConnectAction;
  };

  type PortalCloseEvent = {
    integrationId: string;
    integrationType: VisibleConnectAction;
  };

  // Using global subscribe
  paragon.subscribe(
    "onPortalOpen",
    (event: PortalOpenEvent, user: AuthenticatedConnectUser) => { /* ... */ }
  );
  paragon.subscribe(
    "onPortalClose",
    (event: PortalCloseEvent, user: AuthenticatedConnectUser) => { /* ... */ }
  );
  ```
</CodeGroup>

Alternatively, you can subscribe `onOpen`, `onClose`, `onUninstall` , and `onWorkflowChange` as a one-time event locally.

<CodeGroup>
  ```typescript Integration Enabled / Disabled
  type IntegrationInstallEvent = {
    integrationId: string;
    integrationType: VisibleConnectAction;
    credential: Credential;
    credentialId: string;
  };

  // Using local call to paragon.connect
  paragon.connect("<integration>", {
    onInstall: (event: IntegrationInstallEvent, user: AuthenticatedConnectUser) => { /* ... */ }
  });
  ```

  ```typescript Workflow State Changed
  type WorkflowStateChangeEvent = {
    integrationId: string;
    workflowId: string;
  };

  // Using local call to paragon.connect
  paragon.connect("<integration>", {
    onWorkflowChange: (event: WorkflowStateChangeEvent, user: AuthenticatedConnectUser) => {/* ... */}
  });
  ```

  ```typescript Connect Portal Opened / Closed
  type PortalOpenEvent = {
    integrationId: string;
    integrationType: VisibleConnectAction;
  };

  type PortalCloseEvent = {
    integrationId: string;
    integrationType: VisibleConnectAction;
  };

  // Using local call to paragon.connect
  paragon.connect("<integration>", {
    onOpen: (event: PortalOpenEvent, user: AuthenticatedConnectUser) => {/* ... */},
    onClose: (event: PortalCloseEvent, user: AuthenticatedConnectUser) => {/* ... */}
  });
  ```
</CodeGroup>

### .request(integrationType: string, path: string, requestOptions: RequestInit ) → Promise

Call `.request` to send an API request to a third-party integration on behalf of one of your users.

Every integration in your dashboard has a code example of using `paragon.request`, which takes three arguments:

* `integrationType`: The short name for the integration. i.e. "salesforce" or "googleCalendar". You can find this string on the Overview tab of the integration you want to access, on your Paragon dashboard.

* `path`: The path (without the hostname) of the API request you are trying to access. An example might be: "/v1/charges" for Stripe's charge API or "chat.postMessage" for Slack's Web API.

* `requestOptions`: Request options to include, such as:

  * `body`: An object representing JSON contents of the request.

  * `method`: An HTTP verb such as "GET" or "POST". Defaults to GET.

The function returns a promise for the request output, which will have a shape that varies depending on the integration and API endpoint.

<CodeGroup>
  ```typescript JavaScript SDK
  await paragon.request('slack', '/chat.postMessage', {
  	method: 'POST',
  	body: {
  		channel: 'CXXXXXXX0' // Channel ID,
  		text: 'This message was sent with Paragon Connect :exploding_head:'
  	}
  });

  // -> Responds with { ok: true }, and sends a message :)
  ```

  ```bash REST API
  POST https://proxy.useparagon.com/projects/<Paragon Project ID>/sdk/proxy/slack/chat.postMessage

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  {
      "channel": "CXXXXXXX0",
      "text": "This message was sent with Paragon Connect :exploding_head:"
  }

  // -> Responds with { output: { ok: true }}, and sends a message :)
  ```
</CodeGroup>

### .setUserMetadata(meta: object)

Call `.setUserMetadata()` to associate the authenticated user with metadata from your application. This metadata can be accessed with `.getUser()` or retrieved over the API.

<CodeGroup>
  ```typescript JavaScript SDK
  paragon.setUserMetadata({
      Name: "Sean V",
      Email: "sean@useparagon.com",
      apiKey: "key_Y0kBVldPFInxK"
  });
  ```

  **Request**

  ```bash REST API
  PATCH https://api.useparagon.com/projects/<Project ID>/sdk/me

  // Headers
  Authorization: <Paragon User Token>
  Content-Type: application/json

  // Body
  { "meta": { "Email": "sean@useparagon.com", "apiKey": "key_Y0kBVldPFInxK" } }
  ```
</CodeGroup>

### .uninstallIntegration(integrationType: string) -> Promise

Call `.uninstallIntegration()` to disconnect an integration for the authenticated user.

When an integration is disconnected, workflows for that integration will stop running for the authenticated user and any saved User Settings will be cleared.

<CodeGroup>
  ```typescript JavaScript SDK
  // Use the integration name, as used in paragon.connect();
  await paragon.uninstallIntegration("salesforce");
  ```

  Get the ID of the integration you want to disconnect, with the `/sdk/integrations` endpoint:

  **Request**

  ```bash REST API
  GET https://api.useparagon.com/projects/<Project ID>/sdk/integrations

  // Headers
  Authorization: Bearer <Paragon User Token>

  // Response
  [
      { "id": "<Integration ID>", "type": "salesforce", ... },
      {...}
  ]

  // The <Integration ID> can be used to disconnect the integration for the user:

  DELETE https://api.useparagon.com/projects/<Project ID>/sdk/integrations/<Integration ID>

  // Headers
  Authorization: Bearer <Paragon User Token>
  ```
</CodeGroup>

### .workflow(workflowId: string, options: FetchOptions)

Call `.workflow()` to trigger a Paragon workflow that sends a custom response back to your app. Note: The workflow must be enabled and use a Request-type trigger.

<CodeGroup>
  ```javascript Javascript SDK
  // Called once during your user's session
  paragon.authenticate("project-id", <Paragon User Token>)

  // Trigger the "Lead Created" workflow
  await paragon.workflow("<workflow_id>", {
    "body": {
      "email": "bowie@useparagon.com",
      "first_name": "Bowie",
      "last_name": "Foo"
    }
  });

  ```

  ```bash REST API
  // Trigger the "Lead Created" Workflow
  POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/triggers/<Workflow ID>

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  {
    "email": "bowie@useparagon.com",
    "first_name": "Bowie",
    "last_name": "Foo
  }
  ```
</CodeGroup>

### Get project's integrations

Returns a list of the integrations enabled for the Paragon project by the ID in the URL.

* Includes the Connect Portal configuration for each integration (as `.configs`) and the Workflows associated with each integration (as `.workflows`)

* The **providerId** is the authenticated user's ID assigned by their integration provider (e.g. for a Salesforce integration, this would be the user's Salesforce user ID)

This method is currently available via REST API only.

```bash REST API
GET https://api.useparagon.com/projects/<Paragon Project ID>/sdk/integrations

Authorization: Bearer <Paragon User Token>
Content-Type: application/json

// Example response (may include more than is in this list):

[{
  "id": "2f08e65f-d924-42ab-9618-b6023d82ffbd",
  "dateCreated": "2021-03-02T00:22:33.166Z",
  "dateUpdated": "2021-03-02T00:22:33.166Z",
  "projectId": "908f4c5e-6394-46a5-9355-3f729edbd160",
  "customIntegrationId": null,
  "type": "slack",
  "isActive": true,
  "configs": [
        {
        "id": "3ebcc179-a1a6-447f-8dc9-5017f40f08ef",
        "dateCreated": "2021-03-02T00:22:33.166Z",
        "dateUpdated": "2023-05-15T21:01:00.260Z",
        "integrationId": "2f08e65f-d924-42ab-9618-b6023d82ffbd",
        "values": {
          "overview": "####Our Slack integration enables you to:\n   \n\n• Receive alerts and notifications in your Slack workspace\n• Notify or DM specific team members based on certain activity",
          "sharedMeta": {},
          "accentColor": "#4A154B",
          "description": "Send notifications to Slack",
          "workflowMeta": {}
        }
    },
  ],
  "workflows" [
        {
        "id": "1b22193b-e355-458d-b6a3-5e5516edb588",
        "dateCreated": "2021-06-02T23:17:05.714Z",
        "dateUpdated": "2021-07-13T20:55:41.895Z",
        "description": "Send Updates to Slack",
        "projectId": "908f4c5e-6394-46a5-9355-3f729edbd160",
        "teamId": "2116f794-07c7-4dfe-a302-e816a2f7ed72",
        "isOnboardingWorkflow": false,
        "integrationId": "2f08e65f-d924-42ab-9618-b6023d82ffbd",
        "steps": []
      },
  ],
  "customIntegration": null,
  "hasCredential": true,
  "connectedUserLimitOnDevCred": 0,
  "connectedUserLimitReached": true,
  "name": "Slack",
  "brandColor": "#4A154B",
  "needPreOauthInputs": false,
  "providerType": "slack",
  "authenticationType": "oauth"
}]
```

### Get user's Connect credentials

Returns a list of the user's Connect credentials (i.e., the accounts connected and authorized by the end user).

This method is currently available via REST API only.

```bash REST API
GET https://api.useparagon.com/projects/<Paragon Project ID>/sdk/credentials

Authorization: Bearer <Paragon User Token>
Content-Type: application/json

// Example response (may include more than is in this list):

[{
  "id": "00da4146-7ac4-4253-a8f7-96849b8137d9",
  "dateCreated": "2021-03-24T12:19:21.511Z",
  "dateUpdated": "2021-03-24T12:19:28.512Z",
  "dateDeleted": null,
  "projectId": "db06d291-ba2c-41c5-9a12-9362abfd6228",
  "integrationId": "95bedc9f-6a22-4855-b08d-e68dc073ad91",
  "personaId": "0563109f-5e71-46c5-8483-1ac8c0913d6c",
  "config": {
    "configuredWorkflows": {
      "3eb95154-3c7b-413c-bf14-ba367d95b53f": {
        "enabled": true,
        "settings": {
					"example-input-id": "example value"
				}
      }
    }
  },
  "isPreviewCredential": false,
  "providerId": "50150244515"
}]
```

### Update user's Connect credential

Updates the user's connected integration account, including any settings and configured workflows.

This endpoint updates by replacement with respect to the `config` property, so this endpoint should only be used after retrieving the existing value (which can be done by using the above endpoint: [Get user's Connect credentials](/apis/api-reference#get-user’s-connect-credentials)).

This method is currently available via REST API only.

```bash REST API
PATCH https://api.useparagon.com/projects/<Paragon Project ID>/sdk/credentials/<Connect Credential ID>

Authorization: Bearer <Paragon User Token>
Content-Type: application/json

// Body: Example showing <Workflow ID> being enabled
{
    "config": {
        "configuredWorkflows": {
            ...
            "<Workflow ID>": {
                "enabled": true,
                "settings": {}
            }
        },
        "sharedSettings": {...}
    }
}
```

**Note**: In the above example, the existing value for `config` must be provided in full, with the intended changes applied. This is because `config` will be updated by replacement.

## ExternalFilePicker

You can use the Paragon SDK to allow your user to select files from a File Storage integration in your app.

The SDK provides an `ExternalFilePicker` class to load any necessary JavaScript dependencies into your page and authenticate with your user's connected account.

#### Supported integrations for ExternalFilePicker

* [Google Drive](/resources/integrations/google-drive#using-the-google-drive-file-picker)

### new paragon.ExternalFilePicker(integrationType, options)

Construct a new instance of an ExternalFilePicker for an integration given by `integrationType`. Any required JS dependencies do not start loading until [`.init`](/apis/api-reference#picker-init-initconfig) is called.

**Example:**

```javascript
const picker = new paragon.ExternalFilePicker("googledrive", {
  allowedTypes: ["application/pdf"],
  allowMultiSelect: false,
  onFileSelect(files) {
    console.log("User picked files", files);
  }
});
```

#### Options

* `allowedTypes` (default: `undefined`)

  * An array of MIME types to allow for file selection, e.g. `["application/pdf", "image/jpeg"]`

  * If `undefined`, all types will be allowed.

* `allowMultiSelect` (default: `false`)

  * If `true`, allow multiple files to be selected.

* `allowFolderSelect` (default: `false`)

  * If `true`, allow folders to be selected.

* `onOpen()`

  * Called when a Picker successfully appears in the app.

* `onClose()`

  * Called when a Picker gets closed.

* `onFileSelect(files)`

  * Called when a Picker file selection is made.

  * `files` is an Array of objects with the selected file objects from the 3rd-party picker script.

* `onCancel()`

  * Called when a Picker gets closed without any files selected.

### picker.init(initConfig)

Initialize a file picker with required configuration `initConfig`. Required configuration varies per integration; see [integration-specific documentation](/apis/api-reference#supported-integrations-for-externalfilepicker) for specific details.

This function loads required JS dependencies into the page, if they have not already been loaded. Other methods, like `.open` and `.getInstance`, cannot be called until the Promise returned by `.init` is resolved.

**Example:**

```js
await picker.init({
  // Google Developer Key
  developerKey: "AIzaS..."
});
```

### picker.open()

Presents the file picker in your app.

Selected files or other events will be received in the [callbacks](/apis/api-reference#options) you specified in the constructor.

**Example:**

```js
picker.open();
```

### picker.getInstance()

Returns a reference to the third-party JS library object that this file picker is using. This object can be used for additional integration-specific customization.


# Multi Account Authorization
Source: https://docs.useparagon.com/apis/api-reference/multi-account-authorization

Use the SDK to connect multiple accounts for the same integration.

Multiple Account Authorizations is a set of SDK options that enables you to connect multiple accounts of the same integration type for a Connected User.

For example, one Connected User can connect a Google Calendar integration for both their Google Workspace account and personal Google account.

## Getting Started

**Connecting new accounts**

To get started with Multiple Account Authorizations, you can pass in `allowMultipleCredentials` to `paragon.installIntegration`:

```javascript
// Connect a new Google Calendar account
paragon.installIntegration("googleCalendar", {
    allowMultipleCredentials: true,

    // Set to true to show User Settings after installation:
    showPortalAfterInstall: true
});
```

This function starts the connection process for a new account of an integration. After the user has connected, you can optionally show the Connect Portal for presenting any User Settings that are used to configure the integration.

**Listing accounts**

Your UI must be able to render a list of each account your user has connected for an integration. Use `paragon.getUser` to retrieve this list:

```javascript
const user = paragon.getUser();

// An array of all Google Calendar accounts the user has connected:
user.integrations.googleCalendar.allCredentials;
```

Each account ("credential") will have an ID that can be used to present the Connect Portal for the account, remove the account, or route requests to the account.

Use `paragon.subscribe` to listen for change events to the Paragon user object, if your UI updates dynamically.

**Managing existing accounts**

You can allow your users to manage User Settings for a specific account using the Connect Portal by passing `selectedCredentialId` to `paragon.connect`:

```javascript
// Modify User Settings for an existing Google Calendar account
paragon.connect("googleCalendar", {
    selectedCredentialId: "a5e995c2-7709-43fd-9cdf-f759faa52497"
});
```

**Removing existing accounts**

You can disconnect an existing account by passing `selectedCredentialId` to `paragon.uninstallIntegration`:

```javascript
// Disconnect an existing Google Calendar account
paragon.uninstallIntegration("googleCalendar", {
    selectedCredentialId: "a5e995c2-7709-43fd-9cdf-f759faa52497" 
});
```

## Usage

A subset of SDK functions can be passed an additional parameter for Multiple Account Authorizations, as outlined below.

In general, to use Multiple Account Authorizations, you will need to:

* Use `user.integrations.[integration].allCredentials` (a field returned in [`getUser`](/apis/api-reference/multi-account-authorization#getuser->-paragonuser)) to display multiple connected accounts in your Integrations UI.
* Update references to [`connect`](/apis/api-reference#connect-integrationtype%3A-string%2C-installoptions%3F%3A-installoptions) (or [`installIntegration`](/apis/api-reference/multi-account-authorization#installintegration-integrationtype%3A-string%2C-options%3F%3A-integrationinstalloptions->-promise) and [`uninstallIntegration`](/apis/api-reference/multi-account-authorization#.uninstallintegration-integrationtype%3A-string%2C-options%3F%3A-integrationuninstalloptions->-promise)) to use the SDK with Multiple Account Authorizations enabled.
* Update references to [`paragon.request`](/apis/api-reference/multi-account-authorization#request-integrationtype%3A-string%2C-path%3A-string%2C-requestoptions%3A-requestoptions-→-promise) and [`paragon.workflow`](/apis/api-reference/multi-account-authorization#workflow-workflowid%3A-string%2C-options%3A-fetchoptions) (and API equivalents) to make sure that a specific account is targeted for a given integration type.

App Events and Workflows do not need to be updated to support Multiple Account Authorizations.

## Reference

### .getUser() -> ParagonUser

Call `.getUser` to retrieve the currently authenticated user and their connected integration state.

With Multiple Account Authorizations, the `getUser()` method additionally returns `allCredentials`, an array of connected accounts for a given integration.

<CodeGroup>
  ```javascript JavaScript SDK
  paragon.getUser();

  {
    authenticated: true,
    userId: "xyz", // The user ID you specified in the signed JWT
    integrations: {
      salesforce: {
        enabled: true,
        allCredentials: [
          {
            id: "a5e995c2-7709-43fd-9cdf-f759faa52497",
            dateCreated: "2023-05-30T22:33:20.349Z",
            dateUpdated: "2023-05-30T22:33:20.349Z",
            projectId: "d1f142cd-1dfe-4d76-ab4c-8f64901a9c5c",
            integrationId: "8aaad9ff-5adb-433c-a17b-da093f9d4528",
            personaId: "30975f6a-c50c-4e74-914a-3eb700db8b05",
            config: { configuredWorkflows: { ... } },
            isPreviewCredential: false,
            providerId: "1223115691",
            providerData: {},
            status: "VALID",
            dateRefreshed: "2023-05-30T22:33:20.349Z",
            dateValidUntil: "2023-05-30T23:33:17.809Z",
            refreshFailureCount: 0,
            isRefreshing: false,
          },
        ],
        configuredWorkflows: {},
        credentialId: "a5e995c2-7709-43fd-9cdf-f759faa52497",
        credentialStatus: "VALID",
        providerId: "1223115691",
        providerData: {},
      },
      shopify: {
        enabled: false,
      },
    },
  };
  ```

  ```bash REST API
  GET https://api.useparagon.com/projects/<Paragon Project ID>/sdk/me

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  {
    authenticated: true,
    userId: "xyz", // The user ID you specified in the signed JWT
    integrations: {
      salesforce: {
        enabled: true,
        allCredentials: [
          {
            id: "a5e995c2-7709-43fd-9cdf-f759faa52497",
            dateCreated: "2023-05-30T22:33:20.349Z",
            dateUpdated: "2023-05-30T22:33:20.349Z",
            projectId: "d1f142cd-1dfe-4d76-ab4c-8f64901a9c5c",
            integrationId: "8aaad9ff-5adb-433c-a17b-da093f9d4528",
            personaId: "30975f6a-c50c-4e74-914a-3eb700db8b05",
            config: { configuredWorkflows: {} },
            isPreviewCredential: false,
            providerId: "1223115691",
            providerData: {},
            status: "VALID",
            dateRefreshed: "2023-05-30T22:33:20.349Z",
            dateValidUntil: "2023-05-30T23:33:17.809Z",
            refreshFailureCount: 0,
            isRefreshing: false,
          }
        ],
        configuredWorkflows: {},
        credentialId: "a5e995c2-7709-43fd-9cdf-f759faa52497",
        credentialStatus: "VALID",
        providerId: "1223115691",
        providerData: {},
      },
      shopify: {
        enabled: false,
      }
    }
  }
  ```
</CodeGroup>

### .installIntegration(integrationType: string, options?: IntegrationInstallOptions) -> Promise

* **Full docs**: [.installIntegration(integrationType: string, installOptions?: InstallOptions) -> Promise\<IntegrationInstallEvent>](/apis/api-reference#installintegration-integrationtype%3A-string%2C-installoptions%3F%3A-installoptions->-promise\<integrationinstallevent>)
* **Additional options**: If `allowMultipleCredentials` is specified as `true` in the `options` object, this function will not throw an error if the user already has this integration installed.

You can use the resulting Promise to get the newly created credential.

```js JavaScript SDK
const { credential } = await paragon.installIntegration("googledrive", {
    allowMultipleCredentials: true
});
```

**Replacing an account**

You can replace one of your user's existing connected accounts with the `selectedCredentialId` property. This option replaces the underlying connected account, keeping their enabled workflows and settings intact.

```js JavaScript SDK
paragon.installIntegration("googledrive", {
    allowMultipleCredentials: true,
    selectedCredentialId: "0d2cca60-268b-45f1-ac5e-af6aad403d8c"
});
```

### .uninstallIntegration(integrationType: string, options?: IntegrationUninstallOptions) -> Promise

Call `.uninstallIntegration()` to disconnect an integration for the authenticated user.

* **Full docs**: [.uninstallIntegration(integrationType: string) -> Promise](/apis/api-reference#uninstallintegration-integrationtype%3A-string->-promise)
* **Additional options:** `selectedCredentialId` (SDK) or `X-Paragon-Credential` (API) can be used to select a specific account to uninstall.

<CodeGroup>
  ```javascript JavaScript SDK
  paragon.uninstallIntegration("googledrive", {
      selectedCredentialId: "de06dea8-8680-483c-95ea-cfcf66582c96"
  });
  ```

  ```bash REST API
  DELETE https://api.useparagon.com/projects/<Project ID>/sdk/integrations/<Integration ID>

  Authorization: Bearer <Paragon User Token>
  X-Paragon-Credential: de06dea8-8680-483c-95ea-cfcf66582c96
  ```
</CodeGroup>

### .connect(integrationType: string, options: IntegrationInstallOptions) -> Promise

With Multiple Account Authorizations, use `.connect` to present the Connect Portal for an *existing* account for the intended integration. [`.installIntegration`](/apis/api-reference/multi-account-authorization#installintegration-integrationtype%3A-string%2C-options%3F%3A-integrationinstalloptions->-promise) is used to connect *new* accounts.

* The Connect Portal can show the settings and workflows enabled for one account at a time, set by the `selectedCredentialId` property. If `selectedCredentialId` is not defined, the Connect Portal will use the first account available.
* When the Connect Portal appears, a user can enable or disable workflows, update User Settings, and disconnect the account that is selected.

```js JavaScript SDK
// Connect a new account for this integration.
// NOTE: You must use `.installIntegration` rather than `.connect`.
paragon.installIntegration("salesforce", {
    allowMultipleCredentials: true
})

// Show the Connect Portal to configure an existing account for this integration.
paragon.connect("salesforce", {
    selectedCredentialId: "de06dea8-8680-483c-95ea-cfcf66582c96"
});
```

### .request(integrationType: string, path: string, requestOptions: RequestOptions) → Promise

Call `.request` to send an API request to a third-party integration on behalf of one of your users.

* **Full docs**: [#.request-integrationtype-string-path-string-requestoptions-requestinit-promise](/apis/api-reference#request-integrationtype%3A-string%2C-path%3A-string%2C-requestoptions%3A-requestinit-→-promise)
* **Additional options:** `selectedCredentialId` (SDK) or `X-Paragon-Credential` (API) can be used to select a specific account to use with the [Proxy API](/apis/making-api-requests).

<CodeGroup>
  ```js JavaScript SDK
  await paragon.request('slack', '/chat.postMessage', {
  	method: 'POST',
  	body: {
  		channel: 'CXXXXXXX0' // Channel ID,
  		text: 'This message was sent with Paragon Connect :exploding_head:'
  	},
  	selectedCredentialId: "de06dea8-8680-483c-95ea-cfcf66582c96"
  });
  ```

  ```bash REST API
  POST https://proxy.useparagon.com/projects/<Paragon Project ID>/sdk/proxy/slack/chat.postMessage

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json
  X-Paragon-Credential: de06dea8-8680-483c-95ea-cfcf66582c96

  { 
      "channel": "CXXXXXXX0", 
      "text": "This message was sent with Paragon Connect :exploding_head:" 
  }
  ```
</CodeGroup>

### .workflow(workflowId: string, **options: FetchOptions)**

Call `.workflow()` to trigger a Paragon workflow that sends a custom response back to your app. Note: The workflow must be enabled and use a Request-type trigger.

* **Full docs**: [.workflow(workflowId: string, options: FetchOptions)](/apis/api-reference##workflow-workflowid%3A-string%2C-options%3A-fetchoptions)
* **Additional options:** `selectedCredentialId` (SDK) or `X-Paragon-Credential` (API) can be used to select a specific account to trigger a workflow for. The Credential ID that is used will be recorded for viewing in [Task History](/monitoring/viewing-task-history).

<CodeGroup>
  ```javascript JavaScript SDK
  // Trigger the "Lead Created" workflow
  await paragon.workflow("<workflow_id>", {
    body: {
      "email": "bowie@useparagon.com",
      "first_name": "Bowie",
      "last_name": "Foo"
    },
    selectedCredentialId: "de06dea8-8680-483c-95ea-cfcf66582c96"
  });
    
  ```

  ```bash REST API
  // Trigger the "Lead Created" Workflow
  POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/triggers/<Workflow ID>

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json
  X-Paragon-Credential: de06dea8-8680-483c-95ea-cfcf66582c96

  {
    "email": "bowie@useparagon.com",
    "first_name": "Bowie",
    "last_name": "Foo
  }
  ```
</CodeGroup>


# Proxy API
Source: https://docs.useparagon.com/apis/making-api-requests

Send requests directly to an integration provider, on behalf of Connected Users.

<Info>
  Proxy API was formerly known as the Connect API.
</Info>

## Introduction

Once your users have connected their third-party app accounts in the Connect Portal, you can access their app account via the Proxy API.

The Proxy API allows you to directly access any of the third-party provider's API methods. With the SDK, you can use [`paragon.request`](/apis/api-reference#.request-integrationtype-string-path-string-requestoptions-requestinit-promise-less-than-unknown-gre) to send an API request to a third-party app on behalf of one of your Connected Users.

Along with [Workflows](/workflows/building-workflows), the Proxy API is one of two primary ways to build integrations with Paragon.

## When to use the Proxy API

The Proxy API is the most flexible way to interact with your users' third-party apps, and is a useful code-based approach for situations including:

* Performing a simple one-off request (e.g. fetching a list of Salesforce contacts)
* Accessing API methods that may not be available in Workflow [Integration Actions](/workflows/integration-actions)
* Writing custom code for complex or unique integration use cases
* Migrating existing integration code to Paragon

## Making requests with the Proxy API

Every integration in your dashboard has a code example of using `paragon.request`, which takes three arguments:

* `integrationType`: The short name for the integration. i.e. "salesforce" or "googleCalendar". You can find this string on the Overview tab of the integration you want to access, on your Paragon dashboard.
  * When using a custom integration, the `integrationType` name is prefixed with `"custom."` For example, a custom integration titled "TaskLab" would be called `"custom.tasklab"`.
* `path`: The path (without the hostname) of the API request you are trying to access. An example might be "/v1/charges" for Stripe's charge API or "chat.postMessage" for Slack's Web API.
* `requestOptions`: Request options to include, such as:
  * `body`: An object representing JSON contents of the request.
  * `method`: An HTTP verb such as "GET" or "POST". Defaults to GET.

The function returns a Promise for the request output, which will have a shape that varies depending on the integration and API endpoint.

### **Client-side SDK Usage**

```js JavaScript SDK
await paragon.request('slack', '/chat.postMessage', {
	method: 'POST',
	body: {
		channel: 'CXXXXXXX0' // Channel ID,
		text: 'This message was sent with Paragon Connect :exploding_head:'
	}
});

// -> Responds with { ok: true }, and sends a Slack message :)
```

### **Server-side Usage**

**Base URL:**

* Cloud: `https://proxy.useparagon.com`
* [On-premise environments](/on-premise/hosting-paragon-on-premise): `https://worker-proxy.`\[your on-prem host name]

If you'd like to issue a request from your server to an integration on behalf of an end-user, you can make a request to one of the following paths:

* `/projects/<Project ID>/sdk/proxy/<Integration Type>/<API Path>`
* or `/projects/<Project ID>/sdk/proxy/custom/<Integration ID>/<API Path>` for [Custom Integrations](/resources/custom-integrations).

<Tabs>
  <Tab title="REST API">
    ```bash
    https://proxy.useparagon.com/projects/<Paragon Project ID>/sdk/proxy
      /<Integration name>/<API path>

    Authorization: Bearer <Paragon User Token>
    ```

    * A Bearer token must also be specified with a Paragon User Token.

    * This endpoint accepts any HTTP verb you want to use with the API.

    * Body contents must be specified as `application/json`.

    **Example**:

    ```bash
    POST https://proxy.useparagon.com/projects/19d...012/sdk/proxy/slack/chat.postMessage

    Authorization: Bearer eyJ...
    Content-Type: application/json

    { 
        "channel": "CXXXXXXX0", 
        "text": "This message was sent with Paragon Connect :exploding_head:" 
    }
    ```
  </Tab>

  <Tab title="REST API (Custom Integrations)">
    When sending Connect API requests for Custom Integrations, the request path differs slightly. Use the `/custom/` path to send requests as shown:

    ```bash
    https://proxy.useparagon.com/projects/<Paragon Project ID>/sdk/proxy
      /custom/<Integration ID>/<API path>

    Authorization: Bearer <Paragon User Token>
    ```

    * A Bearer token must also be specified with a Paragon User Token.

    * This endpoint accepts any HTTP verb you want to use with the API.

    * The Integration ID can be found in the dashboard (`/.../integrations/<Integration ID>`) or with the [Get project's integrations](/apis/api-reference#get-projects-integrations) API endpoint.

    **Example:**

    ```bash
    POST https://proxy.useparagon.com/projects/19d...012/sdk/proxy
        /fb243b75-35e7-46b3-ba6c-967ccebeb449/notifications

    Authorization: Bearer eyJ...
    Content-Type: application/json

    { 
        "title": "This notification was created from your app"
    }
    ```
  </Tab>
</Tabs>

## Requesting files or binary response data

By default, the Proxy API will attempt to parse the response data from the integration API as JSON. To receive the raw response data (including all HTTP headers that were received from the integration API), you can pass the `X-Paragon-Use-Raw-Response` header to the request.

This can be used when downloading binary/file data, such as images or PDF files, where the response cannot be encoded as JSON.

*The JavaScript SDK currently does not support returning non-JSON payloads. As an alternative, you can use your preferred request client to make the below API request.*

Below is an example of using the Connect API to download a file from Google Drive using their [`files.get`](https://developers.google.com/drive/api/v3/reference/files/get) endpoint.

```curl REST API
GET https://proxy.useparagon.com/projects/19d...012/sdk/proxy/googledrive/files/<File ID>/?alt=media

Authorization: Bearer eyJ...
X-Paragon-Use-Raw-Response: 1
```

## Changing the Base URL

In some cases, the Base URL included automatically in the Proxy API isn't the one you want to send requests to.

To change the Base URL of a Proxy request, simply use a fully-qualified URL rather than a relative path:

```bash
https://proxy.useparagon.com/projects/[Project ID] /sdk/proxy/googledrive/https://sheets.googleapis.com/v4/spreadsheets
```

In this example, the URL that will be requested is **`https\://sheets.googleapis.com/v4/spreadsheets`**.

<Note>
  **Note**: Integrations have a permitted list of hosts that can be reached with the Proxy API. If you get the error "This domain is invalid for the current integration", you may be using an unpermitted host.
</Note>


# Task History API
Source: https://docs.useparagon.com/apis/task-history



## Introduction

The Task History API allows you to query your users' usage of integration workflows and access data from historical workflow executions.

<Info>
  **Task History API is available for Paragon customers on Enterprise plans.** To learn more, contact your Customer Success Manager or [sales@useparagon.com](mailto:sales@useparagon.com).
</Info>

### When to use the Task History API

The Task History API can be used to analyze integration usage or pull information about historical workflow executions into your application. For example, you can use the Task History API to:

* Query the number of workflow executions that ran last week for the Salesforce integration
* Query all failed workflow executions for a specific user
* Export all tasks that occurred in a specific month into Google BigQuery

You can find example queries in the request format below.

### Generating API Keys

The Task History API authorizes with a project-level API Key, instead of the Paragon User Token.

API Keys provide access to *all Connected Users* in the project they are created in and can be rotated or deleted after being generated.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(60\).png)
</Frame>

To generate a new project-level API Key:

1. Visit your Project's Settings > API Keys.

2. Click "**Create API Key**". Provide a meaningful name for the API Key for your reference.

3. The API Key will appear on a one-time basis for you to save in a secure place.

## Examples

### Querying Salesforce workflow executions run during a week's time period

```bash REST API
GET /projects/<Paragon Project ID>/task-history/workflow-executions?integration=salesforce&afterDate=2023-02-16T00:00:00&beforeDate=2023-02-23T00:00:00

Authorization: Bearer <Paragon API Key>
```

**Response example:**

```json
{
    "workflowExecutions": [
        {
            "id": "c70cafa5-4f80-45c7-b5b3-71454f6d638d",
            "userId": "d1f142cd-1dfe-4d76-ab4c-8f64901a9c5c",
            "taskCount": 1,
            "runDuration": 1477,
            "workflowId": "c395c170-4541-499c-afd1-0eccfaae49c9",
            "status": "SUCCEEDED",
            "dateEnded": "2023-02-20T06:21:43.751Z",
            "dateStarted": "2023-02-20T06:21:42.274Z"
        },
        ...
    ],
    "nextLink": "https://zeus.useparagon.com/projects/d1f142cd-1dfe-4d76-ab4c-8f64901a9c5c/task-history/workflow-executions?integration=salesforce&afterDate=2023-02-16T00:00:00&beforeDate=2023-02-23T00:00:00&sortBy=ASC&offset=100",
    "total": 14295
}
```

### Querying failed workflow executions for a user

```bash REST API
GET /projects/<Paragon Project ID>/task-history/workflow-executions?userId=test@example.com&status=FAILED

Authorization: Bearer <Paragon API Key>
```

**Response example:**

```json
{
    "workflowExecutions": [
        {
            "id": "317a396c-7dc8-4a1f-8ceb-b39d5ad845da",
            "userId": "123456",
            "taskCount": 0,
            "runDuration": 3847,
            "workflowId": "24cf377b-c7f5-40e7-9b10-6cc5d811266a",
            "status": "FAILED",
            "dateEnded": "2023-03-01T11:15:04.051Z",
            "dateStarted": "2023-03-01T11:15:00.204Z"
        },
        ...
    ],
    "nextLink": "https://zeus.useparagon.com/projects/d1f142cd-1dfe-4d76-ab4c-8f64901a9c5c/task-history/workflow-executions?userId=test@example.com&status=FAILED&sortBy=ASC&offset=100",
    "total": 180
}
```

## Endpoint Reference

### Base URL

The Base URL of the Task History API endpoints begin with the same origin as the [Connect](/apis/making-api-requests) and [Users APIs](/apis/users).

* For cloud customers who sign in to `dashboard.useparagon.com`, the Base URL is `https\://api.useparagon.com/projects/\<Project ID>/task-history`
* For on-premise customers who sign in to `dashboard.<On-Premise URL>`, the base URL is `https\://zeus.\<On-Premise URL>/projects/\<Project ID>/task-history`

### Authorization

Requests to the Task History API must provide an API Key as a Bearer-type `Authorization` header in the request:

```bash
GET /projects/<Paragon Project ID>/task-history/workflow-executions

Authorization: Bearer <Paragon API Key>
```

### Pagination

API responses that include multiple objects will be provided in page size of 100. In the case that there are additional pages of data available, the API response will include a URL to get the next 100 records.

### Rate Limits

The Task History API has a rate limit of 1,000 requests per 10 minutes. If you need higher rate limits, please reach out to our team at [support@useparagon.com](mailto:support@useparagon.com)

### API Methods

## Get workflow executions

`GET` `[Base URL]/workflow-executions`

Search through historical workflow executions with the below filtering options as query parameters.

#### Query Parameters

| Name        | Type          | Description                                                                                                                                                                                                  |
| ----------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| userId      | String        | Filter executions by a specific Connected User ID.                                                                                                                                                           |
| workflowId  | UUID          | Filter executions for a specific workflow ID.                                                                                                                                                                |
| integration | String        | Filter executions for a specific integration, for example, `salesforce`. The integration name is in the same format as provided to [`paragon.connect`](/apis/api-reference#.connect-integrationtype-string). |
| status      | String        | Filter executions by a status: <br /> `EXECUTING` / `FAILED` / `SUCCEEDED` / `DELAYED`                                                                                                                       |
| beforeDate  | String (Date) | Filter executions that began before a certain timestamp, in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (for example, `2023-02-22`).                                                           |
| afterDate   | String (Date) | Filter executions that began after a certain timestamp, in ISO 8601 format.                                                                                                                                  |
| offset      | Number        | Offset results by a fixed number of records.                                                                                                                                                                 |
| sortBy      | String        | Sort by execution time: `ASC` / `DESC`. Defaults to `DESC`.                                                                                                                                                  |

```json 200: OK
{
    "workflowExecutions": [
        {
            "id": "c70cafa5-4f80-45c7-b5b3-71454f6d638d",
            "userId": "d1f142cd-1dfe-4d76-ab4c-8f64901a9c5c",
            "taskCount": 1,
            "runDuration": 1477,
            "workflowId": "c395c170-4541-499c-afd1-0eccfaae49c9",
            "status": "SUCCEEDED",
            "dateEnded": "2023-02-20T06:21:43.751Z",
            "dateStarted": "2023-02-20T06:21:42.274Z"
        },
        // ...
    ],
    // nextLink is `null` if there are no more results
    "nextLink": "https://zeus.useparagon.com/projects/d1f142cd-1dfe-4d76-ab4c-8f64901a9c5c/task-history/workflow-executions?integration=salesforce&afterDate=2023-02-16T00:00:00&beforeDate=2023-02-23T00:00:00&sortBy=ASC&offset=100",
    "total": 14295
}
```

## Get workflow execution by ID

`GET` `[Base URL]/workflow-executions/:executionID`

Get details for a specific workflow execution by its Execution ID.

#### Path Parameters

| Name          | Type | Description                                 |
| ------------- | ---- | ------------------------------------------- |
| executionID\* | UUID | The ID of the execution to get details for. |

```json 200: OK
{
    "id": "daff08e3-c299-4005-9799-be69090ebae1",
    "userId": "test",
    "taskCount": 1,
    "runDuration": 8,
    "workflowId": "88d20d69-e585-4eea-aac4-5b7aea0521e8",
    "status": "FAILED",
    "dateEnded": "2022-11-25T22:15:07.987Z",
    "dateStarted": "2022-11-25T22:15:00.038Z",
    "stepExecutions": [
        {
            "id": "5fec7d78-7e10-4b4a-bdfc-292f629774bf",
            "stepId": "0f7cce44-d292-4555-bae8-5b904a0c4ac9",
            "workflowExecutionId": "daff08e3-c299-4005-9799-be69090ebae1",
            "status": "SUCCEEDED",
            "type": "TRIGGER/CRON",
            "start": "2022-11-25T22:15:00.075Z",
            "end": "2022-11-25T22:15:00.084Z",
            "next": [
                "29e675eb-0910-4d5c-8a5c-a4a4c1895605"
            ],
            "prev": null,
            "inputSize": "220",
            "outputSize": "76"
        },
        {
            "id": "29e675eb-0910-4d5c-8a5c-a4a4c1895605",
            "stepId": "7459bbf5-e55b-49e8-9390-084cf86752e5",
            "workflowExecutionId": "daff08e3-c299-4005-9799-be69090ebae1",
            "status": "FAILED",
            "type": "ACTION/REQUEST",
            "start": "2022-11-25T22:15:07.850Z",
            "end": "2022-11-25T22:15:07.873Z",
            "next": [],
            "prev": "5fec7d78-7e10-4b4a-bdfc-292f629774bf",
            "inputSize": "712",
            "outputSize": "824"
        }
    ]
}
```

## Get details for step of workflow execution

`GET` `[Base URL]/workflow-executions/:executionID/step-executions/:stepExecutionID`

Get details for a specific step of a workflow execution, by its Execution ID *and* Step Execution ID. These details include step input/output and run duration for the specific step.

#### Path Parameters

| Name              | Type | Description                                      |
| ----------------- | ---- | ------------------------------------------------ |
| executionID\*     | UUID | The ID of the execution to get details for.      |
| stepExecutionID\* | UUID | The ID of the step execution to get details for. |

```json 200: OK
{
    "isLargeInput": false,
    "isLargeOutput": false,
    "input": {},
    "output": "Error: no auth mechanism defined"
}
```

`POST` `[Base URL]/workflow-executions/:executionID/replay`

Replay a specific workflow execution, using the same version of the workflow that the execution originally ran with.

*This endpoint is in beta and may not be suitable for use in your production application. Please send any feedback you have about this endpoint to *[*support@useparagon.com*](mailto:support@useparagon.com)*!*

```json 201: Created undefined
```

### Get workflow executions

`GET` `[Base URL]/workflow-executions`

### Get workflow execution by ID

`GET` `[Base URL]/workflow-executions/:executionID`

#### Query Parameters

| Name        | Type          | Description                                                                                                                                                                                                  |
| ----------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| userId      | String        | Filter executions by a specific Connected User ID.                                                                                                                                                           |
| workflowId  | UUID          | Filter executions for a specific workflow ID.                                                                                                                                                                |
| integration | String        | Filter executions for a specific integration, for example, `salesforce`. The integration name is in the same format as provided to [`paragon.connect`](/apis/api-reference#.connect-integrationtype-string). |
| status      | String        | Filter executions by a status: <br /> `EXECUTING` / `FAILED` / `SUCCEEDED` / `DELAYED`                                                                                                                       |
| beforeDate  | String (Date) | Filter executions that began before a certain timestamp, in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601) (for example, `2023-02-22`).                                                           |
| afterDate   | String (Date) | Filter executions that began after a certain timestamp, in ISO 8601 format.                                                                                                                                  |
| offset      | Number        | Offset results by a fixed number of records.                                                                                                                                                                 |
| sortBy      | String        | Sort by execution time: `ASC` / `DESC`. Defaults to `DESC`.                                                                                                                                                  |

### Get details for step of workflow execution

`GET` `[Base URL]/workflow-executions/:executionID/step-executions/:stepExecutionID`

### Replay workflow execution

`POST` `[Base URL]/workflow-executions/:executionID/replay`

Replay a specific workflow execution, using the same version of the workflow that the execution originally ran with.

*This endpoint is in beta and may not be suitable for use in your production application. Please send any feedback you have about this endpoint to *[*support@useparagon.com*](mailto:support@useparagon.com)*!*

#### Path Parameters

| Name          | Type | Description                                 |
| ------------- | ---- | ------------------------------------------- |
| executionID\* | UUID | The ID of the execution to get details for. |


# Users API
Source: https://docs.useparagon.com/apis/users



## Introduction

The Users API allows you to query and modify the state of your Connected Users and their integrations.

The API includes REST endpoints (and matching SDK functions) for identifying what integrations your user has enabled, disconnecting integrations, and disabling workflows. The API also allows your application to associate metadata with a Connected User.

<Tip>
  ✨ User Metadata is included in the **Pro Plan** and above. [Contact us](mailto:sales@useparagon.com) to schedule a demo of User Metadata or upgrade your account.
</Tip>

### When to use the Users API

The Users API can be used for integration usage analysis or maintenance of Connected Users. For example, using the API methods, you can...

* Automatically disconnect integrations when a user deletes or downgrades their account in your application
* Enrich your Connected Users' profile information with email, name, and other metadata
* Check if a user has enabled a certain integration and view account connection status

## Authorization

Requests to the Users API are authorized with a Bearer-type `Authorization` header using a Paragon User Token:

```bash
https://api.useparagon.com/projects/<Paragon Project ID>/sdk/...

Authorization: Bearer <Paragon User Token>
```

In the SDK, the Users API can be called directly after calling `paragon.authenticate`:

```js
// Authenticate the user
await paragon.authenticate("<Paragon Project ID>", "<Paragon User Token>");

// Call a Users API method, like setUserMetadata
paragon.setUserMetadata({ ... });
```

## Examples

### Associate Connected User with metadata

You can associate your user with metadata by including it in your existing SDK call to `paragon.authenticate`, as an additional parameter:

```js
await paragon.authenticate("<Paragon Project ID>", "<Paragon User Token>", {
    metadata: {
        Name: user.fullName,
        Email: user.email,
        AccountType: user.plan,
    }
});
```

<Note>
  **Note:** `Name` and `Email` are special parameters that you can view within the [Connected Users Dashboard](/monitoring/users). They are also case-sensitive.
</Note>

Alternatively, you can supply the metadata from your application after authenticating:

<CodeGroup>
  ```js JavaScript SDK
  paragon.setUserMetadata({
      Name: "Sean V",
      Email: "sean@useparagon.com",
      AccountType: "Pro",
  });
  ```

  ```bash REST API
  // REQUEST
  PATCH https://api.useparagon.com/projects/<Project ID>/sdk/me

  // Headers
  Authorization: <Paragon User Token>
  Content-Type: application/json

  // Body
  { "meta": { "Email": "sean@useparagon.com" } }
  ```
</CodeGroup>

#### **Using Metadata in Workflows**

Metadata properties are available for use in workflows in the variable menu of the Workflow Editor. To select a metadata property in a workflow, you'll first need to set a sample metadata object.

From any workflow, click the Options menu in the top navigation and select **Set User Metadata**:

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(41\).png)
</Frame>

A dialog will appear to set a sample metadata object that represents the object you will pass through to the API or SDK as shown above in [Associate Connected User with metadata](/apis/users#associate-connected-user-with-metadata).

Any properties set in this sample object will be available for selection in the variable menu, in the "User Info" section:

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(43\).png)
</Frame>

### Get Connected User info and integration state

You can access Connected User info (including any associated metadata) using `paragon.getUser` or with the REST API.

<CodeGroup>
  ```js JavaScript SDK
  paragon.getUser();

  // Returns:
  {
      authenticated: true,
      integrations: {
          salesforce: {
              enabled: true,
              credentialStatus: "VALID",  // "INVALID" if account is unreachable
              providerData: {...},        // Account details for integration
              providerId: "00502000..."   // Account's unique ID for integration
          }
      },
      meta: {...}, // Metadata provided by your application
      userId: "12345" // User ID specified in "sub" field of Paragon User Token
  }
  ```

  ```bash REST API
  // REQUEST
  GET https://api.useparagon.com/projects/<Project ID>/sdk/me

  // Headers
  Authorization: Bearer <Paragon User Token>

  // RESPONSE
  {
    "authenticated": true,
    "integrations": {
      "salesforce": {
        "enabled": true,
        "credentialStatus": "VALID",
        "providerData": {...},
        "providerId": "00502000..."
      }
    },
    "meta": {...},
    "userId": "12345"
  }
  ```
</CodeGroup>

#### Validating account status with the `credentialStatus` property

If a previously connected account is unreachable (e.g. your user revokes access from the integration), the Connect Portal will show a warning and prompt your user to reconnect their account:

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Portal%20with%20invalid%20credential%20status.png)
</Frame>

You can check for this condition with the SDK with the `credentialStatus` property. For example:

```js
paragon.getUser();

// Returns:
{
    integrations: {
        salesforce: {
            enabled: false,
            credentialStatus: "INVALID",
            ...
        }
    },
    ...
}
```

If you are using the [Headless Connect Portal](/connect-portal/headless-connect-portal), you should show a reconnection prompt when `credentialStatus` is not `"VALID"`. You can initiate a reconnection flow with the same function used to start a connection flow: [.installIntegration(integrationType: string, installOptions?: InstallOptions) -> Promise\<IntegrationInstallEvent>](/apis/api-reference#installintegration).

### Disconnecting integrations

Integrations can be disconnected using `paragon.uninstallIntegration` or with the REST API.

When an integration is disconnected, workflows for that integration will stop running for the authenticated user and any saved User Settings will be cleared.

<Tabs>
  <Tab title="JavaScript SDK">
    ```js
    // Use the integration name, as used in paragon.connect();
    await paragon.uninstallIntegration("salesforce");
    ```
  </Tab>

  <Tab title="REST API">
    Get the ID of the integration you want to disconnect, with the `/sdk/integrations` endpoint:

    **Request**

    ```bash
    GET https://api.useparagon.com/projects/<Project ID>/sdk/integrations

    // Headers
    Authorization: Bearer <Paragon User Token>
    ```

    **Response**

    ```json
    [
        { "id": "<Integration ID>", "type": "salesforce", ... },
        {...}
    ]
    ```

    The `<Integration ID>` can be used to disconnect the integration for the user:

    **Request**

    ```bash
    DELETE https://api.useparagon.com/projects/<Project ID>/sdk/integrations/<Integration ID>

    // Headers
    Authorization: Bearer <Paragon User Token>
    ```
  </Tab>
</Tabs>


# Concurrency SLA
Source: https://docs.useparagon.com/billing/concurrency-limits

Learn how concurrency is calculated in Paragon.

Paragon's concurrency SLA is the number of [step executions](/monitoring/viewing-task-history#detailed-task-execution) that can run at a given time across all of your [Connected Users](/billing/connected-users). For example, if you have a concurrency SLA of 20, you can have up to 20 step executions running in the background at a given time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Viewing%20Task%20History%20in%20Paragon%20Connect.png)
</Frame>

### Concurrency Levels

Our Concurrency SLA for our standard plans is as follows:

| Plan           | Concurrency SLA        |
| -------------- | ---------------------- |
| **Trial**      | **5** step executions  |
| **Pro**        | **20** step executions |
| **Enterprise** | **50** step executions |

If you have any other questions regarding your concurrency SLA, please contact your Customer Success Manager.

### What happens if I reach my Concurrency SLA?

When you exceed this SLA, new step executions will be queued up for execution and show as `Not Started` in [Task History](/monitoring/viewing-task-history). Paragon accepts and stores all executions and will only execute them once the concurrent workflows drop below the SLA limit.

<Tip>
  To upgrade your Paragon subscription to a higher usage tier for concurrent workflows, [contact Sales](mailto:sales@useparagon.com) or reach out to your Customer Success Manager.
</Tip>


# Connected Users
Source: https://docs.useparagon.com/billing/connected-users

Learn how Connected Users are counted in Paragon.

Connected Users represent your customers that are connected to integrations in Paragon. A Connected User typically represents an organization, but can be implemented to represent any entity, such as an individual user.

Each Connected User is a **unique User ID connected to at least 1 integration.** A User ID is the subject (`sub`) field of the Paragon User Token used to [authenticate to the API or SDK](/getting-started/installing-the-connect-sdk#3.-call-paragon.authenticate).

You can view and manage your Connected Users in the Paragon dashboard. Learn more in [Managing Connected Users](/monitoring/users).

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Viewing%20Connected%20Users%20in%20the%20Connected%20Users%20Dashboard%20in%20Paragon%20Connect.png)
</Frame>

## Connected User limits and pricing

Your Paragon subscription includes a limit on Connected Users. You can view this limit and current usage in the header of the [Connected Users Dashboard](/monitoring/users).

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Finding%20Conencted%20Users%20Limits%20in%20Paragon%20Connect.png)
</Frame>

All [Admin users](/managing-account/teams#managing-roles-and-permissions) in your organization will receive automated email notifications when your usage reaches 70%, 85%, and 100% of your Connected Users limit.

### What happens if I reach my Connected Users limit?

When you exceed this limit, new Connected Users will be unable to connect integrations. **Existing Connected Users will *****not***** be impacted**, and Workflows for existing Connected Users will continue to run.

You can reduce your usage of Connected Users by deleting inactive users from the [Connected Users Dashboard](/monitoring/users).

<Tip>
  To upgrade your Paragon subscription to a higher usage tier for Connected Users, [contact Sales](mailto:sales@useparagon.com) or reach out to your Account Manager.
</Tip>


# Task Usage
Source: https://docs.useparagon.com/billing/tasks

Learn how tasks are counted in Paragon.

A task is a unit of work that occurs in the Paragon platform on behalf of your Connected User.

* In [Workflows](/workflows/building-workflows), each successful Action, Request, and Function are counted as tasks. You can see which steps succeeded in the workflow execution view of the Task History page (see screenshot below).
* All [Proxy API](/apis/making-api-requests) requests are counted as tasks.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Viewing%20Steps%20in%20Paragon%20Workflow.png)
</Frame>

## How workflow steps count towards tasks

The following steps count as tasks:

* [Integrations](/resources/integrations) (e.g. Salesforce, Slack, Google Sheets)
* [Request](/workflows/requests)
* [Function](/workflows/functions)

The following steps **do not** count as tasks:

* [Triggers](/workflows/triggers)
* [Conditional](/workflows/using-conditionals)
* [Fan Out](/workflows/using-fan-out)
* Response
* Delay

<Note>
  **Note:** While the Fan Out itself doesn't count as a task, the contents within Fan Outs count as tasks per iteration.
</Note>

## Task limits

The task limit is the maximum number of tasks you can run before your workflows stop executing during the current billing cycle.

## How task usage resets

Task usage resets at the beginning of your billing period each month. Unused tasks will not roll over to the next billing period.

### What happens if I reach my task limit?

If you are on a legacy plan that bills by task usage, you'll receive notification emails from Paragon as you get closer to your task limit.

We'll send an email notifying you that your workflows have stopped executing. Users on any of our [paid plans](https://www.useparagon.com/pricing) have a five-day grace period to upgrade before workflows stop executing.

Any unfinished tasks will show up in your [Task History](/monitoring/viewing-task-history) as a failed workflow. You can [replay stopped workflows](/monitoring/viewing-task-history#editing-and-replaying) when your billing cycle restarts or you upgrade your plan.

<Tip>
  Need more tasks? Upgrade to a [paid plan](https://useparagon.com/pricing) today!
</Tip>


# Customizing the Connect Portal
Source: https://docs.useparagon.com/connect-portal/connect-portal-customization

Control your end-user integration experience by customizing Connect Portal.

The **Connect Portal** is a component that your users interact with to connect their third-party app accounts to your application.

To edit the Connect Portal for an integration, click on **Customize Connect Portal** in the Integration Overview page to open the **Connect Portal Editor**.

In the Connect Portal Editor, you can customize different aspects of your Connect Portal:

* [Overview](#overview)**:** Edit the integration's description under the Connect Portal's Overview tab
* [Configuration](#configuration)**:** Edit the appearance of the integration's workflows and workflow settings under the Configuration tab
* [Appearance](#appearance)**:** Edit the visual appearance of the Connect Portal

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(59).png" alt="" />
</Frame>

## Overview

There are two options you can edit in the **Overview** tab:

* **Short description:** a one-line description of your integration that appears at the top of the Connect Portal.
* **Overview**: a long-form description of your integration. This description is the first thing your users see when opening the Connect Portal, so this is the best place to describe and showcase your integration's benefits in detail to your users.

<Info>
  You can use [Markdown formatting](https://commonmark.org/help/) in the Overview section.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Markdown%20in%20Paragon%20Connect%20Portal%20\(1\).png)
</Frame>

## Configuration

### Settings

Under the **Settings** section of the Configuration tab, you'll be able to create user-facing settings that allow your users to configure parameters of their workflows from the Connect Portal.

Some example use cases of User Settings include:

* **Slack:** choosing which channel that messages should be sent in
* **Salesforce:** choosing a custom opportunity stage that new opportunities created in
* **Hubspot:** choosing a custom lead status that new leads should be created with
* **Jira:** choosing which Jira user that new issues should be assigned to

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(76).png" alt="" />
</Frame>

Learn more about adding and configuring User Settings below:

<Card
  title="User Settings"
  href="/connect-portal/workflow-user-settings
"
  horizontal
/>

### Workflows

Under the **Workflows** section of the Configuration tab, you can control the visibility and customize the description of workflows that appear in the Connect Portal.

Learn more about configuring the Workflow List below:

<Card
  title="Displaying Workflows"
  href="/connect-portal/displaying-workflows
"
  horizontal
/>

## Appearance

### Theme

The Connect Portal supports both light and dark themes, allowing you to choose a theme that matches your application's overall theme. The Connect Portal can also detect and match your user's system theme settings by selecting "Match System Theme" from the theme dropdown.

#### Light

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Paragon%20Connect%20Portal%20in%20Light%20Mode.png" alt="" />
</Frame>

#### Dark

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Paragon%20Connect%20Portal%20in%20Dark%20Mode.png" alt="" />
</Frame>

### Paragon Branding

You can optionally turn off the Paragon-branded footer in your Connect Portal.

<Note>
  Whitelabeling the Connect Portal, which allows you to remove Paragon branding, is available on our **Pro plan** and above. Please [contact us](mailto:sales@useparagon.com) to enable this option on your account.
</Note>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Whitelabelling%20the%20Connect%20Portal%20in%20Paragon%20Connect.gif" alt="" />
</Frame>


# Displaying Workflows
Source: https://docs.useparagon.com/connect-portal/displaying-workflows

Control the visibility or customize the description of workflows that appear in the Connect Portal.

Workflows are an easy way for members of your team to build integration logic. Workflows appear in the Connect Portal, in the **Configuration** tab, as a way for your users to opt-in or out of specific features of your integration.

## Customizing the Workflow List

You can customize the Workflow List and their display options by visiting the **Configuration** tab of the Customize Connect Portal screen for any integration.

<Info>
  **Not seeing a workflow in the Connect Portal?** Workflows do *not* appear to your users in the Connect Portal if:

  * The workflow is not deployed
  * The workflow is hidden for all users
  * The workflow uses an Integration Enabled trigger
</Info>

### Reordering Workflows

Drag and drop Workflows to change the order in which they appear to your users in the Connect Portal.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Kapture%202022-12-05%20at%2023.28.10.gif" alt="" />
</Frame>

### **Workflow Display Options**

By clicking on a workflow row, you can edit the display options for that specific workflow:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(9).png" alt="" />
</Frame>

#### Name and Description

This is the user-facing name and description of the workflows as it appears in your Connect Portal. You should give your workflow a descriptive name and explain the functionality that it provides in the description to make it easy for your users to decide which workflows they want to activate.

#### Settings

Workflow-level User Settings can be added to allow customization that is specific to a particular workflow (as opposed to User Settings that apply to multiple workflows across the integration).

Your user's selection for workflow-level User Settings will only be available to the workflow they are created for, as values available in the Variable Menu.

Learn more about adding and configuring User Settings below:

<Card title="User Settings" href="/connect-portal/workflow-user-settings" horizontal />

#### Default to enabled

If turned on, the workflow will appear as enabled by default once a user connects their account to the integration.

*This setting is unavailable for workflows that have required workflow-level User Settings.*

Turning on this option will *not* affect the workflow's status for existing users. For example, if the workflow is disabled for an *existing user* prior to turning on this option, it will remain disabled after turning on this option.

#### Hide workflow from Portal for all users

If turned on, the workflow will be hidden from all users from the Connect Portal.

The workflow can still be enabled by default (using the "Default to enabled" option described above) or enabled with a request to the [users.md](/apis/users).

**Workflow Permissions**

You can restrict the visibility of workflows to specific users (or groups of users) with Workflow Permissions.

Learn more about adding and configuring Workflow Permissions below:

<Card
  title="Displaying Workflows"
  href="/connect-portal/displaying-workflows
"
  horizontal
/>


# Field Mapping
Source: https://docs.useparagon.com/connect-portal/field-mapping

Use a Field Mapping User Setting to allow your users to define a mapping between objects in your application and their integration.

A **Field Mapping** is a type of User Setting that allows your users to define a mapping between an object in your application (an "Application Object") and an object in their connected integration account (an "Integration Object").

## Overview

For example: let's say your integration needs to sync your user's Task records from your application to their Tasks in a Salesforce account.

To do that, you'll need to build up a **Mapping** between fields in your application's Tasks and fields for a Task in a connected Salesforce account, as illustrated below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%20993%20(1).png" alt="" />
</Frame>

To enable your user to provide this Mapping, you can use the Connect Portal to provide a User Setting that displays each field of a Task (Title, Description, Completed) and prompts them to select a matching field of a Salesforce Task.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(54).png" alt="" />
</Frame>

Once this Mapping is completed, you're able to use the Mapping like any other User Setting in the [Workflow Editor](/connect-portal/field-mapping#usage-in-workflows) to transform objects in either direction (from Application Object to Integration Object *or* from Integration Object to Application Object).

## Supported Integrations

Field Mapping settings are supported for most CRM integrations and for a select number of other integrations, including:

* [Close](/resources/integrations/close)
* [Dynamics 365 Sales](/resources/integrations/microsoft-dynamics-365)
* [Dynamics 365 Business Central](/resources/integrations/dynamicsbusinesscentral)
* [HubSpot](/resources/integrations/hubspot)
* [Jira](/resources/integrations/jira)
* [Marketo](/resources/integrations/marketo)
* [Pipedrive](/resources/integrations/pipedrive)
* [QuickBooks](/resources/integrations/quickbooks)
* [Sage Intacct](/resources/integrations/sage-intacct)
* [Salesforce](/resources/integrations/salesforce)
* [Sharepoint](/resources/integrations/sharepoint)
* [ZohoCRM](/resources/integrations/zohocrm)

## Adding to the Connect Portal

Field Mapping settings can be added by visiting the "Customize Connect Portal" screen from a supported integration in your project, under the [User Settings](/connect-portal/workflow-user-settings) section.

Select **Field Mapping** as the type for the User Setting:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(51).png" alt="" />
</Frame>

You should give this setting a descriptive name that explains what this Mapping represents for your integration. For example, if Contacts is your intended Application Object to be mapped to a Salesforce Object, you might title this input "*Map Contacts to this object*".

Finally, **add a label for each property that should be mapped from your Application Object to a Salesforce Object**. Using the example above, you might add labels for "First Name", "Last Name", and "Email", if the schema for contacts in your app includes these properties.

In your Connect Portal, your users will be prompted to select an object from their Salesforce instance when enabling this workflow. For each of the object properties you labeled, your users will be prompted to select which object field that property should be mapped to.

## Dynamic Fields

<Info>
  **Dynamic Field Mapping is available for Paragon Enterprise customers and as an add-on for Paragon Pro customers.** To learn more, contact your Customer Success Manager or [sales@useparagon.com](mailto:sales@useparagon.com).
</Info>

If your Application Fields may vary between your users for a particular Mapping, you are able to provide those options from your frontend application, through the SDK, using **Dynamic Fields**.

### Configuring your Field Mapping setting

You can configure a Dynamic Field Mapping by adding a Field Mapping input to your Connect Portal as described above.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(20).png" alt="" />
</Frame>

1. To set up Dynamic Field Mapping, toggle on the "Use dynamic fields" slider option in your Field Mapping setting configuration.

2. Once you've toggled this on, provide an Object Name that represents the name of your Application Object. This name will be used as an identifier to provide dynamic fields through the SDK, as demonstrated in the code example to `paragon.connect`.

3. *(Optionally)* Edit the example fields included in the code snippet to represent realistic values that will be passed from your application. This will not affect the live configuration for your users, since values must be passed from your frontend application through the SDK, but you might find this useful to test example field values while building workflows.

4. Click **Save** to apply your changes.

### Passing Dynamic Fields through the SDK

After configuring your Field Mapping input to use Dynamic Fields, you can modify your call to `paragon.connect` to include fields to be dynamically rendered in the Connect Portal.

You can pass these fields by specifying the `mapObjectFields` option, with an object keyed by the name you specified in the "Object Name" field when configuring your setting:

```js
paragon.connect("salesforce", {
  mapObjectFields: {
    "Task": [
      { label: "Title", value: "title" },
      { label: "Description", value: "description" },
      { label: "Completed?", value: "isCompleted" }
    ]
  }
});
```

For each field passed, two values are specified:

* `label`: The human-readable description for the field. This will be shown to the user in the Field Mapping input.
* `value`: The field key used by the object as it exists in your application. *This key does not yet support nested properties.*

Calling the above would result in the Connect Portal appearing like below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(17).png" alt="" />
</Frame>

#### User-Configurable Mappings

If your use case requires it, you can allow users to control the *number* of Field Mappings that are set by adding the `userCanRemoveMappings` option to your `paragon.connect` call.

```js
paragon.connect("salesforce", {
  mapObjectFields: {
    // Replace "Task" with your Application Object Name as specified in
    // Field Mapping input options
    "Task": {
      fields: [
        { label: "Title", value: "title" },
        { label: "Description", value: "description" },
        { label: "Completed?", value: "isCompleted" }
      ],
      userCanRemoveMappings: true
  }
});
```

Setting this option will result in the Connect Portal appearing like below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(19).png" alt="" />
</Frame>

With this option, your users will be able to remove, re-add, and change any of the Mappings that are passed through `fields`. This option can be combined with the `defaultFields` option to achieve different display configurations:

<Frame caption="{ userCanRemoveMappings: true, defaultFields: [] }">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(64).png" alt="" />
</Frame>

<Frame caption="{ userCanRemoveMappings: true, defaultFields: ['title'] }">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(13).png" alt="" />
</Frame>

`defaultFields` is an array of strings matching the `value` property of your `fields`. Any fields with matching `value` keys will be included in the initial list of Field Mappings that your user sees, when viewing the Connect Portal for the first time.

If `defaultFields` is unspecified, *all* fields specified in the `fields` property will appear in the initial list of Field Mappings.

#### User-Creatable Fields

If your Application Object supports freeform fields or a flexible schema, you can allow users to create their own fields in the Field Mapping input.

```js
paragon.connect("salesforce", {
  mapObjectFields: {
    // Replace "Task" with your Application Object Name as specified in
    // Field Mapping input options
    "Task": {
      fields: [
        { label: "Title", value: "title" },
        { label: "Description", value: "description" },
        { label: "Completed?", value: "isCompleted" }
      ],
      defaultFields: [],
      userCanCreateFields: true
  }
});
```

If this option is specified, the Connect Portal will appear with an option for users to create their own fields, if the field is not available in the list populated by `fields`:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(18).png" alt="" />
</Frame>

## Usage in Workflows

After your user specifies their desired mapping in the Connect Portal, you can use their chosen values within workflow actions.

A Field Mapping contains 2 pieces of information:

* The selected Integration Object type (for example, a Salesforce Task).
* The field-level mappings between your Application Object and the selected Integration Object type (for example, Title ⇄ Salesforce Task Subject, Description ⇄ Salesforce Task Description.

You can use the **"Apply field mapping"** option to transform Application Objects (from App Events or Request triggers) to Integration objects and vice versa.

### Transforming from Application Object -> Integration Object

If you receive an Application Object in an App Event or Request payload, you can transform it into an Integration Object by selecting the **Field Mapping Object Type** in the "**Apply field mapping**" option for your App Event or Request trigger.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(18).png" alt="" />
</Frame>

Once set, you will see the trigger output data update to show two objects:

* `originalPayload`: This is the original App Event or Request payload received by the trigger.
* `mappedIntegrationObject`: This is the Integration Object that was mapped based on the Field Mapping configured in the Connect Portal.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(52).png" alt="" />
</Frame>

<Note>
  **Note:** The mapped Integration Object only applies to the **root** of the original payload. If your field exists within a nested JSON, it will not work as expected.
</Note>

In the Workflow Editor, the mapping is applied based on what is configured for the Test User. You can update the Mapping for the Test User by clicking the Preview button in the top right navigation from a workflow.

<Note>
  **Note for testing Request Triggers:**

  If you use a Request trigger, you will need to select "Detect parameters by sending a test request" for the option "How do you want to define test data for this step?"

  Click **Test Step** and send an example Request payload to the displayed URL to test the mapping from your Request payload to an Integration Object, using the mapping in the Connect Portal.
</Note>

### Transforming from Integration Object -> Application Object

When receiving an Integration Object in an Integration trigger (for example, a Salesforce "New Record" trigger), you can transform it into an Application Object using the Field Mapping specified by your user.

In the trigger settings for your workflow, select the **Field Mapping Object Type** in the "**Apply field mapping**" option.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(36).png" alt="" />
</Frame>

Once set, you will see the trigger output data update to show two objects:

* `originalPayload`: This is the original Integration Object received by the trigger.
* `mappedApplicationObject`: This is the Application Object that was mapped based on the field mapping configured in the Connect Portal.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(49).png" alt="" />
</Frame>


# Headless Connect Portal
Source: https://docs.useparagon.com/connect-portal/headless-connect-portal

Bring your existing components or design system into your Paragon integrations experience with the Headless Connect Portal.

If your app already uses a component library or design system, you may opt to use the Headless Connect Portal, which allows you to connect to your users' integration accounts with a custom user interface. The Headless Connect Portal provides a **fully managed authentication** so you don't need to worry about managing, storing, or refreshing your customers' credentials.

## Overview

The SDK includes 4 main functions that allow you to use the Headless Connect Portal:

* [`paragon.getIntegrationMetadata`](/apis/api-reference#.getintegrationmetadata): Returns display and branding information for integrations in your project, including a display name and icon.
* [`paragon.installIntegration`](/apis/api-reference#installintegration): Prompts the user for third-party authorization details to connect their account. This function should be used when a user expresses intent to install your integration, for example: from a "Connect" button in your integrations catalog.
* [`paragon.uninstallIntegration`](/apis/api-reference#.workflow): Disconnects the user's account.
* [`paragon.getUser`](/apis/api-reference#.getuser-paragonuser): Returns the current state of the user, with their integrations and account statuses.

## Demo

<Frame caption="A demo implementation of the Headless Connect Portal, using Material UI components and the Paragon SDK">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Kapture%202022-11-16%20at%2013.06.56.gif" alt="" />
</Frame>

This demo is created based on our tutorial to [build an in-app Integrations Catalog](/tutorials/building-an-in-app-integrations-catalog), adapted to use the Headless Connect Portal to show a custom UI to connect your users' integration accounts.

The repository with the completed code is available [here](https://github.com/useparagon/paragon-integrations-catalog-tutorial/tree/headless):

<Card
  title="GitHub - useparagon/paragon-integrations-catalog-tutorial at headless"
  icon="github"
  href="https://github.com/useparagon/paragon-integrations-catalog-tutorial/tree/headless
"
  horizontal
/>

## Usage

Before adding the Headless Connect Portal, you may want to start by following our tutorial to [build an in-app Integrations Catalog.](/tutorials/building-an-in-app-integrations-catalog) This will use some of the functions above to display a list of integrations and their account state.

Once you have a list of integrations displaying in your app, you can use this UI as a starting point for adding the Headless Connect Portal.

### Displaying Integration Metadata

<Frame caption="Displaying integration metadata in a Headless Connect Portal, with Material UI">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(58).png" alt="" />
</Frame>

To display an integration's metadata, use [`.getIntegrationMetadata`](/apis/api-reference#.getintegrationmetadata), passing the `integrationType` as the first argument. This will return an object with the matching integration's display metadata:

```js
{
    type: 'salesforce',
    name: 'Salesforce',
    brandColor: '#057ACF',
    icon: 'https://cdn.useparagon.com/2.35.0/dashboard/public/integrations/salesforce.svg'
}
```

You can use this to display info in your integration detail view component (in this example, a modal written with React and MUI):

```js
import {
  Dialog,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from "@mui/material";
import useParagonGlobal from "../hooks/useParagonGlobal";

function IntegrationDetailView({ integrationType, onClose }) {
  const paragon = useParagonGlobal();
  const integration = paragon && integrationType
    ? paragon.getIntegrationMetadata(integrationType)
    : { name: "", icon: "" };

  return (
    <Dialog open={integrationType !== null} onClose={onClose}>
      <DialogTitle>
        <img src={integration.icon} />
        {integration.name}
      </DialogTitle>
      <DialogContent>
        <DialogContentText>
          This is a description of the {integration.name} integration. You can
          customize this text is in your source code.
        </DialogContentText>
      </DialogContent>
    </Dialog>
  );
}
```

We recommend including:

* The integration icon image, as retrieved from the `.icon` property.
* The integration's name, as retrieved from the `.name` property.
* A short description of what functionality your integration provides. This description should vary for each integration and provide app-specific context.

### Connecting Accounts

<Frame caption="Adding a 'Connect' button to a Headless Connect Portal">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(66).png" alt="" />
</Frame>

To add a **Connect** button to the Headless Connect Portal and prompt the user to connect an integration account on click, use the `.installIntegration` function.

`.installIntegration` accepts the same `integrationType` argument, so we can pass this parameter through to this function:

```js
<Button onClick={() => paragon.installIntegration(integrationType)}>
  Connect
</Button>
```

Once this is added, your Integrations Catalog will show the integration authorization when the **Connect** button is clicked.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Kapture%202022-11-16%20at%2011.12.40.gif" alt="" />
</Frame>

<Note>
  **Note**: Integrations that require text-based credentials (i.e. not OAuth) *and* integrations that require some information prior to starting the OAuth flow will briefly show the Connect Portal.
</Note>

### Displaying Account State

<Frame caption="Displaying the Connect/Disconnect button dynamically based on account state">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(77).png" alt="" />
</Frame>

To add logic to your Headless Connect Portal to stay in sync with your user's account state, we can use `.getUser` and `.subscribe`.

`.getUser` returns an object with the user's account state:

```json
// Example return result from paragon.getUser()
{
    "authenticated": true,
    "userId": "user-id",
    "integrations": {
        "salesforce": {
            "enabled": false,
            "configuredWorkflows": {}
        },
        "slack": {
            "enabled": true,
            "configuredWorkflows": {},
            "credentialStatus": "VALID",
            "credentialId": "81af6717-9476-458d-8c29-f0aee7ce6d12",
            "providerId": "TM7FL705V",
            "providerData": {}
        },
        "hubspot": {
            "enabled": false,
            "configuredWorkflows": {}
        }
    },
    "meta": {}
}
```

We can use the result of this object to conditionally show a **Connect** or **Disconnect** button, depending on the value of `user.integrations[integrationType].enabled`.

```js
function ConnectButton({ integrationType }) {
  const paragon = useParagonGlobal();
  const { user } = useParagonAuth(paragon);

  if (!user?.authenticated || !integrationType) {
    return null;
  }
  if (!user.integrations[integrationType]?.enabled) {
    // User does not have integration enabled
    return (
      <Button
        variant="contained"
        onClick={() => paragon.installIntegration(integrationType)}
      >
        Connect
      </Button>
    );
  } else {
    // User has integration enabled
    return (
      <Button onClick={() => paragon.uninstallIntegration(integrationType)}>
        Disconnect
      </Button>
    );
  }
}
```

If you are already using the [`useParagonAuth` hook from the tutorial](/tutorials/building-an-in-app-integrations-catalog), the returned `user` object will automatically stay up-to-date by subscribing to `onInstallIntegration` and `onUninstallIntegration` events from the SDK, as shown below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Kapture%202022-11-16%20at%2013.06.56.gif" alt="" />
</Frame>

If you are not using the `useParagonAuth` hook and are unable to, you can call `paragon.subscribe` on your own to receive updates, as demonstrated below:

```js
// Adapted from useParagonAuth.ts
function MyComponent() {
  const [user, setUser] = useState<AuthenticatedConnectUser | undefined>();

  // Listen for account state changes
  useEffect(() => {
    const listener = () => {
      if (paragon) {
        const authedUser = paragon.getUser();
        if (authedUser.authenticated) {
          setUser({ ...authedUser });
        }
      }
    };
    listener();
    paragon?.subscribe("onIntegrationInstall", listener);
    paragon?.subscribe("onIntegrationUninstall", listener);
    return () => {
      paragon?.unsubscribe("onIntegrationInstall", listener);
      paragon?.unsubscribe("onIntegrationUninstall", listener);
    };
  }, [paragon]);
}
```

### Workflows and User Settings

At this time, the Headless Connect Portal does not include SDK functions for displaying workflows and user settings.

However, it is possible to use the API to:

* Get workflows associated with an integration, including their titles and descriptions
* Get integration-specific options for User Settings (like a user's Salesforce Record Types) directly from the integration provider's API
* Update User Settings and workflow state


# Workflow Permissions
Source: https://docs.useparagon.com/connect-portal/workflow-permissions

Restrict the visibility of workflows to specific users or groups with Workflow Permissions.

You can restrict the visibility of workflows to specific users or groups with Workflow Permissions.

Workflow Permissions can be defined for any workflow as a set of conditions that a user's [metadata](../apis/users#associate-connected-user-with-metadata) must match in order for the workflow to appear in their Connect Portal.

For example, you can use Workflow Permissions to:

* Limit the availability of workflows to users on specific pricing plans
* Build a bespoke workflow for a specific user
* Roll out a new workflow to a group of users, under a feature flag

<Info>
  Workflow Permissions is available on our **Enterprise plan** and above. Please [contact us](mailto:sales@useparagon.com) to enable this option in your account.
</Info>

## Using Workflow Permissions

Workflow Permissions are available in the options for any Workflow on the [Customize Connect Portal](./connect-portal-customization) page. Navigate to **Configuration > Workflows**, and choose any workflow to set Workflow Permissions.

To set Workflow Permissions, click **Update** and create conditions for the user's metadata object.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Paragon]%202023-02-22%20at%2003.04.45%20PM.png" alt="" />
</Frame>

The fields shown in the field selection menu are based on the [User Metadata](../apis/users#associate-connected-user-with-metadata) for the Test User, which you can update by clicking "Set User Metadata" at the bottom of the menu.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(35).png" alt="" />
</Frame>

Finally, click **Save** to update the permissions for this workflow.

<Note>
  **Note:** If the workflow has already been enabled for existing users prior to this change, it will automatically be disabled if their metadata does not match the saved permissions.
</Note>

## How Workflow Permissions are applied

If a Connected User does not satisfy the Workflow Permissions with the [User Metadata](/apis/users#associate-connected-user-with-metadata) associated with them, the workflow:

* Will not appear in the Connect Portal for this user
* Cannot be enabled for this user using the [Users API](/apis/users), [Connected Users Dashboard](/monitoring/users), or [by default](./displaying-workflows#default-to-enabled)
* Cannot be triggered or executed for this user

Workflow Permissions are re-evaluated whenever the conditions change for the workflow *or* when the metadata for the user has changed.


# Custom Dropdowns
Source: https://docs.useparagon.com/connect-portal/workflow-user-settings/custom-dropdowns

Provide your users with dropdown options from your application.

### Overview

Custom Dropdowns allow you to include custom dropdown inputs in the Connect Portal as a part of the User Settings of your integration.

You can use Custom Dropdowns to allow your users to select:

* Data from your app, like a destination Project to sync Jira tickets into
* A type of User Setting that Paragon does not support natively, like a custom Salesforce enum.

### Usage

To get started with Custom Dropdowns, visit your User Settings and add a new type of **Custom Dropdown:**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Customize%20Connect%20Portal%20-%20User%20config%20-%20Edit%20field.png" />
</Frame>

Set a key name to refer to the dropdown when populating its available options.

After setting a key name, an example of the code you need to call from your application to populate the dropdown will appear in the dashboard:

```js
paragon.connect("jira", {
  dropdowns: {
    team: [
      { label: "Team 1", value: "team-1" },
      { label: "Team 2", value: "team-2" },
    ],
  },
});
```

Update your `paragon.connect` call to include the `dropdowns` parameter, which has the key names that you set above. This key can be set to an array of options with two keys:

* `label` — The displayed text shown to the user for the dropdown option.
* `value` — The value that will be saved (e.g. an option ID) when the user selects this dropdown option.
  * This value must be unique across all options in the array. If the value is found to be non-unique, the non-unique option will not be displayed in the list, and a console warning will appear.
  * If either `label` or `value` are missing, the option will not be displayed, and a console warning will appear.

When reading the selection for this User Setting from the SDK or the Workflow Editor, the value will be set to the `value` property of the chosen option (or undefined if unselected).

### Loading a large number of options

If your dropdown data is a large data set, consider defining pagination and search instead of passing a static list.

Here is an example of a `loadOptions` function to paginate over a user's Google Drive folders:

```javascript JavaScript
paragon.connect("googledrive", {
  dropdowns: {
    drivefolder: {
      loadOptions: async (cursor, search) => {
        try {
          const encodedQuery = encodeURIComponent(
            `mimeType='application/vnd.google-apps.folder'${
              search ? ` and name contains '${search}'` : ""
            }`
          );
          const foldersUrl = `https://www.googleapis.com/drive/v3/files?q=${encodedQuery}&fields=nextPageToken,files(id,name)&supportsAllDrives=true&includeItemsFromAllDrives=true&pageSize=50${
            cursor ? `&pageToken=${cursor}` : ""
          }`;

          const foldersResponse = await paragon.request("googledrive", foldersUrl, { method: "GET" });

          const folders = foldersResponse.files.map((folder) => ({
            label: folder.name,
            value: folder.id,
          }));

          return {
            options: folders,
            nextPageCursor: foldersResponse.nextPageToken,
          };
        } catch (err) {
          console.error("Error fetching Drive options", err);
        }
      },
    },
  },
});
```

When you provide an object that includes the `loadOptions` function instead of a static list, the dropdown will paginate through options as the user scrolls and allow for remote search across all available data.

`loadOptions` will be called with 2 arguments:

* `cursor`: The last cursor to be called by the dropdown. If loading for the first time, this value will be undefined.
* `search`: The search term that the user typed into the dropdown. If no search term was provided, this value will be undefined or the empty string (`""`).


# User Settings
Source: https://docs.useparagon.com/connect-portal/workflow-user-settings/workflow-user-settings

Provide settings in the Connect Portal to allow your users to configure their integration and workflows.

**User Settings** provide options for your users to configure settings for their integration in the Connect Portal. This makes it easy for you to create integrations that work with custom objects or fields that may be specific to your users' third-party app accounts.

For example, common use cases include:

* **Slack** - choosing which channel that messages should be sent in
* **Salesforce** - choosing a custom opportunity stage that new opportunities created in
* **Hubspot** - choosing a custom lead status that new leads should be created with
* **Jira** - choosing which Jira user that new issues should be assigned to

User Settings can be defined globally at the integration level or locally at the workflow level.

* If they are included at the integration level, the User Settings can be referenced from any workflow for that integration.
* If they are included at the workflow level, the User Settings will appear when that workflow is enabled by your user and can only be referenced from the workflow it belongs to.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Paragon%20Connect%20Portal.png)
</Frame>

## Adding User Settings

To add User Settings at the integration level:

1. Click **Customize Connect Portal** in any integration's Overview page to open the Connect Portal Editor.
2. Click the **Configuration** tab in the sidebar.
3. Under **Settings** in the sidebar, click **+ Add Setting.**
4. Enter options for Name, Field Type, Tooltip, and whether or not the field should be required for your user to enable the integration.

To add User Settings at the workflow level:

1. Click **Customize Connect Portal** in any integration's Overview page to open the Connect Portal Editor.
2. Click the **Configuration** tab in the sidebar.
3. Click on the workflow you'd like to add User Settings to.
4. Under **User Settings** in the sidebar, click **+ Add Setting.**
5. Enter options for Name, Field Type, Tooltip, and whether or not the field should be required for your user to enable the integration.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Image%202021-02-16%20at%2011.18.58%20AM.png)
</Frame>

## Referencing User Settings in the Workflow Editor

Actions in Paragon will indicate when they accept User Settings as an input parameter. In these cases, you should first add the respective User Settings in the Connect Portal Editor, then use the **variable menu** to reference that User Setting in the Action sidebar.

<Info>
  Enter two left curly braces `{{` to open the **dynamic** **variable menu.**
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Recording%202021-02-16%20at%2011.26.38%20AM.gif)
</Frame>

## Testing User Settings

To test your Workflow User Settings, open the click the **Preview** button in the top-right of the navigation bar. This launches a live preview where you can test the end-user experience of your Connect Portal.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Image%202021-02-16%20at%2012.55.55%20PM%20\(1\).png)
</Frame>

### Connecting a test account

By clicking **Connect** in the Connect Portal Preview, you can connect a test account for that integration and configure any of its Workflow User Settings for that test account.

### **Testing workflows with user settings**

Once you've enabled an integration in the Connect Portal Preview, you can test its workflows using the **Test Workflow** or **Test Step** button in the Workflow Editor. This will test the workflow on the account that you connected in the Connect Portal Preview, and any User Settings you configured in the Connect Portal Preview will be used as test data.


# Hosted Demo Environment
Source: https://docs.useparagon.com/demo

Start testing your Paragon integrations without embedding our SDK

## Overview

Paragon’s [Demo Environment](https://demo.useparagon.com/demo) is designed to serve as an example implementation of a website with the Paragon SDK embedded in it.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Paragons%20Hosted%20Demo%20Enviornment%20for%20Paragon%20Connect.png" alt="" />
</Frame>

This allows you to test your workflow logic in a production-like environment without adding more code to your application today.

<Card title="Paragon - Demo Mode" icon="laptop" href="https://demo.useparagon.com/demo" horizontal />

<Accordion title="Testing an On-Premise Instance?">
  Use the Paragon Hosted Demo Environment to test integration logic for on-premise instances by adding the host query parameter with your instance URL:

  `https://demo.useparagon.com/demo?host=``{your_instance_url}`

  Example:

  `https://demo.useparagon.com/demo?host=https://integrations.tasklab.com`
</Accordion>

## Getting Started

To get started:

1. Click “**Open Configuration**”

2. Input your Paragon Project ID. Your Project ID can be found in the URL of your Paragon Dashboard.

3. Input a Signing Key. You can create a Signing Key if you don’t already have one by going to Settings > SDK Setup and select “**Generate a New Signing Key**”.

4. Input a User ID. This is an example id based on a user / company in your application.

Your account will then be connected to the demo and you will be able to view any integrations marked “`Active`” in your Paragon Dashboard.

You can quickly [send data](/workflows/triggers) to Paragon through your browser’s console to test the functionality of sending it from your application. Using [Task History](https://docs.useparagon.com/workflows/viewing-task-history), you can verify that your workflows were successfully triggered.

## Testing Workflows

Once you've connected to an integration, you can test any of the workflows for the integration.

### Via SDK

1. In your browser, right-click anywhere on the page and select “**Inspect**” to open the Developer Console.

2. Within the Developer Console, click on the **Console** tab to access the JavaScript console.

3. Copy the SDK call that triggers the desired workflow and paste it into the Console. [View triggers](/workflows/triggers).

4. Press `Enter` to send the SDK call and trigger the workflow.

### Via REST API

1. Navigate to a website or application you can use to test API requests, like Postman.

2. Copy the REST API call that triggers the desired workflow and paste it into the URL input. [View triggers](/workflows/triggers).

3. Use [Paragon's JWT Generator](https://jwt.useparagon.com/) to generate a JWT for the example user / company ID you provided earlier.

4. Under **Authentication**, select **Bearer Token** and paste the created JWT.

5. Press `Send` to send the REST API call and trigger the workflow.

## Validating Executions

After triggering a workflow, you can view your workflow execution in [Task History](/monitoring/viewing-task-history).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Viewing%20Task%20History%20in%20Paragon%20Connect.png" alt="" />
</Frame>


# Working with Multiple Projects
Source: https://docs.useparagon.com/deploying-integrations/projects

Create unique spaces for different teams to collaborate.

## Overview

Create projects in your Organization. This is great for creating unique spaces for different environments, such as production, staging, and development. Each one has its own workflows and authentication methods so you can test out new changes before going live to your customers.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Projects%20in%20Paragon%20Connect.png" alt="" />
</Frame>

<Info>
  **Looking for **`read-only`** Projects?**

  [Release Environments](/deploying-integrations/release-environments) provides access to `staging` and `production` projects that are `read-only`, allowing you to safely test and deploy changes across your development pipeline.
</Info>

## Creating Projects

To create a new project:

1. Click the Project dropdown in the top-left corner.

2. Click "**+ Create**"

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20Projects%20in%20Paragon%20Connect.png" alt="" />
</Frame>

## Managing Projects

To view and manage projects:

1. Click the Project dropdown in the top-left corner.

2. Click "**Manage projects**".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Managing%20Projects%20in%20Paragon%20Connect.gif" alt="" />
</Frame>

## Deleting Projects

To delete a project:

1. Click the Project dropdown in the top-left corner.

2. Under **Development Projects**, select the triple-dot menu for the Project you want to delete.

3. Click "**Delete project**".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Deleting%20Projects%20in%20Paragon%20Connect.png" alt="" />
</Frame>

## Copying Workflows

You can copy workflows between projects by clicking the settings menu inside the Workflow Editor, then selecting **Copy from Project**. When copying from another workflow, your current workflow state will be saved in Version History.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Copying%20workflows%20from%20other%20projects%20in%20Paragon%20Connect.gif)
</Frame>


# Release Environments
Source: https://docs.useparagon.com/deploying-integrations/release-environments

Use Release Environments to test and deploy new integrations and integration updates.

**Release Environments** are environments that your team can use to control the development lifecycle of integrations:

* **Development:** Make updates to your integrations and workflows in a development project that can be modified by any member of your team.
* **Staging:** Preview and test integrations in a read-only environment before deploying to Production.
* **Production**: Deploy integrations and updates to live users.

Each Release Environment is a separate project, with separate IDs, [Signing Keys](/getting-started/installing-the-connect-sdk#setup-with-your-own-authentication-backend), [Environment Secrets](/workflows/environment-secrets), and [Connected Users](/monitoring/users).

<Warning>
  **Note:** Release environments share the same underlying resources, such as servers and databases. Resource-intensive actions—like running heavy workflows or load testing—can impact the performance of other environments.
</Warning>

<Accordion title="Have an existing account without Release Environments?">
  If your account does not already have Release Environments enabled, follow the steps below to enable the feature.

  * **Note**: You can only set up one set of Release Environments (Development, Staging, Production) for your account. **Your selection is final and cannot be reversed.**

  1. Start by navigating to your Paragon dashboard. At the end of your Integrations list, you will see a prompt to enable Release Environments. Click **Get started**.
     <Frame>
       ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Release%20Environments%20upgrade%20prompt.png)
     </Frame>
  2. You will be prompted to select the project that represents your Production Environment.

     <Frame>
       <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Release%20Onboarding.png" alt="" />
     </Frame>

     **Once you make this selection:**

     1. **The selected project will become read-only** (meaning that Integrations, Workflows, and App Events cannot be modified directly). To update a Production Environment, you will need to create a Versioned Release.

     2. **Development and Staging environments will be automatically created**. If you have existing projects used for Staging or Development, these projects will still be available and unchanged, but they will not participate in the release pipeline.
</Accordion>

## Usage

With Release Environments, your team's integration development will start in the Development environment. Workflows and integrations in the Development environment can be added and modified directly.

Once your team is ready to start testing the changes made in Development, you can create a Release from **Development -> Staging** to validate your changes. Staging can be used for code review and QA, prior to releasing changes to users in your Production environment.

Finally, once your changes have been finalized in the Staging environment, you can create a Release from **Staging -> Production** to deploy your changes to live users.

<Info>
  **Working with a large team?**

  Multiple team members can work together in the Development environment, or they can opt to create an isolated [Development Project](/deploying-integrations/projects) to start working on new changes.

  Development Projects cannot be involved in the Releases pipeline, but you can use our [Copying Workflows](/deploying-integrations/projects#copying-workflows) feature to replicate changes from Development Projects into Development.
</Info>

## Creating a Release

To start a new Release, you can click the Environment Selection menu in the top navigation bar and click **Deploy** on the environment you want to promote.

<Info>
  When hovering over the **Deploy** button, a path will appear between the Release Environments that you are deploying to and from.
</Info>

<Frame>
  <iframe src="https://share.descript.com/embed/IY6Zaq25Y6K" width="640" height="360" frameborder="0" allowfullscreen />
</Frame>

Creating a Release brings you to an undeployed Release Preview. An undeployed Release will show the following banner:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(87).png" alt="" />
</Frame>

In a Release Preview, you will see two columns:

* **Change Summary:** A summary of changes made to Integrations, Workflows, and App Events since the last deploy that occurred. Each change will have a type: Add, Modify, or Remove.
* **Messages:** Warning and informational messages about potential issues with or effects of the Release.

  * For example, if there are new [Environment Secrets](/workflows/environment-secrets) being used in the downstream environment (Development) that are not present in the upstream environment (Staging), a prompt will appear to provide a value for the new Environment Secret.
  * Learn more about Messages in [Reviewing Messages](/deploying-integrations/release-environments#reviewing-messages).

Your engineering team can use the Release Preview screen to verify the changes that will be deployed to the next stage of your development pipeline.

If there are unexpected changes present in the Release Preview, you can make changes in the downstream project to prevent unintended updates.

### Reviewing Messages

Messages appear when Paragon detects potential issues or side effects of deploying the set of changes associated with a Release.

Documentation for each type of Message can be found below:

* **indicates an Error Message**. Error Messages appear *after* a Release has been deployed, if any unexpected failures occurred during the deployment.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Error%20(1).png" alt="" />
  </Frame>

* **indicates a Warning Message**, which requires action to resolve prior to deploying a Release. If Warning Messages are not addressed, integrations may not work as expected.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Warn.png" alt="1" />
  </Frame>

* **indicates an Informational Message**, which informs you of any changes that have occurred that will affect existing users of your integration.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Info@3x.png" alt="2" />
  </Frame>

<AccordionGroup>
  <Accordion title="New Integration Requires Additional App Configuration" icon="exclamation">
    This warning appears when you have added a new integration that uses OAuth to authenticate users.

    You can resolve this warning by providing the App Configuration that is required to deploy this integration to users, such as a **Client ID and Client Secret** (required configuration will vary by integration).
  </Accordion>

  <Accordion title="Environment Secret Missing" icon="exclamation">
    This warning appears when the Release Environment you are deploying to is missing an Environment Secret that is used in the downstream environment.

    You can resolve this warning by providing a value for the Environment Secret as it should be saved in the upstream environment.
  </Accordion>

  <Accordion title="App Event Schema Changed" icon="info">
    This message appears when you have modified the schema of your App Event.

    When modifying the schema of an App Event, you will need to update references to this event in your application source code to use the new event schema.
  </Accordion>

  <Accordion title="App Event Removed" icon="info">
    This message appears when you have removed an App Event.

    You will need to remove references to this event in your application source code. If an invalid App Event name is sent to the API, an error response will be sent back.
  </Accordion>

  <Accordion title="OAuth App Scopes Changed" icon="info">
    *Note: This Release Message is currently in beta.*

    This message appears when the Release includes changes to the scopes requested by the OAuth App for a particular integration.

    If any workflows use logic that requires the new scopes, you will need to prompt current integration users to re-authorize their account (disconnect the integration from the Connect Portal and reconnect an account).

    This message allows you to view and export Affected Users for this change.
  </Accordion>

  <Accordion title="Integration Removed" icon="info">
    This message appears when you have removed an Integration.

    When an Integration is removed, all connected accounts and workflows associated with this integration will be deleted.
  </Accordion>

  <Accordion title="Integration Disabled" icon="info">
    This message appears when you have disabled an Integration in a downstream environment.

    When an Integration is disabled, all connected accounts and workflows associated with this integration will be paused until the integration is re-enabled.
  </Accordion>

  <Accordion title="Required User Setting Added" icon="info">
    This message appears when you have added a [User Setting](/connect-portal/workflow-user-settings) that is marked as required in the Connect Portal options for an integration.

    If any workflows rely on this User Setting, you will need to prompt current integration users to revisit the Connect Portal to set a value for the new required User Setting.

    This message allows you to view and export Affected Users for this change.
  </Accordion>

  <Accordion title="Workflow Enabled by Default" icon="info">
    This message appears when you have added or modified a Workflow to be [enabled by default](/connect-portal/displaying-workflows#default-to-enabled).

    When this Release is deployed, Paragon will attempt to enable the default-enabled workflow for all Connected Users of the associated integration.

    This message allows you to view and export Affected Users for this change.
  </Accordion>

  <Accordion title="Workflow Changed Trigger Type" icon="info">
    This message appears when you have changed the Trigger type for a Workflow.

    When this Release is deployed, Paragon will attempt to create the trigger on behalf of all Connected Users that have enabled this Workflow. For example, if the Trigger has changed from a Request Trigger to a Record Created Trigger, Paragon will need to create a new webhook for your Connected Users to enable the workflow.

    This message allows you to view and export Affected Users for this change.
  </Accordion>
</AccordionGroup>

## Deploying a Release

When you are ready to deploy a Release, click **Deploy** in the Release Preview screen. A prompt will appear to specify:

* **Version Number**: Using semantic versioning, provide a version number to represent this Release. The new version number must be higher than the currently deployed version number.
* **Description**: Describe the Release with a message summarizing changes, for internal reference.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(88).png" alt="" />
</Frame>

Click **Deploy** in the Release confirmation dialog to start the deployment process. The deployment process may take several minutes to complete, depending on the size of the changes.

Once the deployment has completed, the Release screen will update with the **Live** tag, and the version number will update in the Manage Projects screen.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Live%20Release.png" alt="" />
</Frame>

## Viewing Release History

You can review past Releases in the Staging and Production environments, by clicking the Releases tab in the left sidebar.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Release%20History.png" alt="" />
</Frame>

Click into any row in the Releases table to view the Release Summary screen, which provides the Change Summary and Messages that were associated with that Release.


# Start a Free Trial
Source: https://docs.useparagon.com/external-link-0





# Quickstart Sample App
Source: https://docs.useparagon.com/external-link-1





# 2-Minute Product Tour
Source: https://docs.useparagon.com/external-link-2





# Workflow Templates
Source: https://docs.useparagon.com/external-link-4





# Adding Integrations
Source: https://docs.useparagon.com/getting-started/adding-an-integration



### Choose an Integration

In your Paragon Connect dashboard, click on **Catalog** in the sidebar menu and select the integration provider you want to add.

To add an integration to your dashboard, select the integration and click **"Connect"**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20an%20Integration%20from%20the%20Integration%20Catalog%20in%20Paragon%20Connect.png" alt="" />
</Frame>

### Create a developer app

Once you add an integration from our [Integration Catalog](/resources/integrations), you'll need to register a developer app with the integration provider.

When you create your developer app, you'll receive app credentials - usually a Client ID and Secret - that you'll enter in your Paragon dashboard in the next step.

You'll need to specify a redirect URL (sometimes called "callback URL") when configuring your developer app for an integration provider. Here, you should provide Paragon's redirect URL:

```js
https://passport.useparagon.com/oauth
```

<Note>
  You can find provider-specific instructions for setting up a developer app and connecting it to Paragon in the [Integration Providers section](/resources/integrations) of our docs.
</Note>

### Connect your developer app to Paragon

Open your integration from the Paragon dashboard.

Under App Configuration, click **Configure** to add your own OAuth app credentials. *If you don't see this section, this integration may not support OAuth, and you can skip this step.*

Next, enter your OAuth app credentials - usually a Client ID and Secret.

<Note>
  You can add an integration using Paragon's development keys by leaving the app credentials blank. This should only be used for testing, and you should add your own app credentials for use in production.
</Note>

Once you've added your OAuth app credentials, press the "Save Changes" button to save your updates.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Paragon]%202025-02-18%20at%2007.58.47%20AM@2x.png" alt="" />
</Frame>

### Configure Permissions

Once you add integration credentials, you can define which permission scopes will be requested from your users under Integration Settings. You'll usually need to make sure the same scopes are defined when configuring your developer app from the third-party app provider.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Paragon]%202025-02-18%20at%2008.00.01%20AM@2x.png" alt="" />
</Frame>


# Displaying the Connect Portal
Source: https://docs.useparagon.com/getting-started/displaying-the-connect-portal

Connect to your users' app accounts with the Connect Portal

Once an integration has been added to the Paragon dashboard, you can now display the Connect Portal for that integration in your application. The **Connect Portal** is a component that your users interact with to connect their third-party app accounts to your application. The Connect Portal provides a **fully managed authentication** so you don't need to worry about managing, storing, or refreshing your customers' credentials.

## Activating the Integration

You'll need to mark your integration as **Active** for it to display to your end users.

To do this, click the "Inactive" button in the top-right corner and press "Activate".

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Paragon]%202025-02-18%20at%2008.00.45%20AM.gif" alt="" />
</Frame>

## Displaying the Connect Portal in your app

[`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string) should be called at the beginning of your application's lifecycle in all cases. This is to make sure that the `userToken` is always as fresh as possible, with respect to your user's existing session on your own site. You may reference [Installing the Connect SDK](/getting-started/installing-the-connect-sdk#setup) for a detailed explanation on how to use [`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string).

**Example:**

```js
await paragon.authenticate(
	// Your Paragon Project ID
	"38b1f170-0c43-4eae-9a04-ab85325d99f7",

	// See Setup for how to encode your user token
	"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.ey..."
);
```

<Accordion title="How do I find my Project ID?">
  You can copy your Project ID by clicking Copy Project ID under the Environment switcher:

  <Frame>
    ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/\[Paragon]%202025-02-17%20at%2010.49.44%20PM.gif)
  </Frame>
</Accordion>

Once [`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string) has been called and the Promise it returns has resolved, you can call [`.connect`](/apis/api-reference#connect-integrationtype-string) to launch your Connect Portal for a specific integration provider. You can find the `integrationType` identifier you need in the Overview page for the integration.

**Example:**

```js
paragon.connect("salesforce");
```

You *must* have an integration configured of this `integrationType` for the Portal to appear. Otherwise, this function does nothing.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/The%20Connect%20Portal%20in%20Paragon%20Connect.png" alt="" />
</Frame>

## Authenticating an Account

Your users can connect their third-party app account in the Connect Portal by clicking **"Connect"**. Paragon natively supports all sorts of authentication types, like OAuth 2.0 and API Keys.

<Frame caption="An OAuth 2.0 Integration">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Handling%20OAuth%202.0%20in%20the%20Connect%20Portal%20in%20Paragon%20Connect.png" alt="" />
</Frame>

<Frame caption="An API Key Integration">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Handling%20API%20Keys%20in%20the%20Connect%20Portal%20in%20Paragon%20Connect.png" alt="" />
</Frame>

Once your user connects their third-party app account in the Connect Portal, you can access their app account by creating [Workflows](/workflows/building-workflows) or via the [Paragon API](/apis/making-api-requests). You can always call [`.getUser`](/apis/api-reference#getuser-paragonuser) to retrieve the currently authenticated user and their connected integration state.


# Installing the SDK
Source: https://docs.useparagon.com/getting-started/installing-the-connect-sdk

The Paragon SDK can be imported in your front-end JavaScript to embed the Connect Portal and trigger workflows in your application.

## Installing from npm

You can install the Paragon SDK with npm:

```bash
npm install @useparagon/connect
```

The SDK can be imported in your client-side JavaScript files as a module:

```js
import { paragon } from '@useparagon/connect';
```

**For** [on-premise](https://github.com/useparagon/docs-gitbook/blob/main/getting-started/broken-reference/README.md)**/single-tenant users:**

If you are using an on-prem/single-tenant instance of Paragon, you can call the `.configureGlobal` function to point the SDK to use the base hostname of your Paragon instance.

```js
import { paragon } from '@useparagon/connect';

// If your login URL is https://dashboard.mycompany.paragon.so:
paragon.configureGlobal({
    host: "mycompany.paragon.so"
});
```

<Accordion title="Migrating from the <script> tag?">
  If you are migrating from using the \<script> tag to the npm package, please note that `paragon` is no longer exposed as a global or on the `window` object by default.

  Any references to `paragon` or `window.paragon` must be updated to point to the package import:

  ```js
  + import { paragon } from '@useparagon/connect';

  - window.paragon.authenticate(...);
  + paragon.authenticate(...);
  ```
</Accordion>

## Setup

Before using the Paragon SDK, you'll need to set up your application to verify the identity of your users to the SDK.

Paragon verifies the identity of your users using the authentication system *you're already using,* including managed services like Firebase or Auth0. Some backend code may be required if your application implements its own sign-in and registration.

### Generating tokens with your backend

If your backend server will generate JWTs for Paragon, you'll first need to complete the following steps:

#### 1. Generate a Paragon Signing Key

To generate a Signing Key, go to **Settings > SDK Setup** in your Paragon dashboard. You should store this key in an environment secrets file. For security reasons, we don’t store your Private Key and cannot show it to you again, so we recommend you download the key and store it someplace secure.

A unique Signing Key is generated for each environment. To learn more about the environments supported by Paragon, visit our [Releases](/deploying-integrations/release-environments) documentation.

<Note>
  **Note**: Signing keys never expire. However, generating a new signing key for the same environment will automatically invalidate the previous one.
</Note>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20an%20authentication%20method%20in%20Paragon%20Connect.png" alt="" />
</Frame>

#### 2. Generate a Paragon User Token

Next, you'll need to generate a Paragon User Token for each of your authenticated users. To do this, you'll need a library in your target language to sign JWTs with RS256. You can find one in your language at [https://jwt.io/](https://jwt.io/).

If your application is a fully client-rendered single-page app, you may have to create and use an additional API endpoint to retrieve a signed JWT (or reuse an existing endpoint that handles authentication or user info).

The signed JWT/Paragon User Token minimally must include the `sub`, `iat`, and `exp` claims:

```js JavaScript
{
	// Uniquely identifying key for a user or their company
	"sub": "the-user/company-id",

	// Issue timestamp, should be the current time
	"iat": 1608600116

	// Expiry timestamp for token, such as 1 hour from time of signature (iat)
	"exp": 1608603716
}
```

<Info>
  **Just for testing: Generating one-off JWTs**

  Use the [Paragon JWT Generator](https://jwt.useparagon.com/) to generate test JWTs for your development purposes. In production, static tokens should never be used.
</Info>

#### **3. Call paragon.authenticate()**

You'll call `paragon.authenticate` in your view with a JWT signed by your backend using the library chosen in Step 2. **This JWT is the Paragon User Token.**

<Accordion title="How do I find my Project ID?">
  You can copy your Project ID by clicking Copy Project ID under the Environment switcher:

  <Frame>
    ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/\[Paragon]%202025-02-17%20at%2010.49.44%20PM.gif)
  </Frame>
</Accordion>

```js
await paragon.authenticate(
	// Your Paragon Project ID
	"38b1f170-0c43-4eae-9a04-ab85325d99f7",

	// See Setup for how to encode your user token
	"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.ey..."
);
```

The `paragon.authenticate` function is Promiseable and resolves when the SDK has successfully authenticated your user. Note that other functions, like `paragon.connect`, may not work as expected until this Promise has resolved.

**Example Implementation:** A Node.js and Express app using Handlebars view templating

1. Adding middleware to sign the JWT and include it in the response context

   ```js
   // server.js - Adding middleware to sign an authenticated user's token
   const jwt = require('jsonwebtoken');

   app.use((req, res, next) => {
     if (!req.user) {
       return next();
     }
     // JWT NumericDates specified in seconds:
     const currentTime = Math.floor(Date.now() / 1000);
     res.locals({
       paragonToken: jwt.sign(
         {
           sub: req.user.id,  // Your user's or their company's ID
           iat: currentTime,
           exp: currentTime + (60 * 60), // 1 hour from now
         },
         process.env.PARAGON_SIGNING_KEY,
         {
           algorithm: "RS256",
         }
       ),
     });
     next();
   });
   ```

2. Use the `paragonJwt` set in context within the view template, with a call to `paragon.authenticate`:

   ```js
   // layout.hbs - Include paragon.authenticate call in the view template
   <body>
   	<script type="text/javascript">
   	  paragon.authenticate("project-id", "{{ paragonToken }}").then(() => {
   		  // paragon.getUser() will now return the authenticated user
   		});
   	</script>
   </body>
   ```

### Using a managed authentication service

If you already use an authentication service like Auth0, Firebase, or a JWKS-compatible authentication server, you can set up your Paragon project to use tokens generated by that service by navigating to **Settings > SDK Setup** and selecting a provider.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20an%20authentication%20method%20in%20Paragon%20Connect.png" alt="" />
</Frame>

Since Paragon uses a JSON Web Token (JWT) to encode and validate user identity, many managed services will already have a token that you can pass directly to Paragon.

<Tabs>
  <Tab title="Auth0">
    You'll need to provide Paragon with your **Auth0 Tenant Domain**, which ends with `.auth0.com`. Example: `https://<YOUR_TENANT>.auth0.com`.

    If you have a domain alias for your tenant domain, use the domain alias instead.

    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20Auth0%20Authentication%20to%20Paragon%20Connect.png)
    </Frame>

    The Auth0 ID token can be used directly as the Paragon User Token.

    Auth0 provides [comprehensive docs](https://auth0.com/docs/tokens/id-tokens/get-id-tokens) on retrieving the ID token in various contexts. An example of this, using their [single page app SDK](https://auth0.com/docs/libraries/auth0-single-page-app-sdk#get-id-token-claims):

    ```js
    auth0.getIdTokenClaims().then((claims) => {
      await paragon.authenticate("project-id", claims.__raw);
    });
    ```
  </Tab>

  <Tab title="Firebase">
    You'll need to provide Paragon with your **Firebase Project ID**, which you can find in the Firebase Console.

    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20Firebase%20Authentication%20to%20Paragon%20Connect.png)
    </Frame>

    The Firebase ID token can be used directly as the Paragon User Token.

    You can get a Firebase ID token from the [JavaScript client-](https://firebase.google.com/docs/auth/admin/verify-id-tokens#web)side library with:

    ```js
    firebase.auth().currentUser.getIdToken(true).then(async function(idToken) {
      await paragon.authenticate("project-id", idToken);
    })
    ```
  </Tab>

  <Tab title="JWKS Endpoint">
    You'll need to provide Paragon with your **JWKS Endpoint**, which can be found in your identity provider's documentation.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20JWKS%20Endpoint%20Authentication%20to%20Paragon%20Connect.png" alt="" />
    </Frame>

    This endpoint will generally have a URL like:

    ```js
    https://auth-server-example.com/.well-known/jwks.json
    ```

    ### Example: Clerk

    To set up Clerk as an authentication provider:

    1. Create a blank [JWT Template](https://clerk.com/docs/backend-requests/making/jwt-templates) in the Clerk dashboard.

    2. Set the Token Lifetime to at least 1 hour (3600 seconds). You will need to call `paragon.authenticate()` with a valid token at least once per period of your token's lifetime.

    3. Copy the JWKS Endpoint and add it to the Paragon dashboard.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Dashboard%20%20Clerk.com]%202025-03-06%20at%2003.44.10%20PM@2x.png" alt="" />
    </Frame>

    4. Call `getToken()` with your template name and pass it to the `paragon.authenticate` method:

    ```js
    const token = await window.Clerk.session.getToken({
        template: "Paragon",
        skipCache: true
    });

    await paragon.authenticate("[Project ID]", token);
    ```
  </Tab>
</Tabs>


# Introduction
Source: https://docs.useparagon.com/getting-started/introduction

Go from 0 to 1 by building and connecting to your first integration on Paragon

### What you'll build

In this guide, we'll walk you through installing the Paragon SDK, setting up your first integration, and authenticating your first Connected User.

This guide will show you how to:

1. Add Paragon to your application
2. Create a new Integration
3. Authenticate a user's app account
4. Access the user's app account via the Paragon API

### Before getting started

To get the most out of this guide, you'll need:

* A [Paragon](https://app.useparagon.com/signup) account.
* A developer app from a third-party app that Paragon supports. Reach out if you need help setting up a developer app for development.


# Managing Account Settings
Source: https://docs.useparagon.com/managing-account/account-settings

Update your Account Settings, like email, password, and MFA options.

When logged into the dashboard, you can manage your Account Settings by clicking "Settings" in the sidebar.

<Frame>![Account Settings](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/account-settings.png)</Frame>

You can update the following account details:

* **Name**: Your name, as it appears to other members of your team in [Team Members](/managing-account/teams), [Workflow Version History](/workflows/version-history), or [Releases](/deploying-integrations/release-environments).
* **Email**: The email address you use to log in to your account.
* **Two-Step Verification**: [Setup an authenticator app](#adding-two-step-verification) to add an extra layer of security to your account.
* **Organization Name**: The name of your organization, as it appears in the header of your dashboard.
* **Organization Website**: The website of your organization (optional and not used for login).

## Changing your password

To change or reset your password, visit the Paragon dashboard and click "**Forgot password?"** under the login form. If you are already logged in, you must first log out (click your name in the top right corner and click "**Sign out**").

You will be prompted to confirm your email, and a password reset email will be sent to your account's email address.

## Adding two-step verification

In **Settings > Account Details**, you can click **Setup authenticator app** to configure an authenticator app, like Google Authenticator, to add an extra layer of security to your account.

Follow the prompt that appears to complete the setup of your authenticator app.

1. Scan the QR code that appears or click "View setup key" to manually enter the setup code.
2. Enter a code generated by your authenticator app to verify the setup.
3. Click **Finish** to complete the setup process and add Two-Step Verification to your login.

If you need to remove or change your Two-Step Verification settings in the future, you can visit **Settings > Account Details** and click the three-dot menu in the Two-Step Verification section and select **Remove** to setup a new device.

<Warning>
  If you lose access to the device you used to setup your authenticator app, you will need to [contact support](mailto:support@paragon.com) to unlock your account.
</Warning>


# Role Based Access Control
Source: https://docs.useparagon.com/managing-account/role-based-access-control

Assign roles to team members working together on Paragon.

Role-Based Access Control allows you to give team members different levels of visibility to your Paragon projects. For example, you can:

* Assign support team members with **Support** roles for access to the Connected Users and Task History pages *only*
* Designate specific users with **Admin** roles to manage global settings, including team member access and billing information

We recommend giving team members the minimal level of access they need, according to the principle of least privilege.

<Info>
  **Role-Based Access Control is available for Paragon customers on Enterprise plans.** To learn more, contact your Customer Success Manager or [sales@useparagon.com](mailto:sales@useparagon.com).

  \*Admin and Member roles are available for customers on all plans. See \*[Working with Team Members](/managing-account/teams) for more information.
</Info>

## Managing Roles

Roles are managed on an organizational/global level. When a role is assigned, that role will apply across all projects.

Roles can be managed from the dashboard by visiting **Settings** > **Team Members** page for any Project.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Team%20Members%20with%20RBAC%20view.png" alt="" />
</Frame>

You can select any existing team member to change their role. New team members can also be invited with a specific role selected.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20Team%20Members%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Role Types

### Admin

**Admins have full read/write access to Paragon projects**. Admins can also exclusively invite new team members and view billing details.

### Members

Members are allowed to modify integrations and deploy workflows, but they cannot create new Event Destinations or modify existing Environment Secrets.

| ✓ Members are allowed to:                                                                                                                                     | ✗ Members are not allowed to:                                                                                                                                                            |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| • Create, delete, activate, or deactivate Integrations <br /> • Create, modify, and deploy Workflows <br /> • Update SDK Setup options, including Signing Key | • View or update Event Destinations <br /> • Update existing Environment Secret values <br /> • Manage API Keys <br /> • Invite new team members <br /> • View or modify billing details |

### Support

Support members are only allowed to view the Connected Users and Task History pages of the dashboard. Using these pages, they can provide support and error information to integration users.

| ✓ Support members are allowed to:                                                                                                                                               | ✗ Support members are not allowed to:                                                                                                                |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
| • View and manage Connected Users, their integrations, and their metadata <br /> • View Task History for Workflows <br /> • Replay failed Workflow Executions from Task History | • Create new Projects <br /> • Modify any project details (including Integrations or Workflows) <br /> • View Client IDs or Secrets for Integrations |


# Working with Team Members
Source: https://docs.useparagon.com/managing-account/teams

Invite your team to create integrations on Paragon.

## Inviting a Team Member

Collaborate with your team members to create new integrations or view executions in Task History.

By default, Paragon has [two types of roles](/managing-account/teams#managing-roles-and-permissions) available for projects: **Admin** and **Member**. *Additional roles are available with *[Role-Based Access Control](/managing-account/role-based-access-control)*.*

To add Team Members to your Organization in Paragon:

### 1. Go to "Team Members" in Settings

Click on "Settings" in the sidebar, then click on "Team Members".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Inviting%20team%20members%20to%20Paragon.gif)
</Frame>

### 2. Add new team member information

Click the blue "+ New Member" button to the right of the dashboard to invite team members to your Organization in Paragon.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Add%20new%20member%20button%20in%20Paragon.png)
</Frame>

Invitees will receive an **email invitation** to join your Organization on Paragon. You’ll receive a confirmation email once your invitations are accepted.

### 3. Select a Role and Send an Invitation

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20Team%20Members%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Managing Roles and Permissions

There are three types of roles Team Members can have in your Organization:

| User Permissions                                             | Support\* | Member | Admin |
| ------------------------------------------------------------ | --------- | ------ | ----- |
| View Task History                                            | ☑️        | ☑️     | ☑️    |
| View Connected Users                                         | ☑️        | ☑️     | ☑️    |
| Create workflows                                             |           | ☑️     | ☑️    |
| Edit workflows                                               |           | ☑️     | ☑️    |
| Delete workflows                                             |           | ☑️     | ☑️    |
| Manage [Environment Secrets](/workflows/environment-secrets) |           |        | ☑️    |
| Manage [Event Destinations](/monitoring/event-destinations)  |           |        | ☑️    |
| Manage API Keys                                              |           |        | ☑️    |
| Edit Billing Details                                         |           |        | ☑️    |
| Update team membership settings                              |           |        | ☑️    |
| Manage Subscription                                          |           |        | ☑️    |

\**This role requires *[*Role-Based Access Control*](/managing-account/role-based-access-control)*.*

## Removing a Team Member

Click on "Remove User" underneath the team member you'd like to remove. After confirming the deletion, the team member will be removed from your Organization.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Removing%20Team%20Members%20in%20Paragon%20Connect.gif" alt="" />
</Frame>


# Managing Event Destinations
Source: https://docs.useparagon.com/monitoring/event-destinations

Send notifications from your Paragon project into your logging, analytics, and APM services.

<Note>
  **Note:** This feature is only available to **Admin** users. [Learn more](/managing-account/teams#managing-roles-and-permissions).
</Note>

Event Destinations allow you to configure notifications for events that occur in your Paragon project.

For example, if you'd like to add another email to be notified by email when a workflow fails, you can add an Email Destination. If you prefer notifications via Slack, you can configure a Webhook Destination to a Slack incoming webhook.

You can find your project's Event Destinations by navigating to the global **Settings** tab in the left sidebar and selecting **Monitoring** under your Project Settings.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(8).png" alt="" />
</Frame>

From this Monitoring page, you can take any of the following actions for any Event Destination:

* Update the configuration of the Event Destination (such as changing the email address or webhook URL)
* Disable the Event Destination, which temporarily pauses notifications sent to this destination
* Delete the Event Destination

## Email Destinations

By default, your project will include an Email Destination for Workflow Failure events, using the email address of the user that created the project.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(14).png" alt="" />
</Frame>

You can set up additional Email Destinations by following these steps:

1. From the Settings > Monitoring page, click the **Add Destination** button at the top right.

2. In the **Type** field, select **Email.**

3. In the **To** field, enter the desired email to be notified.

4. Optionally, send a test email with the **Test Email** button at the bottom left.

5. Click **Save** to create and enable the new destination.

## Webhook Destinations

<Info>
  **Webhook Destinations are available for Paragon customers on paid plans.** To learn more, contact our team at [sales@useparagon.com](mailto:sales@useparagon.com).
</Info>

Webhook Destinations allow you to receive event notifications from your Paragon project via HTTP requests. Webhook Destinations will receive a POST request when the event occurs, with configurable request headers and body contents.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(15).png" alt="" />
</Frame>

### Setup from template

If you use Slack, Datadog, New Relic, or Sentry, you can configure a Webhook Destination by clicking "Select Template" under **Request Payload** and following the guide to configure below:

<CardGroup cols={2}>
  <Card title="Slack" href="/monitoring/event-destinations/slack">
    Send events as messages in Slack
  </Card>

  <Card title="Datadog" href="/monitoring/event-destinations/datadog">
    Send events as logs in Datadog
  </Card>

  <Card title="New Relic" href="/monitoring/event-destinations/new-relic">
    Send events as logs in New Relic
  </Card>

  <Card title="Sentry" href="/monitoring/event-destinations/sentry">
    Send events as issues in Sentry
  </Card>
</CardGroup>

### Setup manually

You can set up a Webhook Destination by following these steps:

1. From the Settings > Monitoring page, click the **Add Destination** button at the top right.

2. In the **Type** field, select **Webhook (HTTP Request).**

3. In the **URL** field, enter the desired URL to receive the event payload.

4. Optionally, in the **Request Payload** field, you can change the format of the payload. By default, the webhook will receive the full event object (`$.event`). Use `{{` to specify a part of the event data to use in the request payload.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Kapture%202022-11-15%20at%2017.35.15.gif)
</Frame>

5. Optionally, additional request headers can be specified by expanding "Show more request options".

6. Send a test request to your Webhook Destination by clicking **Test Webhook** button at the bottom left.

7. Click **Save** to create and enable the new destination.

<Note>
  **Note:** Your Webhook Destination may be automatically disabled if your webhook responds with too many non-2xx status codes for consecutive events.
</Note>

## Supported Events

The following events can be sent from your Paragon project:

<Accordion title="Workflow Failure">
  An error occurs at any point in a workflow and causes the workflow to reach the Failed status.

  **Example webhook payload:**

  ```json
  {
    "type": "workflow_failure",
    "timestamp": 1729629642607,
    "timestampISO": "2024-10-22T20:40:42.607Z",
    "message": "Workflow “Test Workflow Name“ failed for User <User ID>",
    "user": {
      "id": "<User ID>",
      "metadata": {}
    },
    "project": {
      "id": "613b038f-e9bf-49ec-bc58-ba8d620754c7",
      "name": "Test Project Name"
    },
    "integration": {
      "id": "57a96b31-c69e-421a-bb32-7a25f9c6a893",
      "type": "slack"
    },
    "workflow": {
      "id": "cae72d65-7fc6-4249-9047-48fc640bfd46",
      "name": "Test Workflow Name"
    },
    "data": {
      "type": "workflow_failure",
      "projectId": "613b038f-e9bf-49ec-bc58-ba8d620754c7",
      "workflowId": "cae72d65-7fc6-4249-9047-48fc640bfd46",
      "workflowExecution": {
        "id": "07911c9b-2006-4348-938b-b7ebac94dc1f"
      },
      "stepExecution": {
        "stepId": "3507a59f-d552-45a5-8bca-ed5315111ca0",
        "instanceId": "45ab5c3d-5ad3-46a0-9b79-692b4c06520d",
        "startTime": 1729629642606,
        "endTime": 1729629642606
      },
      "timestamp": 1729629642606,
      "error": "Test error message",
      "executionUrl": "https://dashboard.useparagon.com/connect/projects/613b038f-e9bf-49ec-bc58-ba8d620754c7/history/workflows/cae72d65-7fc6-4249-9047-48fc640bfd46/executions/07911c9b-2006-4348-938b-b7ebac94dc1f"
    }
  }
  ```
</Accordion>

<Accordion title="Credential Failure">
  An error occurs during the OAuth refresh process which cannot be retried. After this error, the user's credential will be [marked as invalid](/apis/users#validating-account-status-with-the-credentialstatus-property).

  Use this event to notify your user to revisit the Connect Portal in your app and re-establish the connection to the affected integration.

  **Example webhook payload:**

  ```json
  {
    "type": "credentials_failure",
    "timestamp": 1729629449422,
    "timestampISO": "2024-10-22T20:37:43.849Z",
    "message": "Connected User “<User ID>“ credential for <Integration> expired and can not be refreshed.",
    "user": {
      "id": "<User ID>",
      "metadata": {}
    },
    "project": {
      "id": "613b038f-e9bf-49ec-bc58-ba8d620754c7",
      "name": "Test Project Name"
    },
    "integration": {
      "id": "57a96b31-c69e-421a-bb32-7a25f9c6a893",
      "type": "slack"
    },
    "data": {
      "userId": "<User ID>",
      "error": "invalid_grant"
    }
  }
  ```
</Accordion>

We are working on adding support for more events. Have a request for other events you'd like to send from your Paragon project? [Let us know](mailto:team@useparagon.com).


# Sending Events to Datadog
Source: https://docs.useparagon.com/monitoring/event-destinations/datadog

Send notifications from your Paragon project into Datadog.

You can configure a Webhook Destination with a preconfigured payload to send messages into Datadog when events, like workflow failures, occur in your Paragon project.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(56).png" alt="" />
</Frame>

<Info>
  **Webhook Destinations are available for Paragon customers on Pro and Enterprise plans.** To learn more, contact your Customer Success Manager or [sales@useparagon.com](mailto:sales@useparagon.com).
</Info>

## Configure Datadog

To send notifications to Datadog, you will need to add an API Key to your Datadog organization:

1. In the bottom right menu of your Datadog account, navigate to **Organization Settings**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(8).png" alt="" />
</Frame>

2. Under **Access**, click the **API Keys** settings page.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(34).png" alt="" />
</Frame>

3. Click **New Key** and name the key something recognizable, like "Paragon".

4. Once the new API Key value appears, click **Copy Key**. You will need this value to add the Event Destination below.

You will also need to make note of your Datadog Site value, which you can get from your Datalog Login URL or the `DD-SITE` value used in your Datadog agent:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(10).png" alt="" />
</Frame>

In the above URL for the Datadog dashboard, **us5.datadoghq.com** is the Datadog Site.

## Create Event Destination

*To create an Event Destination with Datadog, you will need to have followed the above steps to obtain a **Datadog Site and Datadog API Key.***

1. From the Settings > Monitoring page, click the **Add Destination** button at the top right.

2. In the **Type** field, select **Webhook (HTTP Request).**

3. Click "Select Template" next to **Request Payload** and select **Datadog**.

4. In the **URL** field, replace `<DD-SITE>` with your **Datadog Site** value (e.g. `us5.datadoghq.com`).

5. In the **Request Headers** table, replace `<DD-API-KEY>` with your **Datadog API Key**.

6. Click **Test Webhook** to verify that a log can be sent successfully to your Datadog instance.

7. Click **Save** to create and enable the Event Destination.


# Sending Events to New Relic
Source: https://docs.useparagon.com/monitoring/event-destinations/new-relic

Send notifications from your Paragon project into New Relic.

You can configure a Webhook Destination with a preconfigured payload to send messages into New Relic when events, like workflow failures, occur in your Paragon project.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(17).png" alt="" />
</Frame>

<Info>
  **Webhook Destinations are available for Paragon customers on Pro and Enterprise plans.** To learn more, contact your Customer Success Manager or [sales@useparagon.com](mailto:sales@useparagon.com).
</Info>

## Configure New Relic

To send notifications to New Relic, you will need to add an API Key to your New Relic project:

1. In the bottom right menu of your New Relic account, navigate to **API Keys.**

   <Frame>
     <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(11).png" alt="" />
   </Frame>

2. Click **Create Key** and specify "Ingest - License" for the key type. Name the key something recognizable, like "Paragon".

3. Click the "..." menu next to the new key and click **Copy Key**. You will need this value to add the Event Destination below.

## Create Event Destination

*To create an Event Destination with New Relic, you will need to have followed the above steps to obtain a **New Relic API Key.***

1. From the Settings > Monitoring page, click the **Add Destination** button at the top right.

2. In the **Type** field, select **Webhook (HTTP Request).**

3. Click "Select Template" next to **Request Payload** and select **New Relic**.

4. In the **Request Headers** table, replace `<New Relic API Key>` with your **New Relic API Key**.

5. Click **Test Webhook** to verify that a log can be sent successfully to your New Relic instance.

6. Click **Save** to create and enable the Event Destination.


# Sending Events to Sentry
Source: https://docs.useparagon.com/monitoring/event-destinations/sentry

Send notifications from your Paragon project into Sentry.

You can configure a Webhook Destination with a preconfigured payload to send messages into Sentry when events, like workflow failures, occur in your Paragon project.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(2)%20(1).png" alt="" />
</Frame>

<Info>
  **Webhook Destinations are available for Paragon customers on Pro and Enterprise plans.** To learn more, contact your Customer Success Manager or [sales@useparagon.com](mailto:sales@useparagon.com).
</Info>

## Configure Sentry

To send notifications to Sentry, you will need to make note of your Sentry Public Key and Sentry Ingest URL.

1. From your Sentry Project, click the Settings gear icon on the top right.

   <Frame>
     <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202022-11-15%20at%204.04.06%20PM.png" alt="" />
   </Frame>

2. Under the **SDK Setup** section, click **Client Keys (DSN)**.

3. Copy your DSN. You will need to extract your Sentry Public Key and Sentry Ingest URL from this value:

   <Frame>
     <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201%20(12).png" alt="" />
   </Frame>

   Once you identify the Sentry Base URL, perform the following steps to get your Sentry Ingest URL:

   1. Prefix the base URL with **"https\://"**

   2. After ".sentry.io/" and before the Project ID path, add **"api/"** to the URL. For example, with the above DSN, this would become: `https://o535635.ingest.sentry.io/api/4504082601017344`

   3. At the end of the URL, add **"/store/"**. The final Sentry Ingest URL should look like: `https://o535635.ingest.sentry.io/api/4504082601017344/store/`

   4. Save this value to use as your Sentry Ingest URL.

## Create Event Destination

*To create an Event Destination with Sentry, you will need to have followed the above steps to obtain a **Sentry Public Key and Sentry Ingest URL.***

1. From the Settings > Monitoring page, click the **Add Destination** button at the top right.

2. In the **Type** field, select **Webhook (HTTP Request).**

3. Click "Select Template" next to **Request Payload** and select **Sentry.**

4. In the **URL** field, paste your **Sentry Ingest URL.**

5. In the **Request Headers** table, replace `<Sentry Key>` with your **Sentry Public Key**.

6. Click **Test Webhook** to verify that an error can be sent successfully to your Sentry project.

7. Click **Save** to create and enable the Event Destination.


# Sending Events to Slack
Source: https://docs.useparagon.com/monitoring/event-destinations/slack

Send notifications from your Paragon project into Slack.

You can configure a Webhook Destination with a preconfigured payload to send messages into Slack when events, like workflow failures, occur in your Paragon project.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(68).png" alt="" />
</Frame>

<Info>
  **Webhook Destinations are available for Paragon customers on Pro and Enterprise plans.** To learn more, contact your Customer Success Manager or [sales@useparagon.com](mailto:sales@useparagon.com).
</Info>

## Configure Slack

To send notifications to Slack, you will need to create a Slack App and add it to your workspace with an Incoming Webhook:

1. Visit the [Slack API Center](https://api.slack.com/) and **Create an app.**

2. When prompted to create a new app, click "From scratch". Enter a recognizable name like "Paragon" for the App Name and select your Slack Workspace.

3. Under **Features**, navigate to **Incoming Webhooks**. Turn on "Activate Incoming Webhooks".

4. Once Incoming Webhooks is activated, scroll to the bottom and click "Add New Webhook to Workspace".

5. When prompted, select a channel to send your Slack notifications to. We recommend creating a new channel for Paragon notifications. Click **Allow**.

6. Once the webhook is created, click **Copy** in the Webhook URL and save this value to add to Paragon. The value will begin with "`https://hooks.slack.com/...`"

## Create Event Destination

*To create an Event Destination with Slack, you will need to have followed the above steps to obtain a **Slack Webhook URL.***

1. From the Settings > Monitoring page, click the **Add Destination** button at the top right.

2. In the **Type** field, select **Webhook (HTTP Request).**

3. Click "Select Template" next to **Request Payload** and select **Slack**.

4. In the **URL** field, paste the Webhook URL you copied in the previous steps.

5. Click **Test Webhook** to verify that a message gets sent into the Slack channel you selected earlier.

6. Click **Save** to create and enable the Event Destination.


# Managing Connected Users
Source: https://docs.useparagon.com/monitoring/users

Manage connected users and their integrations.

The **Connected Users Dashboard** provides an overview of your users and their connected integrations. For example, you can view which workflows your customers enable or disconnect integrations if they stop paying.

In the Connected Users Dashboard, you can find information about each user:

* **Name/User ID** (e.g. `bowie@useparagon.com` or Paragon)
* **Status** (e.g. Connected or Account Errors)
* **Integrations Enabled** (e.g. Salesforce)
* **Date Created**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Viewing%20Connected%20Users%20in%20the%20Connected%20Users%20Dashboard%20in%20Paragon%20Connect%20(1).png" alt="" />
</Frame>

### Managing Integrations

The Connected Users Dashboard provides an overview of your user's connected integrations. You can uninstall any integration your user has connected to. This will permanently remove this user's connected account for the integration. They will need to revisit the Connect Portal to reconnect their account.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Uninstalling%20an%20Integration%20from%20the%20Connected%20Users%20Dashboard%20in%20Paragon%20Connect.gif" alt="" />
</Frame>

<Note>
  **Note:** Integration-enabled trigger workflows are displayed as **"Not Enabled"** when viewing users' integrations in the Connected Users Dashboard.

  This status does not affect functionality; the workflow will trigger and execute successfully once activated by the Connected User. You can confirm the workflow’s execution via the [Task History](/monitoring/viewing-task-history) page.
</Note>

### Disabling Users

You can disable users to stop their workflows and prevent them from using the Connect Portal. You can re-enable the user later.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Disabling%20users%20from%20the%20Connected%20Users%20Dashboard%20in%20Paragon%20Connect.png" alt="" />
</Frame>

### Disabling Workflows for Users

You can also disable workflows for specific users. Any disabled workflow can be re-enabled by the user in the Connect Portal.

To disable a workflow for a user:

1\. Select the integration the workflow belongs to

2\. Click the triple-dot menu to the right of the workflow you'd like to disable.

3\. Select **Disable workflow for user**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Disabling%20Workflows%20for%20Users%20in%20Paragon%20Connect.png" alt="" />
</Frame>


# Viewing Task History
Source: https://docs.useparagon.com/monitoring/viewing-task-history

Quickly view a timeline and status of previous workflow executions.

## Overview

Task History keeps track of your workflow executions and lives on the left side of the dashboard. It serves as a timeline and an easy way to navigate through your workflow history, revisit any failed workflows, and get a step-by-step breakdown of the executed tasks in each one.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Viewing%20Task%20History%20in%20Paragon%20Connect.png)
</Frame>

Under Task History, you can find information about each workflow:

* **Status** (e.g. Success or Errored)
* **Trigger method** (e.g. every 5 minutes or via an App Event)
* **Integration** (e.g. Salesforce)
* **User** who triggered the workflow
* **Time and date** your workflow ran

Clicking anywhere on a workflow provides you with a detailed view of the status of each step related to that workflow. By default, Paragon stores workflow executions for up to 90 days. This number can be configured for users on [on-premise installations](/on-premise/hosting-paragon-on-premise).

<Tip>
  **Want this data in an API?**

  [Task History API](/apis/task-history) is available. To learn more, contact your Customer Success Manager or [sales@useparagon.com](mailto:sales@useparagon.com).
</Tip>

## Detailed task execution

Each workflow in your Task History includes a step-by-step breakdown of the tasks related to the workflow. In this view, the Task History also shows:

* How long it took your workflow to run
* Number of tasks executed
* List of each executed step

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Viewing%20a%20Paragon%20Connect%20workflow%20execution.png)
</Frame>

## Following your workflow

Paragon also allows you to visualize the flow of data throughout each workflow execution, making it easy for teams to track and debug. A **blue path** indicates the path taken by your workflow while running. A **grey path** indicates the path exists in the workflow but was not taken during this execution.

<Frame>
  ![](https://gblobscdn.gitbook.com/assets%2F-MCJwlyhqtCdBfCLUO0d%2F-MCNcV5-7xwbNryBslGB%2F-MCNciZkbDBTPg4EBUXT%2FFollowing%20workflow%20execution.png?alt=media\&token=3d1189a4-7ce2-4153-97d3-dd551fa63d39)
</Frame>

## Editing and replaying

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Editing%20and%20Replaying%20Tasks%20in%20Paragon%20Connect.png)
</Frame>

* **Editing the Workflow:** Pressing the "Edit Workflow" button allows you to make changes to your workflow.
* **Replaying the Workflow:** Pressing the "Replay" button re-runs your currently deployed workflow. This is useful if you want to replay a workflow that initially failed.

<Info>
  **Replaying a workflow**

  This replays your workflow in its **execution state** with the original input data.
</Info>

## Filtering

Filtering your Task History allows you to view the history of specific workflows that meet the criteria you specify while hiding the others.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Filtering%20workflow%20executions%20in%20Paragon%20Connect.png)
</Frame>

You can filter your Task History by:

* **User ID**
* **Status**
  * Queued
  * Running
  * Waiting
  * Success
  * Errored
  * Paused
  * Cancelled
* **Workflow name**
* **Integration name**
* **Date range**

## Debugging

Paragon provides a detailed breakdown of the data input and output of each step. Click on any step to view its status and data. You can make changes to a step by clicking the "Edit Step" button. Doing so will open the workflow editor and display the related step, where you can update it as needed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Debugging%20a%20Salesforce%20Workflow%20in%20Paragon%20Connect.png" alt="" />
</Frame>


# Application Architecture
Source: https://docs.useparagon.com/on-premise/application-architecture



## Overview

Paragon is composed of multiple microservices running within Kubernetes or Docker. While there are over 30 packages and microservices, the microservices can generally be grouped into two groups:

* Configuration
* Execution

The read-and-write patterns and volumes for each often differ significantly, so the services and their dependencies are decoupled so they can run independently.

### Configuration

When you log into Paragon, you can add team members, create workflows, configure steps, add and edit secrets, and more. All of these actions and their data fall under the **Configuration** category and are persisted in real-time to Postgres. Postgres acts as the source of truth, and when you are editing your configurations, they’re generally immediately persisted into Postgres.

### Execution

When workflows or connect proxy requests are triggered, they use cached versions of the configurations (e.g. workflows and steps, credentials, etc). Request volumes can be in the tens or hundreds of millions which require reads and writes in the microsecond-millisecond range. Generally, executions rely on cached data in Redis built from configurations stored in Postgres. Logs/results are flushed to Postgres periodically in batches to reduce the load on servers.

## Datastores

A diagram of where data is stored can be found below.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Paragon%20Data%20Flow%20Diagram.png" alt="" />
</Frame>

## Microservice Communication

Microservices communicate with each other in one of two methods:

* [Event-based (Redis)](/on-premise/application-architecture#event-based-communication-redis)
* [HTTP](/on-premise/application-architecture#http-based-communication)

###

Requests that fall in the **Execution** category (e.g. executing live workflows, Connect proxy requests, etc) and may happen in large volumes are queued in Redis as jobs. This allows the services to dynamically scale to meet the volume without losing data, retry failed jobs, and provide metrics on throughput, failure rates, and job metadata.

### HTTP-based Communication

Requests that fall in the **Configuration** category (e.g. editing workflows, adding team members, etc) that usually occur in low volumes are typically handled via HTTP calls over the private network. Custom tooling is used to add retry logic based on response codes, provided distributed tracing, validate payloads, and more.

## Queuing Retry Logic

Requests that fall in the **Execution** category (e.g. executing live workflows, Connect proxy requests, etc) have sophisticated logic around retries, some configurable and some automatic.

### Configurable step retries

Auto-retries can be enabled in the sidebar next to your steps. This will retry steps with jitter and exponential backoff upon failure. This is useful for when rate limits may be hit or other faulty APIs.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Step%20Retries%20in%20a%20Paragon%20Workflow.png" alt="" />
</Frame>

### System retries

When system errors are detected, like internal network errors or memory issues, the jobs will automatically retry.

### Automatic failures

In some cases, Paragon won’t attempt a request and automatically fail it if it knows the request won’t succeed. An example of this would include expired credentials - if Paragon isn’t able to refresh a credential, then other requests with the authenticated credential will fail.

## Back pressure and autoscaling

Requests that fall in the **Execution** category (e.g. executing live workflows, Connect proxy requests, etc) are queued in Redis to prevent data loss in case of large volumes of requests. This allows Paragon to autoscale to handle large volumes.

### Dedicated Queues

When a customer has a large volume of requests, a dedicated queue is created to process their jobs, and workers are autoscaled immediately to process the new queue. This prevents one customer from flooding primary queues and preventing requests from other customers from being processed.

### Autoscaling workers

The workers use a distributed leader election mechanism to determine the distribution of workers to queues. As soon as new queues are registered, a worker is provisioned in milliseconds to process that queue. Workers report health checks with the queue they’re working on. If a worker stops reporting that it’s working on a queue and a queue still has jobs to process, another worker will pick up the work within seconds.

Additionally, workers self-monitor and shut themselves down if there are no jobs to process in their queue.

The combination of distributed leader election, queue → worker provisioning, health checks, and self-monitoring allow Paragon to handle work across thousands of queues.

## Encryption of credentials

For all credentials and secrets, we use a custom distributed encrypted vault where each value has a unique key generated for encrypting it. The encrypted values and their keys are stored in a separate database and accessed by independent microservices, are decrypted only at execution time, and are only referenced by UUID or other non-sensitive values when represented in workflows. Additionally, the databases are all encrypted at rest, all in-memory caches also encrypt their values using separate rotating expiring keys, and data is encrypted in transit.


# Choosing a Hosting Solution
Source: https://docs.useparagon.com/on-premise/choosing-a-hosting-solution



Paragon offers several hosting solutions including:

* [Cloud](/on-premise/choosing-a-hosting-solution#cloud)
* [Single Tenant](/on-premise/choosing-a-hosting-solution#single-tenant)
* [Managed On-Premise](/on-premise/choosing-a-hosting-solution#managed-on-premise)
* [Unmanaged On-Premise](/on-premise/choosing-a-hosting-solution#unmanaged-on-premise)

## Cloud

Paragon’s cloud hosting is completely managed by Paragon and offered as a standard SaaS solution. It has the most up-to-date features and bug fixes and usually has updates several times a week. We take full responsibility for releases, patch management, security, incident response, and other standard development procedures.

This product is hosted on AWS in servers located in the United States and Europe. It is SOC2 Type 2 certified. For more information on SOC2 Type 2 certification, please visit our [Trust Center](https://security.useparagon.com/overview/eb093a6a-24dd-4fda-ad2b-6ea89cc01a75/soc-2).

You can get started in minutes by visiting the web application [here](https://dashboard.useparagon.com/signup).

#### What are the benefits?

* Get started in minutes
* Frequent releases (usually several each week)
* Fast support times

#### Who is this for?

This solution is the best for most companies. You should use it if you:

* Don’t have any legal obligations to host your data in a certain location
* Don’t have requirements to host your data alongside other customers
* Have expected volumes in the low - moderate usage of up to 10 million requests / month
* Don’t want to manage your own infrastructure

#### Who is this not for?

You should not use this solution if you:

* Need to host your data or servers in a certain country or region outside of the United States or Europe
* Expect more than 10 million requests/month
* Expect individual requests to take longer than 1 minute
* Expect to send and work with data in requests larger than 100 MB

## Single-Tenant

The single-tenant hosting solution is very similar to Paragon’s cloud hosting option except that it runs with completely dedicated resources (VPC, networks, databases, servers, etc).

This product is also hosted on AWS though in any country or region of your choosing. Releases, patch management, and infrastructure is completely managed by Paragon. This hosting solution is also [SOC2 Type 2 certified](https://www.useparagon.com/blog/soc-2-type-2).

#### What are the benefits?

* Choose a country and region to host servers and data
* Data is completely segregated from all customers
* More fault tolerant than the cloud offering
* Branded domains
* Service completely managed

#### Who is this for?

You should use this if you:

* Need your data or servers in a certain country or region
* Need your data segregated from all other customers
* Expect large volumes of traffic (over 10 million requests/month)
* Don’t want to manage your own infrastructure

#### Who is this not for?

You should not use this solution if you:

* Want to run on Azure or GCP instead of AWS

## Managed On-Premise

Managed on-premise is a hybrid offering used by almost all of our enterprise on-premise customers. It provides the security, isolation, and performance of on-premise with the ease of a cloud product.

In this offering, you will provide AWS, Azure, or GCP credentials with restricted access, and Paragon will deploy and manage the account for you. The data lives entirely in your own infrastructure and tooling.

To learn more about the access provided to the generated credentials, navigate to the docs for your cloud provider.

<Card title="Configuring Managed AWS" href="/on-premise/configure/aws" horizontal />

<Card title="Configuring Managed Azure" href="/on-premise/configure/azure" horizontal />

<Card title="Configuring Managed GCP" href="/on-premise/configure/gcp" horizontal />

#### What are the benefits?

* Choose a country and region to host servers and data
* Data is completely segregated from all customers
* Service completely managed
* Branded domains
* Unrestricted volume access

#### Who is this for?

You should use this if you:

* Need your data or servers in a certain country or region
* Need your data segregated from all other customers
* Expect large volumes of traffic (over 10 million requests / month)
* Have a dedicated devops team to configure and manage your infrastructure

#### Who is this not for?

You should not use this solution if you:

* Need to be HIPAA compliant

## Unmanaged On-Premise

Unmanaged on-premise is a do-it-yourself version which means you deploy, configure, update and manage your Paragon installation on your cloud. In this offering, you can deploy Paragon to your own AWS, Azure or GCP cloud. It provides the highest amount of security but the largest lift in terms of engineering time required to deploy and manage.

#### What are the benefits?

* Choose a country and region to host servers and data
* Data is completely segregated from all customers
* Reuse existing infrastructure (e.g. kubernetes cluster, Postgres server, etc)

#### Who is this for?

You should use this if you:

* Have strict compliance requirements (.e.g HIPAA)
* Have a dedicated devops team to configure, deploy and manage your installation

#### Who is this not for?

You should not use this solution if you:

* Don’t want to dedicate engineering resources to managing your infrastructure
* Need fast turnaround times for infrastructure-level issues
* Don’t have experience managing Kubernetes, Postgres, or Redis

We have an example repo for deploying Paragon to your own AWS account. You can find it [here](https://github.com/useparagon/aws-on-prem).


# Configuring a Managed Instance
Source: https://docs.useparagon.com/on-premise/configure



## Overview

[Paragon](https://www.useparagon.com/) allows customers the option of self-hosting Paragon on your own infrastructure. All the resources live in your AWS, Azure, or GCP, and data never leaves your cloud.

We additionally offer a Managed On-Premise solution that almost 100% of our on-prem customers use at no additional cost. In this model, our enterprise team will take care of deploying, configuring, and managing your installation to offload 100% of developer time while providing the security and transparency of owning the resources and confidence that other resources in your Azure account are inaccessible.

<Card title="Configuring Managed AWS" href="/on-premise/configure/aws" horizontal />

<Card title="Configuring Managed Azure" href="/on-premise/configure/azure" horizontal />

<Card title="Configuring Managed GCP" href="/on-premise/configure/gcp" horizontal />


# Configuring Managed AWS
Source: https://docs.useparagon.com/on-premise/configure/aws

Configure your managed Paragon instance on AWS.

## Overview

To run Paragon's software on your AWS account, you'll need to use [AWS Organizations](https://aws.amazon.com/organizations/). AWS Organizations allows you to create new AWS accounts with sandboxed resources, policies and billing completely separate from your own.

We additionally offer a Managed On-Premise solution that is used by most of our on-premise customers. In this model, our enterprise team is responsible for deploying, configuring, and managing your installation to offload 100% of developer time while providing the security and transparency of owning the resources and confidence that other resources in your AWS account are inaccessible.

### Security

We use the principle of least privileged access to grant the Paragon installer the access it needs to create and manage resources in your account. When creating an AWS Account, all resources are completely sandboxed within that account and the installer can’t access anything outside of it. Any VPCs, databases, servers, etc on your primary AWS account can’t be accessed from this account.

## Setup

## AWS Organization

**Time required**: 5 minutes

1. Visit the [AWS Organizations](https://console.aws.amazon.com/organizations/home?#/accounts) dashboard and login with an admin account.

2. Click **Add account**.

3. Click **Create account**.

4. Fill in the details

   a. **Account name:** Paragon

   b. **Email address:** [enterprise+YOUR\_ORGANIZATION@useparagon.com](mailto:enterprise+YOUR_ORGANIZATION@useparagon.com) e.g. [*enterprise+google@useparagon.com*](mailto:enterprise+google@useparagon.com)

5. That's it. We'll set it up from there


# Configuring Managed Azure
Source: https://docs.useparagon.com/on-premise/configure/azure

Configure your managed Paragon instance on Azure.

## Overview

[Paragon](https://www.useparagon.com/) allows customers the option of self-hosting Paragon on your own infrastructure. All the resources live in your AWS, Azure, or GCP, and data never leaves your cloud.

We additionally offer a Managed On-Premise solution that almost 100% of our on-prem customers use at no additional cost. In this model, our enterprise team will take care of deploying, configuring, and managing your installation to offload 100% of developer time while providing the security and transparency of owning the resources and confidence that other resources in your Azure account are inaccessible.

### Security

We use the principle of least privileged access to grant the Paragon installer the access it needs to create and manage resources in your account. For Azure customers, we recommend a combination of Azure Tenants, Azure Subscriptions, and RBAC (role-based access control). With this method:

* a new tenant is created on your Azure account with resources created belonging to that tenant and separate from all other resources
* a new subscription is created to associate all Paragon resources created within that tenant
* a role is created to manage resources in the subscription for that tenant and provided to the installer

Using this method, extra redundancies are put in place that ensures Paragon can only interact with the intended resources while providing a means for you to transparently view all resources created, separate billing to manage the resources while being connected to a parent account, and have super user access for all resources created.

## Setup

We’ll need 4 values to install Paragon.

* Tenant Id
* Subscription Id
* Client Id
* Client Secret

### Directions

1. Login to your Azure portal as an admin.

2. Create a tenant.

   a. Search `Azure Active Directory` in the search bar, navigate to your **Azure Active Directory**, and click the **Manage tenants** tab.

   b. Click **+ Create.**

   c. Select **Azure Active Directory** as the tenant type in the **Basics** tab.

   d. Click the **Configuration** tab.

   e. Enter `Paragon` as the Organization name.

   f. Enter a domain name with `paragon` and your organization’s name, i.e. `paragongoogle`. The domain must be alphanumeric.

   g. Click the **Review + create** tab.

   h. Click the **Create** button to create the tenant.

   i. Search `Azure Active Directory` in the search bar, navigate to your **Azure Active Directory**.

   j. ⭐️ Copy the text in the *Overview* section next to *Tenant ID*. This is the **Tenant Id.** ⭐️

3. Create a subscription under the tenant.

   a. Switch to your default Azure directory. You can do this by clicking your account in the top right corner and clicking **Switch directory.**

   b. Search `Subscriptions` in the search bar, and navigate to your **Subscriptions**.

   c. Click **+Add**

   d. In the **Basics** tab, enter `Paragon` for the Subscription name.

   e. Click the **Advanced** tab and select the new tenant you created for the Subscription directory.

   f. Click the **Review + create** tab.

   g. Confirm the name of the subscription is correct in the *Basics* section and the correct tenant is selected in the *Advanced* section.

   h. Click **Create**.

   i. ⭐️ Copy the id of the subscription. This is the **Subscription Id.** ⭐️

4. Create credentials for the Paragon installer.

   a. Switch to the new Paragon directory. You can do this by clicking your account in the top right corner and clicking **Switch directory.**

   b. Search `Azure Active Directory` in the search bar, navigate to your **Azure Active Directory**, and click the **App registrations** tab.

   c. Click **+ New registration.**

   d. Enter `Paragon Installer` for the name of the application.

   e. Select `Accounts in this organizational directory only` for the access type.

   f. Leave the *Redirect URI (optional)* field empty.

   g. Click **Create** to create the application.

   h. ⭐️ Save the text next to *Application (client) ID*. This is the **Client Id**. ⭐️

   i. Click **Add a certificate or secret** next to *Client credentials*.

   j. Click **+ New client secret** to create a new secret.

   k. Enter `Paragon Installer` for the description.

   l. Select `24 months` for *Expires.*

   m. Click **Add** to create the secret.

   n. ⭐️ Save the text under the *Value* column. This is the **Client Secret**. ⭐️

5. Give the new *Paragon Installer* application access to manage the newly created subscription.

   a. Search `Subscriptions` in the search bar, and navigate to your **Subscriptions**.

   b. Click the newly created *Paragon* subscription.

   c. Click **Access control (IAM)** in the left sidebar.

   d. Click **+ Add** and select **Add role assignment**.

   e. Search `Contributor` and click **View** on the right side.

   f. Click **Select role** at the bottom of the sidebar that opened.

   g. Click the **Members** tab and click **+ Select members**.

   h. Search `Paragon Installer` and select the application.

   i. Click the **Select** button at the bottom of the sidebar.

   j. Click **Review + assign** to assign the role.

## Next Steps

Once all of this is done, provide us with these four values, and we’ll set up your installation!

If you have any questions, email [enterprise@useparagon.com](mailto:enterprise@useparagon.com) for help.


# Configuring Managed GCP
Source: https://docs.useparagon.com/on-premise/configure/gcp

Configure your managed Paragon instance on GCP.

## Overview

[Paragon](https://www.useparagon.com/) allows customers the option of self-hosting Paragon on your own infrastructure. All the resources live in your AWS, Azure or GCP account GCP, and data never leaves your cloud.

We provide a managed on-prem solution at no additional cost. In this model, our enterprise team will take care of deploying, configuring, and managing your installation to offload almost 100% of developer time while providing the security and transparency of owning the resources and confidence that other resources in your Azure account are inaccessible.

### Security

We use the principle of least privileged access to grant the Paragon installer the access it needs to create and manage resources in your account. For GCP customers, we recommend a combination of GCP projects and service accounts for RBAC (role based access control). With this method:

* a new project is created on your GCP account with resources created belonging to that porject
* a new service account is created on your GCP account to manage resources in the project to be used by the Paragon installer

## Setup

The only thing that we need provide is the JSON config for the service account used by the installer.

### Directions

1. Login to your GCP console as an admin.

2. Create a project.

   a. In the top left corner (near the **Google Cloud Platform** logo), click the dropdown for your currently active project.

   b. In the modal that appears, click **New Project.**

   c. Name the project **Paragon**.

3. Make sure the newly created project is the currently active one.

4. Create a service account.

   a. Click **IAM & Admin** in the left sidebar.

   b. Click **Service Accounts**.

   c. Click **Create Service Account**.

   d. Make the service account an **Owner** of the project.

   e. Name the account **Paragon Installer**.

5. Retrieve the auth configuration.

   a. Click the newly created service account.

   b. Navigate to **Keys**.

   c. Click **Add Key**.

   d. Generate a JSON file.

   e. Download the file.

## Next Steps

Once all of this is done, provide us the newly created service account file, and we’ll setup your installation!

If you have any questions, email [enterprise@useparagon.com](mailto:enterprise@useparagon.com) for help.


# On Premise Costs
Source: https://docs.useparagon.com/on-premise/costs



<Info>
  **Summary:** Generally, you should expect to pay up to \$2,000 / month in infrastructure costs for volumes of up to 20 million requests/month.

  This could increase or decrease depending on the cloud provider, request volumes (increases server and ingress/egress costs), redundancy and resiliency requirements (increases database costs), and size of data flowing through the system (increases blob storage, cache, and ingress/egress costs).

  For low volumes (under 10 million requests/month) running on single region deployments with spot instances, costs can be as low as \$900/month.
</Info>

## Overview

To run Paragon’s software on your own cloud, you’ll need at a minimum:

* Kubernetes cluster
* PostgreSQL database
* Redis instance
* SendGrid account

While we are constantly optimizing resources and finding ways to cut costs for cloud and on-premise, **costs equal to or below \$1,000/month are our current benchmark when adding or refactoring services for installations with request volumes of 0 - 100 million requests/month.**

Costs can be affected by several factors including cloud provider, request volumes (increases server and ingress/egress costs), redundancy and resiliency requirements (increases database costs), and size of data flowing through the system (increases blob storage, cache, and ingress/egress costs).

We’ve been able to reduce several Managed On-Premise instances to under \$500/month and provide cost optimization for our managed customers at no additional cost. If cloud spend is a concern, consider using our [Managed On-Premise option](/on-premise/choosing-a-hosting-solution#managed-on-premise).

## Resources

### Kubernetes

The Kubernetes cluster runs the microservices. Depending on the number of requests flowing through the system, more servers may need to be instantiated to meet the demand. Services typically autoscale based on horizontal pod autoscalers listening to CPU and memory.

Prices on compute instances can be found below:

<CardGroup cols={3}>
  <Card title="AWS" href="https://aws.amazon.com/eks/" horizontal />

  <Card title="Azure" href="https://learn.microsoft.com/en-us/azure/aks/" horizontal />

  <Card title="GCP" href="https://cloud.google.com/kubernetes-engine" horizontal />
</CardGroup>

Additionally, some of the clouds charge a base price per month for Kubernetes (e.g. AWS EKS charges \$72 / mo).

#### Spot Instances

Kubernetes pricing can be optimized by using spot instances, which can cut costs by as much as 90%. AWS, Azure, and GCP all offer spot instances, which you can learn more about [here](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html).

Installations can be configured to use a certain percentage of spot instances (0 - 100%).

#### Reserved Pricing

You can save on compute costs by reserving server instances and paying for so many months or years up front. AWS, Azure and GCP all offer this.

#### Pricing Chart

Here are our recommended settings for request volumes of up to 100 million requests/month.

| Cloud     | Instance  | Instances | \$ / Hour | \$ / Hour (Spot) | \$ / Month | \$ / Month (Spot) |
| --------- | --------- | --------- | --------- | ---------------- | ---------- | ----------------- |
| **AWS**   | t3a.small | 16        | 0.0188    | 0.0056           | \$216.58   | \$64.51           |
| **Azure** | B1s       | 32        | 0.0104    | -                | \$239.62   | \$0.00            |
| **Azure** | D2as v5   | 8         | 0.086     | 0.0086           | \$495.36   | \$49.54           |
| **GCP**   | e2-small  | 16        | 0.016751  | 0.016751         | \$192.97   | \$57.89           |

<Info>
  For AWS, add \$72 / mo to run the EKS cluster.
</Info>

### Postgres

Postgres is the primary datastore used for saving data in Paragon. A single server is needed, and several databases are provisioned within it. The costs are generally determined by CPU and memory.

| Instance         | Cloud | vCPU | Memory (GB) | \$ / Hour | \$ / Month | \$ / Month (Multi-AZ) |
| ---------------- | ----- | ---- | ----------- | --------- | ---------- | --------------------- |
| db.t3.micro      | AWS   | 2    | 1           | 0.018     | \$12.96    | \$25.92               |
| db.t3.medium     | AWS   | 2    | 4           | 0.072     | \$51.84    | \$103.68              |
| GP\_Gen5\_2      | Azure | 2    | 10          | 0.176     | \$126.72   | \$253.44              |
| db-f1-micro      | GCP   | null | 0.6         | 0.0105    | \$7.56     | \$15.12               |
| db-n1-standard-2 | GCP   | 2    | -           | 0.0826    | \$59.47    | \$118.94              |

<Info>
  GCP also charges for storage and networking. Learn more [here](https://cloud.google.com/sql/docs/postgres/pricing).
</Info>

#### Reserved Pricing

You can save on Postgres costs by paying for 1 - 3 years upfront. AWS, Azure, and GCP all offer this.

### Redis

Redis is used as a cache and worker queue. A single Redis instance is needed. Pricing is typically determined based on cost and memory.

| Instance         | Cloud | vCPU | Memory (GB) | \$ / Hour | \$ / Month | \$ / Month (Multi-AZ) |
| ---------------- | ----- | ---- | ----------- | --------- | ---------- | --------------------- |
| cache.m6g.xlarge | AWS   | 4    | 12.93       | 0.297     | \$213.84   | \$427.68              |
| cache.r4.xlarge  | AWS   | 4    | 25.05       | 0.455     | \$327.60   | \$655.20              |
| P1               | Azure | 0    | 6           | 0.554     | \$398.88   | \$797.76              |
| P3               | Azure | null | 26          | 2.218     | \$1,596.96 | \$3,193.92            |
| Standard         | GCP   | 0    | 10          | 0.54      | \$388.80   | \$777.60              |
| Standard         | GCP   | null | 25          | 1.15      | \$828.00   | \$1,656.00            |

You can find more about Redis pricing below.

<CardGroup cols={3}>
  <Card title="AWS" href="https://aws.amazon.com/eks/" horizontal />

  <Card title="Azure" href="https://learn.microsoft.com/en-us/azure/aks/" horizontal />

  <Card title="GCP" href="https://cloud.google.com/kubernetes-engine" horizontal />
</CardGroup>

### SendGrid

SendGrid is used to send emails including:

* invite team member
* reset password
* failed workflow notifications

Assuming you’re sending less than 100 emails a day, you can get by on the free tier. On the **Essentials** tier, you can send as much as 1,500 / day and pay \$19.95 / mo.

<Card title="Pricing and Plans" href="https://sendgrid.com/pricing/" horizontal />


# Data Access & Controls
Source: https://docs.useparagon.com/on-premise/data-access-and-controls



## Frequently Asked Questions

### Who has access to your data on the Paragon side?

For unmanaged installations, your data never leaves your installation and no one in Paragon has access to any of your data besides the billing contact information associated with the subscription.

For managed installations, your data never leaves your installation, and a Paragon support engineer can get limited access to perform maintenance or support tasks such as viewing application logs or debugging a workflow. Temporary access is granted upon request, logged and approved internally, and an audit trail of commands executed is automatically tracked. Sensitive data, like credentials, are never accessible.

### What type of access is required for managed installations?

The Paragon installer needs credentials to provision application resources via Terraform. Because the credentials are sandboxed to the tenant / organization / subscription, the installer cannot access any other resources on the AWS / Azure / GCP account. These credentials aren’t shared with any Paragon engineers.

Paragon support engineers are granted temporary access to application logs via ElasticSearch or limited database access via [Teleport](https://goteleport.com/) to perform routine support duties requested by customers.

### How is access limited to support engineers?

Each managed installation is only accessible from a list of whitelisted IP addresses modified on demand and additionally protected by SSH keys.

### Is there an audit trail for access?

Access requests are logged and approved internally. SSH access is automatically logged to an S3 bucket with all commands executed.


# Hosting Paragon On Premise
Source: https://docs.useparagon.com/on-premise/hosting-paragon-on-premise

Learn about deploying Paragon on your own infrastructure.

## Overview

<Info>
  Paragon On-Premise is only available on our [Enterprise plan](https://www.useparagon.com/pricing). If you're evaluating Paragon for a large production use case or have any questions about our Enterprise plan, please [book a call](https://useparagon.com/book-demo).
</Info>

Paragon offers an on-premise solution that allows you to run Paragon on your own infrastructure. AWS, Azure, and GCP have first-class support, but you can run it anywhere that has internet access, Kubernetes support, Postgres database, and Redis cache.

Paragon On-Premise is often used by companies that need to:

* Store or work with personally identifiable information (PII)
* Remain compliant with the Health Insurance Portability and Accountability Act (HIPPA)
* Have stricter policies, procedures, or contracts with enterprise customers

Paragon is SOC2 Type 2 certified, and both our cloud and managed on-premise solutions adhere to the policies and procedures required in the certification. Read more [here](https://www.useparagon.com/blog/soc-2-type-1).

We offer several solutions including:

* Cloud
* Single Tenant
* Managed On-Premise
* Unmanaged On-Premise

To decide which one is best for you, head over to the next section.


# Incident Response
Source: https://docs.useparagon.com/on-premise/incident-response



## Overview

For managed installations, we have hundreds of metrics being constantly collected with alarms configured to alert Paragon’s support team upon deviations or when dangerous values are detected. You can learn more [here](/on-premise/system-metrics-and-alarms).

<Card title="System Metrics and Alarms" href="/on-premise/system-metrics-and-alarms" horizontal />

We proactively respond to deviations and often remediate misconfigurations, and errors, and optimize costs before customers or their users are made aware.

If you detect issues with your environment, please contact our team, and we’ll prioritize fixing and patching your environment as soon as possible.

### Underutilization of resources

When resources are consistently underutilized, we’ll handle the downsizing of resources (e.g. Postgres, Redis, etc) to save you money on your monthly bill.

### More resources needed

When not enough resources are available (e.g. servers, database memory or CPU, etc), there are several courses of action that we take. In almost every case, we’re notified within seconds of a lack of resources within a managed installation. In most of those cases, we have autoscaling enabled within predefined limits to meet the demand. If we need to resize a service that would materially affect monthly costs, we’ll notify your team and request approval to update the configuration for your installer to update your system.

### High error rates

When high error rates are detected, we’ll immediately investigate the source of error rates and take the appropriate action. In many cases, it’s a new workflow that’s being tested or misconfigured, and no action is needed.

Generally, releases are tested in our cloud environment and confirmed to be stable before deploying to enterprise environments, so rollbacks due to high error rates in on-premise environments rarely happen.

### Hacks / Exploited Systems

If an exploit has been detected by our team, your team will be notified immediately and a Paragon response team will be formed. If you become aware of an exploit, please notify us immediately, and we’ll take care of patching and updating your system immediately.

### System downtime

Every microservice is configured with horizontal pod scalers, services, and health checks to enforce uptime. If services are regularly going offline due to high load or a lack of resources, please report it to the support team, and we’ll make sure to investigate and optimize your installation.

### General bugs

If you find a bug or regression within your installation, please report it to the support team, and we’ll prioritize patching and updating your system as soon as possible.


# Infrastructure Architecture
Source: https://docs.useparagon.com/on-premise/infrastructure-architecture



## Overview

The system can be divided into multiple components:

* Network
* Kubernetes cluster
* Datastores
* Application microservices
* System monitors
* Bastion (optional)

Below you can find a diagram of the infrastructure with detailed information.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/On%20Premise%20Data%20Flow.png" alt="" />
</Frame>

### Network

The network consists of:

* **Virtual Private Cloud:** a private network that hosts all of the resources
* **Public and Private Subnets:** segmented pieces of the network used to limit ingress and egress to resources
* **Nat Gateway:** network address translation service for connecting services in private network to the public internet
* **Internet Gateway:** VPC component that allows communication between the VPC and the public internet
* **Route Tables:** rules and routes that determine network traffic to and from subnets and gateways
* **Elastic IP Addresses:** IP addresses attached to gateways and bastions
* **Load Balancer:** resource for distributing incoming network traffic to backend services and exposing them to the public internet

Some of this terminology is specific to AWS components, but the general architecture is the same for GCP and Azure customers.

### Kubernetes Cluster

Paragon microservices run within a [Kubernetes](https://kubernetes.io/) cluster, an open-source system for automating deployment, scaling, and management of containerized applications.

AWS, Azure, and GCP all provide managed Kubernetes services that offload the majority of system administration work and are the recommended method for deploying Paragon. You can learn more about each one below:

<CardGroup cols={3}>
  <Card title="AWS" href="https://aws.amazon.com/eks/" horizontal />

  <Card title="Azure" href="https://learn.microsoft.com/en-us/azure/aks/" horizontal />

  <Card title="GCP" href="https://cloud.google.com/kubernetes-engine" horizontal />
</CardGroup>

### Datastores

Paragon uses three separate datastores for storing data: Postgres, Redis, and an S3-compliant blob storage.

### Postgres

Postgres is used as the primary datastore. For multi-tenant cloud installations, three separate Postgres servers are provisioned for security and performance. On-premise installations use a single Postgres server for cost savings.

Some of the data stored in Postgres includes:

* Users, teams and organizations
* Workflow and step configurations
* Metadata on Task History
* Encrypted credentials

### Redis

Redis is used as a cache and a worker queue. For multi-tenant cloud installations, a standalone Redis server and a clustered Redis server is provisioned. On-premise installations use a single Redis standalone Redis server for cost savings.

Some of the data cached in Redis includes:

* System metrics
* Shared system locks to coordinate distributed leader election between microservices
* Expensive Postgres read operations that don’t need real-time stats (e.g. task usage)
* Deployed workflows

### S3-Compliant Blob Storage

Files are persisted in an S3-compliant blob storage provider. A custom [Minio](https://min.io/) image has been built that can connect to AWS S3, Azure Blob Storage, or GCP Cloud Storage.

Some of the files stored in the blob storage provider include:

* Workflow execution data
* User image uploads
* Cached data too large for Redis

### Application Microservices

Paragon is built using microservice architecture. The applications are deployed to the Kubernetes cluster using a [Helm chart](https://helm.sh/), which is a package manager for Kubernetes.

The applications never export or sync data outside of the installation. At most there are only 3 types of requests that hit Paragon’s cloud infrastructure:

1. **License verification.** On system bootup and on a periodic cron, the microservices will contact Paragon’s cloud instance to verify that a license is valid and an installation can run.
2. **Billing information.** When viewing your billing pages to get information on number of integrations, monthly / annual costs, etc, the microservices will contact Paragon’s cloud instance to retrieve billing information.
3. **Anonymous usage analytics.** Anonymized usage analytics are sent to Paragon’s cloud instance. This contains metrics like execution count, number of users, integrations used, etc but doesn’t contain any information identifying users or any of the data within the installation. This can be disabled.

### System Monitors

Grafana, Prometheus, and several exporters run in each environment that feeds system metrics into Prometheus. These track hundreds of metrics in the load balancers, databases, worker queues, and microservices and have fine-tuned alerts to notify us of deviations or dangerous values. These metrics are only fed into the real-time dashboards running within the installation and never leave the installation.

You can read more about these in [System Metrics and Alarms](/on-premise/system-metrics-and-alarms).

<Card title="System Metrics and Alarms" href="/on-premise/system-metrics-and-alarms" horizontal />

<Info>
  Only managed installations (e.g. cloud, single tenant, and managed on-premise) have system monitors. If you’re running an unmanaged on-premise installation, you’ll need to create your own tooling and processes for monitoring CPU and memory, error rates, etc.
</Info>

### Bastion (optional)

The services running in Paragon are primarily in the private subnets, meaning they aren’t exposed to the public internet. To connect to administrative tools like Grafana or Kibana or interact with the Kubernetes cluster via `kubectl`, a bastion server can optionally be deployed to the installation.

In managed on-premise versions, a bastion is deployed and pre-configured with `kubectl`, `helm`, and other useful CLI tools to interact with the installation.


# System Metrics and Alarms
Source: https://docs.useparagon.com/on-premise/system-metrics-and-alarms



For managed environments (cloud, single-tenant and managed on-premise), Grafana, Prometheus, and several exporters are deployed to the environment to aggregate system metrics, render them in custom dashboards and send alerts when deviations or dangerous values are detected.

Some of the systems that are monitored include:

* Load balancer
* Redis
* Postgres
* Postgres worker queue
* Redis worker queue
* Workflow executions
* Connect Proxy Requests
* Microservices

### Load balancer

Metrics and alarms include:

* Request count / response time
* HTTP response codes
* Connection count
* Bytes processed
* TLS errors

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Load%20Balancer%20Metrics%20Dashboard.png" alt="" />
</Frame>

### Redis

Metrics and alarms include:

* Uptime
* Clients
* Memory usage
* Commands executed/second
* Hits/misses per second
* Total items per database
* Network I/O
* Expiring vs non-expiring keys
* Expired/evicted
* Command calls/second

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Redis%20Metrics%20Dashboard.png" alt="" />
</Frame>

### Postgres

Metrics and alarms include:

* CPU usage
* Memory usage
* Transactions
* Locks
* Conflicts/deadlocks
* Cache hit rate

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Postgres%20Metrics%20Dashboard.png" alt="" />
</Frame>

### Postgres Worker Queue

Metrics and alarms include:

* Workers
* Throughput
* Average wait
* Job statuses
* Job duration
* Error rate
* Average wait per queue
* Workers per queue

### Redis Worker Queue

Metrics and alarms include:

* Queue length
* Queue states
* Failures by queue
* Job duration

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Redis%20Worker%20Queue%20Metrics%20Dashboard.png" alt="" />
</Frame>

### Workflow Executions

Metrics and alarms include:

* Workflow executions
* Step executions
* Workflow completion rate

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Workflow%20Executions%20Metrics%20Dashboard.png" alt="" />
</Frame>

### Connect Proxy Requests

Metrics and alarms include:

* Total request count
* Latency
* Open requests
* Status code
* Status code by integration
* Status code by credential

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20Proxy%20Requests%20Metrics%20Dashboard.png" alt="" />
</Frame>

### Microservices

Metrics and alarms include:

* Requests
* Apdex score
* Error rate
* Event loop lag
* CPU
* Heap
* Request duration


# System Requirements
Source: https://docs.useparagon.com/on-premise/system-requirements



## Getting Started

To run Paragon on-premise, you’ll need:

* A Paragon license
* A major cloud provider account (e.g. AWS, Azure, or GCP)
* A Terraform account
* A SendGrid account
* A domain name

### Paragon License

Paragon authenticates its license to our cloud at boot and periodically to ensure the license is valid and the system can run.

If you don't already have a license, please contact [sales@useparagon.com](mailto:sales@useparagon.com), and we’ll get you connected.

### Major cloud provider account

Paragon comes bundled with a set of docker images, meaning you can run it on AWS, GCP, Azure, or any other server or cloud that supports Docker and has internet connectivity. It’s most resilient when running in Kubernetes. We have first class support for AWS, Azure and GCP.

For [Managed On-Premise installations](/on-premise/choosing-a-hosting-solution), you’ll need to provide credentials to provision your account. Here are links to instructions for the AWS, Azure, and GCP:

<Card title="Configuring Managed AWS" href="/on-premise/configure/aws" horizontal />

<Card title="Configuring Managed Azure" href="/on-premise/configure/azure" horizontal />

<Card title="Configuring Managed GCP" href="/on-premise/configure/gcp" horizontal />

### Terraform Account

The infrastructure state is managed within [Terraform](https://terraform.io/), a tool for managing infrastructure as code. For single-tenant or managed on-premise, we’ll use our own Terraform account.

### SendGrid Account

[SendGrid](https://sendgrid.com/) is used for sending emails from your Paragon instance. This includes:

* Failed workflow emails
* Inviting team members
* Resetting passwords

You’ll need an API key and an email that has been approved from the SendGrid dashboard to send emails.

### Domain name

A domain name is used to create a zone and CNAMEs for the microservices. You can purchase a domain name on [Namecheap](https://namecheap.com/) or provide a subdomain for an existing domain and we’ll create CNAMEs under that subdomain.

## Infrastructure Components

You will need some additional infrastructure components including:

* Kubernetes cluster
* Postgres database
* Redis database
* S3-compliant object store

You can learn more about these on the [Infrastructure Architecture](/on-premise/infrastructure-architecture) page. To see how to configure these components for AWS using Terraform, reference the AWS on-premise repo [here](https://github.com/useparagon/aws-on-prem).


# Paragon Documentation
Source: https://docs.useparagon.com/overview

Embed in-app SaaS integrations that connect with your customers' apps.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/header-image.png" alt="" />
</Frame>

Modern businesses expect your B2B/AI SaaS application to integrate seamlessly with their existing tools. Your users may want to:

* Have your product ingest their external data/permissions for RAG (ie. Google Drive, Notion, Slack, etc.)
* Maintain a bidirectional sync between your product and their systems of records (ie. CRMs, ERPs, ticketing etc.)
* Enable your AI agents to interact with their third-party systems
* Enable pre-built, cross-platform workflows such as Slack notifications or other IFTTT integration logic

However, building and maintaining these native integrations in-house presents significant engineering challenges. Teams must handle authentication, token refresh, API monitoring, rate limiting, and multi-tenant architecture - all while maintaining security and reliability.

Paragon helps developers ship every native integrations 7x faster, letting you focus on your core product instead of integration infrastructure.

<Info>
  **New to Paragon?** Start a free 14-day trial of Paragon [here](https://dashboard.useparagon.com/signup).
</Info>

## Platform Overview

### Core Platform

Benefits you’ll get with every integration you build on Paragon:

* White-labeled & embedded [Connect Portal](/connect-portal/) for your users to enable and configure integration settings
* [130+ pre-built connectors](/resources/integrations) plus a [custom integration builder](/resources/custom-integrations)
* Fully managed [authentication](/getting-started/displaying-the-connect-portal) across all integrations
* Built-in [monitoring and observability](/monitoring/viewing-task-history)
* Flexible [deployment](/on-premise/choosing-a-hosting-solution): cloud or on-premise

[Get started building Integrations by installing the SDK →](/getting-started/introduction)

### Integration Products

Purpose-built products to implement your desired integration use case.

<CardGroup>
  <Card title="ActionKit" img="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Docs%20Header%20ActionKit%20Narrow.png" href="/actionkit">
    One API to instantly give your AI agent 1000+ integration tools/actions, including:

    <br />- Gmail: Send Email

    <br />- Google Calendar: Get Calendar Availability

    <br />- Salesforce: Create Contact
  </Card>

  <Card title="Workflows" img="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Docs%20Header%20Workflows%20Narrow.png" href="/workflows/building-workflows">
    Build event-based asynchronous jobs for orchestrating integration logic, such as:

    <br />- Data ingestion pipelines (e.g. ingest files from Google Drive or ingest full CRM schema)

    <br />- Bidirectional sync (e.g. when a new ticket is created in Jira, sync it to your application)

    <br />- Building complex automations (e.g. IFTTT logic)
  </Card>
</CardGroup>


# Build and Push
Source: https://docs.useparagon.com/paragraph/build-and-push



## Building your project locally

After defining a workflow, you can use the `para` CLI to validate and build the workflow to prepare to upload it to the Paragon dashboard. Building workflows creates a subfolder in your project called `out/` with auto-generated files.

You can build all workflows in your project with the `build` command:

```bash
para build
```

If your build is successful, you will see:

```bash
✓ Typescript project successfully built.
✓ Created build in out/build.json file.
```

Otherwise, see [Diagnosing build errors](/paragraph/build-and-push#diagnosing-build-errors) below to address build errors.

## Pushing your project to Paragon

<Info>
  Try [Git Sync](/paragraph/setting-up-git-sync) to configure an integration between your Paragraph files stored in a Git repository and your Paragon project.

  Git Sync keeps your Paragon project and Paragraph repository automatically in-sync.
</Info>

To upload on a one-off basis to your Paragon project, use the `push` command in the CLI.

```bash
para push
```

* If your workflow has previously been pushed to your Paragon project, this command will *overwrite* any changes that have been made to this workflow with the current contents of the Paragraph file that you are pushing.
* Workflows cannot be pushed to Staging or Production Release Environments. [Create a Release](/deploying-integrations/release-environments#creating-a-release) to move integration updates from Development -> Staging -> Production.

**Note: Paragraph projects are linked to the original project they were initialized from and cannot be changed.**

* Currently, you cannot use the `push` command to push or "copy" a project to a different Project ID. If your team requires this functionality, please reach out to discuss your needs and to get early access to a related feature we are working on: [support@useparagon.com](mailto:support@useparagon.com).

  * You can [create a Release](/deploying-integrations/release-environments#creating-a-release) to move integration updates from Development -> Staging -> Production.

* Do not attempt to modify `project.json` or `build.json` to do this, as you may inadvertently cause workflows to be moved across projects.

## Pulling changes from Paragon

To pull changes from the dashboard on a one-off basis to your Paragon project, **first commit all pending changes in your local repository**, and then use the `pull` command in the CLI.

```bash
para pull
```

* Any uncommitted changes may be overwritten by the `pull` command.
* As with the `push` command, any integrations or workflows that are absent from the source (your Paragon dashboard in the `pull` case) will be removed from the destination (the local repository). The best way to reconcile these types of removals is with [Git Sync](/paragraph/setting-up-git-sync), which will use your commits to sequence these changes.

## Diagnosing build errors

The build command operates in 2 phases:

1. A TypeScript compilation runs to check types for all of your workflows and integration configurations.

2. The compilation result is evaluated to produce a build artifact to upload to Paragon, in `out/build.json`.

If you are encountering TypeScript compilation errors, they will appear as follows:

```bash
src/integrations/hubspot/workflows/newWorkflow.ts:31:25 - error TS2554: Expected 1 arguments, but got 0.

31     const triggerStep = new EventStep();
                           ~~~~~~~~~~~~~~~
Found 1 error(s).
```

These errors are also visible in your editor, if you have a TypeScript language server running. TypeScript errors can be indicative of one of the following issues:

| Problem                                                                                                                            | Resolution                                                                                                                                                                                                                                                                                                                                                                                    |
| ---------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Missing or invalid parameters** <br /> Steps have incomplete configurations, which does not produce a valid workflow.            | Visit the workflows with incomplete steps and correct their configuration. <br /><br /> If some workflow steps are intentionally incomplete (*e.g.* the workflow is a draft), you can prefix the filename with `~` to exclude it from the build.                                                                                                                                              |
| **Incorrect step output path referenced** <br /> A step requires output from other steps, but the path it references is not valid. | Visit the workflows with invalid step output paths and correct references to `.output`. <br /><br /> Use the TypeScript-powered autocomplete to help identify available properties.                                                                                                                                                                                                           |
| **Function step code is using unknown properties**                                                                                 | Because Function step code in the dashboard does not use TypeScript, errors can appear in your exported Function steps about unsafely accessing properties in untyped values. <br /><br /> These errors can help refactor your Function step code to be type-safe, but you can ignore them by using `// @ts-ignore` above lines that are causing errors.                                      |
| **Missing types from `@useparagon/integrations`**                                                                                  | Integration-specific dependencies may be missing from your project. Run `para install` with the CLI to pull in missing dependencies.                                                                                                                                                                                                                                                          |
| **Error: `persona.meta.js` is not found in project**                                                                               | This error may indicate that you have incorrectly imported modules in a workflow. <br /><br /> Check your import statements in workflows to verify that you are using relative paths instead of absolute paths: <br /> ✅ `"../../../events/newTask"` <br /> ❌ `"src/events/newTask"` <br /><br /> If your imports look correct, try following the steps below to clear stale build artifacts. |

If you are encountering many TypeScript compilation errors that should be ignored, you can attempt a build that suppresses these types of errors with the `--skip-type-errors` flag:

```bash
para build --skip-type-errors
```

If you are encountering errors *after* the TypeScript build succeeds, verify that your error is not caused by stale build artifacts:

* Delete the `dist/` folder.
* Delete the `tsconfig.tsbuildinfo` file.

These stale build artifacts may cause evaluation errors after deleting workflows or integrations.


# Defining App Events
Source: https://docs.useparagon.com/paragraph/defining-app-events

Learn how to define App Event schemas in Paragraph projects.

[App Events](/workflows/triggers#app-events) are JSON payloads that can be used to trigger workflows from your application, using the SDK or API. In Paragraph, you can define an App Event with a file that declares its name and schema.

### Creating a new App Event

App Events reside in the `src/events` folder of your Paragraph project. You can create a new file, like `src/events/newTask.ts`, to define a new type of App Event.

```ts
import { IEventInit } from '@useparagon/core/event';

export type EventSchema = {
  title: 'Example Title';
  description: 'Example Description';
  storyPointEstimate: 0;
};

const event: IEventInit<EventSchema> = {
  /**
   *  name of event
   */
  name: 'New Task',

  /**
   * schema of event payload
   */
  schema: {
    title: 'Example Title',
    description: 'Example Description',
    storyPointEstimate: 0,
  },
};

export default event;
```

The file must export a default object that includes the name of the event (which will be used in the SDK and the API when App Events are sent) and an example payload.

### Using an App Event in a Workflow

To use the App Event in a workflow file, import the event into the Workflow:

```ts
import newTaskEvent from "../../../events/newTask";
```

<Warning>
  Currently, relative imports are required to be used from Workflow files. Avoid using absolute imports, e.g. `src/events/newTask`.
</Warning>

Then, you can pass the event into an `EventStep` trigger as the first step in the Workflow:

```ts
const triggerStep = new EventStep(newTaskEvent);
```


# Defining Integrations
Source: https://docs.useparagon.com/paragraph/defining-integrations

Learn how to define and configure workflows as code within a Paragraph project.

## Project Structure

The folder structure of your Paragraph project defines what integrations are available.

The **src/integrations/** folder from your project root (the location of your paragon.json file) defines what integrations are available:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/paragraph-fs.png" alt="" />
</Frame>

Each subfolder in the **src/integrations/** folder contains:

* `workflows/` subfolder for each workflow for the integration.
* `config.ts` configures the display settings for the [Connect Portal](/connect-portal/connect-portal-customization) used for this integration, including the description and overview text. See more below in [Configuring an Integration](/paragraph/defining-integrations#configuring-an-integration).
* `inputs.ts` configures integration-level [User Settings](/connect-portal/workflow-user-settings) exposed to your customers in the Connect Portal. For example, if you need to prompt your users to select a Field Mapping for Salesforce or a Destination Folder for Google Drive, you can define a User Setting. See more below in [Configuring User Settings](/paragraph/defining-integrations#configuring-user-settings).

## Adding an Integration

To add an integration, you can use the CLI wizard:

```bash
para new integration
```

The CLI will prompt you to search the integration you want to use and install the necessary dependencies.

## Configuring an Integration

The **config.ts** file in any integration folder describes the Connect Portal configuration.

**Example:**

```ts
import { IIntegrationConfig } from '@useparagon/core/integrations';

export const config: IIntegrationConfig = {
	description: "Sync records from Microsoft Dynamics",
	overviewText: `Connect your Microsoft Dynamics 365 account and sync your Dynamics 365 accounts, contacts, leads, or opportunities. Enable your sales team to close more deals by keeping your Dynamics 365 CRM records up to date - without manual data entry.
  
Our Dynamics 365 integration enables you to:  
  
- Automatically create or update records in Dynamics 365
- Sync records from Dynamics 365
- Receive updates when a record in Dynamics 365 is created or updated`,
}
```

The configuration includes the following fields:

* Short description of the integration
* An overview of the integration, as a string of Markdown-formatted text

## Configuring User Settings

The **inputs.ts** file in any integration folder defines integration-level [User Settings](/connect-portal/workflow-user-settings) exposed to your customers in the Connect Portal.

For example, if you need to prompt your users to select a Field Mapping for Salesforce or a Destination Folder for Google Drive, you can expose these options in the Connect Portal.

**Example:**

```ts
import { createInputs } from '@useparagon/integrations/salesforce';

const integrationInputs = createInputs({
    "fieldMapping": {
        id: "fieldMapping",
        type: 'field_mapping',
        title: "Map a custom Salesforce Object to an object in TaskLab",
        required: true,
    }
});

export default integrationInputs;
```

Define inputs as entries in the object passed to the `createInputs` function.

* The key (`"fieldMapping"`) is how you will reference this input in other Paragraph workflows.

* The `id` property of the object is how you will reference the value of this User Setting in the [SDK or API](/apis/users) and must be a stable identifier. Changing this property will result in existing selections for this setting losing their values in your customers' Connect Portal.

* The `type` property of the object refers to the type of User Setting that is shown. Standard options include `"text"`, `"boolean"`, `"number"`, and `"password"`.

  * Integration-specific options like `"field_mapping"` are defined in the integration-specific types and can be found with your editor autocomplete (e.g. Ctrl-space in VS Code).

* The `title` property of the object is what will be displayed in the Connect Portal for your customers, to explain usage for this User Setting.

* Optionally, include:

  * `required`: Specify if this User Setting will be required for input by your customers.

  * `tooltip`: Specify a tooltip that will explain usage of this input for your customers.

*Workflow-level* User Settings (settings specific to a particular workflow) can be defined within Workflows with the same format, in the `inputs` property of the workflow file.

## Custom Integrations

To define a [Custom Integration](/resources/custom-integrations) in your project, create a subfolder with the name `custom.[integrationName]`, where `integrationName` is the lowercased, alphanumeric name of the integration (for example: "GitHub Enterprise" -> `custom.githubenterprise`).

<Info>
  Any changes to the `name` property of your Custom Integration will affect the subfolder name and string used in `paragon.connect()`.
</Info>

In this folder, add the following `config.ts` file to configure the Custom Integration and its authentication and display settings:

```ts
import {
  ICustomIntegrationConfig,
  createConfigInputs,
} from '@useparagon/core/integration';

export const inputs = createConfigInputs({});

const config: ICustomIntegrationConfig = {
  name: '',
  description: '',
  accentColor: '#000000',
  authenticationType: '', // oauth | basic | oauth_client_credential
  
  // For OAuth
  authorizationUrl: ``,
  accessTokenUrl: ``,
  scopes: '',
  includeClientIdAndSecrets: false,
  usePKCEInCodeExchange: true,
  
  apiBaseUrl: ``,
  testEndpointPath: ``,
  authorization: {
    type: 'bearer',
    token: `{{settings.oauthAccessToken}}`,
  },
};

export default config;
```

You'll also need to add an `inputs.ts` file to add any User Settings for this integration:

```ts
import { createInputs } from '@useparagon/core/inputs';

const integrationInputs = createInputs({});

export default integrationInputs;
```

When defining workflows for Custom Integrations, you can import `ICustomIntegration` from the core library to get started:

```ts
import {
  // ...
  ICustomIntegration,
  // ...
} from '@useparagon/core';

export default class extends Workflow<
  ICustomIntegration,
  IPersona<typeof personaMeta>,
  DefaultInputToResultMap
> {
  define(
    integration: ICustomIntegration,
    context: IContext<DefaultInputToResultMap>,
    connectUser: IConnectUser<IPersona<typeof personaMeta>>,
  ) {
  }
}
```


# Defining Workflows
Source: https://docs.useparagon.com/paragraph/defining-workflows

Learn how to define workflows as code within a Paragraph project.

Paragraph workflows are TypeScript or JavaScript files that define a workflow, including its step configuration and control flow.

Workflows authored in Paragraph are fully compatible with the Paragon dashboard, for viewing in Task History and the Workflow Editor.

## Creating a workflow

You can create a new workflow by running the following CLI command:

```bash
para new workflow --integration [integration name, e.g. salesforce]
```

The CLI will prompt you to title your workflow. Once you have completed this prompt, the CLI will create a new TypeScript file in the `workflows/` folder of your selected integration:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/syncContactsFromSalesforcets-tasklab-integrations.png" alt="" />
</Frame>

An example of a simple workflow to sync contacts from Salesforce is below:

```ts
/**
 * Sync contacts from Salesforce workflow implementation
 */
export default class extends Workflow {
  define(
    integration: ISalesforceIntegration,
    context: IContext<InputResultMap>,
    connectUser: IConnectUser<IPersona<typeof personaMeta>>,
  ) {
    // Define steps used in workflow
    const triggerStep = integration.triggers.recordCreated({
      recordType: 'Contact',
    });

    const searchByEmailStep = new RequestStep({
      url: `https://api.myapp.io/api/contacts?email=${triggerStep.output.contact.email}`,
      method: 'GET',
    });

    const contactExistsCondition = new ConditionalStep({
      if: Operators.ArrayIsNotEmpty(searchByEmailStep.output.response.body.data),
    });

    const createContactStep = new RequestStep({
      url: `https://api.myapp.io/api/contacts`,
      method: 'POST',
      body: { user_id: connectUser.userId, contact: triggerStep.output.result },
      bodyType: 'json',
    });

    const updateContactStep = new RequestStep({
      url: `https://api.myapp.io/api/contacts`,
      method: 'PATCH',
      body: { user_id: connectUser.userId, contact: `${triggerStep.output.result}`, contact_id: `${searchByEmailStep.output.response.body[0].id}` },
      bodyType: 'json',
    });

    // Orchestrate steps
    triggerStep
      .nextStep(searchByEmailStep)
      .nextStep(
        contactExistsCondition
          .whenTrue(updateContactStep)
          .whenFalse(createContactStep),
      );

    return this.register({ triggerStep, searchByEmailStep, contactExistsCondition, createContactStep, updateContactStep });
  }
}
```

This is equivalent to the following workflow structure in the workflow dashboard:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Paragon]%202024-03-24%20at%2010.47.18%20PM@2x.png" alt="" />
</Frame>

## Defining steps

In the `define` function of a workflow, steps can be created and configured. A step can be created in one of the following ways:

```ts
// Constructing a new standard Step
const request = new RequestStep({
    ...
});

// Calling an Integration Action or Integration Trigger
const getRecords = integration.actions.searchRecords({
    ...
}, {})
```

* **Standard steps and triggers** (App Event Trigger, Request Trigger, Cron Trigger, Function, Request, Response, Conditional, Fan Out, and Integration Request) must be imported from the `@useparagon/core` library and configured to include the parameters that are required to run the step.
* **Integration-specific Actions or Triggers** are available in the `integration` parameter passed to the `define` function.

All steps can use the following options in the constructor (or the second parameter for Integration Actions):

```ts
{
    // If true, this step will use Auto-Retry on failures
    autoRetry: true,

    // If true, this step will allow the workflow to continue if it fails,
    // emitting the error as output
    continueWorkflowOnError: true,

    // The step title, as displayed in the Workflow Editor
    description: "Step Title for Workflow Editor"
}
```

For a full reference of steps, see our API documentation for the `@useparagon/core` package: [@useparagon/core Glossary](/paragraph/reference/useparagon-core).

#### Referencing step outputs

Steps can be declared and configured in the `define()` function in any order. You will define an explicit flow/ordering for the steps using orchestration functions: see [Orchestrating steps](/paragraph/defining-workflows#orchestrating-steps).

To reference step output in another step, simply access the `.output` property of a step or trigger:

```ts
const triggerStep = integration.triggers.recordCreated({
  recordType: 'Contact',
});

const searchByEmailStep = new RequestStep({
  url: `https://api.myapp.io/api/contacts?email=${triggerStep.output.contact.email}`,
  method: 'GET',
  params: {},
  headers: {},
  description: 'Search By Email',
});
```

For convenience, you can interpolate step outputs into strings with the template string format as in the example above. This mirrors the `{{1.output.contact.email}}` syntax of the Workflow Editor. For more advanced transformations on outputs, use a Function step.

#### Referencing User Settings and Environment Secrets

To reference User Settings or Environment Secrets as inputs, use the `context` parameter of the `define()` function.

The `.getEnvironmentSecret` function will use the [Environment Secret](/workflows/environment-secrets) value stored at a specified key.

```ts
const requestStep = new RequestStep({
  url: `https://api.myapp.io/api/contacts`,
  method: 'GET',
  headers: {
    Authorization: `Bearer ${context.getEnvironmentSecret("API_KEY")}`
  },
});
```

The `.getInput` function will get the value of a User Setting. You can reference integration-level User Settings by importing from the integration's `inputs.ts` file or workflow-level User Settings with `this.inputs`.

```ts
// Import integration-level User Settings
import inputs from '../inputs';
//...

const searchRecordsStep = integration.actions.searchRecords({
    // Reference integration-level User Settings
    recordType: context.getInput(inputs.fieldMapping).objectName,
    filterFormula: Operators.StringContains(
        "OpportunityStage",
        // Reference workflow-level User Settings
        context.getInput(this.inputs.opportunityStage)
    )
}, {});
```

#### Referencing User Metadata or IDs

To reference [User Metadata](/apis/users#using-metadata-in-workflows) or your Connected User ID, use the `connectUser` parameter of the `define()` function.

```ts
const updateContactStep = new RequestStep({
  url: `https://api.myapp.io/api/contacts`,
  method: 'PATCH',
  params: {},
  headers: {},
  body: {
    user_id: connectUser.userId,
    user_email: connectUser.meta.Email,
    contact: `${triggerStep.output.result}`,
    contact_id: `${searchByEmailStep.output.response.body[0].id}`,
  },
  bodyType: 'json',
});
```

The type for User Metadata comes from the `persona.meta.ts` file at the root of your Paragraph `src/` folder. You can export an example metadata object from that file to expose available fields.

#### Conditional logic

Some steps will require you to define `ConditionInput` parameters, such as the Conditional Step or Stop Condition for Request Step Pagination.

When you need to define a condition, start by importing the `Operators` from `@useparagon/core`:

```bash
import * as Operators from '@useparagon/core/operator';
```

Operators contain conditions (like "string equals" or "number greater than") that can be chained together with AND or OR conditions. Paragon requires conditions to be in "disjunctive normal form" when chained, meaning that all conditions are "ORs of ANDs."

For example:

```ts
const shouldUpdateCondition = new ConditionalStep({
  if: Operators.Or(
    Operators.And(
      Operators.ArrayIsNotEmpty(requestStep.output.response.body.data),
    ),
  ),
  description: 'Update or Create',
});
```

## Orchestrating steps

After defining or importing steps, the workflow requires an *orchestration* that describes how the steps are connected in the control flow.

The basic way to orchestrate step is to use the `.next()` function, available for every step. For example:

```ts
// Request -> Function -> Response
requestStep
    .next(functionStep)
    .next(responseStep);
```

### Conditional branches

Conditional steps have additional functions, `.whenTrue()` and `.whenFalse()` for creating execution branches when a condition is True or False.

```ts
ifContactExistsStep
    .whenTrue(updateRecord)
    .whenFalse(createRecord)
.next(responseStep)
```

Conditional steps do not need to specify `.whenTrue` or `.whenFalse` functions. If unspecified, the respective True/False branch will be empty.

### Fan out branches

Fan Out steps have an additional function, `.branch`, for creating a branch of execution that runs in parallel over an array of data.

Note that the branch function is *not* chainable.

```ts
fanOut
    .branch(
        transformRecord
            .next(pickProperties)
            .next(updateRecord)
    ).next(responseStep)
```

## Reusing steps

You can reuse steps or configuration by creating a shared top-level directory in your project `src/` folder (the name can be anything *except* `integrations`).

For example, you can create a `common/` folder within `src/`:

```plain
src/
+ ├─ common/
+ │  ├─ apiRequest.ts
  ├─ integrations/
  │  ├─ salesforce/
  │  │  ├─ workflows/
  │  │  ├─ config.ts
```

You can export step definitions from common files as in the example below. To access `execution` data, you can import the static `Execution` class from the `@useparagon/workflow` library:

```ts
// src/common/apiRequest.ts
import { Execution, RequestStep } from '@useparagon/core';

export const apiRequest = (path) => new RequestStep({
    url: `https://myapi.example.com${path}`,
    authorization: {
        type: "BEARER",
        token: Execution.getEnvironmentSecret("API_PRIVATE_KEY")
    }
});
```

Workflow files are able to import and reuse steps from top-level folders locally.

```ts
// src/integrations/salesforce/workflows/syncNewRecords.ts
import { Step, Trigger } from '@useparagon/workflow';
import { SalesforceWorkflow } from '@useparagon/integrations/salesforce';
import { apiRequest } from '../../../common/apiRequest';

export default class ExampleWorkflow extends SalesforceWorkflow {
    define: (salesforce, execution, user) => {
       	// ...
       	const apiRequestWhenTrue = apiRequest('/success');
       	const apiRequestWhenFalse = apiRequest('/failure');

	const stateMachine = event
		.next(stringContainsParagonDomain)
		.whenTrue(apiRequestWhenTrue)
		.whenFalse(apiRequestWhenFalse);
	
	this.register(stateMachine, { event, functionStep, apiRequestWhenTrue, apiRequestWhenFalse });
    }
}
```


# Getting Started with Paragraph
Source: https://docs.useparagon.com/paragraph/getting-started

Paragraph allows you to author and maintain Paragon integrations as code, which can be synced with a Git repository to track revisions over time.

<Frame>
  ![Page cover image](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Frame%201000002911%20\(2\).png)
</Frame>

With Paragraph, your engineering team can:

* Define all your integrations powered by Paragon as code, while still being able to view, edit, and debug from the dashboard
* Version control all changes to your integrations in a Git repository, which can be used to bring code review, unit testing, and CI/CD to your development process
* Use more advanced abstractions in Workflows, including reusable steps or modularizing workflow logic across integrations

<Frame>
  <iframe width="560" height="315" src="https://www.youtube.com/embed/eD2a7LlCjQM?si=yZFNML9EjvuzK5Dq" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />
</Frame>

### Overview

Paragraph is a TypeScript-based framework for building your Paragon integrations in code. In a Paragraph project, you'll define:

* Integrations that are available to your users
* [Connect Portal configuration](/connect-portal/connect-portal-customization), including [User Settings](/connect-portal/workflow-user-settings) and [Field Mappings](/connect-portal/field-mapping)
* [Workflows](/workflows/building-workflows), including [Triggers](/workflows/triggers) and Steps

Paragraph projects can be packaged and sent to Paragon for deployment using the Paragon CLI or [from your CI/CD](/paragraph/setting-up-git-sync).

You can also continue to use the Paragon dashboard to edit your projects. By [setting up Git Sync](/paragraph/setting-up-git-sync), you can sync back changes made in the Paragon dashboard to your Paragraph project, stored in a Git repository.

<Accordion title="What isn't defined in a Paragraph project?">
  Paragraph represents your integration business logic and doesn't include some types of configuration values that are specified in the dashboard.

  The following configuration values must be maintained using the dashboard and will have no representation in your Paragraph project:

  * [Environment Secrets](/workflows/environment-secrets): Sensitive values that are used in Workflows are defined and managed in the dashboard, in Project Settings.

  * [Signing Keys](/getting-started/installing-the-connect-sdk#setup-with-your-own-authentication-backend): The private key used to sign Paragon User Tokens is generated and managed in the dashboard, in Project Settings.

  * [Client ID and Secret](/getting-started/adding-an-integration#connect-your-developer-app-to-paragon): Any sensitive credentials representing your OAuth app with an integration are managed in the Settings tab of any integration.

  * Scopes: Scopes requested by your OAuth app are also managed in the Settings tab of any integration.

    * For Custom Integrations, scopes are included in the Paragraph config file.

  * [Team Members](/managing-account/teams): Users and roles that have access to your Paragon organization are managed in the dashboard, in Organization Settings.
</Accordion>

### Installing the CLI

#### Installing the CLI and authorizing your account

To begin setting up Paragraph project, you'll need to install the Paragon CLI. You can install the CLI globally with npm:

```bash
npm install -g @useparagon/cli
```

Once installed, the CLI will be available as the alias `para`. See for the full reference for available CLI commands.

You can link your Paragon account to the CLI by running:

```bash
para auth login
```

<Accordion title="Using an on-prem environment?">
  You can authenticate to the CLI from your on-premises environment with the `--host` flag:

  ```bash
  para auth login --host https://dashboard.yourhost.paragon.so
  ```
</Accordion>

Follow the CLI prompt to login to Paragon and authorize the CLI. When you successfully log in, you should see:

```bash
Logged in as [Your Name] (yourname@email.com)
```

Authenticating with the CLI generates a CLI Key which is stored locally in `~/.paragon/credentials.json`. You can view and revoke CLI Keys in the dashboard in; **Settings > CLI Keys**.

### Starting a Paragraph Project

#### Exporting from Paragon

You can export a Paragraph project from your Paragon dashboard by using the CLI:

```bash
para init --create-from-existing
```

A project selector will appear to choose a project to export as a Paragraph project.

#### Initializing an empty project

Alternatively, you can initialize a new Paragon project with the CLI:

```bash
para init new-project-name
```

#### Cloning an existing project

If you are cloning an existing Paragraph repository that a teammate started, make sure to install dependencies in the project:

```bash
git clone git@github.com:useparagon/integrations.git
para install
```

### Creating a new integration

Create a new integration in Paragraph with the CLI:

```bash
para new integration
```

A prompt will appear to select the integration you'd like to add. Once selected, a new folder for the integration will appear in your `src/` folder.

*Learn more about how to configure an integration in *[*Defining Integrations*](/paragraph/defining-integrations)*.*

### Creating a new workflow

Start building a new workflow in an existing integration with the CLI:

```bash
para new workflow --integration salesforce
```

Specify the name of the integration folder, e.g. `salesforce` in the `--integration` flag. A prompt will appear to title the workflow. A new TypeScript file will appear in the `src/integrations/[integration]` subfolder.

*Learn more about workflows and how to define and orchestrate steps in *[*Defining Workflows*](/paragraph/defining-workflows)*.*

### Building and pushing

Once you are ready to push your changes back to the Paragon dashboard, you can use the CLI to validate your project and push to Paragon:

```bash
para build
```

*Learn more about handling build errors in *[*Build and Push*](/paragraph/build-and-push)*.*

Once you see a message confirming that a build has been created, use the CLI to upload to the Paragon platform:

```bash
para push
```

<Info>
  Try [Git Sync](/paragraph/setting-up-git-sync) to configure an integration between your Paragraph files stored in a Git repository and your Paragon project.

  Git Sync keeps your Paragon project and Paragraph repository automatically in-sync.
</Info>


# Reference
Source: https://docs.useparagon.com/paragraph/reference



<CardGroup cols={2}>
  <Card title="@useparagon/core Glossary" href="/paragraph/reference/useparagon-core" horizontal />

  <Card title="Update Guide" href="/paragraph/reference/update-guide" horizontal />
</CardGroup>


# Update Guide
Source: https://docs.useparagon.com/paragraph/reference/update-guide



## Updating Paragraph

To update the Paragraph to the latest version, simply run the following command in your terminal:

```bash
npm install -g @useparagon/cli
para install --sync-versions
```


# @Useparagon/Core Glossary
Source: https://docs.useparagon.com/paragraph/reference/useparagon-core

Learn about the different types Paragon supports

## Triggers

### CronStep

Use `CronStep` to start the workflow on a periodic schedule. [Scheduler](/workflows/triggers#scheduler)

**Inputs**

| Parameter  | Type     | Description                                                                                                                                                     |
| ---------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `cron`     | string\* | The cron expression of the schedule for this trigger, from seconds to weeks. <br /> **Example**: `0 0 9 * * *` (every day at 9:00 AM)                           |
| `timezone` | string   | The timezone to use for the cron expression, expressed as an IANA timezone string. Defaults to `America/Los_Angeles`. <br /> **Example**: `Etc/Universal` (UTC) |

**Example**

```js
/**
 * Example: Scheduler Trigger configured to run a workflow every day at 9am PST.
 */
const triggerStep = new CronStep({
  cron: '0 0 9 */1 * *',
  timeZone: 'America/Los_Angeles',
});
```

**Outputs**

The CronStep does not produce any usable output.

### EndpointStep

Use `EndpointStep` to trigger this workflow via an HTTP request. [Request](/workflows/triggers#request)

**Inputs**

| Parameter               | Type                | Description                                                                                                                                                                                                                                                  |
| ----------------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `allowArbitraryPayload` | boolean\*           | If true, this Request trigger will accept any type of request. If false, this Request trigger will require `headerValidations`, `bodyValidations`, and `paramValidations` to be defined.                                                                     |
| `headerValidations`     | HeaderValidation\[] | An array of validations to use on the headers for requests to this Request trigger. This can be used to validate the presence of required headers to inbound requests. <br /> **Example**: `[{ key: "X-Tasklab-Id", required: true }]`                       |
| `bodyValidations`       | BodyValidation\[]   | An array of validations to use on body fields for requests to this Request trigger. This can be used to validate the presence or type of data in the body of inbound requests. <br /> **Example**: `[{ key: "userId", dataType: "STRING", required: true }]` |
| `paramValidations`      | ParamValidation\[]  | An array of validations to use on the URL parameters for requests to this Request trigger. This can be used to validate the presence of required parameters to inbound requests. <br /> **Example**: `[{ key: "query", required: true }]`                    |

**Example**

```js
/**
 * Example: Request Trigger configured with parameter, header, and body validations.
 */
const triggerStep = new EndpointStep({
  allowArbitraryPayload: false,
  paramValidations: [
    {
      key: 'key',
      required: true,
    },
  ] as const,
  headerValidations: [
    {
      key: 'Content-Type',
      value: 'application-json',
    },
  ] as const,
  bodyValidations: [
    {
      key: 'email',
      dataType: 'STRING',
      required: true,
    },
    {
      key: 'first_name',
      dataType: 'STRING',
      required: true,
    },
    {
      key: 'last_name',
      dataType: 'STRING',
      required: true,
    },
  ] as const,
});
```

**Outputs**

Access the output of a Request trigger with `requestTrigger.output.request`. The below fields are fields of the `.request` property.

| Field     | Type                  | Description                                                                                                                                                                                                                                                                          |
| --------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `headers` | object                | An object of the HTTP headers received in the request. Access these properties in lowercased format, e.g. `requestTrigger.output.request.headers['content-type']`.                                                                                                                   |
| `body`    | any                   | An object or string of the HTTP body received in the request. The `body` will be an object when the Content-Type is `application/json`, `multipart/form-data`, or `application/x-www-form-urlencoded`. Otherwise, it will be attempted to be parsed as a string or File (see below). |
| `params`  | object                | An object of the URL parameters received in the request.                                                                                                                                                                                                                             |
| `file`    | FileValue / undefined | If the HTTP body refers to a file, the file contents will be available as a `FileValue` object. Otherwise, this property will resolve to `undefined`.                                                                                                                                |

### EventStep

Use `EventStep` to trigger this workflow with an [App Event](/workflows/triggers#app-events).

**Inputs**

To construct an App Event Trigger, first import your App Event into the Workflow:

```js
import taskCreated from '../../../events/newTask';
```

Then, pass this import to the constructor of `EventStep`:

```js
const trigger = new EventStep(taskCreated);
```

Because App Events can be shared across different workflows and integrations, they are required to be defined in the `src/events` folder of your Paragraph project.

**Example**

```js
/**
 * Example: App Event Trigger configured with an event and object mapping.
 */
const triggerStep = new EventStep(event, {
  objectMapping: ``,
});
```

**Outputs**

Access the output of an App Event trigger with `appEventTrigger.output`. The output will match the schema of the App Event that this trigger uses.

### IntegrationEnabledStep

Use `IntegrationEnabledStep` to trigger this workflow when a user enables the integration.

**Inputs**

This trigger does not use any parameters.

**Example**

```js
/**
 * Example: Integration Enabled Trigger with default configuration.
 */
const triggerStep = new IntegrationEnabledStep();
```

**Outputs**

The IntegrationEnabledStep does not produce any usable output.

## Steps

### ConditionalStep

A Conditional branching step to allow for control flow in Workflows.

**Inputs**

| Parameter | Type               | Description                                                                                                                                                                                                                                       |
| --------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `if`      | ConditionalInput\* | The condition to evaluate for determining whether or not to proceed into the "true" or "false" branch beneath this step. <br /> Learn more about defining ConditionalInputs: [Conditional logic](/paragraph/defining-workflows#conditional-logic) |

**Example**

```js
/**
 * Example: Conditional Step to check if an item is in a list using operators.
 */
const itemInListStep = new ConditionalStep({
  if: Operators.Or(
    Operators.And(Operators.StringContains('["a","b","c"]', 'a')),
    Operators.And(
      Operators.StringContains('["a","b","c"]', 'c'),
      Operators.StringDoesNotContain('["a","b","c"]', 'd'),
    ),
  ),
  description: 'Item in List?',
});
```

**Outputs**

| Parameter        | Type           | Description                                                         |
| ---------------- | -------------- | ------------------------------------------------------------------- |
| `selectedChoice` | `"Yes" / "No"` | The branch that was chosen when this ConditionalStep was evaluated. |

### DelayStep

A step to pause the workflow for a fixed amount of time.

**Inputs**

| Parameter | Type                                       | Description                                                                  |
| --------- | ------------------------------------------ | ---------------------------------------------------------------------------- |
| `value`   | number\*                                   | How long to pause the workflow for, measured by the `unit` parameter.        |
| `unit`    | `"SECONDS" / "MINUTES" / "HOURS" / "DAYS"` | The unit of time to use when delaying the workflow. Defaults to `"MINUTES"`. |

**Example**

```js
/**
 * Example: Delay Step delaying a workflow execution for 5 minutes
 */
const delayStep = new DelayStep({
  unit: 'MINUTES',
  value: 5,
  description: 'Delay workflow for 5 minutes',
 });
```

**Outputs**

The DelayStep does not produce any usable output.

### FanOutStep

A step to map over a set (array) of data in parallel, for e.g. data transformation or batch uploads.

**Inputs**

| Parameter  | Type   | Description                                   |
| ---------- | ------ | --------------------------------------------- |
| `iterator` | any\[] | A set of data to iterate over in the Fan Out. |

```js
/**
 * Example: Fan Out step iterating through each item in an array from a previous step.
 */
const eachItemStep = new FanOutStep({
  description: 'Each Item',
  iterator: functionStep.output.result,
});
```

**Outputs**

Access one instance of a Fan Out step with `fanOutStep.output.instance`. This can only be used by steps that are in this Fan Out's branch (see: [Fan out branches](/paragraph/defining-workflows#fan-out-branches)).

| Field      | Type | Description                                                                |
| ---------- | ---- | -------------------------------------------------------------------------- |
| `instance` | any  | An item of the `iterator` property that is being processed in this branch. |

### FunctionStep

A JavaScript function step.

**Inputs**

| Parameter    | Type       | Description                                                                                                                                                                                                                                                                                                                                                                                |
| ------------ | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `code`       | Function\* | The function to run. This function must have the signature `function(parameters, libraries)` and must be *self-contained*, meaning that it cannot reference JavaScript values outside of the function body. To pass execution data through this step, use the `parameters` object. <br /> The list of `libraries` can be found in: [JavaScript Libraries](/resources/javascript-libraries) |
| `parameters` | object\*   | Parameters from other step outputs to inject into the function.                                                                                                                                                                                                                                                                                                                            |

**Example**

```js
/**
 * Example: Function Step using IFunctionStepParameters.
 * Here the function code is provided as a string, which will be dynamically executed.
 */
const functionStepParams: IFunctionStepParameters = {
  id: 'funcStep',
  name: 'String Code Function',
  code: `
    function execute(params, libraries) {
      // Example: Reverse a given string.
      return params.input.split('').reverse().join('');
    }
    module.exports = execute;
  `,
  parameters: [{ key: 'input', value: 'reverse me' }],
  autoRetry: false,
  continueWorkflowOnError: false
};
```

**Outputs**

Access the result of an Function step with `functionStep.output.result`.

| Field    | Type | Description                                                                                                                                                                                              |
| -------- | ---- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `result` | any  | The return result of `code` after evaluation with `parameters`. <br /> **Note:** If `code` returns a `Promise`, the Function step will automatically await this Promise and return the unwrapped result. |

### IntegrationRequestStep

A step to send a custom request to the integration's API, without needing to provide auth details.

**Inputs**

| Parameter    | Type                                                             | Description                                                                                                                                                                                                                               |
| ------------ | ---------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `method`     | `"GET" / "POST" / "PATCH" / "PUT" / "DELETE"`\*                  | The HTTP method to use for this API request. If you select `POST`, `PUT`, or `PATCH` methods, the `body` and `bodyType` parameters will be required.                                                                                      |
| `url`        | string\*                                                         | The relative path of the API request, with respect to the base URL provided by the integration. Specifying a full URL is also supported.                                                                                                  |
| `bodyType`   | `"json" / "form-data" / "x-www-form-urlencoded" / "xml" / "raw"` | Select the type of request body that should be sent. Paragon will automatically encode the payload and set the correct `Content-Type` headers.                                                                                            |
| `body`       | object / string / `(pageToken: string) => object / string)`      | An object or string representing the request body to be sent. If using [Request Step Pagination](/workflows/requests/request-pagination), you can specify a function that returns the body of the request with respect to the Page Token. |
| `headers`    | object / `(pageToken: string) => object`                         | An object of the HTTP headers sent in the request. Integration Request Steps will automatically include the user's authentication details for the request.                                                                                |
| `params`     | object / `(pageToken: string) => object`                         | An object of the URL parameters sent in the request. Parameters can be specified either here or in the `url` property.                                                                                                                    |
| `pagination` | `(step) => PaginationOptions`                                    | If using [Request Step Pagination](/workflows/requests/request-pagination), you can define the options used in this function. Use the `step` parameter of the `pagination` function to access the output. <br /><br />                    |

`pagination` Example:

```javascript
new IntegrationRequestStep({
  method: "GET",
  url: "/opportunities",
  params: (pageToken) => ({
    pageToken
  }),
  pagination: (step) => {
    return {
      outputPath: step.output.response.body.data,
      pageToken: step.output.response.body.nextPageToken,
      stopCondition: Operators.Or(
        Operators.And(
          Operators.DoesNotExist(step.output.response.body.nextPageToken)
        )
      )
    }
  },
});
```

**Example**

```js
/**
 * Example: Integration Request step configured to pull contacts.
 */
const integrationRequestStep = new IntegrationRequestStep({
  autoRetry: false,
  continueWorkflowOnError: false,
  description: 'Get Contacts through API',
  method: 'GET',
  url: `/contacts?email=sean@useparagon.com`,
  params: { email: 'sean@useparagon.com' },
  headers: {},
});
```

**Outputs**

Access the output of an Integration Request step with `requestStep.output.response`.

| Field        | Type   | Description                                                    |
| ------------ | ------ | -------------------------------------------------------------- |
| `headers`    | object | An object of the HTTP headers received in the response.        |
| `body`       | any    | An object or string of the HTTP body received in the response. |
| `statusCode` | number | The HTTP status code of the response.                          |

### RequestStep

A step to send an HTTP request from a workflow.

**Inputs**

| Parameter       | Type                                                             | Description                                                                                                                                                     |
| --------------- | ---------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `method`        | `"GET" / "POST" / "PATCH" / "PUT" / "DELETE"`\*                  | The HTTP method to use for this API request. If you select `POST`, `PUT`, or `PATCH` methods, the `body` and `bodyType` parameters will be required.            |
| `url`           | string\*                                                         | The full URL of the HTTP request to send.                                                                                                                       |
| `bodyType`      | `"json" / "form-data" / "x-www-form-urlencoded" / "xml" / "raw"` | Select the type of request body that should be sent. Paragon will automatically encode the payload and set the correct `Content-Type` headers.                  |
| `body`          | object / string                                                  | An object or string representing the request body to be sent.                                                                                                   |
| `headers`       | object                                                           | An object of the HTTP headers sent in the request.                                                                                                              |
| `params`        | object                                                           | An object of the URL parameters sent in the request. Parameters can be specified either here or in the `url` property.                                          |
| `authorization` | AuthorizationConfig                                              | Choose between Basic authentication, Bearer token authentication, and OAuth 2.0 Client Credentials for handling the authorization of this request. <br /><br /> |

`authorization` Example:

```javascript
new RequestStep({
  method: 'GET',
  url: 'https://myapp.io/api',
  authorization: {
    type: 'basic',
    username: 'paragon-user',
    password: context.getEnvironmentSecret("API_SECRET"),
  },
});
```

**Outputs**

Access the output of a Request step with `requestStep.output.response`.

| Field        | Type   | Description                                                    |
| ------------ | ------ | -------------------------------------------------------------- |
| `headers`    | object | An object of the HTTP headers received in the response.        |
| `body`       | any    | An object or string of the HTTP body received in the response. |
| `statusCode` | number | The HTTP status code of the response.                          |

**Example**

```js
/**
 * Example: POST Request with JSON body
 */
const postRequestStepInit: IRequestStepInit = {
  id: 'step2',
  name: 'POST Request Example (JSON)',
  url: 'https://api.example.com/items',
  method: 'POST',
  bodyType: 'json',
  body: {
    item: 'newItem',
    quantity: 10,
  },
  params: { verbose: 'true' },
  headers: { 'Content-Type': 'application/json' },
  authorization: {
    type: 'bearer',
    token: 'abcdef123456',
  },
  ignoreFailure: false,
  autoRetry: false,
  continueWorkflowOnError: false
};
```

### ResponseStep

A step (*for use in Request-triggered workflows only*) to send an HTTP response from a workflow.

**Inputs**

| Parameter      | Type                   | Description                                                                                                                                               |
| -------------- | ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `responseType` | `"JSON" / "FILE"`\*    | The type of Response to send to the HTTP Request that triggered the workflow. Choose between a JSON-encoded response or a raw File type.                  |
| `body`         | `object / FileValue`\* | If using a JSON `responseType`, provide an object to send in the response. If using a File `responseType`, provide a `FileValue` to send in the response. |
| `statusCode`   | `number`\*             | The status code to send in the Response to the HTTP Request that triggered the workflow.                                                                  |

**Example**

```js
/**
 * Example: Response step returning a 201 status code with a message.
 */
const send201Step = new ResponseStep({
  description: 'Send 201',
  statusCode: 201,
  responseType: 'JSON',
  body: { message: 'Contact Created!' },
});
```


# Setting up Git Sync
Source: https://docs.useparagon.com/paragraph/setting-up-git-sync

Connect your Git repository to sync changes made in Paragon to a version control system.

You can sync your Paragon project with GitHub using Git Sync, allowing you to easily incorporate Paragon into your version control and code review processes.

When Git Sync is enabled, any changes made to your integrations or workflows in the Paragon dashboard will automatically sync to your connected Git repository as [Paragraph](/paragraph/getting-started) files.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(85).png" alt="" />
</Frame>

## How Syncing Works

Git Sync works by automating CLI commands with GitHub Actions, in response to change events in Paragon or in your Git repository. You can opt into a bidirectional sync or a one-way sync, depending on what works best for your team:

* **Bidirectional Sync**: Both engineering and non-engineering team members will be working on integrations development, editing in both code and the workflow editor.
* **One-Way Sync from Git -> Paragon**: Paragraph code will be the source of truth, and updates to integrations will strictly be made in code. Works best when only engineering team members will be working on integrations development, or where advanced patterns like higher-order steps or modular workflow fragments are required.
* **One-Way Sync from Paragon -> Git**: Paragon dashboard will be the source of truth, and updates will sync back to Git as a more fine-grained form of version control.

<Warning>
  **Limitations**

  * If you are using advanced patterns in Paragraph, such as reusable steps, higher-order steps, or modular workflow fragments, Git Sync currently cannot recover the use of these abstractions in code.
  * When making updates in a dashboard to a workflow that is using advanced patterns in Paragraph, the advanced pattern will be a replaced with an inline representation of the resulting steps.
  * If these limitations affect you, you can opt in to a one-way Git Sync from Git -> Paragon.
</Warning>

## Setup

### Repository Setup

First, we'll need to set up a GitHub repository to sync your integrations with.

1. If you don't already have one, create a new GitHub repository. This repository can be public or private.

2. Push the contents of your initialized Paragraph project to your repository: [Exporting from Paragon](/paragraph/getting-started#exporting-from-paragon).

3. Add and commit new files called `.github/workflows/paragraph-push.yml` and `.github/workflows/paragraph_pull_runner.yml` at the root of your repository with the contents of the **GitHub Actions Workflow Files** below.

4. Navigate to your GitHub repository and select Settings. Navigate to **Secrets and Variables > Actions**.

5. Create a repository secret for `PARAGON_CLI_KEY`. You can find this value on your machine in the file `~/.paragon/credentials.json`. It will be the value within `token` in this file.

<Accordion title="GitHub Actions Workflow Files">
  Any commits that you write to your Git repository will trigger a CI workflow that builds and pushes the contents back to the Paragon dashboard.

  ```yaml
  name: Push to Paragon

  on:
      push:
          # Set this to your selected branch in Paragon
          branches: [ "main" ]

      # Allows you to run this workflow manually from the Actions tab
      workflow_dispatch: 

  jobs:
    push_to_paragon:
      name: Push to Paragon
      runs-on: ubuntu-latest
        
      steps:
        - uses: actions/checkout@v4
        - id: push
          uses: useparagon/paragraph-push@v1
          with:
            paragonKey: ${{ secrets.PARAGON_CLI_KEY }}
            paragonZeusUrl: https://zeus.useparagon.com
            paragonDashboardUrl: https://dashboard.useparagon.com
  ```

  Any changes that you make from the dashboard will trigger a CI workflow. This workflow will re-export the contents of your Paragon project into Paragraph, committing the resulting diff.

  ```yaml
  name: Pull from Paragon

  on: 
    workflow_dispatch:
      inputs:
        projectId:
          type: string
          required: true
          description: 'Paragon project id'

        commitId:
          type: string
          required: true
          description: 'Paragon project commit id'

  jobs:
    pull_from_paragon:
      name: Pull from Paragon
      runs-on: ubuntu-latest

      permissions:
        contents: write
        
      steps:
        - uses: actions/checkout@v4
        - id: pull
          uses: useparagon/paragraph-pull@v1
          with:
            projectId: ${{ inputs.projectId }}
            commitId: ${{ inputs.commitId }}
            paragonKey: ${{ secrets.PARAGON_CLI_KEY }}
            paragonZeusUrl: https://zeus.useparagon.com
            paragonDashboardUrl: https://dashboard.useparagon.com
  ```
</Accordion>

### Token Setup

Next, you'll need to generate a GitHub Personal Access Token (PAT) to use in the Paragon dashboard.

1. In GitHub [Developer Settings](https://github.com/settings/tokens), click the Fine-grained Tokens section in the Personal Access Tokens sidebar.

2. Generate a new token. Specify a descriptive name like "Paragon Git Sync" and desired expiration.

3. Select the repository owner/organization as the Resource Owner of the token. If your organization is not appearing in the list of available Resource Owners, you may need to ask your GitHub organization admin to allow PATs in your organization (see [GitHub docs](https://docs.github.com/en/organizations/managing-programmatic-access-to-your-organization/setting-a-personal-access-token-policy-for-your-organization#restricting-access-by-fine-grained-personal-access-tokens)).

4. Select your intended integrations repository in Repository Access.

5. Select the following Permissions:

   **Actions:** Read and write

   **Contents**: Read only

   **Metadata:** Read only

   **Members**: Read only

   The Overview of the Permissions should look like:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(86).png" alt="" />
</Frame>

6. Generate the token.

7. In the Paragon dashboard, click "Sync Git Branch" in the top navigation bar.

8. Paste your PAT and press Connect.

9. Select a repository to sync Paragon with.

10. Select which branch of your Git repository your Paragon project should sync with. Each Paragon project can be associated with a different branch in your Git repository.

<Warning>
  **Note**: If your fine-grained PAT requires admin approval, you will immediately receive a generated token value, but the permissions will not be granted until the admin approves the token. Please verify that your token has been approved before proceeding.
</Warning>

Git Sync works with both classic and fine-grained PATs, but we recommend using a fine-grained PAT to generate a token with least-access privileges. See below for classic token instructions.

<Accordion title="Setup Instructions for Classic Personal Access Tokens">
  Generate a classic Personal Access Token with the following scopes:

  * `repo`
  * `workflow`
  * `read:org`
  * `admin:repo_hook`
  * `read:user`

  Paste this value into the Paragon dashboard, under "Sync Git Branch".
</Accordion>

## Syncing Changes

As you make changes to your integrations in the Paragon dashboard, your changes will be synced as commits to your connected Git repository.

Workflow changes can be synced immediately by clicking **Options > Save Version** in the Workflow Editor.

You can view the sync history for your Paragon project by clicking the Sync Status icon in the navigation bar of the Paragon dashboard.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/App%20Event%20Page.png" alt="" />
</Frame>

If you are not seeing changes appear in the dashboard or in your Git repository, verify your token permissions in [Token Setup](/paragraph/setting-up-git-sync#token-setup).

## Resetting the Repository

If you need to reset the original repository you chose for syncing with Paragon, please contact our support team. You can reach us at [support@useparagon.com](mailto:support@useparagon.com).


# API Resources
Source: https://docs.useparagon.com/resources/api-resources

Add API Resources to your project to build reusable Triggers and Steps for your API in Workflows.

## Overview

API Resources are reusable connections to your internal API endpoints that can be used to define Requests and Triggers for Workflows.

With API Resources, you can:

* Connect Workflows to existing webhooks in your API
* Define your API configuration once (including authentication and basic API details) and reuse it across requests made in Workflows

<Info>
  Resources is currently in private beta. To turn this feature on in your account, [schedule a guided onboarding](https://share.hsforms.com/19F3nrrosSM2W3LghYuqedwdhpe2?__hstc=153026918.ef4b5dd1f884b884e68fbf3690a4106d.1741652037128.1741652037128.1741652037128.1&__hssc=153026918.194.1741652037128&__hsfp=1042411294) with our team.
</Info>

## Getting Started

To start creating an API Resource, navigate to the **Resources** page in your dashboard sidebar and click **Create Resource**.

You will be prompted to name your Resource, which will be used to reference your API in Triggers and Requests. For example, if your Resource is named "TaskLab", you will see "TaskLab Request" Steps and "TaskLab Triggers" appear as options for your Workflows.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Setting%20up%20API%20Resources%20in%20Paragon%20Connect.png" alt="Setting up an API Resource in Paragon Connect" />
</Frame>

### **API Info**

Next, you'll configure your API Resource with details on how your API authenticates and sends requests.

1. **Choose between a User-Level and an App-Level Resource.** **User-Level Resources** require you to use the SDK/API to save separate API credentials for each of your Connected Users. Choose this option if each of your users will have separate OAuth tokens or API keys. **App-Level Resources** use one set of API credentials to authenticate for all of your Connected Users. Choose this option if one set of API keys/service account credentials will be used to authenticate to your API from Paragon.

2. **Select an authentication type.** Resources support the most common API authentication types, including OAuth 2.0 (Refresh Token or Client Credentials) and API Keys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20Authorization%20Methods%20for%20API%20Resources%20in%20Paragon%20Connect.png" alt="Choosing Authorization Methods for API Resources in Paragon Connect" />
</Frame>

### Authorization

**Note**: The next steps may vary depending on which options you select above. If you selected App-Level Resource, proceed directly to [Request Details](/resources/api-resources#request-details).

#### **OAuth 2.0**

If you selected OAuth 2.0 authentication, you'll need to provide the following details:

* **Access Token URL**: URL that Paragon will use to refresh OAuth tokens for your API.
* **Client ID and Client Secret**: The `client_id` and `client_secret` parameters that will be used for the OAuth refresh request to the preconfigured URL.
* Optionally, you can configure additional settings under Advanced Options:

  * **Required Inputs**: Add an input to this list if you need to parameterize values like the Access Token URL or API Base URL.

  * **Include Client ID and Secret**: You can disable this setting if your integration does not use a Basic Authorization header to pass your Client ID and Secret into the token request.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Configuring%20OAuth%202.0%20for%20API%20Resources%20in%20Paragon%20Connect.png" alt="Configuring OAuth 2.0 for API Resources in Paragon Connect" />
</Frame>

#### **API Keys**

If you selected API Key authentication, you'll need to provide the names of any values that are required as a part of a user's credentials to your API.

For example, if your API requires a username and password to authenticate, add `username` and `password` as API Key names.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Configuring%20API%20Keys%20for%20API%20Resources%20in%20Paragon%20Connect.png" alt="Configuring API Keys for API Resources in Paragon Connect" />
</Frame>

### Request Details

Next, define a template for how requests are sent to your API.

* **API Base URL**: URL that should be used to send requests.

  * If you are using a User-Level Resource and added Required Inputs in the **Authorization** step, you can use the variable menu (type `{{` to open) to parameterize this value with a user-specific input.

* **API Authentication:** Define how tokens or other values are used to authenticate requests sent to your API.

* Optionally, if you are using a User-Level Resource, you can configure a User Profile.

  * User Profiles are retrieved from your API at the time of first authentication and can be used to store persistent information about the user's Resource Connection.

  * You can configure a Request or use a field from a JWT-encoded access token to save the User Profile.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Configuring%20Request%20Details%20for%20API%20Resources%20in%20Paragon%20Connect.png" alt="Configuring Request Details for API Resources in Paragon Connect" />
</Frame>

### Test and Publish

Finally, you can send a test request to your API Resource to verify that you can connect to your API.

If you are using a User-Level Resource, you will be prompted to enter test credentials using your Required Fields (and an access/refresh token, for OAuth). *This step must be completed to test your Resource in the Workflow Editor and Webhook Setup pages.*

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Testing%20and%20Finishing%20API%20Resources%20in%20Paragon%20Connect.png" alt="Testing and Finishing API Resources in Paragon Connect" />
</Frame>

Once you are finished verifying that your API Resource can send requests successfully, click **Finish** to save your Resource configuration.

## Connecting Resources

If you are using User-Level Resources, you will need to connect your users' credentials to ensure that Resource Requests and Triggers can run as expected.

<Tabs>
  <Tab title="JavaScript SDK">
    To connect your users' credentials via your frontend application, you can use the SDK's `connectAction` method to pass through the Required Keys for your User-Level Resource.

    **Example OAuth 2.0 connectAction call:**

    ```js
    await paragon.connectAction({
        access_token: "eyJ....",
        refresh_token: "ref_123..."
    });
    ```

    <Tip>
      You can visit **Resource Setup** > **Test and Publish** to see a code example of your specific Resource, with all required keys.
    </Tip>
  </Tab>

  <Tab title="REST API">
    To connect your users' credentials via the REST API, perform the following request:

    ```http
    POST https://zeus.useparagon.com/projects/[Project ID]/sdk/resources/[Resource ID]/connect
    Authorization: Bearer [Paragon User Token]
    Content-Type: application/json

    { 
      "access_token": "eyJ...",
      "refresh_token": "ref_123..." 
    }
    ```

    * **Project ID**: Your Paragon Project ID

    * **Resource ID**: You can find your Resource ID in your dashboard, in the URL of your Resource page. It is a UUID which follows the `/resources/` path of the URL.

      <Frame>
        <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Paragon]%202024-09-12%20at%2003.54.57%20PM@2x.png" alt="" />
      </Frame>

    * **Paragon User Token:** The User Token which authenticates the Connected User you are trying to connect a Resource for.
  </Tab>
</Tabs>


# Custom Integrations
Source: https://docs.useparagon.com/resources/custom-integrations

Create your own custom integration with any app provider on Paragon.

## Overview

<Tip>
  ✨ Custom Integrations are included in all **paid plans**. [Contact us](https://calendly.com/useparagon/paragon-demo) to schedule a demo of Custom Integrations or upgrade your account.
</Tip>

Custom Integrations allow you to build your own custom integration with any app provider on Paragon, even if it's not natively supported by our integration catalog.

Similar to natively supported integration on Paragon, Custom Integrations provide the following features:

* **Embedded Connect Portal** for your customers to activate and configure the integration in your app.
* **Fully managed authentication** with OAuth 2.0 or API Keys.
* **Visual workflow editor** for creating custom integration logic.
* **Access to any API methods** provided by the application's API.

## Building a Custom Integration

The general prerequisites for building a Custom Integration with any app provider on Paragon are:

* The app provider must have a public API.
* Have access to the app provider's API documentation.
* If the app provider uses OAuth authentication, create a developer account and developer application from the app provider.
* A Paragon account with a **paid plan**.

To start building a Custom Integration, click the **build your own custom integration** button at the top of your integration catalog in Paragon. You'll need to complete the following steps:

### Step 1. Basic Info

You'll first need to provide some basic information about the app provider that will appear in the Connect Portal for the integration.

* **Name** - A short name for the app provider.
* **Description** - A short description for what the app provider does.
* **App Icon** - Only SVG formats accepted.
* **Accent Color** - The brand color that will be used in the accents of the Connect Portal for this integration.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Basic%20info%20for%20Custom%20Integrations%20in%20Paragon%20Connect.png" alt="" />
</Frame>

### Step 2. Authentication Method

Select a method of authentication for your app provider. You can usually find this in your app provider's API documentation.

**OAuth 2.0** is typically used when a user needs to authenticate access to their account. For example, a user signing into Salesforce so that your application can make changes on their behalf.

Some app providers use **API keys** for authorization. An API key is a token that a client provides when making API calls. API keys are typically found within the app provider's account settings.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20an%20authentication%20method%20for%20a%20custom%20integration%20on%20Paragon.png)
</Frame>

### Step 3. Authentication Setup

#### OAuth 2.0

Specify the sign-in URL, also known as the **Authorization URL**, that this integration uses to begin the OAuth 2.0 authentication flow. If the URL includes a value that must be supplied by your end-user, use the **Advanced Options** to add input fields.

You can usually find the OAuth credentials for your selected provider in their API Documentation. You'll need access to the following credentials:

* Auth URL
* Access Token URL
* Client ID
* Client Secret
* Scopes Requested

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Setting%20up%20the%20OAuth%20flow%20for%20a%20custom%20integration%20in%20Paragon%20Connect-1.png" alt="" />
</Frame>

#### API Keys

You can add **Input Fields** for API keys or user details that are required to authenticate with your selected app provider.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Setting%20up%20the%20API%20Key%20flow%20for%20a%20custom%20integration%20in%20Paragon%20Connect.png" alt="" />
</Frame>

#### OAuth Client Credentials

Specify the URL that this integration uses to exchange an authorization code for access tokens, also known as the **Access Token URL**. The Paragon Connect Portal prompt your user for their Client ID and Client Secret needed to validate the authentication.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Client%20OAuth%20Credentials%20when%20creating%20custom%20integrations%20in%20Paragon%20Connect.png)
</Frame>

Once you've added your authentication method, press the `Enable` button inside the Connect Portal preview to validate the connection. You must successfully enable your integration before moving to the next step.

### Step 4. API Setup

You can also access your custom provider through the **Workflow Builder** or **Paragon SDK.**

* **API Base URL -** Specify the base URL for API requests made to this integration.
* **API Authorization** - Specify how API requests get authenticated for this integration.
* **Test Endpoint URL** - Specify a request URL that can be used to test that your user’s account credentials are valid. This endpoint must be reachable via a `GET` request.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/API%20Setup%20for%20custom%20integrations%20on%20Paragon%20Connect.png)
</Frame>

Once you've added the fields above, you can press the `Send test request` button to validate your custom integration configuration. Press the `Finish` button to save your custom integration.

## Using Custom Integrations

Once you've added a custom integration to Paragon, you can access it through the Workflow Builder, Paragon SDK, and Connect API.

### Workflow Builder

You can make API Requests to your app provider from the Workflow Builder by selecting your app provider from the workflow sidebar. Paragon prefills the request URL with the API Base URL from [Step 4](/resources/custom-integrations#step-4-api-setup). Simply provide the API endpoint to the request that you want to make.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Custom%20Integration%20Workflows%20in%20Paragon%20Connect.png" alt="" />
</Frame>

<Info>
  Paragon automatically provides the `Authorization` information provided in [Step 4](/resources/custom-integrations#step-4.-authentication-setup) in the request.
</Info>

Learn more about using the Workflow Builder below:

<Card title="Building Workflows" href="/workflows/building-workflows" horizontal />

<Card title="Making API Requests" href="/workflows/requests" horizontal />

### Paragon SDK

Once your users have connected their accounts, you can use the Paragon SDK to access any of your app provider's endpoints on behalf of connected users. You'll need to prefix the app provider's name with `custom.` when making requests. For example, a custom GitHub integration would be referenced as `custom.github`.

<Note>
  **Note:** When using custom app providers in the Paragon SDK, prefix the app provider name with `custom.`.
</Note>

```js JavaScript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Data 
await paragon.request("custom.<app_provider_name>", "<api_endpoint>", {
  method: "GET",
})
```

**Example:**

```js JavaScript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>)

// Create new Issue
await paragon.request("custom.onesignal", "/notifications", {
    method: "POST",
    body: { 
    "title": "This notification was created from your app"
    }
})
```

### **Connect API**

<Info>
  See full Connect API documentation here: [Proxy API](/apis/making-api-requests)
</Info>

If you'd like to issue a request from your server to your custom integration on behalf of an end-user, you can make the request to:

```bash REST API
https://proxy.useparagon.com/projects/<Paragon Project ID>/sdk/proxy
  /custom/<Integration ID>/<API path>

Authorization: Bearer <Paragon User Token>
```

* A Bearer token must also be specified with a Paragon User Token.
* This endpoint accepts any HTTP verb you want to use with the API.
* The Integration ID can be found in the dashboard (`/.../integrations/<Integration ID>`) or with the [Get project's integrations](/apis/api-reference#get-projects-integrations) API endpoint.

**Example:**

```bash REST API
POST https://proxy.useparagon.com/projects/19d...012/sdk/proxy
    /fb243b75-35e7-46b3-ba6c-967ccebeb449/notifications

Authorization: Bearer eyJ...
Content-Type: application/json

{ 
    "title": "This notification was created from your app"
}
```


# Custom Webhooks
Source: https://docs.useparagon.com/resources/custom-webhooks

Create your own custom webhook with any integration provider on Paragon.

<Warning>
  The Custom Webhooks feature is in a limited *beta* period for existing Paragon customers in August, 2024. Please [contact us](https://www.useparagon.com/book-demo) to request access to the feature.
</Warning>

## Overview

Custom Webhooks allow you to build your own webhook trigger with any integration provider on Paragon, even if they are not natively supported by our native integrations' triggers.

## Building a Custom Webhook

The prerequisites for building a Custom Webhook with any integration provider on Paragon are:

* The integration provider must have a webhook API.
* You have access to the integration provider's webhook API documentation.
* If the integration provider uses OAuth authentication, create a developer account and developer application from the integration provider.
* You have access to a sandbox within the integration provider's service.
* A Paragon account with a **Pro plan** or above.

To start building a Custom Webhook, click the **Triggers** tab from within an integration in your integration catalog in Paragon. You'll need to complete the following steps:

### Step 1. Basic Info

You'll first need to provide some basic information about the webhook that will appear in the Workflow Editor and dictate the trigger's configuration.

**Trigger Name** - A descriptive short name for the webhook, like *Record Created.*

**How is this webhook created?** You can usually find this in your integration provider's webhook API documentation.

* Select **API Request** if the webhook can be created programmatically using the provider's webhook API.
* Select **Manual** otherwise.

**What type of webhook is this?**

* Select **User-level** if webhooks are created for each user.
* Select **App-level** if webhooks are created once at the client or application level.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/API.png" alt="" />
</Frame>

### Step 2. Webhook Setup

#### Option 1: Programmatic Webhook API Setup

Describe the API request parameters to create the webhook. This information should be found in the provider's webhook API documentation.

* **Webhook Setup Request URL**
* **Target** - Instruct the webhook provider where to send webhook events by referencing a custom URL associated with your Paragon project to subscribe and receive events. `{{settings.webhookURL}}`
* **Authorization** - Defaults to the authentication scheme used for the Paragon integration. If the provider's webhook API authenticates differently, this can be overridden and developer tokens can be referenced from the variable menu.
* **Webhook Response** - Customize these options if the provider's webhook API requires a custom response from the webhook recipient server.

You must connect an integration sandbox account to test the request to create the webhook before continuing through the rest of the wizard.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Custom%20Webhook%20-_%20API%20Setup.png" alt="" />
</Frame>

#### Option 2: Manual Setup

Copy the **Webhook Target URL** which you will need to input when you create the webhook trigger in the integration provider's app sandbox or developer portal. For Paragon projects with pre-existing triggers in a given integration, this target link is the same as the one you have already configured to listen for events.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-08-12%20at%2009.25.08.png" alt="" />
</Frame>

<Warning>
  **Manual, User-Level Triggers** will require your app to instruct each of your users to instantiate this webhook in their integration's account manually. Each user will have a unique URL generated by appending their associated `credentialId` as an `id `query parameter, replacing the`/test` path placeholder.
</Warning>

Use the `.getUser()` [SDK method](https://docs.useparagon.com/apis/api-reference#getuser-paragonuser) to reference the current users' `credentialId` and append that ID to the copied **Webhook Target URL** in the following form:

```bash
https://hermes.useparagon.com/.../?id={{credentialID}}
```

**Customizing the listener Response Type**

Some integration providers enforce verification – when the webhook is created – requiring the events recipient server to respond in a certain way to prove their authenticity. Use the **Response Type** input to define this behavior.

A **Use custom code** option is made available for fully configuring the response behavior and saving any webhook secrets returned by the provider. This function should return an object describing the response with the following properties: `status`, `headers`, and `body`. A `persist` property is available to save incoming request values for reference later in the webhook wizard.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-08-07%20at%2015.05.56.png" alt="" />
</Frame>

### Step 3. Event Handling

#### **Event Routing**

App-level webhooks require you to match the user-identifying property of the incoming event payload with the existing user ID saved by Paragon. This ensures that incoming events are associated to the correct user. Use the variable menu to reference properties and headers of the incoming event to match against the *Provider ID* Paragon uses internally to identify tenants of an integration.

#### Payload Verification

Specify how Paragon should process incoming webhook events and validate their authenticity. You can usually find these details in the webhook security or validation sections of their webhook API Documentation.

The most common methods of payload verification are supported as pre-configured options, and a custom code option is provided to allow you to define your own HMAC digest if necessary.

Once you've configured your payload validation method, press the `Listen for events` button to validate the verification. Receiving an event once configuring your payload validation method confirms that your validation is properly configured. You must successfully receive a payload before moving to the next step.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-08-07%20at%2016.21.48@2x.png" alt="" />
</Frame>

Press the `Finish` button to save your custom trigger.

## Using your Custom Webhooks

Once you've fully configured your custom trigger, you can now access it through the Workflow Builder in the same way as existing integration triggers.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-08-07%20at%2015.24.42.png" alt="" />
</Frame>

**Testing Workflows with Custom Webhooks**

When testing your workflows with your Custom Webhooks, you must be able to trigger a test event in your integration sandbox to simulate a production scenario. Clicking *Test Step* on your Custom Trigger will prompt Paragon to listen for a webhook event to be sent to the URL.


# Overview
Source: https://docs.useparagon.com/resources/integrations



You can find the full list of supported Integration providers below. If you don't see the provider that you're looking for, you can [build it yourself using the Custom Integrations Builder](/resources/custom-integrations) or [let us know](mailto:team@useparagon.com) and we can add it for you.

<CardGroup cols={2}>
  <Card title="ActiveCampaign" href="/resources/integrations/activecampaign" horizontal />

  <Card title="Adobe Acrobat Sign" href="/resources/integrations/adobe-acrobat-sign" horizontal />

  <Card title="Adobe Experience Manager" href="/resources/integrations/adobe-experience-manager" horizontal />

  <Card title="ADP Workforce Now" href="/resources/integrations/adp-workforce-now" horizontal />

  <Card title="Airtable" href="/resources/integrations/airtable" horizontal />

  <Card title="Amazon S3" href="/resources/integrations/amazon-s3" horizontal />

  <Card title="Amplitude" href="/resources/integrations/amplitude" horizontal />

  <Card title="Apollo.io" href="/resources/integrations/apollo-io" horizontal />

  <Card title="Asana" href="/resources/integrations/asana" horizontal />

  <Card title="Azure DevOps" href="/resources/integrations/azure-devops" horizontal />

  <Card title="BambooHR" href="/resources/integrations/bamboohr" horizontal />

  <Card title="BigQuery" href="/resources/integrations/bigquery" horizontal />

  <Card title="Box" href="/resources/integrations/box" horizontal />

  <Card title="Calendly" href="/resources/integrations/calendly" horizontal />

  <Card title="ClickUp" href="/resources/integrations/clickup" horizontal />

  <Card title="Close" href="/resources/integrations/close" horizontal />

  <Card title="Coda" href="/resources/integrations/coda" horizontal />

  <Card title="Confluence" href="/resources/integrations/confluence" horizontal />

  <Card title="Copper" href="/resources/integrations/copper" horizontal />

  <Card title="DocuSign" href="/resources/integrations/docusign" horizontal />

  <Card title="Dropbox" href="/resources/integrations/dropbox" horizontal />

  <Card title="Dropbox Sign" href="/resources/integrations/dropboxsign" horizontal />

  <Card title="Dynamics 365 Business Central" href="/resources/integrations/dynamicsbusinesscentral" horizontal />

  <Card title="Dynamics 365 Finance" href="/resources/integrations/dynamics-finance" horizontal />

  <Card title="Emarsys" href="/resources/integrations/emarsys" horizontal />

  <Card title="Facebook Ads" href="/resources/integrations/facebook-ads" horizontal />

  <Card title="Facebook Pages" href="/resources/integrations/facebook-pages" horizontal />

  <Card title="Figma" href="/resources/integrations/figma" horizontal />

  <Card title="Freshdesk" href="/resources/integrations/freshdesk" horizontal />

  <Card title="Freshsales" href="/resources/integrations/freshsales" horizontal />

  <Card title="Front" href="/resources/integrations/front" horizontal />

  <Card title="Gainsight" href="/resources/integrations/gainsight" horizontal />

  <Card title="GitHub" href="/resources/integrations/github" horizontal />

  <Card title="Gmail" href="/resources/integrations/gmail" horizontal />

  <Card title="Gong" href="/resources/integrations/gong" horizontal />

  <Card title="Google Ad Manager" href="/resources/integrations/google-ad-manager" horizontal />

  <Card title="Google Ads" href="/resources/integrations/googleads" horizontal />

  <Card title="Google Analytics" href="/resources/integrations/google-analytics" horizontal />

  <Card title="Google Analytics GA4" href="/resources/integrations/googleanalyticsga4" horizontal />

  <Card title="Google Calendar" href="/resources/integrations/google-calendar" horizontal />

  <Card title="Google Campaign Manager 360" href="/resources/integrations/google-campaign-manager-360" horizontal />

  <Card title="Google Docs" href="/resources/integrations/googledocs" horizontal />

  <Card title="Google Drive" href="/resources/integrations/google-drive" horizontal />

  <Card title="Google Search Console" href="/resources/integrations/google-search-console" horizontal />

  <Card title="Google Sheets" href="/resources/integrations/google-sheets" horizontal />

  <Card title="Greenhouse" href="/resources/integrations/greenhouse" horizontal />

  <Card title="Gusto" href="/resources/integrations/gusto" horizontal />

  <Card title="Heap" href="/resources/integrations/heap" horizontal />

  <Card title="Hive" href="/resources/integrations/hive" horizontal />

  <Card title="HubSpot" href="/resources/integrations/hubspot" horizontal />

  <Card title="iManage" href="/resources/integrations/imanage" horizontal />

  <Card title="Insightly" href="/resources/integrations/insightly" horizontal />

  <Card title="Intellum" href="/resources/integrations/intellum" horizontal />

  <Card title="Intercom" href="/resources/integrations/intercom" horizontal />

  <Card title="Jira" href="/resources/integrations/jira" horizontal />

  <Card title="Keap" href="/resources/integrations/keap" horizontal />

  <Card title="Klaviyo" href="/resources/integrations/klaviyo" horizontal />

  <Card title="Lever" href="/resources/integrations/lever" horizontal />

  <Card title="Linear" href="/resources/integrations/linear" horizontal />

  <Card title="LinkedIn" href="/resources/integrations/linkedin" horizontal />

  <Card title="LinkedIn Marketing" href="/resources/integrations/linkedinmarketing" horizontal />

  <Card title="Magento" href="/resources/integrations/magento" horizontal />

  <Card title="Mailchimp" href="/resources/integrations/mailchimp" horizontal />

  <Card title="Marketo" href="/resources/integrations/marketo" horizontal />

  <Card title="Microsoft Dynamics 365" href="/resources/integrations/microsoft-dynamics-365" horizontal />

  <Card title="Microsoft Excel" href="/resources/integrations/microsoftexcel" horizontal />

  <Card title="Microsoft Outlook" href="/resources/integrations/outlook" horizontal />

  <Card title="Microsoft Teams" href="/resources/integrations/microsoft-teams" horizontal />

  <Card title="Miro" href="/resources/integrations/miro" horizontal />

  <Card title="Mixpanel" href="/resources/integrations/mixpanel" horizontal />

  <Card title="Monday" href="/resources/integrations/monday" horizontal />

  <Card title="Netsuite" href="/resources/integrations/netsuite" horizontal />

  <Card title="Notion" href="/resources/integrations/notion" horizontal />

  <Card title="OneDrive" href="/resources/integrations/onedrive" horizontal />

  <Card title="OneNote" href="/resources/integrations/onenote" horizontal />

  <Card title="OpenAI" href="/resources/integrations/openai" horizontal />

  <Card title="Eloqua" href="/resources/integrations/eloqua" horizontal />

  <Card title="Oracle Financials Cloud" href="/resources/integrations/oracle-financials-cloud" horizontal />

  <Card title="Outreach" href="/resources/integrations/outreach" horizontal />

  <Card title="PagerDuty" href="/resources/integrations/pagerduty" horizontal />

  <Card title="PandaDoc" href="/resources/integrations/pandadoc" horizontal />

  <Card title="Pardot" href="/resources/integrations/pardot" horizontal />

  <Card title="Pipedrive" href="/resources/integrations/pipedrive" horizontal />

  <Card title="PowerBI" href="/resources/integrations/powerbi" horizontal />

  <Card title="Productboard" href="/resources/integrations/productboard" horizontal />

  <Card title="QuickBooks" href="/resources/integrations/quickbooks" horizontal />

  <Card title="Quip" href="/resources/integrations/quip" horizontal />

  <Card title="Sailthru" href="/resources/integrations/sailthru" horizontal />

  <Card title="Sage Accounting" href="/resources/integrations/sage-accounting" horizontal />

  <Card title="Sage Intacct" href="/resources/integrations/sage-intacct" horizontal />

  <Card title="Salesforce" href="/resources/integrations/salesforce" horizontal />

  <Card title="SalesLoft" href="/resources/integrations/salesloft" horizontal />

  <Card title="SAP S/4HANA" href="/resources/integrations/saps4hana" horizontal />

  <Card title="SAP SuccessFactors" href="/resources/integrations/sapsuccessfactors" horizontal />

  <Card title="Segment" href="/resources/integrations/segment" horizontal />

  <Card title="ServiceNow" href="/resources/integrations/servicenow" horizontal />

  <Card title="SharePoint" href="/resources/integrations/sharepoint" horizontal />

  <Card title="Shopify" href="/resources/integrations/shopify" horizontal />

  <Card title="Shortcut" href="/resources/integrations/shortcut" horizontal />

  <Card title="Slack" href="/resources/integrations/slack" horizontal />

  <Card title="Snowflake" href="/resources/integrations/snowflake" horizontal />

  <Card title="Stack Overflow Teams" href="/resources/integrations/stackoverflowteams" horizontal />

  <Card title="Stripe" href="/resources/integrations/stripe" horizontal />

  <Card title="Tableau" href="/resources/integrations/tableau" horizontal />

  <Card title="TikTok Ads" href="/resources/integrations/tiktokads" horizontal />

  <Card title="Todoist" href="/resources/integrations/todoist" horizontal />

  <Card title="Trello" href="/resources/integrations/trello" horizontal />

  <Card title="Typeform" href="/resources/integrations/typeform" horizontal />

  <Card title="Unleashed" href="/resources/integrations/unleashed" horizontal />

  <Card title="Vanta" href="/resources/integrations/vanta" horizontal />

  <Card title="Vimeo" href="/resources/integrations/vimeo" horizontal />

  <Card title="WhatsApp" href="/resources/integrations/whatsapp" horizontal />

  <Card title="WooCommerce" href="/resources/integrations/woocommerce" horizontal />

  <Card title="WordPress" href="/resources/integrations/wordpress" horizontal />

  <Card title="Workable" href="/resources/integrations/workable" horizontal />

  <Card title="Workday" href="/resources/integrations/workday" horizontal />

  <Card title="Xero" href="/resources/integrations/xero" horizontal />

  <Card title="Zendesk" href="/resources/integrations/zendesk" horizontal />

  <Card title="Zendesk Sell" href="/resources/integrations/zendesksell" horizontal />

  <Card title="Zoho CRM" href="/resources/integrations/zohocrm" horizontal />

  <Card title="Zoho People" href="/resources/integrations/zohopeople" horizontal />

  <Card title="Zoom" href="/resources/integrations/zoom" horizontal />
</CardGroup>


# ActiveCampaign
Source: https://docs.useparagon.com/resources/integrations/activecampaign

Connect to your users' ActiveCampaign accounts.

## Setup Guide

You can find your ActiveCampaign app credentials in your [ActiveCampaign Developer Settings](https://developers.activecampaign.com/reference/authentication).

You'll need the following information to set up your ActiveCampaign App with Paragon Connect:

* API Key
* Domain

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to ActiveCampaign

Once your users have connected their ActiveCampaign account, you can use the Paragon SDK to access the ActiveCampaign API on behalf of connected users.

See the ActiveCampaign [REST API documentation](https://developers.activecampaign.com/reference/overview) for their full API reference.

Any ActiveCampaign API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Contact by ID
await paragon.request("activecampaign", "3/contacts/<id>", {
  method: "GET"
});

// Create a Deal
await paragon.request("activecampaign", "3/deals", {
  method: "POST",
  body: {
    deal: {
      contact: "51",
      account: "45",
      description: "This deal is an important deal",
      currency: "usd",
      group: "1",
      owner: "1",
      percent: null,
      stage: "1",
      status: 0,
      title: "AC Deal",
      value: 45600,
      fields: [
        {
          "customFieldId": 1,
          "fieldValue": "First field value"
        },
      ]
    }
  }
});

// Get all Campaigns
await paragon.request("activecampaign", "3/campaigns", {
  method: "GET"
});
  
```

## Building ActiveCampaign workflows

Once your ActiveCampaign account is connected, you use the ActiveCampaign Request step to access any of ActiveCampaign's API endpoints without the authentication piece.

When creating or updating records in ActiveCampaign, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Adobe Acrobat Sign
Source: https://docs.useparagon.com/resources/integrations/adobe-acrobat-sign

Connect to your users' Adobe Acrobat Sign accounts.

## Setup Guide

You can find your Adobe Acrobat Sign app credentials in your [Adobe Acrobat Sign Developer Account.](https://opensource.adobe.com/acrobat-sign/developer_guide/index.html)

You'll need the following information to set up your Adobe Acrobat Sign App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Adobe Acrobat Sign app to Paragon

Under **Integrations > Connected Integrations > Adobe Acrobat Sign > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Adobe Acrobat Sign App page.
* **Client Secret:** Found under Client Secret on your Adobe Acrobat Sign App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Leaving the Client ID and Client Secret blank will use Paragon development keys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Adobe%20Acrobat%20SIgn%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Adobe Acrobat Sign

Once your users have connected their Adobe Acrobat Sign account, you can use the Paragon SDK to access the Adobe Acrobat Sign API on behalf of connected users.

See the Adobe Acrobat Sign [REST API documentation](https://opensource.adobe.com/acrobat-sign/developer_guide/index.html) for their full API reference.

Any Adobe Acrobat Sign API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Agreements for the Connected User
paragon.request("acrobatsign", "/agreements", {
  method: "GET"
});

// Get the Status of an Agreement
paragon.request("acrobatsign", "/agreements/<AGREEMENT_ID>", {
  method: "GET"
});

// Create an Agreement for signature request
paragon.request("acrobatsign", "/agreements", {
  method: "POST",
  body: {
    "fileInfos": [
      {
        "transientDocumentId": ""
      }
    ],
    "name": "My Document Agreement",
    "participantSetsInfo": [
      {
        "order": 1,
        "role": "",
        "memberInfos": [
          {
            "email": "bowie@useparagon.com"
          }
        ]
      }
    ],
    "signatureType": "",
    "state": ""
  }
});
  
```

## Building Adobe Acrobat Sign workflows

Once your Adobe Acrobat Sign account is connected, you use the Adobe Acrobat Sign Request step to access any of Adobe Acrobat Sign's API endpoints without the authentication piece.

When creating or updating records in Adobe Acrobat Sign, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Adobe Experience Manager
Source: https://docs.useparagon.com/resources/integrations/adobe-experience-manager

Connect to your users' Adobe Experience Manager accounts.

## Setup Guide

You can find your Adobe Experience Manager app credentials in your [Adobe Experience Manager Developer Account.](https://developer.adobe.com/dep/guides/postman/setup-environment/)

You'll need the following information to set up your Adobe Experience Manager App with Paragon Connect:

* Domain
* [Technical Account Details](https://experience.adobe.com/#/cloud-manager/landing.html)

## Connecting to Adobe Experience Manager

Once your users have connected their Adobe Experience Manager account, you can use the Paragon SDK to access the Adobe Experience Manager API on behalf of connected users.

See the Adobe Experience Manager [REST API documentation](https://developer.adobe.com/dep/guides/postman/setup-environment/) for their full API reference.

Any Adobe Experience Manager API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get a Folder
await paragon.request("adobeexperiencemanager", "/myFolder.json", {
    method: "GET"
});

// Create a Folder
await paragon.request("adobeexperiencemanager", "/*", {
    method: 'POST',
    body: {
      "name": "myAssetsFolder",
      "jcr:title": "My Assets Folder"
    }
});
  
```

## Building Adobe Experience Manager workflows

Once your Adobe Experience Manager account is connected, you can add steps to perform the following actions:

* Create Folder
* Delete Folder
* Delete Asset
* Create Asset Rendition
* Update Asset Rendition
* Delete Asset Rendition

You can also use the Adobe Experience Manager Request step to access any of Adobe Experience Manager's API endpoints without the authentication piece.

When creating or updating records in Adobe Experience Manager, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# ADP Workforce Now
Source: https://docs.useparagon.com/resources/integrations/adp-workforce-now

Connect to your users' ADP Workforce Now accounts.

## Setup Guide

You can find your ADP Workforce Now app credentials in your [ADP Workforce Now Developer Account.](https://developers.adp.com/build/api-explorer)

You'll need the following information to set up your ADP Workforce Now App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your ADP Workforce Now app to Paragon

Under **Integrations > Connected Integrations > ADP Workforce Now > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your ADP Workforce Now App page.
* **Client Secret:** Found under Client Secret on your ADP Workforce Now App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20ADP%20Workforce%20Now%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to ADP Workforce Now

Once your users have connected their ADP Workforce Now account, you can use the Paragon SDK to access the ADP Workforce Now API on behalf of connected users.

See the ADP Workforce Now [REST API documentation](https://developers.adp.com/build/api-explorer) for their full API reference.

Any ADP Workforce Now API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Workers
paragon.request("adpworkforcenow", "hr/v2/workers", {
  method: "GET"
});

// Get Worker's Pay Distributions
paragon.request("adpworkforcenow", "/payroll/v2/workers/<aoid>/pay-distributions", {
  method: "GET"
});

// Get a Job Application by ID
paragon.request("adpworkforcenow", "/staffing/v2/job-applications/<job-application-id>", {
  method: "GET"
});
  
```

## Building ADP Workforce Now workflows

Once your ADP Workforce Now account is connected, you use the ADP Workforce Now Request step to access any of ADP Workforce Now's API endpoints without the authentication piece.

When creating or updating records in ADP Workforce Now, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Airtable
Source: https://docs.useparagon.com/resources/integrations/airtable

Connect to your users' Airtable accounts.

## Setup Guide

You can find your Airtable app credentials in your [Airtable Developer Account](https://airtable.com/developers).

You'll need the following information to set up your Airtable App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Add your Airtable app to Paragon

Under **Integrations > Connected Integrations > Airtable > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Airtable App page.
* **Client Secret:** Found under Client Secret on your Airtable App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Airtable%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Airtable

Once your users have connected their Airtable account, you can use the Paragon SDK to access the Airtable API on behalf of connected users.

See the Airtable [REST API documentation](https://airtable.com/api) for their full API reference.

Any Airtable API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// List records
paragon.request("airtable", "/<BASE ID>/<TABLE NAME>?maxRecords=3&view=Grid%20view", {
  method: "GET"
});

// Create a record
paragon.request("airtable", "/<BASE ID>/<TABLE NAME>", {
  method: "POST",
  body: {
  "records": [
      "fields": {
        "<AIRTABLE COLUMN NAME>": <VALUE>
      }
    ]
  }
});
  
```

## Building Airtable workflows

Once your Airtable account is connected, you use the Airtable Request step to access any of Airtable's API endpoints without the authentication piece.

When creating or updating records in Airtable, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Amazon S3
Source: https://docs.useparagon.com/resources/integrations/amazon-s3

Connect to your users' Amazon S3 accounts.

## Setup Guide

You can find your Amazon S3 app credentials in your [Amazon S3 Developer Account.](https://docs.aws.amazon.com/AmazonS3/latest/API/Type_API_Reference.html)

You'll need the following information to set up your Amazon S3 App with Paragon Connect:

* API Key

## Connecting to Amazon S3

Once your users have connected their Amazon S3 account, you can use the Paragon SDK to access the Amazon S3 API on behalf of connected users.

See the Amazon S3 [REST API documentation](https://docs.aws.amazon.com/AmazonS3/latest/API/Type_API_Reference.html) for their full API reference.

Any Amazon S3 API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get an Object
await paragon.request("amazons3", "/<Bucket>/<Key>", {
  method: "GET"
});

// Create a Bucket
await paragon.request("amazons3", "/<Bucket>", {
  method: "PUT",
  body: `<?xml version="1.0" encoding="UTF-8"?>
<CreateBucketConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
   <LocationConstraint>us-east-2</LocationConstraint>
</CreateBucketConfiguration>`
});
  
```

## Building Amazon S3 workflows

Once your Amazon S3 account is connected, you can add steps to perform the following actions:

* Create Folder
* Delete Folder
* Upload File
* Download File
* List Files

You can also use the Amazon S3 Request step to access any of Amazon S3's API endpoints without the authentication piece.

When creating or updating records in Amazon S3, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Amplitude
Source: https://docs.useparagon.com/resources/integrations/amplitude

Connect to your users' Amplitude accounts.

## Setup Guide

You can find your Amplitude app credentials on your [Amplitude Settings page](https://www.docs.developers.amplitude.com/analytics/find-api-credentials/).

You'll need the following information to set up your Amplitude App with Paragon Connect:

* Amplitude API Key

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Amplitude

Once your users have connected their Amplitude account, you can use the Paragon SDK to access the Amplitude API on behalf of connected users.

See the Amplitude [REST API documentation](https://www.docs.developers.amplitude.com/analytics/api-reference-overview/) for their full API reference.

Any Amplitude API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get cohorts data from Amplitude
paragon.request("amplitude", "/3/cohorts", {
  method: "GET",
});

// Get data from a dashboard chart
paragon.request("amplitude", "/api/3/chart/<chart_id>/query", {
  method: "GET"
});
  
```

## Building Amplitude workflows

Once your Amplitude account is connected, you use the Amplitude Request step to access any of Amplitude's API endpoints without the authentication piece.

When creating or updating records in Amplitude, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Apollo.Io
Source: https://docs.useparagon.com/resources/integrations/apollo-io

Connect to your users' Apollo.io accounts.

## Setup Guide

You can find your Apollo.io app credentials in your [Apollo.io Developer Account.](https://apolloio.github.io/apollo-api-docs/?shell#introduction)

You'll need the following information to set up your Apollo.io App with Paragon Connect:

* Apollo.io API Key

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Apollo.io

Once your users have connected their Apollo.io account, you can use the Paragon SDK to access the Apollo.io API on behalf of connected users.

See the Apollo.io [REST API documentation](https://apolloio.github.io/apollo-api-docs/?shell#introduction) for their full API reference.

Any Apollo.io API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Create a Contact            
await paragon.request('apolloio', '/contacts', {
  method: 'POST',
  body: { 
   "first_name": "Jonny",
   "last_name": "Snow",
   "title": "Lord Commander",
   "organization_name": "Apollo"
  },
});

// Search Users
await paragon.request('apolloio', '/users/search', {
  method: 'GET',
});
  
```

## Building Apollo.io workflows

Once your Apollo.io account is connected, you use the Apollo.io Request step to access any of Apollo.io's API endpoints without the authentication piece.

When creating or updating records in Apollo.io, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Asana
Source: https://docs.useparagon.com/resources/integrations/asana

Connect to your users' Asana accounts.

## Setup Guide

You can find your Asana app credentials by visiting your [Asana Developer App Console](https://app.asana.com/0/developer-console).

You'll need the following information to set up your Asana app with Paragon:

* Client ID
* Client Secret

### Add the Redirect URL to your Asana app

Paragon provides a redirect URL to send information to your Asana app. To add the redirect URL to your Asana app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log into your [Asana Developer App Console](https://app.asana.com/0/developer-console).

3. Select the Asana application you'd like to connect to Paragon.

4. Under **Authorization > Redirect URLs**, paste the Redirect URL provided in Step 1.

<Info>
  **Note:** You'll need to create a new Asana app if you don't already have one
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Configuring%20Asana%20for%20OAuth%20in%20Paragon.gif)
</Frame>

Asana provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

5. Under **Test & distribute > Manage distribution** , select **Any workspace** to allow your customers to enable your integration.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20all%20Workspaces%20in%20Asana%20for%20Paragon%20Connect.png" alt="" />
</Frame>

### Add your Asana app to Paragon

1. Select Asana from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Asana > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/asana#add-the-redirect-url-to-your-asana-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

## Connecting to Asana

Once your users have connected their Asana account, you can use the Paragon SDK to access the Asana API on behalf of connected users.

See the Asana [REST API documentation](https://developers.asana.com/docs/) for their full API reference.

Any Asana API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// List files
await paragon.request("asana", "tasks", { 
  method: "POST",
  body: {
    "name": "Water the plants",
    "due_on": "2019-09-15"
  }
});
```

## Building Asana workflows

Once your Asana account is connected, you can add steps to perform the following actions:

* Create Comment
* Create Project
* Get Projects
* Get Project by ID
* Create Task
* Update Task
* Get Tasks
* Get Task by ID
* Get Task by External ID
* Add Task to Selection
* Get Teams
* Get Workspaces

When creating or updating tasks in Asana, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Asana account. For example, you might want to trigger a workflow whenever tasks are updated to sync your users' Asana Tasks to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Asana%20Triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Asana below:

* **New Task**
* **Task Updated**
* **Task Completed**
* **Task Deleted**
* **Tag Added**
* **New Project**
* **New Comment**

## Testing Asana workflows

Once you have deployed your workflows and are ready to connect users from other Asana Workspaces to your Asana Application, ensure that you have selected the proper *Distribution method* for the application.

<Warning>
  Seeing an `invalid_request: The required parameter 'client_id' is missing`error?

  Ensure your Asana application is correctly distributed following these instructions.
</Warning>

In the ***Manage distribution*** settings of your Asana Application details found in the [Asana Developer App Console](https://app.asana.com/0/developer-console), select the ***Any Workspace*** distribution method. This will allow Asana users from other Workspaces to connect to your Asana application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/9a01fdc-Screenshot_2023-03-21_at_10.21.14_AM.png" alt="" />
</Frame>


# Azure DevOps
Source: https://docs.useparagon.com/resources/integrations/azure-devops

Connect to your users' Azure DevOps accounts.

## Setup Guide

You can find your Azure DevOps application credentials by visiting your Microsoft Azure Portal.

You'll need the following information to set up your Azure DevOps App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Azure DevOps app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Azure DevOps app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since Azure DevOps does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Client Secret as they expire for all Microsoft integrations.
</Info>

### Add your Azure DevOps app to Paragon

Under **Integrations > Connected Integrations > Azure DevOps > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/azure-devops#add-the-redirect-url-to-your-azure-devops-app) in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Azure%20DevOps%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Azure DevOps

Once your users have connected their Azure DevOps account, you can use the Paragon SDK to access the Azure DevOps API on behalf of connected users.

See the Azure DevOps [REST API documentation](https://docs.microsoft.com/en-us/rest/api/azure/devops) for their full API reference.

Any Azure DevOps API endpoints can be accessed with the Paragon SDK as shown in this examples

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
          
// Get Project List
await paragon.request("azuredevops", "/projects?api-version=5.0", {
  method: “GET”,
});
```

## Building Azure DevOps workflows

Once your Azure DevOps account is connected, you can add steps to perform the following actions:

* Search Work Items
* Create Work Item
* Update Work Item
* Delete Work Item

When creating or updating work items in Azure DevOps, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# BambooHR
Source: https://docs.useparagon.com/resources/integrations/bamboohr

Connect to your users' BambooHR accounts.

## Setup Guide

You can find your BambooHR app credentials in the [BambooHR Partner Program dashboard.](https://partners.bamboohr.com/apps-marketplace-program/)

You'll need the following information to set up your BambooHR App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your BambooHR app to Paragon

Under **Integrations > Connected Integrations > BambooHR > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found in your BambooHR Partner Program dashboard.
* **Client Secret:** Found in your BambooHR Partner Program dashboard.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20BambooHR%20application%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to BambooHR

Once your users have connected their BambooHR account, you can use the Paragon SDK to access the BambooHR API on behalf of connected users.

See the BambooHR [REST API documentation](https://documentation.bamboohr.com/reference/) for their full API reference.

Any BambooHR API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Company Directory
paragon.request("bamboohr", "/employees/directory", {
  method: "GET"
});

// Create a time-off request
paragon.request("bamboohr", "/employees/<EMPLOYEE ID>/time_off/request", {
  method: "POST",
  body: {
    "status": "approved",
    "start": "2022-07-01",
    "end": "2022-07-04",
    "timeOffTypeId": 86,
    "amount": 16,
    "notes": [{from: "manager", note: "Get well soon!"}],
    "previousRequest": 0
  }
});

// Get benefit deduction types
paragon.request("bamboohr", "/benefits/settings/deduction_types/all", {
  method: "GET"
});
  
```

## Building BambooHR workflows

Once your BambooHR account is connected, you can add steps to perform the following actions:

* Create Employee
* Update Employee
* Get Employee by ID
* Get Employee Directory
* Create a Time Off Request
* Change a Request Status
* Adjust Time Off Balance for an Employee
* Get Time Off Requests for an Employee
* Get Time Off Types
* Get Field List
* Add List Field Values

When creating or updating records in BambooHR, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# BigQuery
Source: https://docs.useparagon.com/resources/integrations/bigquery

Connect to your users' BigQuery accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable BigQuery in Google Cloud Console Dashboard

1. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Library** in the sidebar.

2. Search for "BigQuery API" from the API Library.

3. Select the "BigQuery API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/BigQuery%20in%20Google%20Cloud%20Platform.png" alt="" />
</Frame>

### Add your Google app to Paragon

1. Select **BigQuery** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > BigQuery > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/bigquery#add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.

* **Client Secret:** Found at the end of Step 1.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to BigQuery

Once your users have connected their BigQuery account, you can use the Paragon SDK to access the BigQuery API on behalf of connected users.

See the BigQuery [REST API documentation](https://cloud.google.com/bigquery/docs/reference/rest) for their full API reference.

Any BigQuery endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// List tables in a given dataset
paragon.request("bigquery", "/projects/<PROJECT ID>/datasets/<DATASET ID>/tables", {
  method: "GET"
});

// List projects
paragon.request("bigquery", "/projects", {
  method: "GET"
});

// Create a job
paragon.request("bigquery", "/projects/<PROJECT ID>/jobs", {
  method: "POST",
  body: {
    "kind": string,
    "etag": string,
    "id": string,
    "selfLink": string,
    "user_email": string,
    "configuration": {
      object (JobConfiguration)
    },
    "jobReference": {
      object (JobReference)
    },
    "statistics": {
      object (JobStatistics)
    },
    "status": {
      object (JobStatus)
    },
    "principal_subject": string
  }
});
  
```

## Building BigQuery workflows

Once your BigQuery account is connected, you use the BigQuery Request step to access any of BigQuery's API endpoints without the authentication piece.

When creating or updating records in BigQuery, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Publishing your BigQuery application

### Setting up a Redirect Page in your app

Your BigQuery integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```
paragon.connect("bigquery", {
  overrideRedirectUrl: "https://your-app.url/bigquery-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your BigQuery Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Box
Source: https://docs.useparagon.com/resources/integrations/box

Connect to your users Box accounts

## Setup Guide

You can find your Box app credentials in your [Box Developer Account.](https://developer.box.com/reference/)

You'll need the following information to set up your Box App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Box app to Paragon

Under **Integrations > Connected Integrations > Box > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Box App page.
* **Client Secret:** Found under Client Secret on your Box App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Box%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Box

Once your users have connected their Box account, you can use the Paragon SDK to access the Box API on behalf of connected users.

See the Box [REST API documentation](https://developer.box.com/reference/) for their full API reference.

Any Box API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get File Information
await paragon.request("box", "/files/:file_id", {
  method: "GET"
});

// Copy a file
await paragon.request("box", "/files/:file_id/copy", {
  method: "POST",
  body: {
    "parent":{
      "id": "123"
    }
  }
});

// List all collections
await paragon.request("box", "/collections", {
  method: "GET"
});
  
```

## Building Box workflows

Once your Box account is connected, you can add steps to perform the following actions:

* Save File
* Get File by ID
* List Files
* Create Folder
* Move Folder
* Get Folder by ID
* Search Folders
* Delete Folders

You can also use the Box Request step to access any of Box's API endpoints without the authentication piece.

When creating or updating records in Box, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Calendly
Source: https://docs.useparagon.com/resources/integrations/calendly

Connect to your users' Calendly accounts.

## Setup Guide

<Info>
  **Note:** You'll need to create a new Calendly app if you don't already have one.
</Info>

You can find your Calendly app credentials in your [Calendly Developer Account.](https://developer.calendly.com/api-docs/4b402d5ab3edd-calendly-developer)

You'll need the following information to set up your Calendly App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Calendly app

Paragon provides a redirect URL to send information to your Calendly app. To add the redirect URL to your Calendly app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log into your [Calendly Developer Portal](https://developer.calendly.com/).

3. Select your app from the list of apps.

4. Under **Redirect URLs**, paste-in the redirect URL from Paragon. The redirect URL can be found in Step 1.

5. Press the `Save` button to confirm your changes.

### Add your Calendly app to Paragon

Under **Integrations > Connected Integrations > Calendly > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Calendly App page.
* **Client Secret:** Found under Client Secret on your Calendly App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Calendly%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Calendly

Once your users have connected their Calendly account, you can use the Paragon SDK to access the Calendly API on behalf of connected users.

See the Calendly [REST API documentation](https://developer.calendly.com/api-docs/4b402d5ab3edd-calendly-developer) for their full API reference.

Any Calendly API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Fetch an organization's events
paragon.request("calendly", "/scheduled_events", {
  method: "GET"
});

// List an organization's or user's event types
paragon.request("calendly", "event_types?organization=<Organization>", {
  method: "GET"
});
  
```

## Building Calendly workflows

Once your Calendly account is connected, you can add steps to perform the following actions:

* Get Event Type Details
* Get Available Times for Event Type
* Search Events
* Get Event by ID
* Get Event Invitees
* Cancel Event

You can also use the Calendly Request step to access any of Calendly's API endpoints without the authentication piece.

When creating or updating records in Calendly, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Calendly account. For example, you might want to trigger a workflow whenever new invitees are created in Calendly to sync your users' Calendly events to your application in real-time.

You can find the full list of Webhook Triggers for ClickUp below:

* **Invitee Created**
* **Invitee Canceled**


# ClickUp
Source: https://docs.useparagon.com/resources/integrations/clickup

Connect to your users' ClickUp accounts.

## Setup Guide

<Info>
  **Note:** You'll need to create a new ClickUp app if you don't already have one.
</Info>

You can find your ClickUp app credentials by visiting your ClickUp Integrations Portal.

You'll need the following information to set up your ClickUp App with Paragon Connect:

* Client ID
* Client Secret

### Add the Redirect URL to your ClickUp app

Paragon provides a redirect URL to send information to your ClickUp app. To add the redirect URL to your ClickUp app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [ClickUp account](https://clickup.com/), click your Workspace avatar in the lower-left corner

3. Select **Integrations**.

4. Click **ClickUp API**.

5. Select your application.

6. Under **Redirect URL(s)**, paste-in Paragon Connect's redirect URL found in Step 1. Click the **Save** button to save your changes.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20the%20Paragon%20Redirect%20URL%20to%20Clickup%20for%20Paragon%20Connect.png)
</Frame>

### Add your ClickUp app to Paragon

1. Select ClickUp from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > ClickUp > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/clickup#add-the-redirect-url-to-your-clickup-app) in their respective sections:

* **Client ID:**

  * Log in to your ClickUp dashboard.

  * Select "**Settings"** from the sidebar.

  * Under **Integrations > ClickUp API**, select your application.

  * Copy the **Client ID** from "**Client ID**".

* **Client Secret:**

  * Log in to your ClickUp dashboard.

  * Select "**Settings"** from the sidebar.

  * Under **Integrations > ClickUp API**, select your application.

  * Copy the **Client Secret** from "**Client Secret**".

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20ClickUp%20application%20to%20Paragon%20Connect%20\(1\).png)
</Frame>

## Connecting to ClickUp

Once your users have connected their ClickUp account, you can use the Paragon SDK to access the ClickUp API on behalf of connected users.

See the ClickUp [REST API documentation](https://clickup.com/api) for their full API reference.

Any ClickUp API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get current team information
await paragon.request("clickup", "/team", {
  method: "GET"
});

// Get lists outside of folders
await paragon.request("clickup", "/space/<Space ID>/list?archived=false", {
  method: "GET"
});

// Create task in list
await paragon.request("clickup", "/list/<List ID>/task", {
  method: "POST",
  body: {
    name: "New Task Name",
    description: "New Task Description",
    status: "Open"
  }
});
  
```

## Building ClickUp workflows

Once your ClickUp account is connected, you can add steps to perform the following actions:

* Create Task
* Update Task
* Get Task by ID
* Search Tasks
* Delete Task

When creating or updating Tasks in ClickUp, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' ClickUp account. For example, you might want to trigger a workflow whenever new tasks are created in ClickUp to sync your users' ClickUp tasks to your application in real-time.

You can find the full list of Webhook Triggers for ClickUp below:

* **New Folder Created**
* **Folder Updated**
* **New List Created**
* **List Updated**
* **New Space Created**
* **Space Updated**
* **New Task Created**
* **Task Updated**


# Close
Source: https://docs.useparagon.com/resources/integrations/close

Connect to your users' Close accounts.

## Setup Guide

You can find your Close app credentials in your [Close Developer Account](https://developer.close.com/).

You'll need the following information to set up your Close App with Paragon Connect:

* Close API Key

## Connecting to Close

Once your users have connected their Close account, you can use the Paragon SDK to access the Close API on behalf of connected users.

See the Close [REST API documentation](https://developer.close.com/) for their full API reference.

Any Close API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a contact
paragon.request("close", "/contact", {
  method: "POST",
  body: {
    "lead_id":"lead_QyNaWw4fdSwxl5Mc5daMFf3Y27PpIcH0awPbC9l7uyo",
    "name":"John Appleseed",
    "title":"CEO",
    "phones":[
        {"phone":"9045551234","type":"mobile"}
    ],
    "emails":[
        {"email":"john@example.com","type":"office"}
    ],
    "urls":[
        {"url":"http://twitter.com/google/","type":"url"}
    ],
  }
});

// Create a lead
paragon.request("close", "[relative URL]", {
  method: "POST",
  body {
    "name": "Example Company",
    "url": "http://company.domain.com/",
    "description": "A company",
    "status_id": "stat_1ZdiZqcSIkoGVnNOyxiEY58eTGQmFNG3LPlEVQ4V7Nk",
    "contacts": [
        {
            "name": "Gob",
            "title": "Sr. Vice President",
            "emails": [
                {
                    "type": "office",
                    "email": "gob@example.com"
                }
            ],
            "phones": [
                {
                    "type": "office",
                    "phone": "8004445555"
                }
            ]
        }
    ]
  }
});

// Get all opportunities
paragon.request("close", "/opportunity", {
  method: "GET"
});
  
```

## Building Close workflows

Once your Close account is connected, you can add steps to perform the following actions:

* Create Record
* Update Record
* Get Record by ID
* Search Record
* Delete Record
* Search Records by JSON Filter

You can also use the Close Request step to access any of Close's API endpoints without the authentication piece.

When creating or updating records in Close, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Close account. For example, you might want to trigger a workflow whenever new leads are created in Close to sync your users' Close leads to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Close%20Webhook%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Close below:

* **Record Created**
* **Record Updated**
* **Record Deleted**


# Coda
Source: https://docs.useparagon.com/resources/integrations/coda

Connect to your users' Coda accounts.

## Setup Guide

You can find your Coda API Token in your [Coda account settings](https://coda.io/account).

You'll need the following information to set up your Coda account with Paragon Connect:

* Coda API Token

## Connecting to Coda

Once your users have connected their Coda account, you can use the Paragon SDK to access the Coda API on behalf of connected users.

See the Coda [REST API documentation](https://coda.io/developers/apis/v1) for their full API reference.

Any Coda API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a Document
paragon.request("coda", "/docs", {
  method: "POST",
  body: {
    "title": "Project Tracker",
    "sourceDoc": "iJKlm_noPq",
    "timezone": "America/Los_Angeles",
    "folderId": "fl-ABcdEFgHJi"
  }
});

// Get Documents
paragon.request("coda", "/docs", {
  method: "GET"
});
  
```

## Building Coda workflows

Once your Coda account is connected, you can add steps to perform the following actions:

* Create Document
* Search Documents
* Get Document by ID
* Delete Document
* Search Tables
* Get Table by ID

You can also use the Coda Request step to access any of Coda's API endpoints without the authentication piece.

When creating or updating records in Coda, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Confluence
Source: https://docs.useparagon.com/resources/integrations/confluence

Connect to your users' Confluence accounts.

## Setup Guide

You can find your Confluence app credentials in your [Confluence Developer Account.](https://developer.atlassian.com/cloud/confluence/rest/v1/intro)

You'll need the following information to set up your Confluence App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Confluence app to Paragon

Under **Integrations > Connected Integrations > Confluence > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Confluence App page.
* **Client Secret:** Found under Client Secret on your Confluence App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Confluence%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Confluence

Once your users have connected their Confluence account, you can use the Paragon SDK to access the Confluence API on behalf of connected users.

See the Confluence [REST API documentation](https://developer.atlassian.com/cloud/confluence/rest/v1/intro) for their full API reference.

Any Confluence API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Retrieve Pages
paragon.request("confluence", "/wiki/api/v2/pages", {
  method: "GET"
});

// Create a Page
paragon.request("confluence", "/wiki/api/v2/pages", {
  method: "POST",
  body: {
    "spaceId": 15,
    "status": "current",
    "title": "<string>",
    "body": {
      "representation": "storage",
      "value": "<string>"
    }
  }
});
  
```

## Building Confluence workflows

Once your Confluence account is connected, you can add steps to perform the following actions:

* Create Page
* Update Page
* Get Page by ID
* Get Pages in Space
* Get Pages by Label
* Search Pages
* Delete Page
* Get Space By ID
* Search Spaces

You can also the Confluence Request step to access any of Confluence's API endpoints without the authentication piece.

When creating or updating records in Confluence, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Copper
Source: https://docs.useparagon.com/resources/integrations/copper

Connect to your users' Copper accounts.

## Setup Guide

You can find your Copper CRM credentials in your Copper settings.

You'll need the following information to set up your Copper account with Paragon Connect:

* Email Address of the Token Owner
* API Key

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Copper

Once your users have connected their Copper account, you can use the Paragon SDK to access the Copper API on behalf of connected users.

See the Copper [REST API documentation](https://developer.copper.com/) for their full API reference.

Any Copper API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a Person
paragon.request("copper", "/v1/people", {
  method: "POST",
  body: {
    "name":"Foo Westwood",
    "emails": [
      {
      "email":"foo@westwood.com",
      "category":"work"
      }
    ],
    "address": {
      "street": "123 Main Street",
      "city": "Savannah",
      "state": "Georgia",
      "postal_code": "31410",
      "country": "United States"
    },
    "phone_numbers": [
      {
      "number":"415-123-45678",
      "category":"mobile"
      }
    ]
  }
});

// Create a Lead
paragon.request("copper", "/v1/leads", {
  method: "POST",
  body: {
    "name":"Foo Westwood",
    "email": {
      "email":"foo@westwood.com",
      "category":"work"
    },
    "phone_numbers": [
      {
        "number":"415-123-45678",
        "category":"mobile"
      }
    ],
    "address": {
      "street": "123 Main Street",
      "city": "Savannah",
      "state": "Georgia",
      "postal_code": "31410",
      "country": "United States"
    },
    "custom_fields": [
      {
        "custom_field_definition_id": 100764,
        "value": "Text fields are 255 chars or less!"
      },
      {
        "custom_field_definition_id": 103481,
        "value": "Text area fields can have long text content"
      }
    ],
    "customer_source_id":331242
  }
});

// Search Opportunities
paragon.request("copper", "/v1/opportunities/search", {
  method: "POST",
  body: {
    "page_size": 5,
    "sort_by": "name"
  }
});
  
```

## Building Copper workflows

Once your Copper account is connected, you use the Copper Request step to access any of Copper's API endpoints without the authentication piece.

When creating or updating records in Copper, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# DocuSign
Source: https://docs.useparagon.com/resources/integrations/docusign

Connect to your users' DocuSign accounts.

## Setup Guide

You can find your DocuSign app credentials in your [DocuSign Developer Account.](https://developers.docusign.com/docs/esign-rest-api/reference/)

You'll need the following information to set up your DocuSign App with Paragon Connect:

* Integration Key
* Secret Key
* Scopes Requested

### Add your DocuSign app to Paragon

Under **Integrations > Connected Integrations > DocuSign > Settings**, fill out your credentials from your developer app in their respective sections:

* **Integration Key:** Found under Apps and Keys section on your DocuSign App page.
* **Secret Key:** Found under Apps and Keys section on your DocuSign App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Integration Key and Secret Key blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20DocuSign%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to DocuSign

Once your users have connected their DocuSign account, you can use the Paragon SDK to access the DocuSign API on behalf of connected users.

See the DocuSign [REST API documentation](https://developers.docusign.com/docs/esign-rest-api/reference/) for their full API reference.

Any DocuSign API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get recipient signature information for a signer
await paragon.request("docusign", "/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature", {
  method: "GET"
});

// List documents associated with a DocuSign envelope object
  method: "GET"
});

// Get a list of invoices for the account
await paragon.request("docusign", "/billing_invoices", {
  method: "GET"
});
  
```

## Building DocuSign workflows

Once your DocuSign account is connected, you can add steps to perform the following actions:

* Create an Envelope
* Get Envelope by ID
* Update Envelope
* Send an Envelope
* Search Envelopes
* Envelope Custom Fields (CRUD)

You can also use the DocuSign Request step to access any of DocuSign's API endpoints without the authentication piece.

When creating or updating records in DocuSign, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' DocuSign account. For example, you might want to trigger a workflow whenever new envelopes are signed in DocuSign to sync your users' DocuSign envelopes to your application in real-time.

You can find the full list of Webhook Triggers for DocuSign below:

* **Envelope Sent**
* **Envelope Delivered**
* **Envelope Signed/Completed**
* **Envelope Declined**
* **Recipient Sent**
* **Recipient Signed/Completed**
* **Recipient Declined**


# Dropbox
Source: https://docs.useparagon.com/resources/integrations/dropbox

Connect to your users' Dropbox accounts.

## Setup Guide

You can find your Dropbox app credentials in your [Dropbox Developer Account.](https://www.dropbox.com/developers/documentation/http/documentation)

You'll need the following information to set up your Dropbox App with Paragon Connect:

* App Key
* App Secret
* Scopes Requested

### Add the Redirect URL to your Dropbox app

Paragon provides a redirect URL to send information to your Dropbox app. To add the redirect URL to your Dropbox app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log into your [Dropbox Developer Portal](https://www.dropbox.com/developers/).

3. Select your app from the list of apps.

4. Under **Redirect URIs**, paste-in the redirect URL from Paragon. The redirect URL can be found in Step 1.

5. Press the `Save` button to confirm your changes.

### Add your Dropbox app to Paragon

Under **Integrations > Connected Integrations > Dropbox > Settings**, fill out your credentials from your developer app in their respective sections:

* **App Key:** Found under **Settings > App key** on your Dropbox App page.
* **App Secret** Found under **Settings > App secret** on your Dropbox App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Dropbox%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Dropbox

Once your users have connected their Dropbox account, you can use the Paragon SDK to access the Dropbox API on behalf of connected users.

See the Dropbox [REST API documentation](https://www.dropbox.com/developers/documentation/http/documentation) for their full API reference.

Any Dropbox API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Query files in Dropbox's root directory
paragon.request("dropbox", "/2/files/list_folder", {
  method: "POST",
  body: {
  {
    "include_deleted": false,
    "include_has_explicit_shared_members": false,
    "include_media_info": false,
    "include_mounted_folders": true,
    "include_non_downloadable_files": true,
    "path": "",
    "recursive": false
  }
});

// Move a file or folder to a different location.
paragon.request("dropbox", "/2/files/move_v2", {
  method: "POST",
  body: {
    "allow_ownership_transfer": false,
    "allow_shared_folder": false,
    "autorename": false,
    "from_path": "/Homework/math",
    "to_path": "/Homework/algebra"
  }
});

  
```

## Building Dropbox workflows

Once your Dropbox account is connected, you can add steps to perform the following actions:

* Save File
* Get File by Name
* List Files
* Create Folder
* Move Folder
* Get Folder by ID
* Search Folders
* Delete Folder

When creating or updating records in Dropbox, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Dropbox account. For example, you might want to trigger a workflow whenever new files are created in Dropbox to sync your users' Dropbox files to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Dropbox%20Webhook%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Dropbox below:

* **File Created**
* **File Deleted**
* **File Updated**


# Dropbox Sign
Source: https://docs.useparagon.com/resources/integrations/dropboxsign

Connect to your users' Dropbox Sign accounts.

## Setup Guide

You can find your Dropbox Sign API Key in your [Dropbox Sign API Settings](https://app.hellosign.com/home/myAccount?current_tab=integrations#api)[.](https://developers.hellosign.com/api/reference/welcome/)

You'll need the following information to set up your Dropbox Sign App with Paragon Connect:

* API Key

## Connecting to Dropbox Sign

Once your users have connected their Dropbox Sign account, you can use the Paragon SDK to access the Dropbox Sign API on behalf of connected users.

See the Dropbox Sign [REST API documentation](https://developers.hellosign.com/api/reference/welcome/) for their full API reference.

Any Dropbox Sign API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create Embedded Signature Request
await paragon.request('dropboxsign', 'signature_request/create_embedded', {
  method: 'POST'
  body: {
    "title": "NDA with Acme Co.",
    "subject": "The NDA we talked about",
    "message": "Please sign this NDA and then we can discuss more. Let me know if you have any questions.",
    "signers": [
      {
        "email_address": "jack@example.com",
        "name": "Jack",
        "order": 0
      },
    ],
    "cc_email_addresses": [
      "lawyer@dropboxsign.com",
      "lawyer@dropboxsign.com"
    ],
    "file_urls": [
      "https://www.dropbox.com/s/ad9qnhbrjjn64tu/mutual-NDA-example.pdf?dl=1"
    ],
    "metadata": {
      "custom_id": 1234,
      "custom_text": "NDA #9"
    },
    "signing_options": {
      "draw": true,
      "type": true,
      "upload": true,
      "phone": false,
      "default_type": "draw"
    },
    "field_options": {
      "date_format": "DD - MM - YYYY"
    },
    "test_mode": true
  }
});

// Get the status of a Signature Request
await paragon.request("dropboxsign", "signature_request/<signature_request_id>", {
  method: "GET",
});  
```

## Building Dropbox Sign workflows

Once your Dropbox Sign account is connected, you can add steps to perform the following actions:

* Create and Send Signature Request
* Update Signature Request
* Get Signature Request by ID
* Search Signature Requests
* Cancel Incomplete Signature Request
* Download Files

You can also use the Dropbox Sign Request step to access any of Dropbox Sign's API endpoints without the authentication piece.

When creating or updating records in Dropbox Sign, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Dynamics 365 Finance
Source: https://docs.useparagon.com/resources/integrations/dynamics-finance

Connect to your users' Dynamics 365 Finance accounts.

## Setup Guide

You can find your Dynamics 365 Finance app credentials in your [Dynamics 365 Finance Developer Account.](https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/odata)

You'll need the following information to set up your Dynamics 365 Finance App with Paragon Connect:

* Client Key
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Dynamics 365 Finance app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Dynamics 365 Finance app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since Dynamics 365 Finance does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

### Add your Dynamics 365 Finance app to Paragon

1. Select **Dynamics 365 Finance** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Dynamics 365 > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/dynamics-finance#add-the-redirect-url-to-your-dynamics-365-finance-app) in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Dynamics%20365%20Finance%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Dynamics 365 Finance

Once your users have connected their Dynamics 365 Finance account, you can use the Paragon SDK to access the Dynamics 365 Finance API on behalf of connected users.

See the Dynamics 365 Finance [REST API documentation](https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/data-entities/odata) for their full API reference.

Any Dynamics 365 Finance API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get a list of customers
paragon.request("dynamicsfinance", "/Customers", {
  method: "GET"
});

// Get a list of vendors
paragon.request("dynamicsfinance", "/Vendors", {
  method: "GET"
});

// Get a list of "Inventory profiles"
paragon.request("dynamicsfinance", "/InventoryProfiles", {
  method: "GET"
});  
  
```

## Building Dynamics 365 Finance workflows

When creating or updating records in Dynamics 365 Finance, you can reference data from previous steps by typing `{{` to invoke the variable menu.

* Get Accounts
* Create Vendor
* Update Vendor
* Get Vendor by ID
* Search for Vendor
* Create Bill
* Update Bill
* Get Bill by ID
* Search for Bill
* Delete Bill
* Create Bill Line Item
* Update Bill Line Item
* Get Bill Line Item by ID
* Search for Bill Line Item
* Delete Bill Line Item
* Create Customer
* Update Customer
* Get Customer by ID
* Search for Customer
* Delete Customer
* Create Invoice
* Update Invoice
* Get Invoice by ID
* Search for Invoice
* Delete Invoice
* Create Payment Journal
* Update Payment Journal
* Get Payment Journal by ID
* Search for Payment Journal
* Delete Payment Journal
* Create Payment Journal Line Item
* Update Payment Journal Line Item
* Get Payment Journal Line Item by ID
* Search for Payment Journal Line Item
* Delete Payment Journal Line Item


# Dynamics 365 Business Central
Source: https://docs.useparagon.com/resources/integrations/dynamicsbusinesscentral

Connect to your users' Dynamics 365 Business Central accounts.

## Setup Guide

You can find your Dynamics 365 Business Central app credentials in your [Dynamics 365 Business Central Developer Account.](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/api-reference/v2.0/)

You'll need the following information to set up your Dynamics 365 Business Central App with Paragon Connect:

* Consumer Key
* Consumer Secret
* Scopes Requested

### Add the Redirect URL to your Dynamics 365 Finance app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Dynamics 365 Business Central app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since Dynamics 365 Business Central does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

### Add your Dynamics 365 Business Central app to Paragon

1. Select **Dynamics 365 Business Central** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Dynamics 365 Business Central > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/dynamicsbusinesscentral#add-the-redirect-url-to-your-dynamics-365-finance-app) in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Dynamics%20365%20Business%20Central%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Dynamics 365 Business Central

Once your users have connected their Dynamics 365 Business Central account, you can use the Paragon SDK to access the Dynamics 365 Business Central API on behalf of connected users.

See the Dynamics 365 Business Central [REST API documentation](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/api-reference/v2.0/) for their full API reference.

Any Dynamics 365 Business Central API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create purchase invoice
paragon.request("dynamicsbusinesscentral", "/purchaseInvoices", {
  method: "POST",
  body: {
    number: "108001",
    invoiceDate: "2019-01-01",
    dueDate: "2019-01-01",
    currencyCode: "USD",
    pricesIncludeTax: false,
    totalAmountExcludingTax: 3122.8,
    totalTaxAmount: 187.37,
    totalAmountIncludingTax: 3310.17,
    status: "Paid",
  }
});

// Get the balance sheet
paragon.request("dynamicsbusinesscentral", "/balanceSheet?$orderby=lineNumber&$filter=dateFilter eq 2020-12-30", {
  method: "GET"
});

//Update a vendor by ID
paragon.request("dynamicsbusinesscentral", "/vendors([Vendor ID])", {
  method: "PATCH",
  body: {
    displayName: "Wide World Importers Inc.",
    blocked: "Payment"
  }
});
  
```

## Building Dynamics 365 Business Central workflows

When creating or updating records in Dynamics 365 Business Central, you can reference data from previous steps by typing `{{` to invoke the variable menu.

* Create Vendor
* Update Vendor
* Get Vendor by ID
* Search for Vendor
* Delete Vendor
* Create Purchase Invoice
* Update Purchase Invoice
* Post a Purchase Invoice
* Get a Purchase Invoice by ID
* Search for Purchase Invoice
* Delete Purchase Invoice
* Create Purchase Invoice Line Item
* Update Purchase Invoice Line Item
* Get Purchase Invoice Lines
* Get Purchase Invoice Line Item by ID
* Search for Purchase Invoice Line Item
* Delete Purchase Invoice Line Item
* Get Accounts
* Get Account by ID
* Create Tax Group
* Update Tax Group
* Get Tax Group by ID
* Search for Tax Group
* Delete Tax Group
* Create Payment Term
* Update Payment Term
* Get Payment Term by ID
* Search for Payment Term
* Delete Payment Term

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Dynamics 365 Business Central account. For example, you might want to trigger a workflow whenever new records are created in Dynamics 365 Business Central to sync your users' Dynamics 365 Business Central records to your application in real-time.

You can find the full list of Webhook Triggers for Dynamics 365 Business Central below:

* **Record Created**
* **Record Updated**
* **Record Deleted**


# Oracle Eloqua
Source: https://docs.useparagon.com/resources/integrations/eloqua

Connect to your users' Oracle Eloqua accounts.

## Setup Guide

You can find your Oracle Eloqua app credentials by visiting your Oracle Eloqua App dashboard.

**Note:** You'll need to create a new Oracle Eloqua app if you don't already have one.

You'll need the following information to set up your Oracle Eloqua App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Oracle Eloqua app to Paragon

Under **Integrations > Connected Integrations > Oracle Eloqua > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Oracle Eloqua App page.
* **Client Secret:** Found under Client Secret on your Oracle Eloqua App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

**Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20an%20Oracle%20Eloqua%20application%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Oracle Eloqua

Once your users have connected their Oracle Eloqua account, you can use the Paragon SDK to access the Oracle Eloqua API on behalf of connected users.

See the Oracle Eloqua [REST API documentation](https://docs.oracle.com/en/cloud/saas/marketing/eloqua-rest-api/rest-endpoints.html) for their full API reference.

Any Oracle Eloqua API endpoints can be accessed with the Paragon SDK as shown in this example.

```
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get a list of all campaigns
await paragon.request("eloqua", "/api/rest/2.0/assets/campaigns", {
  method: "GET"
});

// Create a campaign
await paragon.request("eloqua", "/api/rest/2.0/assets/campaign", {
  method: "POST",
  body: {
    name: "New campaign",
    elements: []
  }
});

// Activate a campagin
await paragon.request("eloqua", "/api/rest/2.0/assets/campaign/active/<Campaign ID>", {
method: "POST",
body: {
  activateNow: true
}
});
```

## Building Oracle Eloqua workflows

Once your Oracle Eloqua account is connected, you can add steps to perform the following actions:

* Create Campaign
* Update Campaign
* Activate Campaign
* Search Campaigns
* Get Campaign by ID
* Create Email
* Update Email
* Search Emails
* Send Email Deployment
* Create Contact
* Update Contact
* Search Contacts

When creating or updating campaigns or contacts in Oracle Eloqua, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20a%20Oracle%20Eloqua%20workflow%20in%20Paragon%20Connect.png)
</Frame>


# Emarsys
Source: https://docs.useparagon.com/resources/integrations/emarsys

Connect to your users' Emarsys accounts.

## Setup Guide

You can find your Emarsys app credentials in your [Emarsys account.](https://dev.emarsys.com/docs/core-api-reference/64bjdnkvt328t-overview-of-endpoint-batches)

You'll need the following information to set up your Emarsys account with Paragon Connect:

* API Username
* API Secret

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Emarsys

Once your users have connected their Emarsys account, you can use the Paragon SDK to access the Emarsys API on behalf of connected users.

See the Emarsys [REST API documentation](https://dev.emarsys.com/docs/core-api-reference/64bjdnkvt328t-overview-of-endpoint-batches) for their full API reference.

Any Emarsys API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// List Contacts
await paragon.request("emarsys", "v2/contact/query/?return=<field identifier ID>", {
  method: "GET"
});

// Update a Contact
await paragon.request("emarsys", "v2/contact", {
  method: "PUT",
  body: {
  "key_id": "3",
  "contacts": [
    {
      "1": "sample text",
      "2": "sample text",
      "3": "xyz@example.com"
    }
  ]
}
});

// Get Segments
paragon.request("emarsys", "v2/filter/<Segment ID>", {
  method: "GET"
});

// Get Campaigns
paragon.request("emarsys", "v2/email", {
  method: "GET"
});
  
```

## Building Emarsys workflows

Once your Emarsys account is connected, you use the Emarsys Request step to access any of Emarsys's API endpoints without the authentication piece.

When creating or updating records in Emarsys, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Facebook Ads
Source: https://docs.useparagon.com/resources/integrations/facebook-ads

Connect to your users' Facebook Ads accounts.

## Setup Guide

You can find your Facebook Ads app credentials by visiting your [Facebook Developer App Settings.](https://developers.facebook.com/apps/)

<Info>
  **Note:** You'll need to create a new Facebook Ads app if you don't already have one.
</Info>

You'll need the following information to set up your Facebook Ads App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Facebook Ads app

Paragon provides a redirect URL to send information to your Facebook Ads app. To add the redirect URL to your Facebook Ads app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log into your [Facebook Developer Portal](https://developers.facebook.com/apps/).

3. Select your app from the list of apps.

4. Under **Add a product**, select **Facebook Login**.

5. Under **Valid OAuth Redirect URIs**, paste-in the redirect URL from Paragon. The redirect URL can be found in Step 1.

6. Press the blue `Save changes` button to confirm your changes.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20the%20Facebook%20Ads%20redirect%20URL%20for%20Paragon%20Connect.png)
</Frame>

### Add your Facebook Ads app to Paragon

1. Select **Facebook Ads** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Facebook Ads > Settings**, fill out your credentials in their respective sections:

* **Client ID:**

  1. Log in to your Facebook Ads [dashboard](https://developers.facebook.com/apps/).

  2. Select your application.

  3. Select **Settings > Basic** from the sidebar.

  4. Copy the **App ID** to use in Paragon Connect.

* **Client Secret:**

  1. Log in to your Facebook Ads [dashboard](https://developers.facebook.com/apps/).

  2. Select your application.

  3. Select **Settings > Basic** from the sidebar.

  4. Copy your **App Secret** to use in Paragon Connect.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Facebook%20Ads%20account%20to%20Paragon.png)
</Frame>

## Connecting to Facebook Ads

Once your users have connected their Facebook Ads account, you can use the Paragon SDK to access Facebook Ads on behalf of connected users.

See the Facebook Ads [REST API documentation](https://developers.facebook.com/docs/marketing-apis/overview) for their full API reference.

Any Facebook Ads API endpoints can be accessed with the Paragon SDK as shown in this example.

```js JavaScript
// You can find your project ID in the Overview tab of any Integration.

// Authenticate the user
paragon.authenticate(<ProjectID>, <Paragon User Token>);

// Get Campaigns
await paragon.request(‘facebookAds’, 'act_<AD_ACCOUNT_ID>/campaigns', {
  method: 'GET'
})

// Create a Campaign
await paragon.request('facebookAds', 'act_<AD_ACCOUNT_ID>/campaigns' , {
  method: 'POST',
  body: {
    name: "My First Campaign",
    objective: "POST_ENGAGEMENT",
    status: "PAUSED",
    special_ad_categories: []
  }
})
```

## Building Facebook Ads workflows

Once your Facebook Ads account is connected, you can add steps to perform the following actions:

* Create Campaign
* Update Campaign
* Get Campaigns
* Get Campaign by ID
* Create Ad Set
* Update Ad Set
* Get Ad Sets
* Get Ad Set by ID
* Create Ad
* Update Ad
* Get Ad by ID
* Build Ad Creative Object
* Create Ad Creative
* Create Lead Gen Form
* Send Purchase Event
* Send Lead Event
* Send Other Event

When using Facebook Ads, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Facebook%20Ads%20Workflow.svg)
</Frame>


# Facebook Pages
Source: https://docs.useparagon.com/resources/integrations/facebook-pages

Connect to your users' Facebook Pages accounts.

## Setup Guide

You can find your Facebook Ads app credentials by visiting your [Facebook Developer App Settings.](https://developers.facebook.com/apps/)

<Info>
  **Note:** You'll need to create a new Facebook Pages app if you don't already have one.
</Info>

You'll need the following information to set up your Facebook Pages App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Facebook Pages app

Paragon provides a redirect URL to send information to your Facebook Pages app. To add the redirect URL to your Facebook Pages app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log into your [Facebook Developer Portal](https://developers.facebook.com/apps/).

3. Select your app from the list of apps.

4. Under **Add a product**, select **Facebook Login**.

5. Under **Valid OAuth Redirect URIs**, paste-in the redirect URL from Paragon. The redirect URL can be found in Step 1.

6. Press the blue `Save changes` button to confirm your changes.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20the%20Facebook%20Ads%20redirect%20URL%20for%20Paragon%20Connect.png)
</Frame>

### Add your Facebook Pages app to Paragon

1. Select **Facebook** Pages from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Facebook Pages > Settings**, fill out your credentials in their respective sections:

* **Client ID:**

  1. Log in to your Facebook Pages [dashboard](https://developers.facebook.com/apps/).

  2. Select your application.

  3. Select **App Settings > Basic** from the sidebar.

  4. Copy the **App ID** to use in Paragon Connect.

* **Client Secret:**

  1. Log in to your Facebook Pages [dashboard](https://developers.facebook.com/apps/).

  2. Select your application.

  3. Select **App Settings > Basic** from the sidebar.

  4. Copy your **App Secret** to use in Paragon Connect.

Press the blue "**Connect**" button to save your credentials.

* **Permissions:**

  1. Log in to your Facebook Pages [dashboard](https://developers.facebook.com/apps/).

  2. Select your application.

  3. Select **App Review > Permissions and Features** from the sidebar.

  4. Copy your scopes to use in Paragon Connect.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Facebook%20Pages%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Facebook Pages

Once your users have connected their Facebook Pages account, you can use the Paragon SDK to access Facebook Pages on behalf of connected users.

See the Facebook Pages [REST API documentation](https://developers.facebook.com/docs/pages) for their full API reference.

Any Facebook Pages endpoints can be accessed with the Paragon SDK as shown in this example.

```js JavaScript
// You can find your project ID in the Overview tab of any Integration.

// Authenticate the user
paragon.authenticate(<ProjectID>, <Paragon User Token>);

// Post content to a Facebook Page
await paragon.request('facebookpages', '/feed', {
  method: 'POST',
  body: {
  'message': 'Hello Fans!'
  }
});

// Get Page Info
await paragon.request('facebookpages', '?fields=about,name,category,description,contact_address,emails,app_id,posts,username,verification_status,link,personal_info,phone', {
  method: 'GET'
});

// Get a single Metric
await paragon.request('facebookpages', '/insights/<metric-name>', {
  method: 'GET'
});
```

## Building Facebook Pages workflows

Once your Facebook Pages account is connected, you use the Facebook Pages Request step to access any of Facebook Pages' API endpoints without the authentication piece.

When creating or updating records in Facebook Pages, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Figma
Source: https://docs.useparagon.com/resources/integrations/figma

Connect to your users' Figma accounts.

## Setup Guide

You can find your Figma app credentials in your [Figma Developer Account.](https://www.figma.com/plugin-docs/apis/api-reference/)

You'll need the following information to set up your Figma App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Figma app to Paragon

Under **Integrations > Connected Integrations > Figma > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Figma App page.
* **Client Secret:** Found under Client Secret on your Figma App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Figma%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Figma

Once your users have connected their Figma account, you can use the Paragon SDK to access the Figma API on behalf of connected users.

See the Figma [REST API documentation](https://www.figma.com/plugin-docs/apis/api-reference/) for their full API reference.

Any Figma API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get a File
paragon.request("figma", "/v1/files/:key", {
  method: "GET"
});

// Get a Project's Files
paragon.request("figma", "/v1/projects/:project_id/files", {
  method: "GET"
});
  
```

## Building Figma workflows

Once your Figma account is connected, you can add steps to perform the following actions:

* Get Files by ID
* Get File Node
* Get Rendered Image from File
* Get Users' Projects
* Get Project Files
* Create Comment
* Get Comments by File
* Delete Comment
* Create Comment Reaction
* Get Comment Reactions by File
* Delete Comment Reaction

You can also the Figma Request step to access any of Figma's API endpoints without the authentication piece.

When creating or updating records in Figma, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Freshdesk
Source: https://docs.useparagon.com/resources/integrations/freshdesk

Connect to your users' Freshdesk accounts.

## Setup Guide

You can find your Freshdesk credentials in your [Freshdesk account.](https://developers.freshdesk.com/api/)

You'll need the following information to set up your Freshdesk account with Paragon Connect:

* Freshdesk Domain
* API Key

## Connecting to Freshdesk

Once your users have connected their Freshdesk account, you can use the Paragon SDK to access the Freshdesk API on behalf of connected users.

See the Freshdesk [REST API documentation](https://developers.freshdesk.com/api/) for their full API reference.

Any Freshdesk API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get all tickets
paragon.request("freshdesk", "/tickets", {
  method: "GET"
});

// Create a ticket
paragon.request("freshdesk", "/tickets", {
  method: "POST",
  body: { 
     description: "Details about the issue...",
     subject: "Support Needed...",
     email: "tom@outerspace.com",
     priority: 1,
     status: 2,
     cc_emails: ["ram@freshdesk.com","diana@freshdesk.com"]
    }
});

// Get all contacts
paragon.request("freshdesk", "/contacts", {
  method: "GET"
});
  
```

## Building Freshdesk workflows

Once your Freshdesk account is connected, you can add steps to perform the following actions:

* Create Ticket
* Update Ticket
* Get Ticket by ID
* Delete Ticket

Additionally, you can also use the Freshdesk Request step to access any of Freshdesk's API endpoints without the authentication piece.

When creating or updating records in Freshdesk, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Freshsales
Source: https://docs.useparagon.com/resources/integrations/freshsales

Connect to your users' Freshsales accounts.

## Setup Guide

You'll need the following information to set up your Freshsales App with Paragon Connect:

* Domain
* API Key

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Freshsales app to Paragon

Under **Integrations > Connected Integrations > Freshsales > Settings**, fill out your credentials from your developer app in their respective sections:

* **Domain:** Found under https\://\[domain].myfreshworks.com/
* **API Key:** Found under Profile Settings > API Settings > Your API Key on your Freshsales settings page.

## Connecting to Freshsales

Once your users have connected their Freshsales account, you can use the Paragon SDK to access the Freshsales API on behalf of connected users.

See the Freshsales [REST API documentation](https://developer.freshsales.io/api/) for their full API reference.

Any Freshsales API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a Contact
await paragon.request("freshsales", "/contacts", {
  method: "POST",
  body: {
    "contact": {
        "first_name": "James",
        "last_name": "Westwood",
        "mobile_number":"1-926-555-9503"
    }
  }
});

// Create a Lead
await paragon.request("freshsales", "/leads", {
  method: "POST",
  body: {
  "lead": {
         "first_name": "Foo",
         "last_name": "Westwood",
         "mobile_number":"1-926-652-9503",
         "company": { 
            "name": "Widgetz.io"
        } 
    }
  }
});

// Get all Deals
await paragon.request("freshsales", "/deals/view/<view_id>", {
  method: "GET"
});
  
```

## Building Freshsales workflows

Once your Freshsales account is connected, you use the Freshsales Request step to access any of Freshsales's API endpoints without the authentication piece.

When creating or updating records in Freshsales, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Front
Source: https://docs.useparagon.com/resources/integrations/front

Connect to your users' Front accounts.

## Setup Guide

You can find your Front app credentials in your [Front Developer Account.](https://dev.frontapp.com/reference/introduction)

You'll need the following information to set up your Front App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Front app to Paragon

Under **Integrations > Connected Integrations > Front > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Front App page.
* **Client Secret:** Found under Client Secret on your Front App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Front%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Front

Once your users have connected their Front account, you can use the Paragon SDK to access the Front API on behalf of connected users.

See the Front [REST API documentation](https://dev.frontapp.com/reference/introduction) for their full API reference.

Any Front API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a Conversation
await paragon.request('front', '/conversations', {
  method: "POST",
  body: {
    "type": "discussion",
    "inbox_id": "abc123",
    "subject": "Paragon",
    "comment": {
      "body": "Test Comment"
    }
  }
});

// List Contacts
await paragon.request("front", "/contacts", {
  method: "GET"
});

// Create a Contact
await paragon.request('front', '/contacts', {
  method: "POST",
  body: {
    "name": "Foo Westwood",
    "is_spammer": false,
    "handles": [
      {
        "handle": "@foo",
        "source": "twitter"
      }
    ]
  }
});
  
```

## Building Front workflows

Once your Front account is connected, you can add steps to perform the following actions:

* Create Account
* Update Account
* Get Account by ID
* Search Accounts
* Delete Account
* Create Contact
* Update Contact
* Get Contact by ID
* Search Contacts
* Delete Contact

You can also use the Front Request step to access any of Front's API endpoints without the authentication piece.

When creating or updating records in Front, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Gainsight
Source: https://docs.useparagon.com/resources/integrations/gainsight

Connect to your users' Gainsight accounts.

## Setup Guide

You can find your Gainsight API credentials in your [Gainsight account](https://support.gainsight.com/Gainsight_NXT/Connectors/Connectors/API_Integrations/Generate_API_Access_Key).

You'll need the following information to set up your Gainsight account with Paragon Connect:

* Access Key
* Instance URL

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Gainsight

Once your users have connected their Gainsight account, you can use the Paragon SDK to access the Gainsight API on behalf of connected users.

See the Gainsight [REST API documentation](https://support.gainsight.com/Gainsight_NXT/API_and_Developer_Docs) for their full API reference.

Any Gainsight API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Playbooks
await paragon.request("gainsight", "/v2/cockpit/task/list", {
  method: "POST",
  body: {
    "select": [
        "Name"
    ]
 }
});

// Create CTAs from Cockpit
await paragon.request("gainsight", "/v2/cockpit/cta", {
  method: "POST",
  body: {
    "requests": [
      {
        "record": {
          "CompanyId": "1P02E3XFM9XIZFHS8U1E2JVX0AHMII6OIR1J",
          "OwnerId": "1P01KW4KG3SOEBEZMX7RSBJ0GI6BXXZ7NEX6",
          "referenceId": "1",
          "Name": "Potential Cancelation",
          "type": "Risk",
          "status": "New",
          "priority": "High",
          "reason": "Bugs Risk",
          "Comments": "test"
        }
      }
    ]
  }
});
  
```

## Building Gainsight workflows

Once your Gainsight account is connected, you use the Gainsight Request step to access any of Gainsight's API endpoints without the authentication piece.

When creating or updating records in Gainsight, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# GitHub
Source: https://docs.useparagon.com/resources/integrations/github

Connect to your users' GitHub accounts.

## Setup Guide

You can find your GitHub app credentials in your [GitHub Developer Account.](https://docs.github.com/en/rest)

You'll need the following information to set up your GitHub App with Paragon Connect:

* Client ID
* Client Secret

### Add the Redirect URL to your GitHub app

Paragon provides a redirect URL to send information to your GitHub app. To add the redirect URL to your GitHub app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log into your GitHub Account.

3. In the top-right corner, select **Settings**

4. Under **Developer Settings > OAuth Apps**, select your GitHub app.

<Info>
  **Note:** You'll need to create a new GitHub app if you don't already have one
</Info>

5. Under **General > Authorization callback URL**, paste the Redirect URL provided in Step 1.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20the%20Redirect%20URL%20to%20your%20GitHub%20application%20for%20Paragon%20Connect.gif" alt="" />
</Frame>

### Add your GitHub app to Paragon

Under **Integrations > Connected Integrations > GitHub > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Settings > Developer settings > \{YOUR APP} > Client ID on your GitHub App page.
* **Client Secret:** Found under Settings > Developer settings > \{YOUR APP} > Client Secret on your GitHub App page.

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20GitHub%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to GitHub

Once your users have connected their GitHub account, you can use the Paragon SDK to access the GitHub API on behalf of connected users.

See the GitHub [REST API documentation](https://docs.github.com/en/rest) for their full API reference.

Any GitHub API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get issues associated with a repository
paragon.request("github", "/repos/{owner}/{repo}/issues", {
  method: "GET"
});

// Create a comment on an issue
paragon.request("github", "/repos/{owner}/{repo}/issues/{issue_number}/comments", {
  method: "POST",
  body: {
    body: "Looks good to me!"
  }
});

// Specify labels for an issue
paragon.request("github", "/repos/{owner}/{repo}/issues/{issue_number}/labels
", {
  method: "PUT",
  body: {
    labels: [
      'bug',
      'enhancement'
    ]
  }
});
  
```

## Building GitHub workflows

Once your GitHub account is connected, you can add steps to perform the following actions:

* Create Issue
* Update Issue
* Get Issue by Number
* Lock an Issue
* Search an Issue
* Create Release
* Update Release
* Get Release by ID
* Get Release by Tag Name
* Delete Release

When creating or updating issues in GitHub, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' GitHub account. For example, you might want to trigger a workflow whenever new issues are created in GitHub to sync your users' GitHub issues to your application in real-time.

You can find the full list of Webhook Triggers for GitHub below:

* **Issue Created**
* **Issue Updated**
* **PR Created**
* **PR Updated**
* **Project Created**
* **Project Updated**
* **Project Created (Classic)**
* **Project Updated (Classic)**
* **Project Item Created**
* **Project Item Updated**


# Gmail
Source: https://docs.useparagon.com/resources/integrations/gmail

Connect to your users' Gmail accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Email API in Google Cloud Console Dashboard

1. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Gmail" from the API Library.

3. Select the "Gmail API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20the%20Gmail%20API%20in%20the%20Google%20Cloud%20Console%20Dashboard.png)
</Frame>

### Add your Google app to Paragon

1. Select **Gmail** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Gmail > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/google-sheets#1-add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should begin with `gmail`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Gmail

Once your users have connected their Gmail account, you can use the Paragon SDK to access the Gmail API on behalf of connected users.

See the Gmail [REST API documentation](https://developers.google.com/gmail/api/reference/rest) for their full API reference.

Any Gmail API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Send an email on behalf of a specified user
paragon.request("gmail", "/upload/gmail/v1/users/{userId}/messages/send", {
  method: "POST",
  body: {
    "raw": <Base64-encoded email>
  }
});

// Get all emails associated with a specified user
paragon.request("gmail", "gmail/v1/users/{userId}/messages", {
  method: "GET"
});
  
```

## Building Gmail workflows

Once your Gmail account is connected, you can add steps to perform the following actions:

* Send Email
* Get Email by ID
* Search for Email
* Delete Email
* Create a Contact
* Get Contact by Resource Name
* Search for Contact
* Delete Contact

When creating or getting emails in Gmail, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Gmail account. For example, you might want to trigger a workflow whenever new threads are created in Gmail to sync your users' Gmail threads to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Gmail%20Webhook%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Gmail below:

* **New Thread Created**
* **Thread Updated**
* **Thread Modified**

## Publishing your Gmail application

### Setting up a Redirect Page in your app

Your Gmail integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("gmail", {
  overrideRedirectUrl: "https://your-app.url/gmail-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Gmail Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Gong
Source: https://docs.useparagon.com/resources/integrations/gong

Connect to your users' Gong accounts.

## Setup Guide

<Info>
  **Note:** You'll need to create a new Gong app if you don't already have one.
</Info>

You can find your Gong app credentials in your [Gong Developer Account.](https://app.gong.io/settings/api/documentation#overview)

You'll need the following information to set up your Gong App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Calendly app

Paragon provides a redirect URL to send information to your Calendly app. To add the redirect URL to your Calendly app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log into your [Gong Developer Portal](https://developer.gong.com/).

3. Select your app from the list of apps.

4. Under **Redirect URL**, paste-in the redirect URL from Paragon. The redirect URL can be found in Step 1.

5. Press the `Save` button to confirm your changes.

### Add your Gong app to Paragon

Under **Integrations > Connected Integrations > Gong > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Gong App page.
* **Client Secret:** Found under Client Secret on your Gong App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Gong%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Gong

Once your users have connected their Gong account, you can use the Paragon SDK to access the Gong API on behalf of connected users.

See the Gong [REST API documentation](https://app.gong.io/settings/api/documentation#overview) for their full API reference.

Any Gong API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get all Calls after a specified date
paragon.request("gong", "/v2/calls?fromDateTime=2018-02-18T02:30:00-07:00", {
  method: "GET"
});

// Create a new Call
paragon.request("gong", "/v2/calls", {
  method: "POST",
  body: {
    "actualStart": "2018-02-17T02:30:00-08:00",
    "callProviderCode": "clearslide",
    "clientUniqueId": "123abc",
    "context": [
      {
        "objects": [
          {
            "fields": [
              {
                "name": "name",
                "value": "Gong Inc."
              }
            ],
            "objectId": "0013601230sV7grAAC",
            "objectType": "Account"
          }
        ],
        "system": "Salesforce"
      }
    ],
    "direction": "Conference",
    "duration": 125.8,
    "meetingUrl": "https://www.conference.com/john.smith",
    "parties": [
      {
        "emailAddress": "test@test.com",
        "name": "Test User",
        "userId": "7387268041252473322"
      }
    ],
    "primaryUser": "7387268041252471122",
    "purpose": "Demo Call",
    "scheduledEnd": "2018-02-19T02:30:00-08:00",
    "scheduledStart": "2018-02-17T02:30:00-08:00",
    "title": "Demo Test Call",
    "workspaceId": "623457276584334"
  }
});

// Get Log Data after a specified date
paragon.request("gong", " /v2/logs?fromDateTime=2018-02-18T02:30:00-07:00", {
  method: "GET"
});
  
```

## Building Gong workflows

Once your Gong account is connected, you can add steps to perform the following actions:

* Add a new Call
* Get Call by ID
* Search for Call

When creating or updating records in Gong, you can reference data from previous steps by typing `{{` to invoke the variable menu. You can also use the Gong Request step to access any of Gong's API endpoints without the authentication piece.


# Google
Source: https://docs.useparagon.com/resources/integrations/google

Connect to your users' Google applications

### Select your Google application

<Card href="/resources/integrations/bigquery">
  BigQuery
</Card>

<Card href="/resources/integrations/gmail">
  Gmail
</Card>

<Card href="/resources/integrations/googleads">
  Google Ad Manager
</Card>

<Card href="/resources/integrations/googleads">
  Google Ads
</Card>

<Card href="/resources/integrations/google-analytics">
  Google Analytics
</Card>

<Card href="/resources/integrations/googleanalyticsga4">
  Google Analytics GA4
</Card>

<Card href="/resources/integrations/google-calendar">
  Google Calendar
</Card>

<Card href="/resources/integrations/google-campaign-manager-360">
  Google Campaign Manager 360
</Card>

<Card href="/resources/integrations/googledocs">
  Google Docs
</Card>

<Card href="/resources/integrations/google-drive">
  Google Drive
</Card>

<Card href="/resources/integrations/google-search-console">
  Google Search Console
</Card>

<Card href="/resources/integrations/google-sheets">
  Google Sheets
</Card>


# Google Ad Manager
Source: https://docs.useparagon.com/resources/integrations/google-ad-manager

Connect to your users' Google Ad Manager accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Add your Google app to Paragon

1. Select **Google Ad Manager** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Ad Manager > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/google-ad-manager#add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Google Ad Manager

Once your users have connected their Google Ad Manager account, you can use the Paragon SDK to access the Google Ad Manager API on behalf of connected users.

See the Google Ad Manager [REST API documentation](https://developers.google.com/ad-manager/api/rel_notes) for their full API reference.

Any Google Ad Manager API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create an Order
await paragon.request("googleadmanager", "/OrderService ", {
  method: "POST",
  body: `
    <createOrders xmlns="https://www.google.com/apis/ads/publisher/v202408">
      <orders>
          <name>[string?]</name>
          <status>[string?]</status>
          <isArchived>true</isArchived>
      </orders>
  </createOrders>`
});

// Query Line Items
await paragon.request("googleadmanager", "/LineItemService", {
  method: "POST",
  body: `
    <getLineItemsByStatement xmlns="https://www.google.com/apis/ads/publisher/v202408">
      <filterStatement/>
    </getLineItemsByStatement>`
});
  
```

## Building Google Ad Manager workflows

Once your Google Ad Manager account is connected, you use the Google Ad Manager Request step to access any of Google Ad Manager's API endpoints without the authentication piece.

When creating or updating records in Google Ad Manager, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Publishing your Google Ad Manager application

### Setting up a Redirect Page in your app

Your Google Ad Manager integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googleadmanager", {
  overrideRedirectUrl: "https://your-app.url/google-ad-manager-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Ad Manager Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Analytics
Source: https://docs.useparagon.com/resources/integrations/google-analytics

Connect to your users' Google Analytics accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Analytics API in Google Cloud Console Dashboard

1. In your Google Cloud Console dashboard, navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Analytics API" and "Google Analytics Reporting API" from the API Library.

3. Select the "Google Analytics API" and "Google Analytics Reporting API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20the%20Google%20Analytics%20APIs%20for%20Paragon%20Connect.png)
</Frame>

### Add your Google app to Paragon

1. Select **Google Analytics** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Analytics > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/google-analytics#add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should begin with `analytics`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Google Analytics

Once your users have connected their Google Analytics account, you can use the Paragon SDK to access the Google Analytics API on behalf of connected users.

See the Google Analytics [REST API documentation](https://developers.google.com/analytics/devguides/config/mgmt/v3) for their full API reference.

Any Google Analytics API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get accounts the user has access to
await paragon.request("googleanalytics", "https://www.googleapis.com/analytics/v3/management/accounts", {
  method: "GET"
});
              
// Get goals for an account and web property
await paragon.request("googleanalytics","https://www.googleapis.com/analytics/v3/management/accounts/<Account ID>/webproperties/<Web Property ID>/profiles/<Profile ID>/goals", {
    method: "GET"
  });
  
// Run analytics query for a view
await paragon.request("googleanalytics", "https://analyticsreporting.googleapis.com/v4/reports:batchGet", {
  method: "POST",
  body: {
    reportRequests: [{
      viewId: "<View ID>"
    }],
    useResourceQuotas: true
  }
});
```

## **Building Google Analytics workflows**

Once your Google Analytics account is connected, you can add steps to perform the following actions:

* Run Report
* Get Realtime Data
* Get Custom Metrics
* Get Custom Dimensions

When creating or updating events in Google Analytics, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Publishing your Google Analytics application

### Setting up a Redirect Page in your app

Your Google Analytics integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googleanalytics", {
  overrideRedirectUrl: "https://your-app.url/google-analytics-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Analytics Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Calendar
Source: https://docs.useparagon.com/resources/integrations/google-calendar

Connect to your users' Google Calendar accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Calendar API in Google Cloud Console Dashboard

1. In your Google Cloud Console dashboard, navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Calendar API" from the API Library.

3. Select the "Google Calendar API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20Google%20Calendar%20API.png)
</Frame>

### Add your Google app to Paragon

1. Select **Google Calendar** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Calendar > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/google-calendar#add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should begin with `calendar`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Google Calendar

Once your users have connected their Google Calendar account, you can use the Paragon SDK to access the Google Calendar API on behalf of connected users.

See the Google Calendar [REST API documentation](https://developers.google.com/calendar/v3/reference) for their full API reference.

Any Google Calendar API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Calendar List
await paragon.request("googleCalendar", "/users/me/calendarList", { 
  method: "GET"
});
  
  
// Create Event
await paragon.request("googleCalendar", "/calendars/{calendarId}/events", { 
  method: “POST”,
  body: { 
    "start": { "dateTime" : new Date("2021-01-02").toISOString() },
    "end": { "dateTime" : new Date("2021-01-02").toISOString() },
  }
});
```

## **Building Google Calendar workflows**

Once your Google Calendar account is connected, you can add steps to perform the following actions:

* Create event
* Update event
* List events
* Get event by ID
* Delete event

When creating or updating events in Google Calendar, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Scheduling%20Google%20Calendar%20invites%20through%20Paragon.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Google Calendar. For example, you might want to trigger a workflow whenever events are created to sync your users' Google Calendar events to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Google%20Calendar%20Webhooks%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Google Calendar below:

* **New Event**
* **Event Updated**
* **Event Cancelled**
* **Event Started**
* **Event Ended**

## Publishing your Google Calendar application

### Setting up a Redirect Page in your app

Your Google Calendar integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googlecalendar", {
  overrideRedirectUrl: "https://your-app.url/google-calendar-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Calendar Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Campaign Manager 360
Source: https://docs.useparagon.com/resources/integrations/google-campaign-manager-360

Connect to your users' Google Campaign Manager 360 accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Campaign Manager 360 API in Google Cloud Console Dashboard

1. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Campaign Manager 360" from the API Library.

3. Select the "Google Campaign Manager 360 API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20the%20Google%20Campaign%20Manager%20360%20API%20to%20your%20Google%20project.png)
</Frame>

### Add your Google app to Paragon

1. Select **Google Campaign Manager 360** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Campaign Manager 360 > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/google-campaign-manager-360#1-add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should begin with `sheets`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Google Campaign Manager 360

Once your users have connected their Google Campaign Manager 360 account, you can use the Paragon SDK to access the Google Campaign Manager 360 API on behalf of connected users.

See the Google Campaign Manager 360 [REST API documentation](https://developers.google.com/doubleclick-advertisers/rest/v3.5) for their full API reference.

Any Google Campaign Manager 360 API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// List accounts 
await paragon.request("googlecampaignmanager", "/userprofiles/{profileId}/accounts", { 
  method: "GET"
});
  
  
// Create ad
await paragon.request("googlecampaignmanager", "/userprofiles/{profileId}/ads", { 
  method: "POST",
  body: { 
    "accountId": <some-account-id>,
    "active": false,
    "advertiserId":  <some-advertiser-id>,
    "campaignId":  <some-campaign-id>,
    "endTime": new Date("2021-01-02").toISOString(),
    "startTime": new Date("2021-01-02").toISOString(),
    "name": "Ad name"
  } 
});
  
```

## **Building** Google Campaign Manager 360 **workflows**

Once your Google Campaign Manager 360 account is connected, you can add steps to perform the following actions:

* Create Ad
* Update Ad
* Get Ads
* Get Ad by ID
* Get Advertisers
* Get Advertiser by ID
* Create Campaign
* Update Campaign
* Get Creatives
* Get Creative by ID
* Create Creative Asset
* Create Campaign Creative Association
* Get Campaign Creative Association
* Create Creative Group
* Update Creative Group
* Get Creative Groups
* Get Creative Group by ID
* Create Placement
* Update Placement
* Get Placements
* Get Placement by ID

When creating or getting ads in Google Campaign Manager 360, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Publishing your Google Campaign Manager 360 application

### Setting up a Redirect Page in your app

Your Google Campaign Manager 360 integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googlecampaignmanager", {
  overrideRedirectUrl: "https://your-app.url/google-campaign-manager-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Campaign Manager 360 Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Drive
Source: https://docs.useparagon.com/resources/integrations/google-drive

Connect to your users' Google Drive accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Drive API in Google Cloud Console Dashboard

1. In your [Google Cloud Console dashboard,](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Drive API" from the API Library.

3. Select the "Google Drive API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20Google%20Drive%20API.png)
</Frame>

### Add your Google app to Paragon

1. Select **Google Drive** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Drive > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/google-drive#1-add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should begin with `drive`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Google Drive

Once your users have connected their Google Drive account, you can use the Paragon SDK to access the Google Drive API on behalf of connected users.

See the Google Drive [REST API documentation](https://developers.google.com/drive/api/v3/reference) for their full API reference.

Any Google Drive API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Query Files
await paragon.request("googledrive", `/files?q=${
  encodeURIComponent('name="test"')
}`, {
  method: "GET"
});
```

## **Building Google Drive workflows**

Once your Google Drive account is connected, you can add steps to perform the following actions:

* Get File by ID
* Save File
* Export Google Doc
* Create Folder
* Delete Folder
* Get Folder by ID
* Move Folder
* Get Files
* Search Folders

When saving or getting files in Google Drive, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Google Drive account. For example, you might want to trigger a workflow whenever new files are created in Google Drive to sync your users' Google Drive files to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Google%20Drive%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Google Drive below:

* **File Created**
* **File Updated**
* **File Deleted**

## Using the Google Drive File Picker

You can allow your user to select files from their Google Drive account in your app with the Paragon SDK.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202023-10-18%20at%2011.47.47.gif" alt="" width="563" />
</Frame>

**Enable the Google Picker API**

You will need to enable the Google Picker API for your application in order to access the File Picker.

1. In your [Google Cloud Console dashboard,](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Picker API" from the API Library.

3. Select the "Google Picker API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20the%20Google%20Picker%20API%20for%20a%20Google%20Drive%20integraiton%20for%20Paragon%20Connect.png" alt="" />
</Frame>

**Creating a Google Drive API Key**

To show the Google Drive File Picker, you will need a **Google Drive API Key**. This key is a separate key from the Client ID you provided to Paragon during integration setup.

1. Navigate to the [Google Cloud Console > APIs & Services > Credentials](https://console.cloud.google.com/apis/credentials). Make sure the selected project in the header is your app.

2. Click Create Credentials.

3. Select API key.

4. An API Key value will appear. Copy this value to use in the next step.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/credentials_APIs_Services_example_Google_Cloud_console.png" alt="" />
</Frame>

**Note**: While the API Key value is not sensitive and can safely be used in your public application, we recommend restricting the API Key with the following settings:

* Application restrictions: Websites with your origin/domain
* API restrictions: Google Drive API

[Read more](https://cloud.google.com/docs/authentication/api-keys#api_key_restrictions) in Google's docs for API Key restrictions.

#### **Showing the File Picker**

Use the Paragon SDK in your frontend application to show the File Picker in your app.

The SDK provides an `ExternalFilePicker` class to load Google's JavaScript into your page and authenticate with your user's connected Google Drive account.

```js
let picker = new paragon.ExternalFilePicker("googledrive", {
    onFileSelect: (files) => {
        // Handle file selection
    }
});

// Loads external dependencies and user's access token
await picker.init({ developerKey: "YOUR_GOOGLE_API_KEY" });

// Open the File Picker
picker.open();
```

You can configure the File Picker to listen for additional callbacks or to restrict allowed file types. Learn more about configuring File Picker options in the [SDK Reference](/apis/api-reference#externalfilepicker).

#### Downloading the Selected File

The Google File Picker callback will return a `Response` object describing the user's file picker interaction including an array of any files selected. Using this array of `fileIds`, you can use the Connect API to perform an authenticated proxy requests to download the files.

**Note:** Files containing binary content (including photos and videos) should be downloaded using the `files.get` endpoint whereas Google Workspace Documents can be downloaded using `files.export.`

Download a FileExport a Google Doc

```js
// Downloading a non-Google Workspace File like images and videos
await paragon.request('googledrive', '/files/<fileId>?alt=media', {
	method: 'GET'
});
```

**Via SDK**

```js
await paragon.request('googledrive', '/files/<fileId>/export?mimeType=<supportedMimeType>/pdf', {
	method: 'GET'
});
```

**Via REST API**

```
POST https://proxy.useparagon.com/projects/19d...012/sdk/proxy/googledrive/files/<fileId>/export?mimeType=<supportedMimeType>/pdf

Authorization: Bearer eyJ...
Content-Type: application/json
```

## Publishing your Google Drive app

**Required for publishing**: In order to complete the Google application verification process, you must implement the following feature in your integration:

* [Setting up Redirect Pages](/resources/integrations/google-drive#setting-up-a-redirect-page-in-your-app)

For more information, see [Google's documentation on validation requirements](https://support.google.com/cloud/answer/13463073).

### Setting up a Redirect Page in your app

<Frame>
  <iframe width="768" height="432" src="https://www.youtube.com/embed/W8OGUn4ye3E" title="[Tutorial] Implementing the Google Redirect Page install flow with Paragon" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />
</Frame>

Your Google Drive integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Able to receive a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googledrive", {
  overrideRedirectUrl: "https://your-app.url/google-drive-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Drive Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Search Console
Source: https://docs.useparagon.com/resources/integrations/google-search-console

Connect to your users' Google Search Console accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Campaign Manager 360 API in Google Cloud Console Dashboard

1. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Search Console" from the API Library.

3. Select the "Google Campaign Manager 360 API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Google%20Search%20Console%20in%20Google%20Cloud%20Platform.png)
</Frame>

### Add your Google app to Paragon

1. Select **Google Search Console** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Search Console > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/google-search-console#1-add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should contain `/auth/`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Google Search Console

Once your users have connected their Google Search Console account, you can use the Paragon SDK to access the Google Search Console API on behalf of connected users.

See the Google Search Console [REST API documentation](https://developers.google.com/webmaster-tools/v1/api_reference_index) for their full API reference.

Any Google Search Console API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get top 10 search queries, sorted by click count, descending
await paragon.request(
  "googlesearchconsole",
  "/sites/https%3A%2F%2Fwww.example.com%2F/searchAnalytics/query",
  {
    method: "POST",
    body: {
      startDate: "<Start Date>",
      endDate: "<End Date>",
      dimensions: ['query'],
      rowLimit: 10
    }
  }
});
  
// Get top 10 pages, sorted by click count, descending
await paragon.request(
  "googlesearchconsole",
  "/sites/https%3A%2F%2Fwww.example.com%2F/searchAnalytics/query",
  {
    method: "POST",
    body: {
      startDate: "<Start Date>",
      endDate: "<End Date>",
      dimensions: ['page'],
      rowLimit: 10
    }
  }
);
  
```

## **Building Google Search Console workflows**

Once your Google Search Console account is connected, you can add steps to perform the following actions:

* Query Search Data
* Inspect Index Info for URL
* Get All Sites
* Create Site
* Delete Site

When creating or getting sites in Google Search Console, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20a%20Google%20Search%20Console%20workflow%20in%20Paragon%20Connect.png)
</Frame>

## Publishing your Google Search Console application

### Setting up a Redirect Page in your app

Your Google Search Console integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googlesearchconsole", {
  overrideRedirectUrl: "https://your-app.url/google-search-console-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Search Console Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Sheets
Source: https://docs.useparagon.com/resources/integrations/google-sheets

Connect to your users' Google Sheets accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Sheets API in Google Cloud Console Dashboard

1. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Sheets API" from the API Library.

3. Select the "Google Sheets API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20Google%20Sheets%20API.png)
</Frame>

### Add your Google app to Paragon

1. Select **Google Sheets** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Sheets > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/google-sheets#1-add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should begin with `sheets`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20new%20Google%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Google Sheets

Once your users have connected their Google Sheets account, you can use the Paragon SDK to access the Google Sheets API on behalf of connected users.

See the Google Sheets [REST API documentation](https://developers.google.com/sheets/api/reference/rest) for their full API reference.

Any Google Sheets API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get SpreadSheet 
await paragon.request("googlesheets", "/spreadsheets/{spreadsheetId}", { 
    method: "GET",
});
  
  
// Query SpreadSheet data
await paragon.request("googlesheets", "/spreadsheets/{spreadsheetId}/values/{range}", { 
    method: "GET",
});
  
```

## **Building Google Sheets workflows**

Once your Google Sheets account is connected, you can add steps to perform the following actions:

* Get Rows from Spreadsheet

When saving or getting files in Google Sheets, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Google Sheets account. For example, you might want to trigger a workflow whenever new files are created in Google Sheets to sync your users' Google Sheets files to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screenshot%202023-08-30%20at%2011.26.43%20AM.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Google Sheets below:

* **File Created**
* **File Updated**

## Publishing your Google Sheets application

### Setting up a Redirect Page in your app

Your Google Sheets integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googlesheets", {
  overrideRedirectUrl: "https://your-app.url/google-sheets-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Sheets Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Ads
Source: https://docs.useparagon.com/resources/integrations/googleads

Connect to your users' Google Ads accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and your [Google Ads manager](https://ads.google.com/home/tools/manager-accounts/) account.

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Google Ads Developer Token
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Ads API in Google Cloud Console Dashboard

1. In your Google Cloud Console dashboard, navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Ads API" from the API Library.

3. Select the "Google Ads API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20the%20Google%20Ads%20API%20for%20Paragon%20Connect.png" alt="" />
</Frame>

### Obtain a Google Ads Developer Token in Google Ads Manager Account

A Google Ads Developer Token is required to use the Google Ads API. This token serves as an identifier for your app when accessing the Google Ads API, and must be applied for within your [Google Ads Manager account](https://ads.google.com/home/tools/manager-accounts/).

* For initial testing, you may receive a Test Developer Token that allows API requests in a sandbox environment.
* For production use, you’ll need to get your Developer Token approved by Google. Once approved, it can be used to make real API calls.

Navigate to your [Google Ads Manager account](https://ads.google.com/home/tools/manager-accounts/) and search for the **API Center.** Here you can begin the process to request a Developer Token. [For more information, refer to the Google Ads API docs here.](https://developers.google.com/google-ads/api/docs/get-started/dev-token)

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-10-03%20at%2010.06.12@2x.png" alt="" />
</Frame>

### Add your Google app to Paragon

1. Select **Google Ads** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Ads > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/googleads#add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Developer Token**: Found at the end of the previous step.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20Credentials%20for%20Google%20Ads.png" alt="" />
</Frame>

## Connecting to Google Ads

Once your users have connected their Google Ads account, you can use the Paragon SDK to access the Google Ads API on behalf of connected users.

See the Google Ads [REST API documentation](https://developers.google.com/google-ads/api/reference/rpc/v11/overview) for their full API reference.

Any Google Ads API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Fetch Campaign Data
paragon.request("googleads", "/customers/<Customer ID>/campaigns/<Campaign ID>", {
  method: "GET"
});

// Create a campaign with an existing Campaign Budget
paragon.request("googleads", "/customers/<Customer ID>/campaignBudgets:mutate", {
  method: "POST",
  body: {
    status: 'PAUSED',
    advertisingChannelType: 'SEARCH',
    geoTargetTypeSetting: {
      positiveGeoTargetType: 'PRESENCE_OR_INTEREST',
      negativeGeoTargetType: 'PRESENCE_OR_INTEREST'
    },
    name: 'My Search campaign',
    campaignBudget: 'customers/<Customer ID>/campaignBudgets/<Budget ID>',
    targetSpend: {}
  }
});
  
```

## Building Google Ads workflows

Once your Google Ads account is connected, you use the Google Ads Request step to access any of Google Ads's API endpoints without the authentication piece.

When creating or updating records in Google Ads, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Publishing your Google Ads application

### Setting up a Redirect Page in your app

Your Google Ads integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googleads", {
  overrideRedirectUrl: "https://your-app.url/google-drive-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Ads Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Analytics GA4
Source: https://docs.useparagon.com/resources/integrations/googleanalyticsga4

Connect to your users' Google Analytics GA4 accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Analytics API in Google Cloud Console Dashboard

1. In your Google Cloud Console dashboard, navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Analytics Data API" from the API Library.

3. Select the "Google Analytics Data API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20Google%20Analytics%20Data%20API.png" alt="" />
</Frame>

### Add your Google app to Paragon

1. Select **Google Analytics GA4** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Analytics GA4 > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/googleanalyticsga4#add-the-redirect-url-to-your-google-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should begin with `analytics`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Google%20Analytics%20GA4%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Google Analytics

Once your users have connected their Google Analytics account, you can use the Paragon SDK to access the Google Analytics API on behalf of connected users.

See the Google Analytics [REST API documentation](https://developers.google.com/analytics/devguides/config/mgmt/v3) for their full API reference.

Any Google Analytics API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Generate Realtime Reports in Google Analytics GA4
await paragon.request('googleanalyticsGA4', 'v1beta/properties/propertyId:runRealtimeReport', {
  method: 'POST',
  body: {
    "dimensions": [
        {
          "name": "country"
        }
      ],
      "metrics": [
        {
          "name": "activeUsers"
        }
      ]
    }
});
              
// Get Audience List from Google Analytics GA4
await paragon.request('googleanalyticsGA4', 'v1alpha/properties/propertyID/audienceLists', {
  method: 'GET'
});
```

## **Building Google Analytics GA4 workflows**

Once your Google Analytics GA4 account is connected, you use the Google Analytics GA4 Request step to access any of Google Analytics GA4 API endpoints without the authentication piece.

When creating or updating records in Google Analytics GA4, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Publishing your Google Analytics GA4 application

### Setting up a Redirect Page in your app

Your Google Analytics GA4 integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googleanalyticsGA4", {
  overrideRedirectUrl: "https://your-app.url/google-analytics-GA4-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Analytics GA4 Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Google Docs
Source: https://docs.useparagon.com/resources/integrations/googledocs

Connect to your users' Google Docs accounts.

## Setup Guide

You can find your Google app credentials by visiting your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project).

You'll need the following information to set up your Google App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  **Note:** You'll need to create a new project in Google Cloud Console if you don't already have one.
</Info>

### Add the Redirect URL to your Google app

Paragon provides a redirect URL to send information to your Google app. To add the redirect URL to your Google app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project), navigate to **APIs & Services > Credentials** in the sidebar.

3. Press "**+ Create Credentials**", then select **OAuth client ID.**

4. Select "**Web application**" from the Application type drop-down menu.

<Info>
  **Note:** You'll need to configure Google's [consent screen](https://console.developers.google.com/apis/credentials) for access to **Client ID** and **Client Secret** if you haven't already.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20Web%20Application%20in%20Google%20OAuth.png)
</Frame>

5. Under **Authorized redirect URIs**, press the "**+ Add URI**" button.

6. Paste-in the redirect URL from Paragon.

7. Press the blue "**Create**" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Adding%20Google%20redirect%20URI%20for%20OAuth.gif)
</Frame>

Google provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Enable Google Docs API in Google Cloud Console Dashboard

1. In your [Google Cloud Console dashboard,](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) navigate to **APIs & Services > Library** in the sidebar.

2. Search for "Google Docs API" from the API Library.

3. Select the "Google Docs API".

4. Press the blue "**Enable**" button to enable the API for your application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20the%20Google%20Docs%20API.png" alt="" />
</Frame>

### Add your Google app to Paragon

1. Select **Google Docs** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Google Docs > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/googledocs#setup-guide) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) They should contain `/documents`.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Google%20Docs%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

Once your users have connected their Google Docs account, you can use the Paragon SDK to access the Google Docs API on behalf of connected users.

See the Google Docs [REST API documentation](https://developers.google.com/docs/api/how-tos/overview) for their full API reference.

Any Google Docs API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get the latest version of the specified document
await paragon.request("googledocs", "/v1/documents/<documentId>", {
  method: "GET"
});

// Create a blank document with the provided title
await paragon.request("googledocs", "/v1/documents", {
  method: "POST",
  body: {
    "title": "My Document",
  }
});
```

## Building Google Docs workflows

When saving or getting files in Google Docs, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Publishing your Google Docs application

### Setting up a Redirect Page in your app

Your Google Docs integration requires a Redirect Page hosted in your application to support verification of your application by Google.

The Redirect Page should be implemented as follows:

* Receives a `GET` request with a number of query parameters.
* Redirect to `https://passport.useparagon.com/oauth` with the same query parameters.

```js
paragon.connect("googledocs", {
  overrideRedirectUrl: "https://your-app.url/google-docs-redirect"
});
```

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Google Docs Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your [Google Cloud Console dashboard](https://console.cloud.google.com/projectselector2/home/dashboard?supportedpurview=project) and select your application.

2. Navigate to **APIs & Services > Credentials** and select the credentials you use with Paragon.

3. Under **Authorized redirect URIs**, provide the URL of your Redirect Page.


# Greenhouse
Source: https://docs.useparagon.com/resources/integrations/greenhouse

Connect to your users' Greenhouse accounts.

## Setup Guide

You can find your Greenhouse API Key in your [Greenhouse Developer Account.](https://developers.greenhouse.io/harvest.html)

You'll need the following information to set up your Greenhouse App with Paragon Connect:

* Greenhouse API Key

## Connecting to Greenhouse

Once your users have connected their Greenhouse account, you can use the Paragon SDK to access the Greenhouse API on behalf of connected users.

See the Greenhouse [REST API documentation](https://developers.greenhouse.io/harvest.html) for their full API reference.

Any Greenhouse API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Retrieve a single application
paragon.request("greenhouse", "/applications/<ID>", {
  method: "GET"
});

// Create a candidate
paragon.request("greenhouse", "/candidates", {
  method: "POST",
  body: {
    first_name: "John",
    last_name: "Appleseed",
    email_addresses: ["john@appleseed.com"]
  }
});

// List all of an organization's jobs
paragon.request("greenhouse", "/jobs", {
  method: "GET"
});
  
```

## Building Greenhouse workflows

Once your Greenhouse account is connected, you can add steps to perform the following actions:

* Create Application
* Update Application
* Get Application by ID
* Delete Application
* Create Candidate
* Update Candidate
* Get Candidate by ID
* Delete Candidate
* Create Job Opening
* Update Job Opening
* Get Job Opening by ID

You can also use the Greenhouse Request step to access any of Greenhouse's API endpoints without the authentication piece.

When creating or updating records in Greenhouse, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Greenhouse account. For example, you might want to trigger a workflow whenever new jobs are created in Greenhouse to sync your users' Greenhouse jobs to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Greenhouse%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Greenhouse below:

* **Candidate Created**
* **Candidate Updated**
* **Job Created**
* **Job Updated**


# Gusto
Source: https://docs.useparagon.com/resources/integrations/gusto

Connect to your users' Gusto accounts.

## Setup Guide

You can find your Gusto app credentials in your [Gusto Developer Account.](https://docs.gusto.com/app-integrations/reference)

You'll need the following information to set up your Gusto App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Gusto app to Paragon

Under **Integrations > Connected Integrations > Gusto > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Gusto App page.
* **Client Secret:** Found under Client Secret on your Gusto App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Gusto%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Gusto

Once your users have connected their Gusto account, you can use the Paragon SDK to access the Gusto API on behalf of connected users.

See the Gusto [REST API documentation](https://docs.gusto.com/app-integrations/reference) for their full API reference.

Any Gusto API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get a company
await paragon.request("gusto", "/companies/<company_id>", {
  method: "GET"
});

// Create a Company bank account
await paragon.request("gusto", "/companies/<company_id>/bank_accounts", {
  method: "POST",
  body: {
    "routing_number": "115092013",
    "account_type": "Checking",
    "account_number": "9775014007"
  }
});

// Get a Location
await paragon.request("gusto", "/locations/<location_id>", {
  method: "GET"
});
  
```

## Building Gusto workflows

Once your Gusto account is connected, you use the Gusto Request step to access any of Gusto's API endpoints without the authentication piece.

When creating or updating records in Gusto, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Heap
Source: https://docs.useparagon.com/resources/integrations/heap

Connect to your users' Heap accounts.

## Setup Guide

You can find your Heap app credentials in your [Heap Developer Account.](https://developers.heap.io/reference/)

You'll need the following information to set up your Heap App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Heap app to Paragon

Under **Integrations > Connected Integrations >** **Heap** **>** **Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Heap App page.
* **Client Secret:** Found under Client Secret on your Heap App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Heap%20application%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Heap

Once your users have connected their Heap account, you can use the Paragon SDK to access the Heap API on behalf of connected users.

See the Heap [REST API documentation](https://developers.heap.io/reference/) for their full API reference.

Any Heap API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Add custom properties to users
paragon.request("heap", "/add_account_properties", {
  method: "POST",
  body: {
    "app_id": "123456789", 
    "account_id": "Fake Company",
    "properties": {
      "is_in_good_standing": "true",
      "revenue_potential": "123456",
      "account_hq": "United Kingdom",
      "subscription": "Monthly"
    }
  }
});

// Send a custom event in Heap
paragon.request("heap", "/track", {
  method: "POST",
  body: {
    "app_id": "11",
    "identity": "alice@example.com",
    "event": "Send Transactional Email",
    "timestamp": "2017-03-10T22:21:56+00:00", 
    "properties": {
      "subject": "Welcome to My App!",
      "variation": "A"
    }
  }
});
```

## Building Heap workflows

Once your Heap account is connected, you use the Heap Request step to access any of Heap's API endpoints without the authentication piece.

When creating or updating records in Heap, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Hive
Source: https://docs.useparagon.com/resources/integrations/hive

Connect to your users' Hive accounts.

## Setup Guide

You can find your Hive API credentials in your [Hive Account](https://hive.com/).

You'll need the following information to set up your Hive App with Paragon Connect:

* API Key
* User ID

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Hive

Once your users have connected their Hive account, you can use the Paragon SDK to access the Hive API on behalf of connected users.

See the Hive [REST API documentation](https://developers.hive.com/reference/introduction) for their full API reference.

Any Hive API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get all actions in the provided Workspace
paragon.request("hive", "workspaces/<workspaceId>/actions", {
  method: "GET"
});

// Get an action by ID
paragon.request("hive", "actions/<actionId>", {
  method: "GET"
});
  
```

## Building Hive workflows

Once your Hive account is connected, you use the Hive Request step to access any of Hive's API endpoints without the authentication piece.

When creating or updating records in Hive, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# HubSpot
Source: https://docs.useparagon.com/resources/integrations/hubspot

Connect to your users' HubSpot accounts.

## Setup Guide

You can find your HubSpot application credentials by visiting your [HubSpot developer dashboard](https://app.hubspot.com/login?hubs_signup-url=developers.hubspot.com/\&hubs_signup-cta=cta--small).

You'll need the following information to set up your HubSpot App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* HubSpot Developer Account. You can create one [here](https://app.hubspot.com/signup/developers).
* HubSpot application. Learn more about creating a HubSpot application [here](https://legacydocs.hubspot.com/docs/faq/how-do-i-create-an-app-in-hubspot).

### Add the Redirect URL to your HubSpot app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your HubSpot app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to your [HubSpot developer dashboard](https://developers.hubspot.com/).

3. Click **Manage apps**, then select the app you'd like to connect to Paragon.

4. Under **Auth > Auth settings > Redirect URL**, paste-in Paragon Connect's redirect URL found in Step 1.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20the%20Paragon%20Connect%20Redirect%20URL%20to%20a%20HubSpot%20application%20for%20Paragon%20Connect.png" alt="" />
</Frame>

5. Select any scopes you'd like to use in your application. Note whether the scopes you permit are **required** or **optional** in HubSpot.

<Info>
  **Note:** `crm.schemas.custom.read` is a **required** scope to enable Field Mapping in the Connect Portal.
</Info>

6. Press the **Save** button at the bottom of the page.

HubSpot provides your **Client ID** and **Client Secret** needed for the next step.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20HubSpot%20Scopes.gif)
</Frame>

### Add your HubSpot app to Paragon

1. Select **HubSpot** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > HubSpot >** **Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/hubspot#1-add-the-redirect-url-to-your-hubspot-app) in their respective sections:

* **Client ID:** Found under Auth > Auth settings > Client ID on your HubSpot App page.
* **Client Secret:** Found under Auth > Auth settings > Client secret on your HubSpot App page.
* **Permissions:** Select the required scopes you've indicated as *Required scopes* for your HubSpot application.
* **Optional Scopes**: Select any optional scopes indicated as *Optional scopes* in your HubSpot application.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** The scopes you specify in Paragon should exactly match the scopes you permitted in your HubSpot application page.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/hubspot_scopes.png" alt="" />
</Frame>

## Connecting to HubSpot

Once your users have connected their HubSpot account, you can use the Paragon SDK to access the HubSpot API on behalf of connected users.

See the HubSpot [REST API documentation](https://developers.hubspot.com/docs/api/overview) for their full API reference.

Any HubSpot API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
             
// List Companies
await paragon.request("hubspot", "/crm/v3/objects/companies", { 
  method: "GET"
});
  
  
// Create Company
await paragon.request("hubspot", "/crm/v3/objects/companies", { 
  method: "POST",
  body: {
    "properties": {
      "city": "Cambridge",
      "domain": "biglytics.net",
      "industry": "Technology",
      "name": "Biglytics",
      "phone": "(877) 929-0687",
      "state": "Massachusetts"
    }
  }
});
    
```

## Building HubSpot workflows

Once your HubSpot account is connected, you can add steps to perform the following actions:

* Create Contact
* Update Contact
* Search Contacts
* Get Contact by ID
* Create Company
* Update Company
* Search Company
* Get Company by ID
* Create Deal
* Update Deal
* Search Deals
* Get Deal by ID
* Create Engagement

When creating or updating records in HubSpot, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20HubSpot%20contacts%20in%20Paragon%20\(1\).png)
</Frame>

## Working with HubSpot Custom Objects and Custom Fields

It's common that different HubSpot instances may be configured with different Custom Objects or Custom Fields. Paragon provides the ability for your users to choose their own Custom Object mapping.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Custom%20object%20mapping%20for%20HubSpot%20in%20Paragon.png)
</Frame>

### Custom Object Mapping

To allow your users to choose their own Custom Object Mapping, add the **Custom Object Mapping** user setting in your Connect Portal Editor. You should give this setting a descriptive user-setting name, for example, if you're mapping contacts from your app to HubSpot, you might call this "Map Contacts to this object".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Editing%20Custom%20Object%20Mapping%20for%20HubSpot%20in%20Paragon.png)
</Frame>

Below, **add a label for each object property that should be mapped from your app to a HubSpot object field**. In our contacts example, you might add labels for "First Name", "Last Name", and "Email".

In your Connect Portal, your users will be prompted to select an object from their HubSpot instance when enabling this workflow. For each of the object properties you labeled, your users will be prompted to select which object field that property should be mapped to.

In the workflow editor, you can now access your user's custom object mapping in the variable menu. For example:

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/f073e110-9be8-460b-9322-f0b6cbf9d660.gif)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' HubSpot account. For example, you might want to trigger a workflow whenever new contacts are created HubSpot to sync your users' HubSpot contacts to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/HubSpot%20Webhook%20Triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for HubSpot below:

* **New Record**
* **Record Updated**
* **Record Deleted**
* **Record Deleted for Privacy (GDPR)**

### **Add the Target URL to your HubSpot app**

Paragon provides a webhook Target URL to subscribe your HubSpot app to events in your users' HubSpot instances. To add the target URL to your HubSpot app:

1. In the Settings tab of your HubSpot integration in Paragon, copy the link under "**Webhook URL".**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-09-17%20at%2014.05.13.png" alt="" />
</Frame>

2. Log in to your [HubSpot App dashboard](https://app.hubspot.com/develope), select your HubSpot developer account, and navigate to your HubSpot app in **Apps.**

3. In your HubSpot App page sidebar, navigate to **Features > Webhooks**.

4. Provide the "**Target URL.**" Paragon will automatically begin listening to events on behalf of your app.

5. Click **Save** at the bottom of the HubSpot App dashboard.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-09-17%20at%2014.04.22.png" alt="" />
</Frame>

You are now able to **Create subscriptions** against the events you want to subscribe to within HubSpot.


# iManage
Source: https://docs.useparagon.com/resources/integrations/imanage

Connect to your users' iManage accounts.

## Setup Guide

You can find your iManage app credentials in your [iManage Developer Account.](https://docs.imanage.com/cc-help/10.3.2/en/Applications.html)

You'll need the following information to set up your iManage App with Paragon Connect:

* Client Key
* Client Secret
* Scopes Requested

### Add your iManage app to Paragon

Under **Integrations > Connected Integrations > iManage > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client Key:** Found under Client Key on your iManage App page.
* **Client Secret:** Found under Client Secret on your iManage App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20iManage%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to iManage

Once your users have connected their iManage account, you can use the Paragon SDK to access the iManage API on behalf of connected users.

See the iManage [REST API documentation](https://docs.imanage.com/cc-help/10.3.2/en/Applications.html) for their full API reference.

Any iManage API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get library folders
paragon.request("imanage", "/work/api/v2/customers/{customerId}/libraries/{libraryId}/folders", {
  method: "GET"
});

// Create a library folder
paragon.request("imanage", "/customers/{customerId}/libraries/{libraryId}/folders/{folderId}/subfolders", {
  method: "POST",
  body: {
    "name": "Employee Agreements",
    "default_security": "inherit",
    "description": "Contract documents",
    "profile": {
      "custom1": "001",
      "custom1_description": "Microsoft"
    },
    "group_trustees": [],
    "user_trustees": [
      {
        "id": "CPIERCE",
        "access_level": "read_write"
      }
    ]
  }
});
  
```

## Building iManage workflows

Once your iManage account is connected, you use the iManage Request step to access any of iManage's API endpoints without the authentication piece.

When creating or updating records in iManage, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Insightly
Source: https://docs.useparagon.com/resources/integrations/insightly

Connect to your users' Insightly accounts.

## Setup Guide

You can find your Insightly app credentials in your [Insightly Developer Account.](https://api.insightly.com/v3.1/Help#!/Overview/Introduction)

You'll need the following information to set up your Insightly App with Paragon Connect:

* API Key
* Instance Pod

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Insightly

Once your users have connected their Insightly account, you can use the Paragon SDK to access the Insightly API on behalf of connected users.

See the Insightly [REST API documentation](https://api.insightly.com/v3.1/Help#!/Overview/Introduction) for their full API reference.

Any Insightly API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a Contact
await paragon.request("insightly", "/Contacts", {
  method: "POST",
  body: {
    "FIRST_NAME": "John",
    "LAST_NAME": "Doe",
    "EMAIL_ADDRESS": "john.doe@useparagon.com"
  }
});

// Get all Leads
await paragon.request("insightly", "/Leads", {
  method: "GET"
});

// Get all Opportunities
await paragon.request("insightly", "/Opportunities", {
  method: "GET"
});
```

## Building Insightly workflows

Once your Insightly account is connected, you use the Insightly Request step to access any of Insightly's API endpoints without the authentication piece.

When creating or updating records in Insightly, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Intellum
Source: https://docs.useparagon.com/resources/integrations/intellum

Connect to your users' Intellum accounts.

## Setup Guide

You can find your Intellum app credentials in your [Intellum Account](https://www.intellum.com/).

You'll need the following information to set up your Intellum App with Paragon Connect:

* Organization Domain
* Application UID
* Private Key

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Intellum

Once your users have connected their Intellum account, you can use the Paragon SDK to access the Intellum API on behalf of connected users.

See the Intellum [REST API documentation](https://experience.intellum.com/student/path/643313-intellum-api-v3) for their full API reference.

Any Intellum API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Users
paragon.request("intellum", "/api/v3/users", {
  method: "GET"
});
// Get Enrollments for a particular user ID
paragon.request("intellum", "/api/v3/enrollments?user_id=<User ID>,", {
  method: "GET"
});
  
```

## Building Intellum workflows

Once your Intellum account is connected, you use the Intellum Request step to access any of Intellum's API endpoints without the authentication piece.

When creating or updating records in Intellum, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Intercom
Source: https://docs.useparagon.com/resources/integrations/intercom

Connect to your users' Intercom accounts.

## Setup Guide

<Info>
  **Note:** You'll need to create a new Intercom app if you don't already have one. To access your customer's Intercom data by using OAuth, you'll need to [submit your app for a review](https://developers.intercom.com/building-apps/docs/review-publish-your-app#changing-your-review-or-listing).
</Info>

You can find your Intercom app credentials by visiting your [Intercom Developer Hub](https://developers.intercom.com/).

You'll need the following information to set up your Intercom App with Paragon Connect:

* Client ID
* Client Secret

### Add the Redirect URL to your Intercom app

Paragon provides a redirect URL to send information to your Intercom app. To add the redirect URL to your Intercom app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Intercom developer dashboard](https://developers.intercom.com/), select your application.

3. Under **Configure > Authentication**, click the **Edit** button.

4. Tick the **Use OAuth** option.

5. Under **Redirect URLs**, paste-in Paragon Connect's redirect URL found in Step 1. Click the **Save** button to save your changes.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connect%20-%20Authorizing%20Intercom%20OAuth%20for%20Paragon%20Connect.gif)
</Frame>

### Add your Intercom app to Paragon

1. Select Intercom from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Intercom > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/intercom#1-add-the-redirect-url-to-your-intercom-app) in their respective sections:

* **Client ID:** Found under Configure > Basic Information > Client ID on your Intercom app page.
* **Client Secret:** Found under Configure > Basic Information > Client Secret on your Intercom app page.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Intercom%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Intercom

Once your users have connected their Intercom account, you can use the Paragon SDK to access the Intercom API on behalf of connected users.

See the Intercom [REST API documentation](https://developers.intercom.com/building-apps/docs/rest-apis) for their full API reference.

Any Intercom API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create Contact
await paragon.request("intercom", "/contacts", { 
  method: "POST",
  body: {
    "role": "user",
	  "external_id": "25",
	  "email": "wash@serenity.io",
    "phone": "+1123456789",
    "name": "Hoban Washburn",
    "avatar": "https://example.org/128Wash.jpg",
    "last_seen_at": 1571069751,
    "signed_up_at": 1571069751,
    "owner_id": 127,
    "unsubscribed_from_emails": false,
    "custom_attributes": {
      "paid_subscriber": true,
      "monthly_spend": 155.5,
      "team_mates": 1
    }
  }
});

// Query Contacts
await paragon.request("intercom", "/contacts", { 
  method: "GET"
});
  
```

## Building Intercom workflows

Once your Intercom account is connected, you can add steps to perform the following actions:

* Create contact
* Update contact
* Get contact by ID
* Search contacts
* Send message

When creating or updating contacts in Intercom, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20a%20lead%20in%20Intercom%20with%20Paragon.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Intercom account. For example, you might want to trigger a workflow whenever new companies are created in Intercom to sync your users' Intercom companies to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Intercom%20Webhook%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Intercom below:

* **Company Created**
* **Company Updated**
* **Contact Created**
* **Contact Updated**


# Jira
Source: https://docs.useparagon.com/resources/integrations/jira

Connect to your users' Jira accounts.

## Setup Guide

<Info>
  **Note:** You'll need to create a new Jira app and Jira site if you don't already have one.
</Info>

You can find your Jira app credentials by visiting your [Jira developer portal](https://developer.atlassian.com/apps/).

You'll need the following information to set up your Jira app with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Jira app

Paragon provides a redirect URL to send information to your Jira app. To add the redirect URL to your Jira app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Jira developer dashboard](https://developer.atlassian.com/apps/), select your application.

3. Under **APIS and Features > OAuth 2.0 (3LO) > Callback URL**, paste-in the Paragon Connect redirect URL found in Step 1.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Selecting%20your%20JIRA%20application%20and%20callback%20URL.gif)
</Frame>

### Add your Jira app to Paragon

1. Select **Jira** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Jira > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/jira#add-the-redirect-url-to-your-jira-app) in their respective sections:

* **Client ID:** Found under App Details > Client ID on your Jira App page.
* **Client Secret:** Found under App Details > Secret on your Jira App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20JIRA%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Jira

Once your users have connected their Jira account, you can use the Paragon SDK to access the Jira API on behalf of connected users.

See the Jira [REST API documentation](https://developer.atlassian.com/server/jira/platform/rest-apis/) for their full API reference.

Any Jira API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Create Issue
await paragon.request("jira", "/rest/api/3/issue", {
  method: "POST",
  body: {
    "fields": {
      "summary": "Main order flow broken",
      "issuetype": { "id": "10003" },
      "project": { "id": "10000" }
    }
  }
});


// Get Issue
await paragon.request("jira", "/rest/api/3/search", { 
  method: "GET",
});
  
```

## Building Jira workflows

Once your Jira account is connected, you can add steps to perform the following actions:

* Create issue
* Update issue
* Get issue by issue key
* Search issues
* Search issues by JQL query
* Get projects

When creating or updating cards in Jira, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20a%20JIRA%20Issue%20in%20Paragon.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Jira account. For example, you might want to trigger a workflow whenever Issues are updated to sync your users' Jira Issues to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Jira%20Webhook%20Triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Jira below:

* **New Issue**
* **Issue Updated**
* **New Comment**
* **Project Created**
* **Project Updated**

<Info>
  In order to use the **Project Created** and **Project Updated** triggers, you will need to add the `manage:jira-configuration` scope to your Jira application.
</Info>


# Keap
Source: https://docs.useparagon.com/resources/integrations/keap

Connect to your users' Keap accounts.

## Setup Guide

You can find your Keap app credentials in your [Keap Developer Account.](https://developer.infusionsoft.com/docs/rest/)

You'll need the following information to set up your Keap App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Keap app to Paragon

Under **Integrations > Connected Integrations > Keap > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Keap App page.
* **Client Secret:** Found under Client Secret on your Keap App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Keap%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Keap

Once your users have connected their Keap account, you can use the Paragon SDK to access the Keap API on behalf of connected users.

See the Keap [REST API documentation](https://developer.infusionsoft.com/docs/rest/) for their full API reference.

Any Keap API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create Company
await paragon.request("keap", "/v1/companies", {
  method: "POST",
  body: {
    "company_name": "string",
    "email_address": "string",
    "notes": "string",
    "opt_in_reason": "string",
    "phone_number": {
      "extension": "string",
      "number": "string",
      "type": "string"
    },
    "website": "string"
  }
});

// List Companies
await paragon.request("keap", "/v1/companies", {
  method: "GET"
});
  
```

## Building Keap workflows

Once your Keap account is connected, you use the Keap Request step to access any of Keap's API endpoints without the authentication piece.

When creating or updating records in Keap, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Klaviyo
Source: https://docs.useparagon.com/resources/integrations/klaviyo

Connect to your users' Klaviyo accounts.

## Setup Guide

You can find your Klaviyo API Keys by visiting your [Klaviyo Account dashboard](https://www.klaviyo.com/account#api-keys-tab).

### Prerequisites

* Klaviyo Account. You can create one [here](https://www.klaviyo.com/).

## Connecting to Klaviyo

Once your users have connected their Klaviyo account, you can use the Paragon SDK to access the Klaviyo API on behalf of connected users.

See the Klaviyo [REST API documentation](https://www.klaviyo.com/docs/api/v2/lists) for their full API reference.

Any Klaviyo API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create List
await paragon.request("klaviyo", "/v2/lists", {
  method: "POST",
  body: { "list_name": "your_list_name" }
});


// Query Lists
await paragon.request("klaviyo", "/v2/lists", {
  method: "GET"
});
```

## Creating your Klaviyo Private API Key

Your end-users will be required to enter their Klaviyo Private API Key as authentication when first connecting to your application.

To create a Klaviyo Private API Key:

1. Login to [Klaviyo Account](https://www.klaviyo.com/account#api-keys-tab).

2. Navigate to **Accounts > Settings > API Keys**, and click the blue "**Create Private API Key**" button.

3. Copy your private API key

4. Paste your private API key to authenticate your account.

## Building Klaviyo workflows

Once your Klaviyo account is connected, you can add steps to perform the following actions:

* Create Campaign
* Get Campaigns
* Send Campaign
* Create List
* Add Subscriber to List
* Remove Subscriber from List
* Get Lists
* Get List Subscribers
* Get Profile
* Update Profile
* Create Template
* Get Templates
* Get Segments
* Get Segment Subscribers

When creating or updating campaigns and lists in Klaviyo, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20a%20new%20subscriber%20to%20Klaviyo%20in%20Paragon%20Connect.png)
</Frame>


# Lever
Source: https://docs.useparagon.com/resources/integrations/lever

Connect to your users' Lever accounts.

## Setup Guide

You can find your Lever app credentials in your [Lever Developer Account.](https://hire.lever.co/developer/documentation)

You'll need the following information to set up your Lever App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Lever app to Paragon

Under **Integrations > Connected Integrations > Lever > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Lever App page.
* **Client Secret:** Found under Client Secret on your Lever App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Lever%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Lever

Once your users have connected their Lever account, you can use the Paragon SDK to access the Lever API on behalf of connected users.

See the Lever [REST API documentation](https://hire.lever.co/developer/documentation) for their full API reference.

Any Lever API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Retrieve a single application
paragon.request("lever", "/opportunities/:opportunity/applications/:application", {
  method: "GET"
});

// Retrieve a single opportunity
paragon.request("lever", "/opportunities/:opportunity", {
  method: "GET"
});

// Create an opportunity
paragon.request("lever", "[relative URL]", {
  method: "POST",
  body: {
    "name": "John Appleseed",
    "email": "john@domain.com",
    "phone": "1012223333"
  }
});
  
```

## Building Lever workflows

Once your Lever account is connected, you can add steps to perform the following actions:

* Create an Opportunity
* Get Opportunity by ID
* Get Opportunities
* Update Contact
* Get Contact by ID
* Create a Posting
* Update Posting
* Get Postings by ID
* Get Postings

When creating or updating records in Lever, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Lever account. For example, you might want to trigger a workflow whenever new candidates are created in Lever to sync your users' Lever candidates to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Lever%20Webhook%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Lever below:

* **Candidate Created**
* **Candidate Updated**
* **Posting Created**
* **Posting Updated**


# Linear
Source: https://docs.useparagon.com/resources/integrations/linear

Connect to your users' Linear accounts.

## Setup Guide

You can find your Linear app credentials in your [Linear Developer Account.](https://developers.linear.app/docs/graphql/working-with-the-graphql-api)

You'll need the following information to set up your Linear App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Linear app to Paragon

Under **Integrations > Connected Integrations > Linear > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Production > Client ID on your Linear App page.
* **Client Secret:** Found under Production > Client Secret on your Linear App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Linear%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Linear

Once your users have connected their Linear account, you can use the Paragon SDK to access the Linear API on behalf of connected users.

See the Linear [REST API documentation](https://developers.linear.app/docs/graphql/working-with-the-graphql-api) for their full API reference.

Any Linear API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get all issues associated with a given team ID
paragon.request("linear", "/", {
  method: "POST",
  body: {
    "query": `
      query Team {
      team(id: "<Team ID>") {
        id
        name
    
        issues {
          nodes {
            id
            title
            description
            assignee {
              id
              name
            }
            createdAt
            archivedAt
          }
        }
      }
    }` 
  }
});

// Get an issue by ID
paragon.request("linear", "/", {
  method: "POST",
  body: {
    "query": `query Issue {
      issue(id: "<Issue ID>") {
        id
        title
        description
      }
    }`
  }
});
  
```

## Building Linear workflows

Once your Linear account is connected, you can add steps to perform the following actions:

* Create Issue
* Update Issue
* Get Issue by ID
* Get Issue by Issue Identifier
* Search Issues
* Delete Issue
* Archive Issue
* Create Sub-Issue
* Create Project
* Update Project
* Get Project by ID
* Delete Project

When creating or updating issues and projects in Linear, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Linear account. For example, you might want to trigger a workflow whenever new issues are created in Linear to sync your users' Linear issues to your application in real-time.

You can find the full list of Webhook Triggers for Linear below:

* Issue Created
* Issue Status Updated
* Label Added or Removed from Issue
* Issue Deleted


# LinkedIn
Source: https://docs.useparagon.com/resources/integrations/linkedin

Connect to your users' LinkedIn accounts.

## Setup Guide

You can find your LinkedIn app credentials in your [LinkedIn Developer Account.](https://learn.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/share-on-linkedin?context=linkedin%2Fconsumer%2Fcontext)

You'll need the following information to set up your LinkedIn App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your LinkedIn app to Paragon

Under **Integrations > Connected Integrations > LinkedIn > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your LinkedIn App page.
* **Client Secret:** Found under Auth > OAuth 2.0 Client Secret on your LinkedIn App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20LinkedIn%20app%20to%20Paragon%20Connect.png" alt="Connecting your LinkedIn app to Paragon Connect" />
</Frame>

## Connecting to LinkedIn

Once your users have connected their LinkedIn account, you can use the Paragon SDK to access the LinkedIn API on behalf of connected users.

See the LinkedIn [REST API documentation](https://learn.microsoft.com/en-us/linkedin/consumer/integrations/self-serve/share-on-linkedin?context=linkedin%2Fconsumer%2Fcontext) for their full API reference.

Any LinkedIn API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a post on LinkedIn
await paragon.request("linkedin", "/v2/ugcPosts", {
  method: "POST",
  body: {
      "author": "urn:li:organization:5515715",
      "commentary": "Sample text Post",
      "visibility": "PUBLIC",
      "distribution": {
        "feedDistribution": "MAIN_FEED",
        "targetEntities": [],
        "thirdPartyDistributionChannels": []
      },
      "lifecycleState": "PUBLISHED",
      "isReshareDisabledByAuthor": false
    }
});

// Get a profile by ID
await paragon.request("linkedin", "/v2/people/:id", {
  method: "GET",
});  
```

## Building LinkedIn workflows

Once your LinkedIn account is connected, you can add steps to perform the following actions:

* Get Profile by ID
* Create Post

You can also use the LinkedIn Request step to access any of LinkedIn's API endpoints without the authentication piece.

When creating or updating records in LinkedIn, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# LinkedIn Marketing
Source: https://docs.useparagon.com/resources/integrations/linkedinmarketing

Connect to your users' LinkedIn Marketing accounts.

## Setup Guide

You can find your LinkedIn Marketing app credentials in your [LinkedIn Marketing Developer Account.](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/ads/getting-started?view=li-lms-2023-11)

You'll need the following information to set up your LinkedIn Marketing App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your LinkedIn Marketing app to Paragon

Under **Integrations > Connected Integrations > LinkedIn Marketing > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your LinkedIn Marketing App page.
* **Client Secret:** Found under Client Secret on your LinkedIn Marketing App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20LinkedIn%20Marketing%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to LinkedIn Marketing

Once your users have connected their LinkedIn Marketing account, you can use the Paragon SDK to access the LinkedIn Marketing API on behalf of connected users.

See the LinkedIn Marketing [REST API documentation](https://learn.microsoft.com/en-us/linkedin/marketing/integrations/ads/getting-started?view=li-lms-2023-11) for their full API reference.

Any LinkedIn Marketing API endpoints can be accessed with the Paragon SDK as shown in this example.

```js
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Search Campaigns
paragon.request("linkedinmarketing", "/adAccounts/<adAccountId>/adCampaigns?q=search&search=(searchCriteria:(values:List(searchValue)))", {
  method: "GET"
});

// Get Page Statistics
paragon.request("linkedinmarketing", "/organizationPageStatistics?q=organization&organization=<organization URN>", {
  method: "GET"
});
  
```

## Building LinkedIn Marketing workflows

Once your LinkedIn Marketing account is connected, you use the LinkedIn Marketing Request step to access any of LinkedIn Marketing's API endpoints without the authentication piece.

When creating or updating records in LinkedIn Marketing, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Magento
Source: https://docs.useparagon.com/resources/integrations/magento

Connect to your users' Magento accounts.

## Setup Guide

You'll need the following information to set up your Magento App with Paragon Connect:

* Magento Store Domain
* Username
* Password

### Add your Magento app to Paragon

Under **Integrations > Connected Integrations > Magento > Settings**, fill out your credentials from your store in their respective sections:

* **Magento Store Domain**
* **Username**
* **Password**

## Connecting to Magento

Once your users have connected their Magento account, you can use the Paragon SDK to access the Magento API on behalf of connected users.

See the Magento [REST API documentation](https://magento.redoc.ly/2.3.7-admin/) for their full API reference.

Any Magento API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Fetch all products
paragon.request("magento", "/V1/products?searchCriteria=", {
  method: "GET"
});

// Create a customer
paragon.request("magento", "/V1/customers", {
  method: "POST",
  body: {
    "customer": {
      "email": "user@domain.com",
      "firstname": "John",
      "lastname": "Appleseed",
    }
  }
});

// Get order by ID
paragon.request("magento", "/V1/orders/{id}", {
  method: "GET"
});
  
```

## Building Magento workflows

Once your Magento account is connected, you can add steps to perform the following actions:

* Create Customer
* Update Customer
* Get Customer by ID
* Search Customers
* Delete Customer
* Create Order
* Update Order
* Get Order by ID
* Search Orders
* Create Product
* Update Product
* Get Product by SKU
* Search Products
* Delete Product

When creating or updating records in Magento, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Mailchimp
Source: https://docs.useparagon.com/resources/integrations/mailchimp

Connect to your users' Mailchimp accounts.

## Setup Guide

You can find your Mailchimp app credentials by visiting your [Mailchimp Account Settings.](https://mailchimp.com/)

<Info>
  **Note:** You'll need to create a new Mailchimp app if you don't already have one.
</Info>

You'll need the following information to set up your Mailchimp App with Paragon Connect:

* Client ID
* Client Secret

### Add the Redirect URL to your Mailchimp app

Paragon provides a redirect URL to send information to your Mailchimp app. To add the redirect URL to your Mailchimp app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Click your account by selecting the account icon.

3. Select **Account** from the dropdown list.

4. Under **Extras > Registered apps**, select your application or create a new one if you don't already have one.

5. Under **Redirect URI**, paste-in the redirect URL from Paragon. The redirect URL can be found in Step 1.

6. Press the green `Update` button to confirm your changes.

### Add your Mailchimp app to Paragon

1. Select **Mailchimp** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Mailchimp > Settings**, fill out your credentials in their respective sections:

* **Client ID:**

  1. Log in to your [Mailchimp dashboard](https://mailchimp.com/).

  2. Select "**Account"** from the Account dropdown.

  3. Under **Extras > Registered apps**, select your application.

  4. Copy the **Client ID** to use in Paragon Connect.

* **Client Secret:**

  1. Log in to your [Mailchimp dashboard](https://mailchimp.com/).

  2. Click on "**Account**" in the Account dropdown.

  3. Under **Extras > Registered apps**, select your application.

  4. Copy your **Client ID** to use in Paragon Connect.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20Mailchimp%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Mailchimp

Once your users have connected their Mailchimp account, you can use the Paragon SDK to access the Mailchimp API on behalf of connected users.

See the Mailchimp [REST API documentation](https://mailchimp.com/developer/marketing/api/lists) for their full API reference.

Any Mailchimp API endpoints can be accessed with the Paragon SDK as shown in this example.

```js JavaScript
// You can find your project ID in the Overview tab of any Integration.

// Authenticate the user
paragon.authenticate(<ProjectID>, <Paragon User Token>);

// Create a List
await paragon.request("mailchimp", "/lists/<List ID>", {
  method: "POST",
  body: {
    "members": [{ email_address: "test@gmail.com" }],
    "update_existing": true
  }
});

// List all Campaigns
await paragon.request("mailchimp", "/campaigns",
  method: “GET”
});
```

## Building Mailchimp workflows

Once your Mailchimp account is connected, you can add steps to perform the following actions:

* Create Campaign
* Update Campaign
* Send Campaign
* Search Campaigns
* Get Campaign by ID
* Delete Campaign by ID
* Create List
* Get List by ID
* Search Lists
* Add Contact to List
* Update Contact in List
* Get Contacts from List

When using Mailchimp, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Mailchimp account. For example, you might want to trigger a workflow whenever new contacts are added to a Mailchimp list to sync your users' Mailchimp contacts to your application in real-time.

You can find the full list of Webhook Triggers for Mailchimp below:

* **Mailchimp Lists**


# Marketo
Source: https://docs.useparagon.com/resources/integrations/marketo

Connect to your users' Marketo accounts.

## Setup Guide

You can find your Marketo application credentials by visiting LaunchPoint in the Admin section of your [Marketo Dashboard](https://www.marketo.com/).

You'll need the following information to set up your Marketo App with Paragon Connect:

* Client ID
* Client Secret
* Endpoint URL
* Identity URL

### Prerequisites

* A Marketo Account. You can create one [here](https://www.marketo.com/).
* A Custom Service. Learn more about creating Custom Services in Marketo [here](https://developers.marketo.com/rest-api/custom-services/).

## Gathering your Credentials

Your end-users will be required to enter their Marketo Client ID, Client Secret, Endpoint URL, and Identity URL as authentication when first connecting to your application.

You can find the credentials for your Marketo account in their respective sections:

* **Client ID:** Found under Admin > Integration > LaunchPoint > View Details > Client Id on your Marketo dashboard.
* **Client Secret:** Found under Admin > Integration > LaunchPoint > View Details > Client Secret on your Marketo dashboard.
* **Endpoint URL:** Found under Admin > Integration > Web Services in the REST API section.
* **Identity URL:** Found under Admin > Integration > Web Services in the REST API section.

Press the blue "**Continue**" button to save your credentials.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Marketo%20account%20to%20Paragon.png)
</Frame>

## Connecting to Marketo

Once your users have connected their Marketo account, you can use the Paragon SDK to access the Marketo API on behalf of connected users.

See the Marketo [REST API documentation](https://developers.marketo.com/getting-started/) for their full API reference.

Any Marketo API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get Leads
await paragon.request("marketo", "leads.json?filterType=id&filterValues=1", {
  method: "GET",
});


// Create a new Lead
await paragon.request("marketo", "leads.json", {
  method: "POST",
  body: { 
      "input": [
        {  
          "email":"kjashaedd-1@klooblept.com",
          "firstName":"Kataldar-1"
        },
      ]
  }
});
```

## Building Marketo workflows

Once your Marketo account is connected, you can add steps to perform the following actions:

* Create or Update Lead
* Get Leads
* Get Lead by ID
* Add Leads to List

When creating or updating leads in Marketo, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Marketo%20in%20Paragon.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Marketo account. For example, you might want to trigger a workflow whenever new leads are added to a list in Marketo to sync your users' Marketo leads to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Marketo%20Webhook%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Marketo below:

* **Lead Added to a List**


# Microsoft Dynamics 365
Source: https://docs.useparagon.com/resources/integrations/microsoft-dynamics-365

Connect to your users' Microsoft Dynamics 365 accounts.

## Setup Guide

You can find your Microsoft Dynamics 365 application credentials by visiting your Microsoft Azure Portal.

You'll need the following information to set up your Microsoft Dynamics 365 app with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* A [Microsoft Azure](https://azure.microsoft.com/) account

### Add the Redirect URL to your Microsoft Dynamics 365 app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Microsoft Dynamics 365 app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since Microsoft Dynamics 365 does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Client Secret as they expire for all Microsoft integrations.
</Info>

### Add your Microsoft Dynamics app to Paragon

1. Select **Microsoft Dynamics** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Microsoft Dynamics 365 > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/microsoft-dynamics-365#add-the-redirect-url-to-your-microsoft-dynamics-365-app)in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

## Connecting to Microsoft Dynamics 365

Once your users have connected their Microsoft Dynamics 365 account, you can use the Paragon SDK to access the Microsoft Dynamics 365 API on behalf of connected users.

See the Microsoft Dynamics 365 [REST API documentation](https://docs.microsoft.com/en-us/dynamics365/sales-enterprise/help-hub) for their full API reference.

Any Microsoft Dynamics 365 API endpoints can be accessed with the Paragon SDK as shown in this example:

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Create an Account
await paragon.request("microsoftDynamics", "/accounts", {
  method: "POST",
  body: { "name": "Sample Account" }
});


// Query Accounts by number of employees
await paragon.request("microsoftDynamics", "/accounts?$filter=Microsoft.Dynamics.CRM.Between(PropertyName='numberofemployees',PropertyValues=["5","2000"])”
    method: "GET"
});
```

## Building Microsoft Dynamics 365 workflows

Once your Microsoft Dynamics 365 account is connected, you can add steps to perform the following actions:

* Create Record
* Update Record
* Get Record by ID
* Search Records
* Delete Record by ID

When creating or updating records in Microsoft Dynamics 365, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Microsoft%20Dynamics%20365%20in%20Paragon.png)
</Frame>


# Microsoft Teams
Source: https://docs.useparagon.com/resources/integrations/microsoft-teams

Connect to your users' Microsoft Teams accounts.

## Setup Guide

You can find your Microsoft Teams application credentials by visiting the [Microsoft Developer Portal for Teams](https://dev.teams.microsoft.com/).

You'll need the following information to set up your Microsoft Teams app with Paragon Connect:

* App ID
* Bot ID
* Bot Client Secret
* Scopes Requested

### Prerequisites

* A [Microsoft Azure](https://azure.microsoft.com/) account
* A bot registered in the Microsoft Developer Portal for Teams (*See* [*Creating a Microsoft Teams bot*](/resources/integrations/microsoft-teams#undefined) *for setup instructions*)

### Creating a Microsoft Teams bot

You will need to create a bot user in the [Microsoft Developer Portal for Teams](https://dev.teams.microsoft.com/) to build your integration.

1. Log in to the Developer Portal for Teams using the same Microsoft account that you use to log in to the Microsoft Azure Portal.

2. Navigate to **Tools** in the sidebar.

3. Select **Bot Management**.

4. Click **New Bot** and provide a name for your bot. *This is not the name that appears to your users*; we recommend appending "(Bot)" to the name for clarity.

Next, you will need to associate this new bot with your Teams application.

1. In the Developer Portal for Teams, navigate to **Apps** in the sidebar.

2. If you do not have a Teams app yet, click **New app** and provide a name. This name will be the one displayed in the Microsoft Teams store and to your users.

   1. In **Basic information**, you will need to minimally provide a short description and URLs for your application's website, Privacy Policy, and Terms of Use.

   2. Click **Save** below.

3. In your Teams app settings, navigate to **App features** (under the **Configure** section).

4. Select **Bot**.

5. Select the bot user you created above.

6. Check any applicable capabilities for your bot user.

7. Click **Save** below.

8. Optionally, upload an icon for your app in **Branding**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(12).png" alt="" />
</Frame>

#### Testing your Microsoft Teams bot

If your application is not yet published to the Microsoft Teams store, you can test your app by uploading your app's package directly into your Teams account.

1. In the [Developer Portal for Teams](https://dev.teams.microsoft.com/), navigate to your list of Apps.

2. Click the triple-dot menu in your app's row and click **Download app package**. Your app's package will be downloaded as a .zip file.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(73\).png)
</Frame>

3. Log in to Microsoft Teams with the account you would like to test your bot in.

4. Click **Apps** in the left sidebar (one of the last options):

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(14\).png)
</Frame>

5. Click **Manage your apps** (at the bottom of the App categories sidebar).

6. Click **Upload an app** and **Upload your app to your org's app catalog**.

7. Select the .zip file with your app's package. After a successful upload, you will be navigated to the "Built for your org" page.

8. Select the name of your app in the list.

9. Click **Add** and **Add to a team**.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(74\).png)
</Frame>

10. Select a team and channel to add your bot.

### Add the Redirect URL to your Microsoft Teams app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Microsoft Teams app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is `https://passport.useparagon.com/oauth`

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select the app registration *representing your bot, not your Microsoft Teams app*. You can check to make sure that the ID matches the one you selected for your associated bot: *In Developer Portal for Teams > \[Your App] > App Features:*

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(67\).png)
</Frame>

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Bot Client Secret

Since Microsoft Teams does not automatically provide you with a Bot Client Secret for your application, we'll need to make one. To get your Bot Client Secret:

1. Navigate to **All Services > App Registrations** and select the app registration *representing your bot, not your Microsoft Teams app*. You can check to make sure that the ID matches the one you selected for your associated bot: *In Developer Portal for Teams > \[Your App] > App Features:* <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(67).png" alt="" /> *In Azure Portal > App Registrations:* <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(23).png" alt="" />

2. Navigate to **Manage > Certificates & secrets** in the sidebar.

3. Under **Client Secrets**, click the **+ New client secret** button.

4. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

5. Copy the displayed Bot Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Bot Client Secret as they expire for all Microsoft integrations.
</Info>

### Add your Microsoft Teams app to Paragon

1. Select **Microsoft Teams** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Microsoft Teams > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/microsoft-teams#add-the-redirect-url-to-your-microsoft-teams-app) and [Step 2](/resources/integrations/microsoft-teams#generate-a-client-id-and-client-secret) in their respective sections:

* **App/Manifest ID:** Found in the [Microsoft Developer Portal for Teams](https://dev.teams.microsoft.com/), as the **App ID:**

  <Frame>
    ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(47\).png)
  </Frame>

* **Bot ID:** Found in the Microsoft Azure Portal, under App registrations > Application (client) ID. This should be the Client ID of the app registration *representing your bot, not your Microsoft Teams app.*

* **Bot Client Secret:** See [Generate a Bot Client Secret](/resources/integrations/microsoft-teams#generate-a-bot-client-secret).

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Microsoft%20Teams%20applications%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Microsoft Teams

Once your users have connected their Microsoft Teams account, you can use the Paragon SDK to access the Microsoft Teams API on behalf of connected users.

See the Microsoft Teams [REST API documentation](https://docs.microsoft.com/en-us/graph/api/resources/teams-api-overview?view=graph-rest-1.0) for their full API reference.

Any Microsoft Teams API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// List Channels
paragon.request("microsoftTeams", "channels", {
  method: "GET",
});


// Send message in a channel
paragon.request("microsoftTeams", "channels/<channel-id>/messages", {
  method: "POST",
  body: { "content": "Hello World!" }
});
```

## Building Microsoft Teams workflows

Once your Microsoft Teams account is connected, you can add steps to perform the following actions:

* Send message in channel
* Send message in chat
* Get User by email

When creating messages in Microsoft Teams, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Sending%20messages%20to%20Microsoft%20Teams%20using%20Paragon%20Connect%20\(1\).png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Microsoft Teams account. For example, you might want to trigger a workflow whenever new chats are created in Microsoft Teams to sync your users' Microsoft Teams chats to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Microsoft%20Teams%20triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Microsoft Teams below:

* **Channel Created**
* **Chat Created**
* **Chat Updated**


# Microsoft Excel
Source: https://docs.useparagon.com/resources/integrations/microsoftexcel

Connect to your users' Microsoft Excel accounts.

## Setup Guide

You can find your Microsoft Excel application credentials by visiting your Microsoft Azure Portal.

You'll need the following information to set up your Microsoft Excel app with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* A [Microsoft Azure](https://azure.microsoft.com/) account

### Add the Redirect URL to your Microsoft Excel app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Microsoft Excel app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since Microsoft Excel does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Client Secret as they expire for all Microsoft integrations.
</Info>

### Add your Microsoft Excel app to Paragon

1. Select **Microsoft Excel** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Microsoft Excel > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/microsoftexcel#add-the-redirect-url-to-your-microsoft-excel-app) in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20Microsoft%20Outlook%20application%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Microsoft Excel

Once your users have connected their Microsoft Excel account, you can use the Paragon SDK to access the Microsoft Excel API on behalf of connected users.

See the Microsoft Excel [REST API documentation](https://learn.microsoft.com/en-us/graph/api/resources/excel?view=graph-rest-1.0\&preserve-view=true) for their full API reference.

Any Microsoft ExcelExcel API endpoints can be accessed with the Paragon SDK as shown in this example:

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get Spreadsheet
await paragon.request('excel', '<workbook id>/workbook/worksheets/<worksheet name>', {
    method: 'GET'
});

// Query Spreadsheet data
await paragon.request('excel', '[relative URL]', {
    method: 'GET'
});
```

## Building Microsoft Excel workflows

Once your Microsoft Excel account is connected, you use the Microsoft Excel Request step to access any of Microsoft Excel's API endpoints without the authentication piece.

When creating or updating records in Microsoft Excel, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Miro
Source: https://docs.useparagon.com/resources/integrations/miro

Connect to your users' Miro accounts.

## Setup Guide

You can find your Miro app credentials in your [Miro Developer Account.](https://developers.miro.com/docs/getting-started-with-oauth)

You'll need the following information to set up your Miro App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.

### Add your Miro app to Paragon

Under **Integrations > Connected Integrations > Miro > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Miro App page.
* **Client Secret:** Found under Client Secret on your Miro App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Leaving the Client ID and Client Secret blank will use Paragon development keys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Miro%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Miro

Once your users have connected their Miro account, you can use the Paragon SDK to access the Miro API on behalf of connected users.

See the Miro [REST API documentation](https://developers.miro.com/docs/getting-started-with-oauth) for their full API reference.

Any Miro API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Boards
paragon.request("miro", "/boards", {
  method: "GET"
});

// Create a Board
paragon.request("miro", "/boards", {
  method: "POST",
  body: {
    description: 'This board was created over the API',
    name: 'My Board',
    policy: {
      permissionsPolicy: {
        collaborationToolsStartAccess: 'all_editors',
        copyAccess: 'anyone',
        sharingAccess: 'team_members_with_editing_rights'
      },
      sharingPolicy: {
        access: 'private',
        inviteToAccountAndBoardLinkAccess: 'no_access',
        organizationAccess: 'private',
        teamAccess: 'private'
      }
    },
    teamId: '<MIRO_TEAM_ID>',
    projectId: '<MIRO_PROJECT_ID>'
  }
});
  
```

## Building Miro workflows

Once your Miro account is connected, you use the Miro Request step to access any of Miro's API endpoints without the authentication piece.

When creating or updating records in Miro, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Mixpanel
Source: https://docs.useparagon.com/resources/integrations/mixpanel

Connect to your users' Mixpanel accounts.

## Setup Guide

You can find your Mixpanel service account credentials in your [Mixpanel Account](https://mixpanel.com/).

You'll need the following information to set up your Mixpanel App with Paragon Connect:

* Mixpanel Service Account Username
* Mixpanel Service Account Password

This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.

## Connecting to Mixpanel

Once your users have connected their Mixpanel account, you can use the Paragon SDK to access the Mixpanel API on behalf of connected users.

See the Mixpanel [REST API documentation](https://developer.mixpanel.com/reference/query-api) for their full API reference.

Any Mixpanel API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Fetch data from your insights reports
paragon.request("mixpanel", "/insights?project_id=<PROJECT ID>&bookmark_id=<BOOKMARK ID>", {
  method: "GET"
});

// Fetch segmented data for an event
paragon.request("mixpanel", "/segmentation?project_id=<PROJECT ID>&event=<EVENT>&from_date=<DATE>&to_date=<DATE>&format=csv", {
  method: "GET"
});
  
```

## Building Mixpanel workflows

Once your Mixpanel account is connected, you use the Mixpanel Request step to access any of Mixpanel's API endpoints without the authentication piece.

When creating or updating records in Mixpanel, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Monday.Com
Source: https://docs.useparagon.com/resources/integrations/monday

Connect to your users' Monday.com accounts.

## Setup Guide

You can find your Monday.com app credentials by visiting your [Monday.com account](https://monday.com/).

You'll need the following information to set up your Monday.com app with Paragon:

* API Key

### Getting your Monday.com API Key

1. Go to your Monday.com account.

2. Click the Account icon in the bottom-left corner

3. Select **Administration**

4. Select **"Connections"**

5. Select **"API"** from the top sidebar.

6. Copy the API Key under **Personal API Token**.

## Connecting to Monday.com

Once your users have connected their Monday.com account, you can use the Paragon SDK to access the Monday.com API on behalf of connected users.

See the Monday.com [REST API documentation](https://api.developer.monday.com/docs/basics) for their full API reference.

Any Monday.com API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Query Items
await paragon.request("monday.com", "/", { 
  method: "POST",
  body: {"query":"query { items (ids: [157244624, 201781760, 239164869]) { name } }"}
});

// Create an item
await paragon.request("monday.com", "/", { 
  method: "POST",
  body: {"query":"mutation { create_item (board_id: 1234567, group_id: \"today\", item_name: \"new item\") { id }}
});
```

## Building Monday.com workflows

Once your Monday.com account is connected, you can add steps to perform the following actions:

* Create Item
* Update Item
* Get Item by ID
* Get Item by External ID
* Search Items
* Delete Item
* Archive Item
* Create Subitem
* Search users

When creating or updating items in Monday.com, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Monday.com account. For example, you might want to trigger a workflow whenever items are updated to sync your users' Monday.com items to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Monday.com%20webhook%20triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Monday.com below:

* **Item Created**
* **Item Updated** Trigger when Monday.com items have either a name change or a column value change.


# NetSuite
Source: https://docs.useparagon.com/resources/integrations/netsuite

Connect to your users' NetSuite accounts.

## Setup Guide

### **Select an authentication strategy for your users**

Selecting an authentication strategy is the first step to building a NetSuite integration on Paragon. Paragon supports three methods for authenticating against your users' NetSuite systems, **Authorization Code,** **Client Credentials,** and **Client Credentials with User Certificates**. Your selection will affect the user experience of your connected users.

* **Authorization Code –** Paragon will use the Client ID and Client Secret from the NetSuite integration record you create to initiate OAuth 2.0 flow on behalf of your connecting users.

* **Client Credentials –** your connecting users are required to create their own NetSuite integration record within their NetSuite instances.

* **Client Credentials with User Certificates –** your connecting users are required to create their own NetSuite integration record and additionally generate a certificate to authenticate requests.

#### **How do I choose which authentication strategy to use?**

We recommend developers who want to perform a one-time ingestion of records use the **Authorization Code** method to optimize for a more seamless user experience for your connecting users. For use-cases that require a longer, persisted connection, we recommend using the **Client Credentials with User Certificates** method.

|                                           | Authentication Lifetime                       | User Effort                                                                                      |
| ----------------------------------------- | --------------------------------------------- | ------------------------------------------------------------------------------------------------ |
| Authorization Code                        | Requires user re-authentication every 14 days | Lowest effort. Consent access via OAuth prompt.                                                  |
| Client Credentials                        | Requires user re-authentication every 14 days | Medium effort. Required to create an integration record in NetSuite.                             |
| Client Credentials with User Certificates | Two years                                     | Highest effort. Required to create an integration record in NetSuite and generate a certificate. |

### Preparing your NetSuite test instance for Paragon

Enabling the OAuth 2.0 and SuiteScript features in NetSuite are the first steps for configuring your NetSuite sandbox instance with Paragon Connect. This setup in NetSuite will mimic what all of your connecting users will have to do when connecting to your integration regardless of the authentication strategy selected.

1. Navigate to **Setup > Company > Enable Features** then select the **SuiteCloud** tab.

2. Check the boxes for enabling **Client SuiteScript**, **Server SuiteScript**, and **OAuth 2.0**.

3. Click **Save.**

### **Creating a NetSuite integration record for Authorization Code and Client Credentials**

<Warning>
  When using **Authorization Code** authentication, you as the developer must perform the following steps. When using **Client Credentials**, you must instruct your connecting users through the following steps.
</Warning>

Create your NetSuite integration credentials in your NetSuite instance's Integration Management Settings. This is found under **Setup > Integration > Manage Integrations > New**.

1. Add a **Name**, a **Description**, and click to change the **State** dropdown to ***Enabled***.

2. Enable the ***Token-Based Authentication*** checkbox, ***Authorization Code Grant***, and ***Public Client*** options under **Authorization**.

3. Add the Paragon ***Redirect URL***

```
https://passport.useparagon.com/oauth
```

4. Select the three scopes: `RESTLETS`, `REST WEB SERVICES`, and `SUITEANALYTICS`.

5. Retain the following details from the NetSuite application registration to set up your NetSuite integration record with Paragon Connect:

* Consumer Key

* Consumer Secret

* Scopes Requested

### **Creating a NetSuite integration record and certificate mapping for Client Credentials with User Certificates**

The following section covering **Client Credentials with User Certificates** requires the Connecting User to perform the steps.

<Frame>
  <iframe width="560" height="315" src="https://www.youtube.com/embed/HW-8a7mKIl4?si=f5E9bsTCPend_efT" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />
</Frame>

Create your NetSuite integration credentials in your NetSuite instance's Integration Management Settings. This is found under **Setup > Integration > Manage Integrations > New**.

1. Add a **Name**, a **Description**, and click to change the **State** dropdown to ***Enabled***.

2. Disable ***TBA: Authorization Flow,*** then ***Token-Based Authentication***, and ***Authorization Code Grant*** checkboxes.

3. Enable ***Client Credentials (Machine to Machine) Grant.***

4. Select the `REST WEB SERVICES` scope.

5. Save the app and retain the *Consumer Key* from the NetSuite integration registration to set up your NetSuite integration with Paragon Connect:

#### Generating a Certificate

After creating the integration record in NetSuite, the connecting user is required to generate an `openssl` certificate for upload at the time of integration connection.

1. On your local machine, create a certificate following [these conditions enforced by NetSuite](https://docs.oracle.com/en/cloud/saas/netsuite/ns-online-help/section_162686838198.html#subsect_162755332391). Paragon currently only supports authentication of certificates created using the RSA algorithm. This will create two files, a `public.pem`and a `private.pem.`

   ```sh
   openssl req -new -x509 -newkey rsa:4096 -keyout private.pem -sigopt rsa_padding_mode:pss -sha256 -sigopt rsa_pss_saltlen:64 -out public.pem -nodes -days 730
   ```

2. In NetSuite navigate to **Setup > Integration > OAuth 2.0 Client Credentials (M2M) Setup** and then select **Create New.**

3. Select an Entity to own the OAuth Mapping, their role, and the OAuth app created in the previous section. For the *Certificate* input, upload the `public.pem` from step one. Save the mapping.

   1. If encountering an "Unable to parse provided x509 certificate" error, use a stable version of `openssl` downloaded via Homebrew for macOS.

After generating the NetSuite integration record and completing the certificate mapping, the connecting user is ready to connect the integration via the Paragon Connect Portal.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-12-13%20at%2014.49.31@2x.png" alt="" />
</Frame>

### Authorization Code: Add your NetSuite app to Paragon

In the Paragon Dashboard under **Integrations > Connected Integrations >** **NetSuite** **>** **Settings**, fill out your credentials from your NetSuite integration record in their respective sections:

* **Client ID:** Found under **Setup > Integration > Manage Integrations** in your NetSuite integration record page.

* **Client Secret:** Found under **Setup > Integration > Manage Integrations** on your NetSuite integration record page.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Leaving the Client ID and Client Secret blank will use Paragon **Authorization Code** development integration record.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20NetSuite%20application%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to NetSuite

Once your users have connected their NetSuite account, you can use the Paragon SDK to access the NetSuite API on behalf of connected users.

See the NetSuite [REST API documentation](https://system.netsuite.com/help/helpcenter/en_US/APIs/REST_API_Browser/record/v1/2021.2/index.html) for their full API reference.

Any NetSuite API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get a list of purchase orders filtered by a search
paragon.request("netsuite", "/purchaseOrder?q=[Query]", {
  method: "GET"
});

// Get a list of vendors
paragon.request("netsuite", "/vendor", {
  method: "GET"
});

```

## Building NetSuite workflows

Once your NetSuite account is connected, you can add steps to perform the following actions:

* Create Vendor

* Update Vendor

* Get Vendor by ID

* Search Vendors

* Delete Vendor

* Create Bill

* Update Bill

* Get Bill by ID

* Search Bills

* Delete Bill

* Create Account

* Update Account

* Get Account by ID

* Search Accounts

* Delete Account

* Create Tax Group

* Update Tax Group

* Get Tax Group by ID

* Delete Tax Group

* Search Payment Terms

* Get Payment Term by ID

* Search Posting Periods

When using NetSuite, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Notion
Source: https://docs.useparagon.com/resources/integrations/notion

Connect to your users' Notion accounts.

## Setup Guide

You can find your Notion app credentials on your [Notion Integrations Page](https://www.notion.so/my-integrations).

You'll need the following information to set up your Notion App with Paragon Connect:

* Client ID
* Client Secret

### Add your Notion app to Paragon

Under **Integrations > Connected Integrations > Notion > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Notion App page.
* **Client Secret:** Found under Client Secret on your Notion App page.

Leaving the Client ID and Client Secret blank will use Paragon development keys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Notion%20application%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Notion

Once your users have connected their Notion account, you can use the Paragon SDK to access the Notion API on behalf of connected users.

See the Notion [REST API documentation](https://developers.notion.com/reference) for their full API reference.

Any Notion API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a page in Notion
paragon.request("notion", "/v1/pages", {
  method: "POST",
  body: {
  	"parent": { "page_id": "d9824bdc84454327be8b5b47500af6ce" },
    "icon": {
        "emoji": ""
    },
	"properties": {
		"Title": {
            "text": "My page"
		},
	},
	"children": []
  }
});

// Retrieve a Notion page
paragon.request("notion", "/v1/pages/<page ID>", {
  method: "GET"
});
  
```

## Building Notion workflows

Once your Notion account is connected, you can add steps to perform the following actions:

* Create a Page
* Update a Page
* Get a Page
* Archive a Page
* Search Pages
* Update a Block
* Retrieve a Block
* Delete a Block

You can also use the Notion Request step to access any of Notion's API endpoints without the authentication piece.

When creating or updating records in Notion, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Notion account. For example, you might want to trigger a workflow whenever new pages are created or updated in Notion to sync your users' Notion pages to your application in real-time.

You can find the full list of Webhook Triggers for Notion below:

* **Page Created**
* **Page Updated**


# OneDrive
Source: https://docs.useparagon.com/resources/integrations/onedrive

Connect to your users' OneDrive accounts.

## Setup Guide

You can find your OneDrive application credentials by visiting your Microsoft Azure Portal.

You'll need the following information to set up your OneDrive app with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* A [Microsoft Azure](https://azure.microsoft.com/) account

### Add the Redirect URL to your OneDrive app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your OneDrive app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since OneDrive does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Client Secret as they expire for all Microsoft integrations.
</Info>

### Enable Multi-tenancy to your OneDrive app

To allow Microsoft users from outside of your organization to connect to your OneDrive application, you must specify this as an option within the OneDrive application registration.

1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

2. Navigate to **All Services > App Registrations** and select your application.

3. Select **Authentication** from the sidebar.

4. Under **Supported account types**, press the **"Accounts in any organizational directory"** option.

5. Click Save.

### Add your OneDrive app to Paragon

1. Select **OneDrive** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > OneDrive > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/onedrive#add-the-redirect-url-to-your-onedrive-app) in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20OneDrive%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to OneDrive

Once your users have connected their OneDrive account, you can use the Paragon SDK to access the OneDrive API on behalf of connected users.

See the OneDrive [REST API documentation](https://docs.microsoft.com/en-us/dynamics365/sales-enterprise/help-hub) for their full API reference.

Any OneDrive API endpoints can be accessed with the Paragon SDK as shown in this example:

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// List files in the root of the drive
await paragon.request("onedrive", "/me/drive/root/children", {
  method: "GET"
});


// Download a specific file in a drive
await paragon.request("onedrive", "/me/drive/items/<item-id>/content", {
  method: "GET"
})
```

## Building OneDrive workflows

Once your OneDrive account is connected, you can add steps to perform the following actions:

* Save File
* Get File
* List Files
* Create Folder
* Get Folder by ID
* Search Folders
* Move Folder
* Delete Folder

You can also use the OneDrive Request step to access any of OneDrive API endpoints without the authentication piece.

When creating or updating records in OneDrive, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' OneDrive account. For example, you might want to trigger a workflow whenever files are changed in OneDrive to sync your users' OneDrive files to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/OneDrive%20Webhook%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for OneDrive below:

* **File Change**

## Using the OneDrive File Picker

You can allow your user to select files from their OneDrive account in your app with the Paragon SDK.

**Showing the File Picker**

Use the Paragon SDK in your frontend application to show the File Picker in your app.

The SDK provides an `ExternalFilePicker` class to load OneDrive's JavaScript into your page and authenticate with your user's connected OneDrive account.

```javascript
let picker = new paragon.ExternalFilePicker("onedrive", {
    onFileSelect: (files) => {
        // Handle file selection
    }
});

// Loads external dependencies and user's access token
await picker.init();

// Open the File Picker
picker.open();
```

You can configure the File Picker to listen for additional callbacks or to restrict allowed file types. Learn more about configuring File Picker options in the [SDK Reference](/apis/api-reference#externalfilepicker).

#### Downloading the Selected File

The OneDrive File Picker callback will return a `Response` object describing the user's file picker interaction including an array of any files selected. Using this array of `fileIds`, you can use the [Connect API](/apis/making-api-requests) to perform an authenticated proxy requests to download the files.

<CodeGroup>
  ```javascript JavaScript
  await paragon.request('onedrive', '/me/drive/items/<fileId>/content', {
  	method: 'GET'
  });
  ```

  ```bash REST API
  POST https://proxy.useparagon.com/projects/19d...012/sdk/proxy/onedrive/me/drive/items/<fileId>/content

  Authorization: Bearer eyJ...
  Content-Type: application/json
  ```
</CodeGroup>


# OneNote
Source: https://docs.useparagon.com/resources/integrations/onenote

Connect to your users' OneNote accounts.

## Setup Guide

You can find your OneNote application credentials by visiting your Microsoft Azure Portal.

You'll need the following information to set up your OneNote app with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Prerequisites

* A [Microsoft Azure](https://azure.microsoft.com/) account

### Add the Redirect URL to your OneNote app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your OneNote app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since OneNote does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Client Secret as they expire for all Microsoft integrations.
</Info>

### Add your OneNote app to Paragon

1. Select OneNote from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > OneNote > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/onenote#add-the-redirect-url-to-your-onenote-app) in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20OneNote%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to OneNote

Once your users have connected their OneNote account, you can use the Paragon SDK to access the OneNote API on behalf of connected users.

See the OneNote [REST API documentation](https://learn.microsoft.com/en-us/graph/api/resources/onenote-api-overview?view=graph-rest-1.0\&preserve-view=true) for their full API reference.

Any OneNote API endpoints can be accessed with the Paragon SDK as shown in this example:

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Retrieve a Page
await paragon.request('onenote', '/groups/<Group-ID>/onenote/pages/<Page-ID>', {
  method: 'GET'
});


// Create a Page
await paragon.request('onenote', '/me/onenote/sections/<Section-ID>/pages', {
  method: 'POST',
  body: `
    <!DOCTYPE html>
    <html>
      <head>
          <title>A page with a block of HTML</title>
      </head>
      <body>
          <p>This page contains some <i>formatted</i> <b>text</b>.</p>
      </body>
    </html>`
});
```

## Building OneNote workflows

Once your OneNote account is connected, you can add steps to perform the following actions:

* Create a Page
* Update Page
* Get Page by ID
* Delete Page
* Search Pages

You can also use the OneNote Request step to access any of OneNote API endpoints without the authentication piece.

When creating or updating records in OneNote, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# OpenAI
Source: https://docs.useparagon.com/resources/integrations/openai

Connect to your users' OpenAI accounts.

## Setup Guide

You can find your OpenAI app credentials in your [OpenAI Developer Account.](https://platform.openai.com/docs/api-reference/introduction)

You'll need the following information to set up your OpenAI App with Paragon Connect:

* [OpenAI API Key](https://platform.openai.com/account/api-keys)

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to OpenAI

Once your users have connected their OpenAI account, you can use the Paragon SDK to access the OpenAI API on behalf of connected users.

See the OpenAI [REST API documentation](https://platform.openai.com/docs/api-reference/introduction) for their full API reference.

Any OpenAI API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Perform a completion
paragon.request("openai", "/completions", {
  method: "POST",
  body: {
    "model": "text-davinci-003",
    "prompt": "Say this is a test",
    "max_tokens": 7,
    "temperature": 0,
    "top_p": 1,
    "n": 1,
    "stream": false,
    "logprobs": null,
    "stop": "\n"
  }
});

// Create an image
paragon.request("openai", "/images/generations", {
  method: "POST",
  body: {
    "prompt": "A cute baby sea otter",
    "n": 2,
    "size": "1024x1024"
  }
});
  
```

## Building OpenAI workflows

Once your OpenAI account is connected, you use the OpenAI Request step to access any of OpenAI's API endpoints without the authentication piece.

When creating or updating records in OpenAI, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Oracle Financials Cloud
Source: https://docs.useparagon.com/resources/integrations/oracle-financials-cloud

Connect to your users' Oracle Financials Cloud accounts.

## Setup Guide

You'll need the following information to set up your Oracle Financials Cloud App with Paragon Connect:

* App Name
* Scopes Requested

### Add your Oracle Financials Cloud app to Paragon

1. Select Oracle Financials Cloud from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Oracle Financials Cloud > Settings**, fill out your credentials in their respective sections:

* **App Name:**

  * Specify an app name to appear on Oracle Financials Cloud

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the App Name blank will use Paragon development keys.
</Info>

## Connecting to Oracle Financials Cloud

Once your users have connected their Oracle Financials Cloud account, you can use the Paragon SDK to access the Oracle Financials Cloud API on behalf of connected users.

See the Oracle Financials Cloud [REST API documentation](https://docs.oracle.com/en/cloud/saas/financials/21d/farfa/) for their full API reference.

Any Oracle Financials Cloud API endpoints can be accessed with the Paragon SDK as shown in this example

```js JavaScript
// You can find your project ID in the Overview tab of any Integration.

// Authenticate the user
paragon.authenticate(<ProjectID>, <Paragon User Token>);

// Get an Invoice
await paragon.request("oraclefinancialscloud", "/invoices/<Invoice ID>", {
  method: “GET”,
});

// Calculate Tax for an Invoice
await paragon.request("oraclefinancialscloud", "/invoices", {
  method: “POST”,
  body: {
    name: “calculateTax”,
    parameters: [“<Invoice ID>”, “<Business Unit>”, “<Supplier>”]
  }
});
```

## Building Oracle Financials Cloud workflows

Once your Oracle Financials Cloud account is connected, you can add steps to perform the following actions:

* Search Invoices
* Create Invoice
* Update Invoice
* Build Invoice Line Item
* Validate Invoice

When using Oracle Financials Cloud, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Microsoft Outlook
Source: https://docs.useparagon.com/resources/integrations/outlook

Connect to your users' Microsoft Outlook accounts.

## Setup Guide

You can find your Microsoft Outlook application credentials by visiting your Microsoft Azure Portal.

You'll need the following information to set up your Microsoft Outlook app with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* A [Microsoft Azure](https://azure.microsoft.com/) account

### Add the Redirect URL to your Microsoft Outlook app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Microsoft Outlook app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since Microsoft Outlook does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Client Secret as they expire for all Microsoft integrations.
</Info>

### Enable Multi-tenancy to your Outlook app

To allow Microsoft users from outside of your organization to connect to your Outlook application, you must specify this as an option within the Outlook application registration.

1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

2. Navigate to **All Services > App Registrations** and select your application.

3. Select **Authentication** from the sidebar.

4. Under **Supported account types**, press the **"Accounts in any organizational directory"** option.

5. Click Save.

### Add your Microsoft Outlook app to Paragon

1. Select **Microsoft Outlook** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Microsoft Outlook > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/outlook#add-the-redirect-url-to-your-microsoft-outlook-app) in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20a%20Microsoft%20Outlook%20application%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Microsoft Outlook

Once your users have connected their Microsoft Outlook account, you can use the Paragon SDK to access the Microsoft Outlook API on behalf of connected users.

See the Microsoft Outlook [REST API documentation](https://docs.microsoft.com/en-us/graph/api/resources/calendar?view=graph-rest-1.0) for their full API reference.

Any Microsoft Outlook API endpoints can be accessed with the Paragon SDK as shown in this example:

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get user's calendar events
await paragon.request("outlook", "/me/calendar/events", { 
  method: "GET",
});

// Get messages in user’s mailbox
await paragon.request("outlook", "/me/messages", {
  method: "GET",
});

// Create a calendar event
await paragon.request("outlook", "/me/calendar/events", {
  method: "POST",
  body: {
    "subject": "Let's go for lunch",
    "body": {
      "contentType": "HTML",
      "content": "Does mid month work for you?"
    },
    "start": {
      "dateTime": "2019-03-15T12:00:00",
      "timeZone": "Pacific Standard Time"
    },
    "end": {
      "dateTime": "2019-03-15T14:00:00",
      "timeZone": "Pacific Standard Time"
    },
    "location":{
      "displayName":"Harry's Bar"
    },
    "attendees": [
      {
        "emailAddress": {
          "address":"adelev@contoso.onmicrosoft.com",
          "name": "Adele Vance"
        },
      "type": "required"
      }
    ]
}
});
```

## Building Microsoft Outlook workflows

Once your Microsoft Outlook account is connected, you can add steps to perform the following actions:

* Create Event
* Update Event
* Get Event by ID
* Get Events
* Delete Event
* Get Messages
* Send Message

When creating or updating events in Microsoft Outlook, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20a%20Microsoft%20Outlook%20workflow%20in%20Paragon%20Connect.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Microsoft Outlook accounts. For example, you might want to trigger a workflow whenever new events are created Microsoft Outlook to sync your users' Microsoft Outlook events to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Microsoft%20Outlook%20triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Microsoft Outlook below:

* **Event Created**
* **Event Updated**
* **New Message**


# Outreach
Source: https://docs.useparagon.com/resources/integrations/outreach

Connect to your users' Outreach accounts.

## Setup Guide

<Info>
  **Note:** You'll need to create a new Outreach app if you don't already have one.
</Info>

You can find your Outreach app credentials by visiting your [Outreach developer portal](https://developers.outreach.io/).

You'll need the following information to set up your Outreach App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* An [Outreach Developer account](https://www.outreach.io/product/platform/api).
* An Outreach app.

### Add the Redirect URL to your Outreach app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Outreach app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Reach out to your Outreach API Integrations Specialist and ask to change the default redirect URL for your application to the one Paragon provides.

### Add your Outreach app to Paragon

1. Select **Outreach** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Outreach > Settings**, fill out your credentials in their respective sections:

* **Client ID:** Provided by Outreach's team.
* **Client Secret:** Provided by Outreach's team.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

## Connecting to Outreach

Once your users have connected their Outreach account, you can use the Paragon SDK to access the Outreach API on behalf of connected users.

See the Outreach [REST API documentation](https://api.outreach.io/api/v2/docs) for their full API reference.

Any Outreach API endpoints can be accessed with the Paragon SDK as shown in this example.

```js JavaScript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get accounts
await paragon.request("outreach", "/accounts", { 
    method: "GET"
  });

// Create a project
await paragon.request("outreach", "/prospect", { 
    method: "POST",
      body: {  
       "type": "prospect",
        "attributes": {
           "emails": ["sally.smith@acme.example.com"],
            "firstName": "Sally",
            "title": "CEO"
          }
        } 
      });
```

## Building Outreach workflows

Once your Outreach account is connected, you can add steps to perform the following actions:

* Create Account
* Update Account
* Get Accounts
* Get Account by ID
* Create Opportunity
* Update Opportunity
* Get Opportunities
* Get Opportunity by ID
* Create Prospects
* Update Prospect
* Get Prospects
* Get Prospect by ID
* Add Prospect to Sequence

When creating or updating events in Outreach, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20an%20Opportunity%20using%20Outreach%20in%20Paragon.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Outreach account. For example, you might want to trigger a workflow whenever new opportunities are created Outreach to sync your users' Outreach contacts to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Outreach%20triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Outreach below:

* **New Account**
* **Account Updated**
* **New Opportunity**
* **Opportunity Updated**
* **New Prospect**
* **Prospect Updated**


# PagerDuty
Source: https://docs.useparagon.com/resources/integrations/pagerduty

Connect to your users' PagerDuty accounts.

## Setup Guide

You can find your PagerDuty app credentials in your [PagerDuty Developer Account.](https://developer.pagerduty.com/api-reference/)

You'll need the following information to set up your PagerDuty App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your PagerDuty app to Paragon

Under **Integrations > Connected Integrations > PagerDuty > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your PagerDuty App page.
* **Client Secret:** Found under Client Secret on your PagerDuty App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20PagerDuty%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to PagerDuty

Once your users have connected their PagerDuty account, you can use the Paragon SDK to access the PagerDuty API on behalf of connected users.

See the PagerDuty [REST API documentation](https://developer.pagerduty.com/api-reference/) for their full API reference.

Any PagerDuty API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Incidents
paragon.request("pagerduty", "/incidents", {
  method: "GET"
});

// Create an Incident
paragon.request("pagerduty", "[relative URL]", {
  method: "POST",
  body: {
    "incident": {
      "type": "incident",
      "title": "The server is on fire.",
      "service": {
        "id": "PWIXJZS",
        "type": "service_reference"
      },
      "priority": {
        "id": "P53ZZH5",
        "type": "priority_reference"
      },
      "urgency": "high",
      "body": {
        "type": "incident_body",
        "details": "A disk is getting full on this machine. You should investigate what is causing the disk to fill, and ensure that there is an automated process in place for ensuring data is rotated (eg. logs should have logrotate around them). If data is expected to stay on this disk forever, you should start planning to scale up to a larger disk."
      },
    }
  }
});

// Get Users
paragon.request("pagerduty", "users", {
  method: "GET"
});
  
```

## Building PagerDuty workflows

Once your PagerDuty account is connected, you use the PagerDuty Request step to access any of PagerDuty's API endpoints without the authentication piece.

When creating or updating records in PagerDuty, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# PandaDoc
Source: https://docs.useparagon.com/resources/integrations/pandadoc

Connect to your users' PandaDoc accounts.

## Setup Guide

You can find your PandaDoc app credentials in your [PandaDoc Developer Account.](https://api.pandadoc.com/public/v1)

You'll need the following information to set up your PandaDoc App with Paragon Connect:

* PandaDoc API Key

## Connecting to PandaDoc

Once your users have connected their PandaDoc account, you can use the Paragon SDK to access the PandaDoc API on behalf of connected users.

See the PandaDoc [REST API documentation](https://api.pandadoc.com/public/v1) for their full API reference.

Any PandaDoc API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Send a document
paragon.request("pandadoc", "/documents/<ID>/send", {
  method: "POST",
  body: {
     "message": "Hello! This document was sent from the PandaDoc API.",
     "subject": "Please check this test API document from PandaDoc",
     "silent": false,
     "sender": {
          "membership_id": "gEy74Zx4VjNfV3Q2rHdgZW"
     }
  }
});

// List documents
paragon.request("pandadoc", "/documents?", {
  method: "GET"
});

// Create a contact
paragon.request("pandadoc", "/contacts", {
  method: "POST",
  body: {
     "email": "john@appleseed.com",
     "first_name": "John",
     "last_name": "Appleseed",
     "company": "Apples & Company",
  }
});
  
```

## Building PandaDoc workflows

Once your PandaDoc account is connected, you can add steps to perform the following actions:

* Create a Document
* Update a Document
* Get a Document by ID
* Delete Document
* Send a Document
* Search Documents

You can also use the PandaDoc Request step to access any of PandaDoc API endpoints without the authentication piece.

When creating or updating records in DocuSign, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Pardot
Source: https://docs.useparagon.com/resources/integrations/pardot

Connect to your users' Pardot accounts.

## Setup Guide

You can find your Salesforce app credentials in your [Salesforce Developer Account.](https://developer.salesforce.com/)

You'll need the following information to set up your Salesforce App with Paragon Connect:

* Consumer Key
* Consumer Secret
* Scopes Requested

### Add the Redirect URL to your Pardot app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Salesforce app:

1. Log in to your [Salesforce dashboard](https://www.salesforce.com/).

2. Navigate to the gear icon at the top of the page and click **Setup.**

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Going%20to%20Setup%20in%20Salesforce.gif)
</Frame>

3. In the left-hand sidebar, go to **Platform Tools > Apps > App Manager**.

<Info>
  **Note:** You must have the proper admin permissions on your Salesforce account to access the App Manager. If you don't, please speak to your admin.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Platform%20tools%20to%20Apps%20to%20App%20Manager%20in%20Salesforce.gif)
</Frame>

4. Click on the registered application you'd like to use. If you don't already have one, click **New Connected App**.

5. Under **API (Enable OAuth Settings)**, mark the "**Enable OAuth Settings**" checkbox.

6. Under **Callback URL**, paste-in Paragon Connect's redirect URL:

```
https://passport.useparagon.com/oauth
```

7. Select any scopes you'd like to use in your application.

8. Press the **Save** button at the bottom of the page.

Salesforce provides your **Consumer Key** and **Consumer Secret** needed for the next step once you register your application.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20OAuth%20Scopes%20to%20Salesforce.gif)
</Frame>

### Add your Pardot app to Paragon

Under **Integrations > Connected Integrations > Pardot > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/salesforce#1-add-the-redirect-url-to-your-salesforce-app) in their respective sections:

* **Consumer Key:** Found under Manage Connected Apps > API (Enable OAuth Settings) > Consumer Key on your Salesforce App page.
* **Consumer Secret:** Found under Manage Connected Apps > API (Enable OAuth Settings) > Consumer Secret on your Salesforce App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connectng%20your%20Salesforce%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Pardot

Once your users have connected their Pardot account, you can use the Paragon SDK to access the Pardot API on behalf of connected users.

See the Pardot [REST API documentation](https://developer.salesforce.com/docs/) for their full API reference.

Any Pardot API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
          
// Get Prospects
await paragon.request("pardot", "/api/prospect/version/4/do/query/?format=json", {
  method:"GET",
});


// Create a new Prospect
await paragon.request("pardot", "/api/prospect/version/4/do/create?format=json", {
  method: "POST",
  body: "email=b%40useparagon.com&first_name=Brandon&last_name=Foo",
  headers:{
    'Content-Type': 'application/x-www-form-urlencoded',
  }
});
  
```

## Building Pardot workflows

Once your Pardot account is connected, you can add steps to perform the following actions:

* Create or Update Prospect
* Search Prospects
* Get Prospect by ID
* Delete Prospect by ID
* Add Prospect to List
* Remove Prospect from List

When creating or updating prospects in Pardot, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Pardot account. For example, you might want to trigger a workflow whenever new contacts are created Pardot to sync your users' Pardot contacts to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Salesforce%20Pardot%20triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Pardot below:

* **Prospect Created**
* **List Membership Created**


# Pipedrive
Source: https://docs.useparagon.com/resources/integrations/pipedrive

Connect to your users' Pipedrive accounts.

## Setup Guide

<Info>
  **Note:** You'll need to create a new Pipedrive app if you don't already have one.
</Info>

You can find your Pipedrive app credentials by visiting your [Pipedrive Developer Portal](https://developers.pipedrive.com/).

You'll need the following information to set up your Pipedrive app with Paragon:

* Client ID
* Client Secret

### Add the Redirect URL to your Pipedrive app

Paragon provides a redirect URL to send information to your Pipedrive app. To add the redirect URL to your Pipedrive app:

1. Log into your Pipedrive [Developer Portal](https://developers.pipedrive.com/).

2. Navigate to **Tools > Marketplace manager** and select your application. You can press the green **Create new app** button if you don't already have one.

3. Under **OAuth & Access scopes > Callback URL**, provide the URL of your Redirect Page.

   While testing your integration, you can use `https://passport.useparagon.com/oauth`. Once you [set up a Redirect Page](/resources/integrations/pipedrive#setting-up-a-redirect-page-in-your-app) to go live, you will need to change this to the URL of your Redirect Page.

<Info>
  Pipedrive provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.
</Info>

### Add your Pipedrive app to Paragon

1. Select Pipedrive from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Pipedrive > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/pipedrive#add-the-redirect-url-to-your-pipedrive-app) in their respective sections:

* **Client ID:**

  * Log in to the [Pipedrive Developer Portal](https://developers.pipedrive.com/).

  * Navigate to **Tools > Marketplace manager** and select your application.

  * Under **OAuth & Access scopes**, copy the **Client ID**.

* **Client Secret:**

  * Log in to the [Pipedrive Developer Portal](https://developers.pipedrive.com/).

  * Navigate to **Tools > Marketplace manager** and select your application.

  * Under **OAuth & Access scopes**, copy the **Client Secret**.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Pipedrive%20application%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Pipedrive

Once your users have connected their Pipedrive account, you can use the Paragon SDK to access the Pipedrive API on behalf of connected users.

See the Pipedrive REST API documentation for their full API reference.

Any Pipedrive API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get all persons
await paragon.request("pipedrive", "/persons", {
  method: "GET",
});
            
// Create a person
await paragon.request("pipedrive", "/persons", {
  method: "POST",
  body: {
    "name": "David Bowie",
    "email": "name@domain.com"
  }
});
```

## Building Pipedrive workflows

Once your Pipedrive account is connected, you can add steps to perform the following actions:

* Create Record
* Update Record
* Get Record by ID
* Get Records
* Delete Record

When creating or updating records in Pipedrive, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20a%20Pipedrive%20workflow%20in%20Paragon%20Connect.png)
</Frame>

## Using Pipedrive triggers

To use Pipedrive's webhook triggers, you'll need to enable the "Administer account" scope in your Pipedrive application:

1. Log in to the [Pipedrive Developer Portal](https://developers.pipedrive.com/).

2. Navigate to **Tools > Marketplace manager** and select your application.

3. Under **OAuth & Access scopes**, enable **Administer account**.

## Publishing your Pipedrive app

<Warning>
  **Required:** Setting up a Redirect Page is a requirement for allowing customers outside of your Pipedrive Developer account to connect an integration.

  If you do not set up this page, the Pipedrive team will not approve your app for public use.
</Warning>

### Setting up a Redirect Page in your app

Your Pipedrive integration requires a Redirect Page hosted in your application to support an installation flow that *begins* in the Pipedrive Marketplace (i.e., a user searches the Pipedrive Marketplace for your published app and clicks **Install**).

For an example implementation of the Redirect Page using React (based on our Next.js sample app), [see here](https://github.com/ethanlee16/paragon-connect-nextjs-example/blob/redirect-page/pages/integrations/pipedrive.js).

The Redirect Page should be implemented as follows:

* Import the Paragon SDK and authenticate a user.

  * **Note**: If a user is not yet logged into your app, [Pipedrive's requirements](https://pipedrive.readme.io/docs/app-installation-flows#the-user-isnt-logged-into-your-app) suggest that you redirect to a login form, while preserving the intended URL to redirect to upon successful login. In other words, after logging in, your user should see your Redirect Page.

* Accept and read query parameters, which will be:

  * `code` in case of a successful installation

  * `error` in case of an unsuccessful installation or denied consent

* If the `code` query parameter is present,

  * Call `paragon.completeInstall` to complete the OAuth exchange and save a new connected Pipedrive account.

```javascript
 paragon.completeInstall("pipedrive", {
  authorizationCode: codeQueryParam,
  redirectUrl: "https://your-app.url/pipedrive-redirect"
 }).then(() => {
   // Redirect to your app's integrations page
 });
```

* If the `error` query parameter is present,

  * Show this error in your app and allow your user to retry the process.

### Updating the allowed Redirect URL

If you were previously testing with `https://passport.useparagon.com/oauth` as your Pipedrive Redirect URL, you will need to update this value after implementing a Redirect Page:

1. Log into your Pipedrive [Developer Portal](https://developers.pipedrive.com/).

2. Navigate to **Tools > Marketplace manager** and select your application.

3. Under **OAuth & Access scopes > Callback URL**, provide the URL of your Redirect Page.


# Power BI
Source: https://docs.useparagon.com/resources/integrations/powerbi

Connect to your users' Power BI accounts.

## Setup Guide

You can find your Power BI application credentials by visiting your Microsoft Azure Portal.

You'll need the following information to set up your Power BI app with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* A [Microsoft Azure](https://azure.microsoft.com/) account

### Add the Redirect URL to your Power BI app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Power BI app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since Power BI does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Client Secret as they expire for all Microsoft integrations.
</Info>

### Add your Power BI app to Paragon

1. Select **Power BI** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Power BI > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/powerbi#add-the-redirect-url-to-your-power-bi-app) in their respective sections:

* **Client ID:** Found under **Essentials > Application (client) ID** on your Microsoft Azure Portal app page.

* **Client Secret:**

  1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/).

  2. Navigate to **Manage > Certificates & secrets** in the sidebar.

  3. Under **Client Secrets**, press the **+ New client secret** button.

  4. Name your client credentials and select an expiry that works best for your application.

  5. Press **Add** to create your credentials.

  6. Copy the displayed Client Secret under the **Value** column.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Power%20BI%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Power BI

Once your users have connected their Power BI account, you can use the Paragon SDK to access the Power BI API on behalf of connected users.

See the Power BI [REST API documentation](https://learn.microsoft.com/en-us/rest/api/power-bi/) for their full API reference.

Any Power BI API endpoints can be accessed with the Paragon SDK as shown in this example:

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// List Datasets
await paragon.request("powerbi", "myorg/datasets", {
    method: "GET"
});

// List Reports by ID
await paragon.request("powerbi", "myorg/reports/{reportId}", {
    method: "GET"
});

// Query Accounts by number of employees
await paragon.request("microsoftDynamics", "/accounts?$filter=Microsoft.Dynamics.CRM.Between(PropertyName='numberofemployees',PropertyValues=["5","2000"])”
    method: "GET"
});
```

## Building Power BI workflows

Once your Power BI account is connected, you use the Power BI Request step to access any of Power BI API endpoints without the authentication piece.

When creating or updating records in Power BI, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Productboard
Source: https://docs.useparagon.com/resources/integrations/productboard

Connect to your users' Productboard accounts.

## Setup Guide

You can find your Productboard app credentials in your [Productboard Integration Settings](https://paragon-sandbox.productboard.com/settings/integrations).

<Info>
  **Note:** Productboard API access is restricted to Productboard Pro plans and above. Your users will need to have Productboard Pro plans or above to use this integration.
</Info>

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Getting your Productboard API Key

1. Login to your Productboard account

2. Navigate to **Workspace Settings** > **Integrations** > **Public API** > **Access Token**

3. Click **+** to generate a new token.

## Connecting to Productboard

Once your users have connected their Productboard account, you can use the Paragon SDK to access the Productboard API on behalf of connected users.

See the Productboard [REST API documentation](https://developer.productboard.com/) for their full API reference.

Any Productboard API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get a Feature by ID
paragon.request("productboard", "/features/{id}", {
  method: "GET"
});

// Update a Feature
paragon.request("productboard", "/features/{id}", {
  method: "PATCH",
  body: {
    "data": {
      "name": "Custom branding",
      "description": "<p>Custom <s>branding</s> for the agent and user portals.</p>",
      "archived": true,
      "status": {
        "id": "00000000-0000-0000-0000-000000000000",
        "name": "In Progress"
      },
      "timeframe": {
        "startDate": "2022-01-01",
        "endDate": "2022-03-31",
        "granularity": "quarter"
      },
      "parent": {
        "feature": {
          "id": "00000000-0000-0000-0000-000000000000"
        }
      },
      "owner": {
        "email": "email@example.com"
      }
    }
  }
});

// Create a new Release
paragon.request("productboard", "/releases", {
  method: "POST",
  body: {
    "data": {
      "name": "R123",
      "description": "<p>Release <s>R123</s></p>",
      "releaseGroup": {
        "id": "00000000-0000-0000-0000-000000000000"
      },
      "timeframe": {
        "startDate": "2023-01-01",
        "endDate": "2023-03-31",
        "granularity": "quarter"
      },
      "state": "upcoming"
    }
  }
});
  
```

## Building Productboard workflows

Once your Productboard account is connected, you use the Productboard Request step to access any of Productboard's API endpoints without the authentication piece.

When creating or updating records in Productboard, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# QuickBooks
Source: https://docs.useparagon.com/resources/integrations/quickbooks

Connect to your users' QuickBooks accounts.

## Setup Guide

<Info>
  **Note:** You'll need to create a new QuickBooks app if you don't already have one.
</Info>

You can find your QuickBooks app credentials by visiting your [QuickBooks developer portal](https://developer.intuit.com/app/developer/homepage).

You'll need the following information to set up your QuickBooks App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* An [Intuit Developer account](https://developer.intuit.com/app/developer/homepage).
* A QuickBooks app.

### Add the Redirect URL to your QuickBooks app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your QuickBooks app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to your [QuickBooks developer dashboard](https://developer.intuit.com/app/developer/dashboard) and select your application.

3. Depending on whether your application is in **Development** **(Sandbox)** or **Production**, go to **Keys & OAuth > Redirect URIs**.

4. Paste-in Paragon Connect's redirect URL found in Step 1.

5. Press the blue **Save** button at the bottom of the page to save your updates.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20OAuth%20for%20your%20QuickBooks%20app.gif)
</Frame>

### Add your QuickBooks app to Paragon

Under **Integrations > Connected Integrations > QuickBooks > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/quickbooks#1-add-the-redirect-url-to-your-quickbooks-app) in their respective sections:

* **Client ID:** Found under Keys & OAuth > Keys > Client ID on your QuickBooks App page.
* **Client Secret:** Found under Keys & OAuth > Keys > Client Secret on your QuickBooks App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20QuickBooks%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to QuickBooks

Once your users have connected their QuickBooks account, you can use the Paragon SDK to access the QuickBooks API on behalf of connected users.

See the QuickBooks [REST API documentation](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/most-commonly-used/account) for their full API reference.

Any QuickBooks API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Create Customer
await paragon.request("quickbooks", "/customer", { 
  method: "POST",
  body: {
    "FullyQualifiedName": "King Groceries", 
    "PrimaryEmailAddr": {
      "Address": "jdrew@myemail.com"
    }, 
    "DisplayName": "King's Groceries", 
    "Suffix": "Jr", 
    "Title": "Mr", 
    "MiddleName": "B", 
    "Notes": "Here are other details.", 
    "FamilyName": "King", 
    "PrimaryPhone": {
      "FreeFormNumber": "(555) 555-5555"
    }, 
    "CompanyName": "King Groceries", 
    "BillAddr": {
      "CountrySubDivisionCode": "CA", 
      "City": "Mountain View", 
      "PostalCode": "94042", 
      "Line1": "123 Main Street", 
      "Country": "USA"
    }, 
    "GivenName": "James"
  }
});


// Query Customers
await paragon.request("quickbooks", "/query?query=select * from Customer", { 
  method: "GET"
});
```

## Building QuickBooks workflows

Once your QuickBooks account is connected, you can add steps to perform the following actions:

* Get accounts
* Get bills
* Create bill
* Get customer
* Create customer
* Update customer
* Get invoices
* Create invoices
* Send invoices
* Get payments
* Create payments

When creating or updating records in QuickBooks, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Quickbooks%20in%20Paragon.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' QuickBooks account. For example, you might want to trigger a workflow whenever new invoices are created QuickBooks to sync your users' QuickBooks invoices to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/QuickBooks%20webhook%20triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for QuickBooks below:

* **New Account**
* **New Customer**
* **New Invoice**


# Quip
Source: https://docs.useparagon.com/resources/integrations/quip

Connect to your users' Quip accounts.

## Setup Guide

You can find your Quip app credentials in your [Quip Developer Account.](https://quip.com/dev/automation/documentation/current)

You'll need the following information to set up your Quip App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Quip app to Paragon

Under **Integrations > Connected Integrations > Quip > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Quip App page.
* **Client Secret:** Found under Client Secret on your Quip App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Quip%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Quip

Once your users have connected their Quip account, you can use the Paragon SDK to access the Quip API on behalf of connected users.

See the Quip [REST API documentation](https://quip.com/dev/automation/documentation/current) for their full API reference.

Any Quip API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Retrieve Documents, Spreadsheets, or Chat
paragon.request("quip", "/2/threads/<threadIdOrSecretPath>", {
  method: "GET"
});

// Create a Document
paragon.request("quip", "/1/threads/new-document, {
  method: "POST",
  body: {
    title: "My Quip Document"
    content: "<html></html>",
    type: "document"
  }
});
  
```

## Building Quip workflows

Once your Quip account is connected, you use the Quip Request step to access any of Quip's API endpoints without the authentication piece.

When creating or updating records in Quip, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Sage Accounting
Source: https://docs.useparagon.com/resources/integrations/sage-accounting

Connect to your users' Sage Accounting systems

## Setup Guide

<Info>
  **Note:** You'll need to create a new ClickUp app if you don't already have one.
</Info>

You can find your Sage Accounting app credentials in your [Sage Accounting Developer Account.](https://developer.sage.com/api/accounting/api/)

You'll need the following information to set up your Sage Accounting App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add the Redirect URL to your Sage Accounting app

Paragon provides a redirect URL to send information to your Sage Accounting app. To add the redirect URL to your Sage Accounting app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log into your [Sage Accounting Developer Portal](https://developer.sage.com/api/accounting/api/).

3. Navigate to **My Account > Applications** and select your application.

4. Under **App Details**, click the edit button.

5. Under **Callback URLs**, paste the Redirect URL provided in Step 1.

ServiceNow provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your project.

### Add your Sage Accounting app to Paragon

Under **Integrations > Connected Integrations > Sage Accounting > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID** Found under App Credentials > Client ID on your Sage Accounting App page.
* **Client Secret:** Found under App Credentials > Client Secret on your Sage Accounting App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Sage%20Accounting%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Sage Accounting

Once your users have connected their Sage Accounting account, you can use the Paragon SDK to access the Sage Accounting API on behalf of connected users.

See the Sage Accounting [REST API documentation](https://developer.sage.com/api/accounting/api/) for their full API reference.

Any Sage Accounting API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Search for a contact by an email address
paragon.request("sageaccounting", "/contacts?email=<Email>", {
  method: "GET"
});

// Create an invoice
paragon.request("sageaccounting", "/sales_invoices", {
  method: "POST",
  body: {
    contact_id: "<Contact ID>",
    date: "2022-01-31",
    invoice_lines: [{
      description: "Item 1",
      ledger_account_id: "<Ledger Account ID>",
      unit_price: "25.99"
    }]
  }
});

// Create a payment for an invoice
paragon.request("sageaccounting", "/contact_payments", {
  method: "POST",
  body: {
    contact_payment: {
      transaction_type_id: "CUSTOMER_RECEIPT",
      payment_method_id: "CREDIT_DEBIT",
      contact_id: "<Contact ID>",
      bank_account_id: "<Bank Account ID>",
      date: "2022-02-01",
      total_amount: "25.99",
      allocated_artefacts: [{
        artefact_id: "<Invoice ID>",
        amount: "25.99"
      }]
    }
  }
});
  
```

## Building Sage Accounting workflows

Once your Sage Accounting account is connected, you use the Sage Accounting Request step to access any of Sage Accounting's API endpoints without the authentication piece.

When creating or updating records in Sage Accounting, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Sage Intacct
Source: https://docs.useparagon.com/resources/integrations/sage-intacct

Connect to your users' Sage Intacct accounts.

## Setup Guide

You can find your Sage Intacct app credentials in your [Sage Intacct Developer Account.](https://developer.intacct.com/api/)

You'll need the following information to set up your Sage Intacct App with Paragon Connect:

* Sender ID
* Sender Password

### Add your Sage Intacct app to Paragon

Under **Integrations > Connected Integrations > Sage Intacct > Settings**, fill out your credentials from your developer app in their respective sections:

* **Sender ID:** Your Sage Intacct User ID
* **Sender Password:** Your Sage Intacct User Password

<Info>
  Leaving the Sender ID and Sender Password blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Sage%20Intacct%20application%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Sage Intacct

Once your users have connected their Sage Intacct account, you can use the Paragon SDK to access the Sage Intacct API on behalf of connected users.

See the Sage Intacct [REST API documentation](https://developer.intacct.com/api/) for their full API reference.

Any Sage Intacct API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Query IDs of vendors owed
paragon.request("sageintacct", "/", {
  method: "POST",
  body: `
    <query>
      <object>VENDOR</object>
      <select>
        <field>RECORDNO</field>
      </select>
      <filter>
        <greaterthan>
          <field>TOTALDUE</field>
          <value>0</value>
        </greaterthan>
      </filter>
  </query>
  `
})

// Get a single bill by a record number
paragon.request("sageintacct", "/", {
  method: "POST",
  body: `
    <read>
      <object>APBILL</object>
      <keys>[Bill RECORDNO]</keys>
      <fields>*</fields>
    </read>
  `
});

// Update the header of a bill
paragon.request("sageintacct", "/", {
  method: "POST",
  body: `
    <update>
      <APBILL>
        <RECORDNO>[Bill RECORDNO]</RECORDNO>
        <DESCRIPTION>Changing the description</DESCRIPTION>
      </APBILL>
    </update>
  `
});
  
```

## Building Sage Intacct workflows

Once your Sage Intacct account is connected, you can add steps to perform the following actions:

* Create Vendor
* Update Vendor
* Delete Vendor
* Search Vendors
* Get Vendor by ID
* Search Vendor Types
* Create Bill
* Update Bill
* Delete Bill
* Search Bills
* Get Bill by ID
* Search Payment Terms
* Get Payment Term by ID
* Search Accounts
* Get Account by ID
* Get Dimensions

When creating or updating records in Sage Intacct, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Sailthru
Source: https://docs.useparagon.com/resources/integrations/sailthru

Connect to your users' Sailthru accounts.

## Setup Guide

You can find your Sailthru API credentials in your [Sailthru account](https://my.sailthru.com/settings/api_postbacks).

You'll need the following information to set up your Sailthru App with Paragon Connect:

* Company Key
* Company Secret

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Sailthru

Once your users have connected their Sailthru account, you can use the Paragon SDK to access the Sailthru API on behalf of connected users.

See the Sailthru [REST API documentation](https://getstarted.sailthru.com/developers/api/) for their full API reference.

Any Sailthru API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a list
paragon.request("sailthru", "[relative URL]", {
  method: "POST",
  body: {
   "list":"My Email List",
   "primary":1,
   "vars":{"color":"blue"},
   "public_name":"My Email List's public name",
   "type":"natural"
  }
});

// List all campaigns
paragon.request("sailthru", "[relative URL]", {
  method: "GET"
});
  
```

## Building Sailthru workflows

Once your Sailthru account is connected, you use the Sailthru Request step to access any of Sailthru's API endpoints without the authentication piece.

When creating or updating records in Sailthru, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Salesforce
Source: https://docs.useparagon.com/resources/integrations/salesforce

Connect to your users' Salesforce accounts.

## Setup Guide

You can find your Salesforce app credentials in your [Salesforce Developer Account.](https://developer.salesforce.com/)

You'll need the following information to set up your Salesforce App with Paragon Connect:

* Consumer Key
* Consumer Secret
* Scopes Requested

### Add the Redirect URL to your Salesforce app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Salesforce app:

1. Log in to your [Salesforce dashboard](https://www.salesforce.com/).

2. Navigate to the gear icon at the top of the page and click **Setup.**

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Going%20to%20Setup%20in%20Salesforce.gif)
</Frame>

3. In the left-hand sidebar, go to **Platform Tools > Apps > App Manager**.

<Info>
  **Note:** You must have the proper admin permissions on your Salesforce account to access the App Manager. If you don't, please speak to your admin.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Platform%20tools%20to%20Apps%20to%20App%20Manager%20in%20Salesforce.gif)
</Frame>

4. Click on the registered application you'd like to use. If you don't already have one, click **New Connected App**.

5. Under **API (Enable OAuth Settings)**, mark the "**Enable OAuth Settings**" checkbox.

6. Under **Callback URL**, paste-in Paragon Connect's redirect URL:

```
https://passport.useparagon.com/oauth
```

7. Select any scopes you'd like to use in your application.

8. **Disable “Require Proof Key for Code Exchange (PKCE)”** if it is enabled in your Salesforce Connected App.

9. Press the **Save** button at the bottom of the page.

Salesforce provides your **Consumer Key** and **Consumer Secret** needed for the next step once you register your application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20a%20Redirect%20URL%20to%20a%20Salesforce%20Integration%20for%20Paragon%20Connect.gif" alt="" />
</Frame>

### Add your Salesforce app to Paragon

Under **Integrations > Connected Integrations > Salesforce >** **Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/salesforce#1-add-the-redirect-url-to-your-salesforce-app) in their respective sections:

* **Consumer Key:** Found under Manage Connected Apps > API (Enable OAuth Settings) > Consumer Key on your Salesforce App page.
* **Consumer Secret:** Found under Manage Connected Apps > API (Enable OAuth Settings) > Consumer Secret on your Salesforce App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connectng%20your%20Salesforce%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Salesforce

<Info>
  **Note**: Salesforce API access is limited to Enterprise, Unlimited, and Performance Editions of Salesforce, as well as Professional Editions with the paid API add-on. [See Salesforce documentation](https://help.salesforce.com/s/articleView?id=000326486\&type=1) for more information.
</Info>

Once your users have connected their Salesforce account, you can use the Paragon SDK to access the Salesforce API on behalf of connected users.

See the Salesforce [REST API documentation](https://developer.salesforce.com/docs/) for their full API reference.

Any Salesforce API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
          
// Create an Account
await paragon.request("salesforce", "/sobjects/Account", { 
  method: "POST",
  body: { "Name": "Express Logistics and Transport" }
});


// Query Accounts
await paragon.request("salesforce", "/query/Account", { 
  method: "GET",
  body: { "q": "SELECT+name+from+Account" }
});
  
```

## Building Salesforce workflows

Once your Salesforce account is connected, you can add steps to perform the following actions:

* Create record
* Update record
* Get record by ID
* Search records
* Search records by SOQL query
* Deploy custom object
* Deploy custom field
* Get records by List View

When creating or updating records in Salesforce, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20a%20Salesforce%20Lead%20in%20Paragon.png)
</Frame>

## Working with Salesforce Custom Objects and Custom Fields

It's common that different Salesforce instances may be configured with different Custom Objects or Custom Fields. Paragon provides the ability for your users to choose their own Custom Object mapping. You can also deploy Custom Objects or Custom Fields that may be specific to your application to your users' Salesforce instances.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/4eb88bc1-205e-48d7-82fc-67a70b92650b.gif)
</Frame>

### Custom Object Mapping

To allow your users to choose their own Custom Object Mapping, add the **Custom Object Mapping** user setting in your Connect Portal Editor. You should give this setting a descriptive user-setting name, for example, if you're mapping contacts from your app to Salesforce, you might call this "Map Contacts to this object".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-05-19%20at%2010.34.55%20AM.png)
</Frame>

Below, **add a label for each object property that should be mapped from your app to a Salesforce object field**. In our contacts example, you might add labels for "First Name", "Last Name", and "Email".

In your Connect Portal, your users will be prompted to select an object from their Salesforce instance when enabling this workflow. For each of the object properties you labeled, your users will be prompted to select which object field that property should be mapped to.

In the workflow editor, you can now access your user's custom object mapping in the variable menu. For example:

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/f073e110-9be8-460b-9322-f0b6cbf9d660.gif)
</Frame>

### Deploying Custom Objects or Custom Fields

To deploy Custom Objects or Custom Fields to your users' Salesforce instances, use the **Deploy Custom Object** or **Deploy Custom Field** Salesforce workflow actions.

Both **Deploy Custom Object** and **Deploy Custom Field** will upsert by default, for example, if you run **Deploy Custom Field** on an existing Custom Field, it will apply any relevant updates to the Custom Field.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/08d54802-d01d-4bfc-b03f-43566af47441.gif)
</Frame>

### Referencing Custom Objects and Fields

You can reference any Salesforce object (provided that the object exists in your user's Salesforce instance) when creating, updating, or searching records by selecting **Custom Object** under **Record Type** and referencing the **Object Name**.

Similarly, you can reference any Salesforce field (provided that the field exists on the target object) when creating or updating records.

The Object Name for Custom Objects and the Field Name for Custom Fields are both suffixed with `__c`.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-05-19%20at%201.07.08%20PM.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Salesforce account. For example, you might want to trigger a workflow whenever new contacts are created in Salesforce to sync your users' Salesforce contacts to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Salesforce%20Triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Salesforce below:

* **New Record**
* **Record Updated**
* **Campaign Member Added**
* **Campaign Opportunity Added**


# Salesloft
Source: https://docs.useparagon.com/resources/integrations/salesloft

Connect to your users' Salesloft accounts.

## Setup Guide

You can find your Salesloft app credentials in your [Salesloft Developer Account.](https://developers.salesloft.com/api.html)

You'll need the following information to set up your Salesloft App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Salesloft app to Paragon

Under **Integrations > Connected Integrations > Salesloft > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Salesloft App page.
* **Client Secret:** Found under Client Secret on your Salesloft App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Leaving the Client ID and Client Secret blank will use Paragon development keys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Salesloft%20app%20to%20Paragon%20Connect.png" alt="Connecting your Salesloft app to Paragon Connect" />
</Frame>

## Connecting to Salesloft

Once your users have connected their Salesloft account, you can use the Paragon SDK to access the Salesloft API on behalf of connected users.

See the Salesloft [REST API documentation](https://developers.salesloft.com/api.html) for their full API reference.

Any Salesloft API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Fetch a call by ID
await paragon.request("salesloft", "/v2/activities/calls/<CALL ID>.json", {
  method: "GET"
});

// List people
await paragon.request("salesloft", "/v2/people.json", {
  method: "GET"
});
  
```

## Building Salesloft workflows

Once your Saleloft account is connected, you can add steps to perform the following actions:

* Create an Account
* Update an Account
* Get an Account
* Delete an Account
* Search Accounts
* Create a Custom Field
* Update a Custom Field
* Get a Custom Field
* Delete a Custom Field
* Search Custom Fields
* Create a Call
* Get a Call
* Search Calls
* Create a Person
* Update a Person
* Get a Person
* Delete a Person
* Search Persons
* Create a Task
* Update a Task
* Get a Task
* Search Tasks

You can also use the Salesloft Request step to access any of Salesloft's API endpoints without the authentication piece.

When creating or updating records in Salesloft, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Salesloft account. For example, you might want to trigger a workflow whenever new people are created in Salesloft to sync your users' Salesloft contacts to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Salesloft%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Salesloft below:

* **New Person Created**
* **Person Updated**
* **New Account Created**
* **Account Updated**


# SAP S/4HANA
Source: https://docs.useparagon.com/resources/integrations/saps4hana

Connect to your users' SAP S/4HANA accounts.

## Setup Guide

You can find your SAP S/4HANA app credentials in your [SAP S/4HANA Developer Account.](https://api.sap.com/)

You'll need the following information to set up your SAP S/4HANA App with Paragon Connect:

* SAP Host URL
* Username
* Password

## Connecting to SAP S/4HANA

Once your users have connected their SAP S/4HANA account, you can use the Paragon SDK to access the SAP S/4HANA API on behalf of connected users.

See the SAP S/4HANA [REST API documentation](https://api.sap.com/) for their full API reference.

Any SAP S/4HANA API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get the top 50 supplier invoices
paragon.request("saps4hana", "/odata/sap/API_SUPPLIERINVOICE_PROCESS_SRV/A_SupplierInvoice?$top=50&$inlinecount=allpages", {
  method: "GET"
});

// Release an invoice by ID
paragon.request("saps4hana", "/odata/sap/API_SUPPLIERINVOICE_PROCESS_SRV/Release?SupplierInvoice=<SupplierInvoiceID>&FiscalYear=2022&DiscountDaysHaveToBeShifted=true", {
  method: "POST"
});

// Get a customer by ID
paragon.request("saps4hana", "/odata/sap/API_BUSINESS_PARTNER/A_Customer(%27<Customer ID>%27)", {
  method: "GET"
});
  
```

## Building SAP S/4HANA workflows

Once your SAP S/4HANA account is connected, you can add steps to perform the following actions:

* Create Supplier Invoice
* Get Supplier Invoice by ID
* Search Supplier Invoices
* Delete Supplier Invoice
* Get Supplier by ID
* Search Suppliers
* Update Supplier
* Get Customer by ID
* Search Customer
* Update Customer

You can also use the SAP S/4HANA Request step to access any of SAP S/4HANA's API endpoints without the authentication piece.

When creating or updating records in SAP S/4HANA, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# SAP SuccessFactors
Source: https://docs.useparagon.com/resources/integrations/sapsuccessfactors

Connect to your users' SAP SuccessFactors accounts.

## Setup Guide

You'll need the following information to set up your SAP SuccessFactors App with Paragon Connect:

* SAP SuccessFactor API Server
* Username
* Password

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to SAP SuccessFactors

Once your users have connected their SAP SuccessFactors account, you can use the Paragon SDK to access the SAP SuccessFactors API on behalf of connected users.

See the SAP SuccessFactors [REST API documentation](https://api.sap.com/package/SuccessFactorsEmployeeCentral/all) for their full API reference.

Any SAP SuccessFactors API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Company Directory
paragon.request("sapsucessfactors", "/", {
  method: "GET"
});

// Create a time-off request
paragon.request("sapsucessfactors", "/WorkScheduleDay", {
  method: "POST"
});

// Get benefit deduction types
paragon.request("sapsucessfactors", "/BenefitDeductionDetails?$top=10", {
  method: "GET"
});
  
```

## Building SAP SuccessFactors workflows

Once your SAP SuccessFactors account is connected, you use the SAP SuccessFactors Request step to access any of SAP SuccessFactors's API endpoints without the authentication piece.

When creating or updating records in SAP SuccessFactors, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Segment
Source: https://docs.useparagon.com/resources/integrations/segment

Connect to your users' Segment accounts.

## Setup Guide

You can find your Segment account credentials in your [Segment Account](https://segment.com/).

You'll need the following information to set up your Segment App with Paragon Connect:

* Segment API Key

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Segment

Once your users have connected their Segment account, you can use the Paragon SDK to access the Segment API on behalf of connected users.

See the Segment [REST API documentation](https://docs.segmentapis.com/) for their full API reference.

Any Segment API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a new source
paragon.request("segment", "/sources", {
  method: "POST",
  body: {
    "slug": "my-test-source-r-dsv2",
    "name": "My Source",
    "enabled": true,
    "metadataId": "IqDTy1TpoU",
    "settings": { ... }
  }
});

// List all warehouses
paragon.request("segment", "/warehouses", {
  method: "GET"
});
  
```

## Building Segment workflows

Once your Segment account is connected, you use the Segment Request step to access any of Segment's API endpoints without the authentication piece.

When creating or updating records in Segment, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# ServiceNow
Source: https://docs.useparagon.com/resources/integrations/servicenow

Connect to your users' ServiceNow accounts.

## Setup Guide

### **Creating a ServiceNow Test Account**

You can create a ServiceNow test account from the [ServiceNow Developer Portal](https://developer.servicenow.com/dev.do).

In the ServiceNow Developer Portal, you can create a free developer instance by clicking the **Request Instance** button in the page header.

To connect to ServiceNow, your users will need to provide an **Instance URL**, **Username**, and **Password**. You can find these values for your test account by going to the **User Icon > Manage instance password.**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202023-11-03%20at%2014.56.04@2x.png" alt="" />
</Frame>

Creating a developer instance within ServiceNow's Developer Portal is a self-service process.

## Using the Paragon SDK for ServiceNow

Once your users have connected their ServiceNow account, you can use the Paragon SDK to access the ServiceNow API on behalf of connected users.

See the ServiceNow [REST API documentation](https://docs.servicenow.com/bundle/paris-application-development/page/build/applications/concept/api-rest.html) for their full API reference.

Any ServiceNow API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get incident records
await paragon.request("servicenow", "/now/table/incident", {
  method: "GET",
});
            
// Create incident records
await paragon.request("servicenow", "/now/table/incident", {
  method: "POST",
  body: {
    "short_description":"Test incident creation",
    "comments":"These are my comments"
  }
});
```

## Building ServiceNow workflows

Once your ServiceNow account is connected, you can add steps to perform the following actions:

* Get Ticket by ID
* Create Ticket
* Update Ticket

You can also use the ServiceNow Request step to access any of ServiceNow's API endpoints without the authentication piece.

When creating or updating records in ServiceNow, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20a%20ServiceNow%20workflow%20in%20Paragon%20Connect.png)
</Frame>


# SharePoint
Source: https://docs.useparagon.com/resources/integrations/sharepoint

Connect to your users' SharePoint accounts.

Setup Guide

You can find your SharePoint application credentials by visiting your Microsoft Azure Portal.

You'll need the following information to set up your SharePoint app with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* A [Microsoft Azure](https://azure.microsoft.com/) account

### Add the Redirect URL to your SharePoint app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your SharePoint app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

3. Navigate to **All Services > App Registrations** and select your application.

4. Select **Authentication** from the sidebar.

5. Under **Platform configurations**, press the **"Add a platform"** button.

6. Select the **Web** platform.

7. Paste the Redirect URL from Step 1 under Redirect URIs.

8. Press the **Save** button at the top of the page.

### Generate a Client Secret

Since SharePoint does not automatically provide you with a Client Secret for your application, we'll need to make one. To get your Client Secret:

1. Navigate to **Manage > Certificates & secrets** in the sidebar.

2. Under **Client Secrets**, press the **+ New client secret** button.

3. Name your client credentials and select an expiry that works best for your application. Press **Add** to create your credentials.

4. Copy the displayed Client Secret under the **Value** column.

<Info>
  **Note:** You will need to periodically create new and update your Client Secret as they expire for all Microsoft integrations.
</Info>

### Enable Multi-tenancy to your SharePoint app

To allow Microsoft users from outside of your organization to connect to your SharePoint application, you must specify this as an option within the SharePoint application registration.

1. Log in to the [Microsoft Azure Portal](https://azure.microsoft.com/) using your Microsoft account.

2. Navigate to **All Services > App Registrations** and select your application.

3. Select **Authentication** from the sidebar.

4. Under **Supported account types**, press the **"Accounts in any organizational directory"** option.

5. Click Save.

### Add your SharePoint app to Paragon

1. Select **SharePoint** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > SharePoint > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/sharepoint#add-the-redirect-url-to-your-sharepoint-app) and [Step 2](/resources/integrations/sharepoint#generate-a-client-secret) in their respective sections:

* **Client ID:** Found under Essentials > Application (client) ID on your Microsoft Azure Portal app page.
* **Client Secret:** Found at the end of [Step 2](/resources/integrations/sharepoint#generate-a-client-secret).
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20Sharepoint%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to SharePoint

Once your users have connected their SharePoint account, you can use the Paragon SDK to access the SharePoint API on behalf of connected users.

See the SharePoint [REST API documentation](https://docs.microsoft.com/en-us/graph/api/resources/sharepoint?view=graph-rest-1.0) for their full API reference.

Any SharePoint API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Get organization’s default site
await paragon.request("sharepoint", "/sites/root", { 
  method: "GET",
});


// Get list under a site
await paragon.request("sharepoint", "/sites/{site-id}/lists", { 
  method: "GET",
});

// Create task in list
await paragon.request("sharepoint", "sites/{site-id}/lists/{list-id}/items", { 
  method: "POST",
  body: {
    "fields": {
      "Title": "Widget",
      "Color": "Purple",
      "Weight": 32
    }
}
});
```

## Building SharePoint workflows

Once your SharePoint account is connected, you can add steps to perform the following actions:

* Create Item
* Update Item
* Get Item by ID
* Get Items in a List
* Delete Item
* Create List
* Get List by ID
* Get Lists
* Create List column
* Get List columns

When creating messages in SharePoint, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Sharepoint account. For example, you might want to trigger a workflow whenever new items are created in Sharepoint to sync your users' Sharepoint items to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Sharepoint%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Sharepoint below:

* **Item Created**
* **Item Updated**
* **Page Modified**
* **File Deleted**

## Using the SharePoint File Picker

You can allow your user to select files from their SharePoint account in your app with the Paragon SDK.

**Showing the File Picker**

Use the Paragon SDK in your frontend application to show the File Picker in your app.

The SDK provides an `ExternalFilePicker` class to load SharePoint's JavaScript into your page and authenticate with your user's connected SharePoint account.

```javascript
let picker = new paragon.ExternalFilePicker("sharepoint", {
    onFileSelect: (files) => {
        // Handle file selection
    }
});

// Loads external dependencies and user's access token
await picker.init();

// Open the File Picker
picker.open();
```

You can configure the File Picker to listen for additional callbacks or to restrict allowed file types. Learn more about configuring File Picker options in the [SDK Reference](/apis/api-reference#externalfilepicker).

#### Downloading the Selected File

The SharePoint File Picker callback will return a `Response` object describing the user's file picker interaction including an array of any files selected. Using this array of `fileIds`, you can use the [Connect API](/apis/making-api-requests) to perform an authenticated proxy requests to download the files.

<CodeGroup>
  ```javascript JavaScript
  await paragon.request('sharepoint', '/_api/web/GetFileById(<fileID>)/$value', {
  	method: 'GET'
  });
  ```

  ```plain REST API
  POST https://proxy.useparagon.com/projects/19d...012/sdk/proxy/sharepoint/_api/web/GetFileById(<fileID>)/$value

  Authorization: Bearer eyJ...
  Content-Type: application/json
  ```
</CodeGroup>


# Shopify
Source: https://docs.useparagon.com/resources/integrations/shopify

Connect to your users' Shopify accounts.

You can find your Shopify application credentials by visiting your [Shopify Partner Dashboard](https://partners.shopify.com/organizations).

You'll need the following information to set up your Shopify App with Paragon:

* Client ID
* Client Secret
* Scopes Requested
* Shopify Developer account, also known as a Shopify Partner account. You can create one [here](https://developers.shopify.com/).
* Shopify development store. Learn more about creating a development store [here](https://help.shopify.com/en/partners/dashboard/managing-stores/development-stores#create-a-development-store-for-testing-apps-or-themes).
* Shopify application. Learn more about creating a Shopify application [here](https://shopify.dev/tutorials/authenticate-a-public-app-with-oauth#generate-credentials-from-your-partner-dashboard).

### Add the Redirect URL to your Shopify app

Paragon provides a redirect URL to send information to your Shopify app. To add the redirect URL to your Shopify app:

1. Log in to your Shopify [Partner Dashboard](https://partners.shopify.com/current/resources) and select your app.

2. Navigate to **App setup > URLs > Allowed redirection URL(s)**

3. Add your app's Initial Redirect URL to "**App URL**". While testing your integration, you can use your app's root URL. Once you [set up an Initial Redirect](/resources/integrations/shopify#initial-redirect) to go live, you will need to change this to the URL of your Initial Redirect.

4. Add your app's Redirect Callback URL to "**Allowed redirection URL(s)**". While testing your integration, you can use `https://passport.useparagon.com/oauth`. Once you [set up a Redirect Callback](/resources/integrations/shopify#setting-up-redirect-pages-in-your-app) to go live, you will need to change this to the URL of your Redirect Callback.

5. Press the **Save** button at the top of the page to save your changes.

<Info>
  **Note:** You'll need a Shopify application to connect your application to Paragon. Learn more about creating a Shopify application [here](https://shopify.dev/tutorials/authenticate-a-public-app-with-oauth#generate-credentials-from-your-partner-dashboard).
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20OAuth%20for%20your%20Shopify%20app.gif)
</Frame>

### Add a development store to your Shopify app

1. Log in to your Shopify [Partner Dashboard](https://partners.shopify.com/current/resources).

2. Click **Apps** on the sidebar.

3. Select your Shopify application.

4. In the **Test your app** section, press the **Select store** button.

5. Choose the development store you'd like to connect to.

<Info>
  **Note:** You'll need to create a development store if you don't already have one. Learn more about creating a Shopify development store [here](https://help.shopify.com/en/partners/dashboard/managing-stores/development-stores#create-a-development-store-for-testing-apps-or-themes).
</Info>

### Add your Shopify app to Paragon

1. Select **Shopify** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Shopify > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/shopify#1-add-the-redirect-url-to-your-shopify-app) in their respective sections:

* **Client ID:** Found under Apps > Client credentials > Client ID on your Shopify app page.
* **Client Secret:** Found under Apps > Client credentials > Client Secret on your Shopify app page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) A complete list of Shopify's scopes is [here](https://shopify.dev/docs).

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** You should only add the scopes you've requested in your application page to Paragon.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-03-21%20at%2012.17.39@2x.png" alt="" />
</Frame>

## Connecting to Shopify

Once your users have connected their Shopify account, you can use the Paragon SDK to access the Shopify API on behalf of connected users.

See the Shopify [REST API documentation](https://shopify.dev/docs/admin-api/rest/reference) for their full API reference.

Any Shopify API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Create Customer
await paragon.request("shopify", "/admin/api/2020-10/customers.json", { 
  method: "POST",
  body: { 
    "first_name": "John",
    "last_name": "Norman",
    "email": "example@example.com",
    "phone": "+16135551111",
    "note": "Creating customer for testing",
    "tags": ["tag1","tag2"]
   }
});


// Query Customers
await paragon.request("shopify", "/admin/api/2020-10/customers.json", { 
  method: "GET"
});
  
```

## Building Shopify workflows

Once your Shopify account is connected, you can add steps to perform the following actions:

* Get customers
* Search customers
* Create customer
* Update customer
* Get orders
* Create order
* Update order
* Get products
* Create product
* Update product

When creating or updating records in Shopify, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/A%20Shopify%20Workflow%20in%20Paragon.png)
</Frame>

## Using Webhook Triggers

<Info>
  **Requirement for using Shopify triggers:** Configuring triggers for Shopify events that involve customer data requires you as the Shopify app owner to request access to protected data. Navigate to **Apps > Your App > API Access > Access Requests** to request access before using the Paragon Shopify trigger. [Learn more here.](https://shopify.dev/docs/apps/launch/protected-customer-data)
</Info>

Webhook triggers can be used to run workflows based on events in your users' Shopify account. For example, you might want to trigger a workflow whenever new orders are created Shopify to sync your users' Shopify orders to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Shopify%20Webhook%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Shopify below:

* **New Order**
* **Order Updated**
* **New Customer**
* **Customer Updated**
* **New Product**
* **Product Updated**

## Publishing your Shopify app

<Info>
  **Required for publishing:** In order to list your app on the Shopify App Store, you must implement the following additional features in your integration:

  * [Setting up Redirect Pages](/resources/integrations/shopify#setting-up-redirect-pages-in-your-app)
  * [Subscribing to mandatory privacy webhooks](/resources/integrations/shopify#subscribing-to-mandatory-privacy-webhooks)

  For more information, see [Shopify's documentation on publishing requirements](https://shopify.dev/docs/apps/store/requirements).
</Info>

### Setting up Redirect Pages in your app

Your Shopify integration requires two types of pages hosted in your application to support an installation flow that *begins* in the Shopify App Store (i.e., a user searches the Shopify App Store for your published app and clicks **Add app**).

Here is an annotated version of the [Shopify OAuth flow](https://shopify.dev/docs/apps/auth/oauth) diagram outlining what pages you will need to implement:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Shopify%20OAuth%20Flow%20(1).png" alt="" />
</Frame>

The pages you will need to implement include:

* **Initial Redirect**: This page will take in a `shop` query parameter and redirect to Shopify's OAuth flow.
* **Redirect Callback**: This page will receive the OAuth authorization code after the Shopify user grants consent and call `paragon.completeInstall` to save the user's account connection.

For an example implementation of the redirect pages using React (based on our Next.js sample app), see:

* [Example Initial Redirect](https://github.com/ethanlee16/paragon-connect-nextjs-example/blob/redirect-page/pages/integrations/index.js#L13-L20)
* [Example Redirect Callback](https://github.com/ethanlee16/paragon-connect-nextjs-example/blob/redirect-page/pages/integrations/shopify.js)

#### Initial Redirect

The Initial Redirect should be implemented as follows:

* Accept and read the query parameter `shop`. If the query parameter is present, redirect to the following URL to start the Shopify OAuth flow:

```
https://{shopQueryParam}/admin/oauth/authorize?client_id={SHOPIFY_CLIENT_ID}&redirect_uri={REDIRECT_CALLBACK_URL}&scope={SHOPIFY_SCOPES}
```

* The `SHOPIFY_CLIENT_ID` should match the Client ID that you use in your Shopify integration settings.
* The `REDIRECT_CALLBACK_URL` should be the URL of the Redirect Callback page in your app.
* The `SHOPIFY_SCOPES` should match the scopes that you use in your Shopify integration settings.

#### Redirect Callback

The Redirect Callback should be implemented as follows:

* Import the Paragon SDK and authenticate a user.

  * **Note**: If a user is not yet logged into your app, you can redirect to a login form, while preserving the intended URL to redirect to upon successful login. In other words, after logging in, your user should see your Redirect Page.

* Accept and read query parameters, which will be:

  * `code` and `shop` in case of a successful installation

  * `error` in case of an unsuccessful installation or denied consent

* If the `code` query parameter is present,

  * Read the `shop` query parameter and capture the shop name in the pattern `{shop}.myshopify.com`. See the regular expression used below.

  * Call `paragon.completeInstall` to complete the OAuth exchange and save a new connected Shopify account.

```javascript
let params = new URLSearchParams(window.location.search);
let authorizationCode = params.get("code");
let [, shopName] = params.get("shop").match(/^([a-zA-Z0-9][a-zA-Z0-9\-]*).myshopify.com/);

if (authorizationCode && shopName) {
   paragon.completeInstall("shopify", {
    authorizationCode: authorizationCode,
    redirectUrl: "https://your-app.url/shopify-redirect",
    integrationOptions: {
      SHOP_NAME: shopName,
    }
  }).then(() => {
     // Redirect to your app's integrations page
  });
} else {
  let error = params.get("error");
  // Handle error
}
```

* If the `error` query parameter is present,

  * Show this error in your app and allow your user to retry the process.

#### Updating your app's redirect and app URLs

1. Log in to your Shopify [Partner Dashboard](https://partners.shopify.com/current/resources) and select your app.

2. Navigate to **App setup > URLs > Allowed redirection URL(s)**

3. Set your **App URL** to your app's Initial Redirect URL.

4. Add your app's Redirect Callback URL to **Allowed redirection URL(s).**

### Subscribing to mandatory privacy webhooks

Shopify requires you to subscribe to 3 privacy webhooks to request or erase personal data that your integration may store in your application.

Paragon's Shopify integration allows you to subscribe and take action on these webhooks via workflows.

#### Setting the Shopify Webhook URL

To get started, visit the Paragon dashboard and navigate to your Shopify integration.

* Click on the **Settings** tab and copy the **Webhook URL** value.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[CleanShot]%202024-02-01%20at%2011.09.29%20AM.png" alt="" />
</Frame>

Next, log in to [Shopify Partners](https://partners.shopify.com) and navigate to **Apps**.

* Select the app that you are using in the environment or project you have opened in Paragon.
* Navigate to **Configuration** (under the Build section) and scroll to **Compliance Webhooks**.
* For each of the endpoints (Customer data request endpoint, Customer data erasure endpoint, Shop data erasure endpoint), paste in the Webhook URL value you copied from the Paragon dashboard.
* Click **Save and release** at the top to save your changes.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(80).png" alt="" />
</Frame>

#### Creating workflows to respond to privacy webhooks

Next, create 3 workflows that listen for these triggers and take action on events received:

* Customer data request
* Customer data erasure
* Shop data erasure

You can create new workflows in the Paragon dashboard, from the **Overview** tab of your Shopify integration and click **Create Workflow**.

For each of the new workflows you create, select a **Shopify** trigger and select one of the Shopify privacy webhook events as the Trigger Event:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(81).png" alt="" />
</Frame>

Define the steps under the workflow to respond to the event type you selected.

From [Shopify's documentation](https://shopify.dev/docs/apps/webhooks/configuration/mandatory-webhooks), here is how you should handle each event type:

* **Customer data request**: If your app has been granted access to [customer or order data](https://shopify.dev/docs/api/usage/access-scopes#authenticated-access-scopes), then it will receive a data request webhook. The webhook contains the resource IDs of the customer data that you need to provide to the store owner. It's your responsibility to provide this data to the store owner directly.

  * **Note**: This request does not require the data to be provided in a response to the webhook. This process happens outside of Shopify and should be provided to the user who connected this Shopify account directly, e.g. through email, within 30 days of receiving the request.

* **Customer data erasure**: Shopify store owners can request that data is deleted on behalf of a customer. When this happens, Shopify sends a Customer Data Erasure event to the apps installed on that store so that you can erase any data for a certain customer of a store from your database.

* **Shop data erasure**: 48 hours after a store owner uninstalls your app, Shopify sends a Shop Data Erasure event. This webhook provides the store's `shop_id` and `shop_domain` so that you can erase data for that store from your database.

<Accordion title="Example Implementation">
  Example implementation

  Add a Request step under the Trigger to send the privacy event information to your API. We recommend including the following values in the request body for your reference:

  * `{{1.result}}`: This is the full event payload received from Shopify. You will see an example of the event in your workflow Test Data. See [Shopify's documentation on event payloads](https://shopify.dev/docs/apps/webhooks/configuration/mandatory-webhooks#customers-data_request) for more details.
  * `{{userSettings.userId}}`: This is the User ID of the Connected User that received the event. You can use this ID to relate the event to a user in your application.

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(82).png" alt="" />
  </Frame>
</Accordion>

Finally, configure your 3 workflows to be [hidden from the Connect Portal and enabled by default](/connect-portal/connect-portal-customization#workflows):

* Click the context menu in the Workflow Editor toolbar and click **Edit Connect Portal Workflow Settings**.
* Switch on **Default to enabled** and **Hide workflow from Portal for all users**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Default%20Enabled%20%20Hide%20Workflow%20On.png" alt="" />
</Frame>

* Repeat for each workflow that has a Shopify privacy event trigger.

Having both options on will mean that this workflow will run for all users of your Shopify integration, and users will not see or need to configure the workflow from your Connect Portal.

#### Testing and validating privacy webhooks

To test your privacy webhook implementation end-to-end:

* Verify that each of your workflows are [deployed](/workflows/building-workflows#deploying-workflows).
* In your application, connect a Shopify store to the Connect Portal. Remember the store and account that you have connected.
* In the [Shopify Admin](https://admin.shopify.com) page for the same store, request or erase a customer's data ([see Shopify documentation](https://help.shopify.com/en/manual/privacy-and-security/privacy/processing-customer-data-requests)). These actions will trigger the "Customer data request" and "Customer data erasure" events, respectively.
* In the Paragon dashboard, visit [Task History](/monitoring/viewing-task-history) and verify that your workflow has executed.


# Shortcut
Source: https://docs.useparagon.com/resources/integrations/shortcut

Connect to your users' Shortcut accounts.

## Setup Guide

You can find your Shortcut app credentials in your [Shortcut Developer Account.](https://developer.shortcut.com/)

You'll need the following information to set up your Shortcut App with Paragon Connect:

* Shortcut API Token

## Connecting to Shortcut

Once your users have connected their Shortcut account, you can use the Paragon SDK to access the Shortcut API on behalf of connected users.

See the Shortcut [REST API documentation](https://developer.shortcut.com/) for their full API reference.

Any Shortcut API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create an Epic
await paragon.request("shortcut", "api/v3/epics", {
   method: "POST",
   body: { 
     "name": "My Work Epic",
     "description": "This is a sample Epic"
   }
});

// Get an Epic by ID
await paragon.request("shortcut", "api/v3/epics/<epic-public-id>", {
   method: "GET"
});
  
```

## Building Shortcut workflows

Once your Shortcut account is connected, you can add steps to perform the following actions:

* Create Story
* Update Story
* Get Story by ID
* Get Stories by Project
* Get Stories by Epic
* Search Stories
* Delete Story
* Create Epic
* Update Epic
* Get Epic by ID
* Delete Epic
* Create Project
* Update Project
* Get Project by ID
* Delete Project

You can also use the Shortcut Request step to access any of Shortcut's API endpoints without the authentication piece.

When creating or updating records in Shortcut, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Slack
Source: https://docs.useparagon.com/resources/integrations/slack

Connect to your users' Slack accounts.

## Setup Guide

You can find your Slack app credentials by visiting your [Slack App dashboard](https://api.slack.com/apps).

<Info>
  **Note:** You'll need to create a new Slack app if you don't already have one.
</Info>

You'll need the following information to set up your Slack App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Slack app

Paragon provides a redirect URL to send information to your Slack app. To add the redirect URL to your Slack app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to your [Slack App dashboard](https://api.slack.com/apps) and select your Slack app.

3. In your Slack App page sidebar, navigate to **OAuth & Permissions > Redirect URLs**.

4. Press "**Add New Redirect URL**".

5. Paste-in the redirect URL from Paragon. The redirect URL can be found in Step 1.

6. Press "**Add**", then press "**Save URLs**".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20Slack%20redirect%20URL.gif)
</Frame>

Slack provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your application. You can find the credentials under **Basic Information > App Credentials** in the Slack app sidebar.

7. Enable your Slack app in other workspaces. Under **Settings > Managed Distribution > Share Your App with Other Workspaces**, complete the listed steps to allow your Slack app to be installed by your customers.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20Other%20Workspaces%20for%20your%20Slack%20app%20for%20Paragon%20Connect.png" alt="" />
</Frame>

### Add your Slack app to Paragon

1. Select **Slack** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Slack >** **Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/slack#add-the-redirect-url-to-your-slack-app) in their respective sections:

* **Client ID:** Found under Basic Information > App Credentials > Client ID on your Slack App page.
* **Client Secret:** Found under Basic Information > App Credentials > Client Secret on your Slack App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Slack%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Slack

Once your users have connected their Slack account, you can use the Paragon SDK to access the Slack API on behalf of connected users.

See the Slack [REST API documentation](https://api.slack.com/reference) for their full API reference.

Any Slack API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get All Channels
await paragon.request("slack", "/conversations.list", {
  method: "GET"
});

// Send Message to Channel
await paragon.request("slack", "/chat.postMessage", {
  method: "POST",
  body: {
    "channel": "YOUR_CHANNEL_ID",
    "text": "Hello, world",
    "as_user": true
  }
});
```

## Building Slack workflows

Once your Slack account is connected, you can add steps to perform the following actions.

* Send message in channel
* Send DM
* Get User by Email
* Search Messages

When composing your Slack message, you can reference data from previous steps by typing `{{` to invoke the variable menu.

Additionally, you can choose whether to send a message as a bot or your user. If you choose to send as a bot, you can choose to give your bot a custom name and icon.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20the%20Dynamic%20Variable%20Menu%20in%20Paragon%20Connect.png" alt="" />
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Slack account. For example, you might want to trigger a workflow whenever new messages are created in Slack to sync your users' Slack messages to your application in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Slack%20Triggers%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can find the full list of Webhook Triggers for Slack below:

* **Direct Message Created**
* **Channel Created**
* **Direct Message Sent**
* **File Deleted**
* **Group Message Sent**
* **Channel Message Sent**
* **Direct Message Updated**
* **Group Message Updated**
* **Channel Message Updated**
* **App Mentioned**
* **New Message Reaction**
* **Message Reaction Removed**
* **Message Interaction**

### **Subscribing to Slack Events**

Paragon provides a request URL to subscribe your Slack app to events in Slack. To add the request URL to your Slack app:

1. In the Settings tab of your Slack integration in Paragon, copy the link under "**Webhook URL".**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202023-11-17%20at%2013.34.12@2x.png" alt="" />
</Frame>

2. Log in to your [Slack App dashboard](https://api.slack.com/apps) and select your Slack app.

3. In your Slack App page sidebar, navigate to **Event Subscriptions > Enable Events**.

4. Provide the "**Request URL**." Paragon will automatically respond to Slack's `challenge` request and begin listening to events on behalf of your app.

5. Click **Save Changes** at the bottom of the Slack App dashboard.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202023-11-17%20at%2013.38.38@2x.png" alt="" />
</Frame>


# Snowflake
Source: https://docs.useparagon.com/resources/integrations/snowflake

Connect to your users' Snowflake accounts.

## Setup Guide

You can find your Snowflake app credentials in your [Snowflake Developer Account.](https://docs.snowflake.com/en/developer-guide/sql-api/index.html)

You'll need the following information to set up your Snowflake App with Paragon Connect:

* Snowflake subdomain
* Snowflake Private Key
* Snowflake Passphrase
* Snowflake Username

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Snowflake

Once your users have connected their Snowflake account, you can use the Paragon SDK to access the Snowflake API on behalf of connected users.

See the Snowflake [REST API documentation](https://docs.snowflake.com/en/developer-guide/sql-api/index.html) for their full API reference.

Any Snowflake API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Perform a simple select query
await paragon.request('snowflake', '/statements', {
  method: 'POST',
  body: {
    "statement": "SELECT * FROM country",
    "schema": "LOCATION",
    "warehouse": "COMPUT_WH"
  });

// Using Bind Variables in a select query
await paragon.request('snowflake', '/statements', {
  method: 'POST',
  body: {
    {
      "statement": "select * from T where c1=?",
      "timeout": 60,
      "database": "TESTDB",
      "schema": "TESTSCHEMA",
      "warehouse": "TESTWH",
      "role": "TESTROLE",
      "bindings": {
        "1": {
          "type": "FIXED",
          "value": "123"
        }
      }
    }
  });
  
```

## Building Snowflake workflows

Once your Snowflake account is connected, you use the Snowflake Request step to access any of Snowflake's API endpoints without the authentication piece.

When creating or updating records in Snowflake, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Stack Overflow For Teams
Source: https://docs.useparagon.com/resources/integrations/stackoverflowteams

Connect to your users' Stack Overflow for Teams accounts.

## Setup Guide

You'll need the following information to set up your Stack Overflow for Teams App with Paragon Connect:

* Personal Access Token
* Team Name

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Stack Overflow for Teams

Once your users have connected their Stack Overflow for Teams account, you can use the Paragon SDK to access the Stack Overflow for Teams API on behalf of connected users.

See the Stack Overflow for Teams [REST API documentation](https://api.stackoverflowteams.com/docs) for their full API reference.

Any Stack Overflow for Teams API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get all Posts for the associated user(s)
paragon.request("stackoverflowteams", "/users/<ids>/posts", {
  method: "GET"
});

// Get a Post by ID
paragon.request("stackoverflowteams", "/questions/<ids>", {
  method: "GET"
});
  
```

## Building Stack Overflow for Teams workflows

Once your Stack Overflow for Teams account is connected, you use the Stack Overflow for Teams Request step to access any of Stack Overflow for Teams's API endpoints without the authentication piece.

When creating or updating records in Stack Overflow for Teams, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Stripe
Source: https://docs.useparagon.com/resources/integrations/stripe

Connect to your users' Stripe accounts.

## Setup Guide

You can find your Stripe app credentials by visiting your Stripe API Key Settings

<Info>
  **Note:** You'll need to create a new Stripe API Key if you don't already have one.
</Info>

You'll need the following information to set up your Stripe API Key with Paragon Connect:

* [Stripe API Key](https://dashboard.stripe.com/apikeys)

## Connecting to Stripe

Once your users have connected their Stripe account, you can use the Paragon SDK to access the Stripe API on behalf of connected users.

See the Stripe [REST API documentation](https://stripe.com/docs/api) for their full API reference.

Any Stripe API endpoints can be accessed with the Paragon SDK as shown in this example

```js JavaScript
// You can find your project ID in the Overview tab of any Integration.

// Authenticate the user
paragon.authenticate(<ProjectID>, <Paragon User Token>);

// Create Customer
await paragon.request("stripe", "/v1/customers", {
  method: "POST",
  body: {
    name: "test",
    email: "example@example.com",
    description: "Create customer for test",
    }
});

// Get Customers
await paragon.request("stripe", "/v1/customers", {
  method: "GET",
});
```

## Building Stripe workflows

Once your Stripe account is connected, you can add steps to perform the following actions:

* Create Customer
* Update Customer
* Get Customer by ID
* List Customers
* Create Subscription
* List Subscriptions
* Create Product
* Get Product by ID
* List Products
* List Balance Transaction
* List Plans

When using Stripe, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20Stripe%20workflows%20in%20Paragon%20Connect.png)
</Frame>

## Using the Connect Portal

The Connect Portal supports Secret API keys and Restricted API keys. While Secret API keys can be used immediately, some configuration is required for Restricted API keys.

The Restricted API key must allow the `rak_connected_account_read` permission (called “All Connect resources” in the Resource Types section of configuring a Restricted API key). The Connect Portal cannot save the key if it does not include this permission.


# Tableau
Source: https://docs.useparagon.com/resources/integrations/tableau

Connect to your users' Tableau accounts.

## Setup Guide

You can find your Tableau app credentials in your [Tableau Developer Account.](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)

You'll need the following information to set up your Tableau App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Tableau app to Paragon

Under **Integrations > Connected Integrations > Tableau > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Tableau App page.
* **Client Secret:** Found under Client Secret on your Tableau App page.
* **Client Secret Value:** Found under Value on your Tableau App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Leaving the Client ID and Client Secret blank will use Paragon development keys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Tableau%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Tableau

Once your users have connected their Tableau account, you can use the Paragon SDK to access the Tableau API on behalf of connected users.

See the Tableau [REST API documentation](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm) for their full API reference.

Any Tableau API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get all Projects
paragon.request("tableau, "/projects", {
  method: "GET"
});

// Get all Jobs
paragon.request("tableau", "/jobs", {
  method: "GET"
});
```

## Building Tableau workflows

Once your Tableau account is connected, you use the Tableau Request step to access any of Tableau's API endpoints without the authentication piece.

When creating or updating records in Tableau, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# TikTok Ads
Source: https://docs.useparagon.com/resources/integrations/tiktokads

Connect to your users' TikTok Ads accounts.

## Setup Guide

You can find your TikTok Ads app credentials in your [TikTok for Business Developers](https://ads.tiktok.com/marketing_api/homepage) portal.

You'll need the following information to set up your TikTok Ads App with Paragon Connect:

* App ID
* App Secret

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your TikTok Ads app to Paragon

Under **Integrations > Connected Integrations > TikTok Ads > Settings**, fill out your credentials from your developer app in their respective sections:

* **App ID:** Found under App ID on your TikTok Ads App page.
* **App Secret:** Found under App Secret on your TikTok Ads App page.

<Info>
  Leaving the App ID and App Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20TikTok%20Ads%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to TikTok Ads

Once your users have connected their TikTok Ads account, you can use the Paragon SDK to access the TikTok Ads API on behalf of connected users.

See the TikTok Ads [REST API documentation](https://ads.tiktok.com/marketing_api/docs) for their full API reference.

Any TikTok Ads API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Campaigns
paragon.request("tiktokads", "v1.3/campaign/get/", {
  method: "GET"
});

// Create a Campaign
paragon.request("tiktokads", "v1.3/campaign/create/", {
  method: "POST",
  body: {
    "advertiser_id": "ADVERTISER_ID",
    "budget_mode": "BUDGET_MODE",
    "objective_type": "OBJECTIVE_TYPE",
    "budget": "BUDGET",
    "campaign_name": "CAMPAIGN_NAME"
  }
});
  
```

## Building TikTok Ads workflows

Once your TikTok Ads account is connected, you use the TikTok Ads Request step to access any of TikTok Ads's API endpoints without the authentication piece.

When creating or updating records in TikTok Ads, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Todoist
Source: https://docs.useparagon.com/resources/integrations/todoist

Connect to your users' Todoist accounts.

## Setup Guide

You can find your Todoist app credentials in your [Todoist Developer Account](https://developer.todoist.com/guides/#oauth).

You'll need the following information to set up your Todoist App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add your Todoist app to Paragon

Under **Integrations > Connected Integrations > Todoist > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Todoist App page.
* **Client Secret:** Found under Client Secret on your Todoist App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Todoist%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Todoist

Once your users have connected their Todoist account, you can use the Paragon SDK to access the Todoist API on behalf of connected users.

See the Todoist [REST API documentation](https://developer.todoist.com/rest/v2/#overview) for their full API reference.

Any Todoist API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Create a Project
await paragon.request("todoist", "/rest/v2/projects", {
  method: "POST",
  body: {
    "name": "My Project",
    "parent_id":"Parent project ID"
  }
});

// Get a Project
await paragon.request("todoist", "/sync/v9/projects/get?project_id=<project_id>", {
  method: "GET"
});

// Get a Task
await paragon.request("todoist", "/rest/v2/tasks/<task_id>", {
  method: "GET"
});
  
```

## Building Todoist workflows

Once your Todoist account is connected, you can add steps to perform the following actions:

* Create Project
* Update Project
* Get Project by ID
* Get All Projects
* Delete Project
* Create Task
* Update Task
* Get Task by ID
* Search Tasks
* Close Task
* Delete Task

You can also use the Todoist Request step to access any of Todoist's API endpoints without the authentication piece.

When creating or updating records in Todoist, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Trello
Source: https://docs.useparagon.com/resources/integrations/trello

Manage boards and cards in Trello

## Setup Guide

You'll need the following information to set up your Trello App with Paragon Connect:

* API Key
* API Secret
* Scopes Requested

### Generate a Trello API Key and API Secret

1. Log in to Trello. If you don't have an account, you can create one [here](https://trello.com/).

2. Access the [Power-Up Admin Portal](https://trello.com/power-ups/admin). If you haven't created a Power-Up yet, click on "New" to create one.

3. Within your Power-Up's settings, go to the **API Key** tab.

4. Your **API Secret** will be displayed in the same section.

### Add your Trello app to Paragon

1. Select Trello from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Trello >** **Settings**, fill out your credentials in their respective sections:

* **API Key:** Found under API Key > API Key.
* **API Secret:** Found under API Key > API Secret.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the API Key and API Secret blank will use Paragon development keys.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Trello%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Trello

Once your users have connected their Trello account, you can use the Paragon SDK to access the Trello API on behalf of connected users.

See the Trello [REST API documentation](https://developer.atlassian.com/cloud/trello/rest/) for their full API reference.

Any Trello API endpoints can be accessed with the Paragon SDK as shown in this example

```js JavaScript
// You can find your project ID in the Overview tab of any Integration.

// Authenticate the user
paragon.authenticate(<ProjectID>, <Paragon User Token>);

// Get a board
await paragon.request("trello", "/boards/<Board ID>", {
  method: “GET”,
});

// Create a new card
await paragon.request("trello", "/cards",
  method: “POST”,
  body: {
    idList: “<List ID>”,
    name: “New task”,
    desc: “Integrate all productivity apps using Paragon”
  }
});
```

## Building Trello workflows

Once your Trello account is connected, you can add steps to perform the following actions:

* Search Cards
* Get Cards in Board
* Create Card
* Update Card
* Delete Card
* Get Lists in Board
* Search Boards

When using Trello, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Trello account. For example, you might want to trigger a workflow whenever Cards are updated to sync your users' Trello Cards to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Trello%20Triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Trello below:

* **Board Created**
* **Board Updated**
* **Card Created**
* **Card Updated**
* **New Comment**


# Typeform
Source: https://docs.useparagon.com/resources/integrations/typeform

Connect to your users' Typeform accounts.

## Setup Guide

You can find your Typeform app credentials in your [Typeform Developer Account.](https://www.typeform.com/developers/get-started/)

You'll need the following information to set up your Typeform App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Typeform app to Paragon

Under **Integrations > Connected Integrations > Typeform > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Typeform App page.
* **Client Secret:** Found under Client Secret on your Typeform App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Typeform%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Typeform

Once your users have connected their Typeform account, you can use the Paragon SDK to access the Typeform API on behalf of connected users.

See the Typeform [REST API documentation](https://www.typeform.com/developers/get-started/) for their full API reference.

Any Typeform API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Retrieve all Forms
paragon.request("typeform", "forms", {
  method: "GET"
});

// Retrieve Responses for a specific form
paragon.request("typeform", "/forms/<form_id>/responses", {
  method: "GET"
});
  
```

## Building Typeform workflows

Once your Typeform account is connected, you use the Typeform Request step to access any of Typeform's API endpoints without the authentication piece.

When creating or updating records in Typeform, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Unleashed
Source: https://docs.useparagon.com/resources/integrations/unleashed

Connect to your users' Unleashed accounts.

## Setup Guide

You can find your Unleashed app credentials in your [Unleashed Account.](https://www.unleashedsoftware.com)

You'll need the following information to set up your Unleashed Account with Paragon Connect:

* API ID
* API Key

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Unleashed app to Paragon

Under **Integrations > Connected Integrations > Unleashed > Settings**, fill out your credentials from your account in their respective sections:

* **API ID:** Found under Integration > Unleashed API Access on your Unleashed App page.
* **API Key** Found under Integration > Unleashed API Access on your Unleashed App page.

## Connecting to Unleashed

Once your users have connected their Unleashed account, you can use the Paragon SDK to access the Unleashed API on behalf of connected users.

See the Unleashed [REST API documentation](https://apidocs.unleashedsoftware.com/) for their full API reference.

Any Unleashed API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get Customers
paragon.request('unleashed', '/Customers', {
  method: 'GET'
});

// Get Products
paragon.request('unleashed', '/Products', {
  method: 'GET'
});
  
```

## Building Unleashed workflows

Once your Unleashed account is connected, you use the Unleashed Request step to access any of Unleashed's API endpoints without the authentication piece.

When creating or updating records in Unleashed, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Vanta
Source: https://docs.useparagon.com/resources/integrations/vanta

Connect to your users' Vanta accounts.

## Setup Guide

You can find your Vanta app credentials in your [Vanta Developer Account.](https://developer.vanta.com/reference)

You'll need the following information to set up your Vanta App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Vanta app to Paragon

Under **Integrations > Connected Integrations > Vanta > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Vanta App page.
* **Client Secret:** Found under Client Secret on your Vanta App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Vanta%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Vanta

Once your users have connected their Vanta account, you can use the Paragon SDK to access the Vanta API on behalf of connected users.

See the Vanta [REST API documentation](https://developer.vanta.com/reference) for their full API reference.

Any Vanta API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// List SecurityTask
paragon.request('vanta', 'v1/resources/security_task/list_all?resourceId=<id>', {
  method: 'GET'
});
  
```

## Building Vanta workflows

Once your Vanta account is connected, you use the Vanta Request step to access any of Vanta's API endpoints without the authentication piece.

When creating or updating records in Vanta, you can reference data from previous steps by typing `{{` to invoke the variable menu.e


# Vimeo
Source: https://docs.useparagon.com/resources/integrations/vimeo

Connect to your users' Vimeo accounts.

## Setup Guide

You can find your Vimeo app credentials in your [Vimeo Developer Account.](https://developer.vimeo.com/api)

You'll need the following information to set up your Vimeo App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Vimeo app to Paragon

Under **Integrations > Connected Integrations > Vimeo > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your Vimeo App page.
* **Client Secret:** Found under Client Secret on your Vimeo App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Vimeo%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Vimeo

Once your users have connected their Vimeo account, you can use the Paragon SDK to access the Vimeo API on behalf of connected users.

See the Vimeo [REST API documentation](https://developer.vimeo.com/api) for their full API reference.

Any Vimeo API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Search for Videos
paragon.request("vimeo", "/videos?query=[Search Query]", {
  method: "GET"
});
// Edit a Video's Metadata
paragon.request("vimeo", "/videos/[Video ID]", {
  method: "PATCH",
  body: {
    "name": "New video name"
  }
});
// Get Video Subtitles
paragon.request("vimeo", "/videos/[Video ID]/texttracks", {
  method: "GET"
});
  
```

## Building Vimeo workflows

Once your Vimeo account is connected, you use the Vimeo Request step to access any of Vimeo's API endpoints without the authentication piece.

When creating or updating records in Vimeo, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# WhatsApp
Source: https://docs.useparagon.com/resources/integrations/whatsapp

Connect to your users' WhatsApp accounts.

## Setup Guide

You can find your WhatsApp app credentials in your [WhatsApp Developer Account.](https://developers.facebook.com/docs/whatsapp/cloud-api/reference)

You'll need the following information to set up your WhatsApp App with Paragon Connect:

* [Permanent Access Token](https://developers.facebook.com/blog/post/2022/12/05/auth-tokens)
* Phone Number ID

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to WhatsApp

Once your users have connected their WhatsApp account, you can use the Paragon SDK to access the WhatsApp API on behalf of connected users.

See the WhatsApp [REST API documentation](https://developers.facebook.com/docs/whatsapp/cloud-api/reference) for their full API reference.

Any WhatsApp API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Send a Message
await paragon.request('whatsapp', '/messages', {
  method: 'POST',
  body: {
    "messaging_product": "whatsapp",
    "recipient_type": "individual",
    "to": "PHONE_NUMBER",
    "type": "text",
    "text": {
      "preview_url": false,
      "body": "MESSAGE_CONTENT"
    }
  }
});

// Register a Phone
await paragon.request('whatsapp', '/register', {
  method: 'POST',
  body: {
    "messaging_product": "whatsapp",
    "pin": "6_DIGIT_PIN"
  }
});
  
```

## Building WhatsApp workflows

Once your WhatsApp account is connected, you use the WhatsApp Request step to access any of WhatsApp's API endpoints without the authentication piece.

When creating or updating records in WhatsApp, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# WooCommerce
Source: https://docs.useparagon.com/resources/integrations/woocommerce

Connect to your users' WooCommerce accounts.

## Setup Guide

You can find your WooCommerce app credentials in your [WooCommerce Developer Account.](https://woocommerce.github.io/woocommerce-rest-api-docs/#)

## Connecting to WooCommerce

Once your users have connected their WooCommerce account, you can use the Paragon SDK to access the WooCommerce API on behalf of connected users.

See the WooCommerce [REST API documentation](https://woocommerce.github.io/woocommerce-rest-api-docs/#) for their full API reference.

Any WooCommerce API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Get all customers
paragon.request("woocommerce", "/customers", {
  method: "GET"
});

// Get order by id
paragon.request("woocommerce", "/orders/<id>", {
  method: "GET"
});

// Create a product
paragon.request("woocommerce", "/products", {
  method: "POST",
  body: {
    name: "Premium Quality",
    type: "simple",
    regular_price: "21.99",
    description: "This is our Premium Quality offering",
  }
});
  
```

## Building WooCommerce workflows

Once your WooCommerce account is connected, you can add steps to perform the following actions:

* Create Customer
* Get Customer by ID
* Search Customers
* Update Customer
* Delete Customer
* Create Order
* Get Order by ID
* Search Orders
* Update Order
* Delete Order
* Create Product
* Get Product by ID
* Search Products
* Update Product
* Delete Product

You can also use the WooCommerce Request step to access any of WooCommerce's API endpoints without the authentication piece.

When creating or updating records in WooCommerce, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Wordpress.com
Source: https://docs.useparagon.com/resources/integrations/wordpress

Connect to your users' Wordpress accounts.

## Setup Guide

You can find your WordPress.com app credentials in your [WordPress.com Developer Account.](https://developer.wordpress.com/docs/api/)

You'll need the following information to set up your WordPress.com App with Paragon Connect:

* Client ID
* Client Secret

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your WordPress.com app to Paragon

Under **Integrations > Connected Integrations > Wordpress.com > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found under Client ID on your WordPress.com App page.
* **Client Secret:** Found under Client Secret on your WordPress.com App page.
* **Permissions:** Specify any additional scopes required by your integration here. [Learn more](https://developer.wordpress.com/docs/oauth2/) about the scopes supported by WordPress.

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Wordpress%20app%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to WordPress.com

Once your users have connected their WordPress.com account, you can use the Paragon SDK to access the WordPress.com API on behalf of connected users.

See the WordPress.com [REST API documentation](https://developer.wordpress.com/docs/api/) for their full API reference.

Any WordPress.com API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Retrieve the connected user's WP sites
paragon.request("wordpress.com", "v1.1/me/sites", {
  method: "GET"
});

// Retrieve the number of likes on a certain WP post
paragon.request("wordpress.com", "v1.1/sites/<site_ID>/posts/<post_ID>/likes", {
  method: "GET"
});

// Create
paragon.request("wordpress.com", "sites/<site_ID>/posts/new", {
  method: "POST",
  body: {
    title: "My Post",
    content: "This is my post",
    tags: "api_posts",
    categories: "API"
  }
});
  
```

## Building WordPress.com workflows

Once your WordPress.com account is connected, you use the WordPress.com Request step to access any of WordPress.com's API endpoints without the authentication piece.

When creating or updating records in WordPress.com, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Workable
Source: https://docs.useparagon.com/resources/integrations/workable

Connect to your users' Workable accounts.

## Setup Guide

You can find your Workable app credentials in your [Workable Developer Account.](https://workable.readme.io/reference/generate-an-access-token)

You'll need the following information to set up your Workable App with Paragon Connect:

* Account Subdomain
* API Access Token

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

## Connecting to Workable

Once your users have connected their Workable account, you can use the Paragon SDK to access the Workable API on behalf of connected users.

See the Workable [REST API documentation](https://workable.readme.io/reference/generate-an-access-token) for their full API reference.

Any Workable API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
// Retrieve the members data
await paragon.request("workable", "/members", {
  method: "GET",
});

// Create a candidate at the specified job
await paragon.request("workable", "/jobs/{shortcode}/candidates", {
  method: "POST",
  body: {
    "candidate": [
      {
        "first_name": "Hashirama",
        "email": "hashirama@senju.com",
        "last_name": "Senju"
      }
    ]
  }
});
  
```

## Building Workable workflows

Once your Workable account is connected, you use the Workable Request step to access any of Workable's API endpoints without the authentication piece.

When creating or updating records in Workable, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Workday
Source: https://docs.useparagon.com/resources/integrations/workday

Connect to your users' Workday accounts

## Setup Guide

You'll need the following information to set up your Workday App with Paragon Connect:

* Subdomain
* Username
* Password
* Tenant Name

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Add your Workday app to Paragon

Under **Integrations > Connected Integrations > Workday > Settings**, fill out your credentials from your developer app in their respective sections:

* **Subdomain:** Found in your account URL address: `https://[host_name].workday.com/`
* **Username:** The username for the account connected account.
* **Password:** The password for the connected account/
* **Tenant Name:** Found in your account URL address: `https://.workday.com/[Tenant Name]/d/home/html`.

## Connecting to Workday

Once your users have connected their Workday account, you can use the Paragon SDK to access the Workday API on behalf of connected users.

See the Workday [REST API documentation](https://community.workday.com/api) for their full API reference.

Any Workday API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);
            
await paragon.request("workday", "/Human_Resources/v40.1", { 
  method: "POST",
  body: `<soapenv:Body>
  <bsvc:Get_Workers_Request>
    <bsvc:Request_Criteria></bsvc:Request_Criteria>
    <bsvc:Response_Filter></bsvc:Response_Filter>
    <bsvc:Response_Group>
      <bsvc:Include_Reference>true</bsvc:Include_Reference>
    </bsvc:Response_Group>
  </bsvc:Get_Workers_Request>
</soapenv:Body>`
});
  
```

## Building Workday workflows

Once your Workday account is connected, you use the Workday Request step to access any of Workday's API endpoints without the authentication piece.

When creating or updating records in Workday, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Xero
Source: https://docs.useparagon.com/resources/integrations/xero

Connect to your users' Xero accounts.

## Setup Guide

You can find your Xero app credentials by visiting your [Xero Developer Portal](https://developer.xero.com/app/manage)

<Info>
  **Note:** You'll need to create a new Xero app if you don't already have one.
</Info>

You'll need the following information to set up your Xero App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Add the Redirect URL to your Xero app

Paragon provides a redirect URL to send information to your Xero app. To add the redirect URL to your Xero app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. Log in to your [Xero Developer Portal](https://developer.xero.com/app/manage).

3. Select your application from the developer portal.

4. Under **App details > OAuth 2.0 credentials**, press the `Add another URI` button.

5. Paste-in the redirect URL from Paragon. The redirect URL can be found in Step 1.

6. Press the `Save` button to save the Redirect URL.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20a%20redirect%20URL%20to%20Xero.png)
</Frame>

### Add your Xero app to Paragon

1. Select **Xero** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Xero > Settings**, fill out your credentials in their respective sections:

* **Client ID:**

  1. Log in to your [Xero Developer Portal](https://developer.xero.com/app/manage).

  2. Select your application.

  3. Navigate to **App details > OAuth 2.0 credentials**.

  4. Copy the **Client ID** from "**Client id**".

* **Client Secret:**

  1. Log in to your [Xero Developer Portal](https://developer.xero.com/app/manage).

  2. Select your application.

  3. Navigate to **App details > OAuth 2.0 credentials**.

  4. Press `Generate a secret`.

  5. Copy the **Client Secret** to use in Paragon.

* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

## Connecting to Xero

Once your users have connected their Xero account, you can use the Paragon SDK to access the Xero API on behalf of connected users.

See the Xero [REST API documentation](https://developer.xero.com/documentation/api/accounting/overview/) for their full API reference.

Any Xero API endpoints can be accessed with the Paragon SDK as shown in this example.

```js JavaScript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Query Payments
await paragon.request("xero", "payments", {
  method: "GET",
});
```

## Building Xero workflows

Once your Xero account is connected, you can add steps to perform the following actions:

* Get Accounts
* Get Contacts
* Create Customer
* Update Customer
* Get Invoices
* Create Invoice
* Update Invoice
* Send Invoice
* Get Payments
* Create Payments

When creating or updating customers and invoices in Xero, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Xero%20in%20Paragon.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Xero account. For example, you might want to trigger a workflow whenever new customers are created in Xero to sync your users' Xero customers to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Xero%20webhook%20triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Xero below:

* **New Account**
* **New Customer**
* **New Invoice**


# Zendesk
Source: https://docs.useparagon.com/resources/integrations/zendesk

Connect to your users' Zendesk accounts.

## Setup Guide

You can find your Zendesk app credentials by visiting your [Zendesk Developer App Console](https://www.zendesk.com/).

You'll need the following information to set up your Zendesk app with Paragon:

* Client ID
* Client Secret

### Add the Redirect URL to your Zendesk app

Paragon provides a redirect URL to send information to your Zendesk app. To add the redirect URL to your Zendesk app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your Zendesk dashboard, click the gear icon on the left.

3. Under **Channels > API > OAuth Clients**, click the "Add OAuth Client" button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Accessing%20Zendesk%20OAuth%20Clients.gif" alt="" />
</Frame>

4. Fill out your **Client Name** and **Description**.

5. Under "**Redirect URLs**", paste the Redirect URL from Paragon.

6. Set the "**Client Kind"** to **Confidential**

7. Press the **Save** button.

8. Scroll down to the bottom of the page to copy your **Secret**. We'll use this in the next step.

<Warning>
  Your OAuth app created with the steps above will *only* work in your own test Zendesk account sandbox until steps to [“globalize”](/resources/integrations/zendesk#publishing-your-zendesk-application) the app are followed. Refer to the [instructions](/resources/integrations/zendesk#publishing-your-zendesk-application) for enabling the *global* app.
</Warning>

### Add your Zendesk app to Paragon

1. Select Zendesk from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Zendesk > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/zendesk#add-the-redirect-url-to-your-zendesk-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

## Using the Paragon SDK for Zendesk

Once your users have connected their Zendesk account, you can use the Paragon SDK to access the Zendesk API on behalf of connected users.

See the Zendesk [REST API documentation](https://developer.zendesk.com/rest_api/docs/support/introduction) for their full API reference.

Any Zendesk API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// List tickets
await paragon.request("zendesk", "v2/tickets", {
    method: "GET",
});
```

## Building Zendesk workflows

Once your Zendesk account is connected, you can add steps to perform the following actions:

* Create Ticket
* Update Ticket
* Add Comment to Ticket
* Search Tickets
* Get Ticket by ID
* Get Users

When creating or updating tickets in Zendesk, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Zendesk account. For example, you might want to trigger a workflow whenever new tickets are created Zendesk to sync your users' Zendesk tickets to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Zendesk%20Webhook%20Triggers%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of Webhook Triggers for Zendesk below:

* **New Ticket**
* **Ticket Updated**

## Publishing your Zendesk Application

A *global* OAuth application registration is required with Zendesk in order to allow connections from Zendesk users outside of your Zendesk organization. Follow the steps provided by Zendesk's developer documentation for [publishing your Zendesk Application](https://developer.zendesk.com/documentation/marketplace/building-a-marketplace-app/set-up-a-global-oauth-client/).


# Zendesk Sell
Source: https://docs.useparagon.com/resources/integrations/zendesksell

Connect to your users' Zendesk Sell accounts.

## Setup Guide

You can find your Zendesk Sell app credentials by visiting your [Zendesk Developer App Console](https://developer.zendesk.com/documentation/).

You'll need the following information to set up your Zendesk Sell app with Paragon:

* Client ID
* Client Secret

### Add the Redirect URL to your Zendesk Sell app

Paragon provides a redirect URL to send information to your Zendesk Sell app. To add the redirect URL to your Zendesk Sell app:

1. Copy the link under "**Redirect URL"** in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your Zendesk dashboard, click the gear icon on the left.

3. Under **Channels > API > OAuth Clients**, click the "Add OAuth Client" button.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Accessing%20Zendesk%20OAuth%20Clients.gif)
</Frame>

4. Fill out your **Client Name** and **Description**.

5. Under "**Redirect URLs**", paste the Redirect URL from Paragon.

6. Press the **Save** button.

7. Scroll down to the bottom of the page to copy your **Secret**. We'll use this in the next step.

### Add your Zendesk Sell app to Paragon

1. Select Zendesk Sell from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations > Zendesk Sell > Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/zendesksell#add-the-redirect-url-to-your-zendesk-sell-app) in their respective sections:

* **Client ID:** Found at the end of Step 1.
* **Client Secret:** Found at the end of Step 1.

Press the blue "**Connect**" button to save your credentials.

<Info>
  **Note:** Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

## Connecting to Zendesk Sell

Once your users have connected their Zendesk account, you can use the Paragon SDK to access the Zendesk API on behalf of connected users.

See the Zendesk [REST API documentation](https://developer.zendesk.com/rest_api/docs/support/introduction) for their full API reference.

Any Zendesk API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Create a Contact
await paragon.request("zendesksell", "/contacts", {
    method: "POST",
    body: {
      "contact_id": 1,
      "name": "Mark Johnson",
      "first_name": "Mark",
      "last_name": "Johnson",
      "title": "CEO",
      "description": "I know him via Tom",
      "industry": "Design Services",
      "website": "http://www.designservice.com",
      "email": "mark@designservices.com",
      "phone": "508-778-6516",
      "mobile": "508-778-6516",
      "fax": "+44-208-1234567",
      "twitter": "mjohnson",
      "facebook": "mjohnson",
      "linkedin": "mjohnson",
      "skype": "mjohnson",
      "address": {
        "line1": "2726 Smith Street",
        "city": "Hyannis",
        "postal_code": "02601",
        "state": "MA",
        "country": "US"
      },
      "tags": [
        "contractor",
        "early-adopter"
      ],
      "custom_fields": {
        "referral_website": "http://www.example.com"
      }
    }
  }
});

// Create a Lead
await paragon.request("zendesksell", "/leads", {
    method: "POST",
    body: {
      "first_name": "Mark",
      "last_name": "Johnson",
      "organization_name": "Design Services Company",
      "source_id": 10,
      "title": "CEO",
      "description": "I know him via Tom",
      "industry": "Design Services",
      "website": "http://www.designservice.com",
      "email": "mark@designservices.com",
      "phone": "508-778-6516",
      "mobile": "508-778-6516",
      "fax": "+44-208-1234567",
      "twitter": "mjohnson",
      "facebook": "mjohnson",
      "linkedin": "mjohnson",
      "skype": "mjohnson",
      "address": {
        "line1": "2726 Smith Street",
        "city": "Hyannis",
        "postal_code": "02601",
        "state": "MA",
        "country": "US"
      },
      "tags": [
        "important"
      ],
      "custom_fields": {
        "known_via": "tom"
      }
    }
  });

// Get all Deals
await paragon.request("zendesksell", "/deals", {
   method: "GET"
})
```

## Building Zendesk Sell workflows

Once your Zendesk Sell account is connected, you can add steps to perform the following actions:

* Create Record
* Update Record
* Get Record by ID
* Search Records
* Delete Records

You can also use the Zendesk Sell Request step to access any of Zendesk Sell's API endpoints without the authentication piece.

When creating or updating records in Zendesk Sell, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Zoho CRM
Source: https://docs.useparagon.com/resources/integrations/zohocrm

Connect to your users' Zoho CRM accounts.

## Setup Guide

You can find your Zoho CRM app credentials in your [Zoho CRM Developer Account](https://accounts.zoho.com/developerconsole).

You'll need the following information to set up your Zoho CRM App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Creating a Zoho CRM app

### Add the Redirect URL to your Zoho CRM app

Paragon provides a redirect URL to send information to your Zoho CRM app. To add the redirect URL to your Zoho CRM app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

1. Visit the [Zoho API Console](https://api-console.zoho.com/).

2. Sign in with your Zoho CRM Developer Account.

3. Click "**Add Client**" in the top right:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202022-11-03%20at%209.10.23%20PM.png" alt="" />
</Frame>

4. Select "**Server-based Applications**" as the Client Type:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202022-11-03%20at%209.11.18%20PM.png" alt="" />
</Frame>

5. Add your website as the Homepage URL.

6. Paste-in the Redirect URL Paragon provides as an **Authorized Redirect URI**.

Zoho CRM provides you with the **Client ID** and **Client Secret** needed for the next steps after adding the redirect URL to your app.

### Add your Zoho CRM app to Paragon

Under **Integrations > Connected Integrations >** **Zoho CRM** **>** **Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found at the end of [Step 1](/resources/integrations/zohocrm#add-the-redirect-url-to-your-zoho-crm-app) on your Zoho CRM App page.
* **Client Secret:** Found at the end of [Step 1](/resources/integrations/zohocrm#add-the-redirect-url-to-your-zoho-crm-app) on your Zoho CRM App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

Leaving the Client ID and Client Secret blank will use Paragon development keys.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20to%20your%20Zoho%20CRM%20app%20%20to%20Paragon%20Connect.png" alt="" />
</Frame>

## Connecting to Zoho CRM

Once your users have connected their Zoho CRM account, you can use the Paragon SDK to access the Zoho CRM API on behalf of connected users.

See the Zoho CRM [REST API documentation](https://www.zoho.com/crm/developer/docs/api/v3/modules-api.html) for their full API reference.

Any Zoho CRM API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Retrieve the user's data
await paragon.request("zohocrm", "users", {
  method: "GET",
});
            
// Add a user to your organization
await paragon.request("zohocrm", "users", {
  method: "POST",
  body: {
    "users": [
      {
        "role": "554023000000015969",
        "first_name": "Patricia",
        "email": "Patricia@abcl.com",
        "profile": "554023000000015975",
        "last_name": "Boyle"
      }
    ]
  }
});
```

## Building Zoho CRM workflows

Once your Zoho CRM account is connected, you can add steps to perform the following actions:

* Create Record
* Update Record
* Get Record by ID
* Search Records
* Delete Record
* Search Records by COQL Query

When creating or updating records in Zoho CRM, you can reference data from previous steps by typing `{{` to invoke the variable menu.

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Zoho CRM account. For example, you might want to trigger a workflow whenever new Accounts are created in Zoho CRM to sync your users' Zoho CRM Accounts to your application in real-time.

You can find the full list of Webhook Triggers for Zoho CRM below:

* **New Record**
* **Record Updated**


# Zoho People
Source: https://docs.useparagon.com/resources/integrations/zohopeople

Connect to your users' Zoho People accounts.

## Setup Guide

You can find your Zoho People app credentials in your [Zoho People Developer Account](https://api-console.zoho.com/).

You'll need the following information to set up your Zoho People App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

<Info>
  This is an **API-only** integration - workflow actions for this integration are still in development. You can still connect user accounts, build workflows, and access the API for this integration.
</Info>

### Creating a Zoho People app

To get started, you'll need to create an app in the [Zoho API Console](https://api-console.zoho.com/).

1. Sign in with your Zoho People Developer Account.

2. Click "**Add Client**" in the top right:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202022-11-03%20at%209.10.23%20PM.png" alt="" />
</Frame>

3. Select "**Server-based Applications**" as the Client Type:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202022-11-03%20at%209.11.18%20PM.png" alt="" />
</Frame>

4. Add your website as the Homepage URL.

5. Add [https://passport.useparagon.com/oauth](https://passport.useparagon.com/oauth) as an **Authorized Redirect URI**.

### Add the Redirect URL to your Zoho People app

Paragon provides a redirect URL to send information to your Zoho CRM app. To add the redirect URL to your Zoho PeoplePeople app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Zoho People Developer Account](https://api-console.zoho.com/), select your application.

3. Under **Authorized Redirect URIs**, paste-in the Paragon Connect redirect URL found in Step 1.

4. Copy the Client ID and Client Secret provided by Zoho CRM.

### Add your Zoho People app to Paragon

Under **Integrations > Connected Integrations > Zoho People > Settings**, fill out your credentials from your developer app in their respective sections:

* **Client ID:** Found at the end of [Step 1](/resources/integrations/zohopeople#add-the-redirect-url-to-your-zoho-people-app) on your Zoho People App page.
* **Client Secret:** Found at the end of [Step 1](/resources/integrations/zohopeople#add-the-redirect-url-to-your-zoho-people-app) on your Zoho People App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com)

<Info>
  Leaving the Client ID and Client Secret blank will use Paragon development keys.
</Info>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Zoho%20People%20app%20to%20Paragon%20Connect.png.png" alt="" />
</Frame>

## Connecting to Zoho People

Once your users have connected their Zoho People account, you can use the Paragon SDK to access the Zoho People API on behalf of connected users.

See the Zoho People [REST API documentation](https://www.zoho.com/crm/developer/docs/api/v3/modules-api.html) for their full API reference.

Any Zoho People API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// List of view details available in all forms
await paragon.request('zohopeople', 'views', {
    method: 'GET'
});

// List of files categories
await paragon.request('zohopeople', 'files/getCategories', {
    method: 'GET'
});
            
// List of field components available in a form with ID
await paragon.request('zohopeople', 'forms/<formLinkName>/components', {
    method: 'GET'
});
```

## Building Zoho People workflows

Once your Zoho People account is connected, you use the Zoho People Request step to access any of Zoho People's API endpoints without the authentication piece.

When creating or updating records in Zoho People, you can reference data from previous steps by typing `{{` to invoke the variable menu.


# Zoom
Source: https://docs.useparagon.com/resources/integrations/zoom

Connect to your users' Zoom accounts.

## Setup Guide

You can find your Zoom application credentials by visiting your [Zoom developer dashboard](https://marketplace.zoom.us/user/build).

You'll need the following information to set up your Zoom App with Paragon Connect:

* Client ID
* Client Secret
* Scopes Requested

### Prerequisites

* Zoom Developer Account. You can create one [here](https://developers.zoom.us/).
* Zoom OAuth application. Learn more about creating a Zoom OAuth application [here](https://marketplace.zoom.us/docs/guides/build/oauth-app).

### Add the Redirect URL to your Zoom app

Paragon provides a redirect URL to send information to your app. To add the redirect URL to your Zoom app:

1. Copy the link under "**Redirect URL**" in your integration settings in Paragon. The Redirect URL is:

```
https://passport.useparagon.com/oauth
```

2. In your [Zoom developer dashboard](https://marketplace.zoom.us/user/build), select your application.

3. Navigate to **App Credentials > Redirect URL for OAuth**, then paste-in Paragon Connect's redirect URL found in [Step 1](/resources/integrations/zoom#add-the-redirect-url-to-your-zoom-app).

4. Under **App Credentials > OAuth allow list > Add Whitelist URL**, paste-in Paragon Connect's redirect URL found in [Step 1](/resources/integrations/zoom#add-the-redirect-url-to-your-zoom-app).

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20the%20Redirect%20URL%20to%20your%20Zoom%20app.png)
</Frame>

### Add your Zoom app to Paragon

1. Select **Zoom** from the **Integrations Catalog**.

2. Under **Integrations > Connected Integrations >** **Zoom** **>** **Settings**, fill out your credentials from the end of [Step 1](/resources/integrations/zoom#add-the-redirect-url-to-your-zoom-app) in their respective sections:

* **Client ID:** Found under App Credentials > Client ID on your Zoom App page.
* **Client Secret:** Found under App Credentials > Client secret on your Zoom App page.
* **Permissions:** Select the scopes you've requested for your application. For a list of recommended scopes, please view this integration within your Paragon dashboard. [View dashboard.](https://dashboard.useparagon.com) You must add `users:read` in your Zoom and Paragon dashboard.

Press the blue "**Save Changes**" button to save your credentials.

<Info>
  **Note:** You should only indicate the scopes you have requested in your Zoom application registration to Paragon. They should match exactly.
</Info>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Connecting%20your%20Zoom%20app%20to%20Paragon%20Connect.png)
</Frame>

## Connecting to Zoom

Once your users have connected their Zoom account, you can use the Paragon SDK to access the Zoom API on behalf of connected users.

See the Zoom [REST API documentation](https://marketplace.zoom.us/docs/api-reference/zoom-api) for their full API reference.

Any Zoom API endpoints can be accessed with the Paragon SDK as shown in this example.

```javascript
// You can find your project ID in the Overview tab of any Integration

// Authenticate the user
paragon.authenticate(<ProjectId>, <UserToken>);

// Create a Meeting
paragon.request("zoom", "users/me/meetings", {
    method: "POST",
    body: { "topic": "Product Demo Webinar" }
});


//Get Meetings
paragon.request("zoom", "users/me/meetings", {
    method: "GET",
});
```

## Building Zoom workflows

Once your Zoom account is connected, you can add steps to perform the following actions:

* Create Meeting
* Update Meeting
* Get Meeting
* Get Meeting by Meeting ID
* Delete Meeting
* Add Meeting Registrant
* Get Meeting Registrants
* Delete Meeting Registrant

When creating or updating meetings in Zoom, you can reference data from previous steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Generating%20a%20Zoom%20meeting%20from%20Paragon.png)
</Frame>

## Using Webhook Triggers

Webhook triggers can be used to run workflows based on events in your users' Zoom account. Paragon provides a webhook URL to listen for updates from Zoom to send information to your app. To add the webhook URL to your Zoom app registration and complete its verification, perform the following:

2. Start in your [Zoom developer dashboard](https://marketplace.zoom.us/user/build), and select your application.

3. Navigate to **Feature > Add Feature** and turn on **Event subscriptions**.

4. Copy the **Secret Token** value provided by Zoom.

5. Navigate back to your integration settings in Paragon. Add the **Secret Token** value to the **Webhook Client Secret**.

6. Copy the link under "**Webhook URL**" in your integration settings in Paragon. The webhook URL takes the form:

```
https://hermes.useparagon.com/webhook/triggers/connect/zoom/<Integration_ID>
```

4. Return to Zoom's **Event subscriptions** page and press the `+ Add new event subscription` button.

5. Under "**Event notification endpoint URL**", paste-in the webhook URL from your integration's `Settings` in Paragon Connect.

6. Choose the event types that you look to support in **Event types**. These are listed below.

7. Validate the URL with Zoom by pressing the "Validate" button. There is no need to change the Authentication Header option.

8. Press `Save` to save your changes once verified.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-02-22%20at%2012.35.54@2x.png" alt="" />
</Frame>

Once you've added the Event Notification Endpoint URL to your Zoom app, you can access the following triggers in Paragon:

* New Meeting
* Meeting Updated
* Meeting Ended
* New Meeting Registrant
* Meeting Participant Joined
* Meeting Participant Left
* New Recording
* Complete Recording
* Recording Transcript Completed


# JavaScript Libraries
Source: https://docs.useparagon.com/resources/javascript-libraries



You can find the full list of supported npm modules below. If you don't see the module that you're looking for, [let us know](mailto:team@useparagon.com) and can usually add it for you.

<Card title="Using Functions" href="/workflows/functions" horizontal />

* [archiver](https://www.npmjs.com/package/archiver)
* [aws-sdk](https://www.npmjs.com/package/aws-sdk) (`libraries["aws-sdk"]`)
* [bluebird](https://www.npmjs.com/package/bluebird)
* [Buffer](https://nodejs.org/api/buffer.html#buffer_buffer/)
* [cheerio](https://www.npmjs.com/package/cheerio)
* [cloudflare](https://www.npmjs.com/package/cloudflare)
* [crypto](https://nodejs.org/api/crypto.html#crypto_crypto)
* [cryptr](https://www.npmjs.com/package/cryptr)
* [csv](https://www.npmjs.com/package/csv)
* [csv/lib/sync](https://www.npmjs.com/package/csv) (`libraries["csv/lib/sync"]`)
* [date-fns](https://www.npmjs.com/package/date-fns) (`libraries.dateFns`)
* [fast-xml-parser](https://www.npmjs.com/package/fast-xml-parser) (`libraries["fast-xml-parser"]`)
* [fetch](https://www.npmjs.com/package/node-fetch)
* [firebase](https://www.npmjs.com/package/firebase)
* [firebaseAdmin](https://www.npmjs.com/package/firebase-admin)
* [FormData](https://www.npmjs.com/package/form-data)
* [fuse.js](https://www.npmjs.com/package/fuse.js)
* [https](https://nodejs.org/api/https.html#https_https)
* [ioredis](https://www.npmjs.com/package/ioredis)
* [jsforce](https://www.npmjs.com/package/jsforce)
* [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)
* [lodash](https://www.npmjs.com/package/lodash)
* [lodash/fp](https://www.npmjs.com/package/lodash) (`libraries["lodash/fp"]`)
* [luxon](https://www.npmjs.com/package/luxon)
* [libphonenumber-js](https://www.npmjs.com/package/libphonenumber-js) (`libraries.libphonenumber`)
* [mailgun.js](https://www.npmjs.com/package/mailgun.js) (`libraries.Mailgun`)
* [mercury](https://www.npmjs.com/package/@postlight/mercury-parser)
* [mime](https://www.npmjs.com/package/mime/v/3.0.0)
* [moment](https://www.npmjs.com/package/moment)
* [mongodb](https://www.npmjs.com/package/mongodb)
* [mssql](https://www.npmjs.com/package/mssql)
* [mysql2](https://www.npmjs.com/package/mysql2)
* [neo4j-driver](https://www.npmjs.com/package/neo4j-driver) (`libraries['neo4j-driver']`)
* [node-fetch](https://www.npmjs.com/package/node-fetch) (`libraries.fetch`)
* [numberToWords](https://www.npmjs.com/package/number-to-words)
* [oauth](https://www.npmjs.com/package/oauth)
* [pdf](https://www.npmjs.com/package/html-pdf)
* [pg](https://www.npmjs.com/package/pg)
* [ramda](https://www.npmjs.com/package/ramda)
* [redis](https://www.npmjs.com/package/redis)
* [s3](https://www.npmjs.com/package/s3)
* [segment](https://www.npmjs.com/package/analytics-node)
* [sendgrid](https://www.npmjs.com/package/@sendgrid/mail)
* [sendpulse](https://www.npmjs.com/package/sendpulse-api)
* [sequelize](https://www.npmjs.com/package/sequelize)
* [slack](https://www.npmjs.com/package/slack)
* [snowflake-sdk](https://www.npmjs.com/package/snowflake-sdk)
* [ssh2-sftp-client](https://www.npmjs.com/package/ssh2-sftp-client)
* [throttle](https://www.npmjs.com/package/promise-parallel-throttle)
* [twilio](https://www.npmjs.com/package/twilio)
* [underscore](https://www.npmjs.com/package/underscore)
* [underscore.string](https://www.npmjs.com/package/underscore) (`libraries['underscore.string']`)
* [unzipper](https://www.npmjs.com/package/unzipper)
* [url](https://www.npmjs.com/package/url)
* [uuid](https://www.npmjs.com/package/uuid)
* [web3](https://www.npmjs.com/package/web3)


# Paragon User Token Generator
Source: https://docs.useparagon.com/resources/user-token





# GDPR
Source: https://docs.useparagon.com/security/gdpr

GDPR at Paragon

Privacy and security are core to Paragon's approach to product development and business, and we continuously evaluate all our practices in an effort to safeguard your information as effectively as possible. In that vein, we're glad to comply with the General Data Protection Regulation ("GDPR") and to help Paragon customers comply with the GDPR.

### Data processing agreement

Paragon offers Data Processing Agreements (DPAs) to users upon request. This DPA includes standard contractual clauses (“Model Clauses”) that are the mechanism for GDPR-compliant data transfer. To request a DPA, please email [privacy@useparagon.com](mailto:privacy@useparagon.com) from the email address associated with your Paragon account or visit our [Trust Center](https://security.useparagon.com/).

### Data Protection Officer

We have appointed a Data Protection Officer. For more information, contact [privacy@useparagon.com](mailto:privacy@useparagon.com).

### Privacy Policy

We've added additional language to our privacy policy in order to reinforce our commitment to privacy, security, and confidentiality. The privacy policy can be found at [https://www.useparagon.com/privacy](https://www.useparagon.com/privacy).

### Questions?

If you have further questions, please reach out to [privacy@useparagon.com](mailto:privacy@useparagon.com).


# Security
Source: https://docs.useparagon.com/security/security

Paragon's Security and Change Management Procedures.

## Overview

This document outlines some of [Paragon's](https://www.useparagon.com/) security practices and architecture.

### Contact

* **Chief Technology Officer:**  Ishmael Samuel ([ishmael@useparagon.com](mailto:ishmael@useparagon.com))
* **Data Protection Officer:**  Ishmael Samuel ([ishmael@useparagon.com](mailto:ishmael@useparagon.com))
* **Support:**  [support@useparagon.com](mailto:support@useparagon.com)
* **Privacy:**  [privacy@useparagon.com](mailto:privacy@useparagon.com)

### Other Resources

* [Privacy Policy](https://www.useparagon.com/privacy)
* [Terms of Service](https://www.useparagon.com/terms-of-service)

## Policy Compliance

### Data Protection Agreement

We have a Data Protection Agreement (DPA) that can be requested and signed as a formal agreement between us and customers that require it. It outlines our obligations and procedures. It is reviewed once a quarter and updated as needed.

Our appointed Data Protection Officer is responsible for reviewing that it is up to date and its procedures are followed. Any customer can request a copy of the document by emailing [privacy@useparagon.com](mailto:privacy@useparagon.com). This is outlined in [our GDPR documentation](/security/gdpr).

### Policy Coverage

* Third-Party Connectivity
* Data Privacy
* Access Control
* Encryption Standards

## Security

### Physical and Environment Security

We do not manage any physical servers or data centers. Our data is stored in AWS Cloud. Logs are maintained for access to data and stored in AWS CloudWatch. AWS was selected for our cloud provider due to their large foothold in the market. All incoming traffic is logged.

### Access to Data

We have separate AWS accounts for our sandbox and live environments. The sandbox environment is available to all of our engineers (with authentication) while the live environment requires separate logins and additionally requires connecting from a whitelisted IP.

Any engineer needing to connect to the live environment must request access with a reason and their IP address to be temporarily allowed into the live environment.

### Data Storage & Encryption

Our customers' security is top priority. Third-party credentials for integrations are stored in a distributed vault with encryption keys and encrypted values stored separately. Flow logs are stored independently and secure information is redacted. Emails and password are never logged.

### Security and Staff Training

When onboarding new employees, we follow the principle of least privileged access and manually provision only the necessary logins with the least amount of access possible to conduct their job. We explain what they have access to, why, and the valid use cases to use each service.

We run through our security tools (password vaults, network security, etc) and discuss best practices for information security (storing, retrieving, and sharing secure information, 2FA, etc).

Once familiar with our tooling and procedures, they're brought up to speed on our incident response plan and their role in it in a separate session.

## Change Management

Changes to our environments are done via an automated continuous delivery system. Every change runs through a suite of thousands of unit, integration, and end-to-end tests. We do manual quality assurance, and our CTO code reviews and manually approves each outgoing deployment that goes to the production environment.

Our infrastructure is represented in code and updated through a version-controlled continuous deployment system.

All changes are logged with the author, reviewer, and date-time.

## Incident Management

### Incident Response

We have a rotating support engineer to handle or delegate issues to the necessary parties. Our CTO is responsible for overseeing disaster recovery, and all incidents are documented in our ticket management system with large incidents documented via a formal Post Mortem.

### Security Incidents

When a security incident is detected, we immediately notify the entire engineering and management team and prioritize it as a Priority 0 (meaning once assigned, a responsible engineer drops whatever they're doing and immediately begins work on resolution).

Once the engineering team is notified, an engineer claims it or is assigned it by management and becomes the responsible engineer. The response time to date from detection to assignment for all P0s to date has been \< 5 minutes.

The first step the responsible engineer takes is to determine the cause of the issue, a preliminary scope of impacted services and users, and the threat level. If one or more users are actively unable to use the service or at risk of secure information being leaked, then work continues and any other necessary parties are notified to help resolve the issue if needed.

Once the preliminary scope and severity has been assessed, a plan for containment and resolution is proposed, shared with the engineering team for any asynchronous feedback and work begins immediately. Our continuous integration & deployment system allows the responsible engineer to build, test and deploy their changes to test environments, and the CTO manually code reviews and approves all changes before they're sent to our live servers.

After resolution, a more thorough assessment of impacted services and users is conducted and a Post Mortem is written with a brief overview, the cause of the issue, impacted services and users, duration of the event, how we resolved it, and steps being taken to prevent the issue from happening again.

If one or more users are impacted by downtime or a breach, the Post Mortem is made public and sent to all parties affected within 1 business day (usually same day). All business and enterprise users share a Slack channel with us, so they're usually notified at the start of an event and updated throughout the process. Naturally, no enterprise users have had a security breach to date by nature of running Paragon in their own network.

## Whitelisting IPs

If needed, you can whitelist the following Paragon IP addresses to ensure requests to your platform are only being made from Paragon.

* `18.205.92.162`
* `18.215.215.164`
* `34.225.59.94`
* `44.210.155.28`
* `52.45.12.206`
* `54.235.127.238`


# Service Level Agreement
Source: https://docs.useparagon.com/security/sla



## Overview

Paragon provides a 99.9% uptime commitment for customers on any paid plan.

## Downtime

**Downtime** is the overall number of minutes Paragon is unavailable during a fiscal quarter (three month periods). Paragon calculates unavailability using server monitoring software to measure the server side error rate, ping test results, web server tests.

Downtime excludes the following:

* Slowness or other performance issues with individual features (task history, replay, workflow editing).
* Issues that are related to external integrations or third parties.
* Any products or features identified as pilot, alpha, beta, or similar.
* External network or equipment problems outside of our reasonable control, such as DNS issues or cloud provider downtime.
* Scheduled downtime for maintenance.

## Uptime Commitment

**Uptime** is the percentage of total minutes Paragon was available during a fiscal quarter.

**(total minutes in quarter - Downtime) / total minutes in quarter > 99.9%**

#### Scheduled Downtime

Sometimes we need to perform maintenance to keep Paragon working smoothly. If scheduled downtime is necessary, we'll do our best to give you at least 24 hours advance notice.

#### Service Credits

If we fall short of our Uptime commitment, we'll apply a credit to each affected account equal to 2 times the amount that the organization paid during the period Paragon was down (**Service Credits**) for the next billing cycle.

Service Credits are not refunds, cannot be exchanged into a cash amount, are capped at a maximum of 30 days of paid services, require you to have paid any outstanding invoices and expire upon termination of your contract or subscription. Service Credits are the sole and exclusive remedy for any failure by Paragon to meet its obligations under this SLA. Service Credits must be requested in written format during the same fiscal quarter in which the downtime occurred to be applied.

Downtime doesn't affect everyone at the same time or in the same way due to the separation of services and data. Service Credits applied to one customer don't guarantee Service Credits will be applied to another.


# Trust Center
Source: https://docs.useparagon.com/security/trust-center





# Contacting Support
Source: https://docs.useparagon.com/support/contacting-support



## Submitting a Ticket

Before submitting a ticket, please visit our [Status Page](https://status.useparagon.com/) to see if any known incidents may be related to your issue. You are also able to subscribe for alerts for status page updates.

Submit a ticket by reaching out to **[support@useparagon.com](mailto:support@useparagon.com)** or by sending a message in Slack, if your support level includes a shared Slack channel.

To help our team reach a resolution as quickly as possible, please provide:

* Approximate date/time of issue occurrence
* Links to workflow executions or errors
* Error messages appearing in browser console
* Error messages appearing in API requests
* User ID (as provided in the Paragon User Token), if related to an end-user

## Support Levels

Your support level corresponds to the Startup, Pro, or Enterprise plan of your Paragon account. If you'd like a higher support level than what is included with your plan, please [contact our sales team](mailto:sales@useparagon.com).

Response times apply during US business hours (9 AM - 5 PM in Pacific Time or America/Los\_Angeles).

Paragon’s office is closed in observance of the following holidays:

* US Federal Holidays, as defined by the Office of Personal Management of the United States
* The day after Thanksgiving
* One business day before and after Christmas
* All business days between Christmas and New Years

| Support Level            | Startup                  | Pro                                                                                                                                           | Enterprise                                                                                                                                                        |
| ------------------------ | ------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Documentation & SDKs** | ✔                        | ✔                                                                                                                                             | ✔                                                                                                                                                                 |
| **Support Channels**     | Email Only               | Email, Slack                                                                                                                                  | Email, Slack                                                                                                                                                      |
| **Initial Response**     | Within 24 business hours | - **Urgent**: 4 business hours <br /> - **High**: 4 business hours <br /> - **Normal**: 12 business hours <br /> - **Low**: 24 business hours | - **Urgent**: 2 hours, with Slack escalation access <br /> - **High**: 4 business hours <br /> - **Normal**: 8 business hours <br /> - **Low**: 12 business hours |

## Priority Levels

Our support team will assign a priority to your ticket based on impact. Here are the standard definitions we use to classify your ticket:

* **Urgent:** Your production system is down. Widespread impact for multiple end-users and no workaround is possible. Could cause widespread impact if not resolved.
* **High:** Your production system is impaired or degraded in a significant way, for more than 1 end-user. Examples include significant performance delays. This is also the appropriate Priority for an Urgent issue once a workaround has been identified & provided.
* **Normal:** You have issues impacting a single end-user, but your overall production system is still performing. This would also include minor performance degradation that is noticeable but not high-impact. This is also the appropriate Priority for issues in staging or development environments.
* **Low:** An issue that is not impairing normal business operations, but warrants attention. Feature requests.


# Building a BambooHR Integration
Source: https://docs.useparagon.com/tutorials/building-a-bamboohr-integration

In this tutorial, we'll build a basic BambooHR integration that syncs employees from your app to your customers' BambooHR accounts.

This guide demonstrates how to **sync data from your app to your customer's BambooHR accounts**. For demonstration purposes, we’ll build a workflow that creates a new employee in our user's BambooHR using contact data from our app. You can use the concepts covered in this tutorial in other applications as well.

### Prerequisites

1. [Connect your BambooHR application to Paragon](/resources/integrations/bamboohr).

2. Add your BambooHR app credentials to [activate your integration](/resources/integrations/bamboohr#add-your-bamboohr-app-to-paragon).

## 1. Build your workflow

#### Step 1.1: Create a new BambooHR workflow

It's important that you give your workflows a descriptive name to provide the best experience for your user.

#### Step 1.2: Create an App Event

Since we want to pass employee data from our application to our customer's BambooHR account, we'll use the [App Event](/workflows/triggers#app-events) trigger. Select the trigger step from the Workflow Editor, then click "App Event".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20a%20Trigger%20in%20Paragon%20Connect.png)
</Frame>

Select **Choose an App Event > Create new App Event**, then add the following parameters:

* **Event Name** - the name of your App Event. (e.g. Contact Created)
* **Event Schema** - example JSON Object that will be sent from your app. JSON objects are written in key/value pairs. Keys must be `strings`, and values must be a valid JSON data type (`string`, `number`, `object`, `array`, `boolean` or `null`)

You can use the sample App Event Schema below to jumpstart your progress:

```json Employee Created
{
    "first_name": "Buddha",
    "last_name": "Samuel",
    "email": "buddha@useparagon.com",
    "company": "Paragon",
    "title": "Chief Dog Officer"
}
```

#### Step 1.3: Add a BambooHR step

Add a BambooHR step to your workflow and use the dropdown menu to select `Create Employee` as the action. You can input the fields from your App Event by typing two left curly braces `{{` to bring up the dynamic variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20Employees%20to%20BambooHR%20in%20the%20Workflow%20Editor%20on%20Paragon%20Connect.gif)
</Frame>

#### Step 1.4: Deploy your workflow

Now that your workflow is all set up, deploy your workflow by clicking the "Deploy" button in the top-right of your screen.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Deploying%20a%20workflow%20in%20Paragon%20\(1\).png)
</Frame>

## 2. Generate a Paragon Signing Key

To generate a Signing Key, go to **Settings > Signing Keys** in your Paragon dashboard. You should store this key in an environment secrets file.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-01-28%20at%203.00.48%20PM.png)
</Frame>

For security reasons, we don’t store your Private Key and cannot show it to you again, so we recommend you download the key and store it someplace secure.

## 3. Install the Paragon SDK

The Paragon SDK gives you access to the Paragon global, which you can access as `paragon`.

You can install the Paragon SDK with npm:

```bash
npm install @useparagon/connect
```

The SDK can be imported in your client-side JavaScript files as a module:

```js
import { paragon } from '@useparagon/connect';
```

<Info>
  **Don't want to install the SDK just yet?**

  Use Paragon's [Hosted Demo Environment](/demo) to start testing your integrations without embedding the SDK in your application. [Learn more](/demo).
</Info>

## 4. Authenticate your user

Next, you'll need a library in your target language to sign JWTs with RS256. You can find one in your language at [https://jwt.io/](https://jwt.io/).

If your application is a fully client-rendered single-page app, you may have to create and use an additional API endpoint to retrieve a signed JWT (or reuse an existing endpoint that handles authentication or user info).

#### **Step 4.1: Sign a Paragon User Token**

The Paragon User Token is a signed JWT that minimally must include the `sub`, `iat`, and `exp` claims:

```js JavaScript
{
	// Uniquely identifying key for a user
	"sub": "the-user-id",

	// Issue timestamp, should be the current time
	"iat": 1608600116

	// Expiry timestamp for token, such as 1 hour from time of signature (iat)
	"exp": 1608603716
}
```

<Info>
  **Just for testing: Generating one-off JWTs**

  Use the [Paragon JWT Generator](https://jwt.useparagon.com/) to generate test JWTs for your development purposes. In production, static tokens should never be used.
</Info>

#### **Step 4.2: Call paragon.authenticate()**

You'll call `paragon.authenticate` in your view with a JWT signed by your backend using the library chosen in [Step 4.1](/tutorials/building-a-hubspot-integration#step-4-1-sign-a-paragon-user-token). **This JWT is the Paragon user token.**

[`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string) should be called at the beginning of your application's lifecycle in all cases. This is to make sure that the `userToken` is always as fresh as possible, with respect to your user's existing session on your own site. You may reference [Installing the Connect SDK](/getting-started/installing-the-connect-sdk#setup) for a detailed explanation on how to use [`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string).

```js
paragon.authenticate(
	// You can find your project ID in the Overview tab of any Integration
	"38b1f170-0c43-4eae-9a04-ab85325d99f7",

	// See Setup for how to encode your user token
	"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.ey..."
);
```

## 5. Connect to your integration

Now that you've authenticated your user, you can call `paragon.connect()` to bring up the Paragon Connect Portal.

```js JavaScript
paragon.connect("bamboohr");
```

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/BambooHR%20Paragon%20Connect%20Portal.png" alt="" />
</Frame>

<Note>
  **Note:** Toggle your workflow from the **Configuration** tab to enable your workflow after connecting to your BambooHR account.
</Note>

## 6. Send an App Event

Lastly, we'll send an App Event whenever a lead is created in your app. App Events can be sent from your application using the Paragon SDK or REST API. In both cases, you must pass two parameters:

* **name** - the event name defined in your App Event
* **payload** - the event payload that should match the event schema defined in your App Event

See the code examples below for how to send App Events using the Paragon SDK or API.

<CodeGroup>
  ```js JavaScript SDK
  var eventName = "Employee Created";
  var eventPayload = {
      "first_name": "Buddha",
      "last_name": "Samuel",
      "email": "buddha@useparagon.com",
      "company": "Paragon",
      "title": "Chief Dog Officer"
  };

  // Trigger the "Contact Created" App Event
  paragon.event(eventName, eventPayload)
  ```

  ```bash REST API
  // Trigger the "Lead Created" App Event
  POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/events/trigger

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  { 
      "name": "Employee Created", 
      "payload": {
          "first_name": "Buddha",
          "last_name": "Samuel",
          "email": "buddha@useparagon.com",
          "company": "Paragon",
          "title": "Chief Dog Officer"
      }
  }
  ```
</CodeGroup>

When sending live events from your application, Paragon will not validate that your event payload matches the defined event schema.

Great work! We just built a BambooHR integration that syncs new employees from your app to our customers' BambooHR accounts.


# Building a HubSpot Integration
Source: https://docs.useparagon.com/tutorials/building-a-hubspot-integration

In this tutorial, we'll build a basic HubSpot integration that syncs contacts from your app to your customers' HubSpot accounts.

This guide demonstrates how to **sync data from your app to your customer's HubSpot accounts**. For demonstration purposes, we’ll build a workflow that creates a new contact in our user's HubSpot using contact data from our app. You can use the concepts covered in this tutorial in other applications as well.

### Prerequisites

1. [Connect your HubSpot application to Paragon](/resources/integrations/hubspot#add-the-redirect-url-to-your-hubspot-app).

2. Add your HubSpot app credentials to [activate your integration](/resources/integrations/hubspot#add-your-hubspot-app-to-paragon).

## 1. Build your workflow

#### Step 1.1: Create a new HubSpot workflow

It's important that you give your workflows a descriptive name to provide the best experience for your user.

#### Step 1.2: Create an App Event

Since we want to pass contact data from our application to our customer's HubSpot account, we'll use the [App Event](/workflows/triggers#app-events) trigger. Select the trigger step from the Workflow Editor, then click "App Event".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20a%20Trigger%20in%20Paragon%20Connect.png)
</Frame>

Select **Choose an App Event > Create new App Event**, then add the following parameters:

* **Event Name** - the name of your App Event. (e.g. Contact Created)
* **Event Schema** - example JSON Object that will be sent from your app. JSON objects are written in key/value pairs. Keys must be `strings`, and values must be a valid JSON data type (`string`, `number`, `object`, `array`, `boolean` or `null`)

You can use the sample App Event Schema below to jumpstart your progress:

```js Contact Created
{
    "first_name": "Buddha",
    "last_name": "Samuel",
    "email": "buddha@useparagon.com",
    "company": "Paragon",
    "title": "Chief Dog Officer"
}
```

#### Step 1.3: Add a HubSpot step

Add a HubSpot step to your workflow and use the dropdown menu to select `Create Contact` as the action. You can input the fields from your App Event by typing two left curly braces `{{` to bring up the dynamic variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20a%20contact%20through%20Paragon%20Connect.gif)
</Frame>

#### Step 1.4: Deploy your workflow

Now that your workflow is all set up, deploy your workflow by clicking the "Deploy" button in the top-right of your screen.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Deploying%20a%20workflow%20in%20Paragon%20\(1\).png)
</Frame>

## 2. Generate a Paragon Signing Key

To generate a Signing Key, go to **Settings > Signing Keys** in your Paragon dashboard. You should store this key in an environment secrets file.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-01-28%20at%203.00.48%20PM.png)
</Frame>

For security reasons, we don’t store your Private Key and cannot show it to you again, so we recommend you download the key and store it someplace secure.

## 3. Install the Paragon SDK

The Paragon SDK gives you access to the Paragon global, which you can access as `paragon`.

You can install the Paragon SDK with npm:

```bash
npm install @useparagon/connect
```

The SDK can be imported in your client-side JavaScript files as a module:

```js
import { paragon } from '@useparagon/connect';
```

<Info>
  **Don't want to install the SDK just yet?**

  Use Paragon's [Hosted Demo Environment](/demo) to start testing your integrations without embedding the SDK in your application. [Learn more](/demo).
</Info>

## 4. Authenticate your user

Next, you'll need a library in your target language to sign JWTs with RS256. You can find one in your language at [https://jwt.io/](https://jwt.io/).

If your application is a fully client-rendered single-page app, you may have to create and use an additional API endpoint to retrieve a signed JWT (or reuse an existing endpoint that handles authentication or user info).

#### **Step 4.1: Sign a Paragon User Token**

The Paragon User Token is a signed JWT that minimally must include the `sub`, `iat`, and `exp` claims:

```js JavaScript
{
	// Uniquely identifying key for a user
	"sub": "the-user-id",

	// Issue timestamp, should be the current time
	"iat": 1608600116

	// Expiry timestamp for token, such as 1 hour from time of signature (iat)
	"exp": 1608603716
}
```

<Info>
  **Just for testing: Generating one-off JWTs**

  Use the [Paragon JWT Generator](https://jwt.useparagon.com/) to generate test JWTs for your development purposes. In production, static tokens should never be used.
</Info>

#### **Step 4.2: Call paragon.authenticate()**

You'll call `paragon.authenticate` in your view with a JWT signed by your backend using the library chosen in [Step 4.1](/tutorials/building-a-hubspot-integration#step-4-1-sign-a-paragon-user-token). **This JWT is the Paragon user token.**

[`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string) should be called at the beginning of your application's lifecycle in all cases. This is to make sure that the `userToken` is always as fresh as possible, with respect to your user's existing session on your own site. You may reference [Installing the Connect SDK](/getting-started/installing-the-connect-sdk#setup) for a detailed explanation on how to use [`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string).

```js
paragon.authenticate(
	// You can find your project ID in the Overview tab of any Integration
	"38b1f170-0c43-4eae-9a04-ab85325d99f7",

	// See Setup for how to encode your user token
	"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.ey..."
);
```

## 5. Connect to your integration

Now that you've authenticated your user, you can call `paragon.connect()` to bring up the Paragon Connect Portal.

```js JavaScript
paragon.connect("hubspot");
```

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/HubSpot%20Paragon%20Connect%20Portal.png)
</Frame>

<Info>
  rations without embedding the SDK in your application. [Learn more](/demo).**Note:** Toggle your workflow from the **Configuration** tab to enable your workflow after connecting to your HubSpot account.
</Info>

## 6. Send an App Event

Lastly, we'll send an App Event whenever a lead is created in your app. App Events can be sent from your application using the Paragon SDK or REST API. In both cases, you must pass two parameters:

* **name** - the event name defined in your App Event
* **payload** - the event payload that should match the event schema defined in your App Event

See the code examples below for how to send App Events using the Paragon SDK or API.

<CodeGroup>
  ```js JavaScript SDK
  var eventName = "Contact Created";
  var eventPayload = {
      "first_name": "Buddha",
      "last_name": "Samuel",
      "email": "buddha@useparagon.com",
      "company": "Paragon",
      "title": "Chief Dog Officer"
  };

  // Trigger the "Contact Created" App Event
  paragon.event(eventName, eventPayload)
  ```

  ```bash REST API
  // Trigger the "Lead Created" App Event
  POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/events/trigger

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  { 
      "name": "Contact Created", 
      "payload": {
          "first_name": "Buddha",
          "last_name": "Samuel",
          "email": "buddha@useparagon.com",
          "company": "Paragon",
          "title": "Chief Dog Officer"
      }
  }
  ```
</CodeGroup>

When sending live events from your application, Paragon will not validate that your event payload matches the defined event schema.

Great work! We just built a HubSpot integration that syncs new contacts from your app to our customers' HubSpot accounts.


# Building a Marketo Integration
Source: https://docs.useparagon.com/tutorials/building-a-marketo-integration

In this tutorial, we'll build a basic Marketo integration that syncs leads from your app to lists in your customers' Marketo accounts.

This guide demonstrates how to **sync data from your app to your customer's Marketo accounts**. For demonstration purposes, we’ll build a workflow that creates a new lead in our user's Marketo list using lead data from our app. You can use the concepts covered in this tutorial in other applications as well.

### Prerequisites

1. [Connect your Marketo application to Paragon](/resources/integrations/marketo).

2. Add your Marketo app credentials to [activate your integration](/resources/integrations/marketo#connecting-to-marketo).

## 1. Build your workflow

#### Step 1.1: Create a new Marketo workflow

It's important that you give your workflows a descriptive name to provide the best experience for your user.

#### Step 1.2: Create an App Event

Since we want to pass lead data from our application to our customer's Marketo account, we'll use the [App Event](/workflows/triggers#app-events) trigger. Select the trigger step from the Workflow Editor, then click "App Event".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20a%20Trigger%20in%20Paragon%20Connect.png)
</Frame>

Select **Choose an App Event > Create new App Event**, then add the following parameters:

* **Event Name** - the name of your App Event. (e.g. Lead Created)
* **Event Schema** - example JSON Object that will be sent from your app. JSON objects are written in key/value pairs. Keys must be `strings`, and values must be a valid JSON data type (`string`, `number`, `object`, `array`, `boolean` or `null`)

You can use the sample App Event Schema below to jumpstart your progress:

```js Lead Created
{
    "first_name": "Bowie",
    "last_name": "Foo",
    "email": "bowie@useparagon.com",
    "company": "Paragon",
    "title": "Chief Dog Officer"
}
```

#### Step 1.3: Add a Marketo step

Add a Marketo step to your workflow and use the dropdown menu to select `Create or Update Lead` as the action. You can input the fields from your App Event by typing two left curly braces `{{` to bring up the dynamic variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20a%20Lead%20to%20Marketo%20through%20Paragon%20Connect.gif)
</Frame>

**Step 1.4: Create a User Setting**

Since we want our user to select which list in Marketo we should add new leads to, we will add a [User Setting](/connect-portal/workflow-user-settings)to our workflow.

To add Workflow User Setting to Marketo, follow these steps:

1. Click **Customize Connect Portal** in the Overview page to open the Connect Portal Editor.

2. Click the **Configuration** tab in the right sidebar.

3. Click on the workflow you'd like to add User Settings to.

4. Under **User Settings** in the right sidebar, click **+ Add Settings.**

5. Enter a name for the field and choose the **List** field type from the dropdown menu.

6. Click the **Save** button to add it to your Connect Portal.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Adding%20a%20User%20Setting%20for%20Marketo%20in%20Paragon%20Connect.png)
</Frame>

#### Step 1.5: Add the lead to a list

Navigate back to your workflow once you have added the User Setting. Add another Marketo step to your workflow and use the dropdown menu to select `Add Leads to List`as the action. You can input the fields from your App Event by typing two left curly braces `{{` to bring up the dynamic variable menu.

#### Step 1.6: Deploy your workflow

Now that your workflow is all set up, deploy your workflow by clicking the "Deploy" button in the top-right of your screen.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Deploying%20a%20workflow%20in%20Paragon%20\(1\).png)
</Frame>

## 2. Generate a Paragon Signing Key

To generate a Signing Key, go to **Settings > Signing Keys** in your Paragon dashboard. You should store this key in an environment secrets file.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-01-28%20at%203.00.48%20PM.png)
</Frame>

For security reasons, we don’t store your Private Key and cannot show it to you again, so we recommend you download the key and store it someplace secure.

## 3. Install the Paragon SDK

The Paragon SDK gives you access to the Paragon global, which you can access as `paragon`.

You can install the Paragon SDK with npm:

```bash
npm install @useparagon/connect
```

The SDK can be imported in your client-side JavaScript files as a module:

```js
import { paragon } from '@useparagon/connect';
```

<Info>
  **Don't want to install the SDK just yet?**

  Use Paragon's [Hosted Demo Environment](/demo) to start testing your integrations without embedding the SDK in your application. [Learn more](/demo).
</Info>

## 4. Authenticate your user

Next, you'll need a library in your target language to sign JWTs with RS256. You can find one in your language at [https://jwt.io/](https://jwt.io/).

If your application is a fully client-rendered single-page app, you may have to create and use an additional API endpoint to retrieve a signed JWT (or reuse an existing endpoint that handles authentication or user info).

#### **Step 4.1: Sign a Paragon User Token**

The Paragon User Token is a signed JWT that minimally must include the `sub`, `iat`, and `exp` claims:

```js JavaScript
{
	// Uniquely identifying key for a user
	"sub": "the-user-id",

	// Issue timestamp, should be the current time
	"iat": 1608600116

	// Expiry timestamp for token, such as 1 hour from time of signature (iat)
	"exp": 1608603716
}
```

<Info>
  **Just for testing: Generating one-off JWTs**

  Use the [Paragon JWT Generator](https://jwt.useparagon.com/) to generate test JWTs for your development purposes. In production, static tokens should never be used.
</Info>

#### **Step 4.2: Call paragon.authenticate()**

You'll call `paragon.authenticate` in your view with a JWT signed by your backend using the library chosen in [Step 4.1](/tutorials/building-a-salesforce-integration#1-sign-a-jwt). **This JWT is the Paragon user token.**

[`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string) should be called at the beginning of your application's lifecycle in all cases. This is to make sure that the `userToken` is always as fresh as possible, with respect to your user's existing session on your own site. You may reference [Installing the Connect SDK](/getting-started/installing-the-connect-sdk#setup) for a detailed explanation on how to use [`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string).

```js
paragon.authenticate(
	// You can find your project ID in the Overview tab of any Integration
	"38b1f170-0c43-4eae-9a04-ab85325d99f7",

	// See Setup for how to encode your user token
	"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.ey..."
);
```

## 5. Connect to your integration

Now that you've authenticated your user, you can call `paragon.connect()` to bring up the Paragon Connect Portal.

```js JavaScript
paragon.connect("marketo");
```

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Paragon%20Connect%20Portal%20for%20Marketo.png)
</Frame>

<Note>
  **Note:** Toggle your workflow from the **Configuration** tab to enable your workflow after connecting to your Marketo account.
</Note>

## 6. Send an App Event

Lastly, we'll send an App Event whenever a lead is created in your app. App Events can be sent from your application using the Paragon SDK or REST API. In both cases, you must pass two parameters:

* **name** - the event name defined in your App Event
* **payload** - the event payload that should match the event schema defined in your App Event

See the code examples below for how to send App Events using the Paragon SDK or API.

<CodeGroup>
  ```js JavaScript SDK
  var eventName = "Lead Created";
  var eventPayload = {
      "first_name": "Bowie",
      "last_name": "Foo",
      "email": "bowie@useparagon.com",
      "company": "Paragon",
      "title": "Chief Dog Officer"
  };

  // Trigger the "Lead Created" App Event
  paragon.event(eventName, eventPayload)
  ```

  ```bash REST API
  // Trigger the "Lead Created" App Event
  POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/events/trigger

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  { 
      "name": "Lead Created", 
      "payload": {
          "first_name": "Bowie",
          "last_name": "Foo",
          "email": "bowie@useparagon.com",
          "company": "Paragon",
          "title": "Chief Dog Officer"
      }
  }
  ```
</CodeGroup>

When sending live events from your application, Paragon will not validate that your event payload matches the defined event schema.

Great work! We just built a Marketo integration that adds new leads from your app to lists in our customers' Marketo accounts.


# Building a Salesforce Integration
Source: https://docs.useparagon.com/tutorials/building-a-salesforce-integration

In this tutorial, we'll build a basic Salesforce integration that syncs leads from your app to your customers' Salesforce accounts.

This guide demonstrates how to **sync data from your app to your customer's Salesforce accounts**. For demonstration purposes, we’ll build a workflow that creates a new lead in our user's Salesforce using lead data from our app. You can use the concepts covered in this tutorial in other applications as well.

### Prerequisites

1. [Connect your Salesforce application to Paragon.](/resources/integrations/salesforce#add-the-redirect-url-to-your-salesforce-app)

2. Add your Salesforce app credentials to [activate your integration.](/resources/integrations/salesforce#add-your-salesforce-app-to-paragon)

## 1. Build your workflow

#### Step 1.1: Create a new Salesforce workflow

It's important that you give your workflows a descriptive name to provide the best experience for your user.

#### Step 1.2: Create an App Event

Since we want to pass lead data from our application to our customer's Salesforce account, we'll use the [App Event](/workflows/triggers#app-events) trigger. Select the trigger step from the Workflow Editor, then click "App Event".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20a%20Trigger%20in%20Paragon%20Connect.png)
</Frame>

Select **Choose an App Event > Create new App Event**, then add the following parameters:

* **Event Name** - the name of your App Event. (e.g. Lead Created)
* **Event Schema** - example JSON Object that will be sent from your app. JSON objects are written in key/value pairs. Keys must be `strings`, and values must be a valid JSON data type (`string`, `number`, `object`, `array`, `boolean` or `null`)

You can use the sample App Event Schema below to jumpstart your progress:

```js Lead Created
{
    "first_name": "Bowie",
    "last_name": "Foo",
    "email": "bowie@useparagon.com",
    "company": "Paragon",
    "title": "Chief Dog Officer"
}
```

#### Step 1.3: Add a Salesforce step

Add a Salesforce step to your workflow and use the dropdown menu to select `Create record` as the action and `Lead` as the record type. You can input the fields from your App Event by typing two left curly braces `{{` to bring up the dynamic variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20leads%20in%20Salesforce%20from%20Paragon%20COnnect.gif)
</Frame>

#### Step 1.4: Deploy your workflow

Now that your workflow is all set up, deploy your workflow by clicking the "Deploy" button in the top-right of your screen.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Deploying%20a%20workflow%20in%20Paragon%20\(1\).png)
</Frame>

## 2. Generate a Paragon Signing Key

To generate a Signing Key, go to **Settings > Signing Keys** in your Paragon dashboard. You should store this key in an environment secrets file.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-01-28%20at%203.00.48%20PM.png)
</Frame>

For security reasons, we don’t store your Private Key and cannot show it to you again, so we recommend you download the key and store it someplace secure.

## 3. Install the Paragon SDK

The Paragon SDK gives you access to the Paragon global, which you can access as `paragon`.

You can install the Paragon SDK with npm:

```bash
npm install @useparagon/connect
```

The SDK can be imported in your client-side JavaScript files as a module:

```js
import { paragon } from '@useparagon/connect';
```

<Info>
  **Don't want to install the SDK just yet?**

  Use Paragon's [Hosted Demo Environment](/demo) to start testing your integrations without embedding the SDK in your application. [Learn more](/demo).
</Info>

## 4. Authenticate your user

Next, you'll need a library in your target language to sign JWTs with RS256. You can find one in your language at [https://jwt.io/](https://jwt.io/).

If your application is a fully client-rendered single-page app, you may have to create and use an additional API endpoint to retrieve a signed JWT (or reuse an existing endpoint that handles authentication or user info).

#### **Step 4.1: Sign a Paragon User Token**

The Paragon User Token is a signed JWT that minimally must include the `sub`, `iat`, and `exp` claims:

```js JavaScript
{
	// Uniquely identifying key for a user
	"sub": "the-user-id",

	// Issue timestamp, should be the current time
	"iat": 1608600116

	// Expiry timestamp for token, such as 1 hour from time of signature (iat)
	"exp": 1608603716
}
```

<Info>
  **Just for testing: Generating one-off JWTs**

  Use the [Paragon JWT Generator](https://jwt.useparagon.com/) to generate test JWTs for your development purposes. In production, static tokens should never be used.
</Info>

#### **Step 4.2: Call paragon.authenticate()**

You'll call `paragon.authenticate` in your view with a JWT signed by your backend using the library chosen in [Step 4.1](/tutorials/building-a-salesforce-integration#1-sign-a-jwt). **This JWT is the Paragon user token.**

[`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string) should be called at the beginning of your application's lifecycle in all cases. This is to make sure that the `userToken` is always as fresh as possible, with respect to your user's existing session on your own site. You may reference [Installing the Connect SDK](/getting-started/installing-the-connect-sdk#setup) for a detailed explanation on how to use [`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string).

```js
paragon.authenticate(
	// You can find your project ID in the Overview tab of any Integration
	"38b1f170-0c43-4eae-9a04-ab85325d99f7",

	// See Setup for how to encode your user token
	"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.ey..."
);
```

## 5. Connect to your integration

Now that you've authenticated your user, you can call `paragon.connect()` to bring up the Paragon Connect Portal.

```js JavaScript
paragon.connect("salesforce");
```

<Frame>
  ![](https://gblobscdn.gitbook.com/assets%2F-MCJwlyhqtCdBfCLUO0d%2F-MR14Lp-nu7f4a2xbdN3%2F-MR162ccpCy5B2eOsE7A%2FConnect%20Portal%20in%20an%20application.png?alt=media\&token=e90f3e42-fbf2-4ff8-a892-3ed500daa2ca)
</Frame>

<Note>
  **Note:** Toggle your workflow from the **Configuration** tab to enable your workflow after connecting to your Salesforce account.
</Note>

## 6. Send an App Event

Lastly, we'll send an App Event whenever a lead is created in your app. App Events can be sent from your application using the Paragon SDK or REST API. In both cases, you must pass two parameters:

* **name** - the event name defined in your App Event
* **payload** - the event payload that should match the event schema defined in your App Event

See the code examples below for how to send App Events using the Paragon SDK or API.

<CodeGroup>
  ```js JavaScript SDK
  var eventName = "Lead Created";
  var eventPayload = {
      "first_name": "Bowie",
      "last_name": "Foo",
      "email": "bowie@useparagon.com",
      "company": "Paragon",
      "title": "Chief Dog Officer"
  };

  // Trigger the "Lead Created" App Event
  paragon.event(eventName, eventPayload)
  ```

  ```bash REST API
  // Trigger the "Lead Created" App Event
  POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/events/trigger

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  { 
      "name": "Lead Created", 
      "payload": {
          "first_name": "Bowie",
          "last_name": "Foo",
          "email": "bowie@useparagon.com",
          "company": "Paragon",
          "title": "Chief Dog Officer"
      }
  }
  ```
</CodeGroup>

When sending live events from your application, Paragon will not validate that your event payload matches the defined event schema.

Great work! We just built a Salesforce integration that syncs new leads from your app to our customers' Salesforce accounts.


# Building a Slack Integration
Source: https://docs.useparagon.com/tutorials/building-a-slack-integration

In this tutorial, we'll build a basic Slack integration that sends notifications from your app to your customers' Slack accounts.

This guide demonstrates how to **sync data from your app to your customer's Slack accounts**. For demonstration purposes, we’ll build a workflow that sends a notification to our user's Slack using event data from our app. You can use the concepts covered in this tutorial in other applications as well.

### Prerequisites

1. [Connect your Slack application to Paragon.](/resources/integrations/slack#setup-guide)

2. Add your Slack app credentials to [activate your integration](/resources/integrations/slack#add-your-slack-app-to-paragon).

## 1. Build your workflow

#### Step 1.1: Create a new Slack workflow

It's important that you give your workflows a descriptive name to provide the best experience for your user.

#### Step 1.2: Create an App Event

Since we want to pass event data from our application to our customer's Slack account, we'll use the [App Event](/workflows/triggers#app-events) trigger. Select the trigger step from the Workflow Editor, then click "App Event".

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20a%20Trigger%20in%20Paragon%20Connect.png)
</Frame>

Select **Choose an App Event > Create new App Event**, then add the following parameters:

* **Event Name** - the name of your App Event. (e.g. Lead Created)
* **Event Schema** - example JSON Object that will be sent from your app. JSON objects are written in key/value pairs. Keys must be `strings`, and values must be a valid JSON data type (`string`, `number`, `object`, `array`, `boolean` or `null`)

You can use the sample App Event Schema below to jumpstart your progress:

```js Task Created
{
    "creator": "Ethan Lee",
    "summary": "Connect the Paragon SDK to my application",
    "priority": "P1",
    "status": "Not Started"
}
```

#### Step 1.3: Add a Slack step

Add a Slack step to your workflow and use the dropdown menu to select `Send message in channel` as the action. When composing your message, you can input the fields from your App Event by typing two left curly braces `{{` to bring up the dynamic variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Sending%20notifications%20to%20Slack%20from%20Paragon%20Connect.gif)
</Frame>

**Step 1.4: Create a User Setting**

Since we want our user to select which channel in Slack we should send new notifications to, we will add a [User Setting](/connect-portal/workflow-user-settings)to our workflow.

To add Workflow User Setting to Slack, follow these steps:

1. Click **Customize Connect Portal** in the Overview page to open the Connect Portal Editor.

2. Click the **Configuration** tab in the right sidebar.

3. Click on the workflow you'd like to add User Settings to.

4. Under **User Settings** in the right sidebar, click **+ Add Settings.**

5. Enter a name for the field and choose the **Channel** field type from the dropdown menu.

6. Click the **Save** button to add it to your Connect Portal.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Customizing%20your%20Slack%20integration%20in%20Paragon%20Connect.png)
</Frame>

#### Step 1.5: Choose a channel to send notifications

Navigate back to your workflow once you have added the User Setting. Click into the Slack step and input the fields from your App Event by typing two left curly braces `{{` to bring up the dynamic variable menu.

#### Step 1.6: Deploy your workflow

Now that your workflow is all set up, deploy your workflow by clicking the "Deploy" button in the top-right of your screen.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Deploying%20a%20workflow%20in%20Paragon%20\(1\).png)
</Frame>

## 2. Generate a Paragon Signing Key

To generate a Signing Key, go to **Settings > Signing Keys** in your Paragon dashboard. You should store this key in an environment secrets file.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-01-28%20at%203.00.48%20PM.png)
</Frame>

For security reasons, we don’t store your Private Key and cannot show it to you again, so we recommend you download the key and store it someplace secure.

## 3. Install the Paragon SDK

The Paragon SDK gives you access to the Paragon global, which you can access as `paragon`.

You can install the Paragon SDK with npm:

```bash
npm install @useparagon/connect
```

The SDK can be imported in your client-side JavaScript files as a module:

```js
import { paragon } from '@useparagon/connect';
```

<Info>
  **Don't want to install the SDK just yet?**

  Use Paragon's [Hosted Demo Environment](/demo) to start testing your integrations without embedding the SDK in your application. [Learn more](/demo).
</Info>

## 4. Authenticate your user

Next, you'll need a library in your target language to sign JWTs with RS256. You can find one in your language at [https://jwt.io/](https://jwt.io/).

If your application is a fully client-rendered single-page app, you may have to create and use an additional API endpoint to retrieve a signed JWT (or reuse an existing endpoint that handles authentication or user info).

#### **Step 4.1: Sign a Paragon User Token**

The Paragon User Token is a signed JWT that minimally must include the `sub`, `iat`, and `exp` claims:

```js JavaScript
{
	// Uniquely identifying key for a user
	"sub": "the-user-id",

	// Issue timestamp, should be the current time
	"iat": 1608600116

	// Expiry timestamp for token, such as 1 hour from time of signature (iat)
	"exp": 1608603716
}
```

<Info>
  **Just for testing: Generating one-off JWTs**

  Use the [Paragon JWT Generator](https://jwt.useparagon.com/) to generate test JWTs for your development purposes. In production, static tokens should never be used.
</Info>

#### **Step 4.2: Call paragon.authenticate()**

You'll call `paragon.authenticate` in your view with a JWT signed by your backend using the library chosen in [Step 4.1](/tutorials/building-a-slack-integration#4.-authenticate-your-user). **This JWT is the Paragon user token.**

[`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string) should be called at the beginning of your application's lifecycle in all cases. This is to make sure that the `userToken` is always as fresh as possible, with respect to your user's existing session on your own site. You may reference [Installing the Connect SDK](/getting-started/installing-the-connect-sdk#setup) for a detailed explanation on how to use [`.authenticate`](/apis/api-reference#authenticate-projectid-string-usertoken-string).

```js
paragon.authenticate(
	// You can find your project ID in the Overview tab of any Integration
	"38b1f170-0c43-4eae-9a04-ab85325d99f7",

	// See Setup for how to encode your user token
	"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.ey..."
);
```

## 5. Connect to your integration

Now that you've authenticated your user, you can call `paragon.connect()` to bring up the Paragon Connect Portal.

```js JavaScript
paragon.connect("slack");
```

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Integration%20Portal%20for%20Slack%20in%20Paragon%20Connect.png)
</Frame>

<Note>
  **Note:** Toggle your workflow from the **Configuration** tab to enable your workflow after connecting to your Slack account.
</Note>

## 6. Send an App Event

Lastly, we'll send an App Event whenever a lead is created in your app. App Events can be sent from your application using the Paragon SDK or REST API. In both cases, you must pass two parameters:

* **name** - the event name defined in your App Event
* **payload** - the event payload that should match the event schema defined in your App Event

See the code examples below for how to send App Events using the Paragon SDK or API.

<CodeGroup>
  ```js JavaScript SDK
  var eventName = "Task Created";
  var eventPayload = {
      "creator": "Ethan Lee",
      "summary": "Connect the Paragon SDK to my application",
      "priority": "P1",
      "status": "Not Started",
  };

  // Trigger the "Task Created" App Event
  paragon.event(eventName, eventPayload)
  ```

  ```bash REST API
  // Trigger the "Task Created" App Event
  POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/events/trigger

  Authorization: Bearer <Paragon User Token>
  Content-Type: application/json

  { 
      "name": "Task Created", 
      "payload": {
          "creator": "Ethan Lee",
          "summary": "Connect the Paragon SDK to my application",
          "priority": "P1",
          "status": "Not Started"
      }
  }
  ```
</CodeGroup>

When sending live events from your application, Paragon will not validate that your event payload matches the defined event schema.

Great work! We just built a Slack integration that sends new notifications from your app to our customers' Slack accounts.


# Building an In-App Integrations Catalog
Source: https://docs.useparagon.com/tutorials/building-an-in-app-integrations-catalog

In this tutorial, we'll use the Paragon SDK to build an integrations catalog into your app.

This guide provides an example implementation of building an integrations catalog **into your React app, using TypeScript.** The completed code is available in [this GitHub repository](https://github.com/useparagon/paragon-integrations-catalog-tutorial).

<Info>
  The tutorial repository signs Paragon User Tokens in the frontend application, which should NOT be used in production. Replace `getParagonUserToken` with your own app's Paragon User Token generation, which should be performed on your server only.
</Info>

Alternatively, for a production-ready implementation of the SDK embedded in a Next.js app, see our [Example App](https://github.com/useparagon/paragon-connect-nextjs-example) repository.

### Demo

In this tutorial, we'll build the user interface to display a list of Paragon integrations embedded in your application:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Recording.gif" alt="" />
</Frame>

### Prerequisites

* This guide embeds the Integration Catalog in a React.js app. React is not a requirement for using the SDK, but the tutorial steps will use React-specific functions to dynamically update the Catalog UI.
* This guide assumes that you've already [installed the SDK and configured User Authentication](/getting-started/installing-the-connect-sdk). We will change your implementation slightly so that your React app can listen for the SDK events for loading and authenticating.

## 1. Add hooks for authenticating the Paragon User

First, define a hook used for SDK authentication. We'll call this `useParagonAuth.ts`. Copy the following contents to this file:

```js
import { useEffect, useState } from "react";
import { paragon, AuthenticatedConnectUser } from "@useparagon/connect";

async function getParagonUserToken(): Promise<string> {
  // Replace this with the logic that your app uses for
  // fetching the Paragon User Token.
}

export default function useParagonAuth(): { user?: AuthenticatedConnectUser; error?: Error } {
  const [token, setToken] = useState<string | null>(null);
  const [user, setUser] = useState<ConnectUser | undefined>();
  const [error, setError] = useState<Error | undefined>();

  useEffect(() => {
    getParagonUserToken().then(setToken).catch(setError);
  }, []);

  useEffect(() => {
    if (token && !error) {
      paragon
        .authenticate(PARAGON_PROJECT_ID, token)
        .then(() => setUser(paragon.getUser()))
        .catch(setError);
    }
  }, [token, error]);

  return { user, error };
}
```

<Info>
  Replace `PARAGON_PROJECT_ID` with your Project ID in Paragon. You can find your Project ID in the Overview tab of any Integration within the dashboard.
</Info>

This hook can then be consumed from a component that will render your integrations catalog as follows:

```js
// IntegrationsCatalog.tsx
import useParagonAuth from "../hooks/useParagonAuth";

function IntegrationsCatalog() {
    const { user } = useParagonAuth();
    
    return (<div className="catalog">
        <h1>Integrations Catalog</h1>
    </div>);
}

export default IntegrationsCatalog;
```

## 2. Displaying integrations

Next, we'll show the list of integrations loaded from your project. The `paragon` global is loaded as a stateful value, so when the SDK loads, the component will update accordingly:

```js
// IntegrationsCatalog.tsx
import { paragon } from "@useparagon/connect";

function IntegrationsCatalog() {
    const { user } = useParagonAuth();
    
    return (<div className="catalog">
        <h1>Integrations Catalog</h1>
        {paragon.getIntegrationMetadata().map((integration) => {
             return <div
                 key={integration.type}
                 onClick={() => paragon.connect(integration.type)}
             >
                 <img src={integration.icon} width={20} height={20} />
                 <p>{integration.name}</p>
             </div>;
         })}
    </div>);
}

export default IntegrationsCatalog;
```

This snippet calls [`.getIntegrationMetadata`](/apis/api-reference#.getintegrationmetadata) to get all active integrations in your project, along with their names and icon URLs.

For every integration, we display their icons and names. We also set up an event handler to call [`.connect`](/apis/api-reference#.connect-integrationtype-string) with the `integration.type` when the element is clicked. This will display the Connect Portal over your app, prompting the user to connect an account to the specified integration.

**Result:**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Recording%202022-11-07%20at%2009.08.22.gif" alt="" />
</Frame>

When you click on any one of the integrations, the Connect Portal overlay appears over your app.

## 3. Displaying account status

Next, we'll update your integrations catalog to display your user's account status for each integration within the element that shows the icon and name.

We can get the account status using [`.getUser`](/apis/api-reference#.getuser-paragonuser), which returns the current state of the authenticated user from the SDK, including their connected integrations and enabled workflows.

```js
// IntegrationsCatalog.tsx
import { paragon } from "@useparagon/connect";

function IntegrationsCatalog() {
    const { user } = useParagonAuth();
    
    return (<div className="catalog">
        <h1>Integrations Catalog</h1>
        {paragon &&
         paragon.getIntegrationMetadata().map((integration) => {
             const integrationEnabled = user?.integrations?.[integration.type]?.enabled;
             return <div
                 key={integration.type}
                 onClick={() => paragon.connect(integration.type)}
             >
                 <img src={integration.icon} width={20} height={20} />
                 <p>{integration.name}</p>
                 <p>{integrationEnabled ? "Connected" : "Not connected"}</p>
             </div>
         })}
    </div>);
}

export default IntegrationsCatalog;
```

**Result:**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(20).png" alt="" />
</Frame>

Each integration will show the "Connected" or "Not connected" status for the current user.

## 4. Adding subscriptions for account status changes

Finally, we want to make sure that the catalog components that we've created update automatically when the SDK handles a state change with one of our user's integrations. Specifically, when a user connects or disconnects their account, we want the account status to reflect that immediately.

To do this, we can use [`.subscribe`](/apis/api-reference#subscribe), which allows us to listen for global SDK events. We will listen for the events `"onIntegrationInstall"` and `"onIntegrationUninstall"` to detect when a user has connected or disconnected an account.

```js
// useParagonAuth.ts
import { paragon, AuthenticatedConnectUser, SDK_EVENT } from '@useparagon/connect';

export default function useParagonAuth(): { user?: AuthenticatedConnectUser; error?: Error } {
  const [token, setToken] = useState<string | null>(null);
  const [user, setUser] = useState<ConnectUser | undefined>();
  const [error, setError] = useState<Error | undefined>();

  useEffect(() => {
    getParagonUserToken().then(setToken).catch(setError);
  }, []);
  
  // Listen for account state changes
  useEffect(() => {
    const listener = () => {
        const authedUser = paragon.getUser();
        if (authedUser.authenticated) {
          setUser({ ...authedUser });
        }
    };
    paragon.subscribe(SDK_EVENT.ON_INTEGRATION_INSTALL, listener);
    paragon.subscribe(SDK_EVENT.ON_INTEGRATION_UNINSTALL, listener);
    return () => {
      paragon.unsubscribe(SDK_EVENT.ON_INTEGRATION_INSTALL, listener);
      paragon.unsubscribe(SDK_EVENT.ON_INTEGRATION_UNINSTALL, listener);
    };
  }, []);

  useEffect(() => {
    if (token && !error) {
      paragon
        .authenticate(PARAGON_PROJECT_ID, token)
        .then(() => setUser(paragon.getUser()))
        .catch(setError);
    }
  }, [token, error]);

  return { user, error };
}
```

Our integrations catalog will now re-render with the most up-to-date information when account state changes.

**Result**: You've completed a basic Integrations Catalog with the Connect SDK!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Recording.gif" alt="" />
</Frame>

## Recap

In this guide, you built an integrations catalog that you can embed in your app.

* You defined 2 hooks: [`useParagonGlobal`](https://github.com/useparagon/paragon-integrations-catalog-tutorial/blob/master/src/hooks/useParagonGlobal.ts) (for mounting the Paragon SDK) and [`useParagonAuth`](https://github.com/useparagon/paragon-integrations-catalog-tutorial/blob/master/src/hooks/useParagonAuth.ts) (for authenticating a user).
* You used [`.getIntegrationMetadata`](/apis/api-reference#.getintegrationmetadata) to get all available integrations in the project with name and icon information.
* You used [`.getUser`](/apis/api-reference#.getuser-paragonuser) to get the user's account status.
* You used [`.subscribe`](/apis/api-reference#subscribe) to listen for user account status changes to sync updates to your catalog UI.


# Advanced Techniques
Source: https://docs.useparagon.com/workflows/advanced-techniques



You can use the following advanced techniques to create comprehensive workflows on Paragon:

<Card title="Polling-Based Workflows" href="/workflows/advanced-techniques/polling-based-workflows" horizontal />

<Card title="Implementing Custom Field Mapping" href="/workflows/advanced-techniques/implementing-custom-field-mapping" horizontal />


# Implementing Custom Field Mapping
Source: https://docs.useparagon.com/workflows/advanced-techniques/implementing-custom-field-mapping



In the event that the integration provider does not have a native Field Mapping [User Setting](/connect-portal/workflow-user-settings), you can map the data in pulled from your application in a Paragon workflow.

#### In your application

1. Use the [Connect API](/apis/making-api-requests) to make a request to the integration provider to get the schema for a given object in your application.

2. Save the mapping to your [Connected User](/billing/connected-users) using [User Metadata](/apis/users).

#### In your Paragon workflow

1. Add an integration step to retrieve the schema for the given record type. This can also be done by querying the record type for a single existing record.

2. Use a [Function](/workflows/functions) step to map the data from User Metadata to the data retrieved in the previous step.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Custom%20Field%20Mapping%20in%20a%20workflow%20on%20Paragon%20Connect.png" alt="" />
</Frame>


# Polling Based Workflows
Source: https://docs.useparagon.com/workflows/advanced-techniques/polling-based-workflows



In the event that the integration provider does not have webhooks, you can build polling-based workflows that essentially work as real-time triggers for your users.

1. Create a workflow with the [Scheduler](/workflows/triggers/scheduler-trigger) trigger

2. Use a Function step to create a timestamp from the last sync time. For example, if the workflow is configured to run every ten minutes, create a timestamp from ten minutes ago.

3. Use the timestamp to filter items from the integration provider.

4. Use a [Fan Out](/workflows/using-fan-out) to iterate through every item in the array returned from the integration provider.

5. Use a [Request](/workflows/triggers/request-trigger)[](/workflows/requests)or [API Resource](/resources/api-resources) step to send data back to your application.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20time%20deltas%20for%20workflows%20in%20Paragon%20Connect.png" alt="" />
</Frame>


# Triggering Workflows in Workflows
Source: https://docs.useparagon.com/workflows/advanced-techniques/triggering-workflows-in-workflows



In the event that you need to trigger integration logic between different workflows, you can build a [Function](/workflows/functions) step that generates a [Paragon User Token](/getting-started/installing-the-connect-sdk#id-2.-generate-a-paragon-user-token) in order to trigger workflows via a subsequent [Request](/workflows/triggers/request-trigger) step.

1. Add your Paragon Signing Key as an [Environment Secret](/workflows/environment-secrets) in Paragon.

2. In the first workflow, add a Function step with the following code:

```js
function yourFunction(parameters, libraries) {

  // Import the jsonwebtoken library
  const { jsonwebtoken } = libraries;

  // Your Connected User's ID, taken from settings.userId
  const userId = parameters.userId;

  // Your Paragon Signing Key
  const key = parameters.signingKey.replaceAll("\\n", "\n");

  // Generate current timestamp
  const currentTime = Math.floor(Date.now() / 1000);

  // Generate your Paragon User Token
  return jsonwebtoken.sign(
      {
        sub: userId,
        iat: currentTime,
        exp: currentTime + (60 * 60), // 1 hour from now
      },
      key,
      {
        algorithm: "RS256",
      }
    )
}
```

The function takes in the following parameters: `userId` and `signingKey`, which can be retrieved by using the [Dynamic Variable Menu](/workflows/using-dynamic-variables).

3. Add a Request step configured for the API Endpoint provided for your specific trigger type. You can more about Triggers and their endpoints [here](/workflows/triggers).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Calling%20workflows%20in%20workflows%20on%20Paragon%20Connect.png" alt="" />
</Frame>


# Auto Retries
Source: https://docs.useparagon.com/workflows/auto-retries

Automatically retry failed step executions.

## Overview

When auto-retry is enabled on a step, the step automatically retries if the step execution fails. This is useful for ensuring your workflows run successfully when encountering intermittent errors, such as API rate limits.

Auto-retry is available on the following step types:

* [Integrations](/resources/integrations) (e.g. Salesforce, Slack, Jira)
* [Request](/workflows/requests#overview)
* [Function](/workflows/functions)

If a step with auto-retry enabled fails, Paragon will perform several retries, waiting after each failed execution before performing the next attempt. All attempts will only count as [one task](/billing/tasks) used.

The timing of retry attempts is as follows:

* **1st retry:** around `10 seconds` after initial attempt
* **2nd retry:** around `20 seconds` after 1st retry
* **3rd retry:** around `30 seconds` after 2nd retry
* **4th retry:** around `50 seconds` after 3rd retry
* **5th retry:** around `80 seconds` after 4th retry

### Enabling Auto-Retry

To enable auto-retry for a step, click on the step, scroll to the bottom of the sidebar, and toggle auto-retry.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Enabling%20Auto%20Retries%20in%20a%20Paragon%20workflow%20\(1\).gif)
</Frame>

<Note>
  **Note:** Enabling auto-retry only retries the **specific step**, not your entire workflow.
</Note>

## How Auto-Retry works

**Deployed Workflows:** Paragon attempts to run your step **up to five times** with an exponential back-off. Retried steps appear as "Running" in [Task History](/monitoring/viewing-task-history#overview).

**Test Workflow** or **Test Step:** Paragon does not retry step executions.

While auto-retry is enabled, no error emails for the workflow will be sent during the auto-retry window. If Paragon fails to retry the step after the last attempt, we will send you an email indicating the error, and workflow execution in your [Task History](/monitoring/viewing-task-history#editing-and-replaying).


# Building Workflows
Source: https://docs.useparagon.com/workflows/building-workflows

Workflows connect data between your users' apps and your application

## Introduction

Once your users have connected their third-party app accounts in the Connect Portal, you can build workflows that connect data between your application and your users' apps. Paragon's visual workflow builder allows you to create custom integrations that your users can activate in their integrations.

Workflows are durable, retriable jobs that can be [triggered](/workflows/triggers) by your application or by events in your user's connected accounts. Workflows can be used to build out logic for your integration in Paragon's scalable, high-availability runtime.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20the%20workflow%20editor%20in%20Paragon.png)
</Frame>

Here are some common step types that can get you started building workflows:

* [Integration Actions](/workflows/integration-actions)**:** Perform an action in your users' connected app account, like sending a Slack message or querying contacts from Salesforce
* [Requests](/workflows/requests): Make a request to any API, such as sending data to your application
* [Functions](/workflows/functions): Write custom JavaScript to transform data or perform custom business logic, using [npm libraries](/resources/javascript-libraries) as supported
* [Conditionals](/workflows/using-conditionals): Add conditional branching logic
* [Fan Out](/workflows/using-fan-out)**:** Iterate in parallel over a list of data and reduce results in downstream steps

Along with the [Connect API](/apis/making-api-requests), Workflows are one of two primary ways to build integrations with Paragon.

## When to use Workflows

In general, Workflows are the way that most integrations are built with Paragon. When deciding when to use Workflows or the [Connect API](/apis/making-api-requests), Workflows are often best suited for common use cases including:

* Pushing data from your application to your users' apps
* Receiving new or updated data from your users' apps (Webhooks)
* Allowing your users to configure integration options with custom fields
* Enabling non-engineering teams (e.g. Product or Client Services teams) to configure integrations without writing code

Here are examples of Workflows for a few common integrations:

* **Slack:** Send notifications from your application to Slack
* **Salesforce:** Sync contacts from your application to Salesforce
* **HubSpot:** Sync contacts HubSpot to your application
* **Google Calendar:** Create Google Calendar events from events in your application

## Creating Workflows

You can create a Workflow by selecting an integration and clicking **Create Workflow.**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Paragon]%202025-02-18%20at%2008.03.05%20AM@2x.png" alt="" />
</Frame>

**Naming your workflow**

The Workflow Editor will appear and allow you to name your new workflow (click in the workflow title "New Workflow" and type to rename).

<Frame>
  > <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Workflow%20Editor%20Navbar%20-%20Rename%20(1).png" alt="" />
</Frame>

**Selecting a trigger**

Every workflow begins with a trigger. Select a trigger that matches how this workflow should begin its execution.

Workflows can only have one type of trigger. If you need to create a two-way sync between an integration and your application, you would create two workflows: one workflow to push updates from Integration -> Your App and another workflow to push updates from Your App -> Integration.

See the page below for full information on defining and using triggers:

<Card title="Triggering Workflows" href="/workflows/triggers" horizontal />

**Adding steps**

Beneath a trigger, you can build out your workflow logic as a series of steps. Steps can represent [Integration Actions](/workflows/integration-actions), [API requests](/workflows/requests), [custom functions](/workflows/functions), or other control flow elements in your workflow.

Click the "**+**" button underneath any step to add a new step. You can also right-click any step to add a step immediately downstream of the step, duplicate the step, or remove the step from the workflow.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Step%20Editor%20context%20menu.png" alt="" />
</Frame>

Requests, Integration Actions, and Function Steps can be configured to "Continue workflow if step fails" or to use [Auto-Retries](/workflows/auto-retries).

#### Using Dynamic Data

You can insert data from any upstream step in the Workflow Editor with the [Dynamic Variable Menu](/workflows/using-dynamic-variables). To access the Dynamic Variable Menu, click into any text input box, type two left curly braces `{{`, then select the desired step and specific reference to pull data from.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Accessing%20the%20Dynamic%20Variable%20Menu%20in%20Paragon%20Connect.gif)
</Frame>

## Testing Workflows

Individual steps in a workflow can be tested as you build them. Each step has a Test Step button in the sidebar that executes the step as the Preview User (the user connected in the Preview page of your integration).

You can use the Test Workflow button when you want to test a workflow with all steps to completion.

<Note>
  **Note:** When testing steps or workflows from the Workflow Editor, the data output returned is partial.

  Here are some limitations to the test data displayed in the Workflow Editor:

  * Arrays are truncated to 20 items maximum
  * Paginated requests will only send 3 requests maximum
</Note>

The above limitations improve the performance of the Workflow Editor as you build your workflow and reference variables between steps.

To test the workflow without these limitations, use a live Connected User to [connect an integration in the Connect Portal](/getting-started/displaying-the-connect-portal) and enable the workflow. Once you trigger the workflow for this user, the execution will appear in [Task History](/monitoring/viewing-task-history), where you can monitor the results and view the full input and output data.

## Deploying Workflows

You can push workflows live to your customers by pressing the purple Deploy button in the top-right corner of the Workflow Editor.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Deploying%20a%20workflow%20in%20Paragon%20(1).png" alt="" />
</Frame>

## Editing Workflows

You can edit deployed workflows by making changes directly to the Workflow Editor. The changes will not affect the live workflow changes until you redeploy the workflow.

## Undeploying Workflows

To pull deployed workflows from your customers, click the purple “Deploy” button in the top-right corner of the Workflow Editor, then select “Undeploy”.

## Workflows and the Connect Portal

Workflows that you've deployed for an integration will appear in that integration's Connect Portal under the Configuration tab.

There, your users can choose which workflows they want to activate for that integration. You can also provide options for your users to configure their workflow settings. For example, if you have a Slack workflow that sends notifications to your users' workspaces, you may want to provide them the option of which Slack channel they want to send notifications to.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-02-11%20at%2011.37.03%20AM.png)
</Frame>

See [Workflow User Settings](/connect-portal/workflow-user-settings) for an overview of how to provide user-facing options for your users to configure their workflow settings.

## What's Next

Throughout the articles in this section, we'll provide a detailed overview of how to start building your own Workflows in Paragon.


# Environment Secrets
Source: https://docs.useparagon.com/workflows/environment-secrets

Securely store and access credentials across your workflows.

## Overview

Environment Secrets are global variables used for securely storing and accessing secure values across your workflows. For example, you can store a global authorization token for your API to use in all Request steps that send a request to your API.

<Note>
  **Note:** You must be an account Admin to manage Environment Secrets.
</Note>

To set up Environment Secrets:

**1. Click on "Settings" in the sidebar, then click on "Environment Secrets".**

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Going%20to%20settings%20in%20Paragon.gif)
</Frame>

**2. Enter details for your new Environment Secret.**

Set **Key** to a descriptive and recognizable name. This easily identifies it in the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Creating%20environment%20secrets%20in%20Paragon.gif)
</Frame>

## Using Environment Secrets

Environment Secrets appear at the bottom of the variable menu. Selecting one uses the `Value` stored in the Environment Secret.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20environment%20secrets%20in%20Paragon.gif)
</Frame>

## Updating an Environment Secret

Click on the triple-dot menu to the right of the Environment Secret you'd like to update. After confirming the update, the Environment Secret will update in any workflows it's used in.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Updating%20environment%20secrets%20in%20Paragon.gif)
</Frame>

## Deleting an Environment Secret

Click on the triple-dot menu to the right of the environment secret you'd like to delete. After confirming the deletion, the Environment Secret will get removed from any workflows.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Deleting%20environment%20secrets%20in%20Paragon.gif)
</Frame>


# Using Functions
Source: https://docs.useparagon.com/workflows/functions



## Overview

Paragon's Functions are built-in cloud functions that provide a powerful way to add custom logic to your workflows. You can use functions to transform or compute data, or even to perform more complex operations within workflows that you might otherwise need to write server-side code for. Paragon functions support Javascript (ES7) and provide access to select npm modules.

<Card title="JavaScript Libraries" href="/resources/javascript-libraries" horizontal />

To add a function to your workflow, click the "+" button in the workflow canvas and choose the Function step from the sidebar.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(79\).png)
</Frame>

## Defining function parameters

You can pass any data from upstream steps into your Function as parameters using the key-value table under "What data should be passed in as parameters?". Under "Key", you can give your variable a name and under "Value" you can insert a variable from the variable menu by clicking the dropdown button.

## Writing function code

You can write your custom code in the `yourFunction()` function, which accepts any valid Javascript (ES7). Any data that you `return` from this function can then accessed by downstream steps in your workflow.

You can access parameters defined in the key-value table above by referencing `parameters.<parameter_name>` within `yourFunction()`. For example, a parameter whose key is `email` can be accessed in the function by referencing `parameters.email`.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Writing%20function%20code%20in%20Paragon.gif)
</Frame>

## Using NPM modules in functions

Paragon provides access to [certain npm modules](/resources/javascript-libraries) that can be used within functions. Here's an example of how you can access the `uuid` npm module within a function.

```js JavaScript
function yourFunction(parameters, libraries) {
  // Generate a uuid with the uuid Javascript library
  const uuid = libraries.uuid;
  const id = uuid.v4();
  return id;
}
```

Note that you'll need to add the `libraries` parameter to `yourFunction()`. If your function needs to work asynchronously, you can declare it `async`.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20npm%20modules%20in%20functions%20in%20Paragon.gif)
</Frame>

You can find the full list of supported npm modules in our [Javascript Libraries Catalog](/resources/javascript-libraries). If you don't see the module that you're looking for, [let us know](mailto:team@useparagon.com) and can usually add it for you.

## Considerations

When using Functions, there are a few things to keep in mind:

### Memory Constraints

At the system level, the container that processes workloads is limited by its available resources. Paragon limits step input and output sizes based on your billing plan:

* **Trial**: 50 MB
* **Basic**: 50 MB
* **Pro**: 100 MB
* **Enterprise**: 1 GB

### Time Constraints

Paragon sets time limits for how long Functions can execute based on your billing plan to ensure your workflows run smoothly. If a Function takes longer than allowed, the workflow step will fail.

Here are the maximum execution times by billing plan:

* **Trial**: 1 minute
* **Basic**: 1 minute
* **Pro**: 1 minute
* **Enterprise**: 1 hour


# Smart Rate Limits
Source: https://docs.useparagon.com/workflows/handling-rate-limits

Learn how Workflows automatically recover from integration API rate limits.

## Overview

While building integration logic, you may encounter rate limit errors from upstream APIs if you consume requests faster than the integration provider supports.

Rate limits can be enforced by integration providers for either the requesting user or the requesting application (or both). They can be applied with different schedules (requests per minute, per hour, or per day).

Paragon provides automatic protection from rate limit errors in the form of Smart Rate Limits, adapting to known rate limits from supported providers or rate limiting errors encountered during Workflow executions.

**Example: HubSpot rate limit**

```json 429 Too Many Requests
{
  "status": "error",
  "message": "You have reached your daily limit.",
  "errorType": "RATE_LIMIT"
}
```

## Usage

All Workflows for [supported integrations](/workflows/handling-rate-limits#supported-integrations) will automatically use Smart Rate Limits. No action is required to enable Smart Rate Limits on your account or Workflows.

## How it works

Smart Rate Limits automatically limit the pressure of all requests sent to an API by your Workflows, backing off and retrying when a rate limit is exceeded.

When a Smart Rate Limit is enforced, your workflow will be paused until it is safe to proceed with additional requests.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Task%20History_%20Execution%20View%20(1).png" alt="" />
</Frame>

You can see the status of your paused workflow in Task History, along with the scheduled resumption time. When the workflow resumes, it will retry the last request that was suspended or failed.

### Supported integrations

The following integrations have Smart Rate Limits built-in and will respect known rate limits for their APIs. We are actively expanding support for Smart Rate Limits across our complete integrations catalog.

* Salesforce
* HubSpot (currently not available for `Search Records` or `Get All Records` actions)
* NetSuite
* Zendesk


# Integration Actions
Source: https://docs.useparagon.com/workflows/integration-actions



**Integration Actions, or just Actions, are the main building blocks of Paragon Workflows.** Paragon's workflow builder provides Actions for each integration provider that allow you to perform operations in your users' apps.

For example, common Actions include:

* Create a Salesforce contact
* Send a Slack message
* Update a Hubspot account
* List Google Calendar events

Paragon provides a simple-to-use UI for configuring and mapping data into each Action - making it easy to use Actions without any prior knowledge of an integration provider's API.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Viewing%20a%20Slack%20Workflow%20in%20Paragon%20Connect.png" alt="" />
</Frame>

## Workflow User Settings

In some cases, you may want to provide your users the option to configure certain workflow settings. For example, if you have a Slack workflow that sends notifications to your users' workspaces, you may want to provide them the option of which Slack channel they want to send notifications to.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20a%20Slack%20channel%20in%20your%20Paragon%20Connect%20Portal.png)
</Frame>

Actions in Paragon will indicate when they accept User Settings as an input parameter. In these cases, you should add the respective User Settings in the Connect Portal Editor, then use the **variable menu** by typing two left curly braces `{{` to reference that User Setting in the Action sidebar.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Choosing%20a%20Slack%20channel%20to%20send%20notifications%20to%20in%20Paragon.gif)
</Frame>

See [Workflow User Settings](/connect-portal/workflow-user-settings) for an in-depth overview of how to configure User Settings and use them in tandem with Actions.

<Card title="User Settings" href="/connect-portal/workflow-user-settings" horizontal />

## Using Actions

For a complete list of all Actions supported by each Integration Provider, see our [Integrations Provider section](/resources/integrations).

<Card title="Integration Providers" href="/resources/integrations" horizontal />


# Making API Requests
Source: https://docs.useparagon.com/workflows/requests

Making HTTP requests with Paragon

## Overview

You can make requests to any HTTP API using Paragon's Request step. This is useful for connecting workflows to your application's internal API, or with any REST APIs in general.

To provide a common use case, let's say you want to receive real-time data (webhooks) from your users' apps - for example, whenever new Salesforce contacts are created. You can accomplish this with a Workflow that's triggered by new records in Salesforce, then using a Request step to POST the new Salesforce records to your application's API.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20\(39\).png)
</Frame>

## Making a Request

To add a request to your workflow, click the "+" button in the workflow canvas and choose the Request step from the sidebar. You can follow familiar specifications to setup requests in Paragon:

* URL

* Request type

  * `POST`

  * `GET`

  * `PATCH`

  * `PUT`

  * `DELETE`

* Request data

  * Query parameters

  * Headers

  * Body parameters

    * `JSON`

    * `multipart/form-data`

    * `x-www-form-urlencoded`

    * `Raw`

  * Authorization

    * `Bearer Token`

    * `Basic Auth`

### Configuring your Request URL

You can enter the request URL in the input under "**Request URL"**. You can also include parameters as part of the URL by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Including%20parameters%20in%20a%20URL%20request%20in%20Paragon.png)
</Frame>

The **variable menu** allows you to reference data from upstream steps in your request URL. For example, we can pass a `userId` from the Trigger into the request URL, which is represented as: `/users/{{1.event.userId}}`

### Sending data in a request

Query parameters, headers, and body parameters can be included in the request by adding them in the key-value table under their respective heading.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Sending%20a%20JSON%20request%20in%20Paragon.gif)
</Frame>

When using the key-value table, you can type in **static values** or **reference variables** from upstream steps by invoking the variable menu using the dropdown button.

### Sending JSON in a request

You can easily send JSON in a request by choosing `Raw` in the dropdown to the right of Body. When creating the raw JSON body, you can type in **static values** or **reference variables** from upstream steps by typing `{{` to invoke the variable menu.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Sending%20nested%20JSON%20through%20a%20Request%20step%20in%20Paragon.png)
</Frame>

### Sending File Data in a request

You can send file data in a request by adding a `X-Paragon-Encoding` header. The encoding should be set to encoding used in the file, like `hex`.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Sending%20files%20to%20your%20application%20in%20Paragon%20Connect.png" alt="" />
</Frame>

### Handling request failures

You can choose whether or not the workflow should continue to the next step if the request fails under "Continue workflow if request fails". This option is useful if you want to conditionally handle request failures. You can do this by adding a Conditional step after the Request step, then referencing the request's response status code in the Conditional.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Handling%20request%20failures%20with%20a%20conditional%20step%20in%20Paragon.png)
</Frame>

## Making an Integration Request

Like the Request step, the **Integration Request** is a per-integration step that allows you to make HTTP calls to any endpoint the integration supports. This means you can access actions that aren't yet supported natively by Paragon.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20the%20Integration%20Request%20step%20for%20Slack%20in%20Paragon%20Connect.png" alt="" />
</Frame>

### Configuring the Authentication

We've got you covered! You can leave out the authentication piece to connect to your integration's API since you've connected using Paragon. We prefix the URL of each integration, so you only have to enter the API endpoint and any parameters.

### Replacing the Base URL

If you need to overwrite the default base URL Paragon provides for any request you make to the integration provider, you can do so by typing `https://` in the input followed by the rest of the URL.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Replacing%20the%20Base%20URL%20for%20an%20integration%20in%20Paragon%20Connect.gif" alt="" />
</Frame>


# Request Pagination
Source: https://docs.useparagon.com/workflows/requests/request-pagination

Configuring requests for data that span multiple pages.

Integration APIs commonly enforce limits for how many results can be returned in a single request. When you need to access more results, the API will provide a value in the response to use in your next request to get the next page of results.

Our native [Integration Actions](/workflows/integration-actions) use pagination automatically, but Request and Integration Request steps can also be configured to page across multiple requests.

Request steps with Pagination will wait until all requests for data have been completed before proceeding in the workflow.

## Configuring Pagination

[Some native Paragon integrations](/workflows/requests/request-pagination#integrations-supporting-pre-configured-pagination) include pre-configured pagination. For these integrations, toggling **Pagination** will enable the pre-configured strategy, and you can optionally configure the Limit, Skip, and Previous Page options.

* **Limit:** Specify a numerical record limit of records to fetch.
* **Skip:** Specify a numerical record offset indicating where to start request pagination.
* **Previous Page:** Specify a page token indicating where to start request pagination.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/CleanShot%202024-10-31%20at%2010.12.56.png" alt="" />
</Frame>

For integrations that do not support pre-configured pagination, you can still configure your request with [Custom Pagination](/workflows/requests/request-pagination#custom-pagination).

### Custom Pagination

Before configuring Custom Pagination, press Test Step in your Request to make sure that you have Test Data to work with. This will be required to select fields from the output to configure subsequent, paginated requests.

After confirming that this step has Test Data, turn on the **Pagination** switch (below Authorization) for the Request step.

Custom Pagination requires you to configure 3 values:

* **Output**: Select the field from Test Data that represents a single page of results. Output must be an Array-type value, which will be aggregated across the paginated requests.
* **Page Token**: Select a field from Test Data to use as a parameter for subsequent requests.
* **Stop When**: Specify a condition for when request pagination should end. For example, "`.nextPageToken` Is `null`".

Finally, you'll need to use the **Page Token** value in the Request step configuration to make paginated requests fetch the next page of available data.

For example, if the API expects you to pass the Page Token as a query parameter called `cursor`, you can add this parameter to your request with the value `{{self.pageToken}}`.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Pagination%20Example.png" alt="" />
</Frame>

### Testing

You can test your Request Pagination by clicking Test Step after configuring the above options.

In test mode, Request steps will only attempt to page once after the initial request. Verify that your request is paging correctly by checking the output array.

## Auto-Retry and Errors

Requests that use Pagination will automatically attempt to retry requests that fail due to rate limits with an exponential backoff strategy.

If pagination cannot continue, then the step will provide the partial set of results that it successfully requested alongside the final error that occurred before the Request step.

**Example output:**

```json
{
    "response": {
        "results": [...],
        "error": {
            "message": "401 - Unauthorized"
        }
    }
}
```

To handle errors from Request steps using Pagination, you can use a Conditional step to check for the presence of the `error` field before continuing the workflow.

## Task Usage

Each page fetched in a Request step with Pagination configured will consume 1 task. For example, a Request that uses 150 requests to fully page through your user's data will consume 150 tasks.

You can configure your request to use larger page sizes (as allowed by the integration) to reduce the number of tasks that your Request step consumes.

## Tutorial: Using Pagination for Slack channels

As an example of configuring Request Pagination, we'll implement a workflow that uses Slack's API to get all channels from a Slack workspace.

The API endpoint we will use is `conversations.list` ([see Slack documentation](https://api.slack.com/methods/conversations.list)).

Slack allows for a maximum of 1000 channels to be retrieved at a time, but recommends no more than 200:

> This method uses cursor-based pagination to make it easier to incrementally collect information. To begin pagination, specify a `limit` value under `1000`. We recommend no more than `200` results at a time.
>
> Responses will include a top-level `response_metadata` attribute containing a `next_cursor` value. By using this value as a `cursor` parameter in a subsequent request, along with `limit`, you may navigate through the collection page by virtual page.

1. Start by creating a Slack Request step in a workflow and configuring it to use `conversations.list` in the URL.

   <Frame>
     <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Slack%20Pagination%20Tutorial%20-%20Screen%201.png" alt="" />
   </Frame>

   Click **Test Step** to see the output of this step and confirm that you see Slack channels from your connected Preview account.

2. Next, turn on Pagination. You will see 3 new fields appear to configure: Output, Page Token, and Stop When.

   1. Set **Output** to the array of channel results by clicking on the Output field and using `{{` to open the variable menu. Select the `response.body.channels` field from Test Data.

      <Frame>
        <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Slack%20Pagination%20Tutorial%20-%20Select%20Output.png" alt="" />
      </Frame>

   2. Set **Page Token** to the field that will be used as the "cursor" field of the request. Slack returns the result in `response.body.response_metadata.next_cursor`, as mentioned in their documentation quoted above.

   3. Set **Stop When** to "`response.body.response_metadata.next_cursor` does not exist". This means that we will stop paging for additional results when Slack does not send us a `next_cursor` value in the last response.

3. According to the Slack documentation quoted above, we can request the next page with the `cursor` query parameter. Add `cursor` to the **URL Parameters** and use `{{` to open the variable menu and set the value to **Page Token**.

   <Frame>
     <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Slack%20Pagination%20Tutorial%20-%20Page%20Token.png" alt="" />
   </Frame>

4. Test the step again to verify that pagination is working as intended. Any errors that occur during pagination will appear in Test Data.

## Integrations Supporting Pre-configured Pagination

* Asana
* Salesforce
* SharePoint
* Dynamics Business Central
* Dynamics 365 Finance
* Dynamics 365 Sales
* Microsoft Teams
* Outlook
* OneDrive
* Azure DevOps
* Jira


# Triggering Workflows
Source: https://docs.useparagon.com/workflows/triggers

Triggering workflows in Paragon

**All Paragon workflows start with a trigger**, which determines when the workflow will run and how data is passed into the workflow.

Click into any of the triggers below to learn more about the trigger type and how to configure it for your workflow.

<CardGroup cols={2}>
  <Card title="App Event" href="/workflows/triggers/app-events">
    Use one event from your app to trigger workflow(s) across any integrations.

    <br />**Example**: "Contact Created" event from your app routes to Salesforce, HubSpot, or Pipedrive (depending on what integrations are connected)
  </Card>

  <Card title="Request" href="/workflows/triggers/request-trigger">
    Send an HTTP request from your app to a specific integration and workflow, optionally receiving a synchronous response.

    <br />**Example**: Expose an HTTP endpoint to a workflow that searches Google Drive documents and returns results to your app.
  </Card>

  <Card title="Integration Trigger" href="/workflows/triggers/integration-trigger">
    Listen for events from your users' integrations, using our prebuilt triggers or [Custom Webhooks](/resources/custom-webhooks).

    <br />**Example**: Listen for new contacts that are created in your user's Salesforce account.
  </Card>

  <Card title="Integration Enabled" href="/workflows/triggers/integration-enabled-trigger">
    Trigger a workflow when an integration is initially connected and set up by your user.

    <br />**Example**: Create custom fields in your user's HubSpot account after they have connected the integration.
  </Card>

  <Card title="Scheduler" href="/workflows/triggers/scheduler-trigger">
    Trigger a workflow on a recurring schedule.

    <br />**Example**: Every day at 12:00 AM, export all Pipedrive activities that were created in the last 24 hours and send them to your app.
  </Card>

  <Card title="API Resource Trigger" href="/workflows/triggers/api-resource-trigger">
    Listen for webhooks from your configured [Resources](/resources/api-resources), such as your internal API.

    <br />**Example**: Listen for a User Created webhook to fire from your app.
  </Card>
</CardGroup>


# API Resource Trigger
Source: https://docs.useparagon.com/workflows/triggers/api-resource-trigger

Trigger workflows with your existing webhooks API

API Resource Triggers are triggers configured to use your API's webhooks to start workflows. To use this trigger, you must have an API Resource configured: [API Resources](/resources/api-resources).

## Defining an API Resource Trigger

To start creating an API Resource Trigger, open your Resource in the dashboard and click **Create Trigger**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image.png" alt="" />
</Frame>

The Custom Webhook setup page will open and prompt you to define the trigger setup details. See more about how to use the Custom Webhook setup here: [Custom Webhooks](/resources/custom-webhooks)

## Using an API Resource Trigger

To use an API Resource Trigger in a workflow, click your Resource name in the trigger types and select the trigger that you defined.

<Note>
  **Note:** Only fully-configured triggers that have completed the Custom Webhook setup will appear in this menu.
</Note>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/image%20(1).png" alt="" />
</Frame>

## Webhook Subscriptions

For user-level API Resource triggers, the webhook will subscribe when a Connected User has successfully established a Resource Connection via [`connectAction`](/resources/api-resources#connecting-resources) in the SDK and has enabled at least one workflow which is triggered by an API Resource trigger.

The webhook subscription will only be created once per unique API Resource trigger type. However, one webhook event can trigger multiple workflows connected to the same trigger type.


# App Events
Source: https://docs.useparagon.com/workflows/triggers/app-events



App Events are custom events that are sent programmatically from your application via the Paragon SDK or API to trigger Workflows. In general, App Events are useful for triggering workflows that map data from your application to your users' apps.

For example, you might send a "Contact Created" App Event from your application to trigger a Workflow that creates a matching contact in your users' Salesforce CRM.

**Once defined, an App Event can be used to trigger multiple workflows.** This is useful in cases where you may want the same event to trigger similar workflows across different integrations.

For example, the same "Contact Created" event in the above example could trigger one workflow that creates a contact in Salesforce, and another workflow that creates a contact in HubSpot. This allows you to easily provide the same integration functionality across different providers without any additional engineering.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20an%20App%20Event%20for%20multiple%20workflows%20in%20Paragon.png)
</Frame>

### Creating an App Event

To create an App event, select the **App Event** trigger type in the Workflow editor and choose "Create new app event" in the menu under **Choose an App Event**.

Next, enter the name and event schema of your App Event. The **event schema** that you enter here should be an example payload sent from your application to Paragon. The event schema defined here will be used as test data for any workflows triggered by this App Event.

<Note>
  The **event schema** must be a valid JSON object, and can contain <u>any arbitrary JSON</u>.
</Note>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Screen%20Shot%202021-02-15%20at%2012.51.29%20PM.png)
</Frame>

### Sending an App Event

App Events can be sent from your application using the Paragon SDK or REST API. In both cases, you must pass two parameters:

* **name** - the event name defined in your App Event
* **payload** - the event payload that should match the event schema defined in your App Event

See the code examples below for how to send App Events using the Paragon SDK or API.

<Tabs>
  <Tab title="JavaScript SDK">
    ```js
    var eventName = "Contact Created";
    var eventPayload = { "name": "Brandon", "email": "b@useparagon.com" };

    // Called once during your user's session 
    paragon.authenticate("project-id", <Paragon User Token>)

    // Trigger the "Contact Created" App Event
    paragon.event(eventName, eventPayload)
    ```
  </Tab>

  <Tab title="REST API">
    ```bash
    // Trigger the "Contact Created" App Event
    POST https://api.useparagon.com/projects/<Paragon Project ID>/sdk/events/trigger

    Authorization: Bearer <Paragon User Token>
    Content-Type: application/json

    // Body
    { 
        "name": "Contact Created", 
        "payload": { 
            "name": "Brandon", 
            "email": "b@useparagon.com" 
        } 
    }
    ```

    <Note>
      **Note:** You'll receive a `201` response code as confirmation that your event has been successfully received. This is due to the one-to-many nature of these triggers, which means Paragon cannot simultaneously provide all potential responses from the various workflows your event may initiate.
    </Note>
  </Tab>
</Tabs>

Paragon sends a `201` response and does not validate event payloads against the defined schema when your application sends live events, regardless of whether they trigger any workflows.

### Managing App Events

If you need to edit your App Events' name or event schema, you can visit the App Events tab in your Paragon dashboard to view and manage your app events.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Managing%20App%20Events%20in%20Paragon.png)
</Frame>


# Integration Enabled Trigger
Source: https://docs.useparagon.com/workflows/triggers/integration-enabled-trigger



Integration Enabled triggers can be used to run workflows when a user initially activates your integration. For example, you might want to trigger a workflow that syncs all leads from your customer's CRM to your application once they've enabled the integration.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Triggering%20a%20Paragon%20Connect%20workflow%20once%20the%20integration%20is%20enabled.png)
</Frame>

The Integration Enabled trigger will fire when your user connects their integration to an account and they have completed any required [User Settings](/connect-portal/workflow-user-settings) in the Connect Portal.

<Note>
  **Note:** Integration-enabled trigger workflows are displayed as **"Not Enabled"** when viewing users' integrations in the Connected Users Dashboard.

  This status does not affect functionality; the workflow will trigger and execute successfully once activated by the Connected User. You can confirm the workflow’s execution via the [Task History](/monitoring/viewing-task-history) page.
</Note>


# Integration Trigger
Source: https://docs.useparagon.com/workflows/triggers/integration-trigger



Integration Triggers can be used to run workflows based on events in your users' apps. For example, you might want to trigger a workflow whenever new contacts are created in your users' Salesforce account to sync your users' Salesforce contacts to your application in real-time.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Salesforce%20Webhook%20Trigger%20in%20Paragon%20Connect.png)
</Frame>

You can find the full list of supported Integration Triggers below. If you don't see the integration you're looking for, [let us know](mailto:team@useparagon.com) and we'll be happy to add it to our roadmap if we're not already working on it.

## Supported Integrations

<Note>
  **Note**: When webhooks are not supported by an integration, Paragon may use a polling process to detect updates for Integration Triggers. Polling triggers send one request per minute to an account to check on created / updated records.

  Integrations which use polling triggers are marked with ⁺ below.
</Note>

* [Asana](/resources/integrations/asana#using-webhook-triggers)
* [Calendly](/resources/integrations/calendly#using-webhook-triggers)
* [ClickUp](/resources/integrations/clickup#using-webhook-triggers)
* [Close](/resources/integrations/close#using-webhook-triggers)
* [DocuSign](/resources/integrations/docusign#using-webhook-triggers)
* [Dropbox](/resources/integrations/dropbox#using-webhook-triggers)⁺
* [Dynamics 365 CRM](/resources/integrations/microsoft-dynamics-365)⁺
* [Dynamics 365 Business Central](/resources/integrations/dynamicsbusinesscentral#using-webhook-triggers)
* [GitHub](/resources/integrations/github#using-webhook-triggers)
* [Gmail](/resources/integrations/gmail#using-webhook-triggers)
* [Google Calendar](/resources/integrations/google-calendar#using-webhook-triggers)⁺
* [Google Drive](/resources/integrations/google-drive#using-webhook-triggers)⁺
* [Google Sheets](/resources/integrations/google-sheets#using-webhook-triggers)⁺
* [Greenhouse](/resources/integrations/greenhouse#using-webhook-triggers)
* [HubSpot](/resources/integrations/hubspot#using-webhook-triggers)
* [Intercom](/resources/integrations/intercom#using-webhook-triggers)
* [Jira](/resources/integrations/jira#using-webhook-triggers)⁺
* [Lever](/resources/integrations/lever#using-webhook-triggers)⁺
* [Linear](/resources/integrations/linear#using-webhook-triggers)
* [Mailchimp](/resources/integrations/mailchimp#using-webhook-triggers)
* [Marketo](/resources/integrations/marketo#using-webhook-triggers)⁺
* [Microsoft Outlook](/resources/integrations/outlook#using-webhook-triggers)⁺
* [Microsoft Teams](/resources/integrations/microsoft-teams#using-webhook-triggers)⁺
* [Monday.com](/resources/integrations/monday#using-webhook-triggers)
* [Notion](/resources/integrations/notion#using-webhook-triggers)⁺
* [OneDrive](/resources/integrations/onedrive#using-webhook-triggers)
* [Outreach](/resources/integrations/outreach#using-webhook-triggers)⁺
* [Pardot](/resources/integrations/pardot#using-webhook-triggers)⁺
* [Pipedrive](/resources/integrations/pipedrive#using-pipedrive-triggers)⁺for Lead Created trigger
* [QuickBooks](/resources/integrations/quickbooks#using-webhook-triggers)⁺
* [Sage Intacct](/resources/integrations/sage-intacct)⁺
* [Salesforce](/resources/integrations/salesforce#using-webhook-triggers)⁺
* [Salesloft](/resources/integrations/salesloft#using-webhook-triggers)
* [Sharepoint](/resources/integrations/sharepoint#using-webhook-triggers)⁺
* [Shopify](/resources/integrations/shopify#using-webhook-triggers)
* [Slack](/resources/integrations/slack#using-webhook-triggers)
* [Xero](/resources/integrations/xero#using-webhook-triggers)⁺
* [Zendesk](/resources/integrations/zendesk#using-webhook-triggers)
* [Zoho CRM](/resources/integrations/zohocrm#using-webhook-triggers)⁺
* [Zoom](/resources/integrations/zoom#using-webhook-triggers)


# Request Trigger
Source: https://docs.useparagon.com/workflows/triggers/request-trigger



The Request trigger can be used to run workflows by sending it an **HTTP request or webhook**. Request triggers allow passing data from the incoming HTTP request into the workflow.

* **Example:** when a lead is created in your app, send lead data to your customer's CRM and provide a custom response upon success.

Request triggers can also be used to create API Endpoints that send synchronous results back to your app. For more about sending results, see [Sending a Response](/workflows/triggers/request-trigger#sending-a-response).

* **Example:** expose an endpoint that gets called by your app to pull contacts from their CRM.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20the%20Request%20Trigger%20in%20Paragon%20Connect.png)
</Frame>

Request-triggered workflows can be triggered by sending an HTTP `POST` request to their unique URL. You can manually enter the expected query parameters (Params), headers (Headers), and body parameters (Body) to use as variables by other steps in the workflow.

<Tabs>
  <Tab title="JavaScript SDK">
    ```js
    // Called once during your user's session 
    paragon.authenticate("project-id", <Paragon User Token>)

    // Trigger the "Lead Created" workflow
    await paragon.workflow("<workflow_id>", {
      "query": {
        },
      "headers": {
        "Content-Type": "application/json"
      },
      "body": {
        "email": "bowie@useparagon.com",
        "first_name": "Bowie",
        "last_name": "Foo"
      }
    });
    ```
  </Tab>

  <Tab title="REST API">
    ```bash
    // Trigger the "Lead Created" Workflow
    POST https://zeus.useparagon.com/projects/<Paragon Project ID>/sdk/triggers/<Workflow ID>

    Authorization: Bearer <Paragon User Token>
    Content-Type: application/json

    // Body
    {
      "email": "bowie@useparagon.com",
      "first_name": "Bowie",
      "last_name": "Foo
    }
    ```
  </Tab>
</Tabs>

### Defining Test Data

There are two ways to define what data you expect to be sent by incoming requests to the workflow:

* **Manually entering the expected request data**
* **Automatically detecting data by sending a test request**

**Manually entering request data** is usually the best option if you know what data will be sent by the incoming request (e.g. you're sending it from your own app). This option allows you to manually enter the expected query parameters (Params), headers (Headers), and body parameters (Body). Any data entered here can be used as variables by other steps in the workflow.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Manually%20Entering%20Request%20Data%20in%20Paragon.gif)
</Frame>

You can also choose to validate the incoming request data. For example, you can enforce that query parameters should be required, that headers should match an expected value, or that body parameters should match an expected type. If the incoming request doesn't meet your workflow's validation rules, the workflow will automatically return an error response.

**Automatically detecting data from a test request** is usually the best option if you have a large amount of data to pass through. When you choose this option, the test shelf will appear and display a test URL at the bottom of the step sidebar. By sending a request to the test URL, Paragon will automatically detect data from the request and display it in the test shelf. Here, it'll be saved as test data that can be used as variables by other steps in the workflow.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Testing%20a%20trigger%20in%20Paragon.gif)
</Frame>

Once you're ready to start using a Request workflow in production, click the "Deploy" button in the top-right of the screen to deploy the workflow. This will set the workflow's endpoint URL live and make it available for requests to be sent to.

### Triggering with Files

Paragon offers multiple ways to manage files within your workflows, enabling features like sending email attachments and retrieving files from storage providers such as OneDrive.

#### Hex-encoded file

You can pass in hex-encoded data in a Paragon file object to either an [App Event](/workflows/triggers/app-events) or Request Trigger to be handled in the workflow. Here’s an example file object structure:

```json
{
	"name": "test.txt", // File name
	"data": "5468697320697320612073616d706c6520746578742e", // hex encoded data string
	"mimeType": "text/plain", // File type and subtype
	"dataType": "FILE" // Paragon specific property
}
```

#### multipart/form-data

[multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) is a MIME encoding type used for sending binary data, like files, and text data in a single HTTP request.

```bash
POST /projects/<Your Project ID>/sdk/triggers/<Workflow ID> HTTP/1.1
Host: zeus.useparagon.com

Authorization: Bearer <Paragon User Token>
Content-Length: <Length>
Content-Type: multipart/form-data; boundary=----12345

------12345
Content-Disposition: form-data; name="paragon-file"; filename="1efc9f67-5758-4ab0-9b0e-2484e5900ae4"
Content-Type: <Content-Type header here>

(data)
------12345--
```

## Sending a Response

Request-triggered workflows support sending a custom response to the original HTTP request that triggered the workflow.

<Note>
  **Note**:

  * If your Request-triggered workflow does not require a custom response, your workflow will respond immediately upon request with 202 Accepted.
  * When using a custom response, your workflow will have a limit of 55 seconds to reach the Response step. If your workflow may potentially run longer, you will need to handle timeout errors. See [Response time limitations](/workflows/triggers/request-trigger#response-time-limitations) below for more details.
</Note>

To add a response to your workflow, click the "+" button in the workflow canvas and choose the Response step in the sidebar.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Responses%20in%20Paragon%20Connect.png)
</Frame>

### Defining response data

There are two components to a Response: its status code and its data.

In general, you should send the `200: OK` status code if the workflow ran successfully, you can choose from other commonly used status codes for more specific cases (e.g. if a Request failed, send an error response).

You can choose what data to send the response body using the key-value table to reference data from previous steps in the workflow.

### Sending files in responses

You can use the Response step to send files to your application. To do so, select "File" as the Response Type and reference a File object from a previous step.

File objects are returned from file-related Integration Actions and Request steps which include a file in the response.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/[Paragon]%202024-09-24%20at%2011.58.04%20AM@2x.png" alt="" />
</Frame>

A File Response will be returned to the original HTTP request with the `Content-Type` of the file's MIME type and the raw bytes of the underlying file.

### Response time limitations

When using a custom response, your workflow will have a limit of 55 seconds to reach the Response step. If your workflow does not reach the Response step in that time, the HTTP request will respond with a **542 status code** to indicate a response timeout.

A 542 status code *does not indicate* that your workflow was unsuccessful; your workflow may still be running, but the results were not processed in time to provide a synchronous response. The timeout response will be returned as a JSON body which includes the workflow execution ID for your reference.

You can use this ID to retrieve results using the [Task History API](/apis/task-history) or to view results in the dashboard's [Task History view](/monitoring/viewing-task-history).

* Link to view execution in Task History: `https://dashboard.useparagon.com/connect/projects/[Project ID]/history/workflows/[Workflow ID]/executions/[Workflow Execution ID]`

**Example timeout response**

```json
{
    "message": "Workflow has been enqueued but has not completed.",
    "dateSubmitted": "2024-09-24T01:07:13.658Z",
    "projectId": "...",
    "workflowId": "...",
    "executionId": "..."
}
```


# Scheduler Trigger
Source: https://docs.useparagon.com/workflows/triggers/scheduler-trigger



The Scheduler trigger is used for workflows that should run automatically at a **scheduled time or interval**.

<Frame>
  ![](https://gblobscdn.gitbook.com/assets%2F-MCJwlyhqtCdBfCLUO0d%2F-MCK3fVEMwn-wSf2u0rs%2F-MCK480bq-rDimZiDVII%2FScheduler%20Trigger.png?alt=media\&token=7f87f73a-c62b-4f56-bee5-d540a05d2e17)
</Frame>

The Scheduler trigger provides the following scheduling options:

* **Seconds** (e.g. every 5 seconds)
* **Minutes** (e.g. every 30 minutes)
* **Hourly** (e.g. every hour at 15 minutes past the hour)
* **Daily** (e.g. every 2 days at 9:00 am)
* **Weekly** (e.g. every Monday at 12:00 pm)

Once deployed, the workflow will run automatically at the designated time for all users who have activated the workflow in their Connect Portal.

### Configuring Variable Time Zones

You can configure the Scheduler such that workflows run at a specific time in the user's time zone by using [User Metadata](/apis/users).

Paragon uses IANA-formatted time zones. For example, you would use `America/Los_Angeles` for users in the Pacific Time Zone. You can view a full list of time zone identifiers [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Setting%20up%20Variable%20Timezones%20for%20Schedulers%20in%20Paragon%20Connect.png" alt="" />
</Frame>


# Using Conditionals
Source: https://docs.useparagon.com/workflows/using-conditionals

Add conditional branching logic to your workflows

## Overview

You can add conditional logic to workflows in Paragon using our Conditional step. Conditionals allow you to define rules to determine which of two paths your workflow should execute.

To add a conditional to your workflow, click the "+" button in the workflow canvas and choose the Conditional step from the sidebar.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Conditionals%20in%20a%20Paragon%20Connect%20workflow.gif" alt="" />
</Frame>

## Conditional rules

To add a rule to your conditional, click the dropdown menu in the 'select from step' input to choose a value that you want to evaluate. In the input to the right, you can choose a conditional operator (e.g. is true, equals, greater than).

<Note>
  **Note:** Operators depend on the value's type - for example, "greater than" only works for numbers, "exactly matches" only works for strings, etc.
</Note>

### Conditional operators

* Contains: `string`
* Does not contain: `string`
* Exactly matches: `string`
* Does not exactly match: `string`
* Is in: `string`
* Is not in: `string`
* Starts with: `string`
* Does not start with: `string`
* Ends with: `string`
* Does not end with: `string`
* Greater than: `integer`
* Less than: `integer`
* Equals: `integer`
* Does not equal: `integer`
* After: `date/time`
* Before: `date/time`
* Equals: `date/time`
* Is true: `boolean`
* Is false: `boolean`
* Is Not Null
* Is Null
* Exists
* Does not exist
* Is empty: `Array`
* Is not empty: `Array`

If you choose a relational operator, another input will appear where you can type or choose or a second value to compare to.

You can combine multiple rules using **"and"** and **"or"** operators.


# Using Dynamic Variables
Source: https://docs.useparagon.com/workflows/using-dynamic-variables

Pass data from your application, the Connect Portal, and previous steps.

## Overview

The Dynamic Variable Menu allows you to select data from your application, the Connect Portal, or previous steps. For example, you might want to dynamically reference data from your application's actions when creating new messages in Slack.

## Accessing Dynamic Variables

To access the Dynamic Variable Menu:

1. Click into any text input box.
2. Type two left curly braces `{{` .
3. Select the step you want to pull data from.
4. Select the specific reference you want to use.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Sending%20notifications%20to%20Slack%20from%20Paragon%20Connect.gif" alt="" />
</Frame>


# Using Fan Out
Source: https://docs.useparagon.com/workflows/using-fan-out

Run a sequence of steps over each object in an array.

## Overview

Fan Out allows you to run the same sequence of steps over each object in an array (or list) of objects. For example, you might want to query a segment of users from your database and send each user a message.

To add a Fan Out to your workflow, click the "+" button in the Workflow Editor and choose Fan Out from the sidebar. Then, click the dropdown button under "Fan out which array?" to invoke the dynamic variable menu and choose the array you want to fan out.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20a%20Fan%20Out%20in%20Paragon%20Connect.gif" alt="" />
</Frame>

## Referencing data within a Fan Out

Any steps you add within a Fan Out will run for each object in the array passed into the Fan Out. To reference the object in the array from within a Fan Out, you can reference the Fan Out's `instance` object from the variable menu.

<Note>
  **Note:** Iterations within a Fan Out are executed in parallel, although your workflow will wait for all iterations to finish before proceeding to steps after the Fan Out.
</Note>


# Version History
Source: https://docs.useparagon.com/workflows/version-history

Review and restore previous versions of your workflow. Check or revert to earlier workflow versions.

<Info>
  If [Git Sync](/paragraph/setting-up-git-sync) is enabled, saving a version within Paragon also saves the changes to your connected Git repo.
</Info>

## Overview

Version History keeps track of the important changes to your workflow.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Version%20History%20in%20Paragon%20Connect.png" alt="" />
</Frame>

You can filter the list of versions by:

* All Versions
* Named versions
* Saved versions
* Deployed versions

## Saving a new version of your workflow

Versions will be made whenever you perform one of the following actions:

* Deploy the workflow
* Press ⌘⇧S on macOS or `CTRL` + `Shift` + `S` on Windows
* Restore to a previous version
* Manually click "Save Version" in the triple-dot menu
* Every 10th update or edit to your workflow

## Viewing or reverting to earlier versions of workflows

1. In [Paragon](https://app.useparagon.com/), open your workflow.

2. Click the **Horizontal three dots > Manage Versions**

3. Click a timestamp to see a previous version of the workflow. Below the timestamp, you'll see the name of the person who saved or deployed the workflow.

4. (Optional) To revert to this version, click **Restore this version.**

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/Using%20Version%20History%20in%20Paragon%20Connect.gif" alt="" />
</Frame>

## How long versions are saved

The number of days versions will be saved depends on your plan.

* **Trial:** 45 days
* **Pro:** 90 days
* **Enterprise:** Unlimited

<Note>
  **Note:** Versions older than your history limit are accessible upon upgrading.
</Note>


# Working with Files
Source: https://docs.useparagon.com/workflows/working-with-files



## Overview

Paragon offers multiple ways to manage files within your workflows, enabling features like sending email attachments and retrieving or uploading files from storage providers such as Google Drive.

## Sending Files to Paragon

#### Hex Encoded Data

You can pass in **hex encoded** data in as a Paragon File Object to either an [App Event](/workflows/triggers/app-events) or [Request](/workflows/triggers/request-trigger) Trigger to be handled in the workflow. Here’s an example file object structure:

```http
// Trigger the "File Upload" Workflow
POST https://zeus.useparagon.com/projects/<Paragon Project ID>/sdk/triggers/<Workflow ID>

Authorization: Bearer <Paragon User Token>
Content-Type: application/json

// Body

{
	"name": "test.txt", // File name
	"data": "5468697320697320612073616d706c6520746578742e", // hex encoded data string
	"mimeType": "text/plain", // File type and subtype
	"dataType": "FILE" // Paragon specific property
}
```

#### multipart/form-data

[multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) is a MIME encoding type used for sending binary data, like files, and text data in a single HTTP request. It can also be submitted as a POST request to a Request Trigger

```http
POST /projects/<Your Project ID>/sdk/triggers/<Workflow ID> HTTP/1.1
Host: zeus.useparagon.com

Authorization: Bearer <Paragon User Token>
Content-Length: <Length>
Content-Type: multipart/form-data; boundary=----12345

------12345
Content-Disposition: form-data; name="paragon-file"; filename="1efc9f67-5758-4ab0-9b0e-2484e5900ae4"
Content-Type: <Content-Type header here>

(data)
------12345--
```

## Usage

### Workflows

You can send files to a workflow [App Event](/workflows/triggers/app-events) or [Request Triggers](/workflows/triggers/request-trigger). Set up your Request Trigger with [test data](/workflows/building-workflows#testing-workflows) by defining the parameters or sending a test request to the provided test endpoint:

<Frame caption="Paragon File Object used as test data">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/file-upload-example.png" alt="" />
</Frame>

After you've received the file object in the test data, you can reference the object in any of your workflow steps to be uploaded using a dropdown like the Google Drive File Upload action shown here:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/file-upload-example3.png" alt="" />
</Frame>

Or use our [Dynamic Variables](/workflows/using-dynamic-variables) to reference the file to POST to an upload endpoint of your choosing!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/paragon/assets/file-upload-example4.png" alt="" />
</Frame>


