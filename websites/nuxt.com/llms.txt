# Nuxt Docs

> Nuxt is an open source framework that makes web development intuitive and powerful. Create performant and production-grade full-stack web apps and websites with confidence.

## Documentation Sets

- [Nuxt Docs](https://nuxt.com/llms-full.txt): The complete Nuxt documentation and blog posts written in Markdown (MDC syntax).

## Docs

- [Introduction](https://nuxt.com/docs/getting-started/introduction): Nuxt's goal is to make web development intuitive and performant with a great Developer Experience in mind.
- [Installation](https://nuxt.com/docs/getting-started/installation): Get started with Nuxt quickly with our online starters or start locally with your terminal.
- [Configuration](https://nuxt.com/docs/getting-started/configuration): Nuxt is configured with sensible defaults to make you productive.
- [Views](https://nuxt.com/docs/getting-started/views): Nuxt provides several component layers to implement the user interface of your application.
- [Assets](https://nuxt.com/docs/getting-started/assets): Nuxt offers two options for your assets.
- [Styling](https://nuxt.com/docs/getting-started/styling): Learn how to style your Nuxt application.
- [Routing](https://nuxt.com/docs/getting-started/routing): Nuxt file-system routing creates a route for every file in the pages/ directory.
- [SEO and Meta](https://nuxt.com/docs/getting-started/seo-meta): Improve your Nuxt app's SEO with powerful head config, composables and components.
- [Transitions](https://nuxt.com/docs/getting-started/transitions): Apply transitions between pages and layouts with Vue or native browser View Transitions.
- [Data Fetching](https://nuxt.com/docs/getting-started/data-fetching): Nuxt provides composables to handle data fetching within your application.
- [State Management](https://nuxt.com/docs/getting-started/state-management): Nuxt provides powerful state management libraries and the useState composable to create a reactive and SSR-friendly shared state.
- [Error Handling](https://nuxt.com/docs/getting-started/error-handling): Learn how to catch and handle errors in Nuxt.
- [Server](https://nuxt.com/docs/getting-started/server): Build full-stack applications with Nuxt's server framework. You can fetch data from your database or another server, create APIs, or even generate static server-side content like a sitemap or a RSS feed - all from a single codebase.
- [Layers](https://nuxt.com/docs/getting-started/layers): Nuxt provides a powerful system that allows you to extend the default files, configs, and much more.
- [Prerendering](https://nuxt.com/docs/getting-started/prerendering): Nuxt allows pages to be statically rendered at build time to improve certain performance or SEO metrics
- [Deployment](https://nuxt.com/docs/getting-started/deployment): Learn how to deploy your Nuxt application to any hosting provider.
- [Testing](https://nuxt.com/docs/getting-started/testing): How to test your Nuxt application.
- [Upgrade Guide](https://nuxt.com/docs/getting-started/upgrade): Learn how to upgrade to the latest Nuxt version.
- [Nuxt Guide](https://nuxt.com/docs/guide): Learn how Nuxt works with in-depth guides.
- [Auto-imports](https://nuxt.com/docs/guide/concepts/auto-imports): Nuxt auto-imports components, composables, helper functions and Vue APIs.
- [Nuxt Lifecycle](https://nuxt.com/docs/guide/concepts/nuxt-lifecycle): Understanding the lifecycle of Nuxt applications can help you gain deeper insights into how the framework operates, especially for both server-side and client-side rendering.
- [Vue.js Development](https://nuxt.com/docs/guide/concepts/vuejs-development): Nuxt uses Vue.js and adds features such as component auto-imports, file-based routing and composables for an SSR-friendly usage.
- [Rendering Modes](https://nuxt.com/docs/guide/concepts/rendering): Learn about the different rendering modes available in Nuxt.
- [Server Engine](https://nuxt.com/docs/guide/concepts/server-engine): Nuxt is powered by a new server engine: Nitro.
- [Modules](https://nuxt.com/docs/guide/concepts/modules): Nuxt provides a module system to extend the framework core and simplify integrations.
- [ES Modules](https://nuxt.com/docs/guide/concepts/esm): Nuxt uses native ES modules.
- [TypeScript](https://nuxt.com/docs/guide/concepts/typescript): Nuxt is fully typed and provides helpful shortcuts to ensure you have access to accurate type information when you are coding.
- [Code Style](https://nuxt.com/docs/guide/concepts/code-style): Nuxt supports ESLint out of the box
- [.nuxt](https://nuxt.com/docs/guide/directory-structure/nuxt): Nuxt uses the .nuxt/ directory in development to generate your Vue application.
- [.output](https://nuxt.com/docs/guide/directory-structure/output): Nuxt creates the .output/ directory when building your application for production.
- [assets](https://nuxt.com/docs/guide/directory-structure/assets): The assets/ directory is used to add all the website's assets that the build tool will process.
- [components](https://nuxt.com/docs/guide/directory-structure/components): The components/ directory is where you put all your Vue components.
- [composables](https://nuxt.com/docs/guide/directory-structure/composables): Use the composables/ directory to auto-import your Vue composables into your application.
- [content](https://nuxt.com/docs/guide/directory-structure/content): Use the content/ directory to create a file-based CMS for your application.
- [layouts](https://nuxt.com/docs/guide/directory-structure/layouts): Nuxt provides a layouts framework to extract common UI patterns into reusable layouts.
- [middleware](https://nuxt.com/docs/guide/directory-structure/middleware): Nuxt provides middleware to run code before navigating to a particular route.
- [modules](https://nuxt.com/docs/guide/directory-structure/modules): Use the modules/ directory to automatically register local modules within your application.
- [node_modules](https://nuxt.com/docs/guide/directory-structure/node_modules): The package manager stores the dependencies of your project in the node_modules/ directory.
- [pages](https://nuxt.com/docs/guide/directory-structure/pages): Nuxt provides file-based routing to create routes within your web application.
- [plugins](https://nuxt.com/docs/guide/directory-structure/plugins): Nuxt has a plugins system to use Vue plugins and more at the creation of your Vue application.
- [public](https://nuxt.com/docs/guide/directory-structure/public): The public/ directory is used to serve your website's static assets.
- [server](https://nuxt.com/docs/guide/directory-structure/server): The server/ directory is used to register API and server handlers to your application.
- [shared](https://nuxt.com/docs/guide/directory-structure/shared): Use the shared/ directory to share functionality between the Vue app and the Nitro server.
- [utils](https://nuxt.com/docs/guide/directory-structure/utils): Use the utils/ directory to auto-import your utility functions throughout your application.
- [.env](https://nuxt.com/docs/guide/directory-structure/env): A .env file specifies your build/dev-time environment variables.
- [.gitignore](https://nuxt.com/docs/guide/directory-structure/gitignore): A .gitignore file specifies intentionally untracked files that git should ignore.
- [.nuxtignore](https://nuxt.com/docs/guide/directory-structure/nuxtignore): The .nuxtignore file lets Nuxt ignore files in your project’s root directory during the build phase.
- [.nuxtrc](https://nuxt.com/docs/guide/directory-structure/nuxtrc): The .nuxtrc file allows you to define nuxt configurations in a flat syntax.
- [app.vue](https://nuxt.com/docs/guide/directory-structure/app): The app.vue file is the main component of your Nuxt application.
- [app.config.ts](https://nuxt.com/docs/guide/directory-structure/app-config): Expose reactive configuration within your application with the App Config file.
- [error.vue](https://nuxt.com/docs/guide/directory-structure/error): The error.vue file is the error page in your Nuxt application.
- [nuxt.config.ts](https://nuxt.com/docs/guide/directory-structure/nuxt-config): Nuxt can be easily configured with a single nuxt.config file.
- [package.json](https://nuxt.com/docs/guide/directory-structure/package): The package.json file contains all the dependencies and scripts for your application.
- [tsconfig.json](https://nuxt.com/docs/guide/directory-structure/tsconfig): Nuxt generates a .nuxt/tsconfig.json file with sensible defaults and your aliases.
- [Experimental Features](https://nuxt.com/docs/guide/going-further/experimental-features): Enable Nuxt experimental features to unlock new possibilities.
- [Features](https://nuxt.com/docs/guide/going-further/features): Enable or disable optional Nuxt features to unlock new possibilities.
- [How Nuxt Works?](https://nuxt.com/docs/guide/going-further/internals): Nuxt is a minimal but highly customizable framework to build web applications.
- [Runtime Config](https://nuxt.com/docs/guide/going-further/runtime-config): Nuxt provides a runtime config API to expose configuration and secrets within your application.
- [Nightly Release Channel](https://nuxt.com/docs/guide/going-further/nightly-release-channel): The nightly release channel allows using Nuxt built directly from the latest commits to the repository.
- [Lifecycle Hooks](https://nuxt.com/docs/guide/going-further/hooks): Nuxt provides a powerful hooking system to expand almost every aspect using hooks.
- [Module Author Guide](https://nuxt.com/docs/guide/going-further/modules): Learn how to create a Nuxt Module to integrate, enhance or extend any Nuxt applications.
- [Nuxt Kit](https://nuxt.com/docs/guide/going-further/kit): @nuxt/kit provides features for module authors.
- [NuxtApp](https://nuxt.com/docs/guide/going-further/nuxt-app): In Nuxt, you can access runtime app context within composables, components and plugins.
- [Authoring Nuxt Layers](https://nuxt.com/docs/guide/going-further/layers): Nuxt provides a powerful system that allows you to extend the default files, configs, and much more.
- [Debugging](https://nuxt.com/docs/guide/going-further/debugging): In Nuxt, you can get started with debugging your application directly in the browser as well as in your IDE.
- [](https://nuxt.com/docs/guide/going-further)
- [Custom Routing](https://nuxt.com/docs/guide/recipes/custom-routing): In Nuxt, your routing is defined by the structure of your files inside the pages directory. However, since it uses vue-router under the hood, Nuxt offers you several ways to add custom routes in your project.
- [Using Vite Plugins in Nuxt](https://nuxt.com/docs/guide/recipes/vite-plugin): Learn how to integrate Vite plugins into your Nuxt project.
- [Custom useFetch in Nuxt](https://nuxt.com/docs/guide/recipes/custom-usefetch): How to create a custom fetcher for calling your external API in Nuxt.
- [Sessions and Authentication](https://nuxt.com/docs/guide/recipes/sessions-and-authentication): Authentication is an extremely common requirement in web apps. This recipe will show you how to implement basic user registration and authentication in your Nuxt app.
- [<ClientOnly>](https://nuxt.com/docs/api/components/client-only): Render components only in client-side with the <ClientOnly> component.
- [<DevOnly>](https://nuxt.com/docs/api/components/dev-only): Render components only during development with the <DevOnly> component.
- [<NuxtClientFallback>](https://nuxt.com/docs/api/components/nuxt-client-fallback): Nuxt provides the <NuxtClientFallback> component to render its content on the client if any of its children trigger an error in SSR
- [<NuxtPicture>](https://nuxt.com/docs/api/components/nuxt-picture): Nuxt provides a <NuxtPicture> component to handle automatic image optimization.
- [<Teleport>](https://nuxt.com/docs/api/components/teleports): The <Teleport> component teleports a component to a different location in the DOM.
- [<NuxtRouteAnnouncer>](https://nuxt.com/docs/api/components/nuxt-route-announcer): The <NuxtRouteAnnouncer> component adds a hidden element with the page title to announce route changes to assistive technologies.
- [<NuxtPage>](https://nuxt.com/docs/api/components/nuxt-page): The <NuxtPage> component is required to display pages located in the pages/ directory.
- [<NuxtLayout>](https://nuxt.com/docs/api/components/nuxt-layout): Nuxt provides the <NuxtLayout> component to show layouts on pages and error pages.
- [<NuxtLink>](https://nuxt.com/docs/api/components/nuxt-link): Nuxt provides <NuxtLink> component to handle any kind of links within your application.
- [<NuxtLoadingIndicator>](https://nuxt.com/docs/api/components/nuxt-loading-indicator): Display a progress bar between page navigations.
- [<NuxtErrorBoundary>](https://nuxt.com/docs/api/components/nuxt-error-boundary): The <NuxtErrorBoundary> component handles client-side errors happening in its default slot.
- [<NuxtWelcome>](https://nuxt.com/docs/api/components/nuxt-welcome): The <NuxtWelcome> component greets users in new projects made from the starter template.
- [<NuxtIsland>](https://nuxt.com/docs/api/components/nuxt-island): Nuxt provides the <NuxtIsland> component to render a non-interactive component without any client JS.
- [<NuxtImg>](https://nuxt.com/docs/api/components/nuxt-img): Nuxt provides a <NuxtImg> component to handle automatic image optimization.
- [onPrehydrate](https://nuxt.com/docs/api/composables/on-prehydrate): Use onPrehydrate to run a callback on the client immediately before Nuxt hydrates the page.
- [useAppConfig](https://nuxt.com/docs/api/composables/use-app-config): Access the reactive app config defined in the project.
- [useAsyncData](https://nuxt.com/docs/api/composables/use-async-data): useAsyncData provides access to data that resolves asynchronously in an SSR-friendly composable.
- [useCookie](https://nuxt.com/docs/api/composables/use-cookie): useCookie is an SSR-friendly composable to read and write cookies.
- [useError](https://nuxt.com/docs/api/composables/use-error): useError composable returns the global Nuxt error that is being handled.
- [useFetch](https://nuxt.com/docs/api/composables/use-fetch): Fetch data from an API endpoint with an SSR-friendly composable.
- [useHead](https://nuxt.com/docs/api/composables/use-head): useHead customizes the head properties of individual pages of your Nuxt app.
- [useHeadSafe](https://nuxt.com/docs/api/composables/use-head-safe): The recommended way to provide head data with user input.
- [useHydration](https://nuxt.com/docs/api/composables/use-hydration): Allows full control of the hydration cycle to set and receive data from the server.
- [useLazyAsyncData](https://nuxt.com/docs/api/composables/use-lazy-async-data): This wrapper around useAsyncData triggers navigation immediately.
- [useLazyFetch](https://nuxt.com/docs/api/composables/use-lazy-fetch): This wrapper around useFetch triggers navigation immediately.
- [useLoadingIndicator](https://nuxt.com/docs/api/composables/use-loading-indicator): This composable gives you access to the loading state of the app page.
- [useNuxtApp](https://nuxt.com/docs/api/composables/use-nuxt-app): Access the shared runtime context of the Nuxt Application.
- [useNuxtData](https://nuxt.com/docs/api/composables/use-nuxt-data): Access the current cached value of data fetching composables.
- [usePreviewMode](https://nuxt.com/docs/api/composables/use-preview-mode): Use usePreviewMode to check and control preview mode in Nuxt
- [useRequestEvent](https://nuxt.com/docs/api/composables/use-request-event): Access the incoming request event with the useRequestEvent composable.
- [useRequestFetch](https://nuxt.com/docs/api/composables/use-request-fetch): Forward the request context and headers for server-side fetch requests with the useRequestFetch composable.
- [useRequestHeader](https://nuxt.com/docs/api/composables/use-request-header): Use useRequestHeader to access a certain incoming request header.
- [useRequestHeaders](https://nuxt.com/docs/api/composables/use-request-headers): Use useRequestHeaders to access the incoming request headers.
- [useRequestURL](https://nuxt.com/docs/api/composables/use-request-url): Access the incoming request URL with the useRequestURL composable.
- [useResponseHeader](https://nuxt.com/docs/api/composables/use-response-header): Use useResponseHeader to set a server response header.
- [useRoute](https://nuxt.com/docs/api/composables/use-route): The useRoute composable returns the current route.
- [useRouteAnnouncer](https://nuxt.com/docs/api/composables/use-route-announcer): This composable observes the page title changes and updates the announcer message accordingly.
- [useRouter](https://nuxt.com/docs/api/composables/use-router): The useRouter composable returns the router instance.
- [useRuntimeConfig](https://nuxt.com/docs/api/composables/use-runtime-config): Access runtime config variables with the useRuntimeConfig composable.
- [useRuntimeHook](https://nuxt.com/docs/api/composables/use-runtime-hook): Registers a runtime hook in a Nuxt application and ensures it is properly disposed of when the scope is destroyed.
- [useSeoMeta](https://nuxt.com/docs/api/composables/use-seo-meta): The useSeoMeta composable lets you define your site's SEO meta tags as a flat object with full TypeScript support.
- [useServerSeoMeta](https://nuxt.com/docs/api/composables/use-server-seo-meta): The useServerSeoMeta composable lets you define your site's SEO meta tags as a flat object with full TypeScript support.
- [useState](https://nuxt.com/docs/api/composables/use-state): The useState composable creates a reactive and SSR-friendly shared state.
- [$fetch](https://nuxt.com/docs/api/utils/dollarfetch): Nuxt uses ofetch to expose globally the $fetch helper for making HTTP requests.
- [abortNavigation](https://nuxt.com/docs/api/utils/abort-navigation): abortNavigation is a helper function that prevents navigation from taking place and throws an error if one is set as a parameter.
- [addRouteMiddleware](https://nuxt.com/docs/api/utils/add-route-middleware): addRouteMiddleware() is a helper function to dynamically add middleware in your application.
- [callOnce](https://nuxt.com/docs/api/utils/call-once): Run a given function or block of code once during SSR or CSR.
- [clearError](https://nuxt.com/docs/api/utils/clear-error): The clearError composable clears all handled errors.
- [clearNuxtData](https://nuxt.com/docs/api/utils/clear-nuxt-data): Delete cached data, error status and pending promises of useAsyncData and useFetch.
- [clearNuxtState](https://nuxt.com/docs/api/utils/clear-nuxt-state): Delete the cached state of useState.
- [createError](https://nuxt.com/docs/api/utils/create-error): Create an error object with additional metadata.
- [defineNuxtComponent](https://nuxt.com/docs/api/utils/define-nuxt-component): defineNuxtComponent() is a helper function for defining type safe components with Options API.
- [defineNuxtRouteMiddleware](https://nuxt.com/docs/api/utils/define-nuxt-route-middleware): Create named route middleware using defineNuxtRouteMiddleware helper function.
- [definePageMeta](https://nuxt.com/docs/api/utils/define-page-meta): Define metadata for your page components.
- [defineRouteRules](https://nuxt.com/docs/api/utils/define-route-rules): Define route rules for hybrid rendering at the page level.
- [navigateTo](https://nuxt.com/docs/api/utils/navigate-to): navigateTo is a helper function that programmatically navigates users.
- [onBeforeRouteLeave](https://nuxt.com/docs/api/utils/on-before-route-leave): The onBeforeRouteLeave composable allows registering a route guard within a component.
- [onBeforeRouteUpdate](https://nuxt.com/docs/api/utils/on-before-route-update): The onBeforeRouteUpdate composable allows registering a route guard within a component.
- [onNuxtReady](https://nuxt.com/docs/api/utils/on-nuxt-ready): The onNuxtReady composable allows running a callback after your app has finished initializing.
- [prefetchComponents](https://nuxt.com/docs/api/utils/prefetch-components): Nuxt provides utilities to give you control over prefetching components.
- [preloadComponents](https://nuxt.com/docs/api/utils/preload-components): Nuxt provides utilities to give you control over preloading components.
- [preloadRouteComponents](https://nuxt.com/docs/api/utils/preload-route-components): preloadRouteComponents allows you to manually preload individual pages in your Nuxt app.
- [prerenderRoutes](https://nuxt.com/docs/api/utils/prerender-routes): prerenderRoutes hints to Nitro to prerender an additional route.
- [refreshCookie](https://nuxt.com/docs/api/utils/refresh-cookie): Refresh useCookie values manually when a cookie has changed
- [refreshNuxtData](https://nuxt.com/docs/api/utils/refresh-nuxt-data): Refresh all or specific asyncData instances in Nuxt
- [reloadNuxtApp](https://nuxt.com/docs/api/utils/reload-nuxt-app): reloadNuxtApp will perform a hard reload of the page.
- [setPageLayout](https://nuxt.com/docs/api/utils/set-page-layout): setPageLayout allows you to dynamically change the layout of a page.
- [setResponseStatus](https://nuxt.com/docs/api/utils/set-response-status): setResponseStatus sets the statusCode (and optionally the statusMessage) of the response.
- [showError](https://nuxt.com/docs/api/utils/show-error): Nuxt provides a quick and simple way to show a full screen error page if needed.
- [updateAppConfig](https://nuxt.com/docs/api/utils/update-app-config): Update the App Config at runtime.
- [nuxi add](https://nuxt.com/docs/api/commands/add): Scaffold an entity into your Nuxt application.
- [nuxi analyze](https://nuxt.com/docs/api/commands/analyze): Analyze the production bundle or your Nuxt application.
- [nuxi build](https://nuxt.com/docs/api/commands/build): Build your Nuxt application.
- [nuxi build-module](https://nuxt.com/docs/api/commands/build-module): Nuxt command to build your Nuxt module before publishing.
- [nuxi cleanup](https://nuxt.com/docs/api/commands/cleanup): Remove common generated Nuxt files and caches.
- [nuxi dev](https://nuxt.com/docs/api/commands/dev): The dev command starts a development server with hot module replacement at http://localhost:3000
- [nuxi devtools](https://nuxt.com/docs/api/commands/devtools): The devtools command allows you to enable or disable Nuxt DevTools on a per-project basis.
- [nuxi generate](https://nuxt.com/docs/api/commands/generate): Pre-renders every route of the application and stores the result in plain HTML files.
- [nuxi info](https://nuxt.com/docs/api/commands/info): The info command logs information about the current or specified Nuxt project.
- [nuxi init](https://nuxt.com/docs/api/commands/init): The init command initializes a fresh Nuxt project.
- [nuxi module](https://nuxt.com/docs/api/commands/module): Search and add modules to your Nuxt application with the command line.
- [nuxi prepare](https://nuxt.com/docs/api/commands/prepare): The prepare command creates a .nuxt directory in your application and generates types.
- [nuxi preview](https://nuxt.com/docs/api/commands/preview): The preview command starts a server to preview your application after the build command.
- [nuxi typecheck](https://nuxt.com/docs/api/commands/typecheck): The typecheck command runs vue-tsc to check types throughout your app.
- [nuxi upgrade](https://nuxt.com/docs/api/commands/upgrade): The upgrade command upgrades Nuxt to the latest version.
- [Modules](https://nuxt.com/docs/api/kit/modules): Nuxt Kit provides a set of utilities to help you create and use modules. You can use these utilities to create your own modules or to reuse existing modules.
- [Runtime Config](https://nuxt.com/docs/api/kit/runtime-config): Nuxt Kit provides a set of utilities to help you access and modify Nuxt runtime configuration.
- [Templates](https://nuxt.com/docs/api/kit/templates): Nuxt Kit provides a set of utilities to help you work with templates. These functions allow you to generate extra files during development and build time.
- [Nitro](https://nuxt.com/docs/api/kit/nitro): Nuxt Kit provides a set of utilities to help you work with Nitro. These functions allow you to add server handlers, plugins, and prerender routes.
- [Resolving](https://nuxt.com/docs/api/kit/resolving): Nuxt Kit provides a set of utilities to help you resolve paths. These functions allow you to resolve paths relative to the current module, with unknown name or extension.
- [Logging](https://nuxt.com/docs/api/kit/logging): Nuxt Kit provides a set of utilities to help you work with logging. These functions allow you to log messages with extra features.
- [Builder](https://nuxt.com/docs/api/kit/builder): Nuxt Kit provides a set of utilities to help you work with the builder. These functions allow you to extend the webpack and vite configurations.
- [Examples](https://nuxt.com/docs/api/kit/examples): Examples of Nuxt Kit utilities in use.
- [Programmatic Usage](https://nuxt.com/docs/api/kit/programmatic): Nuxt Kit provides a set of utilities to help you work with Nuxt programmatically. These functions allow you to load Nuxt, build Nuxt, and load Nuxt configuration.
- [Compatibility](https://nuxt.com/docs/api/kit/compatibility): Nuxt Kit provides a set of utilities to help you check the compatibility of your modules with different Nuxt versions.
- [Auto-imports](https://nuxt.com/docs/api/kit/autoimports): Nuxt Kit provides a set of utilities to help you work with auto-imports. These functions allow you to register your own utils, composables and Vue APIs.
- [Components](https://nuxt.com/docs/api/kit/components): Nuxt Kit provides a set of utilities to help you work with components. You can register components globally or locally, and also add directories to be scanned for components.
- [Context](https://nuxt.com/docs/api/kit/context): Nuxt Kit provides a set of utilities to help you work with context.
- [Pages](https://nuxt.com/docs/api/kit/pages): Nuxt Kit provides a set of utilities to help you create and use pages. You can use these utilities to manipulate the pages configuration or to define route rules.
- [Layout](https://nuxt.com/docs/api/kit/layout): Nuxt Kit provides a set of utilities to help you work with layouts.
- [Plugins](https://nuxt.com/docs/api/kit/plugins): Nuxt Kit provides a set of utilities to help you create and use plugins. You can add plugins or plugin templates to your module using these functions.
- [Lifecycle Hooks](https://nuxt.com/docs/api/advanced/hooks): Nuxt provides a powerful hooking system to expand almost every aspect using hooks.
- [Import meta](https://nuxt.com/docs/api/advanced/import-meta): Understand where your code is running using `import.meta`.
- [Nuxt Configuration](https://nuxt.com/docs/api/nuxt-config): Discover all the options you can use in your nuxt.config.ts file.
- [Nuxt API Reference](https://nuxt.com/docs/api): Explore all Nuxt Internals: Components, Composables, Utils, Commands and more.
- [Hello World](https://nuxt.com/docs/examples/hello-world): A minimal Nuxt application only requires the `app.vue` and `nuxt.config.js` files.
- [Auto Imports](https://nuxt.com/docs/examples/features/auto-imports): This example demonstrates the auto-imports feature in Nuxt.
- [Data Fetching](https://nuxt.com/docs/examples/features/data-fetching): This example demonstrates data fetching with Nuxt using built-in composables and API routes.
- [State Management](https://nuxt.com/docs/examples/features/state-management): This example shows how to use the `useState` composable to create a reactive and SSR-friendly shared state across components.
- [Meta Tags](https://nuxt.com/docs/examples/features/meta-tags): This example shows how to use the Nuxt helpers and composables for SEO and meta management.
- [Layouts](https://nuxt.com/docs/examples/features/layouts): This example shows how to define default and custom layouts.
- [Middleware](https://nuxt.com/docs/examples/routing/middleware): This example shows how to add route middleware with the middleware/ directory or with a plugin, and how to use them globally or per page.
- [Pages](https://nuxt.com/docs/examples/routing/pages): This example shows how to use the pages/ directory to create application routes.
- [Universal Router](https://nuxt.com/docs/examples/routing/universal-router): This example demonstrates Nuxt universal routing utilities without depending on `pages/` and `vue-router`.
- [Layers](https://nuxt.com/docs/examples/advanced/config-extends): This example shows how to use the extends key in `nuxt.config.ts`.
- [Error Handling](https://nuxt.com/docs/examples/advanced/error-handling): This example shows how to handle errors in different contexts: pages, plugins, components and middleware.
- [JSX / TSX](https://nuxt.com/docs/examples/advanced/jsx): This example shows how to use JSX syntax with typescript in Nuxt pages and components.
- [Locale](https://nuxt.com/docs/examples/advanced/locale): This example shows how to define a locale composable to handle the application's locale, both server and client side.
- [Module Extend Pages](https://nuxt.com/docs/examples/advanced/module-extend-pages): This example defines a new `test` page using `extendPages` within a module.
- [Teleport](https://nuxt.com/docs/examples/advanced/teleport): This example shows how to use the <Teleport> with client-side and server-side rendering.
- [Testing](https://nuxt.com/docs/examples/advanced/testing): This example shows how to test your Nuxt application.
- [useCookie](https://nuxt.com/docs/examples/advanced/use-cookie): This example shows how to use the useCookie API to persist small amounts of data that both client and server can use.
- [Use Custom Fetch Composable](https://nuxt.com/docs/examples/advanced/use-custom-fetch-composable): This example shows a convenient wrapper for the useFetch composable from nuxt. It allows you to customize the fetch request with default values and user authentication token.
- [WASM](https://nuxt.com/docs/examples/experimental/wasm): This example demonstrates the server-side support of WebAssembly in Nuxt.
- [Getting Help](https://nuxt.com/docs/community/getting-help): We're a friendly community of developers and we'd love to help.
- [Reporting Bugs](https://nuxt.com/docs/community/reporting-bugs): One of the most valuable roles in open source is taking the time to report bugs helpfully.
- [Contribution](https://nuxt.com/docs/community/contribution): Nuxt is a community project - and so we love contributions of all kinds! ❤️
- [Framework](https://nuxt.com/docs/community/framework-contribution): Some specific points about contributions to the framework repository.
- [Roadmap](https://nuxt.com/docs/community/roadmap): Nuxt is constantly evolving, with new features and modules being added all the time.
- [Releases](https://nuxt.com/docs/community/changelog): Discover the latest releases of Nuxt & Nuxt official modules.
- [Overview](https://nuxt.com/docs/bridge/overview): Reduce the differences with Nuxt 3 and reduce the burden of migration to Nuxt 3.
- [Configuration](https://nuxt.com/docs/bridge/configuration): Learn how to configure Nuxt Bridge to your own needs.
- [TypeScript](https://nuxt.com/docs/bridge/typescript): Learn how to use TypeScript with Nuxt Bridge.
- [Legacy Composition API](https://nuxt.com/docs/bridge/bridge-composition-api): Learn how to migrate to Composition API with Nuxt Bridge.
- [Plugins and Middleware](https://nuxt.com/docs/bridge/plugins-and-middleware): Learn how to migrate from Nuxt 2 to Nuxt Bridge new plugins and middleware.
- [New Composition API](https://nuxt.com/docs/bridge/nuxt3-compatible-api): Nuxt Bridge implements composables compatible with Nuxt 3.
- [Meta Tags](https://nuxt.com/docs/bridge/meta): Learn how to migrate from Nuxt 2 to Nuxt Bridge new meta tags.
- [Runtime Config](https://nuxt.com/docs/bridge/runtime-config): Nuxt provides a runtime config API to expose configuration and secrets within your application.
- [Nitro](https://nuxt.com/docs/bridge/nitro): Activate Nitro to your Nuxt 2 application with Nuxt Bridge.
- [Vite](https://nuxt.com/docs/bridge/vite): Activate Vite to your Nuxt 2 application with Nuxt Bridge.
- [Overview](https://nuxt.com/docs/migration/overview): Nuxt 3 is a complete rewrite of Nuxt 2, and also based on a new set of underlying technologies.
- [Build Tooling](https://nuxt.com/docs/migration/bundling): Learn how to migrate from Nuxt 2 to Nuxt 3 build tooling.
- [Server](https://nuxt.com/docs/migration/server): Learn how to migrate from Nuxt 2 to Nuxt 3 server.
- [Configuration](https://nuxt.com/docs/migration/configuration): Learn how to migrate from Nuxt 2 to Nuxt 3 new configuration.
- [Modules](https://nuxt.com/docs/migration/module-authors): Learn how to migrate from Nuxt 2 to Nuxt 3 modules.
- [Auto Imports](https://nuxt.com/docs/migration/auto-imports): Nuxt 3 adopts a minimal friction approach, meaning wherever possible components and composables are auto-imported.
- [Meta Tags](https://nuxt.com/docs/migration/meta): Manage your meta tags, from Nuxt 2 to Nuxt 3.
- [Plugins and Middleware](https://nuxt.com/docs/migration/plugins-and-middleware): Learn how to migrate from Nuxt 2 to Nuxt 3 plugins and middleware.
- [Pages and Layouts](https://nuxt.com/docs/migration/pages-and-layouts): Learn how to migrate from Nuxt 2 to Nuxt 3 pages and layouts.
- [Component Options](https://nuxt.com/docs/migration/component-options): Learn how to migrate from Nuxt 2 components options to Nuxt 3 composables.
- [Runtime Config](https://nuxt.com/docs/migration/runtime-config): Learn how to migrate from Nuxt 2 to Nuxt 3 runtime config.
- [Nuxt Docs](https://nuxt.com/docs/readme): This repository contains the documentation of Nuxt hosted on https://nuxt.com/docs

## Blog

- [Announcing 3.0](https://nuxt.com/blog/v3): We are thrilled to announce the first stable version of Nuxt 3.0.0
- [Nuxt 3.3](https://nuxt.com/blog/v3-3): The 3.3.0 is a minor (feature) release with lots of performance and DX improvements, bug fixes and new features to play with.
- [Nuxt 3.4](https://nuxt.com/blog/v3-4): Nuxt 3.4.0 is the latest release of Nuxt 3, bringing exciting new features, including support for the View Transitions API, transferring rich JavaScript payloads from server to client - and much more.
- [Nuxt 3.5](https://nuxt.com/blog/v3-5): Nuxt 3.5.0 is out, bringing Vue 3.3, new defaults, interactive server components, typed pages, environment config - and much more.
- [Nuxt 3.6](https://nuxt.com/blog/v3-6): Nuxt 3.6 is out, bringing performance improvements, fully static server components, better style inlining, static presets, increased type safety - and much more.
- [Nuxt on the Edge](https://nuxt.com/blog/nuxt-on-the-edge): Learn how we made Nuxt 3 capable of running on edge runtimes to run with server-side rendering close to your users.
- [Nuxt 3.7](https://nuxt.com/blog/v3-7): Nuxt 3.7 is out, bringing a new CLI, native web streams and response, rendering optimisations, async context support - and much more.
- [A New Website](https://nuxt.com/blog/new-website): We are thrilled to release the new nuxt.com, powered by Nuxt UI and now open source.
- [Nuxt 3.8](https://nuxt.com/blog/v3-8): Nuxt 3.8 is out, bringing built-in DevTools, automatic Nuxt Image install, a new app manifest and much more.
- [Nuxt DevTools v1.0](https://nuxt.com/blog/nuxt-devtools-v1-0): Nuxt DevTools v1.0 is out, generally available to all Nuxt projects!
- [Nuxt 3.9](https://nuxt.com/blog/v3-9): Nuxt 3.9 is out - a Christmas gift from the Nuxt team bringing Vite 5, interactive server components, new composables, a new loading API and more.
- [Nuxt: A vision for 2023](https://nuxt.com/blog/vision-2023): This past year has been an exciting one. Looking into the new year, there is a lot we have planned as a team and we'd love to share it with you.
- [Nuxt 3.10](https://nuxt.com/blog/v3-10): Nuxt 3.10 is out - packed with features and fixes. Here are a few highlights.
- [The Evolution of Shiki v1.0](https://nuxt.com/blog/shiki-v1): Shiki v1.0 came with many improvements and features - see how Nuxt drives the evolution of Shiki!
- [Nuxt 3.11](https://nuxt.com/blog/v3-11): Nuxt 3.11 is out - with better logging, preview mode, server pages and much more!
- [Nuxt: Looking forward](https://nuxt.com/blog/looking-forward-2024): A lot of things have happened for Nuxt over the last year. Sébastien and Daniel share their thoughts on what we've achieved, and where we're going next.
- [Refreshed Nuxt ESLint Integrations](https://nuxt.com/blog/eslint-module): We revamped our ESLint integrations to support ESLint v9 with the flat config, as well as a new module with many more capabilities.
- [Nuxt 3.12](https://nuxt.com/blog/v3-12): Nuxt 3.12 is out - full of improvements and preparing the way for Nuxt 4!
- [Introducing Nuxt Scripts](https://nuxt.com/blog/nuxt-scripts): Nuxt Scripts provides better performance, privacy, security, and developer experience for third-party scripts.
- [Nuxt 3.13](https://nuxt.com/blog/v3-13): Nuxt 3.13 is out - porting back some of the new features we're building for Nuxt 4!
- [Nuxt 3.14](https://nuxt.com/blog/v3-14): Nuxt 3.14 is out - with a new rspack builder, shared folder, and performance enhancements!
- [Introducing Nuxt Icon v1](https://nuxt.com/blog/nuxt-icon-v1-0): Discover Nuxt Icon v1 - a modern, versatile, and customizable icon solution for your Nuxt projects.
- [Introducing Nuxt DevTools](https://nuxt.com/blog/introducing-nuxt-devtools): Unleash the Developer Experience with Nuxt and understand your app better than ever.
- [Announcing Nuxt 3 Release Candidate](https://nuxt.com/blog/nuxt3-rc): Nuxt 3 beta was announced on October 12, 2021 after 16 months of work, introducing a new foundation based on Vue 3, Vite and Nitro. Six months later, we are happy to announce the first release candidate of Nuxt 3, code named “Mount Hope“ 🚀
- [Nuxt 3.15](https://nuxt.com/blog/v3-15): Nuxt 3.15 is out - with Vite 6, better HMR and faster performance
- [Nuxt 3.16](https://nuxt.com/blog/v3-16): Nuxt 3.16 is out - with packed with features and performance improvements
- [Nuxt UI v3](https://nuxt.com/blog/nuxt-ui-v3): Nuxt UI v3 is out! After 1500+ commits, this major redesign brings improved accessibility, Tailwind CSS v4 support, and full Vue compatibility
- [Nuxt 2 End-of-Life (EOL)](https://nuxt.com/blog/nuxt2-eol): Nuxt 2 will reach End of Life (EOL) on June 30th, 2024. We've partnered with HeroDevs on offering Never-Ending Support (NES).
- [Introducing Nuxt 3 Beta](https://nuxt.com/blog/nuxt3-beta): 468 days after the first commit, the Nuxt 3 beta has finally arrived. Discover what's inside and what to expect from it. Yes, it includes Vue 3 and Vite ⚡️
- [Going Full Static](https://nuxt.com/blog/going-full-static): Long awaited features for JAMstack fans has been shipped in v2.13: full static export, improved smart prefetching, integrated crawler, faster re-deploy, built-in web server and new target option for config ⚡️
- [Introducing Smart Prefetching](https://nuxt.com/blog/introducing-smart-prefetching): Starting from Nuxt v2.4.0, Nuxt will automagically prefetch the code-splitted pages linked with a nuxt-link when visible in the viewport by default.
- [Understanding how fetch works in Nuxt 2.12](https://nuxt.com/blog/understanding-how-fetch-works-in-nuxt-2-12): Explore different features of the fetch hook and learn a brand new way to bring data into Nuxt applications.
- [Nuxt 2 Static Improvements](https://nuxt.com/blog/nuxt-static-improvements): With Nuxt version 2.13, the full-static mode has been introduced. In addition, a new command nuxt export was added to pre-render your pages without triggering a webpack build with the goal to separate the rendering and build process. The only issue was that most Nuxt users weren't able to unleash the full potential of the separation... until now.
- [Nuxt 2: From Terminal to Browser](https://nuxt.com/blog/nuxtjs-from-terminal-to-browser): How we changed the developer experience to stop switching between the terminal and browser.

## Deploy

- [AWS Amplify](https://nuxt.com/deploy/aws-amplify): Deploy your Nuxt Application to AWS Amplify infrastructure.
- [Azure](https://nuxt.com/deploy/azure): Deploy your Nuxt Application to Azure infrastructure.
- [Cleavr](https://nuxt.com/deploy/cleavr): Deploy your Nuxt Application to Cleavr infrastructure.
- [Clever Cloud](https://nuxt.com/deploy/clever-cloud): Deploy your Nuxt Application to Clever Cloud infrastructure.
- [Cloudflare](https://nuxt.com/deploy/cloudflare): Deploy your Nuxt Application to Cloudflare infrastructure.
- [Deno Deploy](https://nuxt.com/deploy/deno-deploy): Deploy your Nuxt Application to Deno Deploy infrastructure.
- [DigitalOcean](https://nuxt.com/deploy/digitalocean): Deploy your Nuxt Application to DigitalOcean infrastructure.
- [Firebase](https://nuxt.com/deploy/firebase): Deploy your Nuxt Application to Firebase infrastructure.
- [Flightcontrol](https://nuxt.com/deploy/flightcontrol): Deploy your Nuxt Application to Flightcontrol infrastructure.
- [GitHub Pages](https://nuxt.com/deploy/github-pages): Deploy your Nuxt Application to GitHub Pages infrastructure.
- [GitLab Pages](https://nuxt.com/deploy/gitlab): Deploy your Nuxt Application to GitLab Pages.
- [Heroku](https://nuxt.com/deploy/heroku): Deploy your Nuxt Application to Heroku infrastructure.
- [IIS](https://nuxt.com/deploy/iis): Deploy your Nuxt Application to IIS infrastructure.
- [Koyeb](https://nuxt.com/deploy/koyeb): Deploy your Nuxt Application to Koyeb infrastructure.
- [Netlify](https://nuxt.com/deploy/netlify): Deploy your Nuxt Application to Netlify infrastructure.
- [NuxtHub](https://nuxt.com/deploy/nuxthub): Deploy Nuxt applications globally on your Cloudflare account with zero configuration.
- [Render](https://nuxt.com/deploy/render): Deploy your Nuxt Application to Render infrastructure.
- [SST](https://nuxt.com/deploy/sst): Deploy your Nuxt Application to AWS with SST.
- [Stormkit](https://nuxt.com/deploy/stormkit): Deploy your Nuxt Application to Stormkit infrastructure.
- [Vercel](https://nuxt.com/deploy/vercel): Deploy your Nuxt Application to Vercel infrastructure.
- [Zeabur](https://nuxt.com/deploy/zeabur): Deploy your Nuxt Application to Zeabur.
- [Zerops](https://nuxt.com/deploy/zerops): Deploy your Nuxt Application to Zerops infrastructure.

## Agencies

- [DigiNeat](https://nuxt.com/enterprise/agencies/digineat): Our development allows us to achieve more with our clients' fewer resources and optimize their expenses
- [Magic as a Service](https://nuxt.com/enterprise/agencies/maas): We build high-performing Nuxt and Vue applications, designed for beauty, engineered for performance, and made for humans.
- [Liip AG](https://nuxt.com/enterprise/agencies/liip): Your partner in crime for digital challenges – from websites, mobile apps and online shops through to change management.
- [WebReinvent](https://nuxt.com/enterprise/agencies/webreinvent): WebReinvent is a software development company and we have delivered MVP to enterprise-level web applications from startup to MSME.
- [64 Robots](https://nuxt.com/enterprise/agencies/64robots): A complete digital product agency with a Nuxt expertise.
- [Zen Architects](https://nuxt.com/enterprise/agencies/zen-architects): ZEN Architects provides Nuxt support by specialists with strengths in DevOps and OSS.
- [SIDESTREAM](https://nuxt.com/enterprise/agencies/sidestream): We develop the best Nuxt 3 software for you.
- [Passionate People](https://nuxt.com/enterprise/agencies/passionate-people): We provide you with additional technical capacity to power-up your digital transformation.
- [Undefined](https://nuxt.com/enterprise/agencies/undefined): From idea to solution, we craft digital experiences.
- [Wimadev](https://nuxt.com/enterprise/agencies/wimadev): Enterprise grade Nuxt development and Node.js backends.
- [7Span](https://nuxt.com/enterprise/agencies/7span): A Global Software & Design Company. We Make Pixel Perfect Things.
- [Monterail](https://nuxt.com/enterprise/agencies/monterail): Designing innovative software for industry leaders
- [The Coding Machine](https://nuxt.com/enterprise/agencies/the-coding-machine): Specialized in tailor-made development around Open Source technologies for more than 15 years.
- [Coditive](https://nuxt.com/enterprise/agencies/coditive): Bringing your vision to life with our top-notch coding skill both on frontend and backend areas.
- [Curotec](https://nuxt.com/enterprise/agencies/curotec): Partner with an expert Vue.js & Nuxt team.
- [Geist](https://nuxt.com/enterprise/agencies/geist): Shopify Composable Commerce Expert

## DesignKit

- [Design Kit](https://nuxt.com/design-kit): Welcome to Nuxt design definition page. Identity was redefined by handpicking conscientiously colors, and shapes in order to express how easy & joyful Nuxt products are.