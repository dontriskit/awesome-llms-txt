# Overview
Source: https://docs.windsurf.com/autocomplete/overview



**Windsurf Autocomplete** is powered by our own models, trained in-house from scratch to optimize for speed and accuracy.

<Frame>
  <img src="https://exafunction.github.io/public/autocomplete/autocomplete-speed-fast.gif" />
</Frame>

Our autocomplete makes in-line and multi-line suggestions based on the context of your code.

Suggestions appear in grey text as you type. You can press `esc` to cancel a suggestion.
Suggestions will also disappear if you continue typing or navigating without accepting them.

## Keyboard Shortcuts

Here are shortcuts that apply for MacOS.
Replace `⌘` with `Ctrl` and `⌥` with `Alt` to get the corresponding shortcuts on Windows/Linux.

* **Accept suggestion**: `⇥`
* **Cancel suggestion**: `esc`
* **Accept suggestion word-by-word**: `⌘+→` (VS Code), `⌥+⇧+\` (JetBrains)
* **Next/previous suggestion**: `⌥+]`/`⌥+[`
* **Trigger suggestion**: `⌥+\`

## Autocomplete Speeds

You can set the speed of the Autocomplete in your settings.

<Note>Fast Autocomplete is currently only available to our Pro, Teams, and Enterprise Users.</Note>

<Frame>
  <img src="https://exafunction.github.io/public/autocomplete/autocomplete-speeds-select.png" />
</Frame>


# Tips
Source: https://docs.windsurf.com/autocomplete/tips



## Inline Comments

You can instruct autocomplete with the use of comments in your code.
Windsurf will read these comments and suggest the code to bring the comment to life.

<Frame>
  <img src="https://exafunction.github.io/public/autocomplete/minimize_boilerplate.gif" />
</Frame>

This method can get you good mileage, but if you're finding value in writing natural-language instructions and having the AI execute them,
consider using [Windsurf Command](/command/overview).

## Fill In The Middle (FIM)

Windsurf's Autocomplete can Fill In The Middle (FIM).

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://exafunction.github.io/public/videos/inline_fim/inline_fim_codeium.mp4" />

Read more about in-line FIM on our blog [here](https://codeium.com/blog/inline-fim-code-suggestions).

## Snooze

Click the Windsurf widget in the status bar towards the bottom right of your editor to see the option to switch Autocomplete off,
either temporarily or until you reenable it.


# Prompt Engineering
Source: https://docs.windsurf.com/best-practices/prompt-engineering



If you're reading this, you're probably someone that already understands some of the use cases and limitations of LLMs. The better prompt and context that provide to the model, the better the outcome will be.

Similarly with Windsurf, there are best practices for crafting more effective prompts to get the most out of the tool, and get the best quality code possible to help you accelerate your workflows.

<Tip>For more complex tasks that may require you to [@-Mention](/chat/overview/#mentions) specific code blocks, use [Chat](/chat/overview) instead of [Command](/command/overview). </Tip>

## Components of a high quality prompt

* ***Clear objective or outcome***
  * What are you asking the model to produce?
  * Are you asking the model for a plan? For new code? Is it a refactor?
* ***All relevant context to perform the task(s)***
  * Have you properly used @-Mentions to ensure that the proper context is included?
  * Is there any context that is customer specific that may be unclear to Windsurf?
* ***Necessary constraints***
  * Are there any specific frameworks, libraries, or languages that must be utilized?
  * Are there any space or time complexity constraints?
  * Are there any security considerations?

## Examples

***Example #1:***

* **Bad**: Write unit tests for all test cases for an Order Book object.

* **Good**: Using `@class:unit-testing-module` write unit tests for `@func:src-order-book-add` testing for exceptions thrown when above or below stop loss

***Example #2***:

* **Bad**: Refactor rawDataTransform.

* **Good**: Refactor `@func:rawDataTransform` by turning the while loop into a for loop and using the same data structure output as `@func:otherDataTransformer`

***Example #3***:

* **Bad**: Create a new Button for the Contact Form.

* **Good**: Create a new Button component for the `@class:ContactForm` using the style guide in `@repo:frontend-components` that says “Continue”


# Common Use Cases
Source: https://docs.windsurf.com/best-practices/use-cases



Windsurf serves a variety of use cases at a high level. However, we see certain use cases to be more common than others, especially among our enterprise customers within their production codebases.

## Code generation

<AccordionGroup>
  <Accordion title="Boilerplate code">
    **Guidance:** Windsurf should work well for this use case. Windsurf features including single-line suggestions, multi-line suggestions, and fill-in-the-middle (FIM) completions.

    **Best Practices:** Ensuring usage of Next Completion (`⌥ + ]`), Context Pinning, @ Mentions, and Custom Context will provide best results.
  </Accordion>

  <Accordion title="Front-end development tasks">
    **Guidance:** Windsurf should work well for this use case. Windsurf features including single-line suggestions, multi-line suggestions, and fill-in-the-middle (FIM) completions.

    **Best Practices:** Ensuring usage of Next Completion (`⌥ + ]`), Context Pinning, @ Mentions, and Custom Context will provide best results.
  </Accordion>

  <Accordion title="Back-end development tasks">
    **Guidance:** Windsurf should work well for this use case. Windsurf features including single-line suggestions, multi-line suggestions, and fill-in-the-middle (FIM) completions.

    **Best Practices:** Ensuring usage of Next Completion (`⌥ + ]`), Context Pinning, @ Mentions, and Custom Context will provide best results.
  </Accordion>
</AccordionGroup>

## Unit Test generation

<AccordionGroup>
  <Accordion title="Generate unit tests and automatically remove redundant test cases">
    **Guidance:** Basic usage of Windsurf for generating unit tests should reliably generate 60-70% of unit tests. Edge case coverage will only be as good as the user prompting the model is.

    **Best Practices:** Use @ Mentions. Prompt Engineering best practices. Examples include:

    Write unit test for `@function-name` that tests all edge cases for X and for Y (e.g. email domain).

    Use `@testing-utility-class` to write a unit test for `@function-name`.
  </Accordion>

  <Accordion title="Generate sample data for test execution">
    **Guidance:** Good for low-hanging fruit use cases. For very specific API specs or in-house libraries, Windsurf will not know the intricacies well enough to ensure the quality of generated sample data.

    **Best Practices:** Be very specific about the interface you expect. Think about the complexity of the task (and if a single-shot LLM call will be sufficient to address).
  </Accordion>
</AccordionGroup>

## Internal Code Commentary

<AccordionGroup>
  <Accordion title="Generate in-line comments and code descriptions">
    **Guidance:** Windsurf should work well for this use case. Use Windsurf Command or Windsurf Chat to generate in-line comments and code descriptions.

    **Best Practices:** Use @ Mentions and use Code Lenses as much as possible to ensure the scope of the LLM call is correct.
  </Accordion>

  <Accordion title="Suggest improvements and clarifications">
    **Guidance:** Generally the Refactor button / Windsurf Command would be the best ways to prompt for improvements. Windsurf Chat is the best place to ask for explanations or clarifications. This is a little vague but Windsurf should be good at doing both.

    Windsurf Chat is the best place to ask for explanations or clarifications.

    This is a little vague but Windsurf should be good at doing both.

    **Best Practices**: Use the dropdown prompts (aka Windsurf's Refactor button) - we have custom prompts that are better engineered to deliver the answer you'd more likely expect.
  </Accordion>

  <Accordion title="Automate function headers (C/C++/C#)">
    **Guidance**: The best way to do this would be to create the header file, open chat, @ mention the function in the cpp file, and ask it to write the header function. Then do this iteratively for each in the cpp file. This is the best way to ensure no hallucinations along the way.

    **Best Practices**: Generally avoid trying to write a whole header file with one LLM call. Breaking down the granularity of the work makes the quality of the generated code significantly higher.
  </Accordion>
</AccordionGroup>

## API Documentation and Integration

<AccordionGroup>
  <Accordion title="Create documentation as APIs created and inform proper context">
    **Guidance**: This is similar to test coverage where parts of the API spec that are common across many libraries Windsurf would be able to accurately decorate. However, things that are built special for your in-house use case Windsurf might struggle to do at the quality that you expect.

    **Best Practices**: Similar to test coverage, as much as possible, walk Windsurf's model through the best way to think about what the API is doing and it will be able to decorate better.
  </Accordion>

  <Accordion title="Search repo for APIs with natural language and generate code for integrations">
    **Guidance**: Windsurf's context length for a single LLM call is 16,000 tokens. Thus, depending on the scope of your search, Windsurf's repo-wide search capability may not be sufficient. Repo-wide, multi-step, multi-edit tasks will be supported in upcoming future Windsurf products.

    This is fundamentally a multi-step problem that single-shot LLM calls (i.e. current functionality of all AI code assistants) are not well equipped to address. Additionally, accuracy of result must be much higher than other use cases as integrations are especially fragile.

    **Best Practices**: Windsurf is not well-equipped to solve this problem today. If you'd like to test the extent of Windsurf's existing functionality, build out a step-by-step plan and prompt Windsurf individually with each step and high level of details to guide the AI.
  </Accordion>
</AccordionGroup>

## Code Refactoring

<AccordionGroup>
  <Accordion title="Code simplification and modularization">
    **Guidance**: Ensure proper scoping using Windsurf Code Lenses or @ Mentions to make sure all of the necessary context is passed to the LLM.

    Context lengths for a single LLM call are finite. Thus, depending on the scope of your refactor, this finite context length may be an issue (and for that matter, any single-shot LLM paradigm). Repo-wide, multi-step, multi-edit tasks are now supported in Windsurf's [Cascade](/windsurf/cascade).

    **Best Practices**: Try to break down the prompt as much as possible. The simpler and shorter the command for refactoring the better.
  </Accordion>

  <Accordion title="Restructuring code to improve readability / maintainability">
    **Guidance**: Ensure proper scoping using Windsurf Code Lenses or @ Mentions to make sure all of the necessary context is passed to the LLM.

    Windsurf's context length for a single LLM call is 16,000 tokens. Thus, depending on the scope of your refactor, Windsurf's context length may be an issue (and for that matter, any single-shot LLM paradigm). Repo-wide, multi-step, multi-edit tasks will be supported in upcoming future Windsurf products.

    **Best Practices**: Try to break down the prompt as much as possible. The simpler and shorter the command for refactoring the better.
  </Accordion>
</AccordionGroup>


# Models
Source: https://docs.windsurf.com/chat/models



While we provide and train our own dedicated models for Chat, we also give you the flexibility choose your favorites.

It's worth noting that the Windsurf models are tightly integrated with our reasoning stack, leading to better quality suggestions than external models for coding-specific tasks.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/chat_model_selection.png" />
</Frame>

Model selection can be found directly under the chat.

## Base Model ⚡

**Access:** All users

Available for unlimited use to all users is a fast, high-quality Windsurf Chat model based on Meta's [Llama 3.1 70B](https://ai.meta.com/blog/meta-llama-3-1/).

This model is optimized for speed, and is the **fastest** model available in Windsurf Chat. This is all while still being extremely accurate.

## Windsurf Premier 🚀

**Access:** Any paying users (Pro, Teams, Enterprise, etc.)

Available in our paid tier is unlimited usage of our premier Windsurf Chat model based on Meta's [Llama 3.1 405B](https://ai.meta.com/blog/meta-llama-3-1/).

This is the **highest-performing model** available for use in Windsurf, due to its size and integration with Windsurf's reasoning engine and native workflows.

## Other Models (GPT-4o, Claude 3.5 Sonnet)

**Access:** Any paying users (Pro, Teams, Enterprise, etc.)

Windsurf provides access to OpenAI's and Anthropic's flagship models, available for use in any of our paid tiers.


# Overview
Source: https://docs.windsurf.com/chat/overview

Converse with a codebase-aware AI

<Note>
  Chat and its related features are only supported in: VS Code, JetBrains IDEs, Eclipse, X-Code, and Visual Studio.
</Note>

**Windsurf Chat** enables you to talk to your codebase from within your editor.
Chat is powered by our [context awareness](/context-awareness/overview.mdx) engine.
It combines built-in context retrieval with optional user guidance to provide accurate and grounded answers.

<Tabs>
  <Tab title="VS Code">
    In VS Code, Windsurf Chat can be found by default on the left sidebar.
    If you wish to move it elsewhere, you can click and drag the Windsurf icon and relocate it as desired.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/chat_vscode_where_to_find.png" />
    </Frame>

    You can use `⌘+⇧+A` on Mac or `Ctrl+⇧+A` on Windows/Linux to open the chat panel and toggle focus between it and the editor.
    You can also pop the chat window out of the IDE entirely by clicking the page icon at the top of the chat panel.
  </Tab>

  <Tab title="JetBrains">
    In JetBrains IDEs, Windsurf Chat can be found by default on the right sidebar.
    If you wish to move it elsewhere, you can click and drag the Windsurf icon and relocate it as desired.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/chat_jetbrains_where_to_find.png" />
    </Frame>

    You can use `⌘+⇧+L` on Mac or `Ctrl+⇧+L` on Windows/Linux to open the chat panel while you are typing in the editor.
    You can also open the chat in a popped-out browser window by clicking `Tools > Windsurf > Open Windsurf Chat in Browser` in the top menu bar.
  </Tab>
</Tabs>

## @-Mentions

<Tip>An @-mention is a deterministic way of bringing in context, and is guaranteed to be part of the context used to respond to a chat.</Tip>

In any given chat message you send, you can explicitly refer to context items from within the chat input by prefixing a word with `@`.

Context items available to be @-mentioned:

* Functions & classes
  * Only functions and classes in the local indexed
  * Also only available for languages we have built AST parsers for (Python, TypeScript, JavaScript, Go, Java, C, C++, PHP, Ruby, C#, Perl, Kotlin, Dart, Bash, COBOL, and more)
* Directories and files in your codebase
* Remote repositories
* The contents of your in-IDE terminal (VS Code only).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/at_mentions.png" />
</Frame>

You can also try `@diff`, which lets you chat about your repository's current `git diff` state.
The `@diff` feature is currently in beta.

<Tip>If you want to pull a section of code into the chat and you don't have @-Mentions available, you can: 1. highlight the code -> 2. right click -> 3. select 'Windsurf: Explain Selected Code Block'</Tip>

## Persistent Context

You can instruct the chat model to use certain context throughout a conversation and across different conversations
by clicking on the `Advanced` tab in the chat panel.

<Frame caption="Chat shows you the context it is considering.">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/chat_context.png" />
</Frame>

In this tab, you can see:

* **Custom Chat Instructions**: a short prompt guideline like "Respond in Kotlin and assume I have little familiarity with it" to orient the model towards a certain type of response.
* **Pinned Contexts**: items from your codebase like files, directories, and code snippets that you would like explicitly for the model to take into account.
  See also [Context Pinning](/context-awareness/overview#context-pinning).
* **Active Document**: a marker for your currently active file, which receives special focus.
* **Local Indexes**: a list of local repositories that the Windsurf context engine has indexed.

## Slash Commands

You can prefix a message with `/explain` to ask the model to explain something of your choice.
Currently, `/explain` is the only supported slash command.
[Let us know](https://codeium.canny.io/feature-requests/) if there are other common workflows you want wrapped in a slash command.

## Copy and Insert

Sometimes, Chat responses will contain code blocks. You can copy a code block to your clipboard or insert it directly into the editor
at your cursor position by clicking the appropriate button atop the code block.

<Note>
  If you would like the AI to enact a change directly in your editor based on an instruction,
  consider using [Windsurf Command](/command/overview).
</Note>

## Inline Citations

Chat is aware of code context items, and its responses often contain linked references to snippets of code in your files.

<Frame>
  <video autoPlay muted loop playsInline src="https://exafunction.github.io/public/videos/chat/inline-citations.mp4" />
</Frame>

## Regenerate with Context

By default, Windsurf makes a judgment call whether any given question is general or if it requires codebase context.

You can force the model to use codebase context by submitting your question with `⌘⏎`.
For a question that has already received a response, you rerun with context by clicking the sparkle icon.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/chat_regenerate_with_context.png" />
</Frame>

## Stats for Nerds

Lots of things happen under the hood for every chat message. You can click the stats icon to see these statistics for yourself.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/chat_stats_for_nerds.png" />
</Frame>

## Chat History

To revisit past conversations, click the history icon at the top of the chat panel.
You can click the `+` to create a new conversation, and
you can click the `⋮` button to export your conversation. This applies only for the Windsurf Plugins.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/chat_history.png" />
</Frame>

## Settings

Click on the gear icon to reach the `Settings` tab. Here, you can view settings that are applicable to your account. For example, you can update your theme preferences (light or dark), change autocomplete speed, view current plan, and change font size.
The settings panel also gives you an option to download diagnostics, which are debug logs that can be helpful for the Windsurf team to debug an issue, should you encounter one.

<Frame caption="On Windsurf Chat, click on the gear icon on the top right corner">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/chat_settings.png" />
</Frame>

## Telemetry

<Note>You may encounter issues with Chat if Telemetry is not enabled.</Note>

<Tabs>
  <Tab title="VS Code">
    To enable telemetry, open your VS Code settings and navigate to User > Application > Telemetry. In the following dropdown, select "all".

    <img width="350" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/vscode_telemetry_settings.png" />
  </Tab>

  <Tab title="JetBrains">
    To enable telemetry in JetBrains IDEs, open your Settings and navigate to Appearance & Hehavior > System Settings > Data Sharing.

    <img width="350" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains_telemetry_settings.png" />
  </Tab>
</Tabs>


# Overview
Source: https://docs.windsurf.com/command/plugins-overview

AI-powered in-line edits

**Windsurf Command** generates new or edits existing code via natural language inputs, directly in the editor window.

<Tabs>
  <Tab title="VS Code">
    To invoke Command, press `⌘+I` on Mac or `Ctrl+I` on Windows/Linux.
    From there, you can enter a prompt in natural language and hit the Submit button (or `⌘+⏎`/`Ctrl+⏎`) to forward the instruction to the AI.
    Windsurf will then provide a multiline suggestion that you can accept or reject.

    If you highlight a section of code before invoking Command, then the AI will edit the selection spanned by the highlighted lines.
    Otherwise, it will generate code at your cursor's location.

    <Frame>
      <video autoPlay muted loop playsInline src="https://exafunction.github.io/public/videos/codeium_command_vscode.mp4" />
    </Frame>

    You can accept, reject, or follow-up a generation by clicking the corresponding code lens above the generated diff,
    or by using the appropriate shortcuts (`⌥+A`/`Alt+A`, `⌥+R`/`Alt+R`, and `⌥+F`/`Alt+F`, respectively).
  </Tab>

  <Tab title="JetBrains">
    To invoke Command, press `⌘+I` on Mac or `Ctrl+I` on Windows/Linux.

    <Note>
      Some users have reported keyboard conflicts with this shortcut, so `⌘+⇧+I` and `⌘+\`on Mac (`Ctrl+⇧+I` and `Ctrl+\` on Windows/Linux)
      will also work.
    </Note>

    The Command invocation will open an interactive popup at the appropriate location in the code.
    You can enter a prompt in natural language and Windsurf will provide a multiline suggestion that you can accept or reject.
    If you highlight a section of code before invoking Command, then the AI will edit the selection spanned by the highlighted lines.
    Otherwise, it will generate code at your cursor's location.

    <Frame>
      <video autoPlay muted loop playsInline src="https://exafunction.github.io/public/videos/codeium_command_jetbrains.mp4" />
    </Frame>

    The Command popup will persist in the editor if you scroll around or focus your cursor elsewhere in the editor.
    It will act on your most recently highlighted selection of code or your most recent cursor position.
    While it is active, the Command popup gives you the following options:

    * **Cancel** (`Esc`): this will close the popup and undo any code changes that may have occured while the popup was open.
    * **Accept generation** (`⌘+⏎`): this option appears after submitting an instruction and receiving a generation.
      It will write the suggestion into the code editor and close the popup.
    * **Undo generation** (`⌘+⌫`): this option appears after submitting an instruction and receiving a generation.
      It will restore the code to its pre-Command state without closing the popup, while reinserting your most recent instruction
      into the input box.
    * **Follow-up**: this option appears after submitting an instruction and receiving a generation.
      You can enter a second (and third, fourth, etc.) instruction and submit it,
      which will undo the currently shown generation and rerun Command using your comma-concatenated instruction history.
  </Tab>
</Tabs>

# Best Practices

Windsurf Command is great for file-scoped, in-line changes that you can describe as an instruction in natural language.
Here are some pointers to keep in mind:

* The model that powers Command is larger than the one powering autocomplete.
  It is slower but more capable, and it is trained to be especially good at instruction-following.

* If you highlight a block of code before invoking Command, it will edit the selection. Otherwise, it will do a pure generation.

* Using Command effectively can be an art. Simple prompts like "Fix this" or "Refactor" will likely work
  thanks to Windsurf's context awareness.
  A specific prompt like "Write a function that takes two inputs of type `Diffable` and implements the Myers diff algorithm"
  that contains a clear objective and references to relevant context may help the model even more.


# Refactors, Docstrings, and More
Source: https://docs.windsurf.com/command/related-features

Features powered by Command

Command enables streamlined experiences for a few common operations.

## Function Refactors and Docstring Generation

Above functions and classes, Windsurf renders *code lenses*,
which are small, clickable text labels that invoke Windsurf's AI capabilities on the labeled item.

<Tip>You can disable code lenses by clicking the `✕` to the right of the code lens text.</Tip>

The `Refactor` and `Docstring` code lenses in particular will invoke Command.

* If you click `Refactor`, Windsurf will prompt you with a dropdown of selectable, pre-populated
  instructions that you can choose from. You can also write your own. This is equivalent to highlighting the function and invoking Command.
* If you click `Docstring`, Windsurf will generate a docstring for you above the function header.
  (In Python, the docstring will be correctly generated *underneath* the function header.)

<Frame caption="Encouraging readable and maintainable code, one docstring at a time.">
  <video autoPlay muted loop playsInline src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains_docstrings.mp4" />
</Frame>

## Smart Paste

This feature allows you to copy code and paste it into a file in your IDE written in a different programming language.
Use `⌘+⌥+V` (Mac) or `Ctrl+Alt+V` (Windows/Linux) to invoke Smart Paste.
Behind the scenes, Windsurf will detect the language of the destination file and use Command to translate the code in your clipboard.
Windsurf's context awareness will try to write it to fit in your code, for example by referencing proper variable names.

<Frame>
  <video autoPlay muted loop playsInline src="https://exafunction.github.io/public/videos/demos/Smart_Paste_Demo_1080p.mp4" />
</Frame>

Some possible use cases:

* **Migrating code**: you're rewriting JavaScript into TypeScript, or Java into Kotlin.
* **Pasting from Stack Overflow**: you found a utility function online written in Go, but you're using Rust.
* **Learning a new language**: you're curious about Haskell and want to see what your would look like if written in it.


# Command
Source: https://docs.windsurf.com/command/windsurf-overview

Cmd/Ctrl + I for in-line code generations and edits

**Command** generates new or edits existing code via natural language inputs, directly in the editor window.

<Tip>Command does NOT consume any premium model credits.</Tip>

To invoke Command, press `⌘+I` on Mac or `Ctrl+I` on Windows/Linux.

You can enter a prompt in natural language and hit the Submit button (or `⌘+⏎`/`Ctrl+⏎`) to forward the instruction to the AI.

If you highlight a section of code before invoking Command, then the AI will edit the selection spanned by the highlighted lines.
Otherwise, it will generate code at your cursor's location.

<Frame style={{ border: 'none', background: 'none' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf-command.png" />
</Frame>

You can accept, reject, or follow-up a generation by clicking the corresponding code lens above the generated diff,or by using the appropriate shortcuts (`Cmd/Ctrl+Enter`/`Cmd/Ctrl+Delete`)

# Models

Command comes with its own set of models that are optimized for current-file edits.

<Frame>
  <video autoPlay muted loop playsInline src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf-command-models.mp4" />
</Frame>

<Tip> Windsurf Fast is the fastest, most accurate model available.</Tip>

# Terminal Command

You can use Command in the terminal (`Cmd/Ctrl+I`) to generate the proper CLI syntax using prompts in natural language.

<Frame style={{ border: 'none', background: 'none' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf-terminal-command.png" />
</Frame>

# Best Practices

Command is great for file-scoped, in-line changes that you can describe as an instruction in natural language.
Here are some pointers to keep in mind:

* The model that powers Command is larger than the one powering autocomplete.
  It is slower but more capable, and it is trained to be especially good at instruction-following.

* If you highlight a block of code before invoking Command, it will edit the selection. Otherwise, it will do a pure generation.

* Using Command effectively can be an art. Simple prompts like "Fix this" or "Refactor" will likely work
  thanks to Windsurf's context awareness.
  A specific prompt like "Write a function that takes two inputs of type `Diffable` and implements the Myers diff algorithm"
  that contains a clear objective and references to relevant context may help the model even more.


# Code Lenses
Source: https://docs.windsurf.com/command/windsurf-related-features

Shortcuts for common operations

## Explain, Refactor, and Add Docstring

At the top of the text editor, Windsurf gives exposes *code lenses* on functions and classes.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/windsurf-code-lenses.png" />
</Frame>

The `Explain` code lens will invoke Cascade, which will simply explain what the function or class does and how it works.

The `Refactor` and `Docstring` code lenses in particular will invoke Command.

* If you click `Refactor`, Windsurf will prompt you with a dropdown of selectable, pre-populated
  instructions that you can choose from. You can also write your own. This is equivalent to highlighting the function and invoking Command.
* If you click `Docstring`, Windsurf will generate a docstring for you above the function header.
  (In Python, the docstring will be correctly generated *underneath* the function header.)

<Frame>
  <video autoPlay muted loop playsInline src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/windsurf-refactor-code-lens.mp4" />
</Frame>

## Smart Paste

This feature allows you to copy code and paste it into a file in your IDE written in a different programming language.
Use `⌘+⌥+V` (Mac) or `Ctrl+Alt+V` (Windows/Linux) to invoke Smart Paste.
Behind the scenes, Windsurf will detect the language of the destination file and use Command to translate the code in your clipboard.
Windsurf's context awareness will try to write it to fit in your code, for example by referencing proper variable names.

<Frame>
  <video autoPlay muted loop playsInline src="https://exafunction.github.io/public/videos/demos/Smart_Paste_Demo_1080p.mp4" />
</Frame>

Some possible use cases:

* **Migrating code**: you're rewriting JavaScript into TypeScript, or Java into Kotlin.
* **Pasting from Stack Overflow**: you found a utility function online written in Go, but you're using Rust.
* **Learning a new language**: you're curious about Haskell and want to see what your would look like if written in it.


# Local Indexing
Source: https://docs.windsurf.com/context-awareness/local-indexing



The **Indexing Engine** is Windsurf's codebase awareness service that powers:

* Codebase-Aware [Chat](/chat/overview)

* Codebase-Aware [Autocomplete](/autocomplete/overview)

Compared to regular context-aware Autocomplete and Chat, the Indexing Engine is able to retrieve context from across the entire codebase, not just files that you have recently interacted with. This  significantly improves the quality of autocomplete and chat responses.

<Note>Local Indexing is on by default for all Plugin users, and always on for Windsurf Users.</Note>

## How It Works

The Indexing Engine works in part by generating embeddings for your codebase that capture the underlying meaning. These embeddings can queried using both Natural Language and related code snippets.

Windsurf Indexing does send snippets of code to a remote server to generate embeddings. However, no code or embeddings are stored remotely -- all your data is stored on your own device.

## How to Toggle Indexing Engine

<Tabs>
  <Tab title="VS Code">
    To toggle Indexing Engine in VS Code, go to your "Settings (UI)" page, and search for "Windsurf Search". You should see an option to enable search, and set the Max Workspace Size.

    Then restart your IDE and the change should be reflected.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/vscode-indexing1.png" />
    </Frame>

    You can see if your workspace is indexed by checking the "Context" pane in the "Chat" panel. If there is a green dot next to your workspace, then it is indexed and searchable.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/vscode-indexing2.png" />
    </Frame>
  </Tab>

  <Tab title="JetBrains">
    In the Preferences menu, navigate to Tools > Windsurf Settings.

    Click "Enable/Disable Windsurf Indexing", and set the appropriate value for "Indexing Max Workspace Size (File Count)" then restart your IDE.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains-indexing.png" />
    </Frame>
  </Tab>
</Tabs>

## WindsurfIgnore

By default, Windsurf Indexing will ignore:

* Paths specified in `gitignore`
* Files in `node_modules`
* Hidden pathnames (starting with ".")

When a file is ignored, it will not be indexed, and also does not count against the Indexing Max Workspace Size file counts.

If you want to further configure files that Windsurf Indexing ignores, you can add a `.codeiumignore` file to your repo root, with the same syntax as `.gitignore`

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/codeiumignore.png" />
</Frame>

## System Requirements

When first enabled, Windsurf will consume a fraction of CPU while it indexes the workspace. Depending on your workspace size, this should take 5-10 minutes, and only needs to happen once per workspace. CPU usage will return to normal automatically. Windsurf Indexing also requires RAM (\~300MB for a 5000-file workspace).

The "Max Workspace Size (File Count)" setting determines the largest workspace for which Windsurf Indexing will try to index a particular workspace / module. If your workspace does not appear to be indexed, please try adjusting this number higher. For users with \~10GB of RAM, we recommend setting this no higher than 10,000 files.


# Overview
Source: https://docs.windsurf.com/context-awareness/overview

On codebase context and related features

Windsurf's context engine builds a deep understanding of your codebase, past actions, and next intent.

Historically, code-generation approaches focused on fine-tuning large language models (LLMs) on a codebase,
which is difficult to scale to the needs of every individual user.
A more recent and popular approach leverages retrieval-augmented generation (RAG),
which focuses on techniques to construct highly relevant, context-rich prompts
to elicit accurate answers from an LLM.

We've implemented an optimized RAG approach to codebase context,
which produces higher quality suggestions and fewer hallucinations.

<Note>
  Windsurf offers full fine-tuning for enterprises, and the best solution
  combines fine-tuning with RAG.
</Note>

## Default Context

Out of the box, Windsurf takes multiple relevant sources of context into consideration.

* The current file and other open files in your IDE, which are often very relevant to the code you are currently writing.
* The entire local codebase is then indexed (including files that are not open),
  and relevant code snippets are sourced by Windsurf's retrieval engine as you write code, ask questions, or invoke commands.
* For Pro users, we offer expanded context lengths increased indexing limits, and higher limits on custom context and pinned context items.
* For Teams and Enterprise users, Windsurf can also index remote repositories.
  This is useful for companies whose development organization works across multiple repositories.

## Context Pinning

Developers have the option to offer additional guidance by pinning custom context.
You can find this option under the [context tab of the chat panel](/chat/overview#persistent-context).

You can choose to pin directories, files, repositories, or code context items (functions, classes, etc.) as persistent context.
Models reference these items for every suggestion, across Autocomplete, Chat, and Command.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/pinned_context.png" />
</Frame>

### Best Practices

Context Pinning is great when your task in your current file depends on information from other files.
Try to pin only what you need. Pinning too much may slow down or negatively impact model performance.

Here are some ideas for effective context pinning:

* Module Definitions: pinning class/struct definition files that are inside your repo but in a module separate from your currently active file.
* Internal Frameworks/Libraries: pinning directories with code examples for using frameworks/libraries.
* Specific Tasks: pinning a file or folder defining a particular interface (e.g., `.proto` files, abstract class files, config templates).
* Current Focus Area: pinning the "lowest common denominator" directory containing the majority of files needed for your current coding session.
* Testing: pinning a particular file with the class you are writing unit tests for.

## Chat-Specific Context Features

When conversing with Windsurf Chat, you have various ways of leveraging codebase context,
like [@-mentions](/chat/overview/#mentions) or custom guidelines.
See the [Chat page](/chat/overview) for more information.

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://exafunction.github.io/public/videos/chat/inline-mention.mp4" />

## Frequently Asked Questions (FAQs)

### Does Windsurf index my codebase?

Yes, Windsurf does index your codebase. It also uses LLMs to perform retrieval-augmented generation (RAG) on your codebase using our own [M-Query](https://youtu.be/DuZXbinJ4Uc?feature=shared\&t=606) techniques.

Indexing performance and features vary based on your workflow and your Windsurf plan. For more information, please visit our [context awareness page](https://windsurf.com/context).


# Remote Indexing
Source: https://docs.windsurf.com/context-awareness/remote-indexing



<Note> This feature is only available to Windsurf Teams and Enterprise users. </Note>

While Local Indexing works great, the user may want to index codebases that they do not have stored locally for our models to take in as context.

For this use case, organizations on Teams and Enterprise plans can use Windsurf's Indexing Service to globally import all the relevant repositories. The indexing and embedding is then performed by Windsurf's servers (on an isolated tenant), and once the index is created, it is available to be queried by any member of the Team.

## Adding a repository

From [https://codeium.com/indexing](https://codeium.com/indexing) you can add a repository to index. Currently we support Git repositories from GitHub, GitLab, and BitBucket.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/remote-indexing-adding-repo.png" />
</Frame>

You can choose to index a particular branch and to automatically re-index the repository after some number of days.

## Security Guarantees

We clone the repository in order to create the index, but once we finish creating embeddings for the codebase we delete all the code and code snippets **assuming that the Store Snippets setting is unchecked.** We don't persist anything other than the embeddings themselves, from which you cannot derive the original code.

Furthermore, all indexing and embedding is performed on a single-tenant instance—nothing about the indexing process is shared between multiple Windsurf Teams customers.


# Setting up SSO & SCIM
Source: https://docs.windsurf.com/getstarted/sso-scim



<Note>This feature is only available to Enterprise users.</Note>

<Tabs>
  <Tab title="Google SSO">
    Windsurf Enterprise now supports sign in with Single Sign-On (SSO) via SAML. If your organization uses Microsoft Entra, Okta, Google Workspaces, or some other identity provider that supports SAML, you will be able to use SSO with Windsurf.

    <Note>Windsurf only supports SP-initiated SSO; IDP-initiated SSO is NOT currently supported.</Note>

    ### Configure IDP Application

    On the google admin console (admin.google.com) click **Apps -> Web and mobile apps** on the left.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-google.png" />
    </Frame>

    Click on **Add app**, and then **Add custom SAML app**.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-google2.png" />
    </Frame>

    Fill out **App name** with `Windsurf`, and click **Next**.

    The next screen (Google Identity Provider details) on Google’s console page has data you’ll need to copy to Windsurf’s SSO settings on [www.windsurf.com/team/team\_settings](http://www.windsurf.com/team/team_settings).

    * Copy **SSO URL** from Google’s console page to Windsurf’s settings under **SSO URL**

    * Copy **Entity ID** from Google’s console page to Windsurf’s settings under **Idp Entity ID**

    * Copy **Certificate** from Google’s console page to Windsurf’s settings under **X509 Certificate**

    * Click **Continue** on Google’s console page

    The next screen on Google’s console page requires you to copy data from Codeium’s settings page

    * Copy **Callback URL** from Codeium’s settings page to Google’s console page under **ACS URL**
    * Copy **SP Entity ID** from Codeium’s settings page to Google’s console page under **SP Entity ID**
    * Change **Name ID** format to **EMAIL**
    * Click **Continue** on Google’s console page

    The next screen on Google’s console page requires some configuration

    * Click on **Add Mapping**, select **First name** and set the **App attributes** to **firstName**
    * Click on **Add Mapping**, select **Last name** and set the **App attributes** to **lastName**
    * Click **Finish**

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-google3.png" />
    </Frame>

    On Codeium’s settings page, click **Enable Login with SAML**, and then click **Save**. Make sure to click on **Test Login** to make sure login works as expected. All users now will have SSO login enforced.
  </Tab>

  <Tab title="Azure AD SSO">
    Windsurf Enterprise now supports sign in with Single Sign-On (SSO) via SAML. If your organization uses Microsoft Azure AD, you will be able to use SSO with Windsurf.

    <Note> that Windsurf only supports SP-initiated SSO; IDP-initiated SSO is NOT currently supported.</Note>

    ### Configure IDP Application

    Create an Enterprise Application with your identity provider. Click on **Add**, and then **Enterprise Application**.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-azure.png" />
    </Frame>

    Click on **Create your own application**.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-azure2.png" />
    </Frame>

    Name your application **Windsurf**, select *Integrate any other application you don’t find in the gallery*, and then click **Create**.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-azure3.png" />
    </Frame>

    Configure your enterprise application with SAML

    * Click on Set up single sign on in the new Windsurf application, and then Click on SAML
    * Click on Edit under Basic SAML Configuration, and open up the Windsurf Teams SSO settings at [https://www.codeium.com/team/team\_settings](https://www.codeium.com/team/team_settings)
    * On Entra’s SAML configuration form and Windsurf SSO settings page
      * For Identifier (Entity ID), copy the SP Entity ID value in the SSO settings page
      * For Reply URL (Assertion Consumer Service URL), copy the Callback URL value in the SSO settings page
      * Click Save at the top
      * Pick the SSO ID you want to use, which creates a login portal for your team. Note that this is not changeable after this is saved.
      * Fill out IdP Entity ID in the settings page with the value in Entra ID under Set up Windsurf -> Microsoft Entra Identifier
      * Fill out SSO URL in the settings page with the value in Entra ID under Login URL
      * Download the SAML certificate (Base64), get the text content of the file, and paste it to X509 Certificate on the Windsurf settings page
      * Click on Enable Login with SAML
      * Click Save in the Windsurf settings page
    * We also need to set up name claims. This step is important in order for Windsurf to know the display name of the user.
      * Under Attributes & Claims under Entra ID, click on Edit
      * Create 2 new claims. You can do so by clicking on Add new claim
        * The first claim should have ‘firstName’ as the Name, and ‘user.givenname’ as the Source attribute
        * The second claim should have ‘lastName’ as the Name, and ‘user.surname’ as the Source attribute
    * At this point you should have successfully configured SSO. Under Save in the settings page, click on Test Login to make sure everything works as expected.
  </Tab>

  <Tab title="Okta SSO">
    Windsurf Enterprise now supports sign in with Single Sign-On (SSO) via SAML. If your organization uses Microsoft Entra, Okta, Google Workspaces, or some other identity provider that supports SAML, you will be able to use SSO with Windsurf.

    <Note>Windsurf only supports SP-initiated SSO; IDP-initiated SSO is NOT currently supported.</Note>

    ### Configure IDP Application

    Click on Applications on the left sidebar, and then Create App Integration

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-okta1.png" />
    </Frame>

    Select SAML 2.0 as the sign-in method

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-okta2.png" />
    </Frame>

    Set the app name as Windsurf (or to any other name), and click Next

    Configure the SAML settings as

    * Single sign-on URL to [https://auth.windsurf.com/\_\_/auth/handler](https://auth.windsurf.com/__/auth/handler)
    * Audience URI (SP Entity ID) to [www.codeium.com](http://www.codeium.com)
    * NameID format to EmailAddress
    * Application username to Email

    Configure the attribute statements as following, and then click **Next**.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-okta3.png" />
    </Frame>

    In the feedback section, select “This is an internal app that we have created”, and click **Finish**.

    ### Register Okta as a SAML provider

    You should be redirected to the Sign on tab under your custom SAML application. Now you’ll want to take the info in this page and fill it out in Windsurf’s SSO settings.

    * Open [www.windsurf.com/team/team\_settings](http://www.windsurf.com/team/team_settings), and click on Configure SAML
    * Copy the text after ‘Issuer’ in Okta’s application page and paste it under Idp Entity ID
    * Copy the text after ‘Sign on URL’ in Okta’s application page and paste it under SSO URL
    * Download the Signing Certificate and paste it under X509 certificate
    * Check Enable Login with SAML and then click Save
    * Test the login with the Test Login button. You should see a success message:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-okta4.png" />
    </Frame>

    At this point everything should have been configured, and can now add users to the new Windsurf Okta application.

    You should share your organization's custom Login Portal URL with your users and ask them to sign in via that link.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-okta5.png" />
    </Frame>

    Users who login to Windsurf via SSO will be auto-approved into the team.

    ### Caveats

    Note that Windsurf does not currently support IDP-initiated login flows.

    We also do not yet support OIDC.

    # Troubleshooting

    ### Login with SAML config failed: Firebase: Error (auth/operation-not-allowed)

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-okta6.png" />
    </Frame>

    This points to your an invalid SSO ID, or your SSO URL being incorrect, make sure it is alphanumeric and has no extra spaces or invalid characters. Please go over the steps in the guide again and make sure you use the correct values.

    ### Login with SAML config failed: Firebase: SAML Response \<Issuer> mismatch. (auth/invalid-credential)

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/sso-okta7.png" />
    </Frame>

    This points to your IdP entity ID being invalid, please make sure you copy it correctly from the Okta portal, without any extra characters or spaces before or after the string.

    ### Failed to verify the signature in samlresponse

    This points to an incorrect value of your X509 certificate, please make sure you copy the correct key, and that it is formatted as:

    ```
    -----BEGIN CERTIFICATE-----
    value
    ------END CERTIFICATE------
    ```
  </Tab>

  <Tab title="Azure SCIM">
    Windsurf supports SCIM synchronization for users and groups with Microsoft Entra ID / Azure AD. It isn't necessary to setup SSO to use SCIM synchronization, but it is highly recommended.

    You'll need:

    * Admin access to Microsoft Entra ID / Azure AD
    * Admin access to Windsurf
    * An existing Windsurf Application on Entra ID (normally from your existing SSO application)

    ## Step 1: Navigate to the existing Windsurf Application

    Go to Microsoft Entra ID on Azure, click on Enterprise applications on the left sidebar, and then click on the existing Windsurf application in the list.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/scim-azure.png" />
    </Frame>

    ## Step 2: Setup SCIM provisioning

    Click on Get started under Provision User Accounts in the middle (step 3), and then click on Get started again.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/scim-azure2.png" />
    </Frame>

    Under the Provisioning setup page, select the following options.

    Provisioning Mode:  Automatic

    Admin Credentials > Tenant URL: [https://server.codeium.com/scim/v2](https://server.codeium.com/scim/v2)

    Leave the Azure provisioning page open, now go to the Windsurf enterprise portal, and click on Settings in the NavBar on the top of the page. Under SCIM, click on Add API Key. Enter any key name (such as 'Azure Provisioning Key') and click Create API Key. Copy the output key, go back to the Azure page, paste it to Secret Token.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/scim-azure3.png" />
    </Frame>

    (What you should see after creating the key on Windsurf)

    On the Provisioning page, click on Test Connection and that should have verified the SCIM connection.

    Now above the Provisioning form click on Save.

    ## Step 3: Configure SCIM Provisioning

    After clicking on Save, a new option Mappings should have appeared in the Provisioning page. Expand Mappings, and click on Provision Microsoft Entra ID Users

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/scim-azure4.png" />
    </Frame>

    Under attribute Mappings, delete all fields under displayName, leaving only the fields userName, active, and displayName.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/scim-azure5.png" />
    </Frame>

    For active, now click on Edit. Under Expression, modify the field to

    ```
    NOT([IsSoftDeleted])
    ```

    Then click Ok.

    Your user attributes should look like

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/scim-azure6.png" />
    </Frame>

    In the Attribute Mapping page, click on Save on top, and navigate back to the Provisioning page.

    Now click on the same page, under Mappings click on Provision Microsoft Entra ID Groups. Now only click delete for externalId, and click Save on top. Navigate back to the Provisioning page.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/scim-azure7.png" />
    </Frame>

    On the Provisioning page at the bottom, there should also be a Provisioning Status toggle. Set that to On to enable SCIM syncing. Now every 40 minutes your users and groups for the Entra ID application will be synced to Windsurf.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/auth/scim-azure8.png" />
    </Frame>

    Click on Save to finish, you have now enabled user and group syncing for SCIM. Only users and groups assigned to the application will be synced to Windsurf. Note that removing users only disables them access to Windsurf (and stops them from taking up a seat) rather than deleting users due to Azure's SCIM design.
  </Tab>

  <Tab title="Okta SCIM">
    Windsurf supports SCIM synchronization for users and groups with Okta. It isn't necessary to setup SSO to use SCIM synchronization, but it is highly recommended.

    You'll need:

    * Admin access to Okta
    * Admin access to Windsurf
    * An existing Windsurf Application on Okta (normally from your existing SSO application)

    ## Step 1: Navigate to the existing Windsurf Application

    Go to Okta, click on Applications, Applications on the left sidebar, and then click on the existing Windsurf application in the application list.

    ## Step 2: Enable SCIM Provisioning

    Under the general tab, App Settings click on Edit on the top right. Then tick the 'Enable SCIM Provisioning' checkbox, then click Save. A new provisioning tab should have showed up on the top.

    Now go to provisioning, click Edit and input in the following fields:

    SCIM connector base URL: [https://server.codeium.com/scim/v2](https://server.codeium.com/scim/v2)

    Unique identifier field for users: email

    Supported provisioning actions: Push New Users, Push Profile Updates, Push Groups

    Authentication Mode: HTTP Header

    For HTTP Header - Authorization, you can generate the token from

    * [https://windsurf.com/team/team\_settings](https://windsurf.com/team/team_settings) and go to the SCIM tab on the left
    * Click on Add API Key, and give your API key a name
    * Copy the API key, go back to Okta and paste it to HTTP Header - Authorization

    Click on Save after filling out Provisioning Integration.

    ## Step 3: Setup Provisioning

    Under the provisioning tab, on the left there should be two new tabs. Click on To App, and Edit Provisioning to App. Tick the checkbox for Create Users, Update User Attributes, and Deactivate Users, and click Save.

    After this step, all users assigned to the group will now be synced to Windsurf.

    ## Step 4: Setup Group Provisioning (Optional)

    In order to sync groups to Windsurf, you will have to specify which groups to push. Under the application, click on the Push Groups tab on top. Now click on + Push Groups -> Find Groups by name. Filter for the group you would like to add, make sure Push group memberships immediately is checked, and then click Save. The group will be created and group members will be synced to Windsurf. Groups can then be used to filter for group analytics in the analytics page.
  </Tab>

  <Tab title="SCIM API">
    This guide shows how to create and maintain groups in Windsurf with the SCIM API.

    There are reasons one may want to provision groups manually rather than with their Identity Provider (Azure/Okta). Companies may want Groups provisioned from a different internal source (HR website, Sourcecode Management Tool etc.) that Windsurf doesn't have access to, or companies may finer control to Groups than what their Idendity Provider provides. Groups can thus be created with an API via HTTP request instead. The following provides examples on the HTTP request via CURL.

    There are 5 main APIs here, Create Group, Add group members, Replace group members, Delete Group, and List Users in a Group.

    ### Create Group

    ```
    curl -k -X POST https://server.codeium.com/scim/v2/Groups -d '{
    "displayName": "<group name>",
    "schemas": ["urn:ietf:params:scim:schemas:core:2.0:Group"]
    }' -H "Authorization: Bearer <api secret key>" -H "Content-Type: application/scim+json"
    ```

    ### Add Group Members

    ```
    curl -X PATCH https://server.codeium.com/scim/v2/Groups/<group name> -d '{"schemas": ["urn:ietf:params:scim:api:messages:2.0:PatchOp"],
    "Operations":[
    {
    "op": "add",
    "path":"members",
    "value": [{"value": "<email 1>"}, {"value": "<email 2>"}]
    }]}' -H "Authorization: Bearer <api secret key>" -H "Content-Type: application/scim+json"
    ```

    ### Replace Group Members

    ```
    curl -X PATCH https://server.codeium.com/scim/v2/Groups/<group name> -d '{"schemas": ["urn:ietf:params:scim:api:messages:2.0:PatchOp"],
    "Operations":[
    {
    "op": "replace",
    "path":"members",
    "value": [{"value": "<email 1>"}, {"value": "<email 2>"}]
    }]}' -H "Authorization: Bearer <api secret key>" -H "Content-Type: application/scim+json"
    ```

    ### Delete Group

    ```
    curl -X DELETE https://server.codeium.com/scim/v2/Groups/<group name> -H "Authorization: Bearer <api secret key>" -H "Content-Type: application/scim+json"
    ```

    ### List Group

    ```
    curl -X GET -H "Authorization: Bearer <api secret key>" "https://server.codeium.com/scim/v2/Groups"
    ```

    ### List Users in a Group

    ```
    curl -X GET -H "Authorization: Bearer <api secret key>" "https://server.codeium.com/scim/v2/Groups/<group_id>"
    ```

    You'll have to at least create the group first, and then replace group to create a group with members in them. You'll also need to URL encode the group names if your group name has a special character like space, so a Group name such as 'Engineering Group' will have to be 'Engineering%20Group' in the URL.

    Note that users need to be created in Windsurf (through SCIM or manually creating the account) before they can be added to a group.

    ## User APIs

    There are also APIs for users as well. The following are some of the common SCIM APIs that Windsurf supports.

    Disable a user (Enable by replacing false to true):

    ```
    curl -X PATCH \
      https://server.codeium.com/scim/v2/Users/<user api key> \
      -H 'Content-Type: application/scim+json' \
      -H 'Authorization: Bearer <api secret key>' \
      -d '{
        "schemas": ["urn:ietf:params:scim:api:messages:2.0:PatchOp"],
        "Operations": [
          {
            "op": "replace",
            "path": "active",
            "value": false
          }
        ]
      }'
    ```

    Create a user:

    ```
    curl -X POST \
      https://server.codeium.com/scim/v2/Users \
      -H 'Content-Type: application/scim+json' \
      -H 'Authorization: Bearer <api secret key>' \
      -d '{
        "schemas": ["urn:ietf:params:scim:schemas:core:2.0:User"],
        "userName": "<email>",
        "displayName": "<full name>",
        "active": true,
    }' 
    ```

    Update name:

    ```
    curl -X PATCH \
      'https://<enterprise portal url>/_route/api_server/scim/v2/Users/<user api key>' \
        -H 'Authorization: Bearer <service key>' \
        -H 'Content-Type: application/scim+json' \
        -d '{
          "schemas": ["urn:ietf:params:scim:api:messages:2.0:PatchOp"],
          "Operations": [
            {
              "op": "Replace",
              "path": "displayName",
              "value": "<new name>"
            }
          ]
       }'
    ```

    ## Creating Api Secret Key

    Go to [https://www.windsurf.com/team/team\_settings](https://www.windsurf.com/team/team_settings). Under Service Key, click on Add Service Key. Enter any key name (such as 'Azure Provisioning Key') and click Create Service Key. Copy the output key and save it, you can now use the key to authorize the above APIs.
  </Tab>
</Tabs>


# Profile & Analytics (Teams)
Source: https://docs.windsurf.com/plugins/analytics



## User Analytics

User analytics are available for viewing and sharing on your own [profile](https://codeium.com/profile) page.

See your completion stats, [refer](https://codeium.com/referral) your friends, look into your language breakdown,
and unlock achievement badges by using Windsurf in your daily workflow.

## Team Analytics

<Note>
  You will need team admin privileges in order to view the following team links.
</Note>

Windsurf makes managing your team easy from one [dashboard](https://codeium.com/team/).

Team leads and managers can also see an aggregate of their team members' analytics.
Click [here](https://codeium.com/team/analytics) to view.

We extrapolate from the data to provide you a quick view of the value that Windsurf is providing to your team.
This includes metrics like "percent of code written by Windsurf" as well as time and money saved.
Team admins can access these stats by clicking `Time Saved (All Time)` from the team page.

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://exafunction.github.io/public/demos/demo_subteam_analytics.mp4" />

## Adding Team members

<Note>You must be a team admin to add team members.</Note>

To add members to your team, first navigate to your [team's page](https://codeium.com/team).

Simply click on the "invite" button and select the team member to invite.

<Frame>
  <img width="500" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/teams-invite-members.png" />
</Frame>

Then just invite by email or share the unique invite link!

## User Groups

<Note>This feature is only available in Enterprise plans.</Note>

Windsurf now supports creating user groups. For each group you can now view analytics per group. You can also configure group administrators who can view analytics for the specific groups they manage.

## Profile Settings

There are a number of settings available for your profile page. This includes: name, email (for accounts with email authentication), profile picture, username (for your public profile), public profile visibility settings, telemetry settings, email subscription settings, and more.

You can also change and update your password if you used email-and-password authentication.


# Overview
Source: https://docs.windsurf.com/plugins/cascade/cascade-overview



Cascade in JetBrains allows us to expose [AI Flows](https://codeium.com/flows), a new way of coding with AI.

To open Cascade, press `Cmd/Ctrl+L`click the Cascade icon in the top right corner of the JetBrains window.

# Model selection

Select your desired model from the selection menu below the chat input.

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains-cascade-model-select.mp4" />

# Write/Chat Modes

Cascade comes in two modes: **Write** and **Chat**.

Write mode allows Cascade to create and make modifications to your codebase, while Chat mode is optimized for questions around your codebase or general coding principles.

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains-cascade-modes.mp4" />

# Access to Tools

Cascade has a variety of tools at its disposal, such as Search, Analyze, [Web Search](/windsurf/web-search), and the [terminal](/windsurf/terminal).

It can detect which packages and tools that you're using, which ones need to be installed, and even install them for you. Just ask Cascade how to run your project and press Accept.

<Note>Cascade can make up to 25 tool calls per prompt. If the trajectory stops, simply type in `continue` and Cascade will resume from where it left off. Each `continue` will count as a new prompt. </Note>

# Revert to previous steps

You have the ability to revert changes that Cascade has made if you want to. Simply hover your mouse over the original prompt and click on the revert arrow on the right, or revert directly from the table of contents. This will revert all code changes back to the state of your codebase at the desired step.

<Warning>Reverts are currently irreversible, so be careful!</Warning>

<video autoPlay controls muted loop playsInline className="w-full aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-revert.mp4" />

# Real-time collaboration

A unique capability of Cascade is that it is aware of your real-time actions.

You no longer necessarily need to prompt with context on your prior actions, as Cascade is already aware.

Try making a manual change in the code editor, and then prompt Cascade to "continue my work"!

# Image Upload

Add images to your prompt to be referenced in Cascade's suggestions. Things like screenshots of your Figma designs, wireframes, etc are all fair game!

Simply drag in or paste an image, click on the "Add image" button below the input text box to include it in your message.

<Note>Check out the [models](/plugins/cascade/models) page for more information on which models support image upload.</Note>

# Ignoring files

If you'd like Cascade to ignore files, you can add your files to `.codeiumignore` at the root of your workspace. This will prevent Cascade from viewing, editing or creating files inside of the paths designated. You can declare the file paths in a format similar to `.gitignore`.


# Models
Source: https://docs.windsurf.com/plugins/cascade/models

Cascade has several different models for you to choose from.

In the Cascade panel `Ctrl/⌘ + L`, you can easily switch between different models of your choosing.

Under the text input box, you will see a model selection dropdown menu. You will see the following models available:

* GPT-4o
* Claude 3.5 Sonnet
* Claude 3.7 Sonnet
* Claude 3.7 Sonnet (Thinking)
* DeepSeek-V3-0324
* DeepSeek-R1
* o3-mini (medium reasoning)
* Gemini 2.0 Flash
* Gemini 2.5 Pro
* xAI Grok-3
* xAI Grok-3 mini (Thinking)
* Cascade Base ⚡

# Premium Models

Due to the wide variation between the serving costs of each model, depending on the model you select, each of your input prompts will consume a different number of [User Prompt credits](/plugins/cascade/usage#user-prompt-and-flow-action-credits).

Below you will find a breakdown of how many User Prompt credits you will be charged for each model:

|             Model            | User Prompt Credits | Free | Trial/Pro/Ultimate | Teams | Image Upload |
| :--------------------------: | :-----------------: | :--: | :----------------: | :---: | :----------: |
|            GPT-4o            |          1          |   ✓  |          ✓         |   ✓   |       ✓      |
|       Claude 3.5 Sonnet      |          1          |   ✓  |          ✓         |   ✓   |       ✓      |
|       Claude 3.7 Sonnet      |          1          |   ✓  |          ✓         |   ✓   |       ✓      |
| Claude 3.7 Sonnet (Thinking) |         1.25        |   ✓  |          ✓         |   ✓   |       ✓      |
|       DeepSeek-V3-0324       |          0          |      |          ✓         |       |              |
|          DeepSeek-R1         |         0.5         |      |          ✓         |       |              |
|       o3-mini (medium)       |          1          |      |          ✓         |   ✓   |              |
|       Gemini 2.0 Flash       |         0.25        |   ✓  |          ✓         |   ✓   |              |
|        Gemini 2.5 Pro        |          1          |   ✓  |          ✓         |       |              |
|          xAI Grok-3          |          1          |      |          ✓         |       |              |
|  xAI Grok-3 mini (Thinking)  |        0.125        |      |          ✓         |       |              |
|        Cascade Base ⚡        |          0          |   ✓  |          ✓         |   ✓   |              |

# Cascade Base ⚡

All users have unlimited access to Cascade Base, which does NOT consume any User Prompt OR Flow Action credits.

It is not quite as smart as the premium models, but it's fast, pretty accurate, and free.


# Paid Plan and Credit Usage
Source: https://docs.windsurf.com/plugins/cascade/usage



## Getting started

To get started, [complete Windsurf's onboarding](https://docs.codeium.com/windsurf/getting-started#onboarding) and authenticate into Windsurf. Upon authenticating into Windsurf, your 2-week Free Trial starts.

User Prompt credits are consumed whenever a message is sent to Cascade with a premium model while Flow Action credits are consumed when a premium model is used by the AI in Write and Chat mode for a tool call (e.g. search, analyze, write, terminal command, etc.).

Upon using all of your credits, premium models will no longer be accessible but you will still be able to use our Cascade Base model. To resume access with premium models, upgrade to a Pro or Pro Ultimate plan.

The [Free Trial](#using-a-free-trial) includes:

* 50 User Prompt credits

* 200 Flow Action credits

The [Pro](#using-pro-plan) plan includes:

* 500 User Prompt credits

* 1500 Flow Action credits

The [Pro Ultimate](#using-pro-ultimate-plan) plan includes:

* Infinite User Prompt credits

* 3000 Flow Action credits

And the [Free](#using-a-free-plan) plan includes:

* 5 User Prompt credits

* 5 Flow Action credits

If you run out of credits on the Pro or Pro Ultimate plans, you will have the option of [purchasing additional credits](#purchasing-additional-flex-credits).

After upgrading, your paid plan will start immediately and you'll have access to premium models again. To learn more about the quotas and features per pricing plan, [click here](https://codeium.com/pricing).

## User Prompt and Flow Action credits

**User Prompt credits are usage credits that get consumed for each message sent with a premium model (e.g. Sonnet or GPT-4o). Every message sent counts as 1 user prompt credit.**

**Flow Action credits are a usage credit that get consumed for each tool call (e.g. View file, Search, Write, Terminal, etc.). Every tool call counts as 1 flow action credit.**

For Flow Action credits, depending on the prompt, Cascade might not need to take any actions (e.g. explaining a block of code), while for others, Cascade might need to take a series of actions.

### Tool calls

One of the things that makes Cascade special is its ability to use tool calls. Here's are a few examples of tool calls that are currently supported:

* **Search**: Cascade will intelligently search through your codebase for snippets relevant to the task that it's trying to accomplish.
* **Analyze**: Cascade will analyze a file to gather more context to help it accomplish the task requested.
  <Warning>When analyzing large files, Cascade may split the file up and analyze it in separate chunks, which will each count as one tool call. Therefore, it is possible that it may cost more than 1 credit to analyze a large file. </Warning>
* **Write**: Cascade will write changes for you in your file. Only available in Write mode which can be configured under and to the right the prompt input box.
* **Terminal**: Cascade has the ability to run both synchronous and background terminal processes. For example, it can generate and run install commands to set up a project as well as a background process to run the project.

### Errors

If a tool call errors or a user message is unsuccessful, flow action and User Prompt credits will not be consumed. For example, if Cascade attempts to write to a file but that file has unsaved changes, the tool call will fail and it will not consume a credit.

### Viewing your usage

There are a few ways to view your usage.

Go to the Cascade usage directly by clicking on the overflow menu, and then selecting "Cascade Usage".

<Frame>
  <img style={{ maxHeight: "300px" }} src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/usage-entry-cascade.png" />
</Frame>

View the settings panel by clicking on "Windsurf Settings" on the status bar, followed by selecting the "Plan Info" tab.

You can also view it on your plan page at [codeium.com/plan](https://codeium.com/plan) after you're authenticated.

### Upgrading to a paid plan

To learn more about paid features or to upgrade to a paid plan, [click here](https://codeium.com/plan). Paid plans include Pro and Pro Ultimate options for individuals as well as for teams.

We accept all major credit cards, Apple Pay, Cash App Pay, Google Pay, Link, WeChat Pay, and Alipay. If you have a payment method not listed, please reach out to us at [support](https://codeium.com/support). You may need to disable your VPN to view the relevant payment methods for your region.

### What happens when you run out of premium Flow Action credits but not premium User Prompt credits?

If you no longer have premium Flow Action credits, you have three options:

* You can purchase premium Flex credits to continue using Write and Chat mode with premium model tool calls (the premium Flex credits will be used as if premium Flow Action credits)

* You can use Legacy mode to continue to use your premium User Prompt credits without any additional premium Flow Action credits (i.e. premium model usage but no tool calls)

* You can use Write or Chat mode with the Cascade Base model. Note that no premium User Prompt credits will be used when on Cascade Base model

### What happens when you run out of premium User Prompt credits but not premium Flow Action credits?

If you no longer have premium User Prompt credits, you have two options:

* You can purchase premium Flex credits to continue using Write and Chat mode (the Flex credits will be used as if premium User Prompt credits)

* You can use Write or Chat mode with the Cascade Base model for prompts. In this case, perhaps unexpectedly, no premium Flow Action credits will be used either! This is because, at a technical quality level, it actually does not make sense to use premium models for tools if the original user prompt is not handled by a premium model, so we will automatically prevent you from burning premium Flow Action credits. Another way of putting it is that there is no way to spend premium Flow Action credits without using a premium User Prompt credit, which is one of the reasons why we give significantly more premium Flow Action credits than premium User Prompt credits at every tier.

### Purchasing additional Flex credits

If you run out of User Prompt or Flow Action credits, you can purchase Flex credits in the [billing website](https://codeium.com/plan). Flex credits are a credit that can be used as both User Prompt and Flow Action credits. For example, if you run out of tool calls but still have remaining User Prompt credits, your Flex credits will be consumed as Flow Action credits. If you run out of both User Prompt and Flow Action credits, Flex credits will be consumed as both. For example, if you are out of both User Prompt credits and Flow Action credits, send a message to Cascade with a premium model, and it performs tool calls as part of the response, you would consume 5 Flex credits, the equivalent of 1 User Prompt and 4 Flow Action credits.

For Team plans, Flex credits are purchased within and treated as a pool amongst all members of the team. Please contact your Teams admin to purchase more Flex credits to increase your amount of Flex credits. For more on the cost of Flex credits, visit our [pricing page](https://codeium.com/pricing).

## Usage examples

To explain how credits work, here are a few examples.

In this first example below, the user has both User Prompt and Flow Action credits available. In the scenario illustrated, 1 User Prompt credit was consumed and 4 Flow Action credits were consumed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/credit-example-healthy.png" />
</Frame>

In this second example below, the user has User Prompt credits but no Flow Action credits available. They purchased additional Flex credits that can be used as a backup to Flow Action credits. In the scenario illustrated, 1 user action credit was consumed and 4 Flex credits were consumed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/credit-example-empty-flow.png" />
</Frame>

In this third example below, the user has no user prompt but has Flow Action credits available. They purchased additional Flex credits that can also be used as a backup to User Prompt credits. In the scenario illustrated, 1 Flex credit was consumed and 4 Flex credits were consumed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/credit-example-empty-prompt.png" />
</Frame>

In this final example below, the user has no user prompt or Flow Action credits available but they've purchased Flex credits. Since Flex credits can be used for both User Prompt and Flow Action credits, they both count as Flex credits. In the scenario illustrated, 5 Flex credits were consumed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/credit-example-only-flex.png" />
</Frame>

## Plan Usage

### Using a Free Trial

The Free Trial comes with:

* 50 User Prompt credits

* 200 Flow Action credits

When you're on a Free Trial, you'll be given user prompts and flow actions credits for free! To get started, ask Cascade a question. In Write and Chat mode, Cascade is optimized to fully understand your codebase and leverages tool calls to assist you. By default, all of your requests will use premium models until you run out of credits.

If you end up low on credits, you'll be warned ahead of time so that you can upgrade and have access to more credits. Upon upgrading, your credits will reset to the monthly quota of the respective paid plan.

If you run out of credits, you'll still be able to use our Cascade Base Model in Write or Chat mode while in the Free Trial. If you didn't upgrade in the 2-week Free Trial, you'll be downgraded to our Free plan.

### Using Pro Plan

The Pro plan comes with:

* 500 User Prompt credits

* 1500 Flow Action credits

While on Pro, you'll have access to a monthly quota of User Prompt and Flow Action credits. Cascade usage will consume credits. You can view how many credits you have remaining in the Windsurf Settings panel that's accessible in the status bar.

If you're running low on credits, Cascade will notify you so that you can purchase additional Flex credits. To purchase additional Flex credits, visit the billing website and select “Purchase flex credits”. The Flex credits purchased will rollover to the following usage month if there are any remaining.

If you want to reduce your usage of Flow Action credits, you have two options:

* Use Legacy mode with a premium model. This will still consume User Prompt credits but will not consume any Flow Action credits. Legacy Chat does not use any tools.

* Use Cascade Base model in Write or Chat mode. Using Cascade Base model does not consume any user prompt or Flow Action credits.

If you want to reduce your consumption of User Prompt credits, select Cascade Base model in the model selection dropdown. Using Cascade Base model does not consume any user prompt or Flow Action credits.

In addition to increased Cascade credits, Pro comes with unlimited Fast Autocomplete and unlimited premium model requests with Command.

If you'd like to have access to unlimited prompt credits, more flow actions and better Flex credit pricing, you can upgrade to the Pro Ultimate plan. Upon upgrading to Pro Ultimate, your billing cycle will reset, you'll be refunded a pro-rated amount of your payment for Pro and your monthly quota will also reset. Any Flex credits will transfer over.

### Using Pro Ultimate Plan

The Pro Ultimate plan comes with:

* Infinite User Prompt credits

* 3000 Flow Action credits

While on Pro Ultimate, you'll have access to a monthly quota of Flow Action credits and an **unlimited number of User Prompt credits**. Tool calls within Cascade will consume your Flow Action credits. You can view how many credits you have remaining in the Windsurf Settings panel that's accessible in the status bar.

If you're running low on Flow Action credits, Cascade will notify you so that you can purchase additional Flex credits. To purchase additional Flex credits, visit the billing website and select “Purchase flex credits”. The Flex credits purchased will rollover to the following usage month if there are any remaining.

If you want to reduce your usage of Flow Action credits, you have two options:

* Use Legacy Chat mode with a premium model. On Pro Ultimate, you have unlimited prompt credits so Legacy Chat usage does not consume any credits.
* Use Cascade Base model in Write or Chat mode. Using Cascade Base model also does not consume any credits.

In addition to increased Cascade credits, Pro Ultimate comes with unlimited Fast Autocomplete and unlimited premium model requests with Command.

If you'd like to downgrade to Pro, visit the billing website. Upon downgrading, you'll remain in Pro Ultimate until the end of your billing cycle. At the end of your billing cycle, your plan will change to Pro. Any Flex credits will transfer over.

### Using a Free plan

The Free plan comes with:

* 5 User Prompt credits

* 5 Flow Action credits

Windsurf can still be used for free! While in Cascade, you'll be given limited number of User Prompt and Flow Action credits and have access to our Cascade Base model in read mode to ask questions. When editing code, you'll have access to unlimited autocomplete suggestions and AI command instructions. To learn more about features in Free and in paid tiers, [click here](https://codeium.com/pricing).

### Canceling your paid plan

To cancel your paid plan, visit the billing website. Upon canceling your paid plan, you'll still have access to all of your credits from your monthly quota and Flex credits until the end of the usage month. After the usage month, all Flex credits will be expired and you'll be downgraded to the Free plan where you'll be provided a limited number of User Prompt and tool action credits. If you change your mind and decide not to cancel before the end of the usage month, you can renew your plan by visiting the billing page.


# Web and Docs Search
Source: https://docs.windsurf.com/plugins/cascade/web-search



Cascade can now intuitively parse through and chunk up web pages and documentation, providing realtime context to the models. The key way to understand this feature is that Cascade will browse the Internet as a human would.

Our web tools are designed in such a way that gets only the information that is necessary in order to efficiently use your credits.

<Warning>
  This feature can potentially use credits quickly because each URL is at least
  1 credit. You can toggle this feature on and off in the Windsurf Settings in
  the bottom right of the editor.
</Warning>

## Overview

To help you better understand how Web Search works, we've recorded a short video describing the best practices for reducing Flow Action credits.

<iframe width="560" height="315" src="https://www.youtube.com/embed/moIySJ4d0UY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />

### Quick Start

The fastest way to get started is to activate web search in your Windsurf Settings in the bottom right corner of the editor. You can activate it a couple of different ways:

1. Ask a question that probably needs the Internet (ie. "What's new in the latest version of React?").
2. Use `@web` to force a docs search.
3. Use `@docs` to query over a list of docs that we are confident we can read with high quality.
4. Paste a URL into your message.

## Search the web

Cascade can deduce that certain prompts from the user may require a real-time web search to provide the optimal response. In these cases, Cascade will perform a web search and provide the results to the user. This can happen automatically or manually using the `@web` mention.

It will construct the query for you using AI and then perform a web search. This costs 1 Flow Action credit.

<Frame style={{ border: "none", background: "none" }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-search-web.png" />
</Frame>

## Reading Pages

Cascade can read individual pages for things like documentation, blog posts, and GitHub files. The page reads happen entirely on your device within your network so if you're using a VPN you shouldn't have any problems.

Pages are picked up either from web search results, inferred based on the conversation, or from URLs pasted directly into your message.

We break pages up into multiple chunks to efficiently use your Flow Action credits. It's very similar to how a human would read a page: for a long page we skim to the section we want then read the text that's relevant. This is how Cascade operates as well.

<Frame style={{ border: "none", background: "none" }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-parse-url.png" />
</Frame>

It's worth noting that not all pages can be parsed. We are actively working on improving the quality of our website reading. If you have specific sites you'd like us to handle better, feel free to file a feature request!

## Credit Usage with Web tools

Web Search uses 1 credit per search. It does not open up the search results, simply returns up to 5 links to consider reading.

Web URL reads use at least 1 credit each. If a page is long, we will break it up into chunks and present an outline to Cascade. If a section is deemed relevant, we will read that section. We try to merge chunks together as much as possible to reduce credit usage. For example, if there are 3 short neighboring chunks, we'll merge them together so that you only use one credit to read the chunks.

For a detailed explanation of credit usage, see [our video explanation](https://youtu.be/moIySJ4d0UY).


# Compatibility
Source: https://docs.windsurf.com/plugins/compatibility



Visit our [download page](https://codeium.com/download) for a list of supported IDEs and installation instructions.

If you are a Windsurf Enterprise user, visit your enterprise portal URL for download and installation instructions.
Contact your internal Windsurf administrator if you have questions.

# Supported IDEs and Versions

**VS Code**: Version 1.89+

**JetBrains IDEs**: Version 2022.3+

Note: JetBrains IDEs with remote SSH support require versions 2023.3+.

**Visual Studio**: 17.5.5+

**NeoVim**: Version 0.6+

**Vim**: 9.0.0185+

**Emacs**: All versions compiled with lbxml

**Xcode**: All versions

**Sublime Text**: Version 3+

**Eclipse**: Version 4.25+ (2022-09+)


# Getting Started
Source: https://docs.windsurf.com/plugins/getting-started

Welcome to Windsurf

**Windsurf** is an AI toolkit that empowers developers to dream bigger and write more code using tools like Cascade, Autocomplete, Chat, Command, and more.

Our models and features have been optimized to build a deep understanding of your codebase in order to provide the highest quality code suggestions.

## Plugin Set Up 🧩

Our plugins for Visual Studio Code and JetBrains are our most popular plugins.
The installation steps for these two are given below.
For other IDEs and editors like Eclipse, Visual Studio, Neovim, Google Colab, and more, visit [our download page](https://codeium.com/download) to get started.

<Note>
  These steps do not apply for enterprises on a self-hosted plan.
  If you are an enterprise user, please refer to the instructions in your enterprise portal.
</Note>

<Tabs>
  <Tab title="JetBrains">
    <Steps>
      <Step title="Install Plugin">
        Open the `Plugins` menu in your JetBrains IDE. The shortcut for this is `⌘+,` on Mac and `Ctrl+,` on Linux/Windows. It is also accessible from the settings menu.
        Search for the Windsurf plugin, and install it. The plugin loader will prompt you to restart the IDE.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains_plugin_install.png" />
        </Frame>
      </Step>

      <Step title="Authorize">
        Open a project. Windsurf should prompt you to log in with a notification popup at the bottom right linking you to an online login page.
        Equivalently, click the widget at the right of the bottom status bar and select the login option there.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains_login_widget.png" />
        </Frame>

        If you do not have an account or otherwise are not already logged in online, you will be prompted to login.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/login_prompt_webpage.png" />
        </Frame>

        Once you have logged in online, the webpage will indicate that you can return to your IDE.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/login_successful_webpage.png" />
        </Frame>
      </Step>

      <Step title="Wait for Language Server">
        Upon successful login, Windsurf will begin downloading a language server.
        This is the program that communicates with our APIs to let you use Windsurf's AI features.
        The download usually takes ten to twenty seconds, but the download speed may depend on your internet connection.
        In the meantime, you are free to use your IDE as usual.

        You should see a notification on the bottom right to indicate the progress of the download.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains_ls_download_bar.png" />
        </Frame>
      </Step>

      <Step title="All Done!">
        You can now enjoy Windsurf's rich AI featureset: Autocomplete, Chat, Command, and more.

        At any point, you can check your status by clicking the status bar widget at the bottom right.
        If logged in, you will have access to your Windsurf settings and other controls.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/jetbrains_status_bar.png" />
        </Frame>
      </Step>
    </Steps>
  </Tab>

  <Tab title="Visual Studio Code">
    <Steps>
      <Step title="Install Plugin">
        Find the Windsurf Plugin (formerly Codeium) in the VS Code Marketplace and install it.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/vscode_extension_page.png" />
        </Frame>
      </Step>

      <Step title="Authorize">
        After installation, VS Code with prompt you with a notification in the bottom right corner to log in to Windsurf.
        Equivalently, you can log in to Windsurf via the profile icon at the bottom of the left sidebar.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/vscode_login_init_left.png" />
        </Frame>

        <Note>If you get an error message indicating that the browser cannot open a link from Visual Studio Code, you may need to update your browser and restart the authorization flow.</Note>
        If you do not have an account or otherwise are not already logged in online, you will be prompted to create an account or login.

        <Frame>
          <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/login_prompt_webpage.png" />
        </Frame>

        Once you sign in, you will be redirected back to Visual Studio Code via pop-up.
        <Note>If you are using a browser-based VS Code IDE like GitPod or Codespaces, you will be routed to instructions on how to complete authentication by providing an access token.</Note>
      </Step>

      <Step title="Wait for Language Server">
        Once you are signed in, Windsurf will start downloading a language server.
        This is the program that communicates with our APIs to let you use Windsurf's AI features.
        The download usually takes ten to twenty seconds, but the download speed may depend on your internet connection.
        In the meantime, you are free to use VS Code as usual.
      </Step>

      <Step title="All Done!">
        You can now enjoy Windsurf's rich AI featureset: Autocomplete, Chat, Command, and more.
      </Step>
    </Steps>
  </Tab>
</Tabs>


# Reporting Security Concerns
Source: https://docs.windsurf.com/security/reporting



Windsurf takes the security of our products and services seriously. If you believe you have found a security vulnerability in any Windsurf-owned services, please report it to us as described below.

## Reporting Security Issues

**Please do not report security vulnerabilities through public GitHub issues.**

Instead, please report them via email to [security@codeium.com](mailto:security@codeium.com)

Please include the following information in your report including as much technical detail as possible:

* Type of issue (e.g., buffer overflow, SQL injection, cross-site scripting, etc.)
* The location of the affected source code (if applicable)
* Any special configuration required to reproduce the issue
* Step-by-step instructions to reproduce the issue
* Proof-of-concept or exploit code (if possible)
* Impact of the issue, including how an attacker might exploit it
* Any other relevant information

This information will help us triage your report more quickly.

Please compile all information into a single email, encrypted with our public GPG key, include the name of the affected product, and the version of the product affected (if known).

### Public GPG Key

```
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBGdY0gcBEACvhmeoodWK5OUNluDytvc6W2/ahzh334qaYgYOoYxBkN9/6BBW
WTdJJ4Hu//XdAw8G/5ISy6tV17JMWOI59acAehKh8NqBSVhrlR7tHxGiJN2fXTtH
TDGOoyMFbWaSQIRI44E3lQZMyQBScGKxDiXQjIlholmrS3JicrqG85dUgB6got9l
da/3bp8BuydcVib7NGcuRZKS2BEVc8UCvpsP/p+VWiSNtB3kT8PTt782mSmnp6rR
HqL8H6ERlMEgQ9M4iWWZhq4g3qsSeg5x9UtU2ANH/escFNM6Wbzg6hyy3CZtXzw6
2BRnXpF63dqhPiigy+ifVCs/YqGacToaUNhN4I8kt274yW0dX+U/15wvlJchsnsi
RVQwB5FRxIxcPsZAWFBg7P5um15HGpKGS0LFJsB5aUfJFHPFmUAvPUreOjv1rGTO
1FdkAERLHsI7jJA70vTAdOM2WwaeGa55EMwefNJ69LpN2elboFbz5hpAa7w+8Y5w
y1J6knyOA4JFnVI824ZiQIGloECGZOlOxM4Ru+jjkcroO+l+frmvvggqBjvKPHGs
VmrMSNjf7aE/7NDnyKZJ9fvUiLf+WclAcIUySbYQr8xv/aV76xDUH1PT59f/ntp7
jxRA0rVvIThakvV3MPMbdrR78uLbc6Bwc0MdtEIGw+QAQ4YzAX4yeV9LHQARAQAB
tCtzZWN1cml0eUBjb2RlaXVtLmNvbSA8c2VjdXJpdHlAY29kZWl1bS5jb20+iQJO
BBMBCgA4FiEEE5wZ6tOci0CBdec0DoNVUHCWVAkFAmdY0gcCGwMFCwkIBwIGFQoJ
CAsCBBYCAwECHgECF4AACgkQDoNVUHCWVAnT0w//ZVKF9Yz9So8ZeeIVcMz0CrFZ
jWFQMTvQvEQ5jP9VpiXe7z5pwSVvv3SpqvkNX+Y6HtjXdnv5Q+QZGzIZKc6NqbDz
vYGwL0UJCXEdEhdNMKOI0FWLiOl/NPdCqIwSeeUNsKZCZE7LWqDbfDoivStGcKWS
UYqqbrv8FB2BQrqem0YL+da6i24uhghL0NHCk8x3+qR/Cp+xWJyL27nHHRD7OVLO
3UhsEQEVoiZWp2TpZNyO4AjIFjHSQPw/kBOFdP9bZVcL9rmpZMbyhPnG6Xal3Jmn
0epXQcfvNUd/GwP0Oi22y2CoezuGL8/xKkQoRJ0XHhLAFyJTNIEWPxx4Ki5WVVbZ
PSUwc51CL0PKg2GbKF0g8Zy6JNwMciLh59R79gMK9eGZnSdoOe8d8EzV+AWaqPsO
qgxv4adYytLEIuLylLtPlEIni17E/yKIEibnlSS9P7EUBTNXJFmrLUPArEPhQGrS
EPid8mRJCCo47Htn6YH3Tzt0lSr8mfqOwWs1ww/rbDT/1N3Wq+EmEe9hwHjHQCyl
xfn+7yDRcJ4C2C/fuF2cg4JA2QsX8eTpvChSnXnQIhvG+7NISqFUAf1YXuy+cNJa
rJs2CRCrz3rmM1dpQ+miII9Z14/ZSy6wg0f2BXaANZNIKutmPTFWxOyc6RiBMIor
EeYWbajRg5vCJmQNeSW5Ag0EZ1jSBwEQALffVPaMgIsv3vyoDZivVjr4ArkPWuWM
rQMhDRaos11vzWlVEviihdSn9rUP/nx3t6TsvvwMhqTk9yfnRCn5jmE2dSFfT4Wz
kdYkQ8xWLI4Ku8Cu6MK5iemG5JMyL03eaaSqlbjg7IUmNr+PF/poX0c+PCoNVbIC
YbHYtTwTJ52G+DuVQThZI0qnebNc/3CfvDAfMGqyDezIPqoqPRfLolwT6N+zip8O
bDuom7DlcyRjRAeB36dbEPRkqzdkP8ZA4tKWRO2HBhDe4Jg4srZlCs8BiveNK6mM
lOv+EZpSwvuikfga41bk+A08EFojKkg7XuCN+LSBUxKWdl9UDg5eibYiy1uRM8kP
taFzP89tNanQeAU3BBcJRgDqOkl/5KQnPLU8Dn8Iq2nUUg3rdYhRTT7PiSlkuK8f
tWXctlN7AsTtvrKaJGP89oETs5ks/umdep7fmYlJlLO2VZE63itQHGUpE2P0hRSH
itoC7acWdXYY7M/wi1kPl5CvMyStaXfqmgXoRF2ea2N9kP6ioQ5piAvNLmHVc4l9
ID5kDUB4k0Tv5XSE8eXc35fT5JFV8J/Rlk66CDR5DKciBteRqQ97Ojc2CkJ92tCO
/nTnnV8IYLP3yTCmFvABxJLk8qi3UJXo4ySKMzZ48OjDfvr91pr9xjgWyLj0R44O
1S2Tq6eFyy7xABEBAAGJAjYEGAEKACAWIQQTnBnq05yLQIF15zQOg1VQcJZUCQUC
Z1jSBwIbDAAKCRAOg1VQcJZUCd6dD/9iyRnoPBrIiBre1BmXCdx7SJCy3P659dGS
35/KCx9S5oEwjQX11BCembZ7R1rhthpTwj/uCSzaV2mZgdxDg5+IPUSjBafbnHih
gE7RqEOTD6rH3+2NlMJvDJYykucSgjzhAbF2oXTbQneGzA1z5ljn6OKtu+sr0upY
HRjk24x6zm6X3Y95PVoinXmafHfS12oYqM560uhmjE66LylB6ihxwThNDWPDQQ4F
8ZdVrNIqyE5rt+Mdo8XndGnbcRNvAaJ7syqNPzZl8XL7+IvVbMCnM0v5wCuO896w
ngxqTf9UDf6tRZ4bzt0wzvtSa1TtMbbgqeQ4JL75W0iRwGtW2VFqsLJdLvCeoeJS
/oN7ZRjsBpe7Mi7yJHGsKffosFL4U2Xb02FMyQXwUCQuI1kT7Je5a2mOJZZC6Rxs
CaJ5B+H2tq8Vu8eHqWU6HFQgN5A9tRDxWaLSA0s7ClzCbVHVXJ0rlfVG5cGGX5NN
bTHSQ3RAeMIWpgguViogcQTS8H+eJau7ObSrjAH+vyUDZUBZk3wK6TWWERAknRTs
NXGMK99G5TnFMB/BhCcZJcupyFJf2RU0dcrmtSEZsXR1TXZP81TnIRIxrrzhAxHC
TG4WjJ9IfJITK+RZwf0ng5LRnMfDkMOP3JtmnAYqUXSWe4WzaPXoE0TxE1BmtdR4
avMueyobpA==
=X35T
-----END PGP PUBLIC KEY BLOCK-----
```

## Policy

Windsurf follows the principle of [Coordinated Vulnerability Disclosure](https://en.wikipedia.org/wiki/Coordinated_vulnerability_disclosure).

## Safe Harbor

Windsurf supports safe harbor for security researchers who:

* Make a good faith effort to avoid privacy violations, destruction of data, and interruption or degradation of our services
* Only interact with accounts you own or with explicit permission of the account holder
* Do not exploit a security issue you discover for any reason other than testing
* Report any vulnerability you've discovered promptly
* Follow the guidelines outlined in this document

We will not take legal action against you or administrative action against your account if you act according to this policy.

*Last updated: December 10, 2024*


# Tab
Source: https://docs.windsurf.com/tab/overview

A powerful next-intent prediction experience routed to a single keystroke.

**Windsurf Tab** has evolved from a simple autocomplete tool into a contextually aware diff-suggestion and navigation engine for writing code.

It is powered by our own models, trained in-house from scratch to optimize for speed and accuracy.

<Frame>
  <video autoPlay muted loop playsInline src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/tab-demo.mp4" />
</Frame>

Suggestions are based on the context of your code, terminal, Cascade chat history, your prior actions around the editor, and even your clipboard (must opt in via advanced Settings).

Tab is able to make edits *both before and after* your current cursor position. You can press `esc` to cancel a suggestion.

Suggestions will also disappear if you continue typing or navigating without accepting them.

## Keyboard Shortcuts

* **Accept suggestion**: `tab`
* **Cancel suggestion**: `esc`
* **Accept suggestion word-by-word**: `⌘+→` (VS Code), `⌥+⇧+\` (JetBrains)
* **Next/previous suggestion**: `⌥+]`/`⌥+[`

## Tab to Jump

<Note>Currently only available to paid users.</Note>

Windsurf can also anticipate your next cursor position and prompt you with a `Tab to Jump` label at a certain line in the editor, allowing you to easily navigate through your file.

If you accept by simply pressing `tab`, then you will be taken to that next position.

<Frame>
  <video style={{ transform: 'scale(1.12)' }} autoPlay muted loop playsInline src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/tab-to-jump.mp4" />
</Frame>

## Tab to Import

After defining a new dependency to use in a file, just simply hit `tab` to import it at the top of the file once the hint shows. Your cursor will stay in the same position.

<Frame>
  <video autoPlay muted loop playsInline src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/tab-to-import.mp4" />
</Frame>

## Settings

Windsurf Tab is split up into two main configurable parts: Autocomplete and Supercomplete.

Autocompletes typically appear at your cursor, and Supercompletes appear either in small windows around your cursor, which can suggest both deletions and additions.

Autocomplete and Supercomplete can be toggled on and off. Autocomplete speeds can also be configured between Slow, Default, and Fast modes.

<Note>Fast Autocomplete is currently only available to our Pro, Teams, and Enterprise Users.</Note>

You can also opt-in to using your clipboard as context. This means if you copy something to your clipboard, Windsurf will be able to use it as context.

You can also toggle Tab to Import and Tab to Jump functionalities, and choose whether or not you want to highlight the code after an accepted Tab suggestion.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/tab-settings.png" />
</Frame>

## Fill In The Middle (FIM)

Windsurf Tab can Fill In The Middle (FIM), meaning it can make suggestions while your cursor is in the middle of a line of code.

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://exafunction.github.io/public/videos/inline_fim/inline_fim_codeium.mp4" />

Read more about in-line FIM on our blog [here](https://codeium.com/blog/inline-fim-code-suggestions).


# General Issues
Source: https://docs.windsurf.com/troubleshooting/plugins-common-issues



### I subscribed to Pro but I'm stuck on the Free tier

First, give it a few minutes to update. If that doesn't work, try logging out of Windsurf on the website, restarting your IDE, and logging back into Windsurf. Additionally, please make sure you have the latest version of Windsurf installed.

### How do I cancel my Pro/Teams subscription?

You can cancel your paid plan by going to your Profile (top right of the [Windsurf website](https://codeium.com/profile)) -> Billing -> Cancel Plan

### How do I disable code snippet telemetry?

As mentioned in our [security page](https://codeium.com/security), you can opt out of code snippet telemetry by going to your settings [account settings](https://codeium.com/settings). For more information, please visit our [Terms of Service](https://codeium.com/terms-of-service-individual).

### How do I delete my account?

You can delete your account by going to your settings [account settings](https://codeium.com/settings), scrolling down and clicking on "Delete Account".

<Note>If you are a member within an organization, please reach out to your administrator.</Note>

### How do I request a feature?

You can vote, comment, and request features on our [feature request forum](https://codeium.canny.io/feature-requests).

You can also reach out to us on Twitter/X! [@codeiumdev](https://x.com/codeiumdev) or [@windsurf\_ai](https://x.com/windsurf_ai)

### My Windsurf Chat panel goes blank

Please reach out to us if this happens! A screen recording would be much appreciated. This can often be solved by clearing your chat history.

### How do I download diagnostic logs to send to the support team?

Please see the intructions for various plugins [here](/troubleshooting/gathering-logs)


# Eclipse
Source: https://docs.windsurf.com/troubleshooting/plugins-enterprise/eclipse



# Supported Versions

Version 4.25+ (2022-09+)

# Gathering extension logs

In Eclipse, logs are written to the following paths:

* **Mac/Linux**: \~/.codeium/codeium.log
* **Windows**: C:\Users\<username>.codeium\codeium.log

# How to reset or change your Enterprise URL

1. Open the settings/preferences dialog.

2. Select Codeium.

3. Set the Portal URL to `<NEW_URL>`. Then click the Apply and Close button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/plugins/troubleshooting-eclipse-portal-url.jpg" />
</Frame>

# Known IDE issues and solutions

## Codeium isn't starting

If Codeium isn't starting up, use the logs to debug what the cause could be (See above). If you are not able to resolve the issue, file a help request by submitting a ticket at help.codeium.com. Make sure to include the logs referenced above to help our team debug the issue as quickly as possible.

## Codeium Chat shows an empty screen

If you are using Windows 10, it's possible you need to install **WebView2** to switch the Eclipse web renderer from Internet Explorer to Edge.

You can see if this is the case by right-clicking --> `Properties` and seeing if there is an Internet Explorer icon.

## Certificate issue

This issue may be indicated by the following errors in the logs:

```
Failed to fetch extension version at <YourDomainURL>
javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
```

Unlike other IDEs, Eclipse does not use the OS certificate store. You will have to load the certificates to the Java keystore.

* SaaS users will have to load the Codeium Github URL
* Self-hosted (On-prem) users will have to load their Codeium Enterprise domain URL as well as the Codeium Github URL

**Note**: This is an example for SaaS users, but the process is the same. *For enterprise users - Your certificate is issued and managed by your local IT or Admin team. Please reach out to them for assistance with installing the necessary certificates on your system.*

1. Export the certificate for [https://exafunction.github.io/](https://exafunction.github.io/) from the browser as `githubio.cer` file

In Chrome: navigate to the website, click the padlock, click `Connection is secure`, click `Certificate is valid`, go to the `Details` tab, press the `Copy to File...` button

2. Import in JDK/JRE keystore: (Need to run from cmd prompt opened with "Administrator" privilege)

```
keytool -import -noprompt -trustcacerts -alias codeiumgithub -file githubio.cer -keystore "%JAVA_HOME%/jre/lib/security/ cacerts" -storepass changeit
```

3. Verify that the certificate is added to the Keystore by executing:

```
keytool -list -keystore "%JAVA_HOME%/jre/lib/security/ cacerts" | findstr codeium
```

Enter the Keystore password.

4. Restart Eclipse and browse the marketplace extension from an internal browser. You should be directed to trust the unsigned content.

5. In some cases you might also need to pass the certificates path in VM arguments by editing your eclipse.ini file and adding the path:

```
-Djavax.net.ssl.trustStore="path-to-your-certificates"
```


# JetBrains
Source: https://docs.windsurf.com/troubleshooting/plugins-enterprise/jetbrains



# Supported Versions

Version 2022.3 or greater.

* JetBrains Fleet or Reshaper are not supported
* IDEs with remote SSH support require version 2023.3 or greater

# Gathering extension logs

Starting in extension version 1.10.0, the Chat Panel has an Extension Diagnostics button on the Settings page. This button will automatically collect relevant logs and parameters into a text file that can be downloaded.

For older versions of the extension:

1. Logs are written to the idea.log file. To locate this file, go to the `Help > Show Log in Finder/Explorer` menu option

2. Export or copy the logs

# How to reset or change your Enterprise URL

1. Go to `Tools → Codeium Enterprise → Reset Codeium Enterprise Updater`.

2. Enter the new URL ensuring no leading or trailing whitespace.

3. Restart your IDE.

4. After restarting, you will be prompted to log in.

# Known IDE issues and solutions

## Codeium Chat doesn't work (or Codeium doesn't work at all)

If the Codeium JetBrains extension isn't working, a good first step is to try and reset the plugin by going to `Help > Find Action > Reset Codeium Enterprise Updater`.

If the issue is isolated to a few users, this is likely because the Enterprise Domain URL certificate is not loaded to your IDE. Your team's admin should know how to do this.

## Codeium Chat not being displayed

Usually, you will see the following error in the logs:

```
JCEF is not supported in this env or failed to initialize
```

JCEF is a browser needed to display Codeium Chat. To fix this, go to `Help > Find Actions > Choose Java Boot Runtime` and pick a version that has JCEF bundled.

## Certificate Issues

If you encounter the following errors:

```
Failed to fetch extension base URL at <YourDomainURL>
```

```
PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: 
unable to find valid certification path to requested target
```

This suggests that the Codeium extension is unable to trust the TLS connection to your enterprise portal / API server because it does not trust the certificate being presented. This either means that the certificate presented by the Codeium deployment is untrusted or a certificate presented by a corporate proxy intercepting the request is untrusted.

In either case, the most preferable solution is to ensure that the root certificate that signed this certificate is properly installed on end-user machines in the appropriate location. JetBrains IDEs and most other IDEs load certificates from the operating system's default location.

Your certificate is issued and managed by your local IT or Admin team. Please reach out to them for assistance with installing the necessary certificates on your system.

It is important that the full certificate chain is being presented from wherever TLS is being terminated. Oftentimes, if only the leaf certificate is presented, JetBrains IDE and other IDEs are unable to verify its authenticity because they are not aware of the intermediate certificate which validates the leaf certificate and is validated by the root certificate. Browsers are often able to work around this issue as users will likely have encountered a different website that does present the full certificate chain, so the intermediate cert is seen and cached, but applications like JetBrains IDEs don't have this advantage.

**Note**: In JetBrains family products **2024.3** a bug was introduced in which the IDE is failing to accept the OS certificates ([JetBrains issue report](https://youtrack.jetbrains.com/issue/IJPL-171446/Unable-to-find-valid-certification-path-to-requested-target-exception-in-Settings-Sync-when-proxy-is-used)). To solve this, users can do any of the following:

* Downgrade JB products to earlier versions
* Use the 2024.3.1 preview version (beta version)
* Add `-Djavax.net.ssl.trustStoreType=Windows-ROOT` as a custom JVM option


# Troubleshooting Checklist
Source: https://docs.windsurf.com/troubleshooting/plugins-enterprise/troubleshooting-checklist



Running into issues with Codeium? Use this checklist of common debugging techniques to try and resolve the issue, otherwise file a support ticket on help.codeium.com.

## 1. Make sure the Codeium plugin has been installed properly

If you are a Codeium Enterprise user, make sure to follow the instructions that are available at your enterprise portal URL (https\://\[YOUR\_PORTAL\_URL]/install). Furthermore, remember to install the Codeium Enterprise Updater plugin, not the standard Codeium plugin. Finally, ensure that the enterprise portal url that you set in the plugin's settings is correct and formatted correctly (https\://\[YOUR\_PORTAL\_URL])

If you are on Teams or Codeium's free tier, follow the instructions outlined at codeium.com/download.

In either case, make sure that your current IDE version is supported by Codeium.

## 2. Check Codeium's Feature Reference guide

If a particular feature is unavailable, it could be because it is not yet supported in your IDE. You can check which features are available on which IDEs using the feature reference guides linked below. Codeium is constantly expanding our coverage and striving to bring all features to all IDEs.

Codeium SaaS Feature Reference Guide

Codeium Self Host Feature Reference Guide

## 3. Try some common troubleshooting techniques

Sometimes a good old restart does the trick. Some things we recommend trying:

* *Try reloading your IDE*. Sometimes reloading the IDE fixes the issue. On JetBrains IDEs, you can try and reset the Codeium extension by going to `Help` --> `Find Action` --> `Reset Codeium`.

* *Try logging in and out of Codeium*. Enterprise users can sign out by navigating to their Enterprise Portal URL in the browser, clicking on their Profile icon, scrolling down to the bottom and clicking "Sign Out". Teams and free tier users can sign out by navigating to codeium.com, clicking on their Profile icon, and selecting "Sign Out" from the dropdown menu.

* *Try uninstalling and reinstalling the plugin*. Sometimes conflicting plugins or IDE settings can cause issues that are resolved by simply removing the plugin and reinstalling it.

## 4. Look through the help center articles with fixes to common issues

We have documented issues that users commonly run into in the following help center articles. Be sure to look through these -- it's likely that someone has experienced the same issue as you!

[Common VSCode IDE Issues](/troubleshooting/plugins-enterprise/vscode)

[Common JetBrains IDE Issues](/troubleshooting/plugins-enterprise/jetbrains)

[Common Visual Studio IDE Issues](/troubleshooting/plugins-enterprise/visualstudio)

[Common Eclipse IDE Issues](/troubleshooting/plugins-enterprise/eclipse)

## 5. Grab the logs and file a Support Request

Still no luck? At this point, you might want to file a support request by submitting a help ticket on help.codeium.com. *Make sure to attach logs and other useful debug info to your ticket*! This enables the Codeium team to resolve your issue as fast as possible. Instructions on how to get logs for each specific IDE can be found in the "IDE and Extension troubleshooting" section in the left menu.


# Visual Studio
Source: https://docs.windsurf.com/troubleshooting/plugins-enterprise/visualstudio



# Supported Versions

Visual Studio 17.5.5 or greater.

# Gathering extension logs

Go to `View > Output`, select `Codeium` in the dropdown, and copy the logs.

# How to reset or change your Enterprise URL

1. Open the settings/preferences dialog (Tools → Options).
2. Select Codeium.
3. Set the Portal URL to `<NEW_URL>` and set the API URL to `<NEW_URL>/_route/api_server`.
4. Click OK and restart Visual Studio.
5. Upon restart, you will be prompted to sign in to the enterprise portal.

# Known IDE issues and solutions

## Don't see Codeium in the VS Marketplace

Make sure that you are using VS version 2022 17.5.5 or greater.

## Seeing overlapping autocomplete suggestions

This happens if Visual Studio's IntelliCode suggestions are displayed at the same time as Codeium's. Disable all IntelliCode options as shown below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/plugins/troubleshooting-visualstudio-disable-intellicode.jpg" />
</Frame>

## Tab key is not always accepting completions

You can rebind this to a different keyboard shortcut in your settings:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/plugins/troubleshooting-visualstudio-keybindings.jpg" />
</Frame>


# Visual Studio Code (VSCode)
Source: https://docs.windsurf.com/troubleshooting/plugins-enterprise/vscode



VS Code 1.89 or greater are supported!

# Gathering extension logs

Starting in VS Code Extension 1.10.0, the Extension Diagnostics are accessible for download via the Settings page. This download will contain a collection of relevant logs and parameters into a text file.

*For full output logs of VSCode:*

1. Go to the Command Palette (`Ctrl/Cmd + Shift + P` or go to View > Command Palette)

2. Type in "Show logs" and select the option that reads `Developer: Show Logs`

3. From the dropdown, select `Extension Host`

4. You should see something similar to the image below:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/plugins/troubleshooting-vscode-showlogs.jpg" />
</Frame>

5. Change the dropdown in the top right that reads "Extension Host" and select "Codeium"

6. Export or copy the logs

# How to reset or change your Enterprise URL

1. Navigate to the Codeium Enterprise extension settings by pressing Ctrl+Shift+X. Choose the Enterprise Updater (purple extension)

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/plugins/troubleshooting-vscode-enterprise-updater.jpg" />
</Frame>

2. Click on the gear icon and select `Extension Settings`

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/plugins/troubleshooting-vscode-enterprise-settings.jpg" />
</Frame>

3. In the extension settings, click the gear icon and select `Reset Setting` for each box populated with a URL

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/plugins/troubleshooting-vscode-enterprise-reset-settings.jpg" />
</Frame>

4. Reload VSCode by going to View -> Command Palette. Once the command palette is open type "Reload window" and press enter.

5. Once reloaded, you should be prompted to Set URL. From here, type in the new URL.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/plugins/troubleshooting-vscode-enterprise-url.jpg" />
</Frame>

6. Close out of the Setting tab.

7. Reload VSCode by going to View -> Command Palette. Once the command palette is open type 'Reload window' and press enter.

8. After reloading, you should see a pop-up in the bottom right prompting you to sign in to Codeium. If not, go to the bottom left Accounts tab and click Sign in with Auth to use Codeium. Either method will redirect you to your Codeium Enterprise portal.

# Known IDE issues and solutions

## e.split is not defined

You are using an unsupported VS Code version, please update to a supported version and try again. You can find a list of supported versions [here](/plugins/compatibility).

## Using the wrong API Server

If a user changes their API Server/Portal URL in their **workspace** settings, this will override their user settings and may result in an error where the extension is communicating with the wrong API server.

Make sure that your API Server/Portal URL is set correctly and not overridden accidentally by the workspace settings.

## Not seeing Codeium Chat responses

If you are trying to send messages to Codeium chat but not seeing responses, check if you can cancel the response. If you are unable to cancel the response, this means that the response was completed but not displayed. This can happen if the Chat Web Server loses connection to the extension. Reloading VS Code and opening the Codeium Chat panel again should show the responses.

## Unable to read file .../package.json

```
Unable to read file .../.vscode/extensions/codeium.codeium-<version>/package.json 
```

If the above error shows up in the Codeium logs, try deleting the extension folder (.../.vscode/extensions/codeium.codeium-\<version>) and reinstall the extension.

## VS Code Enterprise Updater Loop

"Codeium Enterprise Updated" every time you open VSCode, try restarting all extensions

1. Open the command palette ( CTRL + SHIFT + P )
2. Run 'Disable All Installed Extensions'
3. Run 'Enable all Extensions'
4. Restart VS Code

Make sure all extensions are enabled again.

## Enterprise updater doesn't install Codeium extension

The Enterprise updater is installed, but no extension is being downloaded or installed in VSCode. No extension logs option is available in VSCode output window drop down. The only available log you can see is:

```
[info] ExtensionService#_doActivateExtension Codeium.codeium-enterprise-updater, startup: false, activationEvent: 'onStartupFinished'
```

If you have previously disabled the Codeium extension and later uninstalled it, VSCode will not clear the disabled flag.

In order to do so manually:

1. Open the command palette ( CTRL + SHIFT + P )
2. Run 'Codeium Enterprise: Reset'
3. Select "Help" from the popup
4. Select "Show Disabled Extensions"
5. Re-enable your Codeium Extension

## Proxy / Network Issues

Unchecking `Detect Proxy` in Codeium settings in VSCode can sometimes resolve issues where the extension is incorrectly attempting to use a proxy.

## Certificate Issues

If you encounter the following errors:

```
ConnectError: [internal] unable to get issuer certificate
```

```
[ERROR]: [internal] unable to verify the first certificate
```

```
tls: failed to verify certificate: x509: "<yourdomainurl>" certificate is not standards compliant
```

This suggests that the Codeium extension is unable to trust the TLS connection to your enterprise portal / API server because it does not trust the certificate being presented. This either means that the certificate presented by the Codeium deployment is untrusted or a certificate presented by a corporate proxy intercepting the request is untrusted.

In either case, the most preferable solution is to ensure that the root certificate that signed this certificate is properly installed on end-user machines in the appropriate location. VS Code and most other IDEs load certificates from the operating system's default location.

Your certificate is issued and managed by your local IT or Admin team. Please reach out to them for assistance with installing the necessary certificates on your system.

It is important that the full certificate chain is being presented from wherever TLS is being terminated. Oftentimes, if only the leaf certificate is presented, VS Code and other IDEs are unable to verify its authenticity because they are not aware of the intermediate certificate which validates the leaf certificate and is validated by the root certificate. Browsers are often able to work around this issue as users will likely have encountered a different website that does present the full certificate chain, so the intermediate cert is seen and cached, but applications like VS Code don't have this advantage.

The Network Proxy Text VS Code extension is useful for debugging certificate issues.


# Gathering Logs
Source: https://docs.windsurf.com/troubleshooting/plugins-gathering-logs



If you're having issues, the first step in the troubleshooting process is to retrieve the logs from your IDE. Here's how you can get Windsurf logs for each of the major IDEs:

## VS Code

1. Go to the Command Palette (`Ctrl/Cmd + Shift + P` or go to View > Command Palette)

2. Type in "Show logs" and select the option that reads "Developer: Show Logs"

3. From the dropdown, select "Extension Host"

4. You should see something similar to the image below:

<Frame style={{ border: 'none', background: 'none' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/extension-diagnostics-log.png" />
</Frame>

5. Change the dropdown in the top right that reads "Extension Host" and select "Windsurf"

6. Export or copy the logs

## JetBrains IDEs

Starting in extension version 1.10.0, the Chat Panel has an Extension Diagnostics button on the Settings page. This button will automatically collect relevant logs and parameters into a text file that can be downloaded.

1. Logs are written to the idea.log file. To locate this file, go to the Help > Show Log in Finder/Explorer menu option

2. Export or copy the logs

## Eclipse

In Eclipse, logs are written to the following paths:

* **Mac/Linux**: \~/.codeium/codeium.log
* **Windows**: C:\Users\<username>.codeium\codeium.log

## Visual Studio

Go to **view > output**, select "Windsurf" in the dropdown, and copy the logs.

## NeoVim

Set `g:codeium_log_file` to a path to a file in their vimrc and then relaunch vim.

Then the logs should be written to that file.


# Common Windsurf Issues
Source: https://docs.windsurf.com/troubleshooting/windsurf-common-issues



### General FAQ

<AccordionGroup>
  <Accordion title="I subscribed to Pro so why am I stuck on the Free tier?">
    First, give it a few minutes to update. If that doesn't work, try logging out of Windsurf on the website, restarting your IDE, and logging back into Windsurf. Additionally, please make sure you have the latest version of Windsurf installed.
  </Accordion>

  <Accordion title="How do I cancel my Pro/Teams subscription?">
    You can cancel your paid plan by going to your Profile (top right of the [Windsurf website](https://codeium.com/profile)) -> Billing -> Cancel Plan
  </Accordion>

  <Accordion title="How do I disable code snippet telemetry?">
    As mentioned in our [security page](https://codeium.com/security), you can opt out of code snippet telemetry by going to your settings [account settings](https://codeium.com/settings). For more information, please visit our [Terms of Service](https://codeium.com/terms-of-service-individual).
  </Accordion>

  <Accordion title="How do I delete my account?">
    You can delete your account by going to your settings [account settings](https://codeium.com/settings), scrolling down and clicking on "Delete Account".

    <Note>If you are a member within an organization, please reach out to your administrator.</Note>
  </Accordion>

  <Accordion title="How do I request a feature?">
    You can vote, comment, and request features on our [feature request forum](https://codeium.canny.io/feature-requests).

    You can also reach out to us on Twitter/X! [@codeiumdev](https://x.com/codeiumdev) or [@windsurf\_ai](https://x.com/windsurf_ai)
  </Accordion>
</AccordionGroup>

### I'm experiencing rate limiting issues

We're subject to rate limits and unfortunately sometimes hit capacity for the premium models we work with. We are actively working on getting these limits increased and fairly distributing the capacity that we have!

This should not be an issue forever. If you get this error, please wait a few moments and try again.

### Pylance or Pyright isn't working / Python syntax highlighting is broken or subpar

We've gone ahead and developed a [Pyright extension specifically for Windsurf](/windsurf/advanced/#windsurf-extensions). Please search for "Windsurf Pyright" or paste `@id:codeium.windsurfPyright` into the extension search.

### How do I download Diagnostic logs to send to the Windsurf support team?

You can download diagnostic logs by going to your Cascade Panel, tapping the three dots in the top right corner, and then clicking "Download Diagnostics".

<Frame style={{ border: 'none', background: 'none' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/windsurf-download-diagnostics.png" />
</Frame>

### On MacOS, I see a pop-up: 'Windsurf' is damaged and cannot be opened.

This pop-up is due to a false positive in MacOS security features. You can usually resolve this by going to "System Settings -> Privacy & Security" and clicking "Allow" or "Open anyway" for Windsurf. If this fails or is not possible, try the following steps:

1. Ensure that Windsurf is placed under your `/Applications` folder and that you are running it from there.
2. Check your processor type: if your Mac has an Intel chip, make sure you have the Intel version. If it's Apple Silicon (like M1, M2 or M3), make sure you have the Apple Silicon version. You can select the processor type from the [Mac download page](https://codeium.com/windsurf/download_mac).
3. Try redownloading the DMG and reinstalling from [the official download page](https://codeium.com/windsurf/download_mac), as the failing security feature is usually triggered on download.
4. Make sure Windsurf (and the "Windsurf is Damaged" pop-up) is closed, and run `xattr -c "/Applications/Windsurf.app/"`.

### I received an error message about updates on Windows, or updates are not appearing on Windows.

For example:

> Updates are disabled because you are running the user-scope installation of Windsurf as Administrator.

We cannot auto-update Windsurf when it is run as Administrator. Please re-run Windsurf with User scope to update.

### On Linux, Windsurf quietly doesn't launch, or crashes on launch

This is usually due to an Electron permissions issue, which VSCode also has, and is expected when using the tarball on Linux.

The easiest way to fix it is to run the following:

```bash
sudo chown root:root /path/to/windsurf/chrome-sandbox
sudo chown 4755 /path/to/windsurf/chrome-sandbox
```

You should then be able to launch Windsurf. You can also just run `windsurf` with the flag `--no-sandbox`, though we don't encourage this.

If this fails, then try the below.

### I received an error message saying 'Windsurf failed to start'

Please delete the following folder:

Windows: `C:\Users\<YOUR_USERNAME>\.codeium\windsurf\cascade`

Linux/Mac: `~/.codeium/windsurf/cascade`

and try restarting the IDE.

### I received an error message about updates on Windows, or updates are not appearing on Windows.

An example:

> Updates are disabled because you are running the user-scope installation of Windsurf as Administrator.

We cannot auto-update Windsurf when it is run as Administrator. Please re-run Windsurf with User scope to update.

### My Cascade panel goes blank

Please reach out to us if this happens! A screen recording would be much appreciated. This can often be solved by clearing your chat history (`~/.codeium/windsurf/cascade`).


# Gathering Logs
Source: https://docs.windsurf.com/troubleshooting/windsurf-gathering-logs



If you're having issues, the first step in the troubleshooting process is to retrieve the logs from your IDE. Here's how you can get Windsurf logs for each of the major IDEs:

## Windsurf

1. Open the Command Palette (`Ctrl/Cmd + Shift + P` or go to View > Command Palette)

2. Type in "Download Windsurf Logs" and select the option that reads "Download Windsurf Logs File"

3. Export or copy the logs and attach the file to your ticket.

Alternatively, you can also click on the three dots in the top right corner of the Cascade panel and select "Download Diagnostics".

<Frame style={{ border: 'none', background: 'none', width: '75%', margin: '0 auto', display: 'flex'}}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/windsurf-download-diagnostics.png" />
</Frame>


# Advanced
Source: https://docs.windsurf.com/windsurf/advanced



All advanced configurations can be found in Windsurf Settings which can be accessed by the top right dropdown → Windsurf Settings or Command Palette (Ctrl/⌘+Shift+P) → Open Windsurf Settings Page.

# Enabling Cascade access to .gitignore files

To provide Cascade with access to files that match patterns in your project's .gitignore , go to your Windsurf Settings and go to "Cascade Gitignore Access". By default, it is turned off. To provide access, turn it on by clicking the toggle.

# SSH Support

The usual SSH support in VSCode is licensed by Microsoft, so we have implemented our own just for Windsurf. It does require you to have [OpenSSH](https://www.openssh.com/) installed, but otherwise has minimal dependencies, and should "just work" like you're used to. You can access SSH under `Remote-SSH` in the Command Palette, or via the `Open a Remote Window` button in the bottom left.
This extension has worked great for our internal development, but there are some known caveats and bugs:

* We currently only support SSHing into Linux-based remote hosts.

* The usual Microsoft "Remote - SSH" extension (and the [open-remote-ssh](https://github.com/jeanp413/open-remote-ssh) extension) will not work—please do not install them, as they conflict with our support.

* We don't have all the features of the Microsoft SSH extension right now. We mostly just support the important thing: connecting to a host. If you have feature requests, let us know!

* Connecting to a remote host via SSH then accessing a devcontainer on that remote host won't work like it does in VSCode. (We're working on it!) For now, if you want to do this, we recommend instead manually setting up an SSH daemon inside your devcontainer. Here is the set-up which we've found to work, but please be careful to make sure it's right for your use-case.

  1. Inside the devcontainer, run this once (running multiple times may mess up your `sshd_config`):

  ```
  sudo -s -- <<HERE
  sed -i '/SSO SSH Config START/Q' /etc/ssh/sshd_config
  echo "Port 2222" >> /etc/ssh/sshd_config
  ssh-keygen -A
  HERE
  ```

  2. Inside the devcontainer, run this in a terminal you keep alive (e.g. via tmux):

  ```
  sudo /usr/sbin/sshd -D
  ```

  3. Then just connect to your remote host via SSH in windsurf, but using the port 2222.

* SSH agent-forwarding is on by default, and will use Windsurf's latest connection to that host. If you're having trouble with it, try reloading the window to refresh the connection.

* On Windows, you'll see some `cmd.exe` windows when it asks for your password. This is expected—we'll get rid of them soon.

* If you have issues, please first make sure that you can ssh into your remote host using regular `ssh` in a terminal. If the problem persists, include the output from the `Output > Remote SSH (Windsurf)` tab in any bug reports!

## Notes

* SSH + Dev Containers is not currently supported in Windsurf, but we plan to support it in the future.
* You can only SSH into Linux-based remote hosts at the moment (though you should be able to SSH from all platforms.) We plan to support Windows and macOS in the future.

# Dev Containers (Beta)

Windsurf has beta support for dev containers for Mac, Windows, and Linux. To use this feature, Docker must be installed on your machine and be accessible from the Windsurf terminal.

If you would like to run a development container locally, you can use the following commands:

1. `Open Folder in Container`
   * Open a new workspace with a specified devcontainer.json file
2. `Reopen in Container`
   * Reopen the current workspace in a new container, specifying a devcontainer.json file to configure the container.
3. `Attach to Running Container`
   * If you already have a Docker container running, you can attach a remote server to the container and connect your current workspace to it. If the container does not follow the [Development Container Specificaton](https://containers.dev/implementors/spec/), we will try our best effort to infer the remote user and set things up accordingly.
4. `Reopen Folder Locally`
   * If currently connected to a development container, you can disconnect from the container and reopen the current workspace locally.

These will also appear if you click on the `Open a Remote Window` button in the bottom left.

# WSL (Beta)

As of version 1.1.0, Windsurf has beta support for Windows Subsystem for Linux. You must already have WSL set up and configured on your Windows machine.

You can access WSL by clicking on the `Open a Remote Window` button in the bottom left, or under `Remote-WSL` in the Command Palette.

# Extension Marketplace

You can change the marketplace you use to download extensions from. To do this, go to `Windsurf Settings` and modify the Marketplace URL settings under the `General` section.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/marketplace.png" />
</Frame>

## Windsurf Plugins

<AccordionGroup>
  <Accordion title="Windsurf Pyright">
    Search "Windsurf Pyright" or paste in `@id:codeium.windsurfPyright` in the extensions search bar.
  </Accordion>
</AccordionGroup>


# AI Commit Messages
Source: https://docs.windsurf.com/windsurf/ai-commit-message



Generate git commit messages with a single click. This feature analyzes your code changes and creates meaningful commit messages that describe what you've done.

Available with no limits to all paid users!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/ai-commit-message.png" />
</Frame>

# How It Works

When you're ready to commit changes:

1. Stage your files in the Git panel
2. Click the sparkle (✨) icon next to the commit message field
3. Review the generated message and edit if needed
4. Complete your commit

The AI analyzes your recent code changes and creates a meaningful commit message that describes what you've done.

# Best Practices

For better results:

* Apply general best practices for commit scope: group together small, meaningful units of changes
* Review the message before committing

# Limitations

* Large or complex commits may result in more generic messages
* Specialized terminology might not always be captured perfectly
* Generated messages are suggestions and may need editing

# Privacy

Your code and commit messages remain private. We don't store your code changes or use them for training our models.


# App Deploys
Source: https://docs.windsurf.com/windsurf/app-deploys



App Deploys lets you deploy web applications and sites directly within Windsurf through Cascade tool calls. This feature helps you share your work through public URLs, update your deployments, and claim projects for further customization. This feature is in beta and support for additional frameworks, more robust builds, etc. are coming soon.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/app-deploys-ui.png" />
</Frame>

## Overview

With App Deploys, you can:

* Deploy a website or JS web app to a public domain
* Re-deploy to the same URL after making changes
* Claim the project to your personal account

<Warning>
  App Deploys are intended primarily for preview purposes. For production
  applications with sensitive data, we recommend claiming your deployment and
  following security best practices.
</Warning>

## Supported Providers

We currently support the following deployment provider:

* **Netlify** - For static sites and web applications

<Note>Support for additional providers are planned for future releases.</Note>

## How It Works

When you use App Deploys, your code is uploaded to our server and deployed to the provider under our umbrella account. The deployed site will be available at a public URL formatted as:

```
<SUBDOMAIN_NAME>.windsurf.build
```

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/app-deploys-demo1.mp4" />

### Deployment Process

1. Cascade analyzes your project to determine the appropriate framework
2. Your project files are securely uploaded to our server
3. The deployment is created on the provider's platform
4. You receive a public URL and a claim link

### Project Configuration

To facilitate redeployment, we create a `windsurf_deployment.yaml` file at the root of your project. This file contains information for future deployments, such as a project ID and framework.

## Using App Deploys

To deploy your application, simply ask Cascade something like:

```
"Deploy this project to Netlify"
"Update my deployment"
```

Cascade will guide you through the process and help troubleshoot common issues.

## Security Considerations

<Warning>
  Your code will be uploaded to our servers for deployment. Only deploy code
  that you're comfortable sharing publicly.
</Warning>

We take several precautions to ensure security:

* File size limits and validation
* Rate limiting based on your account tier
* Secure handling of project files

For added privacy, visit [clear-cookies.windsurf.build](https://clear-cookies.windsurf.build) to check for and clear any cookies set by sites under `windsurf.build`. If any cookies show up, they shouldn't be there, and clearing them helps prevent cross-site cookie issues and keeps your experience clean.

Windsurf sites are built by humans and AI, and while we encourage the AI to make best practice decisions, it's smart to stay cautious. Windsurf isn't responsible for issues caused by sites deployed by our users.

## Claiming Your Deployment

After deploying, you'll receive a claim URL. By following this link, you can claim the project on your personal provider account, giving you:

* Full control over the deployment
* Access to provider-specific features
* Ability to modify the domain name
* Direct access to logs and build information

<Note>
  Unclaimed deployments may be deleted after a certain period. We recommend
  claiming important projects promptly.
</Note>

## Rate Limits

To prevent abuse, we apply these tier-based rate limits:

| Plan     | Deployments per day | Max unclaimed sites |
| -------- | ------------------- | ------------------- |
| Free     | 10                  | 1                   |
| Pro      | 10                  | 5                   |
| Ultimate | 10                  | 5                   |

## Supported Frameworks

App Deploys works with most popular JavaScript frameworks, including:

* Next.js
* React
* Vue
* Svelte
* Static HTML/CSS/JS sites

## Troubleshooting

### Failed Deployment Build

If your deployment fails:

1. Check the build logs provided by Cascade
2. Ensure your project can build locally (run `npm run build` to test)
3. Verify that your project follows the framework's recommended structure
4. View the documentation for how to deploy [your framework to Netlify via `netlify.toml`](https://docs.netlify.com/configure-builds/file-based-configuration/)
5. Consider claiming the project to access detailed logs on the provider's dashboard

<Warning>
  We cannot provide direct support for framework-specific build errors. If your
  deployment fails due to code issues, debug locally or claim the project to
  work with the provider's support team.
</Warning>

### Netlify Site Not Found

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/netlify-site-not-found.png" />
</Frame>

This likely means that your build failed. Please claim your site (you can find it on your [deploy history](https://codeium.com/windsurf/app-deploys)) and check the build logs for more details. Often times you can paste your build logs into Cascade and ask for help.

### Changing Your Subdomain / URL

#### Updating `netlify.app` domain

You can change your subdomain by claiming your deployment and updating the Netlify site settings. This will update your `.netlify.app` domain.

#### Updating custom `.windsurf.build` subdomain

<Warning>
  You cannot change your custom `.windsurf.build` subdomain after you've
  deployed. Instead, you'll need to deploy a new site with a new subdomain.
</Warning>

To update your custom `.windsurf.build` subdomain, you'll need to deploy a new site with a new subdomain:

1. Delete the `windsurf_config.yaml` file from your project
2. Ask Cascade to deploy a new site with a new subdomain and tell it which one you want
3. It can help to start a new conversation or clear your auto-generated memories so that Cascade doesn't try to re-deploy to the old subdomain
4. When you create a new deployment, you'll be able to press the "Edit" button on the subdomain UI to update it prior to pressing "Deploy"

### Error: `Unable to get project name for project ID`

This error occurs when your project ID is not found in our system of records or if Cascade is using the subdomain as the project ID incorrectly. To fix this:

1. Check that the project still exists in your Netlify account (assuming it is claimed).
2. Check that the project ID is in the `windsurf_deployment.yaml` file. If it is not in the file, you can download your config file from your [deploy history](https://codeium.com/windsurf/app-deploys) dropdown.
3. Try redeploying and telling Cascade to use the `project_id` from the `windsurf_deployment.yaml` file more explicitly

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/app-deploys-download-config-file.png" />
</Frame>


# Overview
Source: https://docs.windsurf.com/windsurf/cascade



Cascade allows us to expose [AI Flows](https://codeium.com/flows), a new way of coding with AI.

To open Cascade, press `Cmd/Ctrl+L`click the Cascade icon in the top right corner of the Windsurf window.

<Frame style={{ border: 'none', background: 'none' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf-icon-bar.png" />
</Frame>

<Tip>Selected text in the editor or terminal will automatically be included. </Tip>

### Quick links to features

<CardGroup cols={2}>
  <Card title="Image Upload" icon="image" href="/windsurf/image-upload">
    Add images to your prompt to be referenced in Cascade's suggestions.
  </Card>

  <Card title="Web Search" icon="globe-pointer" href="/windsurf/web-search">
    Search the web for information to be referenced in Cascade's suggestions.
  </Card>
</CardGroup>

<CardGroup cols={2}>
  <Card title="Memories" icon="cloud-word" href="/windsurf/memories">
    Memories and rules help customize behavior.
  </Card>

  <Card title="Terminal" icon="terminal" href="/windsurf/terminal">
    An upgraded Terminal experience.
  </Card>
</CardGroup>

<Card title="MCP" icon="plug" href="/windsurf/mcp">
  MCP servers extend the agent's capabilities.
</Card>

# Model selection

Select your desired model from the selection menu below the chat input.

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/cascade-model-select.mp4" />

# Write/Chat Modes

Cascade comes in two modes: **Write** and **Chat**.

Write mode allows Cascade to create and make modifications to your codebase, while Chat mode is optimized for questions around your codebase or general coding principles.

<video autoPlay muted loop playsInline className="w-1/4 aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/cascade-write-chat-modes.mp4" />

# Access to Tools

Cascade has a variety of tools at its disposal, such as Search, Analyze, [Web Search](/windsurf/web-search), [MCP](/windsurf/mcp), and the [terminal](/windsurf/terminal).

It can detect which packages and tools that you're using, which ones need to be installed, and even install them for you. Just ask Cascade how to run your project and press Accept.

<Note>Cascade can make up to 25 tool calls per prompt. If the trajectory stops, simply type in `continue` and Cascade will resume from where it left off. Each `continue` will count as a new prompt. </Note>

# Revert to previous steps

You have the ability to revert changes that Cascade has made if you want to. Simply hover your mouse over the original prompt and click on the revert arrow on the right, or revert directly from the table of contents. This will revert all code changes back to the state of your codebase at the desired step.

<Warning>Reverts are currently irreversible, so be careful!</Warning>

<video autoPlay controls muted loop playsInline className="w-full aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-revert.mp4" />

# Real-time collaboration

A unique capability of Windsurf and Cascade is that it is aware of your real-time actions.

You no longer necessarily need to prompt with context on your prior actions, as Cascade and Windsurf are already aware.

The following video shows how a recent variable name change was automatically detected within Cascade.

<video autoPlay controls muted loop playsInline className="w-full aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf-continue.mp4" />

# Send Problems to Cascade

When you have problems in your code which show up in the Problems panel at the bottom of the editor, simply click the `Send to Cascade` button to bring them into the Cascade panel as an @ mention.

<Frame>
  <img style={{ maxHeight: "500px" }} src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/send-problems-to-cascade.png" />
</Frame>

# Explain and Fix

For any errors that you run into from within the editor, you can simply highlight the error and click `Explain and Fix` to have Cascade fix it for you.

<Frame>
  <img style={{ maxHeight: "500px" }} src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/windsurf-explain-fix.png" />
</Frame>

# Ignoring files

If you'd like Cascade to ignore files, you can add your files to `.codeiumignore` at the root of your workspace. This will prevent Cascade from viewing, editing or creating files inside of the paths designated. You can declare the file paths in a format similar to `.gitignore`.

# Linter integration

Cascade can automatically fix linting errors on generated code. This is turned on by default, but it can be disabled by clicking `Auto-fix` on the tool call, and clicking `disable`. This edit will not consume any credits.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/auto-fix-lint.png" />
</Frame>

When Cascade makes an edit with the primary goal of fixing lints that it created and auto-detected,
it may discount the edit to be free of credit charge. This is in recognition of the fact that
fixing lint errors increases the number of tool calls that Cascade makes.

# Sounds for Cascade (Beta)

Play a sound when Cascade finishes a trajectory to let you know when it's done. You can enable it via `Windsurf Settings` > `Cascade` > `Enable Sounds for Cascade`.


# Getting Started
Source: https://docs.windsurf.com/windsurf/getting-started



Tomorrow's editor, today.

Windsurf is a next-generation AI IDE built to keep you in the flow. On this page, you'll find instructions on how to install Windsurf on your computer, navigate the onboarding flow, and get started with your first AI-powered project.

<Card
  title="Cascade"
  icon={
    <svg
      width="25"
      height="25"
      viewBox="0 0 1292 1292"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M1195 599C1195 848.08 993.08 1050 744 1050C494.92 1050 293 848.08 293 599C293 349.92 494.92 148 744 148C993.08 148 1195 349.92 1195 599ZM411.5 599C411.5 782.635 560.365 931.5 744 931.5C927.635 931.5 1076.5 782.635 1076.5 599C1076.5 415.365 927.635 266.5 744 266.5C560.365 266.5 411.5 415.365 411.5 599Z"
        fill="#37AA98"
      />
      <path
        d="M1096.19 1053.62C1116.8 1078.03 1113.86 1114.77 1087.65 1133.04C1002.41 1192.46 903.441 1229.92 799.584 1241.61C676.505 1255.46 552.082 1232.51 442.049 1175.65C332.016 1118.79 241.314 1030.58 181.415 922.172C130.87 830.693 104.172 728.301 103.33 624.396C103.071 592.449 131.338 568.79 163.173 571.479C195.007 574.168 218.29 602.208 219.218 634.143C221.573 715.175 243.206 794.78 282.679 866.22C331.512 954.6 405.457 1026.51 495.161 1072.87C584.866 1119.22 686.302 1137.94 786.643 1126.64C867.75 1117.51 945.198 1089.11 1012.66 1044.15C1039.24 1026.44 1075.58 1029.21 1096.19 1053.62Z"
        fill="#37AA98"
      />
      <path
        d="M177.334 450.08C146.261 442.514 126.947 411.072 137.349 380.829C160.687 312.983 195.56 249.512 240.566 193.267C285.571 137.023 339.851 89.0802 400.928 51.4326C428.153 34.6511 463.065 46.5999 477.261 75.2582C491.457 103.917 479.508 138.389 452.641 155.738C406.542 185.506 365.436 222.584 330.994 265.627C296.552 308.67 269.39 356.906 250.456 408.411C239.421 438.428 208.408 457.646 177.334 450.08Z"
        fill="#37AA98"
      />
    </svg>
  }
  href="/windsurf/cascade"
>
  Your agentic chatbot that can collaborate with you like never before.
</Card>

<CardGroup cols={2}>
  <Card title="Usage" icon="bars-progress" href="/windsurf/usage">
    Credits and usage.
  </Card>

  <Card title="Terminal" icon="terminal" href="/windsurf/terminal">
    An upgraded Terminal experience.
  </Card>
</CardGroup>

<CardGroup cols={2}>
  <Card title="MCP" icon="plug" href="/windsurf/mcp">
    MCP servers extend the agent's capabilities.
  </Card>

  <Card title="Memories" icon="cloud-word" href="/windsurf/memories">
    Memories and rules help customize behavior.
  </Card>

  <Card title="Context Awareness" icon="brain" href="/context-awareness/overview">
    Instantly understands your codebase.
  </Card>

  <Card title="Advanced" icon="gears" href="/windsurf/advanced">
    Advanced configuration options.
  </Card>
</CardGroup>

<Tip> See what's new with Windsurf in our [changelog](https://codeium.com/changelog)! </Tip>

## Set Up 🏄

To get started, please ensure that your device meets the requirements, click the download link, and follow the instructions to install and run Windsurf.

[Click here](#update-windsurf) if you're looking for how to update Windsurf.

<Tabs>
  <Tab title="Mac">
    Minimum OS Version: OS X Yosemite

    <a href="https://codeium.com/windsurf/download_mac" target="_blank" rel="noopener noreferrer">
      <button style={{width: '170px', backgroundColor: '#09b6a2', color: 'white', padding: '5px 10px', border: 'none', borderRadius: '5px', cursor: 'pointer', fontSize: '0.8rem', display: 'flex', justifyContent: 'center'}}>Download for Mac</button>
    </a>
  </Tab>

  <Tab title="Windows">
    Minimum OS Version: Windows 10

    <a href="https://codeium.com/windsurf/download" target="_blank" rel="noopener noreferrer">
      <button style={{width: '170px', backgroundColor: '#09b6a2', color: 'white', padding: '5px 10px', border: 'none', borderRadius: '5px', cursor: 'pointer', fontSize: '0.8rem', display: 'flex', justifyContent: 'center'}}>Download for Windows</button>
    </a>
  </Tab>

  <Tab title="Ubuntu">
    Minimum OS Version: >= 20.04 (or glibc >= 2.31, glibcxx >= 3.4.26)

    <a href="https://codeium.com/windsurf/download_linux" target="_blank" rel="noopener noreferrer">
      <button style={{width: '170px', backgroundColor: '#09b6a2', color: 'white', padding: '5px 10px', border: 'none', borderRadius: '5px', cursor: 'pointer', fontSize: '0.8rem', display: 'flex', justifyContent: 'center'}}>Download for Ubuntu</button>
    </a>
  </Tab>

  <Tab title="Other Linux distributions">
    Minimum OS Version: glibc >= 2.28, glibcxx >= 3.4.25

    <a href="https://codeium.com/windsurf/download_linux" target="_blank" rel="noopener noreferrer">
      <button style={{width: '170px', backgroundColor: '#09b6a2', color: 'white', padding: '5px 10px', border: 'none', borderRadius: '5px', cursor: 'pointer', fontSize: '0.8rem', display: 'flex', justifyContent: 'center'}}>Download for Linux</button>
    </a>
  </Tab>
</Tabs>

## Onboarding

Once you have Windsurf running, you will see the page below. Let's get started! Note that you can always restart this onboarding flow with the "Reset Onboarding" command.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/welcome.png" />
</Frame>

### 1. Select setup flow

If you're coming from VS Code or Cursor, you can easily import your configurations. Otherwise, select "Start fresh". You can also optionally install `windsurf` in PATH such that you can run `windsurf` from your command line.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/setup.png" />
</Frame>

<Tabs>
  <Tab title="Start fresh">
    Choose your keybindings here, either default VS Code bindings or Vim bindings.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/keybind.png" />
    </Frame>
  </Tab>

  <Tab title="Import from VS Code">
    You can migrate your settings, extensions, or both here.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/vscode_migration.png" />
    </Frame>
  </Tab>

  <Tab title="Import from Cursor">
    You can migrate your settings, extensions, or both here.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/vscode_migration.png" />
    </Frame>
  </Tab>
</Tabs>

### 2. Choose editor theme

Choose your favorite color theme from these defaults! Don't worry, you can always change this later. Note that if you imported from VS Code, your imported theme will override this.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/theme.png" />
</Frame>

### 3. Sign up / Log in

To use Windsurf, you need to use your Windsurf account or create one if you don't have one. Signing up is completely free!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/auth.png" />
</Frame>

Once you've authenticated correctly, you should see this page. Hit "Open Windsurf" and you're good to go!

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/authenticated.png" />
</Frame>

#### Having Trouble?

If you're having trouble with this authentication flow, you can also log in and manually provide Windsurf with an authentication code.

<Tabs>
  <Tab title="1. Select &#x22;Having Trouble?&#x22;">
    Click the "Copy link" button to copy an authentication link to your clipboard and enter this link into your browser.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/manual_auth.png" />
    </Frame>
  </Tab>

  <Tab title="2. Enter Authentication Code">
    Copy the authentication code displayed in the link and enter it into Windsurf.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/manual_auth_onboarding.png" />
    </Frame>
  </Tab>
</Tabs>

### 4. Let's Surf! 🏄

<Frame>
  <video autoPlay muted loop playsInline src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/onboarding/lets_surf.mp4" />
</Frame>

## Update Windsurf

To update Windsurf, you can click on the "Restart to Update ->" button in the top right corner of the menu bar.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/update-windsurf.png" />
</Frame>

If you are not seeing this button, you can:

1. Click on your Profile icon dropdown > Check for Updates

2. In the Command Palette (`Cmd/Ctrl+Shift+P`) > "Check for Updates"

## Things to Try

Now that you've successfully opened Windsurf, let's try out some of the features! These are all conveniently accessible from the starting page. :)

<AccordionGroup>
  <Accordion title="Write with Cascade">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade.png" />
    </Frame>

    On the right side of the IDE, you'll notice a new panel called "Cascade". This is your AI-powered code assistant! You can chat, write code, and run code with Cascade! Learn more about how it works [here](/windsurf/cascade).
  </Accordion>

  <Accordion title="Generate a project with Cascade">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade_generate.png" />
    </Frame>

    You can create brand new projects with Cascade! Click the "New Project" button to get started.
  </Accordion>

  <Accordion title="Open Folder / Connect to Remote Server">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/open_workspace.png" />
    </Frame>

    You can open a folder or connect to a remote server via SSH or a local dev container. Learn more [here](/windsurf/advanced).
  </Accordion>

  <Accordion title="Configure Windsurf Settings">
    <Frame>
      <img style={{width: '50%', display: 'block', margin: 'auto'}} src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/windsurf-settings-panel.png" />
    </Frame>

    Click on the "Windsurf - Settings" button on the bottom right to pop up the settings panel. To access Advanced Settings, click on the button in this panel or select "Windsurf Settings" in the top right profile dropdown.
  </Accordion>

  <Accordion title="Open Command Palette">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/command_palette.png" />
    </Frame>

    You can open the command palette with the `⌘+⇧+P` (on Mac) or `Ctrl+Shift+P` (on Windows/Linux) shortcut. Explore the available commands!
  </Accordion>
</AccordionGroup>

## Forgot to Import VS Code Configurations?

You can easily import your VS Code/Cursor configuration into Windsurf if you decide to do so after the onboarding process.

Open the command palette (Mac: `⌘+⇧+P`, Windows/Linux: `Ctrl+Shift+P`) and type in the following:

<Tabs>
  <Tab title="VS Code">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/import-vscode.png" />
    </Frame>
  </Tab>

  <Tab title="Cursor">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/import-cursor.png" />
    </Frame>
  </Tab>
</Tabs>

## Incompatible Extensions

There are a few extensions that are incompatible with Windsurf. These include other AI code complete extensions and proprietary extensions. You cannot install extensions through any marketplace on Windsurf.

## Custom App Icons (beta)

For paying users of Windsurf, you can choose between different Windsurf icons while it sits in your dock. Currently, this feature is only available for Mac OS, with other operating systems coming soon.

To change your app icon, simply click the profile/settings icon in the top right corner of the editor and select "Customize App Icon".

## Windsurf Next

Windsurf Next is prerelease version of Windsurf which users can choose to opt-in to access the newest features and capabilities as early as possible, even if the features are not fully polished. Features will typically be rolled out to Windsurf Next first, and then into the stable release shortly after.

You can opt-in to Windsurf Next simply by [downloading it here](https://codeium.com/windsurf/download-next).


# Image Upload
Source: https://docs.windsurf.com/windsurf/image-upload



Add images to your prompt to be referenced in Cascade's suggestions. Things like screenshots of your Figma designs, wireframes, etc are all fair game!

Currently only available for use with GPT-4o and Claude 3.5 Sonnet models.

Simply drag in or paste an image, click on the "Add image" button below the input text box to include it in your message.

<Frame>
  <video autoPlay muted loop playsInline src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-drag-drop.mp4" />
</Frame>

<Warning>May not work if you drag an image into Cascade from Windsurf's File Explorer.</Warning>


# Model Context Protocol (MCP)
Source: https://docs.windsurf.com/windsurf/mcp



**MCP (Model Context Protocol)** is a protocol that enables LLMs to access custom tools and services.
An MCP client (Cascade, in this case) can make requests to MCP servers to access tools that they provide.
Cascade now natively integrates with MCP, allowing you to bring your own selection of MCP servers for Cascade to use.
See the [official MCP docs](https://modelcontextprotocol.io/) for more information.

<Note>Enterprise users must manually turn this on via settings</Note>

## Configuring MCP

To set up MCP with Cascade, navigate to Windsurf - Settings > Advanced Settings or Command Palette > Open Windsurf Settings Page.

Scroll down to the Cascade section and you will find the option to add a new server, view existing servers, and a button to view the raw JSON config file at `mcp_config.json`.

Windsurf supports two [transport types](https://modelcontextprotocol.io/docs/concepts/transports) for MCP servers: `stdio` and `/sse`.

<Tip>For `/sse` servers, the URL should reflect that of the endpoint and resemble <br />
`https://<your-server-url>/sse`.</Tip>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/mcp/settings-cascade-mcp.png" />
</Frame>

## Adding a new server

To add a new server, press the "Add Server" button in the Cascade settings. You can then easily choose between some pre-populated servers that we've found to be the most helpful and popular. Alternatively, you can click "Add custom server +" to add your own server directly in `mcp_config.json`.

Currently, the number of tools that a user can have access to from the MCP servers at one time is limited to 50.

If you add a new server that has enough tools to exceed the limit, you will need to remove a server from the list in order to add the new one.

<Note>Make sure to press the refresh button after you add a new MCP server.</Note>

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/mcp/easy-add-mcp-servers.png" />
</Frame>

## mcp\_config.json

The `~/.codeium/windsurf/mcp_config.json` file is a JSON file that contains a list of servers that Cascade can connect to.

The JSON should follow the same schema as the config file for Claude Desktop.

Here’s an example configuration, which sets up a single server for Google Maps:

```json
{
  "mcpServers": {
    "google-maps": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-google-maps"
      ],
      "env": {
        "GOOGLE_MAPS_API_KEY": "<YOUR_API_KEY>"
      }
    }
  }
}
```

Be sure to provide the required arguments and environment variables for the servers that you want to use.

See the [official MCP server reference repository](https://github.com/modelcontextprotocol/servers) or [OpenTools](https://opentools.com/) for some example servers.

## Notes

* Since MCP tool calls can invoke code written by arbitrary server implementers, we do not assume liability
  for MCP tool call failures. To reiterate:

<Warning>
  MCP tool calls will consume credits regardless of success or failure.
</Warning>

* We currently only support [tools](https://modelcontextprotocol.io/docs/concepts/tools), not [prompts](https://modelcontextprotocol.io/docs/concepts/prompts) nor [resources](https://modelcontextprotocol.io/docs/concepts/resources).
  In other words, Cascade will be able to request and use a server's tools, but not the other endpoints that a server exposes.
* We do not support tools that output images.


# Memories & Rules
Source: https://docs.windsurf.com/windsurf/memories



`Memories` is the system for sharing and persisting context across conversations.

There are two mechanisms for this in Windsurf: Memories, which can be automatically generated by Cascade, and rules, which are manually defined by the user at both the local and global levels.

## How to Manage Memories

Memories and Rules can be accessed and configured at any time by clicking on the book icon at the top of the Cascade panel, or via “Windsurf - Settings” in the bottom-right hand corner. To edit an existing memory, simply click into it and then click the `Edit` button.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-memories-ui.png" />
</Frame>

## Memories

During conversation, Cascade can automatically generate and store memories if it encounters context that it believes is useful to remember.

Additionally, you can ask Cascade to create a memory at any time. Just prompt Cascade to "create a memory of ...".

Cascade's autogenerated memories are associated with the workspace that they were created in and Cascade will retrieve them when it believes that they are relevant. Memories generated in one workspace will not be available in another.

<Tip>Creating and using auto-generated memories do NOT consume credits</Tip>

## .windsurfrules

Users can explicitly define their own rules for Cascade to follow. Cascade will be aware of your rules at all times, even if you change them in the middle of your conversation, and will try its best to follow them.

Rules are defined in designated files:

`global_rules.md` - rules applied across all workspaces

`.windsurfrules` - rules for the local workspace that the `.windsurfrules` file is in

To ensure that the rules are only applied to your local project, add `.windsurfrules` to your project’s `.gitignore`.

<Tip>You can find example rule templates curated by the Windsurf team at [https://codeium.com/windsurf/directory](https://codeium.com/windsurf/directory) to help you get started.</Tip>

Edit these rules files by clicking on the Windsurf - Settings menu, select the "Settings" tab, and clicking "Edit Rules" next to either `Set Global AI Rules` or `Set Workspace AI Rules`.

<Note>`global_rules.md` and `.windsurfrules` are limited to 6000 characters each. Any content above 6000 characters will be truncated and Cascade will not be aware of them.</Note>

If your window has multiple workspaces, the `.windsurfrules` from each workspace will be applied. If the total of your global rules and local rules exceed 12,000 characters, priority will be given to the global rules, followed by the workspace rules. Any rules beyond 12,000 characters will be truncated.

### Best Practices

To help Cascade follow your rules effectively, follow these best practices:

* Keep rules simple, concise, and specific. Rules that are too long or vague may confuse Cascade.
* There's no need to add generic rules (e.g. "write good code"), as these are already baked into Cascade's training data.
* Format your rules using bullet points, numbered lists, and markdown. These are easier for Cascade to follow compared to a long paragraph. For example:

```
# Coding Guidelines 
- My project's programming language is python
- Use early returns when possible
- Always add documentation when creating new functions and classes
```

* XML tags can be an effective way to communicate and group similar rules together. For example:

```
<coding_guidelines>
- My project's programming language is python
- Use early returns when possible
- Always add documentation when creating new functions and classes
</coding_guidelines>
```


# Models
Source: https://docs.windsurf.com/windsurf/models

Cascade has several different models for you to choose from.

In the Cascade panel `Ctrl/⌘ + L`, you can easily switch between different models of your choosing.

Under the text input box, you will see a model selection dropdown menu. You will see the following models available:

* GPT-4o
* GPT-4.1 (free limited time)
* o3-mini (medium reasoning)
* o4-mini-medium (free limited time)
* o4-mini-high (free limited time)
* Claude 3.5 Sonnet
* Claude 3.7 Sonnet
* Claude 3.7 Sonnet (Thinking)
* DeepSeek-V3-0324
* DeepSeek-R1
* Gemini 2.0 Flash
* Gemini 2.5 Pro
* xAI Grok-3
* xAI Grok-3 mini (Thinking)
* Cascade Base ⚡

# Premium Models

Due to the wide variation between the serving costs of each model, depending on the model you select, each of your input prompts will consume a different number of [User Prompt credits](/windsurf/usage#user-prompt-and-flow-action-credits).

Below you will find a breakdown of how many User Prompt credits you will be charged for each model:

|                Model               | User Prompt Credits | Free | Trial/Pro/Ultimate | Teams | Image Upload |
| :--------------------------------: | :-----------------: | :--: | :----------------: | :---: | :----------: |
|               GPT-4o               |          1          |   ✓  |          ✓         |   ✓   |       ✓      |
|     GPT-4.1 (free limited time)    |   Free until 4/21   |   ✓  |          ✓         |   ✓   |       ✓      |
|     o3-mini (medium reasoning)     |   Free until 4/21   |      |          ✓         |   ✓   |              |
| o4-mini-medium (free limited time) |   Free until 4/21   |   ✓  |          ✓         |   ✓   |              |
|  o4-mini-high (free limited time)  |   Free until 4/21   |   ✓  |          ✓         |   ✓   |              |
|          Claude 3.5 Sonnet         |          1          |   ✓  |          ✓         |   ✓   |       ✓      |
|          Claude 3.7 Sonnet         |          1          |   ✓  |          ✓         |   ✓   |       ✓      |
|    Claude 3.7 Sonnet (Thinking)    |         1.25        |   ✓  |          ✓         |   ✓   |       ✓      |
|          DeepSeek-V3-0324          |          0          |      |          ✓         |       |              |
|             DeepSeek-R1            |         0.5         |      |          ✓         |       |              |
|          Gemini 2.0 Flash          |         0.25        |   ✓  |          ✓         |   ✓   |              |
|           Gemini 2.5 Pro           |          1          |   ✓  |          ✓         |       |              |
|             xAI Grok-3             |          1          |      |          ✓         |       |              |
|     xAI Grok-3 mini (Thinking)     |        0.125        |      |          ✓         |       |              |
|           Cascade Base ⚡           |          0          |   ✓  |          ✓         |   ✓   |              |

# Cascade Base ⚡

All users have unlimited access to Cascade Base, which does NOT consume any User Prompt OR Flow Action credits.

It is not quite as smart as the premium models, but it's fast, pretty accurate, and free.


# Previews (Beta)
Source: https://docs.windsurf.com/windsurf/previews



Previews in Windsurf allow you to view the local deployment of your app either in the IDE or in the browser (optimized for Google Chrome, Arc, and Chromium based browsers) with listeners, allowing you to iterate rapidly by easily sending elements and errors back to Cascade as context.

<video autoPlay muted loop playsInline className="w-full aspect-video" src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/previews/browser-preview-demo.mp4" />

Previews are opened via tool call, so just ask Cascade to preview your app to get started. Alternatively, you can also click the Web icon in the Cascade toolbar to automatically propagate the natural language prompt to enter the proxy.

<Frame style={{ border: 'none', background: 'none' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/previews/website-tools-icon.png" />
</Frame>

# Send Elements to Cascade

In the Preview, you can select and send elements/components and errors directly to Cascade. Simply click on the "Send element" button on the bottom right and then proceed to select the element you want to send.

The selected element will be inserted into your current Cascade prompt as an `@ mention`. You can add as many elements as you want in the prompt.

# In-IDE Preview

Windsurf can open a up a Preview as a new tab in your editor. This is a simple web view that enables you to view web app alongside your Cascade panel.

Because these Previews are hosted locally, you can open them in your system browser as well, complete with all the listeners and ability to select and send elements and console errors to Cascade.

<Warning>The listeners and the abilities to send elements and errors are optimized for Google Chrome, Arc, and Chromium based browsers.</Warning>

# How to Disable

When you click on the Web icon, it will give you the option to click on "Disable previews". You can also do this from Windsurf - Settings. This will prevent Cascade from making this tool call.


# Terminal
Source: https://docs.windsurf.com/windsurf/terminal



# Command in the terminal

Use our [Command](/command/overview) modality in the terminal (`Cmd/Ctrl+I`) to generate the proper CLI syntax from prompts in natural language.

<Frame style={{ border: 'none', background: 'none' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf-terminal-command.png" />
</Frame>

# Send terminal selection to Cascade

Highlight a portion of of the stack trace and press `Cmd/Ctrl+L` to send it to Cascade, where you can reference this selection in your next prompt.

<Frame style={{ border: 'none', background: 'none' }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf-terminal-selection-mention.png" />
</Frame>

# Auto-executed Cascade commands

Cascade has the ability to run terminal commands on its own with user permission. However, certain terminal commands can be accepted or rejected automatically through the Allow and Deny lists.

By enabling Auto mode, it will rely on Cascade's judgement on whether the command requires the user's permission to be executed. This feature is only available for messages sent with premium models.

### Turbo Mode

<Warning> Only available to paid individual users.</Warning>

In Turbo mode, Cascade will always execute the command, unless it is in the deny list.

You can toggle this via the Windsurf - Settings panel in the bottom right hand corner of the editor.

<Frame>
  <img style={{ maxHeight: "500px" }} src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-turbo-mode.png" />
</Frame>

### Allow list

An allow list defines a set of terminal commands that will always auto-execute. For example, if you add `git`, then Cascade will always accept `git add -A`.

The setting can be via Command Palette → Open Settings (UI) → Search for `windsurf.cascadeCommandsAllowList`.

<Frame>
  <img style={{ maxHeight: "500px" }} src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/allow-list.png" />
</Frame>

### Deny list

A deny list defines a set of terminal commands that will never auto-execute. For example, if you add `rm`, then Cascade will always ask for permission to run `rm index.py`.

The setting can be via Command Palette → Open Settings (UI) → Search for `windsurf.cascadeCommandsDenyList`.

<Frame>
  <img style={{ maxHeight: "500px" }} src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/deny-list.png" />
</Frame>


# Paid Plan and Credit Usage
Source: https://docs.windsurf.com/windsurf/usage



## Getting started

To get started, [complete Windsurf's onboarding](https://docs.codeium.com/windsurf/getting-started#onboarding) and authenticate into Windsurf. Upon authenticating into Windsurf, your 2-week Free Trial starts.

User Prompt credits are consumed whenever a message is sent to Cascade with a premium model while Flow Action credits are consumed when a premium model is used by the AI in Write and Chat mode for a tool call (e.g. search, analyze, write, terminal command, etc.).

Upon using all of your credits, premium models will no longer be accessible but you will still be able to use our Cascade Base model. To resume access with premium models, upgrade to a Pro or Pro Ultimate plan.

The [Free Trial](#using-a-free-trial) includes:

* 50 User Prompt credits

* 200 Flow Action credits

The [Pro](#using-pro-plan) plan includes:

* 500 User Prompt credits

* 1500 Flow Action credits

The [Pro Ultimate](#using-pro-ultimate-plan) plan includes:

* Infinite User Prompt credits

* 3000 Flow Action credits

And the [Free](#using-a-free-plan) plan includes:

* 5 User Prompt credits

* 5 Flow Action credits

If you run out of credits on the Pro or Pro Ultimate plans, you will have the option of [purchasing additional credits](#purchasing-additional-flex-credits).

After upgrading, your paid plan will start immediately and you'll have access to premium models again. To learn more about the quotas and features per pricing plan, [click here](https://codeium.com/pricing).

## User Prompt and Flow Action credits

**User Prompt credits are usage credits that get consumed for each message sent with a premium model (e.g. Sonnet or GPT-4o). Every message sent counts as 1 user prompt credit.**

**Flow Action credits are a usage credit that get consumed for each tool call (e.g. View file, Search, Write, Terminal, etc.). Every tool call counts as 1 flow action credit.**

For Flow Action credits, depending on the prompt, Cascade might not need to take any actions (e.g. explaining a block of code), while for others, Cascade might need to take a series of actions.

### Tool calls

One of the things that makes Cascade special is its ability to use tool calls. Here's are a few examples of tool calls that are currently supported:

* **Search**: Cascade will intelligently search through your codebase for snippets relevant to the task that it's trying to accomplish.
* **Analyze**: Cascade will analyze a file to gather more context to help it accomplish the task requested.
  <Warning>When analyzing large files, Cascade may split the file up and analyze it in separate chunks, which will each count as one tool call. Therefore, it is possible that it may cost more than 1 credit to analyze a large file. </Warning>
* **Write**: Cascade will write changes for you in your file. Only available in Write mode which can be configured under and to the right the prompt input box.
* **Terminal**: Cascade has the ability to run both synchronous and background terminal processes. For example, it can generate and run install commands to set up a project as well as a background process to run the project.

### Errors

If a tool call errors or a user message is unsuccessful, flow action and User Prompt credits will not be consumed. For example, if Cascade attempts to write to a file but that file has unsaved changes, the tool call will fail and it will not consume a credit.

### Viewing your usage

There are a few ways to view your usage.

Go to the Cascade usage directly by clicking on the overflow menu, and then selecting "Cascade Usage".

<Frame>
  <img style={{ maxHeight: "300px" }} src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/usage-entry-cascade.png" />
</Frame>

View the settings panel by clicking on "Windsurf Settings" on the status bar, followed by selecting the "Plan Info" tab.

You can also view it on your plan page at [codeium.com/plan](https://codeium.com/plan) after you're authenticated.

### Upgrading to a paid plan

To learn more about paid features or to upgrade to a paid plan, [click here](https://codeium.com/plan). Paid plans include Pro and Pro Ultimate options for individuals as well as for teams.

We accept all major credit cards, Apple Pay, Cash App Pay, Google Pay, Link, WeChat Pay, and Alipay. If you have a payment method not listed, please reach out to us at [support](https://codeium.com/support). You may need to disable your VPN to view the relevant payment methods for your region.

### What happens when you run out of premium Flow Action credits but not premium User Prompt credits?

If you no longer have premium Flow Action credits, you have three options:

* You can purchase premium Flex credits to continue using Write and Chat mode with premium model tool calls (the premium Flex credits will be used as if premium Flow Action credits)

* You can use Legacy mode to continue to use your premium User Prompt credits without any additional premium Flow Action credits (i.e. premium model usage but no tool calls)

* You can use Write or Chat mode with the Cascade Base model. Note that no premium User Prompt credits will be used when on Cascade Base model

### What happens when you run out of premium User Prompt credits but not premium Flow Action credits?

If you no longer have premium User Prompt credits, you have two options:

* You can purchase premium Flex credits to continue using Write and Chat mode (the Flex credits will be used as if premium User Prompt credits)

* You can use Write or Chat mode with the Cascade Base model for prompts. In this case, perhaps unexpectedly, no premium Flow Action credits will be used either! This is because, at a technical quality level, it actually does not make sense to use premium models for tools if the original user prompt is not handled by a premium model, so we will automatically prevent you from burning premium Flow Action credits. Another way of putting it is that there is no way to spend premium Flow Action credits without using a premium User Prompt credit, which is one of the reasons why we give significantly more premium Flow Action credits than premium User Prompt credits at every tier.

### Purchasing additional Flex credits

If you run out of User Prompt or Flow Action credits, you can purchase Flex credits in the [billing website](https://codeium.com/plan). Flex credits are a credit that can be used as both User Prompt and Flow Action credits. For example, if you run out of tool calls but still have remaining User Prompt credits, your Flex credits will be consumed as Flow Action credits. If you run out of both User Prompt and Flow Action credits, Flex credits will be consumed as both. For example, if you are out of both User Prompt credits and Flow Action credits, send a message to Cascade with a premium model, and it performs tool calls as part of the response, you would consume 5 Flex credits, the equivalent of 1 User Prompt and 4 Flow Action credits.

For Team plans, Flex credits are purchased within and treated as a pool amongst all members of the team. Please contact your Teams admin to purchase more Flex credits to increase your amount of Flex credits. For more on the cost of Flex credits, visit our [pricing page](https://codeium.com/pricing).

## Usage examples

To explain how credits work, here are a few examples.

In this first example below, the user has both User Prompt and Flow Action credits available. In the scenario illustrated, 1 User Prompt credit was consumed and 4 Flow Action credits were consumed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/credit-example-healthy.png" />
</Frame>

In this second example below, the user has User Prompt credits but no Flow Action credits available. They purchased additional Flex credits that can be used as a backup to Flow Action credits. In the scenario illustrated, 1 user action credit was consumed and 4 Flex credits were consumed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/credit-example-empty-flow.png" />
</Frame>

In this third example below, the user has no user prompt but has Flow Action credits available. They purchased additional Flex credits that can also be used as a backup to User Prompt credits. In the scenario illustrated, 1 Flex credit was consumed and 4 Flex credits were consumed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/credit-example-empty-prompt.png" />
</Frame>

In this final example below, the user has no user prompt or Flow Action credits available but they've purchased Flex credits. Since Flex credits can be used for both User Prompt and Flow Action credits, they both count as Flex credits. In the scenario illustrated, 5 Flex credits were consumed.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/plan-info/credit-example-only-flex.png" />
</Frame>

## Plan Usage

### Using a Free Trial

The Free Trial comes with:

* 50 User Prompt credits

* 200 Flow Action credits

When you're on a Free Trial, you'll be given user prompts and flow actions credits for free! To get started, ask Cascade a question. In Write and Chat mode, Cascade is optimized to fully understand your codebase and leverages tool calls to assist you. By default, all of your requests will use premium models until you run out of credits.

If you end up low on credits, you'll be warned ahead of time so that you can upgrade and have access to more credits. Upon upgrading, your credits will reset to the monthly quota of the respective paid plan.

If you run out of credits, you'll still be able to use our Cascade Base Model in Write or Chat mode while in the Free Trial. If you didn't upgrade in the 2-week Free Trial, you'll be downgraded to our Free plan.

### Using Pro Plan

The Pro plan comes with:

* 500 User Prompt credits

* 1500 Flow Action credits

While on Pro, you'll have access to a monthly quota of User Prompt and Flow Action credits. Cascade usage will consume credits. You can view how many credits you have remaining in the Windsurf Settings panel that's accessible in the status bar.

If you're running low on credits, Cascade will notify you so that you can purchase additional Flex credits. To purchase additional Flex credits, visit the billing website and select “Purchase flex credits”. The Flex credits purchased will rollover to the following usage month if there are any remaining.

If you want to reduce your usage of Flow Action credits, you have two options:

* Use Legacy mode with a premium model. This will still consume User Prompt credits but will not consume any Flow Action credits. Legacy Chat does not use any tools.

* Use Cascade Base model in Write or Chat mode. Using Cascade Base model does not consume any user prompt or Flow Action credits.

If you want to reduce your consumption of User Prompt credits, select Cascade Base model in the model selection dropdown. Using Cascade Base model does not consume any user prompt or Flow Action credits.

In addition to increased Cascade credits, Pro comes with unlimited Fast Autocomplete and unlimited premium model requests with Command.

If you'd like to have access to unlimited prompt credits, more flow actions and better Flex credit pricing, you can upgrade to the Pro Ultimate plan. Upon upgrading to Pro Ultimate, your billing cycle will reset, you'll be refunded a pro-rated amount of your payment for Pro and your monthly quota will also reset. Any Flex credits will transfer over.

### Using Pro Ultimate Plan

The Pro Ultimate plan comes with:

* Infinite User Prompt credits

* 3000 Flow Action credits

While on Pro Ultimate, you'll have access to a monthly quota of Flow Action credits and an **unlimited number of User Prompt credits**. Tool calls within Cascade will consume your Flow Action credits. You can view how many credits you have remaining in the Windsurf Settings panel that's accessible in the status bar.

If you're running low on Flow Action credits, Cascade will notify you so that you can purchase additional Flex credits. To purchase additional Flex credits, visit the billing website and select “Purchase flex credits”. The Flex credits purchased will rollover to the following usage month if there are any remaining.

If you want to reduce your usage of Flow Action credits, you have two options:

* Use Legacy Chat mode with a premium model. On Pro Ultimate, you have unlimited prompt credits so Legacy Chat usage does not consume any credits.
* Use Cascade Base model in Write or Chat mode. Using Cascade Base model also does not consume any credits.

In addition to increased Cascade credits, Pro Ultimate comes with unlimited Fast Autocomplete and unlimited premium model requests with Command.

If you'd like to downgrade to Pro, visit the billing website. Upon downgrading, you'll remain in Pro Ultimate until the end of your billing cycle. At the end of your billing cycle, your plan will change to Pro. Any Flex credits will transfer over.

### Using a Free plan

The Free plan comes with:

* 5 User Prompt credits

* 5 Flow Action credits

Windsurf can still be used for free! While in Cascade, you'll be given limited number of User Prompt and Flow Action credits and have access to our Cascade Base model in read mode to ask questions. When editing code, you'll have access to unlimited autocomplete suggestions and AI command instructions. To learn more about features in Free and in paid tiers, [click here](https://codeium.com/pricing).

### Canceling your paid plan

To cancel your paid plan, visit the billing website. Upon canceling your paid plan, you'll still have access to all of your credits from your monthly quota and Flex credits until the end of the usage month. After the usage month, all Flex credits will be expired and you'll be downgraded to the Free plan where you'll be provided a limited number of User Prompt and tool action credits. If you change your mind and decide not to cancel before the end of the usage month, you can renew your plan by visiting the billing page.


# Web Search
Source: https://docs.windsurf.com/windsurf/web-search



Cascade can now intuitively parse through and chunk up web pages and documentation, providing realtime context to the models. The key way to understand this feature is that Cascade will browse the Internet as a human would. What this means is that it will ask itself the following questions:

1. Do I need to use the Internet to help you with your query? (ie. time-based question, live docs, user pasted URL, etc.)
2. Which page(s) do I need to visit to get the right information and in what priority order?
3. What parts of the page do I need to read in order to get the right information in the fastest, most efficient way possible?

Our web tools are designed in such a way that gets only the information that is necessary in order to efficiently use your credits.

<Warning>
  This feature can potentially use credits quickly because each URL is at least
  1 credit. You can toggle this feature on and off in the Windsurf Settings in
  the bottom right of the editor.
</Warning>

## Overview

To help you better understand how Web Search works, we've recorded a short video describing the best practices for reducing Flow Action credits.

<iframe width="560" height="315" src="https://www.youtube.com/embed/moIySJ4d0UY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />

### Quick Start

The fastest way to get started is to activate web search in your Windsurf Settings in the bottom right corner of the editor. You can activate it a couple of different ways:

1. Ask a question that probably needs the Internet (ie. "What's new in the latest version of React?").
2. Use `@web` to force a docs search.
3. Use `@docs` to query over a list of docs that we are confident we can read with high quality.
4. Paste a URL into your message.

## Search the web

Cascade can deduce that certain prompts from the user may require a real-time web search to provide the optimal response. In these cases, Cascade will perform a web search and provide the results to the user. This can happen automatically or manually using the `@web` mention.

It will construct the query for you using AI and then perform a web search. This costs 1 Flow Action credit.

<Frame style={{ border: "none", background: "none" }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-search-web.png" />
</Frame>

## Reading Pages

Cascade can read individual pages for things like documentation, blog posts, and GitHub files. The page reads happen entirely on your device within your network so if you're using a VPN you shouldn't have any problems.

Pages are picked up either from web search results, inferred based on the conversation, or from URLs pasted directly into your message.

We break pages up into multiple chunks to efficiently use your Flow Action credits. It's very similar to how a human would read a page: for a long page we skim to the section we want then read the text that's relevant. This is how Cascade operates as well.

<Frame style={{ border: "none", background: "none" }}>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/codeium/assets/windsurf/cascade/cascade-parse-url.png" />
</Frame>

It's worth noting that not all pages can be parsed. We are actively working on improving the quality of our website reading. If you have specific sites you'd like us to handle better, feel free to file a feature request!

## Credit Usage with Web tools

Web Search uses 1 credit per search. It does not open up the search results, simply returns up to 5 links to consider reading.

Web URL reads use at least 1 credit each. If a page is long, we will break it up into chunks and present an outline to Cascade. If a section is deemed relevant, we will read that section. We try to merge chunks together as much as possible to reduce credit usage. For example, if there are 3 short neighboring chunks, we'll merge them together so that you only use one credit to read the chunks.

For a detailed explanation of credit usage, see [our video explanation](https://youtu.be/moIySJ4d0UY).


