# Get Automatic Recommendations
Source: https://docs.glood.ai/api-reference/endpoint/automatic-recommendations

POST /api/storefront/v3/headless/recommendations/automatic
Get automatic recommendations powered using LLMs



# Get Headless Recommendations using Query
Source: https://docs.glood.ai/api-reference/endpoint/headless-recommendations

POST /api/storefront/v3/headless/recommendations
Get AI recommendations including Manual, Rules, LLM & AI using Query



# Introduction
Source: https://docs.glood.ai/api-reference/introduction

API Reference for Glood.AI Recommendations

## Welcome

Welcome to the Glood.AI API documentation. Our API allows you to integrate personalized product recommendations and bundles directly into your Shopify store.

<Card title="Recommendations API" icon="sparkles" href="/api-reference/endpoint/automatic-recommendations">
  Get started with our Recommendations API
</Card>

## Authentication

All API endpoints require authentication using your Shopify store URL passed in the `x-shop` header:


# Personalized Recommendations
Source: https://docs.glood.ai/features/ai-personalized-recommendations

Drive more sales with intelligent product recommendations tailored to each shopper

Transform your Shopify store into a personalized shopping experience with Glood.AI's intelligent recommendation engine. Our AI technology analyzes customer behavior in real-time to deliver highly relevant product suggestions that boost engagement and sales.

## Key Benefits

### Increased Conversion Rates

* Convert up to 3x more browsers into buyers with personalized recommendations
* Show the right products to the right customers at the right time
* Reduce bounce rates by keeping shoppers engaged with relevant suggestions

### Higher Average Order Value

* Boost AOV by 20-30% through intelligent cross-selling
* Surface complementary products that make sense for each customer
* Encourage larger cart sizes with "Complete the Look" recommendations

### Enhanced Customer Experience

* Create a personalized shopping journey for every visitor
* Help customers discover products they'll love
* Build loyalty through relevant product discovery

## Powerful Features

### Smart Product Discovery

* Real-time behavioral analysis
* Purchase history-based recommendations
* Similar product suggestions
* "Frequently Bought Together" bundles
* Category affinity detection

### Flexible Placement Options

* Homepage personalized sections
* Product detail page recommendations
* Cart page suggestions
* Collection page recommendations
* Custom placement anywhere in your store

### Advanced Customization

* Fully customizable widget design
* Mobile-optimized layouts
* A/B testing capabilities
* Product filtering rules
* Custom recommendation algorithms

## Easy Setup & Management

Getting started with Glood.AI recommendations takes minutes:

1. Install the Glood.AI app from the Shopify App Store
2. Enable the app embed in your theme settings
3. Create your first recommendation section using our visual editor
4. Watch your conversion rates improve

No coding required - our visual editor makes it easy to add and customize recommendation sections throughout your store.

## Proven ROI

Glood.AI customers typically see:

* 15-30% increase in revenue
* 2-3x higher conversion rates
* 20-30% larger average order values
* ROI of 10-20x on app investment

<Note>
  Our AI engine continuously learns and optimizes recommendations based on your store's unique data, delivering better results over time.
</Note>

## Start Personalizing Today

Join thousands of successful Shopify merchants using Glood.AI to deliver personalized shopping experiences. Our free plan lets you try all features risk-free.

Ready to boost your sales with AI-powered recommendations? [Install Glood.AI](https://apps.shopify.com/recommendation-kit) today and see the difference personalization can make for your store.


# AI Search & Merchandising
Source: https://docs.glood.ai/features/ai-search-merchandising

Optimize your store search and product placement with AI-powered merchandising

Transform your store's search experience with Glood.AI's intelligent search and merchandising capabilities. Our AI technology helps shoppers find exactly what they're looking for while strategically promoting your most profitable products.

## Key Benefits

### Improved Search Relevance

* Deliver more accurate search results using AI-powered semantic understanding
* Handle misspellings and variations automatically
* Support natural language queries for better results
* Boost conversion rates with relevant product suggestions

### Smart Merchandising

* Automatically promote high-margin products
* Surface trending and popular items
* Customize product rankings based on your business goals
* Balance inventory levels through strategic placement

### Enhanced Shopping Experience

* Reduce search abandonment with instant results
* Help customers discover relevant products faster
* Provide personalized search suggestions
* Support faceted navigation and filtering

## Powerful Features

### Intelligent Search

* Natural language processing
* Typo tolerance
* Synonym matching
* Search analytics and insights
* Multi-language support

### Advanced Merchandising Rules

* Custom ranking strategies
* Automated product boosting
* Category-specific rules
* Seasonal promotions
* Inventory-aware placement

### Visual Search

* Image-based product search
* Similar product recommendations
* Style matching
* Visual filters

## Easy Setup

Getting started with Glood.AI search takes minutes:

1. Install the Glood.AI app from the Shopify App Store
2. Enable search functionality in your settings
3. Configure your merchandising rules
4. Watch your search conversion rates improve

No coding required - our visual interface makes it easy to optimize your store's search and merchandising.

<Note>
  For advanced customization options and API access, check out our [Developer Guide](/for-developers/introduction).
</Note>


# AI Upsell Bundles
Source: https://docs.glood.ai/features/ai-upsell-bundles

Boost sales with intelligent product bundles and upsell recommendations

Transform your Shopify store's upselling strategy with Glood.AI's intelligent bundle recommendations. Our AI technology analyzes purchase patterns and product relationships to create compelling bundle offers that increase average order value and conversion rates.

## Key Benefits

### Increased Average Order Value

* Boost AOV by 25-35% through strategic bundle offers
* Create compelling multi-product discounts
* Encourage larger purchases with personalized bundle suggestions
* Optimize pricing strategies for maximum revenue

### Higher Conversion Rates

* Convert more browsers into buyers with targeted bundle offers
* Show the most relevant product combinations
* Reduce decision fatigue with curated bundles
* Build trust through intelligent recommendations

### Automated Bundle Creation

* Let AI identify the best product combinations
* Save time with automated bundle suggestions
* Update bundles based on real-time data
* Maintain optimal inventory balance

## Powerful Features

### Smart Bundle Generation

* AI-powered product matching
* Purchase pattern analysis
* Complementary product detection
* Price optimization algorithms
* Inventory-aware recommendations

### Flexible Display Options

* Product page bundle offers
* Cart page upsells
* Collection page bundles
* Custom placement anywhere
* Mobile-optimized layouts

### Advanced Customization

* Fully customizable bundle displays
* Dynamic pricing rules
* Bundle exclusion controls
* A/B testing capabilities
* Seasonal promotion support

## Easy Setup & Management

Getting started with Glood.AI bundles is simple:

1. Install the Glood.AI app from the Shopify App Store
2. Enable bundle recommendations in your settings
3. Configure your bundle rules and displays
4. Watch your average order value grow

No coding required - our visual interface makes it easy to create and manage product bundles throughout your store.

<Note>
  For advanced customization options and API access, check out our [Developer Guide](/for-developers/introduction).
</Note>


# Images and Embeds
Source: https://docs.glood.ai/features/checkout-upsell

Add image, video, and other HTML elements

<img style={{ borderRadius: '0.5rem' }} src="https://mintlify-assets.b-cdn.net/bigbend.jpg" />

## Image

### Using Markdown

The [markdown syntax](https://www.markdownguide.org/basic-syntax/#images) lets you add images using the following code

```md
![title](/path/image.jpg)
```

Note that the image file size must be less than 5MB. Otherwise, we recommend hosting on a service like [Cloudinary](https://cloudinary.com/) or [S3](https://aws.amazon.com/s3/). You can then use that URL and embed.

### Using Embeds

To get more customizability with images, you can also use [embeds](/writing-content/embed) to add images

```html
<img height="200" src="/path/image.jpg" />
```

## Embeds and HTML elements

<iframe width="560" height="315" src="https://www.youtube.com/embed/4KzFe50RQkQ" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen style={{ width: '100%', borderRadius: '0.5rem' }} />

<br />

<Tip>
  Mintlify supports [HTML tags in Markdown](https://www.markdownguide.org/basic-syntax/#html). This is helpful if you prefer HTML tags to Markdown syntax, and lets you create documentation with infinite flexibility.
</Tip>

### iFrames

Loads another HTML page within the document. Most commonly used for embedding videos.

```html
<iframe src="https://www.youtube.com/embed/4KzFe50RQkQ"> </iframe>
```


# Navigation
Source: https://docs.glood.ai/features/discounts

The navigation field in mint.json defines the pages that go in the navigation menu

The navigation menu is the list of links on every website.

You will likely update `mint.json` every time you add a new page. Pages do not show up automatically.

## Navigation syntax

Our navigation syntax is recursive which means you can make nested navigation groups. You don't need to include `.mdx` in page names.

<CodeGroup>
  ```json Regular Navigation
  "navigation": [
      {
          "group": "Getting Started",
          "pages": ["quickstart"]
      }
  ]
  ```

  ```json Nested Navigation
  "navigation": [
      {
          "group": "Getting Started",
          "pages": [
              "quickstart",
              {
                  "group": "Nested Reference Pages",
                  "pages": ["nested-reference-page"]
              }
          ]
      }
  ]
  ```
</CodeGroup>

## Folders

Simply put your MDX files in folders and update the paths in `mint.json`.

For example, to have a page at `https://yoursite.com/your-folder/your-page` you would make a folder called `your-folder` containing an MDX file called `your-page.mdx`.

<Warning>
  You cannot use `api` for the name of a folder unless you nest it inside another folder. Mintlify uses Next.js which reserves the top-level `api` folder for internal server calls. A folder name such as `api-reference` would be accepted.
</Warning>

```json Navigation With Folder
"navigation": [
    {
        "group": "Group Name",
        "pages": ["your-folder/your-page"]
    }
]
```

## Hidden Pages

MDX files not included in `mint.json` will not show up in the sidebar but are accessible through the search bar and by linking directly to them.


# Default Template CSS
Source: https://docs.glood.ai/for-developers/default-code/css-liquid

Default Template CSS code reference

The main Template CSS file for styling recommendation sections.

```liquid
{% comment %} for grid layout {% endcomment %}
{% assign section_id = section.id %}
{% assign settings = template.settings %}
{% assign layout_settings = settings[section.layout] %}
{% assign product_card_settings = settings.product_card %}

[data-gai-section-id="{{ section_id }}"] ._gai-grid { 
  grid-template-columns: repeat({{- settings.breakpoints.small.cards_per_view -}},1fr); 
  gap: {{ settings.breakpoints.small.gutter |  default: 10 }}px; 
}

[data-gai-section-id="{{ section_id }}"] ._gai-prod-prc { 
  color: {{ product_card_settings.price_color }};
  font-size: {{ settings.breakpoints.small.price_font_size }}px; 
}

[data-gai-section-id="{{ section_id }}"] ._gai-sec-tit { 
  display: -webkit-box; 
  -webkit-box-orient: vertical; overflow: hidden;
  -webkit-line-clamp: {{ settings.breakpoints.small.max_section_title_rows }};
  font-size: {{ settings.breakpoints.small.widget_title_font_size }}px; 
  text-align: {{ settings.breakpoints.small.widget_title_alignment }};
} 

[data-gai-section-id="{{ section_id }}"] ._gai-prod-vndr {
  font-size: {{ settings.breakpoints.small.product_vendor_font_size }}px; 
}

[data-gai-section-id="{{ section_id }}"] ._gai-prod-tit { 
  color: {{ product_card_settings.title_color }};
  display: -webkit-box; 
  -webkit-box-orient: vertical; 
  font-weight: bold; 
  overflow: hidden; 
  font-family: {{ product_card_settings.product_title_font_family }};
  -webkit-line-clamp: {{ settings.breakpoints.small.max_product_title_rows }}; 
  text-align: {{ settings.breakpoints.small.product_title_alignment }}; 
  font-size: {{ settings.breakpoints.small.product_title_font_size }}px; 
}

[data-gai-section-id="{{ section_id }}"] ._gai-prod-prc--compare-at { 
  color: {{ product_card_settings.price_color_compare }};
  {% if settings.breakpoints.small.compare_price_visible or section.layout == "amazon_bought_together"  %}
    display: block;
  {% else %}
    display: none;
  {% endif %}
}

[data-gai-section-id="{{ section_id }}"] ._gai-dis-txt { 
  color: {{ product_card_settings.discount_color }}; 
  font-size: {{ settings.breakpoints.small.section_subtitle_font_size }}px;
}

[data-gai-section-id="{{ section_id }}"] ._gai-prod-vndr--above-title {
  {% if product_card_settings.vendor_position == 'above' %}
    display: block;
  {% else %}
    display: none;
  {% endif %}
}

[data-gai-section-id="{{ section_id }}"] ._gai-prod-vndr--below-title {
  {% if product_card_settings.vendor_position == 'below' %}
    display: block;
  {% else %}
    display: none;
  {% endif %}
}

{% assign aspect_ratio_parts = product_card_settings.image_aspect_ratio | split: ':' %}

[data-gai-section-id="{{ section_id }}"] ._gai-prod-img {
  aspect-ratio: {{ aspect_ratio_parts[0] }}/{{ aspect_ratio_parts[1] }}; 
  object-fit: {{ product_card_settings.image_object_fit }}; 
}

[data-gai-section-id="{{ section_id }}"] _gai-prod-img-wrap {
  aspect-ratio: {{ aspect_ratio_parts[0] }}/{{ aspect_ratio_parts[1] }};
}

[data-gai-section-id="{{ section_id }}"] ._gai-dis-cnt {
  {% if section.layout == 'amazon_bought_together' %}
    justify-content: start;
  {% else %}
    justify-content: {{ settings.breakpoints.small.justify_widget_subtitle }};
  {% endif %}
  background-color: {{ product_card_settings.discount_background }}; 
  {% if product_card_settings.discount_visible == true %}
    display: flex;
  {% else %}
    display: none;
  {% endif %}
}

[data-gai-section-id="{{ section_id }}"] ._gai-atc-btn { 
  background-color: {{ product_card_settings.add_to_cart_background | default: '#797068' }}; 
  color: {{ product_card_settings.add_to_cart_color | default: '#ffffff' }}; border: none; 
  border-radius:{{ product_card_settings.add_to_cart_border_radius | default: 0 }}px;
}

[data-gai-section-id="{{ section_id }}"] ._gai-atc-btn:disabled { 
  background-color: {{ product_card_settings.disabled_add_to_cart_background | default: '#ada7a1' }};
}

[data-gai-section-id="{{ section_id }}"]{ 
  font-family: {{ settings.font_family }}; 
}

[data-gai-section-id="{{ section_id }}"] ._gai-prod-card { 
  background-color: {{ product_card_settings.background_color | default: 'transparent' }};
  {% if product_card_settings.font_family != blank %}
    font-family: {{ product_card_settings.font_family }};
  {% endif %}
}

._gai-container[data-gai-section-id="{{ section_id }}"] {
  {% if settings.section.background_color %}
    background-color: {{ settings.section.background_color }};
  {% endif %}
}

[data-gai-section-id="{{ section_id }}"] {
  ._gai-oos {
    background-color: {{ template.settings.out_of_stock.background_color |  default: '#000' }};
    color: {{ template.settings.out_of_stock.text_color |  default: '#fff' }};
  }

  ._gai-bestseller {
    background-color: {{ template.settings.labels.bestseller.background_color |  default: '#222222' }};
    color: {{ template.settings.labels.bestseller.text_color |  default: '#fff' }};
  }

  ._gai-new {
    background-color: {{ template.settings.labels.new.background_color |  default: '#333' }};
    color: {{ template.settings.labels.new.text_color |  default: '#fff' }};
  }

  ._gai-trending{
    background-color: {{ template.settings.labels.trending.background_color |  default: '#444' }};
    color: {{ template.settings.labels.trending.text_color |  default: '#fff' }};
  }

  ._gai-bndl-sec {
    justify-content: {{ template.settings.amazon_bought_together.justify |  default: 'start' }};
  }
}

[data-gai-section-id="{{ section_id }}"] ._gai-dis{
  background-color: {{ product_card_settings.discount_label_background  }};
  opacity: 0.85;
  color: {{ product_card_settings.discount_label_color }};
}

@media (min-width: {{ settings.breakpoints.medium.screen_size |  default: 768 }}px) { 
  [data-gai-section-id="{{ section_id }}"] ._gai-grid { 
    grid-template-columns: repeat({{- settings.breakpoints.medium.cards_per_view |  default: 3 -}},1fr); 
    gap: {{ settings.breakpoints.medium.gutter |  default: 20 }}px; 
  }

  {% assign n = products.length %}

  [data-gai-section-id="{{ section_id }}"] ._gai-bundle-products { 
    grid-template-columns: repeat({{ n }}, minmax(0, 1fr) 20px);
  } 

  [data-gai-section-id="{{ section_id }}"] ._gai-dis-cnt {
    {% if section.layout == 'amazon_bought_together' %}
      justify-content: center;
    {% else %}
      justify-content: {{ settings.breakpoints.medium.justify_widget_subtitle }};
    {% endif %}
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-prod-prc { 
    font-size: {{ settings.breakpoints.medium.price_font_size }}px; 
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-sec-tit { 
    -webkit-line-clamp: {{ settings.breakpoints.medium.max_section_title_rows }};
    font-size: {{ settings.breakpoints.medium.widget_title_font_size }}px; 
    text-align: {{ settings.breakpoints.medium.widget_title_alignment }};
  } 

  [data-gai-section-id="{{ section_id }}"] ._gai-prod-vndr {
    font-size: {{ settings.breakpoints.medium.product_vendor_font_size }}px; 
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-prod-tit { 
    -webkit-line-clamp: {{ settings.breakpoints.medium.max_product_title_rows }}; 
    text-align: {{ settings.breakpoints.medium.product_title_alignment }}; 
    font-size: {{ settings.breakpoints.medium.product_title_font_size }}px; 
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-prod-prc--compare-at { 
    {% if section.layout == "amazon_bought_together" or settings.breakpoints.medium.compare_price_visible == true  %}
      display: block
      {% else %}
      display: block;
    {% endif %}
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-dis-txt { 
    color: {{ product_card_settings.discount_color }}; 
    font-size: {{ settings.breakpoints.medium.section_subtitle_font_size }}px;
  }
} 

@media (min-width: {{ settings.breakpoints.large.screen_size |  default: 1024 }}px) { 
  [data-gai-section-id="{{ section_id }}"] ._gai-grid { 
    grid-template-columns: repeat({{- settings.breakpoints.large.cards_per_view -}},1fr); 
    gap: {{ settings.breakpoints.large.gutter |  default: 20 }}px; 
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-prod-prc { 
    font-size: {{ settings.breakpoints.large.price_font_size }}px; 
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-sec-tit { 
    -webkit-line-clamp: {{ settings.breakpoints.large.max_section_title_rows }};
    font-size: {{ settings.breakpoints.large.widget_title_font_size }}px; 
    text-align: {{ settings.breakpoints.large.widget_title_alignment }};
  } 

  [data-gai-section-id="{{ section_id }}"] ._gai-prod-vndr {
    font-size: {{ settings.breakpoints.large.product_vendor_font_size }}px; 
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-prod-tit { 
    -webkit-line-clamp: {{ settings.breakpoints.large.max_product_title_rows }}; 
    text-align: {{ settings.breakpoints.large.product_title_alignment }}; 
    font-size: {{ settings.breakpoints.large.product_title_font_size }}px; 
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-prod-prc--compare-at { 
    {% if settings.breakpoints.large.compare_price_visible or section.layout == "amazon_bought_together"  %}
      display: block;
    {% else %}
      display: none;
    {% endif %}
  }

  [data-gai-section-id="{{ section_id }}"] ._gai-dis-txt { 
    color: {{ product_card_settings.discount_color }}; 
    font-size: {{ settings.breakpoints.large.section_subtitle_font_size }}px;
  }

  [data-gai-section-id="{{ section_id }}"] .gai-dis-cnt {
    {% if section.layout == 'amazon_bought_together' %}
      justify-content: center;
    {% else %}
      justify-content: {{ settings.breakpoints.small.justify_widget_subtitle }};
    {% endif %}
  }
}

._gai-amz-tit {
  text-align: center;
}

[data-gai-section-id="{{ section_id }}"] ._gai-prod-price-wrp{
  {% if template.settings.product_card.price_compare_at_mode == 'after'%}
    flex-direction: row-reverse;
    justify-content: start;
  {% endif %}
}

{% assign should_disable = product_card_settings.variant_selector_type == "swatch_with_atc" or product_card_settings.disable_add_to_cart_button %}

{% if section.layout != 'amazon_bought_together' and should_disable %}
  [data-gai-section-id="{{ section_id }}"] {
    ._gai-atc-btn {
      display: none !important;
    }
    ._gai-skl-atc {
      display: none !important;
    }
  }
{% endif %}
```


# Default Template Javascript
Source: https://docs.glood.ai/for-developers/default-code/section-js

Default Template Javascript code reference

This Template Javascript contains the essential JavaScript hooks required for the proper functioning of the V3 storefront. Each hook serves a specific purpose in the recommendation engine's lifecycle.

```js
// @ts-ignore
return {
  initSwiper: (
    Swiper,
    templateSettings,
    container,
    params,
    defaultSettings,
    utils
  ) => {
    const carouselContainer = container.querySelector('._gai-crz-cnt')
    if (!carouselContainer) {
      console.error(
        'GLOOD.AI:ERROR: Carousel container not found for section',
        params.recommendation.section.id
      )
      return
    }
    const settings = templateSettings?.carousel?.swiperConfig || {}
    const swiperConfig = utils.merge(defaultSettings, settings)
    const breakpoints = Object.values(templateSettings.breakpoints).reduce(
      (acc, curr) => ({
        ...acc,
        [curr.screenSize]: {
          slidesPerView: curr.cardsPerView,
          spaceBetween: curr.gutter,
        },
      }),
      {}
    )
    const swiper = new Swiper(
      carouselContainer,
      utils.merge(swiperConfig, {
        breakpoints,
      })
    )
    return swiper
  },
  onSectionInit: (args, cb, gloodUtils) => {
    const { recommendation, engine, initEnginePayload } = args
    cb({
      recommendation,
      engine,
      initEnginePayload,
    })
  },
  onSectionRenderComplete: (args, utils) => {},
  onVariantChange: (args, utils) => {},
  onSwatchChange: (args, utils) => {},
  validateCartOperation: async (payload, recommendation, utils, gloodUtils) => {
    return {
      payload,
      error: null,
      href: false,
    }
  },
  onCartOperationComplete: (args, utils, gloodUtils) => {},
  onProductDataReceived: (args, utils) => {},
  getProductDetailsQuery: (recommendation, glood) => {
    // use graphql variables to pass the country and language

    return `
          featuredImage{
              url
          }
          handle
          id
          title
          availableForSale
          priceRange {
            minVariantPrice {
              amount
              currencyCode
            }
          }
          compareAtPriceRange {
            minVariantPrice {
              amount
              currencyCode
            }
          }
          options(first: 10){
            name
            optionValues{
              name
              swatch{
                color
                image{
                  previewImage{
                    url
                  }
                }
              }
            }
          }
          variants(first:250){
              nodes{
                  compareAtPrice{
                      amount
                      currencyCode
                  }
                  id
                  image{
                      url
                  }
                  price{
                      amount
                      currencyCode
                  }
                  currentlyNotInStock
                  title
                  quantityAvailable
                  availableForSale
                  selectedOptions{
                    name
                    value
                  }
              }
              pageInfo{
                  endCursor
              }
          }
          images(first: 2){
              nodes{
                  url
              }
          }
          vendor
          variantsCount{
            count
          }
          tags
          availableForSale
      `
  },
  transformProductData: (product) => {
    return {
      featuredImage: product.featuredImage.url
        ? {
            src: product.featuredImage.url,
          }
        : null,
      handle: product.handle,
      id: parseInt(product.id.replace('gid://shopify/Product/', '')),
      title: product.title,
      vendor: product.vendor,
      images: product.images.nodes.map((image) => ({
        src: image.url,
      })),
      variants: product.variants.nodes.map((variant) => ({
        id: parseInt(variant.id.replace('gid://shopify/ProductVariant/', '')),
        compareAtPrice: variant.compareAtPrice?.amount || null,
        price: variant.price.amount,
        image: variant.image?.url
          ? {
              src: variant.image.url,
            }
          : null,
        currentlyNotInStock: variant.currentlyNotInStock,
        title: variant.title,
        quantityAvailable: variant.quantityAvailable,
        availableForSale: variant.availableForSale,
        selectedOptions: variant.selectedOptions,
      })),
      available: product.availableForSale,
      compareAtPrice: product.compareAtPriceRange.minVariantPrice.amount,
      price: product.priceRange.minVariantPrice.amount,
      variantsCount: product.variantsCount.count,
      tags: product.tags,
      availableForSale: product.availableForSale,
      options: product.options.map((option) => ({
        name: option.name,
        optionValues: option.optionValues.map(
          (optionValue) => optionValue.name
        ),
        swatches: option.optionValues.map(
          (optionValue) => optionValue.swatch
        )
      })),
    }
  },
  onAmazonProductSelect: (args)=>{

  }
}
```


# Default Template liquid
Source: https://docs.glood.ai/for-developers/default-code/section-liquid

Default Template liquid code reference

The main Template file for rendering recommendation sections.

```liquid
{%- assign translations = template.translations %}
{%- assign translations_discount_label_text = 'discount_label_text' | t: translations, '' -%}
{% assign root_url = glood.shopify.root_url %}

{% assign section_discount_str = section.discount_config.value | section_discount: section.discount_config.type, section.discount_config.widget_message, glood.localization.language.locale, glood.shop.money_format %}

{% capture quantity_selector %}
  {% if template.settings.product_card.show_quantity_selector %}
    <div class="_gai-qnt-cnt">
      <button
        class="_gai-qnt-btn"
        data-min="{{ template.settings.product_card.min_quantity |  default: 1 }}"
      >
        -
      </button>
      <input
        type="text"
        class="_gai-qnt-inp"
        id="quantity"
        value="{{ template.settings.product_card.min_quantity |  default: 1 }}"
        readonly
      >
      <button
        class="_gai-qnt-btn"
        data-max="{{ template.settings.product_card.max_quantity |  default: 10 }}"
      >
        +
      </button>
    </div>
  {% endif %}
{% endcapture %}

{% capture spinner_loader %}
  <svg width="14" height="14" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
    <circle cx="100" cy="100" r="90" stroke="white" stroke-width="10" fill="none" stroke-linecap="round" stroke-dasharray="400" stroke-dashoffset="0">
      <animateTransform attributeType="XML" attributeName="transform" type="rotate" from="0 100 100" to="360 100 100" dur="1s" repeatCount="indefinite" />
    </circle>
  </svg>
{% endcapture %}

<section
  data-show-skeleton="{{ show_skeleton }}"
  data-gai-section-id="{{ section.id }}"
  class="_gai-container"
  data-layout="{{ section.layout }}"
>
  {% if section.layout != 'amazon_bought_together' %}
    <div class="_gai-sec-head {% if section.layout != 'amazon_bought_together' or show_skeleton == true %} _gai-amz-skl-b-mobile {% endif %}">
      <h3 class="_gai-sec-tit">{{ section.title }}</h3>
      {% if section_discount_str.length > 0 %}
        <div class="_gai-dis-cnt">
          <span class="_gai-dis-txt">{{ section_discount_str }}</span>
        </div>
      {% endif %}
    </div>
  {% endif %}
  {% if section.layout != 'amazon_bought_together' %}
    <div
      {% if section.layout == 'carousel'%}
        class="_gai-crz-cnt swiper"
      {% endif %}
    >
      <div 
      {% if section.layout != 'carousel'%}
        class="_gai-grid"
      {% else %}
        class="swiper-wrapper gai-crz-wrap"
      {% endif %}
      >
        {% for product in products %}
          {% assign product_url = root_url | product_url: product.handle, glood.product.id, section.layout %}
          {% assign first_available_variant = -1 %}
          {% assign available_variants_count = 0 %}
          {% for variant in product.variants %}
            {% if variant.available_for_sale %}
              {% if available_variants_count == 0 %}
                {% assign first_available_variant = variant %}
              {% endif %}
              {% assign available_variants_count = available_variants_count | plus: 1 %}
            {% endif %}
          {% endfor %}

          {% if first_available_variant == -1 %}
            {% assign first_available_variant = product.variants[0] %}
          {% endif %}

          {% assign multiple_variants = available_variants_count > 1 %}

          {% capture swatch_component %} 
            {%  assign should_enable_swatch = template.settings.product_card.variant_selector_type == 'swatch' or template.settings.product_card.variant_selector_type == 'swatch_with_atc' %}
            {% if should_enable_swatch and product.variants.size > 1 %}
              {% assign options = product.options %}
              <div class="_gai-swtch-wrp" data-atc-enabled="{{ template.settings.product_card.variant_selector_type == "swatch_with_atc" }}">
                {% for swatch in template.settings.swatches %}
                  {% assign allowed_names = swatch.option_names %}
                  {% assign found_option = false %}
                  {% for option in options %}
                    {% assign found = false %}
                    {% for name in allowed_names %}
                      {% if name == option.name %}
                        {% assign found_option = option %}
                        {% assign found = true %}
                        {% break %}
                      {% endif %}
                    {% endfor %}
                    {% if found %}
                      {% break %}
                    {% endif %}
                  {% endfor %}
                  {% if found_option != false %}
                    {% assign translation_key = "swatch_label_" |  append: found_option.name %}
                    <div class="_gai-swt-ch-opt">
                      <label>{{ translations[translation_key] |  default: found_option.name }}</label>
                      {% assign selected_option = first_available_variant.selected_options | find: 'name', found_option.name %}
                      <div class="_gai-swtch-opt">
                        {% for value in found_option.option_values %}
                          {% assign swatch_img_url = found_option.swatches[forloop.index0].image.preview_image.url %}
                          {% assign swatch_color = found_option.swatches[forloop.index0].color %}
                          {% if swatch_color == blank %}
                            {% assign swatch_color = value | color_value: template.settings.color_mapping  %}
                          {% endif %}
                          <span
                            class="_gai-swtch-btn {% if swatch.type == "image" %} _gai-swtch-img _gai-swtch-clr-btn {% elsif swatch.type != "color" %} _gai-swtch-sz-btn {% else %} _gai-swtch-clr-btn {% endif %}"
                            data-option-name="{{ found_option.name }}"
                            data-option-value="{{ value }}"
                            data-selected="{{ selected_option.value == value | to_boolean }}"
                            data-oos="{{ available_variants_count == 0 | to_boolean }}"
                            style="{% if swatch.type == "color" %} background: {{ swatch_color }} {% elsif swatch.type == "image" %} background-image: url('{{ swatch_img_url }}'); background-size: cover; background-position: center; {% endif %}"
                          >
                            {% if swatch.type == "size" %}{{ value }}{% endif %}
                          </span>
                        {% endfor %}
                      </div>
                    </div>
                  {% endif %}
                {% endfor %}
              </div>
            {% endif %}
          {% endcapture %}
          {% capture variant_selector %}
            {% assign size = available_variants_count %}
            {% if size > 1 %}
              <select
                {% if available_variants_count == 0 %}
                  disabled
                {% endif %}
                data-integrated-atc="{{ template.settings.product_card.variant_selector_type == "integrated" | to_boolean }}"
                class="_gai-var-slt"
              >
                {% for variant in product.variants %}
                  <option
                    {% if variant.id == first_available_variant.id %}
                      selected
                    {% endif %}
                    value="{{ variant.id }}"
                    data-original-price="{{ variant.compare_at_price }}"
                    data-selling-price="{{ variant.price }}"
                    {% if variant.available_for_sale == false %}
                      disabled
                    {% endif %}
                    data-image-url="{{ variant.image.src }}"
                  >
                    {{ variant.title }} ({{ variant.price | format_money: glood.shop.money_format }})
                  </option>
                {% endfor %}
              </select>
            {% endif %}
          {% endcapture %}
            <div
              class="_gai-grid-item _gai-prod-card swiper-slide"
              data-gai-product-card
              data-rk-product-id="{{ product.id }}"
              data-selling-price="{{ first_available_variant.price }}"
              data-original-price="{{ first_available_variant.compare_at_price }}"
              data-oos="{{ available_variants_count == 0 }}"
            >
              <script class="_gai-variant-array" type="application/json">
                {{ product.variants | json }}
              </script>
              <div class="_gai-lbls-grp">
                {% if available_variants_count == 0 %}
                  <span class="_gai-pill _gai-oos">{{ translations.oos_text | default: 'Out Of Stock' }}</span>
                {% endif %}
                {% assign labels_cnt = 0 %}
                {% for label in template.settings.labels %}
                  {% if labels_cnt < template.settings.max_labels_count and product.tags contains label.name %}
                    <span class="_gai-pill _gai-{{ label.name }}">
                      {{- translations[label.name] | default: label.name -}}
                    </span>
                    {% assign labels_cnt = labels_cnt | plus: 1 %}
                  {% endif %}
                {% endfor %}
                {% assign product_discount = product | product_discount: section.discount_config, translations.discount_label_text, glood.shop.money_format %}
                {% if product_discount.length > 0 and template.settings.product_card.show_discount_pill %}
                  <span class="_gai-pill _gai-dis">{{ product_discount }}</span>
                {% endif %}
              </div>
              <div class="_gai-frame">
                <a
                  class="_gai-prod-img-wrap"
                  href="{{ product_url }}"
                  data-image-hover="{{ template.settings.product_card.image_hover_mode }}"
                >
                  <img
                    class="_gai-prod-img _gai-primary-prod-img"
                    {% if multiple_variants %}
                      {% assign image_src = first_available_variant.image.src | default: product.featured_image.src %}
                    {% else %}
                      {% assign image_src = product.featured_image.src %}
                    {% endif %}
                    srcset="{{ image_src | imgsrcset: template.settings.breakpoints }}"
                    src="{{ image_src }}"
                    alt="{{ product.title }}"
                    sizes="{{ template.settings.breakpoints | imgsize }}"
                  >
                  {% if product.images[1].src %}
                    <img
                      class="_gai-prod-img _gai-primary-prod-img _gai-sec-img"
                      srcset="{{ product.images[1].src | imgsrcset: template.settings.breakpoints }}"
                      src="{{ product.images[1].src }}"
                      alt="{{ product.title }}"
                      sizes="{{ template.settings.breakpoints | imgsize }}"
                    >
                  {% endif %}
                  <div class="_gai-atc-tt" data-visible="false">
                    {{ translations.added_to_cart_text | default: 'Added to cart' }}
                  </div>
                  <div class="_gai-atc-tt _gai-atc-err-tt" data-visible="false">
                    {{ translations.atc_error_text | default: 'Error while add to cart' }}
                  </div>
                </a>
                {% if template.settings.product_card.add_to_cart_mode == 'image_hover' %}
                  <div
                    onclick="event.stopPropagation();"
                    class="_gai-var-slt-wrp"
                    data-atc-mode="{{ template.settings.product_card.add_to_cart_mode }}"
                  >
                    {% if template.settings.product_card.variant_selector_type == 'integrated' %}
                      {{ variant_selector }}
                    {% endif %}

                    <button
                      data-variant-id="{{ first_available_variant.id }}"
                      data-product-id="{{ product.id }}"
                      data-quantity="1"
                      class="_gai-atc-btn"
                      data-gai-atc-error="false"
                      {% if available_variants_count == 0 %}
                        disabled
                      {% endif %}
                    >
                      <span class="_gai-atc-text">
                        {% if available_variants_count == 0 %}
                          {{ translations.oos_text | default: 'Out of stock' }}
                        {% else %}
                          {{ translations.atc_text | default: 'Add to Cart' }}
                        {% endif %}
                      </span>
                      <span class="_gai-atc-error-text">
                        {{ translations.atc_error_text | default: 'Error in adding to cart' }}
                      </span>
                      <span class="_gai-atc-spn">
                        {{ spinner_loader }}
                      </span>
                    </button>
                  </div>
                {% endif %}
              </div>
              <div class="_gai-prod-dtls">
                <div class="_gai-full-width ">
                  {% if template.settings.product_card.vendor_position == 'above' %}
                    <div class="_gai-prod-vndr">{{ product.vendor }}</div>
                  {% endif %}
                  <a class="_gai-prod-tit" href="{{ product_url }}">
                    {{ product.title }}
                  </a>
                  <div class="_gai-skl _gai-skl-text _gai-shimr-eff _gai-skl-tit"></div>
                  {% if template.settings.product_card.vendor_position == 'below' %}
                    <div class="_gai-prod-vndr">{{ product.vendor }}</div>
                  {% endif %}
                  <div class="_gai-prod-price-wrp" data-compare-price="{{ product.show_compare_price }}">
                    {% assign compare_at_price = first_available_variant.compare_at_price | times: 1.0 %}
                    {% if template.settings.product_card.price_compare_at_mode != 'none' and compare_at_price > 0 %}
                      <span
                        class="_gai-prod-prc _gai-prod-prc--compare-at"
                      >
                        {{ first_available_variant.compare_at_price | format_money: glood.shop.money_format }}
                      </span>
                    {% endif %}
                    <span
                      class="_gai-prod-prc _gai-prod-prc--selling"
                    >
                      <span data-product-price="{{ product.first_variant.price }}" class="money">
                        {{ first_available_variant.price | format_money: glood.shop.money_format }}
                      </span>
                    </span>
                    <div class="_gai-skl _gai-skl-text _gai-shimr-eff _gai-skl-prc" style="width:50%; margin-top:10px;"></div>
                  </div>
                  {% assign save_text = product | save_amount: section.discount_config, translations.discount_save_text, glood.shop.money_format %}
                  {% if save_text.length > 0 %}
                    <div class="_gai-pd-save-t">{{ save_text }}</div>
                  {% endif %}
                </div>
                <div class="_gai-full-width _gai-vertical-spacing-10">
                  {{ swatch_component }}
                  {{ quantity_selector }}
                  {% if template.settings.product_card.variant_selector_type == 'selector' %}
                    {{ variant_selector }}
                  {% endif %}
                  {% if template.settings.product_card.add_to_cart_mode != 'image_hover' %}
                    <div
                      class="_gai-var-slt-wrp"
                      data-atc-mode="{{ template.settings.product_card.add_to_cart_mode }}"
                    >
                      {% if template.settings.product_card.variant_selector_type == 'integrated' %}
                        {{ variant_selector }}
                      {% endif %}
                      <div class="_gai-skl _gai-skl-text _gai-shimr-eff _gai-skl-atc"></div>
                      <button
                        data-variant-id="{{ first_available_variant.id }}"
                        data-product-id="{{ product.id }}"
                        data-quantity="{{ template.settings.product_card.min_quantity |  default: 1 }}"
                        class="_gai-atc-btn"
                        data-gai-atc-error="false"
                        {% if available_variants_count == 0 %}
                          disabled
                        {% endif %}
                      >
                        <span class="_gai-atc-text">
                          {% if available_variants_count == 0 %}
                            {{ translations.oos_text | default: 'Out of stock' }}
                          {% else %}
                            {{ translations.atc_text | default: 'Add to Cart' }}
                          {% endif %}
                        </span>
                        <span class="_gai-atc-error-text">
                          {{ translations.atc_error_text | default: 'Error in adding to cart' }}
                        </span>
                        <span class="_gai-atc-spn">
                          {{ spinner_loader }}
                        </span>
                      </button>
                    </div>
                  {% endif %}
                </div>
              </div>
            </div>
        {% endfor %}
      </div>
      {% if section.layout == 'carousel'%}
        <div class="_gai-crz-p-btn">
          <svg width="14" height="24" viewBox="0 0 14 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M11.4448 2.28298L1.75006 11.9777L11.4448 21.6724" stroke="black" stroke-opacity="0.47" stroke-width="3.2537" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        <div class="_gai-crz-n-btn">
          <svg width="14" height="24" viewBox="0 0 14 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M2.55518 2.28298L12.2499 11.9777L2.55518 21.6724" stroke="black" stroke-opacity="0.47" stroke-width="3.2537" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        <div class="_gai-crz-scrbr">
          <div class="_gai-crz-scrbr-drag" >
            <span style='opacity: 0;'>_ </span></div>
        </div>
        {% if template.settings.carousel.show_pagination %}
          <div class="_gai-crz-pag"></div>
        {% endif %}
      {% endif %}
    </div>
  {% else %}
    <div class="_gai-amz-tit-wrap-mob">
      <h3 class="_gai-sec-tit">
        {{ section.title }}
      </h3>
      {% if section_discount_str.length > 0 %}
        <div class="_gai-dis-cnt">
          <span class="_gai-dis-txt">{{ section_discount_str }}</span>
        </div>
      {% endif %}
    </div>
    <div>
      <div class="_gai-bndl-sec">
        <div class="_gai-bundle-products">
          {% for product in products %}
            {% assign first_available_variant = -1 %}
            {% assign available_variants_count = 0 %}
            {% for variant in product.variants %}
              {% if variant.available_for_sale %}
                {% if available_variants_count == 0 %}
                  {% assign first_available_variant = variant %}
                {% endif %}
                {% assign available_variants_count = available_variants_count | plus: 1 %}
              {% endif %}
            {% endfor %}

            {% if first_available_variant == -1 %}
              {% assign first_available_variant = product.variants[0] %}
            {% endif %}

            {% assign multiple_variants = available_variants_count > 1 %}

            {% assign product_url = root_url | product_url: product.handle, glood.product.id, section.layout %}
            <div
              class="_gai-prod-card"
              data-rk-product-id="{{ product.id }}"
              data-gai-variant-id="{{ first_available_variant.id }}"
              data-gai-quantity="1"
              data-gai-product-card
              data-selling-price="{{ first_available_variant.price }}"
              data-original-price="{{ first_available_variant.compare_at_price }}"
              data-oos="{{ available_variants_count == 0 }}"
              data-parent-product="{{ product.id == glood.product.id }}"
            >
              <script class="_gai-variant-array" type="application/json">
                {{ product.variants | json }}
              </script>
              <div class="_gai-lbls-grp">
                {% if available_variants_count == 0 %}
                  <span class="_gai-pill _gai-oos">{{ translations.oos_text | default: 'Out Of Stock' }}</span>
                {% endif %}
                {% assign labels_cnt = 0 %}
                {% for label in template.settings.labels %}
                  {% if labels_cnt < template.settings.max_labels_count and product.tags contains label.name %}
                    <span class="_gai-pill _gai-{{ label.name }}">
                      {{- translations[label.name] | default: label.name -}}
                    </span>
                    {% assign labels_cnt = labels_cnt | plus: 1 %}
                  {% endif %}
                {% endfor %}
                {% assign product_discount = product | product_discount: section.discount_config, translations.discount_label_text, glood.shop.money_format %}
              </div>
              <span
                class="_gai-amz-selector"
                data-gai-product-id="{{ product.id }}"
                data-selected="{{ available_variants_count > 0 }}"
                {% if available_variants_count == 0 %}
                  disabled
                {% endif %}
              >
                <span class="_gai-amz-tick">✔️</span>
              </span>
              <a
                class="_gai-prod-img-wrap"
                href="{{ product_url }}"
                data-image-hover="{{ template.settings.product_card.image_hover_mode }}"
              >
                <img
                  class="_gai-prod-img _gai-primary-prod-img"
                  {% if multiple_variants %}
                    {% assign image_src = first_available_variant.image.src | default: product.featured_image.src %}
                  {% else %}
                    {% assign image_src = product.featured_image.src %}
                  {% endif %}
                    srcset="{{ image_src | imgsrcset: template.settings.breakpoints }}"
                    src="{{ image_src }}"
                    sizes="{{ template.settings.breakpoints | imgsize }}"
                >
                {% if product.images[1].src %}
                  <img
                    class="_gai-prod-img _gai-primary-prod-img _gai-sec-img"
                    srcset="{{ product.images[1].src | imgsrcset: template.settings.breakpoints  }}"
                    src="{{ product.images[1].src }}"
                    alt="{{ product.title }}"
                    sizes="{{ template.settings.breakpoints | imgsize }}"
                  >
                {% endif %}
              </a>
              <div class="_gai-prod-dtls">
                <div class="_gai-full-width">
                  {% if template.settings.product_card.vendor_position == 'above' %}
                    <div class="_gai-prod-vndr">{{ product.vendor }}</div>
                  {% endif %}
                  <a class="_gai-prod-tit" href="{{ product_url }}">
                    {{ product.title }}
                  </a>
                  <div class="_gai-skl _gai-skl-text _gai-shimr-eff _gai-skl-tit"></div>
                  {% if template.settings.product_card.vendor_position == 'below' %}
                    <div class="_gai-prod-vndr">{{ product.vendor }}</div>
                  {% endif %}
                  {% assign save_text = product | save_amount: section.discount_config, translations.fbt_save_text, glood.shop.money_format %}
                  {% if save_text.length > 0 %}
                    <div class="_gai-pd-save-t">{{ save_text }}</div>
                  {% endif %}
                  <div class="_gai-prod-price-wrp" data-compare-price="{{ product.show_compare_price }}">
                    {% assign compare_at_price = first_available_variant.compare_at_price | times: 1.0 %}
                    {% if template.settings.product_card.price_compare_at_mode != 'none' and compare_at_price > 0 %}
                      <span
                        class="_gai-prod-prc _gai-prod-prc--compare-at"
                      >
                          {{ first_available_variant.compare_at_price | format_money: glood.shop.money_format }}
                      </span>
                    {% endif %}
                    <span
                      class="_gai-prod-prc _gai-prod-prc--selling"
                    >
                      <span data-product-price="{{ product.first_variant.price }}" class="money">
                        {{ first_available_variant.price | format_money: glood.shop.money_format }}
                      </span>
                    </span>
                    <div class="_gai-skl _gai-skl-text _gai-shimr-eff _gai-skl-prc" style="width:50%; margin-top:10px;"></div>
                  </div>
                </div>
                <div class="_gai-var-slt-wrp" data-atc-mode="fix">
                  {% assign options = product.options %}
                  {% assign should_enable_swatch = template.settings.product_card.variant_selector_type == 'swatch' or template.settings.product_card.variant_selector_type == 'swatch_with_atc' %} 
                  {% if should_enable_swatch and product.variants.size > 1 %}
                    {% assign options = product.options %}
                    <div class="_gai-swtch-wrp" data-atc-enabled="{{ template.settings.product_card.variant_selector_type == "swatch_with_atc" }}">
                      {% for swatch in template.settings.swatches %}
                        {% assign allowed_names = swatch.option_names %}
                        {% assign found_option = false %}
                        {% for option in options %}
                          {% assign found = false %}
                          {% for name in allowed_names %}
                            {% if name == option.name %}
                              {% assign found_option = option %}
                              {% assign found = true %}
                              {% break %}
                            {% endif %}
                          {% endfor %}
                          {% if found %}
                            {% break %}
                          {% endif %}
                        {% endfor %}
                        {% if found_option != false %}
                          {% assign translation_key = 'swatch_label_' | append: found_option.name %}
                          <div class="_gai-swt-ch-opt">
                            <label>{{ translations[translation_key] |  default: found_option.name }}</label>
                            {% assign selected_option = first_available_variant.selected_options | find: 'name', found_option.name %}
                            <div class="_gai-swtch-opt">
                              {% for value in found_option.option_values %}
                                {% assign swatch_img_url = found_option.swatches[forloop.index0].image.preview_image.url %}
                                {% assign swatch_color = found_option.swatches[forloop.index0].color %}
                                {% if swatch_color == blank %}
                                  {% assign swatch_color = value | color_value: template.settings.color_mapping  %}
                                {% endif %}
                                <span
                                  class="_gai-swtch-btn {% if swatch.type == "image" %} _gai-swtch-img _gai-swtch-clr-btn {% elsif swatch.type != "color" %} _gai-swtch-sz-btn {% else %} _gai-swtch-clr-btn {% endif %}"
                                  data-option-name="{{ found_option.name }}"
                                  data-option-value="{{ value }}"
                                  data-selected="{{ selected_option.value == value | to_boolean }}"
                                  data-oos="{{ available_variants_count == 0 | to_boolean }}"
                                  style="{% if swatch.type == "color" %} background: {{ swatch_color }} {% elsif swatch.type == "image" %} background-image: url('{{ swatch_img_url }}'); background-size: cover; background-position: center; {% endif %}"
                                >
                                  {% if swatch.type == "size" %}{{ value }}{% endif %}
                                </span>
                              {% endfor %}
                            </div>
                          </div>
                        {% endif %}
                      {% endfor %}
                    </div>
                  {% elsif available_variants_count > 1 %}
                    <select
                      {% if available_variants_count == 0 %}
                        disabled
                      {% endif %}
                      data-integrated-atc="false"
                      class="_gai-var-slt"
                      data-multiple-variants="{{ multiple_variants }}"
                    >
                      {% if multiple_variants %}
                        {% for variant in product.variants %}
                          <option
                            {% if variant.id == first_available_variant.id %}
                              selected
                            {% endif %}
                            value="{{ variant.id }}"
                            data-original-price="{{ variant.compare_at_price }}"
                            data-selling-price="{{ variant.price }}"
                            {% if variant.available_for_sale == false %}
                              disabled
                            {% endif %}
                            data-image-url="{{ variant.image.src }}"
                          >
                            {{ variant.title }} ({{ variant.price | format_money: glood.shop.money_format }})
                          </option>
                        {% endfor %}
                      {% endif %}
                    </select>
                  {% endif %}
                </div>
              </div>
            </div>
            {% if forloop.index != products.length %}
              <span class="_gai-amz-img-separator"></span>
            {% endif %}
          {% endfor %}
        </div>
        <div class="_gai-amz-details">
          <div class="_gai-amz-tit-wrap">
            <h3 class="_gai-sec-tit _gai-amz-tit">
              {{ section.title }}
            </h3>
            {% if section_discount_str.length > 0 %}
              <div class="_gai-dis-cnt" data-visible="{{ template.settings[section.layout].show_discount_label }}">
                <span class="_gai-dis-txt">{{ section_discount_str }}</span>
              </div>
            {% endif %}
          </div>
          <div class="_gai-amz-prc">
            <div class="_gai-amz-price">
              {% if translations.total_price_text.length > 0 %}
                <div>
                  {{ translations.total_price_text }}
                </div>
              {% endif %}
              <div class="_gai-amz-prc-wrp" data-price-order="{{ template.settings.amazon_bought_together.price_compare_at_mode }}">
                <div
                  class="_gai-bndl-cmp-prc-value _gai-prod-prc _gai-prod-prc--compare-at"
                  data-visible="true"
                ></div>
                <div
                  class="_gai-bndl-prc-value _gai-prod-prc"
                ></div>
              </div>
            </div>
            <span
              class="_gai-fbt-save-t _gai-amz-disc-desk"
              data-visible="false"
            ></span>
          </div>
          <div class="_gai-amz-prc _gai-skl" style="width: 100%;">
            <div class="_gai-skl-text _gai-shimr-eff" style="width: 75%;"></div>
          </div>
          <div class="_gai-skl-text _gai-shimr-eff _gai-skl" style="height: 40px;"></div>
          <button class="_gai-atc-btn" data-gai-atc-error="false" data-gai-atc-success="false">
            <span class="_gai-atc-text">
              {{ translations.fbt_add_to_cart_text | default: 'Add to Cart' }}
            </span>
            <span class="_gai-atc-error-text">
              {{ translations.atc_error_text | default: 'Error in adding to cart' }}
            </span>
            <span class="_gai-atc-success-text">
              {{ translations.fbt_added_to_cart_text | default: 'Added to cart' }}
            </span>
            <span class="_gai-atc-spn">
              {{ spinner_loader }}
            </span>
          </button>
        </div>
      </div>
    </div>
  {% endif %}
</section>
```


# Default Template Settings
Source: https://docs.glood.ai/for-developers/default-code/settings-json

Default Template Settings configuration reference

The main Settings configuration file for recommendation sections.

```json
{
  "breakpoints": {
    "small": {
      "gutter": 10,
      "cardsPerView": 2,
      "widgetTitleAlignment": "left",
      "productTitleAlignment": "left",
      "comparePriceVisible": false,
      "imageWidth": 600,
      "imageHeight": 600,
      "justifyWidgetSubtitle": "left"
    },
    "medium": {
      "gutter": 20,
      "cardsPerView": 3,
      "widgetTitleAlignment": "center",
      "productTitleAlign": "center",
      "comparePriceVisible": true,
      "imageWidth": 600,
      "imageHeight": 600,
      "justifyWidgetSubtitle": "center"
    },
    "large": {
      "gutter": 20,
      "cardsPerView": 4,
      "widgetTitleAlignment": "center",
      "productTitleAlign": "center",
      "comparePriceVisible": true,
      "imageWidth": 600,
      "imageHeight": 600,
      "justifyWidgetSubtitle": "center"
    }
  },
  "labels": [
    {
      "name": "new",
      "textColor": "#ffffff",
      "backgroundColor": "#333333"
    },
    {
      "name": "trending",
      "textColor": "#ffffff",
      "backgroundColor": "#444444"
    },
    {
      "name": "bestseller",
      "textColor": "#ffffff",
      "backgroundColor": "#222222"
    }
  ],
  "maxLabelsCount": 2,
  "outOfStock": {
    "textColor": "#ffffff",
    "backgroundColor": "#000"
  },
  "carousel": {
    "library": "swiper",
    "showPagination": true
  },
  "productCard": {
    "color": "#222",
    "priceColor": "#222",
    "titleColor": "#222",
    "discountColor": "#000",
    "vendorPosition": "hidden",
    "addToCartMode": "card_hover",
    "backgroundColor": "transparent",
    "discountVisible": true,
    "imageHoverMode": "secondary",
    "imageObjectFit": "contain",
    "addToCartColor": "#fff",
    "imageAspectRatio": "1:1",
    "showDiscountPill": true,
    "discountBackground": "transparent",
    "priceColorCompare": "#aaa",
    "discountLabelColor": "#ffffff",
    "priceColorOriginal": "#5C5C5C",
    "priceCompareAtMode": "before",
    "addToCartBackground": "#000",
    "showQuantitySelector": false,
    "discountLabelVisible": true,
    "discountLabelPosition": "center",
    "discountLabelBackground": "#ff0000",
    "redirectAfterAddToCart": true,
    "variantSelectorType": "integrated",
    "comparePriceVisibilityMobile": "before",
    "disabledAddToCartBackground": "#00000070",
    "disableAddToCartButton": false
  },
  "colorMapping": {},
  "horizontalGrid": {},
  "amazonBoughtTogether": {
    "priceCompareAtMode": "before",
    "buttonBackgroundColor": "#000"
  },
  "swatches": [
    {
      "type": "color",
      "key": "color",
      "optionNames": [
        "Color",
        "Colour",
        "color",
        "colour"
      ]
    },
    {
      "type": "size",
      "key": "size",
      "optionNames": [
        "Size",
        "sizes"
      ]
    }
  ]
}
```


# Default Translations
Source: https://docs.glood.ai/for-developers/default-code/translations

Default translations object reference

# Default Translations

The main translations object for recommendation sections.

```json
{
    "primary_locale": {
        "oos_text": "Out of stock",
        "bestseller_text": "Bestseller", 
        "new_text": "New",
        "trending_text": "Trending",
        "discount_text": "Get Flat Discount of {percentage}",
        "discount_label_text": "Save {amount}",
        "added_to_cart_text": "Added to cart",
        "atc_text": "Add to cart",
        "atc_error_text": "Error adding to cart",
        "discount_save_text": "Save {amount}",
        "fbt_add_to_cart_text": "Add to cart",
        "fbt_added_to_cart_text": "Added to cart",
        "fbt_save_text": "Save {percent}",
        "total_price_text": "Total Price"
    }
}
```

This translations object contains all the default text strings used throughout the recommendation sections. The strings can include placeholders (like `{amount}` or `{percentage}`) which will be replaced with actual values when rendered.


# How to access additional metafields in V3 Template
Source: https://docs.glood.ai/for-developers/how-to-guides/access-additional-metafields

Learn how to access and use additional metafields in your V3 Template implementation

## Overview

In V3 Template, products are fetched using GraphQL. While default product data is automatically included, accessing additional metafields requires three steps:

1. Adding metafields to the `getProductDetailsQuery` function
2. Including metafields in the `transformProductData` function
3. Accessing the metafields in your template's theme.liquid

## Basic Implementation

### Step 1: Modify getProductDetailsQuery

Add your metafields to the GraphQL query in the `getProductDetailsQuery` function:

```javascript
getProductDetailsQuery: (recommendation, glood) => {
  return `
    featuredImage {
      url
    }
    handle
    id
    title
    # Add your metafields here
    metafield(namespace: "custom", key: "product_info") {
      value
    }
    # Rest of your existing query
    variants(first: 250) {
      nodes {
        id
        # ... other variant fields
      }
    }
  `
}
```

### Step 2: Update transformProductData

Modify the `transformProductData` function to include your metafields:

```javascript
transformProductData: (product) => {
  return {
    featuredImage: product.featuredImage.url
      ? {
          src: product.featuredImage.url,
        }
      : null,
    handle: product.handle,
    id: parseInt(product.id.replace('gid://shopify/Product/', '')),
    title: product.title,
    // Add your metafield transformation
    metafield_value: product.metafield ? product.metafield.value : "N/A",
    // Rest of your existing transformations
    variants: product.variants.nodes.map((variant) => ({
      // ... variant transformations
    }))
  }
}
```

### Step 3: Access in Theme

Use the transformed metafield in your theme.liquid:

```liquid
{% raw %}
<div class="_gai-prod-dtls">
  <div class="_gai-full-width">
    <a class="_gai-prod-tit" href="{{ product_url }}">
      {{ product.title }}
    </a>
    {% if product.metafield and product.metafield.value %}
      <p>Extra Info: {{ product.metafield.value }}</p>
    {% else %}
      <p>Information unavailable.</p>
    {% endif %}
  </div>
</div>
{% endraw %}
```

## Practical Example: Product Ratings with Judge.me

### Prerequisites

1. Install Judge.me app on your Shopify store:
   * Go to Shopify App Store and install Judge.me
   * Enable the app integration in your store settings

2. Enable Judge.me in Glood:
   * Navigate to Glood Product Recommendations
   * Go to Settings >> Integrations >> Product Review Apps
   * Enable the Judge.me app integration

After completing the setup, the rating metafields will be available in your GraphQL queries. You can query these metafields using the reviews namespace wherever needed.

To display product ratings in your template, simply use the Judge.me liquid tag:

```liquid
{% raw %}
{% product_ratings product_id: product.id %}
{% endraw %}
```

## Related Resources

* [Section Template Introduction](/for-developers/section-template/introduction)
* [Template Tags](/for-developers/section-template/tags)
* [Template Hooks](/for-developers/section-template/hooks)


# Add Checkout Upsell on Checkout Screen
Source: https://docs.glood.ai/for-developers/how-to-guides/add-checkout-upsell



Checkout upsells display personalized product recommendations at strategic points in the checkout flow. These recommendations can significantly increase average order value by suggesting products that complement items already in the customer's cart.

## Implementation Steps

#### 1. Open the "Glood Product Recommendations" app in your Glood.AI admin

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-01.png" alt="Open Glood Product Recommendations app" />

#### 2. Click on the "Checkout Upsell" section from the app menu.

→ This will open the "Checkout & Post Purchase Upsell" dashboard screen (as shown in the image), where you can manage and create upsell campaigns.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-02.png" alt="Checkout & Post Purchase Upsell dashboard" />

#### 3. Click on the "New Campaign" button at the top right corner to start creating a new upsell campaign.

→ Once you click, the Create Campaign screen will open, where you can enter your campaign details and configure the upsell settings.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-03.png" alt="Create Campaign screen" />

#### 4. After clicking on "New Campaign", the Create Campaign screen will open (as shown in the image).

→ On this screen, you'll need to fill in the following details to set up your Checkout Upsell campaign:

* **Name**: Add a name for your campaign to easily identify it.
* **Time Duration**: Set the start and end date for when the campaign should be active.
* **Status**: Keep this set to Active if you want the upsell campaign to show on the checkout screen.
* **Trigger**: Choose whether this campaign should be shown to all customers or conditionally based on certain rules.
* **Checkout Upsell Products**: Click on the + Add button to select the product(s) that will be promoted as upsell items during checkout.
* **Save**: Click on Save button

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-04.png" alt="Configure Campaign settings" />

#### 5. Once these steps are completed, the Checkout Upsell will automatically appear on your checkout screen for customers.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-05.png" alt="Checkout Upsell on checkout screen" />

## Troubleshooting

### Unable to See the Checkout Upsell?

If you've set up your campaign but don't see the upsell appearing on your checkout screen, you'll need to add the Checkout app section in your Shopify store.

Follow these steps to configure the Checkout Upsell on desktop devices:

1. From your Shopify admin, navigate to **Settings > Checkout**
2. In the Configurations section, find and click **Customize** next to your desired configuration
3. In the checkout editor, select the page where you want the upsell to appear
4. Click **Sections** to open the sidebar
5. Click **⊕ Add app block** in your chosen section
6. Select the Glood.AI upsell app block
7. Customize the app block settings:
   * Drag and drop to reposition
   * Click the block to adjust available settings
8. Click **Save** to apply your changes

### Additional Resources

For more detailed information about configuring app blocks across devices, refer to [Add app blocks from installed apps](https://help.shopify.com/en/manual/checkout-settings/customize-checkout-configurations/checkout-apps#add-app).

## Additional Configuration Settings

### Checkout Upsell Configuration

#### Upsell Products

The Upsell Products section provides two main functionalities:

1. **Checkout Editor Integration**
   * Access the Shopify Checkout Visual Editor to position the upsell block
   * Drag and drop the "Glood: Checkout Upsell" section to your desired location
   * Customize the block's appearance and layout within the checkout flow
   * Preview how the upsell will appear to customers

2. **Product Selection and Management**
   * Add products to be shown as recommendations on the checkout screen
   * Add products manually or use AI generated product

#### Manual 1:1 Recommendations

Configure specific product pairs to be shown together during checkout:

* Enable "Override Recommendations with Manual Recommendations when available"
* Select a trigger product that when added to cart will show specific recommendations
* Choose the recommended product(s) to be displayed when that trigger product is in the chekout-screen

#### Excluded Products

Configure which products should not appear in checkout upsell recommendations:

* Exclude individual products by selecting them from your product catalog
* Exclude groups of products by specifying product tags (e.g. exclude all products tagged as "subscription")
* Set up exclusion rules using product attributes like price range, vendor, or collection
* Excluded products will never appear as recommendations, even if they match other recommendation criteria

#### Placement and Layout

Click the "Open Checkout Editor" button to configure the placement and layout of the checkout upsell section:

* Access Shopify's checkout editor to position the upsell block
* Drag and drop the "Glood: Checkout Upsell" section to your desired location
* Customize appearance settings like fonts, colors and spacing
* Preview how the upsell will appear across different devices

## Support

If you need help with setting up or customizing checkout upsells, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Add Checkout Upsell on Post Checkout Screen
Source: https://docs.glood.ai/for-developers/how-to-guides/add-checkout-upsell-post-checkout



Post checkout upsells display personalized product recommendations immediately after purchase completion. These recommendations can significantly increase average order value by suggesting products that complement items the customer has just purchased.

## Implementation Steps

#### 1. Open the "Glood Product Recommendations" app in your Glood.AI admin

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-01.png" alt="Open Glood Product Recommendations app" />

#### 2. Click on the "Checkout Upsell" section from the app menu.

→ This will open the "Checkout & Post Purchase Upsell" dashboard screen (as shown in the image), where you can manage and create upsell campaigns.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-02.png" alt="Checkout & Post Purchase Upsell dashboard" />

#### 3. Click on the "New Campaign" button at the top right corner to start creating a new upsell campaign.

→ Once you click, the Create Campaign screen will open, where you can enter your campaign details and configure the upsell settings.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-03.png" alt="Create Campaign screen" />

#### 4. After clicking on "New Campaign", the Create Campaign screen will open (as shown in the image).

→ On this screen, you'll need to fill in the following details to set up your Post Checkout Upsell campaign:

* **Name**: Add a name for your campaign to easily identify it.
* **Time Duration**: Set the start and end date for when the campaign should be active.
* **Status**: Keep this set to Active if you want the upsell campaign to show on the post checkout screen.
* **Trigger**: Choose whether this campaign should be shown to all customers or conditionally based on certain rules.
* **Post Checkout Upsell Products**: Click on the + Add button to select the product(s) that will be promoted as upsell items after checkout.
* **Save**: Click on Save button

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-04.png" alt="Configure Campaign settings" />

#### 5. Ensure Post Checkout Upsell is Enabled

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-06.png" alt="Enable Post Purchase Upsell" />

* After filling in all the campaign details, make sure the Post Purchase Upsell section is enabled.
* Enable the toggle inside the Post Purchase Upsell section (as shown in the image).

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-07.png" alt="Post Checkout Upsell on post-checkout screen" />

* Once enabled, click the Save button.

#### 6. This will ensure that the selected upsell product(s) are shown on the post-checkout screen, right after the customer completes their order.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/checkout-upsell-08.png" alt="Post Checkout Upsell on post-checkout screen" />

## Troubleshooting

### Unable to See the Checkout Upsell?

If your checkout upsell still isn't showing, verify that your post-purchase configuration is set correctly:

* From your Shopify admin, go to **Settings > Checkout**
* Scroll down to the **Post-purchase page** section
* Under Add tracking scripts and other customizations, ensure **Glood Product Recommendations** app is selected/configured to run post-purchase experiences
* If nothing is selected, choose the **Glood Product Recommendations** app to handle Post Checkout Upsell
* Once configured, this will ensure that your upsell campaigns display on the post-checkout screen.

## Additional Configuration Settings

#### Post Purchase Upsell Configuration

Control whether post-purchase upsells appear after checkout completion:

* Enable or disable post-purchase upsells using the "Control Post Purchase Upsell" toggle
* When enabled, recommended products will be shown to customers on the order confirmation page
* When disabled, no additional product recommendations will appear after purchase completion

#### Excluded Products

Configure which products should not appear in checkout upsell recommendations:

* Exclude individual products by selecting them from your product catalog
* Exclude groups of products by specifying product tags (e.g. exclude all products tagged as "subscription")
* Set up exclusion rules using product attributes like price range, vendor, or collection
* Excluded products will never appear as recommendations, even if they match other recommendation criteria

## Support

If you need help with setting up or customizing post checkout upsells, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Add Sections to Mini Cart
Source: https://docs.glood.ai/for-developers/how-to-guides/add-sections-to-mini-cart

This guide walks you through the process of adding Glood.AI product recommendations to your store's mini cart (also known as AJAX cart).

## Overview

AJAX cart recommendations appear when customers view their cart in a slide-out drawer or popup. These recommendations update dynamically as customers add or remove items from their cart.

## Implementation Steps

### 1. Create AJAX Section

First, create a new section in your Glood.AI dashboard:

1. Go to **Sections** in your Glood.AI admin
2. Click **Create New Section**
3. Select **AJAX Cart** as the page type
4. Configure your desired recommendation strategy
5. Save the section

### 2. Place Section in Mini Cart

Add the section html (from section details page) to your theme's mini cart template:

### 3. Configure Load/Unload Hooks

To control when the AJAX cart recommendations load and unload, implement these hooks in your section template:

```js
// Load recommendations when mini cart opens
loadAjaxCart: (bodyElem) => {
    const ajaxCart = bodyElem.querySelector('cart-drawer');
    return ajaxCart.classList.contains("active");
},

// Unload recommendations when mini cart closes
unloadAjaxCart: (bodyElem) => {
    const ajaxCart = bodyElem.querySelector('cart-drawer');
    return !ajaxCart.classList.contains("active");
}
```

## Testing

To verify your implementation:

1. Add an item to your cart
2. Open the mini cart
3. Verify that recommendations appear
4. Close the mini cart
5. Verify that recommendations are removed
6. Test with different cart contents to ensure recommendations update

## Troubleshooting

Common issues and solutions:

* **Recommendations don't load**: Verify your section ID and ensure the mini cart element selector matches your theme
* **Recommendations don't update**: Check that loadAjaxCart and unloadAjaxCart hooks are properly configured
* **Performance issues**: Consider adjusting the number of recommended products shown

## Next Steps

* Customize the recommendation layout to match your theme
* Add tracking to measure recommendation performance
* Configure product filtering rules

For more details on hooks and configuration options, see the [Template Hooks](/for-developers/section-template/hooks) documentation.


# Enable Custom Events in V3 Template
Source: https://docs.glood.ai/for-developers/how-to-guides/enable-custom-events

Learn how to enable and configure custom events to control section visibility on your store

## Overview

Custom events provide a flexible way to control section behavior in your store. This guide demonstrates how to set up and use custom events to manage section rendering based on various scenarios and conditions.

Custom events enable you to:

* Control section visibility based on specific triggers
* Manage section rendering timing
* Implement custom loading behaviors
* Create dynamic user experiences

## Configuration

### Set Up Init Event Name

In your app-embed settings, locate the "Init Event Name" section inside the app-embed and in the input field write your desired event name (e.g., initialize\_app).

![Init Event Name Setting in App Embed](https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/init-event-name-setting.png)

This setting tells Glood AI which event to listen for before initializing the sections.

## Usage

### Basic Implementation

1. Set your desired event name in the "Init Event Name" field
2. By default, no sections will be visible on the store
3. Trigger the event to show sections

### Example

Here's a simple example of how to trigger the custom event. When this event is dispatched, Glood AI will initialize all sections that are configured to listen for this event:

```javascript
// This will trigger the sections to become visible
dispatchEvent(new CustomEvent("initialize_app"));
```

### Common Use Cases

1. **Scroll-Based Loading**
   ```javascript
   window.addEventListener('scroll', () => {
     if (isScrolledToBottom()) {
       dispatchEvent(new CustomEvent("initialize_app"));
     }
   });
   ```

2. **User Interaction Based**
   ```javascript
   document.querySelector('.load-recommendations').addEventListener('click', () => {
     dispatchEvent(new CustomEvent("initialize_app"));
   });
   ```

3. **Time-Based Loading**
   ```javascript
   setTimeout(() => {
     dispatchEvent(new CustomEvent("initialize_app"));
   }, 3000); // Show sections after 3 seconds
   ```

## Best Practices

1. **Event Naming**
   * Use clear, descriptive event names
   * Follow a consistent naming convention
   * Avoid generic names that might conflict with other events

2. **Performance**
   * Trigger events at appropriate times to optimize page load
   * Consider user experience when deciding when to show sections
   * Avoid triggering events too early or too late

3. **Error Handling**
   * Always check if the event was successfully dispatched
   * Provide fallback behavior if needed
   * Log events for debugging purposes

## Troubleshooting

If sections aren't appearing as expected:

1. Verify that V3 sections are enabled
2. Check that the event name matches exactly in both settings and code
3. Ensure the event is being dispatched correctly
4. Check browser console for any errors
5. Verify that the sections are properly configured

## Support

If you need help with setting up or customizing events, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Enable Labels on Store
Source: https://docs.glood.ai/for-developers/how-to-guides/enable-labels

Learn how to configure and enable product labels in your store

## Configuration

### Settings Configuration

Configure your labels in `settings.json`. Each label has a name, text color, and background color:

```json
"labels": [
  {
    "name": "new",
    "textColor": "#ffffff",
    "backgroundColor": "#333333"
  },
  {
    "name": "trending",
    "textColor": "#ffffff",
    "backgroundColor": "#444444"
  },
  {
    "name": "bestseller",
    "textColor": "#ffffff",
    "backgroundColor": "#222222"
  }
],
"maxLabelsCount": 2
```

### Template Implementation

Add this code to your `theme.liquid` to display labels on products. The code checks for matching tags and applies the configured styling:

```liquid
{% assign labels_cnt = 0 %}
{% for label in template.settings.labels %}
  {% if labels_cnt < template.settings.max_labels_count and product.tags contains label.name %}
    <span class="_gai-pill _gai-{{ label.name }}">
      {{- translations[label.name] | default: label.name -}}
    </span>
    {% assign labels_cnt = labels_cnt | plus: 1 %}
  {% endif %}
{% endfor %}
```

## How It Works

1. Add tags to your products (e.g., "new", "trending", "bestseller") - These tags should match the label names in your settings
2. Labels will automatically appear on products with matching tags - The system checks product tags against configured label names
3. Each product shows max 2 labels (configurable via `maxLabelsCount`) - Adjust this number in settings to show more or fewer labels
4. Labels use the colors defined in settings - Each label type has its own text and background colors
5. Supports translations through the `translations` object - Use translations to display labels in different languages

## Support

Need help with labels? Contact [support@glood.ai](mailto:support@glood.ai)


# Enable Swatch in V3 Template
Source: https://docs.glood.ai/for-developers/how-to-guides/enable-swatch-v3-template

Learn how to enable and configure swatch functionality in your v3 template

Swatches provide a visual way for customers to select product variants, especially useful for color and material options. This guide will show you how to enable and configure swatches in your v3 template.

## 1. Basic Configuration

To enable swatches in your template, you need to modify the `variantSelectorType` setting to "swatch". This will automatically convert your variant selectors to swatch format.

```json
{
  "variantSelectorType": "swatch"
}
```

## Color Mapping

When using swatches for colors, Glood first checks if the product color is a valid CSS color. If it's not valid, it looks up the color in the color mapping configuration.

### Why Use Color Mapping?

Color mapping is essential when your store uses custom color names that aren't valid CSS colors. For example, if your store uses color names like "limestone green" or "cityscape", you'll need to map these to valid CSS colors.

### Example Configuration

Here's how to set up color mapping:

```json
{
  "colorMapping": {
   "limestoneGreen": "#348221"
  }
}
```

### How Color Mapping Works

1. When a product variant has a color option, Glood first checks if it's a valid CSS color
2. If the color is valid (e.g., "red", "#FF0000", "rgb(255, 0, 0)"), it's used directly
3. If the color is not valid (e.g., "limestone green"), Glood looks up the corresponding value in the colorMapping
4. The mapped color is then used for the swatch display

## Troubleshooting

If swatches aren't displaying correctly:

1. Verify that `variantSelectorType` is set to "swatch"
2. Check that all custom color names are properly mapped
3. Ensure the color values in the mapping are valid CSS colors
4. Clear your store's cache to ensure changes take effect

## 2. Quick Add-to-Cart Swatches

For a more streamlined shopping experience, you can enable swatches that automatically add products to cart when clicked. This is particularly useful in recommendation sections or quick-shop scenarios.

### Configuration

To enable quick add-to-cart swatches, set the `variantSelectorType` to "swatch\_with\_atc":

```json
{
  "variantSelectorType": "swatch_with_atc"
}
```

### How It Works

1. When a customer clicks on a swatch, the system automatically:
   * Selects the corresponding variant
   * Adds the product to cart immediately

### Troubleshooting Quick Add-to-Cart Swatches

If the automatic add-to-cart isn't working:

1. Verify that `variantSelectorType` is set to "swatch\_with\_atc"
2. Ensure the variant is in stock
3. Check that the cart is properly initialized
4. Clear the store's cache after making configuration changes

## Support

If you need help with enabling or customizing swatches in your v3 template, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Set Default Variant in Variant Selector
Source: https://docs.glood.ai/for-developers/how-to-guides/how-to-set-default-variant

Learn how to configure the default variant selection in your product templates

## Setting Default Product Variant

You can control which variant is selected by default in your product templates by implementing the `getDefaultProductVariant` hook in your JavaScript template object.

### Implementation

Add the following hook to your JavaScript template object:

```javascript
const templateObject = {
  // ... existing template configuration
  getDefaultProductVariant: (product) => {
    // Returns the first variant's ID by default
    return product.variants[0].id;
  }
  // ... rest of template configuration
};
```

### Customization Examples

You can customize the logic inside `getDefaultProductVariant` to select different variants based on your requirements. Here are some practical examples:

```javascript
// Example 1: Return first in-stock variant ID
getDefaultProductVariant: (product) => {
  const inStockVariant = product.variants.find(
    variant => variant.availableForSale && variant.quantityAvailable > 0
  );
  return (inStockVariant || product.variants[0]).id;
}

// Example 2: Return lowest priced variant ID
getDefaultProductVariant: (product) => {
  const lowestPriceVariant = product.variants.reduce((lowest, variant) => {
    return (!lowest || variant.price < lowest.price) ? variant : lowest;
  }, null);
  return lowestPriceVariant.id;
}

// Example 3: Return variant ID with specific option
getDefaultProductVariant: (product) => {
  const variantWithSize = product.variants.find(variant => 
    variant.selectedOptions.some(option => 
      option.name === 'Size' && option.value === 'Medium'
    )
  );
  return (variantWithSize || product.variants[0]).id;
}
```

### Parameters

The hook receives the following parameter:

* `product` (Object): The full product object containing all product data including variants

### Return Value

The hook should return the variant ID (number) of the variant that you want to be selected by default when the product page loads.

<Note>
  If the `getDefaultProductVariant` function returns `null`, it will have no effect on the variant selection in the store. The default variant selection behavior will remain unchanged.
</Note>

## Complete Example

Here's a complete example showing how to implement the default variant selection:

```javascript
const productTemplate = {
  name: 'Product Template',
  getDefaultProductVariant: (product) => {
    // Find first available variant with quantity in stock
    const defaultVariant = product.variants.find(variant => 
      variant.availableForSale && 
      variant.quantityAvailable > 0 &&
      !variant.currentlyNotInStock
    );
    
    // Return the variant ID, falling back to first variant's ID if no available variants found
    return (defaultVariant || product.variants[0]).id;
  },
  // ... other template configuration
};
```

This implementation will return the ID of the first available variant with stock as the default variant when customers view your product pages.


# Introduction
Source: https://docs.glood.ai/for-developers/how-to-guides/introduction

Step-by-step guides for common Glood.AI implementation scenarios

# How-to Guides

Welcome to the Glood.AI how-to guides. These guides provide step-by-step instructions for implementing common use cases and features in your Glood.AI integration.

Each guide focuses on a specific implementation scenario and provides detailed, practical steps to achieve your desired outcome. Whether you're adding AJAX cart recommendations or handling special product displays, you'll find clear instructions here.

## Available Guides

* [AJAX Cart Implementation](/for-developers/how-to-guides/add-sections-to-mini-cart) - Learn how to add dynamic product recommendations to your store's mini cart

Choose a guide from the sidebar to get started with your implementation.


# Open Mini Cart on Add to Cart
Source: https://docs.glood.ai/for-developers/how-to-guides/open-mini-cart-on-add-to-cart

Learn how to enable the mini cart to automatically open when clicking the add to cart button

## Overview

This guide will show you how to configure your sections to automatically open the mini cart when a customer clicks the add to cart button. This feature provides immediate feedback to customers and makes it easier for them to review their cart contents.

## Implementation

### Add Functions to Hook

Add these functions to your template's JavaScript hooks:

```javascript
loadAjaxCart: (bodyElem) => {
    const ajaxCart = bodyElem.querySelector('#drawer-cart');
    return ajaxCart.classList.contains("drawer--visible");
  },

  // Unload recommendations when mini cart closes
  unloadAjaxCart: (bodyElem) => {
    const ajaxCart = bodyElem.querySelector('#drawer-cart');
    return !ajaxCart.classList.contains("drawer--visible");
  },
  onCartOperationComplete: (args, utils, gloodUtils) => {
    setTimeout(() => {
      document.dispatchEvent(new CustomEvent('theme:cart:init', { bubbles: true }));
      document.dispatchEvent(new CustomEvent('theme:cart:reload', {
        bubbles: true
      }));
       window.dispatchDrawerEvent('drawer-cart', 'open');
    }, 1000);
  }
```

### Theme-Specific Implementation

For this to work, you need to find and use the correct selectors and events from your theme's code:

1. Find the mini cart drawer element in your theme (usually has a class like `drawer-cart` or `mini-cart`)
2. Identify the correct class that indicates the cart is visible (often `drawer--visible` or similar)
3. Locate the theme's cart initialization and reload events
4. Find the correct drawer event dispatch method

## How It Works

1. The `loadAjaxCart` function checks if the mini cart is currently visible by looking for the `drawer--visible` class
2. The `unloadAjaxCart` function handles the opposite case, checking when the mini cart should be closed
3. When a cart operation completes, `onCartOperationComplete` is triggered:
   * It dispatches `theme:cart:init` event to initialize the cart
   * It dispatches `theme:cart:reload` event to refresh cart contents
   * It opens the mini cart drawer using `dispatchDrawerEvent`
   * A 1-second delay ensures smooth operation

## Support

If you need help with implementing this feature, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Integrations
Source: https://docs.glood.ai/for-developers/integrations/introduction

Learn about available integrations for Glood.AI recommendations

# Integrations

Glood.AI provides several integrations to enhance your product recommendations with additional functionality.

## Available Integrations

### Product Ratings

Add product ratings and reviews from Judge.me to your recommendation sections. This helps build trust and provides social proof for recommended products.

[Learn more about Product Ratings integration →](/for-developers/integrations/product-ratings)

### Quick View

Enable quick product previews directly from recommendation sections. This allows customers to view product details without leaving the current page.

[Learn more about Quick View integration →](/for-developers/integrations/quick-view)

### Wishlist

Add wishlist functionality to products in recommendation sections. This lets customers save products for later directly from recommendations.

[Learn more about Wishlist integration →](/for-developers/integrations/wishlist)

## Implementation Overview

Each integration can be enabled and configured through:

1. Dashboard settings in your Glood.AI admin
2. Template customization using provided tags and filters
3. Optional custom styling to match your theme

## Getting Started

Choose an integration from the sidebar to learn more about its specific implementation details and requirements.

For general template customization, see the [Section Template](/for-developers/section-template/introduction) documentation.


# Product Ratings Integration
Source: https://docs.glood.ai/for-developers/integrations/product-ratings

Learn how to integrate product ratings and reviews with Glood.AI recommendations

# Product Ratings Integration

This guide explains how to integrate Judge.me product ratings and reviews with Glood.AI recommendations.

## Overview

Product ratings integration allows you to display review stars and ratings from Judge.me within your Glood.AI recommendation sections.

## Supported Review Apps

Currently, we support:

* Judge.me

## Implementation Steps

### 1. Enable Product Reviews Integration

First, enable the product reviews integration in your Glood.AI dashboard:

1. Go to **Settings** in your Glood.AI admin
2. Navigate to the **Integrations** tab
3. Find **Judge.me** in the Product Reviews section
4. Click **Enable**

### 2. Add Review Tag to Template

Add the `product_ratings` tag to your section template where you want the reviews to appear:

```liquid
<div class="product-card">
  <img src="{{ product.featured_image | optimise_image: client_info, settings }}" alt="{{ product.title }}">
  <h3>{{ product.title }}</h3>
  <div class="price">{{ product.price | money_formatter: glood }}</div>
  
  <!-- Add product ratings here -->
  <div class="reviews">
    {% product_ratings product_id: product.id %}
  </div>
</div>
```

The `product_ratings` tag will automatically:

* Generate the appropriate Judge.me widget markup
* Handle the review data fetching
* Display review stars and rating count

### Example Output

When properly configured, the tag will generate HTML like this:

```html
<div class="jdgm-widget jdgm-preview-badge" data-id="1234567890" data-auto-install="false"></div>
```

## Troubleshooting

Common issues and solutions:

* **Reviews not showing**: Verify that Judge.me is properly installed and configured in your store
* **Missing ratings**: Ensure the product has reviews in Judge.me
* **Widget not loading**: Check that Judge.me scripts are properly loaded in your theme

## Best Practices

1. Always test the integration with products that have reviews
2. Consider loading performance when adding reviews to many products
3. Provide fallback content when reviews are not available
4. Test the integration across different devices and screen sizes

For more details on available tags and configuration options, see the [Template Tags](/for-developers/section-template/tags) documentation.


# Quick View Integration
Source: https://docs.glood.ai/for-developers/integrations/quick-view

Learn how to integrate quick view functionality with Glood.AI recommendations

# Quick View Integration

This guide explains how to integrate quick view functionality with Glood.AI recommendations.

## Overview

Quick view integration allows customers to quickly preview products from recommendation sections without leaving the current page.

## Implementation Steps

Coming soon...


# Wishlist Integration
Source: https://docs.glood.ai/for-developers/integrations/wishlist

Learn how to integrate wishlist functionality with Glood.AI recommendations

# Wishlist Integration

This guide explains how to integrate wishlist functionality with Glood.AI recommendations.

## Overview

Wishlist integration allows you to add wishlist functionality to products displayed in your Glood.AI recommendation sections.

## Implementation Steps

Coming soon...


# Developer Guide
Source: https://docs.glood.ai/for-developers/introduction

Advanced integration guide for developers implementing Glood.AI

# Developer Guide

Welcome to the Glood.AI developer documentation. This guide covers advanced integration topics and requires familiarity with:

* Shopify Liquid
* HTML/CSS
* JavaScript
* REST APIs

## Topics Covered

### Template Customization

Learn how to customize the appearance and behavior of Glood.AI recommendation sections using our template specification system.

### Programmatic Section Placement

Understand how to dynamically insert and position Glood.AI sections in your store using code rather than the visual editor.

### Headless Integration

Integrate Glood.AI recommendations into headless storefronts using our REST APIs.

### Hydrogen Support

Step-by-step guide for implementing Glood.AI in Shopify Hydrogen stores.

### Custom Events

Learn how to send custom tracking events to enhance Glood.AI's recommendation engine.

## Prerequisites

Before diving into the developer documentation, you should:

* Have Glood.AI installed on your Shopify store
* Be familiar with Shopify theme development
* Understand basic web development concepts
* Have access to your store's theme code

## Getting Help

If you run into any technical issues:

* Check our API Reference documentation
* Contact our developer support at [support@glood.ai](mailto:support@glood.ai)
* Join our developer community

Let's get started with implementing advanced Glood.AI features in your store!


# Code
Source: https://docs.glood.ai/for-developers/section-template/code

Learn about the core components of a section template

# Template Code

Every section template in Glood.AI consists of several core files that work together to create a complete recommendation section. We use the [liquidJS](https://liquidjs.com/api/classes/Liquid.html) library to render Liquid code at the client side. For any queries regarding Liquid-specific data structures, filters, or tags, please refer to the [Shopify Liquid documentation](https://shopify.dev/docs/api/liquid/objects).

## Core Parts

### 1. Section Template

The main template that defines the HTML structure and dynamic content rendering. It uses data structures defined in the [Object Definitions](/for-developers/section-template/schemas#object-definitions).

#### Dynamic Implementation

* Uses [translations object](/for-developers/section-template/schemas#translations-object) for text content
* Accesses [glood object](/for-developers/section-template/schemas#glood-object) for store configuration
* Renders [product data](/for-developers/section-template/schemas#product-array) in templates
* Applies [template settings](/for-developers/section-template/schemas#template-object) for styling

#### Liquid Filters

Our filters used in the template:

| Filter             | Purpose            | Parameters                                                                             | Output          | Example                                                        |
| ------------------ | ------------------ | -------------------------------------------------------------------------------------- | --------------- | -------------------------------------------------------------- |
| `money`            | Price formatting   | Number/String, `money_format`: Override default format                                 | Formatted price | `19.99 \| money` → `"$19.99"`                                  |
| `optimize_image`   | Image optimization | URL, `width`: Desired width, `height`: Desired height, `crop`: Crop mode               | Optimized URL   | `product.image \| optimize_image: width: 300, height: 300`     |
| `tracking_url`     | Add tracking       | Product, `section` (required): Section context, `ref_product_id`: Reference product ID | URL with params | `product \| tracking_url: section`                             |
| `section_discount` | Format discount    | Section, `money_format`: Price format, `locale`: Language code                         | Discount string | `section \| section_discount: money_format: shop.money_format` |

### 2. JS Hooks

The JavaScript hooks system provides a powerful way to customize and extend section behavior. These hooks are called at specific points in the section's lifecycle, allowing you to implement custom functionality and handle various events.

#### Core callBacks available

| Method Name               | Parameters                                                              | Description                          | Return             |
| ------------------------- | ----------------------------------------------------------------------- | ------------------------------------ | ------------------ |
| `initSwiper`              | `(Swiper, templateSettings, container, params, defaultSettings, utils)` | Initializes carousel functionality   | `Swiper instance`  |
| `onSectionInit`           | `(args, cb, gloodUtils)`                                                | Called when section initializes      | `void`             |
| `onSectionRenderComplete` | `(args, utils)`                                                         | Called after section rendering       | `void`             |
| `onVariantChange`         | `(args, utils)`                                                         | Handles variant selection            | `void`             |
| `onSwatchChange`          | `(args, utils)`                                                         | Handles swatch selection             | `void`             |
| `validateCartOperation`   | `(payload, recommendation, utils)`                                      | Validates cart operations            | `{payload, error}` |
| `onCartOperationComplete` | `(args, utils)`                                                         | Called after cart operation          | `void`             |
| `onProductDataReceived`   | `(args, utils)`                                                         | Handles product data                 | `void`             |
| `getProductDetailsQuery`  | `(recommendation, glood)`                                               | Returns GraphQL query                | `string`           |
| `transformProductData`    | `(product, recommendation)`                                             | Transforms product data              | `object`           |
| `onSectionRendered`       | `(section, products)`                                                   | Fired when section is fully rendered | `void`             |
| `onProductClick`          | `(section, products, productId)`                                        | Fired when product is clicked        | `void`             |
| `onAddToCart`             | `(section, products, items, response)`                                  | Fired on successful cart addition    | `void`             |
| `onVariantSelected`       | `(section, products, productId, variantId)`                             | Fired when variant is selected       | `void`             |

#### Example Implementation

```javascript
// Example: Carousel Initialization Hook
initSwiper: (Swiper, templateSettings, container, params) => {
    const carouselContainer = container.querySelector('._gai-crz-cnt');
    if (!carouselContainer) return;
    
    return new Swiper(carouselContainer, {
        slidesPerView: templateSettings.breakpoints.small.cardsPerView,
        spaceBetween: templateSettings.breakpoints.small.gutter
    });
}

// Example: Variant Change Hook
onVariantChange: (args, utils) => {
    const { variant, product, container } = args;
    const priceElement = container.querySelector('._gai-prod-prc');
    if (priceElement && variant.price) {
        priceElement.textContent = utils.formatMoney(variant.price);
    }
}
```

### 3. CSS Template

The CSS template system provides a flexible way to style your recommendation sections. It uses Liquid templating for dynamic styling based on section settings and configuration. Both section template and CSS template have access to the same template object. For a complete reference of available objects and their structure, see [Template Objects](/for-developers/section-template/schemas#object-definitions).

#### Structure and Organization

The CSS is organized by components and breakpoints:

* Base styles for mobile-first approach
* Tablet styles (default: 768px)
* Desktop styles (default: 1024px)

**NOTE:**

1. The CSS follows a mobile-first approach, where base styles are written for mobile devices and then progressively enhanced for larger screens through media queries. This ensures optimal performance and maintainability while providing a solid foundation for responsive design.
2. These breakpoint values are customizable through the template settings. For detailed configuration options, see [`settings.breakpoints[].screenSize`](/for-developers/section-template/schemas#template-object) in the Template Object documentation.

#### CSS Class Reference

| Class Name                     | Purpose                     | Properties Controlled                                                                                          | Example Usage                        |
| ------------------------------ | --------------------------- | -------------------------------------------------------------------------------------------------------------- | ------------------------------------ |
| `._gai-grid`                   | Main product grid container | - Grid layout (`grid-template-columns`)<br />- Gap between items<br />- Responsive columns                     | Controls overall product grid layout |
| `._gai-sec-tit`                | Section title styling       | - Font size<br />- Text alignment<br />- Line clamping<br />- Display properties<br />- Webkit box orientation | Main section heading appearance      |
| `._gai-prod-card`              | Individual product card     | - Background color<br />- Font family<br />- Max width (for bundle layout)                                     | Container for each product           |
| `._gai-prod-img`               | Product image container     | - Aspect ratio<br />- Object-fit                                                                               | Product image display                |
| `._gai-prod-img-wrap`          | Image wrapper               | - Aspect ratio                                                                                                 | Controls image container proportions |
| `._gai-prod-tit`               | Product title               | - Color<br />- Font weight<br />- Line clamping<br />- Text alignment<br />- Font size<br />- Font family      | Product name styling                 |
| `._gai-prod-vndr`              | Vendor name                 | - Font size<br />- Display properties                                                                          | Brand/vendor name display            |
| `._gai-prod-vndr--above-title` | Vendor name above title     | - Display (block/none)                                                                                         | Vendor positioning above title       |
| `._gai-prod-vndr--below-title` | Vendor name below title     | - Display (block/none)                                                                                         | Vendor positioning below title       |
| `._gai-prod-prc`               | Product price               | - Color<br />- Font family<br />- Font size                                                                    | Main price display                   |
| `._gai-prod-prc--compare-at`   | Compare-at price            | - Color<br />- Display<br />- Visibility conditions                                                            | Original/compare price styling       |
| `._gai-atc-btn`                | Add to cart button          | - Background color<br />- Text color<br />- Border<br />- Border radius<br />- Disabled state                  | Add to cart button styling           |
| `._gai-dis-cnt`                | Discount container          | - Justification<br />- Background color<br />- Display (flex/none)                                             | Discount information wrapper         |
| `._gai-dis-txt`                | Discount text               | - Color<br />- Font size                                                                                       | Discount amount/percentage text      |
| `._gai-dis`                    | Discount badge              | - Background color<br />- Text color<br />- Opacity                                                            | Discount label styling               |
| `._gai-container`              | Main section container      | - Background color                                                                                             | Section wrapper styling              |
| `._gai-bundle-products`        | Bundle products grid        | - Grid template columns                                                                                        | Layout for bundled products          |
| `._gai-skl-atc`                | Skeleton add to cart        | - Display visibility                                                                                           | Loading state for add to cart        |
| `._gai-bndl-sec`               | Bundle section              | - Justify content                                                                                              | Bundle section layout                |
| `._gai-amz-tit`                | Amazon bundle title         | - Text alignment                                                                                               | Title for Amazon-style bundles       |

#### Label Classes

Special classes for product status and badges:

| Class Name         | Purpose             | Customizable Properties              |
| ------------------ | ------------------- | ------------------------------------ |
| `._gai-oos`        | Out of stock badge  | - Background color<br />- Text color |
| `._gai-bestseller` | Bestseller badge    | - Background color<br />- Text color |
| `._gai-new`        | New product badge   | - Background color<br />- Text color |
| `._gai-trending`   | Trending item badge | - Background color<br />- Text color |

#### Responsive Behavior

The code includes media queries for different screen sizes:

```scss
/* Mobile (default) */
[data-gai-section-id="{{ section_id }}"] ._gai-grid {
  grid-template-columns: repeat({{- settings.breakpoints.small.cards_per_view -}}, 1fr);
  gap: {{ settings.breakpoints.small.gutter }}px;
}

/* Tablet */
@media (min-width: {{ settings.breakpoints.medium.screen_size }}px) {
  /* Tablet-specific styles */
}

/* Desktop */
@media (min-width: {{ settings.breakpoints.large.screen_size }}px) {
  /* Desktop-specific styles */
}
```

## Support

For help with template customization or troubleshooting, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Filters
Source: https://docs.glood.ai/for-developers/section-template/filters

Reference for custom Liquid filters available in section templates

## format\_money

**Description:**\
Formats numeric values into the store's currency format based on the money\_format setting from the glood object.

**Parameters:**

* `value` (Number/String): The numeric price value to be formatted
* `money_format` (String): Override default money format
* `intl_options` (Object, optional): Currency formatting configuration
  ```js
    {
      "en":   {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }
    }
  ```

**Returns:**\
String - Formatted price string with currency symbol

**Example:**

```liquid
{{ product.price | format_money: glood.shop.money_format, template.settings.intl_options }}
```

**Use Cases:**

* Formatting product prices
* Displaying compare at prices
* Showing discount amounts
* Bundle total prices

## optimize\_image

**Description:**\
Optimizes and resizes images for better performance using CDN parameters.

**Parameters:**

* `url` (String): The original image URL to be optimized
* `width` (Number, optional): Desired image width
* `height` (Number, optional): Desired image height
* `crop` (String, optional): Crop mode for the image

**Returns:**\
String - Optimized image URL with CDN parameters

**Example:**

```liquid
{{ product.featured_image.src | optimize_image: width: 300, height: 300 }}
{{ product.image | optimize_image: width: 600, height: 600, crop: 'center' }}
```

**Use Cases:**

* Product card images
* Responsive image loading
* Thumbnail generation
* Banner image optimization

## product\_url

**Description:**\
Generates a complete product URL with tracking parameters and localization.

**Parameters:**

* `handle` (String, required): Product handle/slug
* `ref_product_id` (String, optional): Reference product ID
* `layout` (String, optional): Section layout type

**Returns:**\
String - Complete product URL with parameters

**Example:**

```liquid
{% assign url = root_url | product_url: product.handle, glood.product.id, section.layout %}
<a href="{{ url }}">{{ product.title }}</a>
```

**Use Cases:**

* Product link generation
* Navigation building
* Tracking implementation
* Multi-language support

## product\_discount

**Description:**\
Calculates and formats product discount information based on configuration.

**Parameters:**

* `discount_config` (Object, required): Discount configuration settings
* `label_text` (String, required): Template for discount label
* `money_format` (String, required): Store's money format
* `intl_options` (Object, optional): Currency formatting configuration

**Returns:**\
String - Formatted discount text

**Example:**

```liquid
{% assign discount = product | product_discount: section.discount_config, translations.discount_label_text, glood.shop.money_format, template.settings.intl_options %}
<span class="discount">{{ discount }}</span>
```

**Use Cases:**

* Sale badges
* Discount displays
* Price comparison
* Promotional messaging

## save\_amount

**Description:**\
Calculates and formats savings information based on discount configuration.

**Parameters:**

* `discount_config` (Object, required): Discount configuration settings
* `save_text` (String, required): Template for savings text
* `money_format` (String, required): Store's money format
* `intl_options` (Object, optional): Currency formatting configuration

**Returns:**\
String - Formatted savings text

**Example:**

```liquid
{{ product | save_amount: section.discount_config, translations.discount_save_text, glood.shop.money_format, template.settings.intl_options }}
```

**Use Cases:**

* Savings displays
* Discount comparison
* Promotional messaging

## color\_value

**Description:**\
Retrieves color code from a color map object.

**Parameters:**

* `color_mapping` (Object, required): Color map object

**Returns:**\
String - Color code

**Example:**

```liquid
{{ value | color_value: template.settings.color_mapping }}
```

**Use Cases:**

* Theme customization
* Product attribute mapping
* UI element styling

## to\_boolean

**Description:**\
Converts any value to a boolean.

**Parameters:**

* None

**Returns:**\
Boolean - True or False

**Example:**

```liquid
<span data-selected="{{ selected_option.value == value | to_boolean }}">
```

**Use Cases:**

* Conditional rendering
* Boolean logic
* UI state management

## image\_dimensions

**Description:**\
Calculates responsive image dimensions based on template breakpoint settings.

**Parameters:**

* `breakpoints` (Object, required): Template breakpoint settings

**Returns:**\
Object - Object containing calculated dimensions

**Example:**

```liquid
{{ client_info.client_width | image_dimensions: template.settings.breakpoints }}
```

**Use Cases:**

* Responsive image loading
* UI element sizing
* Image optimization

## default

**Description:**\
Provides a default value if the input is null, undefined or empty.

**Parameters:**

* `default_value` (Any, required): Value to use if input is empty

**Returns:**\
Any - Original value or default value

**Example:**

```liquid
{{ template.settings.product_card.min_quantity | default: 1 }}
{{ translations.oos_text | default: 'Out of stock' }}
```

**Use Cases:**

* Setting default quantities
* Fallback text
* Configuration defaults
* Error prevention

## Error Handling

| Error                          | Description                                        | Solution                                                                                                                    |
| ------------------------------ | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------- |
| Invalid Price Format           | Price value is null or not a number                | 1. Use the default filter to set a fallback value (0)<br />2. Apply money filter to format the price                        |
| Missing Image Dimensions       | Width/height not specified for image optimization  | 1. Always specify width and height parameters<br />2. Use default dimensions (300x300) if not provided                      |
| Invalid Tracking Parameters    | Missing required section context                   | 1. Check if section ID exists<br />2. Verify product handle is present<br />3. Fall back to standard product URL if missing |
| Invalid Discount Configuration | Missing money format or invalid discount structure | 1. Ensure shop money format is provided<br />2. Validate discount configuration before applying                             |

These errors require proper handling to:

* Prevent template rendering failures
* Maintain consistent price display
* Ensure proper image loading
* Keep tracking functionality intact

## Notes

* All filters are available in both section templates and CSS templates
* Some filters require specific objects from the template context
* Filter parameters marked as required must be provided for the filter to work correctly
* See [Object Definitions](/for-developers/section-template/schemas#object-definitions) for details about input objects

## Support

For help with template customization or troubleshooting, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Hooks
Source: https://docs.glood.ai/for-developers/section-template/hooks

Complete guide to hooks in Glood.AI section templates

# Template Hooks

## Hook Lifecycle Flow

### 1. Section Initialization Phase

* `onSectionInit` is called when section is first created
  * Sets up initial state and variables
  * Configures section parameters
  * Registers event listeners

### 2. Data Fetching Phase

* `getProductDetailsQuery` is called to prepare GraphQL query
  * Defines required product fields
  * Sets up query variables
  * Configures custom data requirements
  * Sets up filtering parameters

### 3. Data Processing Phase

* `postProductFetch` processes raw product data
  * Filters products if needed
  * Adds computed properties
  * Transforms data structure
* `transformProductData` transforms individual product data
  * Normalizes data format
  * Adds custom fields
  * Prepares for rendering

### 4. Rendering Phase

* `afterSectionRendered` is called once section is rendered on the page and ready to be used.

  **Note:** This is an optional hook, if you want to perform certain task, you can add your logic in this hook.

* `initSwiper` (if carousel is enabled)
  * Configures carousel settings
  * Sets up navigation
  * Initializes responsive behavior
  * Sets up pagination

### 5. Interaction Phase

* `onVariantChange` handles variant selection

  **Note:** This is an optional hook, if you want to perform certain task, you can add your logic in this hook.

* `onSwatchChange` handles swatch interactions

  **Note:** This is an optional hook, if you want to perform certain task, you can add your logic in this hook.

### 6. Cart Operation Phase

* `beforeAddToCart` validates cart operations
  * Validates product selection
  * Modifies cart payload
  * Handles quantity validation
* `afterAddToCart` handles post-cart updates

  **Note:** This is an optional hook, if you want to perform custom logic, you can setup your logic in this hook.

{/*  
  ### 7. Cleanup Phase
  - Cleanup operations when section is removed/updated
  - Remove event listeners
  - Clear custom elements
  - Reset state if needed
  - Clear timers/intervals
  - Free up resources
  */}

## Available Hooks

### 1. onSectionInit

**Purpose:**\
Primary initialization hook called when a section is first created.

**Parameters:**

1. `args` contains:
   * `recommendation` object which includes:
     * [`section`](/for-developers/section-template/schemas#section-object) containing section ID, layout type, title, and discount configuration
     * Array of [`products`](/for-developers/section-template/schemas#product-array) with product data
   * `engine` object containing:
     * Engine name and version
     * Engine-specific configuration
   * `initEnginePayload` containing engine initialization data

2. `cb` (Callback Function):
   * Receives the processed recommendation object
   * Used to handle initialization completion
   * No return value expected

3. `gloodUtils` provides:

| Function                | Description                                                      |
| ----------------------- | ---------------------------------------------------------------- |
| `formatMoney`           | Formats price values according to store's money format           |
| `optimizeImage`         | Optimizes image URLs with specified dimensions and crop settings |
| `getVariantFromOptions` | Finds a variant based on selected options                        |
| `findVariantById`       | Retrieves a variant using its ID                                 |
| `getSelectedVariant`    | Gets currently selected variant for a product                    |
| `getDefaultVariant`     | Returns the default/first available variant                      |
| `addToCart`             | Handles adding items to cart with proper validation              |
| `updateCart`            | Updates existing cart items (quantity, properties)               |
| `getProductUrl`         | Generates product URL with tracking parameters                   |
| `getDiscountedPrice`    | Calculates discounted price based on rules                       |
| `formatDiscount`        | Formats discount text with proper currency/percentage            |
| `getTranslation`        | Retrieves translated text with fallback support                  |
| `trackEvent`            | Sends tracking events to analytics                               |
| `refreshSection`        | Re-renders section with updated data                             |
| `showNotification`      | Displays toast/notification messages                             |

**Example:**

```javascript
onSectionInit: (args, cb, gloodUtils) => {
    const { recommendation, engine, initEnginePayload } = args;
    cb({
        recommendation,
        engine,
        initEnginePayload,
    });
}
```

**Use Cases:**

* Section configuration
* State initialization
* Event listener setup
* Feature initialization
* Engine configuration

### 2. getProductDetailsQuery

**Purpose:**\
Builds the GraphQL query for fetching product data.

**Parameters:**

1. `recommendation` contains:
   * [`section`](/for-developers/section-template/schemas#section-object) object with:
     * `id` (number): Unique section identifier
     * `layout` (String): Section layout type
     * `discount_config` (Object): Discount settings
     * `widget_message` (String): Custom message template
   * `products` (Array): Currently loaded products
   * `template` (Object): Template-specific settings

2. `glood` provides:
   * `shop` object containing:
     * `money_format` (String): Store currency format
     * `locale` (String): Store language code
   * `product` object with:
     * `id` (String): Current product context (format: "gid://shopify/Product/{id}")
     * `handle` (String): Product URL handle
   * `localization` settings for:
     * Currency formatting
     * Language preferences
     * Regional settings

**Returns:**\
GraphQL query string containing required product fields

**Example:**

```javascript
getProductDetailsQuery: (recommendation, glood) => {
    return `
        featuredImage {
            url
        }
        handle
        id
        title
        availableForSale
        priceRange {
            minVariantPrice {
                amount
                currencyCode
            }
        }
        compareAtPriceRange {
            minVariantPrice {
                amount
                currencyCode
            }
        }
        variants(first: 250) {
            nodes {
                id
                price {
                    amount
                    currencyCode
                }
                availableForSale
                // ... other variant fields
            }
        }
    `;
}
```

**Use Cases:**

* Product data fetching
* Field selection
* Query customization
* Data filtering
* Performance optimization

### 3. postProductFetch

**Description:**\
Processes raw product data after fetching. Allows for data transformation and enrichment before rendering.

**Parameters:**

* `args` (Object):
  * `products` (Array): Raw product data array
  * `recommendation` (Object): Section configuration
  * `template` (Object): Template settings
* `utils` (Object): Helper functions

**Returns:**\
Array - Processed product data

**Example:**

```javascript
postProductFetch: (args, utils) => {
    const { products, recommendation, template } = args;
    return products.map(product => ({
        ...product,
        formattedPrice: utils.formatMoney(product.price),
        hasDiscount: product.compare_at_price > product.price,
        isAvailable: product.variants.nodes[0].availableForSale,
        imageUrl: utils.optimizeImage(product.featured_image, template.settings)
    }));
}
```

**Use Cases:**

* Price formatting
* Discount calculations
* Image optimization
* Availability checks
* Data enrichment

### 4. transformProductData

**Purpose:**\
Transforms raw GraphQL product data into template-friendly format.

**Parameters:**

1. `product` (Raw GraphQL data) contains:
   * Basic information:
     * `id` (String): GraphQL product ID (format: "gid://shopify/Product/{id}")
     * `handle` (String): Product URL handle
     * `title` (String): Product title
     * `vendor` (String): Product vendor
   * Images:
     * `featuredImage` (Object): Main product image
     * `images` (Object): Additional product images
   * Pricing:
     * `priceRange` (Object): Min/max prices
     * `compareAtPriceRange` (Object): Original prices
   * Variants:
     * `variants` (Object): Product variants data
     * `variantsCount` (Object): Total variants count
   * Options:
     * `options` (Array): Product options
     * `selectedOptions` (Array): Default selections
   * Status:
     * `availableForSale` (Boolean): Stock status
     * `tags` (Array): Product tags

2. `recommendation` provides:
   * [`section`](/for-developers/section-template/schemas#section-object) settings:
     * Display configuration
     * Pricing rules
     * Layout settings
     * Tracking configuration

**Returns:**\
[`Product`](/for-developers/section-template/schemas#product-object) object containing:

* Normalized product data
* Formatted prices
* Processed images
* Structured variants
* Computed fields

**Example:**

```javascript
transformProductData: (product, recommendation, utils) => {
    return {
        ...product,
        trackingData: utils.generateTrackingData(product, recommendation),
        variants: product.variants.map(variant => ({
            ...variant,
            formattedPrice: utils.formatMoney(variant.price),
            isAvailable: variant.inventory_quantity > 0
        })),
        labels: utils.generateProductLabels(product, recommendation.settings)
    };
}
```

**Use Cases:**

* Tracking setup
* Variant processing
* Label generation
* Price formatting
* Custom field addition

### 5. initSwiper

**Purpose:**\
Initializes and configures the carousel/slider functionality for sections using Swiper.js.

**Parameters:**

1. `Swiper` (Constructor Class):
   * Swiper.js constructor
   * Used to create carousel instances
   * Handles slide functionality
   * Manages touch events
   * Controls navigation

2. `templateSettings` contains:
   * [`template.settings`](/for-developers/section-template/schemas#template-object) with:
     * `carousel` (Object): Carousel-specific settings
     * `breakpoints` (Object): Responsive configuration:
       * `small` (Object): Mobile settings
       * `medium` (Object): Tablet settings
       * `large` (Object): Desktop settings
     * Each breakpoint contains:
       * `screenSize` (Number): Width breakpoint
       * `cardsPerView` (Number): Visible slides
       * `gutter` (Number): Space between slides

3. `container` (HTMLElement):
   * Root section element
   * Contains carousel structure:
     * Wrapper element
     * Slide elements
     * Navigation buttons
     * Pagination dots

4. `params` contains:
   * [`recommendation`](/for-developers/section-template/schemas#recommendation-object):
     * `section` (Object): Section configuration
     * `products` (Array): Product data
     * Layout settings
   * Template-specific parameters

5. `defaultSettings` contains:
   * Default Swiper configuration:
     * Navigation options
     * Pagination settings
     * Autoplay configuration
     * Effect settings
     * Loop behavior

6. `utils` provides:
   * `merge`: Deep object merging
   * DOM manipulation helpers
   * Event handling utilities
   * Error handling functions

**Returns:**

* `Swiper` instance if initialization succeeds
* `undefined` if initialization fails

**Example:**

```javascript
initSwiper: (Swiper, templateSettings, container, params, defaultSettings, utils) => {
  const carouselContainer = container.querySelector('._gai-crz-cnt');
  if (!carouselContainer) {
    console.error('GLOOD.AI:ERROR: Carousel container not found for section', params.recommendation.section.id);
    return;
  }
  
  const settings = templateSettings?.carousel?.swiperConfig || {};
  const swiperConfig = utils.merge(defaultSettings, settings);
  const breakpoints = Object.values(templateSettings.breakpoints).reduce(
    (acc, curr) => ({
      ...acc,
      [curr.screenSize]: {
        slidesPerView: curr.cardsPerView,
        spaceBetween: curr.gutter,
      },
    }),
    {}
  );
  
  return new Swiper(carouselContainer, utils.merge(swiperConfig, { breakpoints }));
}
```

### 6. onVariantChange

**Purpose:**\
Handles product variant selection changes and updates the UI.

**Parameters:**

1. `args` contains:
   * `variant` information:
     * Basic details: ID, price, compare price
     * Image information with source and alt text
     * Availability status and quantity
     * Selected options (color, size, etc.)
   * Complete [`product`](/for-developers/section-template/schemas#product-object) data
   * DOM container element for the product card

2. `utils` provides:
   * Price formatting functions
   * Image update utilities
   * Price display update functions
   * Other UI manipulation helpers

### 7. onSwatchChange

**Purpose:**\
Handles swatch selection events and updates product display accordingly.

**Parameters:**

1. `args` contains:
   * `option` object with:
     * `name` (String): Option name (e.g., "Color", "Size")
     * `value` (String): Selected option value
     * `type` (String): Swatch type (color/size/material)
     * `swatchImage` (String, optional): Custom swatch image URL
   * [`product`](/for-developers/section-template/schemas#product-object) object containing:
     * `variants` (Array): All product variants
     * `options` (Array): Available option types
     * `selectedVariant` (Object): Currently selected variant
     * `images` (Array): Product images
   * `container` (HTMLElement): Product card DOM element

2. `utils` provides:
   * `updateSwatchUI`: Updates swatch selection state
   * `findMatchingVariant`: Finds variant by options
   * `updateProductImage`: Updates product image
   * `updatePriceDisplay`: Updates price display
   * Event tracking utilities

**Returns:**\
void

### 8. onCartOperationComplete

**Purpose:**\
Handles post-cart operation tasks and updates UI accordingly.

**Parameters:**

1. `args` contains:
   * `operation` (String): Type of operation ('add'|'update'|'remove')
   * `response` object with:
     * `cart` (Object): Updated cart state
     * `items` (Array): Modified cart items
     * `total` (Number): New cart total
     * `count` (Number): Updated item count
   * [`section`](/for-developers/section-template/schemas#section-object) containing:
     * Section configuration
     * Template settings
     * Tracking data
   * `container` (HTMLElement): Section container

2. `utils` provides:
   * `updateCartUI`: Updates cart display
   * `showNotification`: Displays notifications
   * `updateInventory`: Updates stock status
   * Animation utilities

3. `gloodUtils` provides:
   * `trackCartEvent`: Analytics tracking
   * `formatCartData`: Data formatting
   * `updateShopifyCart`: Cart sync utilities
   * Store-specific helpers

**Returns:**\
void

### 9. validateCartOperation

**Purpose:**\
Validates and potentially modifies cart operations before execution.

**Parameters:**

1. `payload` contains:
   * Array of items being added/modified:
     * Product identifier
     * Variant identifier
     * Quantity
   * Additional cart-specific data

2. `recommendation` provides:
   * [`section`](/for-developers/section-template/schemas#section-object) configuration
   * Product data
   * Template settings

3. `utils` and `gloodUtils`:
   * Validation helpers
   * Cart operation utilities
   * Format and transformation functions

**Returns:**

* Modified payload if valid
* Error message if validation fails
* Optional redirect URL

### 10. onProductDataReceived

**Purpose:**\
Processes raw product data before transformation and rendering.

**Parameters:**

1. `args` contains:
   * `products` array with raw product data:
     * `id` (number): Product identifier
     * `title` (String): Product title
     * `handle` (String): Product URL handle
     * `featuredImage` (Object): Main product image
     * `variants` (Array): Raw variant data
     * `options` (Array): Product options
     * `tags` (Array): Product tags
   * [`section`](/for-developers/section-template/schemas#section-object) object with:
     * Layout configuration
     * Discount settings
     * Template rules
     * Display settings
   * [`template`](/for-developers/section-template/schemas#template-object) containing:
     * Breakpoint settings
     * Card configuration
     * Image dimensions
     * Price display rules

2. `utils` provides:
   * `processImages`: Image optimization utilities
   * `formatProductData`: Data formatting helpers
   * `validateProducts`: Data validation functions
   * `enrichProductData`: Data enrichment utilities
   * `handleErrors`: Error handling functions

**Returns:**\
void

### 11. loadAjaxCart

**Purpose:**\
Determines when to load the AJAX cart section by checking if the AJAX cart is active.

**Parameters:**

1. `bodyElem` (HTMLElement):
   * The document body element
   * Provides access to AJAX cart state

**Returns:**\
`Boolean` - True if AJAX cart is active and should be loaded

**Example:**

```javascript
loadAjaxCart: (bodyElem) => {
    const ajaxCart = bodyElem.querySelector('cart-drawer');
    return ajaxCart.classList.contains("active");
}
```

**Use Cases:**

* Update recommendations dynamically when products are added to cart

### 12. unloadAjaxCart

**Purpose:**\
Determines when to unload the AJAX cart section by checking if the AJAX cart is inactive.

**Parameters:**

1. `bodyElem` (HTMLElement):
   * The document body element
   * Provides access to AJAX cart state

**Returns:**\
`Boolean` - True if AJAX cart is inactive and should be unloaded

**Example:**

```javascript
unloadAjaxCart: (bodyElem) => {
    const ajaxCart = bodyElem.querySelector('cart-drawer');
    return !ajaxCart.classList.contains("active");
}
```

**Use Cases:**

* Control AJAX cart unloading timing
* Clean up cart resources
* Manage AJAX cart states
* Handle cart closure events

## Hook Dependencies

### Required Utils

* `formatMoney`: Price formatting
* `getVariantById`: Variant lookup
* `updateUrl`: URL manipulation
* `merge`: Object merging
* `imageOptimizer`: Image optimization

### Global Context

* `glood`: Store configuration
* `translations`: Text strings
* `template`: Template settings
* `section`: Section configuration
* `utils`: Common utilities

### Hook Flow Dependencies

* `transformProductData` needs data from `getProductDetailsQuery`
* `afterSectionRendered` needs data from `transformProductData`
* Cart operations need data from `onVariantChange`
* Swiper needs container from `afterSectionRendered`

## Error Handling

Each hook should handle these critical errors:

1. Carousel Initialization Errors
   ```javascript
   // Critical: Section won't render if carousel container is missing
   if (!carouselContainer) {
     console.error('GLOOD.AI:ERROR: Carousel container not found for section', params.recommendation.section.id);
     return;
   }
   ```

2. Product Data Transformation Errors
   ```javascript
   // Critical: Invalid product data will break the section
   if (!product.variants?.nodes) {
     console.error('GLOOD.AI:ERROR: Invalid variant data structure for product', product.id);
     return {
       ...product,
       variants: [],
       available: false
     };
   }
   ```

3. GraphQL Query Response Errors
   ```javascript
   // Critical: Missing required fields will cause rendering issues
   if (!product.priceRange?.minVariantPrice?.amount) {
     console.error('GLOOD.AI:ERROR: Missing price data for product', product.id);
     return null;
   }
   ```

These errors require immediate attention as they:

* Prevent sections from rendering correctly
* Break core product functionality
* Impact the shopping experience
* Can cause JavaScript runtime errors

## Support

If you need help with creating or customizing section templates, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Introduction
Source: https://docs.glood.ai/for-developers/section-template/introduction

Learn about section templates in Glood.AI

# Section Templates

Section templates in Glood.AI are the building blocks for displaying product recommendations in your Shopify store. They function similarly to Shopify themes, allowing you to create custom layouts and designs for your product recommendations.

## What are Section Templates?

Section templates are modular components that determine how your product recommendations are displayed. They are:

1. **Similar to Shopify Themes**: They follow the same principles as Shopify themes, using Liquid templating for dynamic content rendering.

2. **JavaScript-Powered**: Templates are loaded dynamically using JavaScript through the Glood.AI app embed, which handles recommendation fetching and rendering.

3. **Headless Compatible**: While templates are primarily for traditional Shopify stores, headless stores and Hydrogen apps can use our headless APIs instead.

4. **Multi-Component Structure**: Each template consists of:
   * Liquid templates for markup
   * JavaScript for interactivity
   * CSS for styling
   * Settings schema for customization
   * Translation strings for internationalization

5. **Flexible Rendering**: Templates can be rendered either on the frontend or backend, depending on your needs and configuration.

6. **Extensible**: We provide built-in Tags, Filters, and JavaScript Hooks for easy customization and third-party app integration.

## Template Components

A basic section template includes these core components:

```liquid
<div class="glood-section" data-section-id="{{ section.id }}">
  {%- comment -%} Template markup {%- endcomment -%}
</div>

{% stylesheet %}
  /* Template styles */
{% endstylesheet %}

{% javascript %}
  // Template JavaScript
{% javascript %}
```

## Template Features

### 1. Settings Schema

* Configurable options for layout, styling, and behavior
* Support for various input types (text, select, color, etc.)
* Section-specific configurations

### 2. Translations

* Multi-language support
* Customizable text strings
* Fallback handling for missing translations

### 3. Liquid Markup

* Dynamic content rendering
* Built-in filters for data manipulation
* Conditional rendering and loops

### 4. JavaScript

* Event handling
* DOM manipulation
* API integrations
* Cart operations

### 5. CSS

* Responsive layouts
* Custom styling
* Animation support
* Theme compatibility

## Extension Points

We provide several ways to extend and customize templates:

1. **Tags**: Custom Liquid tags for template functionality
   ```liquid
   {% product_ratings product_id: product.id %}
   ```

2. **Filters**: Data manipulation filters
   ```liquid
   {{ product.price | format_money: glood.shop.money_format }}
   ```

3. **Hooks**: JavaScript hooks for lifecycle events
   ```javascript
   initSection: (args, cb, utils) => {
     // Initialization logic
   }
   ```

## Best Practices

1. **Performance**
   * Optimize images and assets
   * Minimize JavaScript execution time
   * Use efficient selectors
   * Implement lazy loading

2. **Compatibility**
   * Test across different themes
   * Ensure mobile responsiveness
   * Handle edge cases gracefully
   * Support various browser versions

3. **Maintainability**
   * Follow naming conventions
   * Document custom functionality
   * Use modular code structure
   * Implement error handling

4. **Accessibility**
   * Use semantic HTML
   * Add ARIA attributes
   * Ensure keyboard navigation
   * Provide alt text for images

## Libraries

The section template system uses the following core libraries that you'll interact with when customizing templates:

### Core Libraries

<Tabs>
  <Tab title="Preact">
    ```json
    "preact": "^10.22.1"
    ```

    Our UI library for building interactive components.

    **Key Features**:

    * React-compatible API
    * Lightweight (3kB)
    * Virtual DOM
    * Component-based architecture

    [View Preact Documentation →](https://preactjs.com/)
  </Tab>

  <Tab title="Swiper">
    ```json
    "swiper": "^11.1.15"
    ```

    Powers carousel functionality in templates.

    **Common Uses**:

    * Product carousels
    * Image galleries
    * Touch-enabled sliders
    * Responsive layouts

    [View Swiper Documentation →](https://swiperjs.com/)
  </Tab>

  <Tab title="Liquid.js">
    ```json
    "liquidjs": "^10.19.0"
    ```

    Template engine for rendering Shopify-compatible templates.

    **Features**:

    * Shopify Liquid syntax
    * Custom tags and filters
    * Theme compatibility

    [View Liquid.js Documentation →](https://liquidjs.com/)
  </Tab>
</Tabs>

## Next Steps

* Learn about [Filters](filters) for data manipulation
* Explore [Tags](tags) for template functionality
* Understand [Hooks](hooks) for JavaScript integration
* Check out [Template Structure](template-structure) for detailed component information

## Support

If you need help with creating or customizing section templates, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# null
Source: https://docs.glood.ai/for-developers/section-template/schemas



---
title: "Object Definitions" 
description: "Definition of Objects available in the section template." 
---

## Understanding Core Components

The template system uses seven essential building blocks that work together:

1. `glood` - Global store configuration
2. `products` - Product data management
3. `translations` - Multi-language support
4. `section` - Layout and behavior control
5. `template` - Appearance and styling settings
6. `clientInfo` - Device and viewport information
7. `config` - Integration and feature management

## `glood` Object

The global object contains the store information required by the glood application to work properly on your store.

### Purpose and Usage

The glood object provides essential store information and configuration settings that are used throughout the template. It's particularly important for:

* Building correct store URLs
* Formatting prices according to store settings
* Handling localization

### Properties Reference

### Core Properties

| Key               | Type   | Description                   | Default Value |
| ----------------- | ------ | ----------------------------- | ------------- |
| `shopify.rootUrl` | string | Base URL of the Shopify store | "/"           |

### Localization Properties

| Key                             | Type    | Description                      | Default Value |
| ------------------------------- | ------- | -------------------------------- | ------------- |
| `localization.language.locale`  | string  | Language code                    | "en"          |
| `localization.language.primary` | boolean | Whether this is primary language | true          |
| `localization.language.rootUrl` | string  | Base URL for language            | "/"           |
| `localization.country`          | string  | Country code                     | "IN"          |
| `localization.currency`         | string  | Currency code                    | "INR"         |

### Market Properties

| Key             | Type   | Description              | Default Value |
| --------------- | ------ | ------------------------ | ------------- |
| `market.id`     | string | Unique market identifier | "27455750381" |
| `market.handle` | string | Market handle            | "in"          |

### Shop Properties

| Key                  | Type   | Description              | Default Value                      |
| -------------------- | ------ | ------------------------ | ---------------------------------- |
| `shop.domain`        | string | Store's domain           | "adarsh-test2-store.myshopify.com" |
| `shop.id`            | string | Shop identifier          | "73540239597"                      |
| `shop.productsCount` | number | Total number of products | 15                                 |
| `shop.currencyRate`  | string | Currency conversion rate | "1.0"                              |
| `shop.moneyFormat`   | string | Store's currency format  | `"Rs. \{\{amount\}\}"`             |
| `shop.currencyCode`  | string | Store's currency code    | "INR"                              |

### Product Properties

| Key                 | Type    | Description                 | Default Value               |
| ------------------- | ------- | --------------------------- | --------------------------- |
| `product.id`        | number  | Current product identifier  | 8925145628909               |
| `product.title`     | string  | Product title               | "(Sample) Coconut Bar Soap" |
| `product.handle`    | string  | Product handle              | "soap"                      |
| `product.available` | boolean | Product availability status | true                        |
| `product.price`     | number  | Product price               | 2000                        |
| `product.vendor`    | string  | Product vendor              | "adarsh-test2-store"        |
| `product.type`      | string  | Product type                | ""                          |

### Cart Properties

| Key                     | Type    | Description                    | Default Value |
| ----------------------- | ------- | ------------------------------ | ------------- |
| `cart.currency`         | string  | Cart currency                  | "INR"         |
| `cart.itemCount`        | number  | Number of items in cart        | 16            |
| `cart.totalPrice`       | number  | Total cart price               | 752945        |
| `cart.requiresShipping` | boolean | Whether cart requires shipping | true          |
| `cart.totalWeight`      | number  | Total cart weight              | 250           |

### Config Properties

| Key               | Type   | Description          | Default Value                                     |
| ----------------- | ------ | -------------------- | ------------------------------------------------- |
| `config.pageType` | string | Type of current page | "product"                                         |
| `config.pageUrl`  | string | Current page URL     | "adarsh-test2-store.myshopify.com/products/soap"  |
| `config.uid`      | string | Unique identifier    | "1737978965-cd63b5e8-9f99-4519-a4bc-b0dac71ccead" |

**NOTE:**

1. All property keys are automatically converted to snake\_case when used in Liquid templates. For example:

* `rootUrl` → `root_url`
* `devicePixelRatio` → `device_pixel_ratio`
* `moneyFormat` → `money_format`

2. If you want to get the content of glood object, you can access it through `window.glood` inside your store.

Example usage in Liquid:

```liquid
{{ glood.shop.moneyFormat }}
{{ glood.localization.language.rootUrl }}
```

## `products` Array

The products array is a fundamental component that manages product data in the template system.

### Purpose and Usage

The products array is responsible for:

* Managing the collection of products to be displayed
* Handling product data organization
* Controls variant and option configurations
* Managing pricing and inventory information
* Providing media assets for product display

### Properties Reference

| Key                                  | Type    | Description              | Example                                                                                              |
| ------------------------------------ | ------- | ------------------------ | ---------------------------------------------------------------------------------------------------- |
| `id`                                 | number  | Product identifier       | 8925145628909                                                                                        |
| `title`                              | string  | Product name             | "Coconut Bar Soap"                                                                                   |
| `handle`                             | string  | Product URL handle       | "coconut-bar-soap"                                                                                   |
| `vendor`                             | string  | Product vendor name      | "Natural Essentials"                                                                                 |
| `tags`                               | array   | Product tags             | \["new", "organic", "bestseller"]                                                                    |
| `featuredImage.src`                  | string  | Main product image URL   | "[https://cdn.shopify.com/s/files/1/soap.jpg](https://cdn.shopify.com/s/files/1/soap.jpg)"           |
| `images[].src`                       | string  | Additional image URLs    | \["[https://cdn.shopify.com/s/files/1/soap-1.jpg](https://cdn.shopify.com/s/files/1/soap-1.jpg)"]    |
| `variants`                           | array   | Product variants         | \[See variant example below]                                                                         |
| `variants[].id`                      | string  | Variant identifier       | "40468007231725"                                                                                     |
| `variants[].title`                   | string  | Variant title            | "Small / Blue"                                                                                       |
| `variants[].availableForSale`        | boolean | Stock availability       | true                                                                                                 |
| `variants[].price`                   | string  | Variant price            | "19.99"                                                                                              |
| `variants[].compareAtPrice`          | string  | Original price           | "24.99"                                                                                              |
| `variants[].image.src`               | string  | Variant image URL        | "[https://cdn.shopify.com/s/files/1/blue-soap.jpg](https://cdn.shopify.com/s/files/1/blue-soap.jpg)" |
| `variants[].selectedOptions`         | array   | Selected variant options | \[See options example below]                                                                         |
| `variants[].selectedOptions[].name`  | string  | Option name              | "Size"                                                                                               |
| `variants[].selectedOptions[].value` | string  | Option value             | "Small"                                                                                              |
| `options`                            | array   | Product options          | \[See options example below]                                                                         |
| `options[].name`                     | string  | Option name              | "Size"                                                                                               |
| `options[].optionValues`             | array   | Available option values  | \["Small", "Medium", "Large"]                                                                        |
| `showComparePrice`                   | boolean | Show compare at price    | true                                                                                                 |
| `firstVariant`                       | object  | First available variant  | \[See variant example above]                                                                         |

**NOTE:** Product array structure is not fixed and it can be changed. If you want to change product array, you can visit the [transformProductData hook](/for-developers/section-template/hooks#4-transformproductdata) in the hooks section.

## `translations` Object

The translations object manages multi-language support and customizable text throughout the template.

### Purpose and Usage

The translations object serves multiple purposes:

* Provides language-specific text content
* Enables customizable UI messages
* Supports fallback text handling

### Properties Reference

| Key                  | Type   | Description                       | Default Value                    |
| -------------------- | ------ | --------------------------------- | -------------------------------- |
| `oosText`            | string | Out of stock message              | "Out of stock"                   |
| `addedToCartText`    | string | Success message for cart addition | "Added to cart"                  |
| `atcErrorText`       | string | Error message for cart addition   | "Error adding to cart"           |
| `atcText`            | string | Add to cart button text           | "Add to cart"                    |
| `totalPriceText`     | string | Total price label                 | "Total price"                    |
| `fbtAddToCartText`   | string | Bundle add to cart text           | "Add bundle to cart"             |
| `fbtAddedToCartText` | string | Bundle success message            | "Bundle added to cart"           |
| `discountLabelText`  | string | Discount label text               | "Save {discount}"                |
| `discountSaveText`   | string | Savings amount text               | "Save {amount}"                  |
| `fbtSaveText`        | string | Bundle savings text               | "Save {amount} with this bundle" |
| `new`                | string | New product badge text            | "New"                            |
| `trending`           | string | Trending product badge text       | "Trending"                       |
| `bestseller`         | string | Bestseller badge text             | "Bestseller"                     |

**NOTE:** The `new`, `trending`, and `bestseller` translations are used to display text inside badge on product cards. These badges help highlight product status or popularity to customers. The badges will automatically appear on products based on their tags or other criteria set in the template settings.

## `section` Object

The section object controls how your recommendation section is structured and behaves.

### Purpose and Usage

The section object is crucial for:

* Defining the section's basic structure
* Managing product display layouts
* Controlling interactive features
* Setting up titles and descriptions
* Handling responsive behaviors

### Properties Reference

| Key                 | Type    | Description                      | Example                            |
| ------------------- | ------- | -------------------------------- | ---------------------------------- |
| `id`                | number  | Unique section identifier        | 12345                              |
| `layout`            | string  | Section layout type              | "horizontal\_grid"                 |
| `location`          | string  | Section placement location       | "product\_page"                    |
| `position`          | number  | Section position order           | 1                                  |
| `title`             | string  | Section heading text             | "You May Also Like"                |
| `template`          | string  | Template identifier              | "default"                          |
| `extra`             | object  | Additional section configuration | `{"maxProducts":4}`                |
| `discountConfig`    | object  | Discount settings                | `{"type":"percentage","value":20}` |
| `showDiscountLabel` | boolean | Display discount labels          | true                               |
| `translations`      | object  | Section-specific translations    | `{"discountText":"Save"}`          |
| `templateV3`        | boolean | Using template version 3         | true                               |
| `sectionServeId`    | string  | Unique serve identifier          | "s-12345-abcd-9876"                |
| `pageType`          | string  | Page section appears on          | "product"                          |

## `template` Object

The template object is your control center for visual styling and responsive behavior.

### Purpose and Usage

The template object is responsible for:

* Managing responsive breakpoints
* Controlling visual styling
* Handling product card appearance
* Managing interactive behaviors
* Implementing custom themes

### Properties Reference

| Key                                                   | Type    | Description                              | Example                                   | Default Value |
| ----------------------------------------------------- | ------- | ---------------------------------------- | ----------------------------------------- | ------------- |
| `settings.breakpoints.small`                          | object  | Mobile device settings                   | See breakpoint example                    | {}            |
| `settings.breakpoints.medium`                         | object  | Tablet device settings                   | See breakpoint example                    | {}            |
| `settings.breakpoints.large`                          | object  | Desktop device settings                  | See breakpoint example                    | {}            |
| `settings.breakpoints[].cardsPerView`                 | number  | Number of cards per row                  | `2` (mobile), `3` (tablet), `4` (desktop) | 4             |
| `settings.breakpoints[].gutter`                       | number  | Space between cards in pixels            | `10` (mobile), `20` (desktop)             | 20            |
| `settings.breakpoints[].justifyWidgetTitle`           | enum    | Title alignment                          | `"left"`, `"center"`, `"right"`           | "left"        |
| `settings.breakpoints[].widgetTitleAlignment`         | string  | Widget title positioning                 | `"left"`, `"center"`, `"right"`           | "left"        |
| `settings.breakpoints[].productTitleAlignment`        | string  | Product title alignment                  | `"left"`, `"center"`, `"right"`           | "left"        |
| `settings.breakpoints[].comparePriceVisible`          | boolean | Show/hide compare price                  | `true`, `false`                           | false         |
| `settings.breakpoints[].imageWidth`                   | number  | Product image width                      | `300`                                     | 300           |
| `settings.breakpoints[].imageHeight`                  | number  | Product image height                     | `300`                                     | 300           |
| `settings.breakpoints[].screenSize`                   | number  | Breakpoint width threshold               | `768`                                     | 768           |
| `settings.breakpoints[].maxSectionTitleRows`          | number  | Maximum section title rows               | `2`                                       | 2             |
| `settings.breakpoints[].maxProductTitleRows`          | number  | Maximum product title rows               | `2`                                       | 2             |
| `settings.breakpoints[].widgetTitleFontSize`          | number  | Section title font size                  | `24`                                      | 24            |
| `settings.breakpoints[].productTitleFontSize`         | number  | Product title font size                  | `16`                                      | 16            |
| `settings.breakpoints[].productVendorFontSize`        | number  | Vendor name font size                    | `14`                                      | 14            |
| `settings.productCard.vendorPosition`                 | enum    | Vendor position                          | `"above"`, `"below"`, `"hidden"`          | hidden        |
| `settings.productCard.addToCartMode`                  | enum    | Add to cart behavior                     | `"card_hover"`, `"image_hover"`, `"fix"`  | card\_hover   |
| `settings.productCard.imageHoverMode`                 | enum    | Image hover effect                       | `"secondary"`, `"zoom"`, `"none"`         | secondary     |
| `settings.productCard.imageObjectFit`                 | enum    | Image fitting mode                       | `"contain"`, `"cover"`                    | contain       |
| `settings.productCard.priceCompareMode`               | enum    | Compare price position                   | `"before"`, `"after"`, `"hidden"`         | before        |
| `settings.productCard.discountLabelPosition`          | enum    | Discount badge position                  | `"left"`, `"right"`, `"center"`           | center        |
| `settings.productCard.variantSelectorType`            | enum    | Variant selection UI                     | `"integrated"`, `"selector"`, `"swatch"`  | integrated    |
| `settings.productCard.showQuantitySelector`           | boolean | Show quantity selector                   | `true`, `false`                           | false         |
| `settings.productCard.minQuantity`                    | number  | Minimum order quantity                   | `1`                                       |               |
| `settings.productCard.maxQuantity`                    | number  | Maximum order quantity                   | `10`                                      |               |
| `settings.productCard.imageAspectRatio`               | string  | Image aspect ratio                       | `"1:1"`                                   |               |
| `settings.productCard.showVendor`                     | boolean | Show/hide vendor name                    | `true`                                    |               |
| `settings.productCard.maxTitleLines`                  | number  | Maximum product title lines              | `2`                                       |               |
| `settings.productCard.showDiscountPill`               | boolean | Show/hide discount badge                 | `true`                                    |               |
| `settings.labels`                                     | array   | Product label configurations             | See labels example                        |               |
| `settings.labels[].name`                              | string  | Label name                               | `"new"`, `"sale"`                         |               |
| `settings.labels[].textColor`                         | string  | Label text color                         | `"#ffffff"`                               |               |
| `settings.labels[].backgroundColor`                   | string  | Label background color                   | `"#ff0000"`                               |               |
| `settings.maxLabelsCount`                             | number  | Maximum labels to show                   | `2`                                       |               |
| `settings.swatches`                                   | array   | Swatch configurations                    | See swatches example                      |               |
| `settings.swatches[].type`                            | enum    | Swatch type                              | `"color"`, `"size"`                       |               |
| `settings.swatches[].key`                             | string  | Option key to match                      | `"color"`, `"size"`                       |               |
| `settings.swatches[].optionNames`                     | array   | Valid option names                       | `["Color", "Colour"]`                     |               |
| `settings.carousel.library`                           | string  | Carousel library to use                  | `"swiper"`                                |               |
| `settings.carousel.showPagination`                    | boolean | Show carousel pagination                 | `true`, `false`                           | false         |
| `settings.amazonBoughtTogether.priceCompareAtMode`    | enum    | Bundle price compare mode                | `"before"`, `"after"`                     | before        |
| `settings.amazonBoughtTogether.buttonBackgroundColor` | string  | Bundle button background                 | `"#000000"`                               |               |
| `translations`                                        | object  | Section-specific translations            | See translations object                   |               |
| `settings.intlOptions`                                | object  | Locale based currency formatting options | Intl DOM API options                      | {}            |

**NOTE:**

1. `addToCartMode` behavior options:
   * `card_hover`: Add to cart button slides up from the bottom of the card when hovering over the product card
   * `image_hover`: Add to cart button appears over the product image on hover
   * `fix`: Add to cart button is always visible below the product details
2. The `translations` key in this table refers to the same structure as the [translations object](/for-developers/section-template/schemas#translations-object).
3. Example intlOptions:

   ```json
   {
      "en": {
         "style": "currency",
         "currency": "USD",
         "minimumFractionDigits": 2,
         "maximumFractionDigits": 2,
         "currencyDisplay": "symbol"
      }
   }
   ```

   This configuration allows for customization of:

   * Currency display format
   * Decimal place handling
   * Currency symbol presentation
   * Localized number formatting

## `clientInfo` Object

The clientInfo object provides information about the client's device and viewport settings.

### Purpose and Usage

The clientInfo object is essential for:

* Responsive design decisions
* Image optimization

### Properties Reference

| Key                | Type   | Description                               | Example                                                                |
| ------------------ | ------ | ----------------------------------------- | ---------------------------------------------------------------------- |
| `clientWidth`      | number | Current viewport width in pixels          | 1440                                                                   |
| `clientHeight`     | number | Current viewport height in pixels         | 900                                                                    |
| `devicePixelRatio` | number | Device pixel ratio for image optimization | 2                                                                      |
| `userAgent`        | string | Browser's user agent string               | "Mozilla/5.0 (Macintosh; Intel Mac OS X 10\_15\_7) AppleWebKit/537.36" |

## `config` Object

The config object manages global configuration settings for the recommendation section.

### Purpose and Usage

The config object controls:

* Integration enablement and management
* Third-party app configurations
* Feature availability
* App-specific settings

### Properties Reference

| Key                          | Type   | Description                       | Possible Values                                                                                                   |
| ---------------------------- | ------ | --------------------------------- | ----------------------------------------------------------------------------------------------------------------- |
| `config.integrationsEnabled` | array  | List of enabled integration slugs | `["judge_me", "loox", "stamped", "rivyo", "okendo", "ali", "ssw", "ryviu", "spr", "lai", "junip"]`                |
| `config.productReviewApp`    | string | Selected product review app name  | `"judge_me", "loox", "stamped", "rivyo", "okendo", "ali", "ryviu", "lai", "junip" (or none if not using reviews)` |
| `config.swatchApp`           | string | Selected swatch app name          | `"variant_options_swatch_king", "csp" (or none if not using swatches)`                                            |

## Support

For help with template customization or troubleshooting, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Tags
Source: https://docs.glood.ai/for-developers/section-template/tags

Learn about available tags for extending section template functionality

# Section Template Tags

Tags in Glood.AI section templates provide additional functionality and integrations for your product recommendations.

## Available Tags

### Product Review Integration

#### product\_ratings

Integrates product reviews from supported review apps.

**Parameters:**

* `product_id`: The product ID to fetch reviews for

**Supported Apps:**

* Judge.me
* Loox

**Example:**

```liquid
{% product_ratings product_id: product.id %}
```

**Output Examples:**

For Judge.me:

```html
<div class="jdgm-widget jdgm-preview-badge" data-id="1234567890" data-auto-install="false"></div>
```

For Loox:

```html
<div class="loox-widget" data-product-id="1234567890"></div>
```

## Using Tags in Templates

Here's an example of using tags in a product card:

```liquid
<div class="product-card">
  <img src="{{ product.featured_image | optimise_image: client_info, settings }}" alt="{{ product.title }}">
  <h3>{{ product.title }}</h3>
  <div class="price">{{ product.price | money_formatter: glood }}</div>
  
  <div class="reviews">
    {% product_ratings product_id: product.id %}
  </div>
</div>
```

## Tag Configuration

### Review App Integration

To use the review app integration:

1. Configure your review app in the Glood.AI dashboard
2. Add the appropriate review app scripts to your theme
3. Use the tag in your section templates

The tag will automatically:

* Detect the configured review app
* Generate appropriate widget markup
* Handle missing configurations gracefully

## Best Practices

1. Always check if review app is configured before using the tag
2. Handle cases where product ID might be missing
3. Consider loading performance of review widgets
4. Test integration with different review app configurations
5. Provide fallback content when review app is not available

## Error Handling

The tag handles various error cases:

* No review app configured: Shows HTML comment
* Missing product data: Shows HTML comment
* Unsupported review app: Shows HTML comment

## Support

For questions about tags or custom tag development, contact our support team at [support@glood.ai](mailto:support@glood.ai)


# Activate Glood.AI
Source: https://docs.glood.ai/get-started/activate-glood-store

Enable Glood.AI recommendations on your Shopify store

# Activating Glood.AI

After installing Glood.AI from the Shopify App Store, you'll need to activate it on your store using Shopify's Theme Editor. Follow these simple steps:

## Enable the App Embed Block

1. Go to your Shopify admin panel and navigate to **Online Store** > **Themes**

2. Find your current live theme and click **Customize** to open the Theme Editor

3. In the Theme Editor, click on **Theme Settings** at the bottom of the left navigation panel

4. Select **App embeds** from the settings menu

5. Find "Glood.AI Recommendations" in the list and toggle it **ON**

6. Click **Save** in the top-right corner to publish your changes

<Note>
  The app embed block must be enabled for Glood.AI recommendations to appear on your store. If you switch themes later, you'll need to enable the app embed block again on the new theme.
</Note>

## Verify Installation

After enabling the app embed:

1. Visit your store's frontend
2. Check that Glood.AI recommendation sections appear where configured
3. Verify that product recommendations are loading correctly

If you don't see recommendations appearing, try:

* Refreshing your browser cache
* Waiting a few minutes for changes to propagate
* Checking that you saved the Theme Editor changes
* Contacting [support@glood.ai](mailto:support@glood.ai) if issues persist

## Next Steps

Once Glood.AI is activated, you can:

* Create your first personalized recommendations section
* Customize the appearance of recommendation widgets
* Configure advanced settings and targeting rules
* Track performance in the Glood.AI dashboard


# Introduction to Glood.AI
Source: https://docs.glood.ai/get-started/introduction

Welcome to Glood.AI - The AI-powered Personalized Recommendation Engine for Shopify Plus stores

## Getting Started

Follow these steps to start personalizing your Shopify Plus store:

<Steps>
  <Step title="Install Glood.AI">
    Install <a href="https://apps.shopify.com/recommendation-kit">Glood.AI directly from the Shopify App Store</a> to get started with AI-powered recommendations and upselling.
  </Step>

  <Step title="Enable in Theme">
    Enable the Glood.AI application in your Shopify theme settings to start personalizing your store.
  </Step>

  <Step title="Create Product Recommendations">
    Set up your first AI product recommendation section to start showing personalized suggestions to your customers.
  </Step>

  <Step title="Customize Design">
    Use our Visual Editor or Templates to customize the look and feel of your recommendations to match your brand.
  </Step>

  <Step title="Create Bundles">
    Build your first product bundle to increase average order value and encourage multi-product purchases.
  </Step>

  <Step title="Cart Upselling">
    Integrate personalized upsell recommendations into your cart page to boost sales.
  </Step>

  <Step title="Checkout Upselling">
    Add upsell offers to your checkout process to maximize conversion opportunities.
  </Step>
</Steps>

<CardGroup cols={2}>
  <Card title="Quick Start Guide" icon="rocket" href="/get-started/quickstart">
    Get up and running with Glood.AI in minutes
  </Card>

  <Card title="API Reference" icon="code" href="/api-reference/introduction">
    Integrate Glood.AI programmatically using our APIs
  </Card>
</CardGroup>


# Create First Personalized Recommendations Section
Source: https://docs.glood.ai/guides/create-first-personalized-recommendations-section

Learn how to add AI-powered product recommendations to your Shopify store

## Setup your store

Learn how to configure and deploy personalized product recommendations on your Shopify store.

### Configure and preview

<AccordionGroup>
  <Accordion icon="shop" title="Install the Glood.AI app">
    To get started with Glood.AI recommendations, install our app from the
    [Shopify App Store](https://apps.shopify.com/recommendation-kit). Once installed,
    you'll have access to our dashboard where you can configure your recommendation sections
    and view analytics.
  </Accordion>

  <Accordion icon="sparkles" title="Create a recommendation section">
    Create your first recommendation section by selecting a recommendation type and placement:

    1. From your Shopify admin, go to Apps > Glood.AI
    2. Click "Create New Section"
    3. Choose a recommendation type (e.g. "Similar Products", "Frequently Bought Together")
    4. Select where you want the section to appear on your store
    5. Customize the appearance and behavior of your recommendations
  </Accordion>
</AccordionGroup>

### Deploy your recommendations

<AccordionGroup>
  <Accordion icon="code" title="Add the section to your theme">
    Once you've created a recommendation section, you'll need to add it to your theme.
    We provide multiple integration options:

    1. Automatic installation through our app
    2. Manual installation using our snippet
    3. Headless integration using our API
  </Accordion>

  <Accordion icon="rocket" title="Publish your changes">
    After adding the section to your theme, publish your changes for them to go live.
    You can preview the recommendations on your store before publishing. Our AI will
    automatically start personalizing recommendations based on your store's data and
    customer behavior.
  </Accordion>
</AccordionGroup>

## Enhance your recommendations

Customize and optimize your recommendation sections to maximize their impact.

<CardGroup>
  <Card title="Customize Appearance" icon="paintbrush" href="/settings/global">
    Style your recommendation sections to match your store's branding.
  </Card>

  <Card title="API Integration" icon="square-code" href="/api-reference/endpoint/automatic-recommendations">
    Use our API for custom implementations and headless commerce.
  </Card>

  <Card title="Track Performance" icon="chart-mixed" href="/analytics/supported-integrations">
    Monitor engagement and conversion metrics for your recommendations.
  </Card>

  <Card title="Advanced Features" icon="wand-magic-sparkles" href="/features/ai-personalized-recommendations">
    Explore AI-powered personalization and merchandising features.
  </Card>
</CardGroup>


# Custom Web Pixel Events
Source: https://docs.glood.ai/guides/glood-custom-web-pixel-events

Learn about the custom Web Pixel events supported by Glood.AI

## Overview

Glood.AI's Web Pixel extension includes custom events to provide enhanced personalization and analytics capabilities. This guide covers all the custom Web Pixel events that our platform supports.

### What are Glood.AI Custom Web Pixel Events?

Glood.AI Custom Web Pixel events are specialized user interactions and activities that occur on your Shopify store. These events help track customer behavior specific to Glood.AI's personalization features, enabling:

* Advanced customer preference tracking
* Enhanced personalization capabilities
* Detailed analytics and insights
* Optimized recommendation performance

## Supported Events

The following section details all the custom events supported by Glood.AI's Web Pixel extension.

<AccordionGroup>
  <Accordion icon="sliders" title="Customer Preferences">
    Events for tracking and storing customer preferences for personalization.

    ### Event: `glood:customer_preference`

    This event is triggered to store customer preferences for personalization purposes within the **Glood.AI** platform.

    ### Event Structure

    #### Event Name

    ```js
    glood:customer_preference
    ```

    #### Payload

    The payload contains a structured object with the following fields:

    | Field         | Type             | Description                                                   |
    | ------------- | ---------------- | ------------------------------------------------------------- |
    | `preferences` | Array of Objects | An array of key-value pairs representing customer preferences |

    #### Preferences Object

    Each object in the `preferences` array contains:

    | Field   | Type   | Description                                                                 |
    | ------- | ------ | --------------------------------------------------------------------------- |
    | `key`   | String | The key representing the type of preference (e.g., "tags", "categories")    |
    | `value` | String | A string representing the value associated with the key (e.g., "tag1,tag2") |

    ### Example Usage

    ```javascript
    Shopify.analytics.publish('glood:customer_preference', {
        preferences: [
            { key: 'tags', value: "tag1,tag2" }
        ]
    });
    ```

    ### Purpose

    The primary purpose of this event is to store customer preferences in **Glood.AI** for:

    * **Personalization**: Enhance customer experiences with tailored content and recommendations
    * **Behavior Analysis**: Understand customer behavior through preference analysis
    * **Targeted Campaigns**: Create specific campaigns based on customer preferences

    ### Use Cases

    * Storing customer-selected tags, categories, or other preferences
    * Personalizing product recommendations or content on a Shopify store
    * Supporting segmentation and analytics within **Glood.AI**
  </Accordion>

  <Accordion icon="chart-mixed" title="Section Interaction Events">
    Events for tracking user interactions with Glood recommendation sections.

    ### Event: `glood:section:click`

    This event is triggered when a user clicks on a product within a Glood recommendation section.

    ### Event Structure

    #### Event Name

    ```js
    glood:section:click
    ```

    #### Payload

    The payload contains information about the clicked product and section:

    | Field                  | Type           | Description                                               |
    | ---------------------- | -------------- | --------------------------------------------------------- |
    | `page`                 | String         | The page ID where the click occurred                      |
    | `parent.productId`     | String \| null | ID of the current product page (if applicable)            |
    | `parent.variantId`     | String \| null | ID of the current product variant (if applicable)         |
    | `products[].productId` | String         | ID of the clicked product                                 |
    | `products[].variantId` | String         | ID of the clicked product variant                         |
    | `section`              | String         | ID of the Glood recommendation section                    |
    | `sectionServeId`       | String         | Unique serve ID for the section render                    |
    | `requestId`            | String         | Unique request ID from the Glood recommendations API call |

    ### Example Usage

    ```javascript
    Shopify.analytics.publish('glood:section:click', {
      page: "55380",
      parent: {
        productId: null,
        variantId: null
      },
      products: [{
        productId: "4594143232103",
        variantId: "32389151621223"
      }],
      section: "216700",
      sectionServeId: "98ae55db-8e25-46be-956e-2024d820edb4",
      requestId: "1734410855-8dd0e6a0-4365-489b-b622-2fedca7129c0"
    });
    ```

    ### Event: `glood:section:add_to_cart`

    This event is triggered when a product is added to cart from a Glood recommendation section.

    ### Event Structure

    #### Event Name

    ```js
    glood:section:add_to_cart
    ```

    #### Payload

    The payload contains information about the added product and section:

    | Field                  | Type           | Description                                               |
    | ---------------------- | -------------- | --------------------------------------------------------- |
    | `page`                 | String         | The page ID where the add to cart occurred                |
    | `parent.productId`     | String \| null | ID of the current product page (if applicable)            |
    | `parent.variantId`     | String \| null | ID of the current product variant (if applicable)         |
    | `products[].productId` | String         | ID of the product added to cart                           |
    | `products[].variantId` | String         | ID of the product variant added to cart                   |
    | `products[].quantity`  | Number         | Quantity of the product added to cart                     |
    | `section`              | String         | ID of the Glood recommendation section                    |
    | `sectionServeId`       | String         | Unique serve ID for the section render                    |
    | `requestId`            | String         | Unique request ID from the Glood recommendations API call |

    ### Example Usage

    ```javascript
    Shopify.analytics.publish('glood:section:add_to_cart', {
      page: "55380",
      parent: {
        productId: null,
        variantId: null
      },
      products: [{
        productId: "4594143232103",
        variantId: "32389151621223",
        quantity: 1
      }],
      section: "216700",
      sectionServeId: "98ae55db-8e25-46be-956e-2024d820edb4",
      requestId: "1734410855-8dd0e6a0-4365-489b-b622-2fedca7129c0"
    });
    ```

    ### Purpose

    These events help track user interactions with Glood recommendation sections to:

    * **Measure Engagement**: Track clicks and conversions from recommendation sections
    * **Analyze Performance**: Evaluate the effectiveness of different recommendation strategies
    * **Improve Recommendations**: Use interaction data to enhance recommendation algorithms

    ### Use Cases

    * Tracking which recommended products users click on
    * Measuring conversion rates from recommendation sections
    * Analyzing user behavior patterns with recommended products
  </Accordion>
</AccordionGroup>


# Introduction
Source: https://docs.glood.ai/guides/introduction

Start building awesome documentation in under 5 minutes

## Setup your development

Learn how to update your docs locally and deploy them to the public.

### Edit and preview

<AccordionGroup>
  <Accordion icon="github" title="Clone your docs locally">
    During the onboarding process, we created a repository on your Github with
    your docs content. You can find this repository on our
    [dashboard](https://dashboard.mintlify.com). To clone the repository
    locally, follow these
    [instructions](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)
    in your terminal.
  </Accordion>

  <Accordion icon="rectangle-terminal" title="Preview changes">
    Previewing helps you make sure your changes look as intended. We built a
    command line interface to render these changes locally. 1. Install the
    [Mintlify CLI](https://www.npmjs.com/package/mintlify) to preview the
    documentation changes locally with this command: `npm i -g mintlify`
    2\. Run the following command at the root of your documentation (where
    `mint.json` is): `mintlify dev`
  </Accordion>
</AccordionGroup>

### Deploy your changes

<AccordionGroup>
  <Accordion icon="message-bot" title="Install our Github app">
    Our Github app automatically deploys your changes to your docs site, so you
    don't need to manage deployments yourself. You can find the link to install on
    your [dashboard](https://dashboard.mintlify.com). Once the bot has been
    successfully installed, there should be a check mark next to the commit hash
    of the repo.
  </Accordion>

  <Accordion icon="rocket" title="Push your changes">
    [Commit and push your changes to
    Git](https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository#about-git-push)
    for your changes to update in your docs site. If you push and don't see that
    the Github app successfully deployed your changes, you can also manually
    update your docs through our [dashboard](https://dashboard.mintlify.com).
  </Accordion>
</AccordionGroup>

## Update your docs

Add content directly in your files with MDX syntax and React components. You can use any of our components, or even build your own.

<CardGroup>
  <Card title="Style Your Docs" icon="paintbrush" href="/settings/global">
    Add flair to your docs with personalized branding.
  </Card>

  <Card title="Add API Endpoints" icon="square-code" href="/api-playground/configuration">
    Implement your OpenAPI spec and enable API user interaction.
  </Card>

  <Card title="Integrate Analytics" icon="chart-mixed" href="/analytics/supported-integrations">
    Draw insights from user interactions with your documentation.
  </Card>

  <Card title="Host on a Custom Domain" icon="browser" href="/settings/custom-domain/subdomain">
    Keep your docs on your own website's subdomain.
  </Card>
</CardGroup>


# null
Source: https://docs.glood.ai/how-it-works/bundles/introduction





# null
Source: https://docs.glood.ai/how-it-works/introduction





# null
Source: https://docs.glood.ai/how-it-works/recommendations/bought-together





# null
Source: https://docs.glood.ai/how-it-works/recommendations/introduction





# null
Source: https://docs.glood.ai/how-it-works/recommendations/similar-products





# Introduction to Glood.AI
Source: https://docs.glood.ai/introduction

Glood.AI is an AI-powered Personalized Recommendation Engine for Shopify Plus. Learn how to get started.

<img className="block dark:hidden" src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/glood-header.webp" alt="Hero Light" />

<img className="hidden dark:block" src="https://mintlify.s3.us-west-1.amazonaws.com/gloodai/images/hero-dark.svg" alt="Hero Dark" />

## Let's look at top features of Glood.AI

Glood.AI is a complete Conversion Optimization Platform for Shopify Plus. It includes a Personalized Recommendation Engine, AI Search & Merchendizing, Upselling, Bundles, A/B Testing, Visual Editor and more.

<CardGroup cols={3}>
  <Card title="Personalized Recommendation Engine" icon="image" href="https://mintlify.com/docs/development">
    Preview your changes before you push to make sure they're perfect
  </Card>

  <Card title="AI Search & Merchendizing" icon="image" href="https://mintlify.com/docs/development">
    Preview your changes before you push to make sure they're perfect
  </Card>

  <Card title="Checkout Upselling" icon="image" href="https://mintlify.com/docs/development">
    Preview your changes before you push to make sure they're perfect
  </Card>

  <Card title="Product Page Personalization" icon="image" href="https://mintlify.com/docs/development">
    Preview your changes before you push to make sure they're perfect
  </Card>

  <Card title="Cart Upselling" icon="image" href="https://mintlify.com/docs/development">
    Preview your changes before you push to make sure they're perfect
  </Card>

  <Card title="Bundles" icon="image" href="https://mintlify.com/docs/development">
    Preview your changes before you push to make sure they're perfect
  </Card>
</CardGroup>

## Setting up

The first step to integrating Glood.AI's personalized recommendation engine is connecting your Shopify Plus store. <a href="https://apps.shopify.com/recommendation-kit">Install Glood.AI using the Shopify App Store</a>. Once that is done then you can start building your first AI Personalized Recommendation section to boost AoV & Conversions.

<CardGroup cols={2}>
  <Card title="Edit Your Docs" icon="pen-to-square" href="https://mintlify.com/docs/quickstart">
    Get your docs set up locally for easy development
  </Card>

  <Card title="Preview Changes" icon="image" href="https://mintlify.com/docs/development">
    Preview your changes before you push to make sure they're perfect
  </Card>
</CardGroup>

## Make it yours

Update your docs to your brand and add valuable content for the best user conversion.

<CardGroup cols={2}>
  <Card title="Customize Style" icon="palette" href="https://mintlify.com/docs/settings/global">
    Customize your docs to your company's colors and brands
  </Card>

  <Card title="Reference APIs" icon="code" href="https://mintlify.com/docs/api-playground/openapi">
    Automatically generate endpoints from an OpenAPI spec
  </Card>

  <Card title="Add Components" icon="screwdriver-wrench" href="https://mintlify.com/docs/components/accordion">
    Build interactive features and designs to guide your users
  </Card>

  <Card title="Get Inspiration" icon="stars" href="https://mintlify.com/customers">
    Check out our showcase of our favorite documentation
  </Card>
</CardGroup>


# Release History
Source: https://docs.glood.ai/releases

Track the evolution of Glood.AI through our release timeline

<Steps>
  <Step stepNumber="5" title="V3 Sections & Enhanced Storefront Features">
    <div className="text-gray-500">Released on April 02, 2025</div>

    ### V3 Sections Visual Editor

    Introducing our new V3 sections visual editor that revolutionizes section management:

    * **Instant Styling Updates** – Styling changes reflect instantly 99% of the time, improving the user experience
    * **New Design** – The overall design has been updated, bringing a fresh look and improved usability
    * **Global Settings in V3 Editor** – Unlike the old editor, which had settings based on layout type, the V3 Visual Editor applies settings globally

    ### Responsive Layout Configuration

    New screen size-based layout controls for better mobile optimization:

    * **Screen Size-Based Section Layout Configuration** – Customize section layouts for different screen sizes
    * **Custom Positioning of Sections** – Adjust section placement dynamically based on screen size

    ### Enhanced Swatch System

    Improved product variant selection with image support:

    * **Image Support in Swatches** – Now, product variants can include images in swatches, providing a more visual and intuitive selection experience

    ### V3 Storefront Improvements

    New filters and analytics integration:

    * **Filter Additions** – New filters `file_url` (direct file access in templates) and `handleize` (URL-friendly text conversion) added
    * **Mixpanel Integration** – Enables tracking of user behavior and conversions
  </Step>

  <Step stepNumber="4" title="Enhanced Visual Editor & Preview Features">
    <div className="text-gray-500">Released on March 11, 2025</div>

    ### Visual Editor Improvements

    We've added new features to improve the section management experience in the visual editor:

    #### Error Card Display

    * **Visual Feedback** – New error card appears when manually placed sections fail to load
    * **Comprehensive Error Handling** – Displays when:
      * Section fails to load
      * Section ID doesn't exist
      * Section is disabled
      * Section is recently viewed or excluded from the page
    * **Editor-Only Display** – Error cards are only visible in the visual editor, not on the live store

    ### Preview Functionality

    Enhanced preview capabilities for better testing and validation:

    * **All Section Preview** – New option to preview disabled sections
    * **Visual Editor Support** – Toggle 'Show disabled widgets in Shopify theme editor' to view disabled sections
    * **URL Parameter Preview** – Add `rk_preview=true` to URL to preview disabled sections on live store
    * **Testing Made Easy** – Perfect for validating sections before enabling them
  </Step>

  <Step stepNumber="3" title="Layout for different breakpoints">
    <div className="text-gray-500">Released on March 07, 2025</div>

    ### Template Enhancements

    We've introduced several powerful updates to improve template customization and section management:

    #### New Variant Selector Option

    * **Swatch with ATC** – New `swatch_with_atc` option in `productCard.variantSelectorType`
    * **Streamlined Purchase Flow** – Automatically adds product to cart on swatch change
    * **Clean Interface** – Hidden ATC button for better visual experience

    #### Currency Formatting

    Added flexible currency formatting using Intl DOM API:

    ```json
    {
      "intlOptions": {
        "en": {
          "currency": "USD"
        },
        "hi": {
          "currency": "GBP"
        },
        "currency": "INR"
      }
    }
    ```

    ### Section Management Updates

    * **Automatic Placement Control** – Option to prevent section sending when automatic placement is disabled
    * **Responsive Layouts** – Moved breakpoint-specific layout configuration from template to section extras
    * **Enhanced Customization** – Configure different layouts for various breakpoints directly from the dashboard's section details page
  </Step>

  <Step stepNumber="2" title="Section Status Check, Bundle Analytics & Section Design Update">
    <div className="text-gray-500">Released on March 3, 2025</div>

    ### Section Status Check

    We've launched a simple yet powerful tool that helps you instantly check if your sections are working perfectly.

    #### What You Can Check

    * **Store Accessibility** – Ensure your store is properly connected.
    * **App Block Placement** – Confirm that sections are correctly installed in your theme.
    * **Section Rendering** – Verify that sections are displaying as intended.
    * **Optimal Section Placement** – Check if your sections are positioned for the best conversion results.
    * **Recommendation Health** – Ensure product recommendations are working properly.
    * **AI Recommendations** – Confirm whether AI-powered recommendations are enabled.
    * **Plan Availability** – Check if your current plan supports this section.
    * **Serve Limit** – Ensure you have available section views.

    ### Bundle Analytics Improvements

    Your Bundle Analytics just got a major speed boost and some great improvements:

    * **Faster Data Fetching** – Now powered by an **elastic query system**, ensuring rapid and efficient data retrieval.
    * **Seamless Navigation** – The interface now follows a structure similar to **Checkout Upsell Analytics**, making it easier to use.
    * **Fixed Date Picker Issue** – Previously, selecting the same start and end date failed to trigger an API call. This has now been resolved.

    ### Section Design Updates

    We've refreshed the section design to match Shopify's familiar Product Details layout:

    * **Familiar Layout** – Feels just like the rest of your Shopify admin
    * **Better Collection Picking** – Now uses correct collection handles
    * **Improved Recommendations** – Fixed the maximum recommendation count
  </Step>

  <Step stepNumber="1" title="Template Creation: New & Improved">
    <div className="text-gray-500">Released on February 16, 2025</div>

    ### What's New

    Creating templates is now easier and more flexible than ever:

    * **Fresh New Look** – Clean, modern design that's easier to use
    * **Version Options** – Switch between template versions with one click
    * **Smooth Transitions** – A single section can now include **both old and new template versions**, making store migrations effortless.

    ### Why You'll Love This

    Create and manage templates more easily, and transition to newer versions at your own pace without disrupting your store.
  </Step>
</Steps>


