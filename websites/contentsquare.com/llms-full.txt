# Merchandising implementation

URL: https://docs.contentsquare.com/en/catalog-merchandising/

This page helps make your website product catalog available to sync with Merchandising. Keeping your catalog up to date and reflecting your live site is key to getting the full value from Merchandising. 
There are two parts to this process and both need to be completed as soon as possible: 

- Implementing Merchandising web tracking on your site
- Making your product catalog available to Contentsquare 

## Implementing web tracking

You'll need to complete the following key tasks:

- Use our [Sending products purchased documentation](/en/web/sending-ecommerce-commands/#sending-a-transaction-for-merchandising) to implement the tracking of the product purchased. 
- Use our [Add to Cart documentation](/en/web/sending-an-add-to-cart/) to send a product’s exact SKU to Merchandising whenever a user adds it to their cart. 

## Content needed from your catalog

To benefit from Merchandising’s capabilities you’ll also need to provide an updated catalog version that contains all products visible on your site, at all times. Contentsquare is only able to capture data about a product if it is in your product catalog.

![](~/assets/catalog-merchandising/merch-catalog.png)

### Products to include

- Any product that is visible on the site should be in the product catalog (even if they are out of stock).
- If you are launching a new product, make sure it is in your product catalog before launching it on your site. 

### Catalog format

The product catalog must be provided in either `.CSV`, `.TSV`, `.XML`, or Google Sheets format.

:::note
For Google Sheets, the catalog must be accessible publicly.
:::

### Catalog content

We will be able to map the name of the columns of your catalog with our system, the wording for the information below is just an example.

The catalog must contain, at least, the following information:

|Information|Purpose|Validation|
|--- |--- |--- |
|SKU|Identifies the product SKU.|It must exactly match the SKU that is pushed in the Contentsquare Tag for 'Transactions' and 'Add to Cart'.<br/><br/>It has to be unique.|
|Model ID|In case of products that have variants, this ID must be common to the SKUs (variants) of the same product.<br/><br/>If it’s necessary, Contentsquare will provide all Merchandising data aggregated on the Model ID.||
|Name|Identifies the product name<br/><br/>It's needed to display the name of the product in the Merchandising solution.|It’s preferable that it is unique to avoid confusion with another product.|
|Category|Identifies the product category.<br/><br/>It's needed to classify the products according to their category tree.|It has to use the following format: Shoes > Men > Boots<br/><br/>nb: the ">" separator used can be different<br/><br/>We can only have 1 categorization per product|
|URL|Identifies the product page URL on the site<br/><br/>It can be used to match the visits and appearance of the product on the website with the product in the catalog|The URL must be complete (protocol + domain + path)<br/><br/>It has to match with the website's product page URL<br/><br/>The URL will be stripped of queries and fragments|
|Image URL|URL link to the product image<br/><br/>It's needed to display the product image in the Merchandising solution|Only 1 URL should be indicated in the field<br/><br/>The URL must be complete (protocol + domain + path)|
|Brand|Indicates the name product brand<br/><br/>It allows to have aggregated KPIs for a given brand||
|Price|Indicates the unit price of the product.<br/><br/>If the product is discounted, the discounted price can be placed in this field or put in another field.<br/><br/>It's needed to run competitive data analysis, comparing your prices with competitors'||
|Shipping fees|Indicates the product's shipping fees<br/><br/>It's only needed for competitive data analysis to compare shipping fees with your competitors'|It's optional|
|gtin / EAN / UPC|Indicates the EAN / GTIN / UPC of the product. It’s a unique id of the product on the market<br/><br/>It's used to match products with your competitors' when running competitive analysis.|It has to be unique<br/><br/>We currently support the following formats: EAN, UPC, GS1, ITF|
|Currency|Identifies the product price's currency||
|Stock availability<br/><br/>(mandatory if you want to benefit from stock insights, otherwise optional)|Indicates if the product is "in stock" or "out of stock"||
|Stock quantity<br/><br/>(mandatory if you want to benefit from stock insights, otherwise optional)|Indicates the stock quantity of the product|It must be a number|

### Provide your product catalog on a feed

Contentsquare will synchronize your product catalog every hour to provide you with the most accurate insights. **Before Merchandising can sync with your catalog, you’ll need to make it available on a feed.**

Make your catalog available on a feed using either of these options:

- Provide a URL link that downloads the catalog
- [Upload it on Contentsquare’s Secured FTP](#upload-your-catalog-on-contentsquares-secured-ftp)

Once you have chosen a method, let our Implementation Team know so they can assist you.

#### Upload your catalog on Contentsquare's secured FTP

:::note
With this option, you are responsible for uploading and maintaining your catalog up-to-date.
:::

Provide the Implementation team with:

- The IP address from which the catalog will be uploaded and to allowlist.
- A public key in OpenSSH format, for authentication purposes.
- The exact name of the catalog file that is to be uploaded.

In turn, Contentsquare will provide you with:
- The SFTP URL.
- The username (project ID) to perform the upload.

To update the last-in-date catalog, use your private key to authenticate and upload the file.

---

# Collected Data

URL: https://docs.contentsquare.com/en/webview-tracking-web-tag/collected-data/

Once communication is established, the tag will start tracking the following events and pass them over to the SDK:
- **Pageviews** manually triggered (with the dedicated command)
- **Transactions** manually triggered (with the dedicated command)
- **Dynamic variables** manually triggered (with the dedicated command)
- **Gestures** automatically detected: _tap, long press, scrolls and swipes (with finger direction)_
- **HTML DOM** and **DOM Mutation** when Session Replay is activated
- **HTML DOM** when a snapshot of the screen is triggered by the SDK _(see Enable Snapshot Mode in iOS and Android docs)_.

---

# Error Analysis

URL: https://docs.contentsquare.com/en/webview-tracking-web-tag/error-analysis/

<Render file="en/plans/dem"/>
Contentsquare allows you to collect similar error types as in a web project: JS errors, API errors and Custom errors.

## WebView error tracking prerequisites

In order to collect WebView errors, Error Analysis needs to be set up on the native side. See the dedicated documentation: [iOS](/en/ios/error-analysis/) and [Android](/en/android/error-analysis/).

## How WebView error tracking works
Similar to analytics events and Session Replay, once set in WebView mode, the web tracking tag will collect errors and pass them to the native SDK, which will then send them to the dedicated Apps project.

Each error type has a collection setting that needs to be enabled by your Contentsquare Implementation manager. 

## JS errors
Similar to web context, JS errors are collected out of the box if the collection is enabled in the web project associated with the tracking tag loaded in the page.

Find more information on how Contentsquare handles JS errors in our [JavaScript errors Help Center article](https://support.contentsquare.com/hc/en-gb/articles/360014703659).

## API errors
Similar to web context, API errors are collected out of the box if the collection is enabled in the web project associated with the tracking tag loaded in the page.

Find more information on how Contentsquare handles API errors in our [Analyzing API errors Help Center article](https://support.contentsquare.com/hc/en-gb/articles/360019857800).

### Removing Personal Data in request URL path
By default, the API errors feature collects the URL path of the failed API requests. To prevent the collection of Personal Data in the URL path, you can rewrite the request URL path.
Follow the web documentation dedicated section: [Removing Personal Data in API errors](/en/web/personal-data-handling/#removing-personal-data-in-api-errors).

### API Troubleshooting Details

:::note
  This is an on-demand feature. Reach out to your Contentsquare contact to enable it.
:::

API errors troubleshooting details enables you to collect more information about API errors so you can troubleshoot errors faster.

With this feature you will be able to see three types of additional API error details in the Event Stream of Session Replay.

- The HTTP headers of the request and the response.
- The body (the data sent by the request or received in the response).
- The query parameters for the URL of the requested endpoint.

#### Where to configure API troubleshooting details
Similar to the collection settings, the Tag loaded in WebView mode will apply the API troubleshooting details rules inherited from the configuration defined in the associated web project.

See [API Troubleshooting Details](https://support.contentsquare.com/hc/en-gb/articles/6553281476124) for more details.

:::warning
The encryption used for WebView API errors will be the one from the mobile project.
:::

## Custom errors
Follow the web documentation section to implement custom error collection: [Sending custom errors](/en/web/sending-custom-errors/).

Find more information on how Contentsquare handles Custom errors in our [Custom errors Help Center article](https://support.contentsquare.com/hc/en-gb/articles/5584481982364).

## Validate WebViews error collection

 If in-app features are enabled, you will be able to see the WebView errors collected as events in the SDK Logs and Log Visualizer.
 See [iOS Debugging and Logging](/en/ios/in-app-features/#debugging-and-logging) and [Android Debugging and Logging](/en/android/in-app-features/#debugging-and-logging) sections for more details about debugging and logging.

### WebView errors in SDK Logs

Check out SDK logs to validate WebView errors are properly collected:

<Tabs syncKey="native">
  <TabItem label="Android">
    ```kotlin
    CSLIB: API Error (from WebView) - GET 401 https://api.client.com
    CSLIB: JS Error (from WebView) - <Error name> - <Message>
    CSLIB: Custom Error (from WebView): <Message> - Attributes: [key:value, key:value...]
    ```
  </TabItem>
  <TabItem label="iOS">
    ```swift
    CSLIB ℹ️ Info: API Error (from WebView) - GET 401 https://api.client.com
    CSLIB ℹ️ Info: JS Error (from WebView) - <Error name> - <Message>
    CSLIB ℹ️ Info: Custom Error (from WebView): <Message> - Attributes: [key:value, key:value...]
    ```
  </TabItem>
</Tabs>

### WebView errors in Log Visualizer

Use [Log Visualizer](https://support.contentsquare.com/hc/en-gb/articles/4408408544530) from the Experience Analytics project to validate WebView errors are properly collected and received.

---

# WebView Tracking

URL: https://docs.contentsquare.com/en/webview-tracking-web-tag/

## Introduction
To track WebViews in your app using Contentsquare, you'll need to configure the tracking tag and the mobile SDK to work together.

## Context

### Your page is only accessible from WebView

This means you only display the webpage in your mobile app using a WebView. The mobile SDK will automatically inject the tracking tag into the WebView. You only need to track the WebView through the mobile code, and you're all set! Below are the implementation guides for each platform:
- 📚 [iOS](/en/ios/track-webviews/)
- 📚 [Android](/en/android/track-webviews/)
- 📚 [Flutter](/en/flutter/track-webviews/)
- 📚 [React Native](/en/react-native/track-webviews/)

:::note
  The automatic tag injection is available from SDK versions iOS 4.35.1, Android 4.31.0, Flutter plugin 3.13.0, and React Native bridge 4.8.0. If your installation doesn't meet this requirement, you need to configure the tracking as described below.  
:::

### Your page is accessible from WebView and web   

This means you use Contentsquare to track the same webpage on both your website and your mobile app within a WebView. The tracking tag needs to be configured based on whether the webpage is running in a WebView or a standard web context.
## Tracking tag configuration

We support implementing the **tracking tag** via [Google Tag Manager](#google-tag-manager-template) or [manually](#manual-injection). Note that GTM is the preferred method of injection of the Contentsquare Tag. 

### Google Tag Manager (Template) 

You may already have implemented our GTM Tag (`Contentsquare - Main Tag`) for your website. Follow these steps to implement or verify the WebView setup.

1. Open your container and go to the **templates** section.
![](~/assets/web/gtm-template/main-1.png)

1. Select **Search gallery**.
![](~/assets/web/gtm-template/main-2.png)

1. Type in **`contentsquare`** and select the **Contentsquare - Main tag** option.
![](~/assets/web/gtm-template/main-3.png)

1. Click **Add to workspace**.
![](~/assets/web/gtm-template/main-4.png)

1. Confirm your choice by selecting **Add**
![](~/assets/web/gtm-template/main-5.png)

1. Go to the Tags section and click the **New** button to create a new tag.
![](~/assets/web/gtm-template/add-tag.png)

1. Configure it by selecting the top-right button.
![](~/assets/web/gtm-template/tag-config.png)

1. Search for **`contentsquare`** and select the **Contentsquare - Main tag** template that you've previously added to your container.
![](~/assets/web/gtm-template/new-main.png)

1. Confirm that your `my_web_tag_id` is correctly added. This should have been provided by your Contentsquare contact during your web implementation.
1. Similarly, confirm that your **my_webview_tag_id** is properly configured. This is also provided by your Contentsquare contact.
![](~/assets/webview/gtm_cs-contentsquare-tag_9_steps.jpg)

1. Select the **DOM Ready** as trigger.
![](~/assets/webview/gtm_cs-contentsquare-tag_11_steps.jpg)

### Google Tag Manager (Custom HTML) 

If your page loads in both a web and WebView environment, you should use a variable to determine whether the page is running in a WebView context before integrating the tracking tag. The Contentsquare Android and iOS SDK injects a `window.CS_isWebView` variable into the WebView to simplify the integration.

1. Add a new tag on your workspace.
![](~/assets/webview/gtm_cs-contentsquare-custom_tag_1_steps.png)

1. Select “Choose a tag type to begin setup…”.
![](~/assets/webview/gtm_cs-contentsquare-custom_tag_2_steps.png)

1. In the list, pick the “Custom HTML” tag.
![](~/assets/webview/gtm_cs-contentsquare-custom_tag_3_steps.png)

1. Copy and paste the following code in the Tag Configuration HTML section:

    ```html
    <script type="text/javascript">
    (function () {
        window._uxa = window._uxa || [];

        var tag_id = MY_WEB_TAG_ID;

        if (window.CS_isWebView) {
        window._uxa.push(['setOption', 'isWebView', true]);
        tag_id = MY_WEBVIEW_TAG_ID;
        }
    
        window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);

        var mt = document.createElement("script");
        mt.type = "text/javascript";
        mt.async = true;
        mt.src = "https://t.contentsquare.net/uxa/${tag_id}.js";
        document.getElementsByTagName("head")[0].appendChild(mt);
    })();
    </script>
    ```

    ![](~/assets/webview/gtm_cs-contentsquare-custom_tag_4_steps.png)

1. Select “Choose a trigger to make this tag fire…” and pick "All Pages" from the list.
    ![](~/assets/webview/gtm_cs-contentsquare-custom_tag_trigger_steps.png)

:::warning
`window.CS_isWebView` is available since Contentsquare's iOS SDK 4.36.0, Android SDK 4.32.0, React Native Bridge 3.9.0 or Flutter Plugin 4.13.0.
If you have a custom way of checking if the page is loaded in a WebView, replace `window.CS_isWebView` with your solution.
:::

### Manual injection

To set up the tracking tag on your website, add the following lines of code on every page you want to analyze, either at the end of the `<body>` tag.

```html
<script type="text/javascript">
 (function () {
    window._uxa = window._uxa || [];

    var tag_id = MY_WEB_TAG_ID;

    if (window.CS_isWebView) {
        window._uxa.push(['setOption', 'isWebView', true]);
        tag_id = MY_WEBVIEW_TAG_ID;
    }
   
    window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);

    var mt = document.createElement("script");
    mt.type = "text/javascript";
    mt.async = true;
    mt.src = "https://t.contentsquare.net/uxa/${tag_id}.js";
    document.getElementsByTagName("head")[0].appendChild(mt);
  })();
</script>
```
This code creates a function which will add an asynchronous call to a script and then execute the function. This is a way to avoid other elements loading being blocked on the page. This reduces the impact of the tag on your website’s performance.

## Validate WebView tracking

To verify WebView tracking, refer to the documentation available for [iOS](/en/ios/track-webviews/#validate-webview-tracking) and [Android](/en/android/track-webviews/#validating-the-implementation-on-the-web-side).

---

# Privacy

URL: https://docs.contentsquare.com/en/webview-tracking-web-tag/privacy/

## Handling User Consent
:::tip[Collecting user consent]
  By default, user consent should be handled through the SDK.  
  If your application context requires to collect user consent from the WebView, follow the instructions below.
:::

Our mobile SDK considers every new user to be opted-out by default.

You are responsible for creating the UI asking users for their consent and allowing them to manage their privacy settings and then calling the appropriate Contentsquare following methods (`optin` or `opt-out`). 

If you think securing user consent is not required for your app, discuss it during the implementation process with your main Contentsquare contact.

## Opt-in

:::note
  This command is available starting with iOS SDK `4.13.0`, Android SDK `4.10.0`, Flutter plugin `2.3.0`, React Native Bridge `3.0.0`.
:::

Use the Opt-in API to get user consent. Calling this API generates a user ID and initiates tracking.

```javascript {2}
window._uxa = window._uxa || [];
window._uxa.push(["optin"]);
```

## Opt-Out

:::note
  This command is available starting with iOS SDK `4.13.0`, Android SDK `4.10.0`, Flutter plugin `2.3.0`, React Native Bridge `3.0.0`.
:::

When this API is called, tracking stops immediately, all settings are reset (Session number, Page number...) and all files and directories regarding Contentsquare are deleted. This means that the user ID is deleted. The SDK will never track or collect any data from the user's phone unless the Opt-in API is called again.

```javascript {2}
window._uxa = window._uxa || [];
window._uxa.push(["optout"]);
```

---

# Session Replay

URL: https://docs.contentsquare.com/en/webview-tracking-web-tag/session-replay/

## Session Replay WebView tracking prerequisites
In order to have WebViews in the replays, Session Replay tracking needs to be set up on the native side.

See [iOS](/en/ios/session-replay/#webview) and [Android](/en/android/session-replay/#webview) docs for prerequisites.

## How Session Replay WebView tracking works
Similar to analytics events, once set in WebView mode, the Tag will collect Session Replay data and pass it to the native SDK, which will then send it to the dedicated Apps project.

## Personal Data Handling
WebView personal data masking is entirely handled on the web side. Follow the web documentation section to implement personal data handling: [Personal Data Handling](/en/web/personal-data-handling/).

### About (remote) Session Replay data collection options

[Session Replay data collection options](/en/web/personal-data-handling/#session-replay-data-collection-options) are also applied in WebView mode:
- [Clear content with masked Personal Data](/en/web/personal-data-handling/#with-automasking-off) VS [Auto-masked content with AAA masking](/en/web/personal-data-handling/#with-automasking-on)
- [Selectively mask pages by URL](/en/web/personal-data-handling/#selectively-mask-pages-by-url)

---

# Track dynamic variables

URL: https://docs.contentsquare.com/en/webview-tracking-web-tag/track-dynamic-variables/

## General principles
### Usage

Dynamic variables are additional information on the session that can be used to segment sessions.

For example, they can include information on the A/B Test variations displayed to the current user.

### Limits

#### On the server side

- It is possible to save up to 40 distinct dynamic variable keys per screenview. If more are received, only the first 40 keys will be kept.
- If you are using the same key twice on the same screenview, the last value associated with the key will be collected.

#### On the SDK side

- Every dynamic variable is composed of a pair of key (max. 50 characters) and value (max. 255 characters string or number of type `Long` between 0 and 2<sup>32</sup> - 1). In case these maximum lengths are reached, the SDK will automatically trim the exceeding characters.
- If key or value are empty, the SDK will instead send the literal string "cs-empty".

## Defining dynamic variables

To define and send a dynamic variable, directly use the key and String/Long value **once a first screenview has been triggered**:

```javascript
window._uxa = window._uxa || [];
window._uxa.push(["trackDynamicVariable", { key: my_key, value: my_value }]);
// key is a string
// value is either a string or an integer
```

**Type of the value** — The value can be either a **whole number** or a **string**. For each case, available features won't be the same in the Contentsquare app:

- For **whole numbers**, you will be able to do some algebra. Example: _sessions with dynamic variable key = "numberOfFriends" and value >= 10_
- For **strings**, auto-completion and Regular Expression will be available. Example: _sessions with dynamic variable key = "accountType" and value = "Premium"_

---

# Track Pageviews

URL: https://docs.contentsquare.com/en/webview-tracking-web-tag/track-pageviews/

To aggregate user behavior and engagement at the screen/page level, track page transitions by calling the [`trackPageview`](/en/web/command-reference/#trackpageview) command.
```javascript
window._uxa = window._uxa || [];
window._uxa.push(["trackPageview", "PAGE_TITLE_OR_URL"]);
```
The Tag logs a pageview event that identifies the new page with the page title that you provide.

## Track pageviews differences (with vs without WebView mode)

Tracking Pageviews has different rules depending if the Tag is loaded in WebView mode or not.

### `trackPageview` command differences

|Webview mode|Web context|
|-|-|
|The Tag will not generate any natural pageview, you have to manually track all your screens.|The Tag will generate a natural pageview when loaded.|
|The value you set is the one that will be seen in the Contentsquare platform.|The tag will prepend the value with the domain and append it with the query parameters.|
|If no value (second array element) is provided, no default value will be provided|The tag will set the path as default value|

### Note on pageview tracking in WebView mode

When set in WebView mode, the CS Tag will not trigger [natural pageviews](/en/web/sending-pageviews/#natural-pageview). If you rely on natural pageviews when the page is loaded from a web browser, make sure to use `trackPageview` as the page is fully loaded, as soon as possible.

To do so, use the following code to call the `trackPageview` API as the DOM is ready:

```javascript
document.addEventListener("DOMContentLoaded", function() {
    window._uxa = window._uxa || [];
    window._uxa.push(["trackPageview", "PAGE_TITLE_OR_URL"]);
});
```

---

# Track transactions

URL: https://docs.contentsquare.com/en/webview-tracking-web-tag/track-transactions/

To associate a user's session with their potential purchases (and corresponding revenue), you must send the transaction via a dedicated API.
For each transaction, we send:
- Transaction ID
- Revenue
- Currency

```javascript
window._uxa = window._uxa || [];
window._uxa.push([
  "ec:transaction:create",
  {
    id: "123" /* Transaction ID (string, up to 40 characters) */,
    revenue:
      "9.99" /* Transaction's total cost (integer or string, up to 12 digits and 2 decimals - extra decimals are truncated) */,
    currency:
      "usd" /* Currency value (string less than 10 characters or numeric/alphanumeric ISO 4217 value) */,
  },
]);
window._uxa.push(["ec:transaction:send"]);
```

:::warning
  **Each transaction must only be sent once**. A common mistake is to trigger
  the sending when the confirmation screen is displayed. This leads to
  triggering the transaction each time the user puts the app in background and
  then in foreground on the confirmation screen.
:::

## Currency

The currency is conforming to the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) standard.
The currency must be passed as an "alphanumeric code".

If the currency doesn't match the supported currencies, the SDK sends a currency value of `-1`.  
It will be processed as the default currency of the project.

---

# Artificial Pageviews

URL: https://docs.contentsquare.com/en/web/artificial-pageviews/

Artificial pageviews are to be used when:
- An action completely changes the content displayed on the page without refreshing it and changing its URL (Ajax requests);
- The site is built with a Single Page Application (SPA) and any related frameworks (React, Angular);
- The user gets redirected to another step of a funnel without refreshing the page;
- The site re-routes all the URL changes without refreshing the page;
- The site is built as a Progressive Web App (PWA);
- *Important Modal/Popup windows are displayed.

<h4>Stable URLs - Modal windows and artificial pageviews tracking</h4>

For tracking **modal windows or events that don't change the URL structure**, you'll need to use the Contentsquare **Trackpageview** functionality by following these methods and binding them to the correct action (button click/event trigger).

<h4>Dynamic URLs - Single Page Applications and History Change</h4>

In the event of the **URL structure being changed** on each view change, we can keep track of this by **firing the Main Tag again**: the tag will automatically detect that it was previously put in place on the site and fire a new pageview instead.

## Google Tag Manager (Template)

### Stable URLs

1. Open your container and go to the **templates** section
![](~/assets/web/gtm-template/main-1.png)

1. Select **Search gallery**
![](~/assets/web/gtm-template/main-2.png)

1. Type in **`contentsquare`** and select the **Contentsquare - Artificial Pageview** option
![](~/assets/web/gtm-template/apv-1.png)

1. Click **Add to workspace**
![](~/assets/web/gtm-template/apv-2.png)

1. Confirm your choice by selecting **Add**
![](~/assets/web/gtm-template/main-5.png)

1. Go to the Tags section and click the **New** button to create a new tag
![](~/assets/web/gtm-template/add-tag.png)

1. Configure it by selecting the top-right button
![](~/assets/web/gtm-template/tag-config.png)

1. Type in **`contentsquare`** and select the **Contentsquare - Artificial Pageview** option
![](~/assets/web/gtm-template/apv-3.png)

1. Select the tag and configure:
    - Select the Free text option and enter the value under `Artificial Pageview value`.
    - If there's a pop-up on your website and you need to deploy APV, then select `This is for the opening a popup.` in the drop-down.

    :::note
    The value will be prefixed with `cs-popin-`. For instance `cs-popin-cart`, `cs-popin-wishlist`.
    :::

   ![](~/assets/web/gtm-template/apv-4.png)

### Dynamic URLs

1. Amend the Main tag configuration by **adding a new trigger** to it.
![](~/assets/web/event/new_trigger.png)

1. Create a new trigger
![](~/assets/web/event/add_trigger.png)

1. Select **"Choose a trigger type to begin setup..."**.
![](~/assets/web/event/choose_trigger.png)

1. In the list, select the **"History Change"** trigger.
![](~/assets/web/event/history_change.png)

1. **Save** your trigger.
![](~/assets/web/event/save_history_change.png)

1. Select the **"Save"** button on the top right.
![](~/assets/web/event/save_final_triggers.png)

## Google Tag Manager (Custom HTML)

### Stable URLs

1. Select **"Choose a tag type to begin setup..."**.
![](~/assets/web/gtm/gtm-main-2.png)

1. In the list, pick the **"Custom HTML"** tag.
![](~/assets/web/gtm/gtm-main-3.png)

1. Write the snippet to be fired in the **HTML field**.
It should be similar to this:

    ```html
    <script type="text/javascript">
        window._uxa = window._uxa || [];
        window._uxa.push(['setQuery', location.search + (location.search ? '&' : '?') + 'cs-popin-dedicated_query_string']);
        window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);
        window._uxa.push(['setQuery', location.search]);
    </script>
    ```

    ![](~/assets/web/gtm/gtm-main-4.png)

1. Select **"Choose a trigger to make this tag fire..."**.
![](~/assets/web/gtm/gtm-main-5.png)

1. Create a new trigger to make this tag fire
![](~/assets/web/event/add_trigger.png)

1. Select **"Choose a trigger type to begin setup..."**.
![](~/assets/web/event/choose_trigger.png)

1. In the list, pick the **"All Elements"** trigger.
![](~/assets/web/event/click_all_element.png)

1. Check **"Some Clicks"**
![](~/assets/web/event/some_click.png)

1. Select **"Click Element"**, **"matches CSS selector"** and enter a **valid CSS** filter corresponding to the element you want to track.

    For example the valid CSS for:
    
    ```html
    <button class="btn btn primary"> Submit </button> 
    ```
    
    Will be:
    
    ```css
    .btn.btn.primary
    ```

    ![](~/assets/web/event/trigger_conditions.png)

### Dynamic URLs

1. Amend the Main tag configuration by **adding a new trigger** to it.
![](~/assets/web/event/new_trigger.png)

1. Create a new trigger
![](~/assets/web/event/add_trigger.png)

1. Select **"Choose a trigger type to begin setup..."**.
![](~/assets/web/event/choose_trigger.png)

1. In the list, select the **"History Change"** trigger.
![](~/assets/web/event/history_change.png)

1. **Save** your trigger.
![](~/assets/web/event/save_history_change.png)

1. Select the **"Save"** button on the top right.
![](~/assets/web/event/save_final_triggers.png)

## Tealium

### Stable URLs

**Assign the event** you might already have in place a custom HTML snippet and write the snippet to be fired in the HTML field.
It should be similar to this:

```html
<script type="text/javascript">
    window._uxa = window._uxa || [];
    window._uxa.push(['setQuery', location.search + (location.search ? '&' : '?') + 'cs-popin-dedicated_query_string']);
    window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);
    window._uxa.push(['setQuery', location.search]);
</script>
```

### Dynamic URLs

Create (or select an already existing) event that occurs on each history change or view re-routing. Assign this event to the Contentsquare extension.

## Adobe Launch

### Stable URLs

#### Artificial Pageviews

When setting up the rule, **make sure to target the specific event or condition** needed.
For instance, for an add to bag action, you could either follow the click route:

![](~/assets/web/launch/18-1.png)

Or the custom event route:

![](~/assets/web/launch/18.png)

Once you've chosen the desired event, you can select the Artificial Pageview tracking action from the Contentsquare extension.

![](~/assets/web/launch/19.png)

Depending on the pageview you'd need to track, you can **either specify the query** to be passed to the Contentsquare servers **or leave the input field empty**, which will allow our script to capture the current URL automatically.

![](~/assets/web/launch/20.png)

![](~/assets/web/launch/20-1.png)

You can also use **Data Elements**
![](~/assets/web/launch/20-2.png)

### Dynamic URLs

In the event of a SPA implementation, if the path/query automatically changes on each re-routing, utilise the built-in history change event to fire the CS tag on each of these occurrences.
![](~/assets/web/launch/5-2.png)

## Commanders Act

1. To add a new event, go to the "EDIT" step, and click "ADD EVENT" (1):
![](~/assets/web/tagco/add_event.png)

    A configuration window will appear, with several fields:

    - (1) "Name": Name of the event you wish to add
    - (2) "Id": The event’s ID (to be completed only if you know it and want to trigger the event based on its ID; otherwise, leave the field empty, and it will be generated automatically by Commanders Act)
    - (3) JavaScript code: Area where the event’s JavaScript code is entered
    - (4) "Use Tag Cleaner": Feature allowing you to "correct" the event (rewrites it in order to avoid JavaScript errors and makes it compatible with the container’s code)

    ![](~/assets/web/tagco/add_event_detail.png)

1. Click "ADD" to add your event to the container.

1. Go to the tag library. Once there:

    1. Write "Event Injection" in the search engine
    1. Select the tag
    1. Add the tag

![](~/assets/web/tagco/event_injection.png)

In case of tracking pageviews with Contentsquare, the code to be deployed should follow this guideline:

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['trackPageview', <PATH_TO_SEND> ]);
```

(4) Go to your website; place the cursor on the element you wish to place an event on and do a right click. In the menu that opens up, select "Inspect Element".
(5) In the console, once the element is highlighted, right-click again.
(6) Choose "copy" from the menu.
(7) > "Copy Selector".

:::note
These actions on the site’s CSS are applicable to the Google Chrome browser only.
:::

![](~/assets/web/tagco/find_selector.png)

(8) If you know the element’s ID (starting with a #, copy and paste it in the #CSS_PATH# field).

![](~/assets/web/tagco/css_path.png)

(9) If you do not know or cannot find the ID, copy and paste the element’s information starting with "#" and replace " > "(space>space) with a single space in the code line.

![](~/assets/web/tagco/css_path2.png)

(10) Copy and paste the line in the interface’s #CSS_Path# field.

![](~/assets/web/tagco/css_path3.png)

Now enter the ID of the event you wish to summon in the corresponding field.

Proceed to the deployment step as you do with other tags.

## Shopify

1. Within the main menu, select **Online Store > Themes**, then click the **Actions** drop-down menu, and **Edit Code**.

    ![](~/assets/web/shopify-interface-edit-code.png)

1. Open the relevant Liquid file where you want to trigger an artificial pageview based on your own JavaScript logic. You can put this in the main `theme.liquid` file or in a specific Liquid file.

    Let’s say you want to trigger this artificial pageview only when a certain action takes place like when an item is added to the cart. You would need to wrap this code inside your own condition, callback function, or event listener.

1. In the snippet below, replace `<PATH_TO_SEND>` with your unique path.

    ```html
    <script type="text/javascript">
    window._uxa = window._uxa || [];
    window._uxa.push(['trackPageview', <PATH_TO_SEND> ]);
    </script>
    ```

    You either hard-code a static value for the path like `Added_to_cart` or use Shopify’s [Liquid Objects](https://shopify.dev/api/liquid/objects)/[Liquid Tags](https://shopify.dev/api/liquid/tags) to grab the dynamic data from it like below:

    :::tip
    Check out Shopify's [Liquid Object cheat sheet](https://www.shopify.com/partners/shopify-cheat-sheet)
    :::

    ```html
    <script type="text/javascript">
    // Contentsquare Send Artificial Pageviews
    document.getElementById("AddToCart").addEventListener('click', function() {
        window._uxa = window._uxa || [];
        window._uxa.push(["trackPageview", "Added_to_cart_" + {{ custom_tag.value}}])
    });
    </script>
    ```

1. Insert this code after the main tracking tag block.

    The end result of adding this code into the Liquid file:

    ```html
    <!-- Contentsquare Tags Start -->
    <script type="text/javascript">
    // Contentsquare Main Tracking Tag
    (function() {
        window._uxa = window._uxa || [];
        if (typeof CS_CONF === 'undefined') {
            window._uxa.push(['setPath', window.location.pathname+window.location.hash.replace('#','?__')]);
            var mt = document.createElement("script");
            mt.type = "text/javascript";
            mt.async = true;
            mt.src = "//t.contentsquare.net/uxa/769238b6e1309.js";
            document.getElementsByTagName("head")[0].appendChild(mt);
        } else {
            window._uxa.push(['trackPageview', window.location.pathname+window.location.hash.replace('#','?__')]);
        }
    });
    </script>

    <script type="text/javascript">
    // Contentsquare Send Artificial Pageviews
    document.getElementById("AddToCart").addEventListener('click', function() {
        window._uxa = window._uxa || [];
        window._uxa.push(["trackPageview", "Added_to_cart_" + {{ custom_tag.value}}])
    });
    </script>
    ```

1. To modify the entire path that is sent, use the `setPath` command:

    ```html
    <script type="text/javascript">
        // Contentsquare Send Artificial Pageviews
        document.getElementById("AddToCart").addEventListener('click', function() {
            window._uxa = window._uxa || [];
            window._uxa.push(["setPath", "Added_to_cart_" + {{ custom_tag.value }}]);
            window._uxa.push(["trackPageview"]);
        });
    </script>
    ```

    :::note
    You don’t need to supply a second parameter in the `trackPageview` command when it is set in the `setPath` command above it.
    :::

    For more information, see the [`setPath` command](/en/web/sending-pageviews/#modifying-the-path).

1. To modify only the query string, use the `setQuery` command:

    ```html
    <script type="text/javascript">
        // Contentsquare Send Artificial Pageviews
        document.getElementById("AddToCart").addEventListener('click', function() {
            window._uxa = window._uxa || [];
            window._uxa.push(["setQuery", "Added_to_cart_" + {{ custom_tag.value }}]);
            window._uxa.push(["trackPageview"]);
        });
    </script>
    ```

:::note
You don’t need to supply a second parameter in the `trackPageview` command when it is set in the `setQuery` command above it.
:::

    For more information, read about the [`setQuery` command](/en/web/sending-pageviews/#modifying-the-query-parameters).

## Custom HTML

To send a pageview, use the `trackPageview` command:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push(['trackPageview', <PATH_TO_SEND>]);
</script>
```

`<PATH_TO_SEND>` is limited to 255 characters.

:::warning[Just the path]
The Tag prepends the domain and appends the query parameters.

Do not include the domain or the `#` character since everything which comes after is erased.
:::

### Stable URLs

For instance, in case you wanted to keep track of the popup window appearing when adding an item to the cart:

```html
<script type="text/javascript">
    window._uxa = window._uxa || [];
    window._uxa.push(['setQuery', location.search + (location.search ? '&' : '?') + 'cs-popin-dedicated_query_string']);
    window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);
    window._uxa.push(['setQuery', location.search]);
</script>
```

### Dynamic URLs

#### With custom variables

```html
<script>
(function () {
    window._uxa = window._uxa || [];
    try {
        if (typeof dataLayer !== 'undefined') {
            for (var i = 0; i < dataLayer.length; i++) {
               window._uxa.push(['setCustomVariable', 1, 'Sample Variable', dataLayer[i].sampleVariable, 3]);
            }
        }
    } catch(e){}
    if (typeof CS_CONF === 'undefined') {
        window._uxa.push(['setPath', window.location.pathname+window.location.hash.replace('#','?__')]);
        var mt = document.createElement('script'); mt.type = 'text/javascript'; mt.async = true;
        mt.src = '//t.contentsquare.net/uxa/{{YOUR_TAG_ID}}.js';
        document.getElementsByTagName('head')[0].appendChild(mt);
    }
    else {
        window._uxa.push(['trackPageview', window.location.pathname+window.location.hash.replace('#','?__')]);
    }
})();
</script>
```

#### Without custom variables

```html
<script>
(function () {
    window._uxa = window._uxa || [];
    if (typeof CS_CONF === 'undefined') {
        window._uxa.push(['setPath', window.location.pathname+window.location.hash.replace('#','?__')]);
        var mt = document.createElement('script'); mt.type = 'text/javascript'; mt.async = true;
        mt.src = '//t.contentsquare.net/uxa/{{YOUR_TAG_ID}}.js';
        document.getElementsByTagName('head')[0].appendChild(mt);
    }
    else {
        window._uxa.push(['trackPageview', window.location.pathname+window.location.hash.replace('#','?__')]);
    }
})();
</script>
```

### Tracking a popin opening

To track a popin opening/closure during the user's navigation, use **artificial pageviews**.

1. A first artificial pageview needs to be sent when the popin is opened — the sent URL will be the current one, followed by a string of characters allowing you to identify the popin.

    ```html
    <script type="text/javascript">
        window._uxa = window._uxa || [];
        window._uxa.push(['setQuery', location.search + (location.search ? '&' : '?') + 'cs-popin-dedicated_query_string']);
        window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);
        window._uxa.push(['setQuery', location.search]);
    </script>
    ```

1. A second artificial pageview needs to be sent when the popin is closed. The sent URL will be the current one.

    ```html
    <script type="text/javascript">
        window._uxa = window._uxa || [];
        window._uxa.push(['setQuery', location.search]);
        window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);
    </script>
    ```

### Single Page Application

The Contentsquare Tracking tag sends only one pageview per full reload. In a Single Page Application (SPA), that would be only once per session.

To handle this, **an [artificial pageview](/en/web/artificial-pageviews/#custom-html) on every page change** is needed — use the "History Change" event which is available in most Tag Management Systems.

You can fire the following script on every page and on history change. It fires the main tag the first time and then sends an artificial pageview for each next call.

```html /YOUR_TAG_ID/
<script type="text/javascript">
  window._uxa = window._uxa || [];
  /* First call */
  if (typeof CS_CONF === 'undefined') {
    window._uxa.push(['setPath', window.location.pathname+window.location.hash.replace('#','?__')]);
    var mt = document.createElement("script"); mt.type = "text/javascript"; mt.async = true;
    mt.src = "//t.contentsquare.net/uxa/YOUR_TAG_ID.js";
    document.getElementsByTagName("head")[0].appendChild(mt);
  }
  /* Every next call */
  else {
    window._uxa.push(['trackPageview', window.location.pathname+window.location.hash.replace('#','?__')]);
  }
</script>
```

### Following a single page check-out

If your checkout only fires one full reload, the main tag will be called just once, and only one natural pageview will be sent.

We thus only collect:

- `shop.com/checkout/`

Instead of:

- `shop.com/checkout/step1`
- `shop.com/checkout/step2`
- `shop.com/checkout/step3`
- `shop.com/checkout/step4`

To achieve this result, it is necessary to:

1. Change the natural pageview URL (the first that was sent)

1. Send an artificial pageview for every step

Here is the corresponding code, which uses the [`setPath` function](/en/web/sending-pageviews/#modifying-the-path) and [artificial pageviews](/en/web/artificial-pageviews/#custom-html):

```javascript
/* 1. Change the natural URL pageview, before loading the main tag */

window._uxa = window._uxa || [];
window._uxa.push(['setPath', 'checkout/step1']);

(function() {
   var mt = document.createElement("script"); mt.type = "text/javascript"; mt.async = true;
   mt.src = "//t.contentsquare.net/uxa/YOUR_TAG_ID.js";
   document.getElementsByTagName("head")[0].appendChild(mt);
})();

/* ... Step Change Event ... */

/* 2. Send an artificial page for every step change*/

window._uxa = window._uxa || [];
window._uxa.push(['trackPageview', 'checkout/step' + n]);

/* Repeat step 2 as much as required */
```

---

# Collected data

URL: https://docs.contentsquare.com/en/web/collected-data/

## Personal Data
You will find below an exhaustive list of all data being collected.
In particular, **potential** Personal Data would be:

1. Into the **HTML content** that is sent for a small fraction of our visitors. Solutions to prevent this from happening:

    - Remove some sensitive content ([this chapter explains how](/en/web/personal-data-handling/#remove-contentpersonal-data-from-the-collected-html))

    - Totally deactivate this for all users (some features may then be unavailable like Session Replay or retroactive background; ask your Account Manager).

1. Into **Custom Variables** sent to our servers (to prevent this from happening, make sure that the values that you wish to collect could not be linked to one individual).

## What is not collected

- We don't collect the values of form fields.
- We don’t collect what the user types in.
- We remove every email-looking string in URL, Custom Vars, Dynamic Vars and Session Replay before they are sent to our servers.

:::warning
This does not apply to Voice of Customer capabilities designed to collect user feedback.  
See [Voice of Customer](/en/web/voice-of-customer/).
:::

## What is collected

|Data|Usage|Value example|
|---|---|---|
|User Agent|Device type (desktop/tablet/mobile) and browser detection|Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5)|
|City Geolocation|Web users geolocation (based on the IP address; for more info on IP Addresses [see dedicated section](/en/web/ip-addresses/))|Paris, France|
|URL|Mappings: group pageviews on similar page templates|http://fr.wikipedia.org/|
|Screen Resolution|Segments|1600x900|
|Referer|Segments: traffic source detection||
|Clicks|Zoning Analysis|\{target: "div#zone", t:1500}|
|Clicked Element (button & link)|Segmentation, Funnels|\{target: "button#checkout", t:1500 text: "Checkout"}|
|Hovers|Zoning Analysis|\{target: "div#zone", t:1500}|
|Scroll|Zoning Analysis (exposure metrics)|\{top:0px, left: 0px; t:1500}|
|Mouse move|Activity rate|\{x:200, y:800, t:1500}|
|Focus|Not used|\{target: "div#zone", t:1500}|

|E-commerce data (if feasible)|Value example|
|---|---|
|Transaction ID|1234|
|Total|11.99|
|Product Total|11.99|
|Product ID|1234|
|Product name|Green shoes|
|Product quantity|1|
|Product category|Shoes|

These data add up to those which can be sent by Custom Vars.

---

# Changelog

URL: https://docs.contentsquare.com/en/web/changelog/

import { EmailForm } from '~/components';
<EmailForm />

<details>
<summary>Which version of the Tag is deployed on my website?</summary>

Check your Tag version with the Contentsquare Tracking Setup Assistant Chrome extension:

![](~/assets/web/ctsa-find-tag-version.png)

</details>

## 15.84.1 - April 15th, 2025

**Bug Fixes**

- **Experience Analytics:** Solve the conflict with third-party `ping` events.
- **Session Replay:** Support blank iframes.
- **Metrics:** Change name of Tag Configurator metrics.
- **Voice of Customer:** Send survey responses as internal events.
- **Voice of Customer:** Set [survey cookie](/en/web/cookies/#_hjdonepolls) duration to 365 days.
- **Voice of Customer:** Use milliseconds for survey cookie duration.

## 15.82.2 - April 8th, 2025

**Bug Fixes**

- **Session Replay:** Support DST dates in replay targeting rules for Free and Growth plans.
- **Metrics:** Avoid starting metrics in webview contexts due to missing APIs.

**Features**

- **Metrics:** Track usage of Tag Configurator triggers and templates.

## 15.81.3 - April 1st, 2025

**Bug fixes**

- **Product Analytics:** Do not send the domain in `heap.setPath`.
- **Experience Analytics:** Handle quota response when session expires.
- **Voice of Customer:** Don't include VoC code in the tag if the VoC flag is disabled.

**Features**

- **Voice of Customer:** Introduce VoC only tracking.
- **Metrics:** Implement command, encryption and masking metrics.
- **Metrics:** Toggle metrics collection system on.

## 15.76.0 - March 20th, 2025

**Bug fixes**

- **Tag Configurator:** Fix `BeforePageview` trigger.

**Features**

- **Product Analytics:** Send Product Analytics context in pageviews.
- **Product Analytics:** Hierarchy collection for click, change, and submit events.
- **Metrics:** Introduce a metrics collection system.

## 15.72.6 - March 13th, 2025

**Bug fixes**

- **Webviews:** SerializeWebview `withAssets` not depending on staticResourceUrlTracker anymore.
- **Session Replay:** Update serializer to ignore children already serialized and include mutation of `movedNode` into new one.
- **Session Replay:** Change a query parameter for targeting rules collection mode.
- **Product Analytics:** Use masked URL instead of path in `heap.setPath`.
- **Product Analytics:** Create new command `sendHeapContext` for `heap.js` v5.
- **Voice of Customer:** Initialize VoC on artificial page views.
- **Experience Analytics:** Improve typing for Dynamic and Custom Variables modules.

**Features**

- **Product Analytics:** Start data collection for `heap.js` v4.
- **Tag Configurator:** Cleanup obsolete template/triggers properties.

## 15.70.8 - February 26th, 2025

**Bug fixes**

- **Experience Analytics:** Add a validity check on descriptor parameter of FilterUntrustedEvent.
- **Tag Configurator:** Change template BlockAllowListForSR name.
- **Session Replay:** Add source to masked Personal Data logs.
- **Session Replay:** Avoid monkey patching the same API multiple times.
- **Session Replay:** Partial matching patterns support placeholder matching empty URL token (bis).
- **Static Resource Manager:** Update online assets collection on pageview.
- **Session Replay:** Handle added text nodes.

**Features**

- **Tag Configurator:** Cleanup obsolete template/triggers properties.
- **Webviews:** Send Tag configuration to parent.
- **Product Analytics:** Implement identify and `addUserProperties` commands from Heap.
- **Session Replay:** Check if URL arguments are empty.

## 15.67.2 - February 20th, 2025

**Bug fixes**

- **Session Replay:** Disabling session capture in CSQ Free and Growth plans does not stop data collection for Session Replay

## 15.66.2 - February 13th, 2025

**Bug fixes**

- **Emerchandising:** Flush element source upon stop.
- **Experience Analytics:** Do not stop tag performance tracker on artificial pageviews.
- **Session Replay:** Fix mutation optimizer issue when removing nodes.

**Features**

- **Experience Analytics:** Pass disableTextCapture to trackPageview on artificial pageviews.
- **Product Analytics:** Collect pageview from History changes and listen submit event.

## 15.65.0 - February 10th, 2025

**Bug fixes**

- **API Errors:** Check the attribute value is not null or undefined.
- **Session Replay:** Avoid collision with user defined selectors.
- **Session Replay:** Check fetch request response on being undefined.
- **Session Replay:** Move initialization of shadow root filter.

**Features**

- **Experience Analytics:** Do not start the tag when page is being pre-rendering (Chrome speculation API).
- **Tag Configurator:** Support closest matching element in click trigger.
- **Tag Configurator:** Support new condition operators.
- **Tag Configurator:** Support tap in all snippets implementing the click trigger.
- **Product Analytics:** Implement new command to send cross-product context.
- **Session Replay:** Optimize number of mutation observers needed to track text visibility changes.

## 15.56.1 - January 30th, 2025

**Bug fixes**

- **Session Replay:** Fix an issue on legacy masked rules from window after `startdatacollection` command.
- **Session Replay:** Fix send initial input values on activity resume after the new initial DOM.
- **Session Replay:** Fix on Static Resources Manager ensures online assets collection flag in iframes and nested iframes is correctly handled.
- **Session Replay:** Fix ensures input events are sent after mutation on the element.
- **Tag Configurator:** Fix filter untrusted events (events not triggered by visitor).

**Features**

- **Session Replay:** Manage added nodes to encrypted element.
- **Session Replay:** Unify all Personal Data config modes.
- **Tag Configurator:** New trigger on element becomes visible.

## 15.49.1 - January 9th, 2025

**Minor fixes**

- **Session Replay:** Handle errors related to closed readable streams in the NetworkWorker.
- **Session Replay:** Handle errors when `document.body` is not accessible in a cross-domain iframe.

**Bug fixes**

- **Session Replay:** Prevent data collection when the `optout` command is pushed before the Tag is injected or starts.
- **Analytics:** Handle null values passed to the `trackError` command gracefully.

**Features**

- **Tag Configurator:** Restart implementation snippets on artificial page views and session renewal.
- **Tag Configurator:** New implementation template for excluding & allowing URLs in Session Replay.
- **Tag Configurator:** New implementation log level for logging warnings about broken implementations.
- **Session Replay:** Add logs to track usage of Google's speculative rules API.
- **Session Replay:** Unify the default element masking rules across all deployment modes.
- **Session Replay:** Add validators and log warnings for the `setCapturedElementsSelector` command.

## 15.43.0 - December 18th, 2024

**Bug fixes**

- **Session Replay:** Fix an issue which could cause text visibility events to be lost in some cases.
- **Session Replay:** Fix an issue occurring when the zoom tracker was stopped before being started.
- **Session Replay:** Fix the mutation serialization optimiser that was producing incorrect outputs in some edge cases.
- **Session Replay:** Stop serializing script children.
- **Session Replay:** Improve text visibility detection for inline elements.
- **Integration:** Improve replay link format.
- **Experience Monitoring:** Fix an issue where the `responseBody` was not collected in some cases.
- **Experience Monitoring:** Fix an issue that caused an error to be thrown when getting the file name for JavaScript errors collection.

**Features**

- **Session Replay:** Update the validation of the format of the visitor cookie.
- **Session Replay:** Mask by default text area content from appended text nodes in iframe context.

## 15.39.6 - December 12th, 2024

**Bug fixes**

- **Session Replay:** Fixed the issue with Tag Download time parameter.
- **Session Replay:** Restart VoC widgets on artificial page views.
- **Session Replay:** Fixed video events race condition.
- **Session Replay:** Mask emails only in `href` and `src` attributes.
- **Session Replay (webview):** Set sensitive status at start.
- **Experience Monitoring:** Catch abort when reading the response body.

**Features**

- **Session Replay:** Mask `href` and `src` attributes in specific nodes.
- **Session Replay:** Optionally mask non-text elements using masking settings.
- **Session Replay:** Remove phones from custom errors.

## 15.36.2 - November 20th, 2024

**Bug fixes**

- **Session Replay:** Improve support of images by accepting alternate source elements.
- **Session Replay:** Fix regression after a performance optimization linked to mutation processing.
- **Experience Monitoring:** Limit JavaScript file names to 150 characters max.
- **Experience Monitoring:** Replace script data URL by pageview URL.
- **Experience Analytics:** Fix JS error thrown by `getCurrentOrientation` function during resize events.

**Features**

- **Personal Data:** Mask first and last names in error collection.

## 15.33.7 - November 13th, 2024

**Bug fixes**

- **Session Replay:** Improve support of `data-cs-mask` with shadow DOM of masked elements.
- **Session Replay:** Improve support of CSS inline rules during initial DOM serialization.
- **Session Replay:** Avoid masking digits of node attributes when masking feature is enabled.
- **Session Replay:** Preserve inputs radio name attribute when masking feature is enabled.
- **Session Replay:** Fix `nextSibling` calculation to return `null` under certain conditions.
- **Session Replay:** Mask `document.baseURI` attribute on initial DOM.

**Performance Improvements**

- Improved performance of element visibility trigger.

**Features**

- **Experience Analytics (Free and Growth)**: Integrate Targeting rules into data collection flow.
- **Session Replay:** Capture nested elements added through DOM mutations with `data-cs-capture` and `setCapturedElementsSelector`.

## 15.28.0 - October 30th, 2024

**Bug fixes**

- **Text Visibility:** Do not collect `<textarea>` text value

**Performance Improvements**

- **Session Replay:** Increase batch size limit

**Features**

- **Integrations:** Simplify Dynamic Variable format for CSQ Lite integrations

## 15.26.2 - October 23th, 2024

**Bug fixes**

- **Session Replay:** Do not mask CSS `href` values for CSQ Lite customers.
- **Session Replay:** Handle bad `setPIISelectors` input.

**Performance Improvements**

- Throttle attribute/characterData mutations by 30ms.
- Improved performance of Selector Observer by retrieving shadow roots from DocumentMutationObserver.

**Features**

- **Experience Monitoring:** Implement partial URL masking patterns.
- **Session Replay:** Collect play pause video events refactor.
- **Session Replay:** Add ETR status.

## 15.23.3 - October 16th, 2024

**Bug fixes**

- **Session Replay:** Fixed infinite loop on Safari.
- **Session Replay:** Pipe text visibility events through masked text processor.

**Performance Improvements**

- Improved performance when too many ShadowRoots get disconnected at the same time.

**Features**

- **Experience Analytics:** Quota boot blocking.
- `Transaction` and `addToCart` pushed before start.
- ProjectConfiguration: introduce `clickedElementTextEnabled`.

## 15.21.0 - October 10th, 2024

**Bug fixes**

- **Session Replay:** Protect `RegExp` from overwrites on sites.
- **Session Replay:** Fix calculated `nextSibling` on node mutations within the same tick.

**Features**

- **Experience Analytics:** Collect link and button text on click and tap events.
- **Experience Analytics (Free and Growth):** Mask emails on any node by default.
- **Experience Analytics:** Log warnings when too many attribute/text mutations occur within a short threshold.

## 15.19.3 - October 2nd, 2024

**Bug fixes**

- **Session Replay:** Clean encryption logs and dead code.
- **Voice of Customer:** Send poll answer value as integer.
- **Experience Analytics:** Check if `self` is overridden.
- **Voice of Customer:** Deduplicate VoC dynamic variables.
- **Session Replay:** Serialize children from 0 index on added nodes.

**Features**

- **Experience Analytics:** Support quick replay for `CS Lite` tag.
- **Personal Data:** Check `href` attribute on certain conditions.
- **Experience Analytics:** Support retaker mode for `CS Lite` tag.
- **API Errors:** Support media type `text/javascript`.

## 15.16.5 - September 26th, 2024

**Bug fixes**

- **Session Replay:** Fix calculated `nextSibling` on added node mutation.
- **Session Replay:** Add experimental option to not observe shadow roots.
- **Emerchandising:** Stop Emerchandising capture right before artificial pageview.
- **Session Replay:** Fix the propagation of `data-cs-capture` to children and handle it by default.

## 15.16.0 - September 18th, 2024

**Bug fixes**

- **Performance:** Fix performance logs format.
- **Session Replay:** Fix an issue causing duplicated nodes in replays.
- **Session Replay:** Fix last message requests when `Worker` is not available.
- **Session Replay:** Fix performance issue when there are many mutations happening in the same tick.

## 15.13.0 - September 4th, 2024

**Features**

- **Session Replay:** Support `CSSGroupingRule`.
- **Product Analytics:** Do not load the `heap.js` Tag when it has already been injected in the page.

**Performance Improvements**

- Add function execution time metrics to our monitoring.

## 15.10.0 - August 28nd, 2024

**Features**

- **Product Analytics:** Collect page title in pageviews.

## 15.9.0 - August 22nd, 2024

**Bug fixes**

- **Session Replay:** Fix move mutation event.
- **Session Replay:** Process new stylesheet rules.
- **Session Replay:** Observe mutations on text nodes.
- **Product Analytics:** Catch errors when retrieving metadata.

**Features**

- **Product Analytics:** Support sideloading.
- **Experience Analytics:** End session 30 minutes after last user event.

## 15.7.0 - August 14th, 2024

- Tag code refactoring. No client-side impact expected.

## 15.6.4 - August 7th, 2024

**Bug fixes**

- **Session Replay:** Add `isValidSelector` check in encrypted nodes identifier.
- **Session Replay:** Backport support of Chinese and Japanese ideograms in Flashpoint.
- **Session Replay:** Fix performance issue by protecting functions overridden by `ZoneJS`.
- **Session Replay:** Use `arrayFlatMap` to avoid exceptions on older browsers.
- **Session Replay:** Clear Element observer `tickSet` on disconnect.
- **Analytics:** Listen to `navigation` event inside last events tracker.
- **Product Analytics:** Rename feature flags.
- **Session Replay:** Check if `csQueueMicrotask` is a function.
- **Session Replay:** Mask text area value changed by inserted text node.

**Features**

- **Voice of Customer:** Add a feature flag for the VoC Events API.
- **Voice of Customer:** Send events to the `v2/events` endpoint.
- **Experience Analytics:** Merge `anonymizeDigits` and `anonymizeEmails` settings into project configuration.
- **API Errors:** Increase `body` attribute value limit to 100 characters.
- **Experience Analytics:** Call verify installation for `CS Lite` tag.

## 15.1.7 - July 25th, 2024

**Bug fixes**

- **Static Resource Manager:** Resolve events on error.
- **Session Replay:** Fix encryption processor.
- **Session Replay:** Improve ElementObserver performance by traversing the tree only once per tick.
- **Session Replay:** Catch error thrown by the custom element producer when element name is invalid.
- **Session Replay:** Check iframe before accessing `contentWindow`.
- **Session Replay:** Avoid access denied error when checking `localStorage` support.
- **Session Replay:** Missing object `cssRules` in REGISTER_ADOPTED_STYLE_SHEET payload.
- **Session Replay:** Add symbol back to node identifier.
- **Session Replay:** Fix duplicated nodes.
- **Session Replay:** Fix SVG masking issues.

**Features**

- **Session Replay**: DOM Events are managed with Flashpoint.
- **Analytics**: Introduce identity mechanism.

## 14.22.1 - July 04th, 2024

**Bug fixes**

- **Session Replay:** Use U+FF41 char instead of book ideogram for masking.
- **Session Replay:** Improve shadow roots detection when added on existing shadow roots.
- **Session Replay:** Fixed timestamp issues on events created by Static Resource Manager.

**Features**

- **API Errors**: Rely on body length instead of `Content-Length` header.

## 14.18.3 - June 12th, 2024

**Features**

:::tip[Voice of Customer and Product Analytics General Availability]
As of June 2024, customers can use the Voice of Customer and Product Analytics modules.

For more information refer to the Help Center.
:::

<h3>Voice of Customer</h3>

The tag will inject a `hotjar-{SITE_ID}.js` script which loads the survey widgets as needed
If you are using [SRI](/en/web/sri/), reach out to your Contentsquare contact for more information.

[Additional cookies](/en/web/cookies/#voice-of-customer-cookies), prefixed with `_hj`, are created.

To use Voice of Customer, make sure to add `script-src 'unsafe-inline' *.contentsquare.net` to your [CSP configuration](/en/web/content-security-policy/).

<h3>Product Analytics</h3>

The Tag will inject a `heap_config.js` script loaded from `https://cdn.us.heap-api.com/config/<ENV_ID>/heap_config.js`, which loads the PA tag `heap.js`.
If you are using [SRI](/en/web/sri/), reach out to your Contentsquare contact for more information.

[Additional cookies](/en/web/cookies/#product-analytics-cookies), prefixed with `_hp*`, are created.

If you enforce a Content Security Policy, make sure to add the following to your [CSP configuration](/en/web/content-security-policy/):

```http wrap
script-src 'unsafe-inline' 'unsafe-eval' https://cdn.heapanalytics.com https://heapanalytics.com;
script-src 'unsafe-inline' *.contentsquare.net;
img-src https://heapanalytics.com;
style-src https://heapanalytics.com;
connect-src https://heapanalytics.com;
font-src https://heapanalytics.com;
```

**Bug fixes**

- **Session Replay:** Reduce network details payload.

## 14.15.0 - June 5th, 2024

**Bug fixes**

- **Session Replay:** Mask Chinese and Japanese characters using an ideogram instead of the character `A` to preserve `line-break` behavior.

## 14.13.0 - May 28th, 2024

**Bug fixes**

- **API Errors:** Check if `subscriberId` and `responseType` exist before accessing `responseText`.

**Features**

- **Session Replay:** Add allowlist mechanism for some event types.
- **Personal Data**: Add data-cs-mask for all project's deployment mode type.

## 14.11.0 - May 21st, 2024

**Bug fixes**

- **Personal Data**: Fix processing of `data-cs-mask` attributes that were being ignored.

## 14.10.0 - May 6th, 2024

**Bug fixes**

- **iFrames**: Do not access storage, cookie, or XHR in child mode.
- **Session Replay**: Fix lost initial resize events.
- **Session Replay**: Remove query parameters of network details events.
- **WebViews**: Align webview behaviors on bridge injection.

**Features**

- **WebViews**: Process commands received before webview tracking ready and start events.

## 14.9.3 - April 29th, 2024

**Features**

- **Logging**: Emit logs for all critical errors

## 14.4.0 - March 26th, 2024

**Bug fixes**

- **Static Resource URL**: Fixed Static URL resource bug on quoted URLs

**Features**

- **Session Replay**: New inactivity mechanism.

## 14.3.1 - March 26th 2024

**Bug fixes**

- **Session Replay**: Fix identification of default sensitive attributes.

## 14.1.2 - March 21st, 2024

**Bug fixes**

- **Static Resource Manager**: Filter double quotes `nestedResource` URLs fixing 404 errors

## 14.1.1 - March 21st, 2024

**Bug fixes**

- Fix how the initial DOM event is inserted in the Session Replay events in both `top` and `iframe` contexts.

## 14.1.0 - March 21st, 2024

**Features**

- **API Errors**: Increase `responseBody` size limit from 2kb to 5kb.

## 14.0.0 - March 18th, 2024

**Features**

- **Tag Commands**: Add `lifespan` option to the following Tag commands, to handle SPA use cases:
  - [`setPath`](/en/web/command-reference/#setpath),
  - [`setQuery`](/en/web/command-reference/#setquery),
  - [`trackPageview`](/en/web/command-reference/#trackpageview)

## 13.100.1 - March 14th, 2024

**Bug fixes**

- **TagDownloadTime Service**: Retrieve [`document.currentScript`](https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript).

## 13.99.9 - March 12th, 2024

**Bug fixes**

- **API Errors**: Remove Content-Length check to track all API calls when using [Transfer-Encoding](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding).

## 13.99.8 - March 12th, 2024

**Bug fixes**

- WebView: Handle injected CSS to fix zone-level elements data

## 13.99.7 - March 11th, 2024

**Bug fixes**

- Flush pending microtasks on artificial pageviews to fix user actions not shown in Session Replay.

## 13.99.5 - March 6th, 2024

**Bug fixes**

- **Static Resource Manager**:
  - Changed an error to non-blocking so that further data can be sent,
  - Send a single request when the payload exceeds the limit, instead of two.

## 13.99.4 - March 6th, 2024

**Bug fixes**

- **Session Replay**: Restart `PerformanceTimingResourceTracker`on artificial pageviews.

## 13.97.0 - February 26th, 2024

**Bug fixes**

- **Tag Commands**: Add `decodeUri` option to the following Tag commands:
  - [`setPath`](/en/web/command-reference/#setpath),
  - [`setQuery`](/en/web/command-reference/#setquery),
  - [`trackPageview`](/en/web/command-reference/#trackpageview)

## 13.94.0 - February 22nd, 2024

**Features**

- **Static Resource Manager**: Internal Service Migration.

## 13.93.0 - February 21st, 2024

**Features**

- **Static Resource Manager**: Add `groupMicrotask` priority option.

## 13.92.0 - February 19th, 2024

**Features**

- **WebView**: Synchronize start and stop commands.

## 13.89.2 - February 14th, 2024

**Features**

- **Static Resource Manager**: Support `style` attribute in element in serialization or mutation attribute.

## 13.89.0 - February 14th, 2024

**Features**

- **Analysis**: Update [web-vitals](https://github.com/GoogleChrome/web-vitals/blob/main/CHANGELOG.md) library to 3.5.2.

## 13.88.0 - February 14th, 2024

**Features**

- **Session Replay**: Remove workaround used to consider base64 images of a certain size to be sensitive.

## 13.85.0 - February 8th, 2024

**Features**

- Add protection against session cookie corruption.

## 13.84.1 - February 6th, 2024

**Bug fixes**

- **Static Resource Manager**: Avoid calling with same data collection state.

## 13.84.0 - February 2nd, 2024

**Features**

- Manage all DOM events in event translator.

## 13.83.0 - January 30th, 2024

**Features**

- **Session Replay**: Mask credit card numbers automatically.

## 13.82.0 - January 30th, 2024

**Features**

- **Static Resource Manager**: Save hashes to avoid sending them again.

## 13.81.2 - January 25th, 2024

**Bug Fixes**

- **Static Resource Manager**: Support non-base64 images.

## 13.81.0 - January 24th, 2024

**Features**

- **WebView**: Add [`excludeURLforReplay`](/en/web/command-reference/#excludeurlforreplay) command support.

## 13.78.0 - January 22nd, 2024

**Features**

- **Session Replay**: Improve `input` element handling.

## 13.77.3 - January 15th, 2024

**Bug Fixes**

- **Session Replay**: Call `onEvent` on all trackers before starting them.

## 13.77.1 - January 9th, 2024

**Performance Improvements**

- Improve `allowSubdomain` change performance.

## 13.77.0 - January 9th, 2024

**Features**

- **WebView**: Add [`afterPageView`](/en/web/command-reference/#afterpageview) command support.

## 13.76.3 - January 4th, 2024

**Bug Fixes**

- **Static Resource Manager**: Do not process URLs when the online assets option is disabled.

## 13.75.4 - December 13th, 2023

**Bug Fixes**

- Ignore logs coming from a worker override.

## 13.75.1 - December 12th, 2023

**Bug Fixes**

- Catch SRM errors and add logs.

## 13.75.0 - December 12th, 2023

**Bug Fixes**

- Execute callback directly when adding `onRecordingStateChange` command.

## 13.74.1 - December 12th, 2023

**Bug Fixes**

- Manage ETR triggered before collection starts.

## 13.73.0 - December 6th, 2023

**Features**

- **Static Resource Manager**: handle attribute and character data mutations.

## 13.72.3 - December 6th, 2023

**Bug Fixes**

- Collect all navigation timing events.

## 13.72.2 - December 5th, 2023

**Bug Fixes**

- Change log level error to warn for `crossDomainSingleIframe`.

## 13.72.1 - December 5th, 2023

**Bug Fixes**

- Handle undefined values in for Console Message tracking.

## 13.72.0 - December 5th, 2023

**Bug Fixes**

- Check that `addEventListener` is a function.

**Features**

- **crossDomainSingleIframe**: Start the tag on iFrame timeout.

## 13.71.4 - December 5th, 2023

**Bug Fixes**

- **Custom Errors**: Truncate attributes keys and values (30 characters max).

## 13.67.4 - November 16th, 2023

**Bug Fixes**

- **Custom Errors**: Replace object in root object.

## 13.65.1 - November 13th, 2023

**Bug Fixes**

- Update Static Resource Manager [command names](/en/web/command-reference/).

## 13.63.0 - November 13th, 2023

**Bug Fixes**

- Remove references to [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams).

## 13.61.1 - November 11th, 2023

**Bug Fixes**

- **Custom Errors**: Resolve circular dependency on console message.

## 13.60.0 - November 6th, 2023

**Features**

- Track [`touchcancel`](https://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event) events.

## 13.59.1 - October 30th, 2023

**Bug Fixes**

- Align Analytics and Session Replay pipelines behavior.

## 13.59.0 - October 30th, 2023

**Bug Fixes**

- **Session Replay**: Fixed failure to export `PerformanceResourceTimings` from a web worker.

**Features**

- Make the SKU optional on [`addToCart`](/en/web/sending-an-add-to-cart/) command.

## 13.58.4 - October 30th, 2023

**Performance improvements**

- Remove useless object assignment checks.

## 13.58.3 - October 30th, 2023

**Bug Fixes**

- **Session Replay**: Add slot element and attribute to serialized DOM to fix replays without CSS.

## 13.58.0 - October 25th, 2023

**Features**

- **Session Replay**: Add Static Resource Manager support for `srcset` attributes in `<image>` elements.

## 13.57.0 - October 25th, 2023

**Features**

- **Emerchandising**: Support for Display ads analysis

## 13.56.1 - October 17th, 2023

**Bug Fixes**

- **WebViews**: Remove items from transaction on mobile.

## 13.56.0 - October 16th, 2023

**Features**

- **API Errors**: Collect non encrypted headers.

## 13.55.0 - October 16th, 2023

**Features**

- **Session Replay**: Add `onRecordingStateChange` command to track when the replay state changes.

## 13.54.0 - October 11th, 2023

**Features**

- **WebViews**: Collect API, JS and Custom errors in WebViews.

## 13.53.0 - October 9th, 2023

**Features**

- **Session Replay**: Update to Static Resource Manager v2 (including images, inline assets, base64 assets).

## 13.51.2 - October 5th, 2023

**Bug Fixes**

- **Session Replay**: Do not send navigation timing on the artificial pageviews.
- **Session Replay**: Fix CSS resource when link use a relative path.

## 13.51.0 - October 5th, 2023

**Features**

- Collect `adoptedStyleSheet` events in Iframes and WebViews.

## 13.50.2 - September 28th, 2023

**Bug fixes**

- Fix wrong module imports.

## 13.49.3 - September 22nd, 2023

**Features**

- Manage CSS rules inserted before tag starts.

## 13.49.0 - September 19th, 2023

**Features**

- Static Resource Manager supports SVG elements with links (for snapshots and Session Replay).

## 13.48.3 - September 19th, 2023

**Bug Fixes**

- Remove Static Resource Manager debug logs.

## 13.48.2 - September 19th, 2023

**Bug Fixes**

- **Session Replay**: Filter out static URLs containing credentials.

## 13.48.1 - September 18th, 2023

**Bug Fixes**

- Fix `shadowRoot` observer bug.

## 13.48.0 - September 14th, 2023

**Features**

- **Session Replay**: Introduction of the Static Resource Manager, which optimizes the management of static resources and assets (such as images or fonts).

## 13.46.0 - September 13th, 2023

**Features**

- **Session Replay**: Use API error patterns for resource tracking.

## 13.45.0 - September 13th, 2023

**Features**

- **Session Replay**: Watch for `resize` events of sensitive elements.

## 13.44.2 - September 6th, 2023

**Bug fixes**

- **Session Replay**: Filter `<img>` tags with empty `src` attribute.

## 13.44.1 - September 5th, 2023

**Bug fixes**

- **Serialization**: update `addedNodesInATick` when a mutation target is not identified.

## 13.44.0 - September 4th, 2023

**Features**

- **WebViews**: Update the signature of `serializeWebview` command.

## 13.43.0 - August 31th, 2023

**Features**

- **WebViews**: Add processor to serialize `adoptedStyleSheets`.

## 13.42.0 - August 31th, 2023

**Features**

- **WebViews**: Restart Session Replay on artificial pageview.

## 13.41.0 - August 31th, 2023

**Features**

- **WebViews**: Introduce `AssetTransformers` mode and API to dynamically update it.

## 13.40.6 - August 31th, 2023

**Bug Fixes**

- Handle multi tab for browser events.

## 13.40.4 - August 29th, 2023

**Bug Fixes**

- **Project Configuration**: When updating fields from the **Data collection for Zoning** panel in the console project settings, an empty value for **Matching Dynamic elements regex** would be saved as an empty string instead of null and propagated to the configuration export (`CS_CONF`) used by the Tag. Empty string values are now discarded.

## 13.40.3 - August 29th, 2023

**Bug Fixes**

- **Events**: Watch for [`change`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event) events inside Shadow DOM.

## 13.40.0 - August 24th, 2023

🕒 _Available in an upcoming release on Contentsquare_

**Features**

- **Session Replay**: Add [`PerformanceResourceTiming`](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming) tracker.

## 13.39.0 - August 22nd, 2023

**Features**

- **Session**: Add [`session:clear:visitor`](/en/web/extending-the-session-length/#clear-previous-visitors-data) command to clear information about previous visitors before initiating a new session.

## 13.37.0 - August 21st, 2023

🕒 _Available in an upcoming release on Contentsquare_

**Features**

- **Custom Errors**: Enable collecting console error messages.

## 13.36.1 - August 21st, 2023

**Bug fixes**

- **WebView**: Minor improvements to WebView local assets management.

## 13.36.0 - August 21st, 2023

**Features**

- **Session Replay**: Monitor and collect changes to selected/unselected elements such as radio buttons.

## 13.35.0 - August 17th, 2023

**Features**

- **Webviews**: Collect local assets and pass them to the JavaScript bridge and SDKs.

## 13.34.0 - August 16th, 2023

**Features**

- **Webviews**: Send `BasePath` and `rawPath` of assets to the JavaScript bridge and SDKs.

## 13.33.1 - August 10th, 2023

**Bug Fixes**

- **DOM Serializer**: Collection of [`adoptedStyleSheets`](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptedStyleSheets) on main document is re-introduced.

## 13.33.1 - August 9th, 2023

**Features**

- **Session Replay**: Add optional capability to start and stop a replay based on user consent approval/withdrawal (`replayConsentRequired` configuration property).

  Up until today, no visitor consent was required to start Session Replay: the value of `replayConsentRequired` is `0`. When visitor consent is required, the value is `1`.

  Use the `replay:consent:startForSession:granted` and `replay:consent:startForSession:withdrawn` commands to shift the consent based on the user answer.

  The [`afterPageView`](/en/web/third-party-integrations-and-implementation-examples/#afterpageview) command has been enhanced to return the `replayConsentRequired` and `replayConsent` return values:

  ```javascript {5-6}
  {
    projectId: 194,
    sessionKey: '48531f4b-b184-a11a-cae1-10ee72ef4c10.110',
    pageNumber: 1,
    replayConsentRequired: 1
    replayConsent: 0
  }
  ```

## 13.31.2 - August 3rd, 2023

**Bug Fixes**

- **Session Replay**: Identify and prevent email addresses to be encoded twice in query parameters.

  Example: `james@cs.com` would be encoded to `james%40cs.com` (correct), and then again to `james%2540cs.com` (incorrect).

## 13.30.11 - August 1st, 2023

**Features**

- **Tag bundles**: The Tracking Tag is now served as ES2019 JavaScript by default, if your browser allows it. ES2019 bundles come with critical patching, treeshaking, and live update on project configuration change.

  If your browser does not support ES2019, the Tag is still served in ES5 at the same URL: `https://t.contentsquare.net/uxa/{PROJECT_ID}.js`

## 13.30.2 - July 20th, 2023

**Bug fixes**

- **Session Replay**: Manage masking when `history.pushState()` is used before session renewal. Use of the browser's back button after triggering `history.pushState()` with a page outside the masking rules could lead to sending unmasked pages in certain cases.

## 13.30.0 - July 19, 2023

**Features**

- Treeshake accessibility module to optimize bundle size.

## 13.29.0 - July 12, 2023

**Features**

- **Session management**: Add a [`session:start:newVisitor`](/en/web/extending-the-session-length/#create-a-new-visitor) command to start a new visitor. Use this command when multiple people are using devices in kiosks, for instance.

## 13.28.6 - July 12, 2023

**Bug fixes**

- **Custom Errors**: Send Custom Errors to the Session Replay pipeline only if the maximum number hasn't been reached.

## 13.28.5 - July 10, 2023

**Bug fixes**

- Fixed performance issue in `VisibilityObserver`.

## 13.28.0 - July 05, 2023

**Features**

- Add the pageview type to the [`afterPageView`](/en/web/third-party-integrations-and-implementation-examples/#afterpageview) command's context.

## 13.27.0 - July 04, 2023

**Features**

- **API Errors**: ignore case when matching body for [configurable API errors](https://support.contentsquare.com/hc/en-gb/articles/5584481982364).

## 13.26.4 - July 04, 2023

**Performance improvements**

- Optimize Tag bootload time.

## 13.26.0 - June 29, 2023

**Features**

- **WebView**: stringify assets before calling `sendAssets`.

## 13.25.0 - June 29, 2023

**Bug fixes**

- **Session Replay**: do not serialize nodes not yet identified during initial serialization.

**Features**

- **Session Replay**: add replay link generator command.

## 13.24.2 - June 29, 2023

**Bug fixes**

- **Session Replay**: catch exceptions thrown by `whenDefined` function.

## 13.24.1 - June 28, 2023

**Bug fixes**

- **Session Replay**: improve sensitive content coverage.

## 13.24.0 - June 26, 2023

**Features**

- **API Errors**: Configurable API errors support.

## 13.22.3 - June 26, 2023

**Bug fixes**

- **`EnviromentChecker`**: check if `localStorage` is not `null`.

## 13.22.1 - June 23, 2023

**Bug fixes**

- Check `localStorage` exists in `window`.

## 13.22.0 - June 22, 2023

**Performance Improvements**

- **Emerchandising**: Optimize `getAllValidAnchors`.

## 13.21.3 - June 22, 2023

**Performance improvements**

- Remove non essential `localStorage` check.

## 13.21.0 - June 15, 2023

**Features**

- **WebView**: Migrate analytics events.

## 13.20.0 - June 15, 2023

**Features**

- **WebView**: Support commands on `cs_wvt`.

## 13.19.7 - June 14, 2023

**Bug fixes**

- Handle ES5 in the worker context.

## 13.19.3 - June 08, 2023

**Bug fixes**

- Log errors thrown when creating the web worker.

## 13.19.2 - June 07, 2023

**Bug fixes**

- Update GzipCompressor to only use native `CompressionStream` on Chromium.

## 13.19.0 - June 06, 2023

**Features**

- **Ecommerce**: Add `trackTransaction` to commands.

## 13.18.0 - June 06, 2023

**Features**

- **Replay**: add pageX, pageY in Tap replay events.

## 13.17.2 - June 1st, 2023

**Bug fixes**

- **Analysis**: upgrade web-vitals library.

## 13.17.1 - May 31st, 2023

**Bug fixes**

- Support different casing of the `Content-Type` header.

## 13.17.0 - May 31st, 2023

**Features**

- Filter untrusted gesture events.

## 13.16.0 - May 30th, 2023

**Features**

- **Session Replay**: Add regex operator condition.

## 13.15.8 - May 29th, 2023

**Bug fixes**

- Avoid relying on the `Response.type` property.

## 13.15.7 - May 29th, 2023

**Performance Improvements**

- Optimize inactivity tracker.

## 13.15.6 - May 29th, 2023

**Performance Improvements**

- **Session Replay**: Optimize debounce.

## 13.14.4 - May 24th, 2023

**Bug fixes**

- **Session Replay**: allow all small Base64 images.

## 13.14.3 - May 24th, 2023

**Bug fixes**

- Catch `onArtificialPageViewEnd` errors to avoid stopping the artificial pageview.

## 13.13.9 - May 22nd, 2023

**Bug fixes**

- **Session Replay**: Add support for `data-cs-scroll-container` attribute on initial scroll event.

## 13.13.4 - May 16th, 2023

**Bug fixes**

- Send `SCREEN_RESIZE` event on artificial pageview.

## 13.13.3 - May 16th, 2023

**Bug fixes**

- **Session Replay**: Mask attribute value of input type button or submit when attribute name is value.

## 13.13.1 - May 15th, 2023

**Bug fixes**

- **Session Replay**: mask sensitive nodes removed during serialization.

## 13.12.4 - May 4th, 2023

**Bug fixes**

- **Session Replay**: start `textVisibility` only when enabled.

## 13.11.3 - April 18th, 2023

**Bug fixes**

- Stop using `CompressionStream` for Safari.

## 13.11.0 - April 25th, 2023

**Features**

- Add Interaction to Next Paint (INP) support.

## 13.10.0 - April 18th, 2023

**Bug fixes**

- Support non-utf8 data for Symmetric decryption.

## 13.8.6 - April 4th, 2023

**Bug fixes**

- **Session Replay**: Add value attribute to replay request for `input[type=submit]`.

## 13.7.3 - March 31st, 2023

**Bug fixes**

- **Session Replay**: Remove initial empty event.

## 13.7.1 - March 28th, 2023

**Performance Improvements**

- Measure `RecordingBatch.addEvent`.

## 13.7.0 - March 28th, 2023

**Features**

- Errors triggered by Contentsquare tag are properly caught by third-party monitoring tools.

## 13.6.1 - March 28th, 2023

**Performance Improvements**

- Optimize `onStartTracking` event lifecycle.

## 13.6.0 - March 28th, 2023

**Features**

- **Webview**: Add `ec:transaction:items:add` command for WebView in SDK.

## 13.5.0 - March 23th, 2023

**Features**

- **IFrame**: Add support for `setEncryptionSelectors` in iframe context.

## 13.4.0 - March 22th, 2023

**Features**

- Add task scheduler globally.

## 13.3.0 - March 20th, 2023

**Features**

- **Iframe**: Allow Tag to start inside an iframe of type `srcdoc`.

## 13.2.7 - March 15th, 2023

**Bug fixes**

- **Replay**: Do not set `mouseover` event listener on shadow roots for old iOS versions.

## 13.2.4 - March 15th, 2023

**Performance improvements**

- Measure the execution duration of `ElementVisibility` tracker

## 13.2.1 - March 13th, 2023

**Bug fixes**

- Handle `self` property overrides

## 13.2.0 - March 9th, 2023

**Features**

- Stringify and send requests from worker

## 13.1.0 - March 9th, 2023

**Features**

- **Session Replay**: Implement screen resize event tracker

## 13.0.2 - March 6th, 2023

**Performance improvements**

- Improve DOM serialization performance.

## 13.0.1 - March 6th, 2023

**Bug Fixes**

- **Session Replay**: Support parsing multiple values for the `rel` attribute for stylesheet linking.

## 13.0.0 - March 6th, 2023

**Features**

- Add Session Replay support in WebViews

**Breaking Changes**

- `window._uxa.push(["setOption", "isWebView", true]);` will start the Tag in WebView mode.

## 12.6.1 - March 2nd, 2023

**Bug Fixes**

- Remove warning logs for node without identifier

## 12.5.11 - March 1st, 2023

**Bug Fixes**

- **Accessibility**: Fix issue when an artificial pageview is triggered before the initial collection is triggered

## 12.5.7 - February 24th, 2023

**Bug Fixes**

- Handle null referrer

## 12.5.7 - February 23th, 2023

**Bug Fixes**

- Text visibility events not sent when emerch is enabled

## 12.5.0 - February 15th, 2023

**Features**

- Add `isRecording` command inside iframe context

## 12.4.4 - February 15th, 2023

**Bug fixes**

- Fix extensions index out of bounds

## 12.4.3 - February 15th, 2023

**Bug fixes**

- Logger should handle when property is undefined

## 12.4.2 - February 13th, 2023

**Bug fixes**

- Mask API error library field

## 12.4.0 - February 8th, 2023

**Features**

- Add browser accessibility features and extensions detection

## 12.3.0 - February 8th, 2023

**Features**

- Refactored serialization objects

**Performance Improvements**

- Read visitor cookie only once

## 12.1.0 - February 1st 2023

**Features**

- Mask JWT token

## 12.0.1 - January 27th, 2023

Version bump for the `@contentsquare/tracking-tag` package.

## 12.0.0 - January 26th, 2023

**Features**

- Add data collection for Session Replay in iFrames

## 11.68.2 - January 17th, 2023

**Bug fixes**

- Refactored eventQueueStream

## 11.68.1 - January 12th, 2023

**Bug fixes**

- Fix race condition

## 11.68.0 - January 5th, 2023

**Features**

- Improve text visibility performance
- Remove dynamically generated numbers from element name in path computation

## 11.67.0 - January 2nd, 2023

**Features**

- **Session Replay data collection**: added the `setEncryptionSelectors` command to encrypt sensitive data by a selector (continued)

## 11.66.0 - January 2nd, 2023

**Bug fixes**

- **Custom Variables**: Ignore invalid custom variables that were injected in the [`_cs_cvars`](/en/web/cookies/#_cs_cvars) cookie.

## 11.65.0 - December 22th, 2022

**Features**

- **Transformers**: Change JavaScript transformers to TypeScript transformers.

## 11.64.0 - December 20th, 2022

**Features**

- **Emerch**: Add product exposure tracking.

## 11.63.1 - December 19th, 2022

Version bump for the `@contentsquare/tracking-tag` package.

## 11.63.0 - December 18th, 2022

**Features**

- **Session Replay data collection**: added the `setEncryptionSelectors` command to encrypt sensitive data by a selector

## 11.62.0 - December 14th, 2022

**Bug Fixes**

- **Emerch**: Keep request parameters upon session renewal

## 11.62.0 - December 13th, 2022

**Features**

- Process DOM mutations in chunks to improve performance

## 11.61.1 - December 12th, 2022

**Bug Fixes**

- **API Errors**: Clone Fetch Response before reading payload
- **Session Replay data collection**: The `set_adopted_style_sheets` event must come after the target element is serialized

## 11.61.0 - December 12th, 2022

**Features**

- **Iframe**: Collect emerch on trackPageview.
- **Iframe**: Upgrade communication to Channel Messaging API.

## 11.60.1 - December 8th, 2022

**Bug Fixes**

- Fix Text visibility issue

## 11.60.0 - December 8th, 2022

**Bug Fixes**

- Fix most frequent errors

## 11.59.0 - December 07, 2022

**Features**

- Support [`document.adoptedStyleSheets`](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptedStyleSheets) in Session Replay (continued).

## 11.57.9 - December 05th, 2022

**Bug Fixes**

- Install listeners for composed events only on document.

## 11.57.7 - November 18th, 2022

**Bug Fixes**

- **Serialization**: Duplication when moving a node inside a node added during the same tick.

## 11.57.6 - November 17th, 2022

Version bump for the `@contentsquare/tracking-tag` package.

This version protects the `Image.src` setter against JavaScript overrides.

## 11.57.4 - November 15th, 2022

**Bug Fixes**

- Added input element to selectors in serialization

## 11.57.3 - November 14th, 2022

**Bug Fixes**

- Allowed synchronous compression when Worker creation fails (continued)

## 11.57.2 - November 14th, 2022

**Bug Fixes**

- Allowed synchronous compression when Worker creation fails

## 11.57.1 - November 14th, 2022

Version bump for the `@contentsquare/tracking-tag` package.

## 11.57.0 - November 10th, 2022

Version bump for the `@contentsquare/tracking-tag` package.

## 11.56.2 - November 10th, 2022

**Performance Improvements**

- Compute initial scroll position only for document instead of every HTML element.

## 11.56.1 - November 9th, 2022

**Features**

- Text visibility revamp

## 11.56.0 - November 8th, 2022

**Bug fixes**

- **Session Replay**: reduce the payload size by rounding mouse position coordinates.

## 11.55.1 - November 7th, 2022

**Bug fixes**

- Fix intermittent JS error produced by the logger.

## 11.55.0 - November 7th, 2022

**Features**

- Don't renew sessions on browser events that are not user events.

## 11.54.3 - November 3rd, 2022

**Bug fixes**

- Fix throttling to only report actual target events
- Filter untrusted click/mouse/pointer/touch events (continued)

## 11.54.2 - November 2nd, 2022

**Bug fixes**

- Update Performance API management to fix incorrect session time duration
- Filter untrusted click/mouse/pointer/touch events

## 11.54.1 - October 31st, 2022

**Bug fixes**

- Reset pageview request index on session renewal.

## 11.54.0 - October 27th, 2022

**Features**

- (Internal) Allow flush commands register for dev environments

**Performance Improvements**

- Miscellaneous performance improvements (including tag download time, caching, tree shaking)

## 11.53.1 - October 24th, 2022

Version bump for the `@contentsquare/tracking-tag` package.

## 11.53.0 - October 24th, 2022

**Features**

- Add `referrer:` commands to mask Personal Data carried over by the referrer and sent to the tracking Tag on the next page.

## 11.52.0 - October 19th, 2022

**Features**

- Use reliable selector to collect product path for Emerch.

## 11.51.0 - October 11th, 2022

**Bug fixes**

- Use `cachedJsonStringify` on Error events.

**Features**

- Increase the number of events to and throttling time to send a Session Replay data collection request

**Performance Improvements**

- Implemented throttling on move events

## 11.50.0 - October 10th, 2022

**Bug fixes**

- Fix serialization issues which resulted in broken snapshots

## 11.49.1 - October 05th, 2022

**Bug fixes**

- Fix duplicates in collection by handling nodes removed and added within the same tick (event loop).

## 11.49.0 - October 05th, 2022

**Features**

- Check `Map` and `Set` are supported in the browser before tracking.

## 11.48.0 - October 04th, 2022

**Features**

- Retry data collection requests for Session Replay.

**Bug fixes**

- Fix Unplayable Replay rate by Wait for `initialDom` to be done before sending beacon requests.

## 11.47.0 - September 29th, 2022

**Bug fixes**

- Reintroduce `CSPathComputation` global variable in built Tag.

## 11.46.0 - September 28th, 2022

**Features**

- Support product exposure tracking for Emerch.

## 11.45.1 - September 26th, 2022

Version bump for the `@contentsquare/tracking-tag` package.

## 11.45.0 - September 26th, 2022

**Features**

- Remove `mousemove`, `mousedown` and `mouseup` events collection

## 11.44.5 - September 22th, 2022

**Bug fixes**

- Manage concurrent async serializations

## 11.44.4 - September 22th, 2022

**Bug fixes**

- Catch Session Replay data collection recovery errors to avoid stopping the Tag boot.

## 11.44.3 - September 29th, 2022

**Bug fixes**

- Prevent serializing twice nodes added in the same tick (event loop).

## 11.44.2 - September 15th, 2022

**Bug fixes**

- Ignore attributes mutations that do not change the state of the DOM

**Performance Improvements**

- Improve duplicated `JSON.stringify` calls
- Improved performance of Array-like operations

## 11.44.1 - September 14th, 2022

**Bug fixes**

- Improve browser support check for Custom Elements registration in Session Replay
- Fix page and session number on session renewal if multiple tabs are open

## 11.44.0 - September 13th, 2022

**Features**

- **Add `pvt` query parameter to tell the pageview type**: artificial, natural, or session renewal.

## 11.43.0 - September 12th, 2022

**Features**

- Throttle data collection for Session Replay requests to improve performance

## 11.42.0 - September 12th, 2022

**Features**

- Protect `window.performance` against overrides (pageviews were not being fired).

## 11.41.0 - September 8th, 2022

**Bug fixes**

- Improve sanitization of Personal Data CSS selectors which prevented collecting Session Replay data for sessions (continued)

**Features**

- Fix controlled exposure for HTML elements which generated blank screens

## 11.40.2 - September 7th, 2022

**Bug fixes**

- Improve sanitization of Personal Data CSS selectors which prevented collecting Session Replay data for sessions

## 11.40.1 - August 29th, 2022

**Bug fixes**

- Do not collect personal information in JS errors
- Report errors when touch events are not supported

## 11.40.0 - August 24th, 2022

- Implementation touch events - Pinch and Spread support

## 11.39.0 - August 23rd, 2022

- Technical improvement on the serialization process

## 11.38.1 - August 22nd, 2022

- Collect touch events in Session Replay

## 11.38.0 - August 22nd, 2022

- Collect touch events in Session Replay

## 11.37.1 - August 18th, 2022

- Technical improvement

## 11.37.0 - August 17th, 2022

- Merchant info for add to cart and purchase

## 11.36.2 - August 9th, 2022

- **Bug fix**: Emerch module

## 11.36.2 - August 8th, 2022

- **Bug fix**: Emerch module

## 11.36.1 - August 8th, 2022

- Session Replay improvement

## 11.36.0 - August 3rd, 2022

- Implementation of Text errors

## 11.35.0 - August 3rd, 2022

- **Technical improvement**: Session duration

## 11.34.0 - August 3rd, 2022

- Cvar key maximum length increased to 512 characters.

## 11.33.3 - August 1st, 2022

- Performance improvement

## 11.33.2 - July 28th, 2022

- Internal improvement

## 11.33.1 - July 26th, 2022

- Support fix

## 11.33.0 - July 18th, 2022

- Update the pointer events with more arguments.

## 11.32.2 - July 13th, 2022

- Maximum length of Dvar key increased from 50 to 512 characters.

## 11.32.1 - July 12th, 2022

- Technical improvement

## 11.32.0 - July 12th, 2022

- New Scope for custom variables added

## 11.30.1 - July 6th, 2022

- Support fix

## 11.30.0 - July 5th, 2022

- New event tracking for input password and number in SR

## 11.29.0 - July 4th, 2022

- Add Swipe metrics in zoning

## 11.28.0 - July 4th, 2022

- Collect body

## 11.27.3 - June 28th, 2022

- Refactoring DOM serializer/ Async Map Processor introduction

## 11.27.2 - June 28th, 2022

- Support fix

## 11.27.1 - June 28th, 2022

- Scraper requests fix

## 11.27.0 - June 27th, 2022

- Collect swipe and long-press events

## 11.26.3 - June 16th, 2022

- Tag refactoring

## 11.26.1 - June 8th, 2022

- Support fix

## 11.26.0 - June 7th, 2022

- API errors - Collect Query parameters

## 11.25.2 - June 1st, 2022

- Bug fix

## 11.25.1 - May 31st, 2022

- Support fix

## 11.25.0 - May 24th, 2022

- Regex flags support

## 11.24.0 - May 17th, 2022

- Tag improvement

## 11.23.2 - May 9th, 2022

- Fix API call undefined when collecting headers

## 11.23.1 - May 9th, 2022

- Support ticket fix

## 11.23.0 - May 4th, 2022

- Manage lazy loaded products
- Add query parameter in display requests to indicate if the payload is compressed or not

## 11.22.0 - May 3rd, 2022

- Collect custom/standard headers

## 11.21.0 - April 26th, 2022

- **Fix**: [API Error] Collected wrong `error_time`

## 11.20.2 - April 25th, 2022

- Bug fix

## 11.20.0 - April 20th, 2022

- Support ticket fix

## 11.19.4 - April 14th, 2022

- Symmetric Encryption services into `cryptoWrapper` package

## 11.19.3 - April 13th, 2022

- Bug fix

## 11.19.2 - April 12th, 2022

- Bug fix

## 11.19.1 - April 11th, 2022

- Internal improvement

## 11.19.0 - April 11th, 2022

- Add `projectId` to the context object passed to the afterPageView callback

## 11.18.0 - April 7th, 2022

- Use fetch when available

## 11.17.0 - April 7th, 2022

- Reduce Tag size

## 11.16.0 - April 6th, 2022

- Internal change in logs
- Bug fix

## 11.15.2 - April 5th, 2022

- Internal change in logs

## 11.15.1 - March 31st, 2022

- Bug fix

## 11.15.0 - March 30th, 2022

- Send encrypted user identifier to Session Replay

## 11.14.2 - March 30th, 2022

- Debounced scroll events attributed to the wrong pageview

## 11.14.1 - March 21st, 2022

- Session Replay improvement

## 11.14.0 - March 21st, 2022

- Bug fix

## 11.13.1 - March 21st, 2022

- Bug fix

## 11.13.0 - March 21st, 2022

- Internal update

## 11.12.0 - March 15th, 2022

- Internal logs set up

## 11.11.0 - March 14th, 2022

- `setOption` command usage for technical reason

## 11.10.1 - March 10th, 2022

- Events collection fix

## 11.10.0 - March 10th, 2022

- Core Web Vitals collection implementation
- Minor improvement

---

# Tag API reference

URL: https://docs.contentsquare.com/en/web/command-reference/

import { Badge, Parameters, Parameter, Since } from '~/components';
Tag commands reference including signature, parameter descriptions, and examples.

:::tip[Which commands are available in my project?]
Contentsquare use [tree shaking](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking) techniques to optimize the Tag bundle size for every project.  
Specific commands can be unavailable when:
- You haven't subscribed to the specified paying option or module
- You are [self-hosted](/en/web/#self-hosting) and do not use a recent version of the Tag
:::

## Pageview

### `trackPageview`

<Since v="1.1.0" />

Send an artificial pageview.

```javascript
window._uxa.push(['trackPageview', path, options]);
```

If run before the loading of the tag, the command will behave as [`setPath`](#setpath).

#### Parameters

<Parameters>
  <Parameter name="path" type="string (optional, <= 255 chars)">
    The URL pathname to send.  
    If not set, the current document `href` attribute is used instead.
  </Parameter>
    <Parameter name="options" type="object (optional)">
    Path options
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="decodeURI" type="boolean">
        Single attempt to decode the provided `path` using the [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) native API. Since 13.97.0.
      </Parameter>
      <Parameter name="decodeURIDeep" type="boolean">
        Up to 10 attempts to fully decode the provided `path` using the [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) native API. Since 13.97.0.
      </Parameter>
      <Parameter name="lifespan" type="integer or string">
        Specify the lifespan of the overridden path.
        If not set, the overridden path will persist all along the user session.
        
        Possible string values: `onNextPageviewOnly` (reset after this pageview).  
        Possible integer values: `2`.
      </Parameter>
    </details>
  </Parameter>
</Parameters>

### `setPath`

<Since v="2.0.0" />

Override the path to send within a pageview.

```javascript
window._uxa.push(['setPath', path, options]);
```

#### Parameters

<Parameters>
  <Parameter name="path" type="string">
    The path to send in place of the current URL pathname.
  </Parameter>
  <Parameter name="options" type="object (optional)">
    Path options
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="decodeURI" type="boolean">
        Single attempt to decode the provided `path` using the [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) native API. Since 13.97.0.
      </Parameter>
      <Parameter name="decodeURIDeep" type="boolean">
        Up to 10 attempts to fully decode the provided `path` using the [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) native API. Since 13.97.0.
      </Parameter>
      <Parameter name="lifespan" type="integer or string">
        Specify the lifespan of the overridden path.
        If not set, the overridden path will persist all along the user session.
        
        Possible string values: `onNextPageviewOnly` (reset after upcoming pageview).  
        Possible integer values: `2`.
      </Parameter>
    </details>
  </Parameter>
</Parameters>

#### Examples

##### Collect URL with custom decoded path

URL is `https://www.company.es/specials/campañas-y-ofertas`.

```javascript
window._uxa.push(['setPath', window.location.href, { decodeURI: true }]);
```

Using `decodeURI`, the URL in the next pageview request is collected without encoding:

```text /campañas-y-ofertas/
https://www.company.es/specials/campañas-y-ofertas
```

instead of:

```text /campa%C3%B1as-y-ofertas/
https://www.company.es/specials/campa%C3%B1as-y-ofertas
```

### `setQuery`

<Since v="7.16.0" />

Replace a URL query string containing personal data with a masked one.

```javascript
window._uxa.push(['setQuery', queryString, options]);
```

#### Parameters

<Parameters>
  <Parameter name="queryString" type="string">
    Masked query string.
  </Parameter>
  <Parameter name="options" type="object (optional)">
    Query string options
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="decodeURI" type="boolean">
        Single attempt to decode the provided `queryString` using the [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) native API. Since 13.97.0.
      </Parameter>
      <Parameter name="decodeURIDeep" type="boolean">
        Up to 10 attempts to fully decode the provided `queryString` using the [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) native API. Since 13.97.0.
      </Parameter>
      <Parameter name="lifespan" type="integer or string">
        Specify the lifespan of the overridden query.
        If not set, the overridden query will persist all along the user session.
        
        Possible string values: `onNextPageviewOnly` (reset after upcoming pageview).  
        Possible integer values: `2`.
      </Parameter>
    </details>
  </Parameter>
</Parameters>

#### Examples

##### Collect URL with custom decoded query string

URL is `https://www.company.es/specials/ofertas?code=mañanas2024`.

```javascript wrap
window._uxa.push(['setQuery', window.location.search + '&cookies-popin=true', { decodeURI: true }]);
```

Using `decodeURI`, the query string URL in the next pageview request is collected without encoding:

```text /code=mañanas2024/
https://www.company.es/specials/ofertas?code=mañanas2024&cookies-popin=true
```

instead of:

```text /code=ma%C3%B1anas2024/
https://www.company.es/specials/ofertas?code=ma%C3%B1anas2024&cookies-popin=true
```

### `referrer:maskUrl`

<Since v="11.53.0" />

Allows to change the referrer URL (`dr` query parameter) that is sent in the next pageview request.  
The command can be called multiple times to mask different URL patterns.

```javascript
window._uxa.push(['referrer:maskUrl', url]);
```

#### Parameters

<Parameters>
  <Parameter name="url" type="string">
    URL containing parameters prefixed with a colon for making purposes.
  </Parameter>
</Parameters>

#### Examples

The referrer URL to be sent is:

```text
https://web.com/users/123456/products/ABCDEF
```

By calling `referrer:maskUrl` with this URL:

```javascript
window._uxa.push(['referrer:maskUrl', 'https://web.com/users/:USER_ID/products/:PRODUCT_ID']);
```

The referrer URL that is sent becomes:

```text "CS_ANONYMIZED_USER_ID" "CS_ANONYMIZED_PRODUCT_ID"
https://web.com/users/CS_ANONYMIZED_USER_ID/products/CS_ANONYMIZED_PRODUCT_ID
```

### `referrer:keepQueryString`

<Since v="11.53.0" />

Reverts the action of [`referrer:removeQueryString`](#referrerremovequerystring) for the next pageview.  

```javascript
window._uxa.push(['referrer:removeQueryString']);
```

#### Examples

The referrer URL to be sent is:

```text
https://hello?withQueryString=true
```

`referrer:keepQueryString` will keep the query string if `referrer:removeQueryString` was used:

```javascript
window._uxa.push(['referrer:removeQueryString'])
// Referrer URL will be https://hello?

window._uxa.push(['referrer:keepQueryString'])
// Referrer URL will be https://hello?withQueryString=true
```

#### Parameters

<Parameters/>

### `referrer:removeQueryString`

<Since v="11.53.0" />

Remove all characters in the query string.

```javascript
window._uxa.push(['referrer:removeQueryString']);
```

#### Parameters

<Parameters/>

#### Examples

The referrer URL to be sent is:

```text
https://hello?withQueryString=true
```

By calling `referrer:removeQueryString`:

```javascript
window._uxa.push(['referrer:removeQueryString']);
```

The referrer URL becomes:

```text
https://hello?
```

### `setCustomVariable`

<Since v="1.1.0" />

Define a custom variable to add meta information to pageviews about the page, user, or the session.

```javascript
window._uxa.push(['setCustomVariable', index, name, value, scope]);
```

A custom var can be deleted by calling the command with an empty string value. The index parameter must match the custom var to delete.
If a custom var already exists with a given index, the new name and value will override the old one.

#### Parameters

<Parameters>
  <Parameter name="index" type="positive integer">
      Variable index (between 1 and 20).
  </Parameter>
  <Parameter name="name" type="string (<= 512 chars)">
      Variable name.
  </Parameter>
  <Parameter name="value" type="string (<= 255 chars)">
      Variable value.
  </Parameter>
  <Parameter name="scope" type="string or integer (optional)">
    Variable scope. If not set, defaults to visit and page.

    Possible string values: `visit`, `page`, or `nextPageOnly`.  
    Possible integer values: `2`, `3`, or `4`.
  </Parameter>
</Parameters>

#### Examples

##### Setting a custom variable with the scope `visit` at index 5

```javascript
window._uxa.push(['setCustomVariable', 5, "cname", "cvalue", "visit"]);
```

##### Setting and deleting custom variables with specific scopes

Setting a custom var in both scopes (visit + page) at index 6 and named `cname` value `cvalue`:

```javascript
window._uxa.push(['setCustomVariable', 6, "cname", "cvalue"]);
```

To delete the custom variable:

```javascript
window._uxa.push(['setCustomVariable', 6, "cname", "", 2]); // from scope visit
window._uxa.push(['setCustomVariable', 6, "cname", "", 3]); // from scope page
window._uxa.push(['setCustomVariable', 6, "cname", ""]); // from both scopes by passing no value
```

##### Setting a custom variable with the scope `nextPageOnly`

```javascript
window._uxa.push(['setCustomVariable', 6, "cname", "cvalue", "nextPageOnly"]); 
// or
window._uxa.push(['setCustomVariable', 6, "cname", "cvalue", "4"]); 
```

Attach and send the custom variable to an specific artificial pageview:

```javascript
window._uxa.push(['trackPageview', '/a-path']);
```

After sending another artificial pageview:

```javascript
window._uxa.push(['trackPageview', "/another-path"]);
```

The custom variable is automatically deleted.

### `hidePageTitle`

<Badge variant="accent">Product Analytics</Badge> | <Since v="15.10.0" />

Replace the page title by `****` in the next pageview or in all the next pageviews.

```javascript
window._uxa.push(["hidePageTitle", scope]);
```

#### Parameters

<Parameters>
  <Parameter name="scope" type="string">
    When `scope` equals to `onNextPageviewOnly`, the command only affects the next pageview.
    Otherwise, it affects all subsequent pageviews.
  </Parameter>
</Parameters>

#### Examples

Consider the following HTML page:

```html /<title>(.*)</title>/
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order #12345 for Jane Smith - Retail Store</title>
  </head>
  <body>
    ...
  </body>
</html>
```

Calling `window._uxa.push(["hidePageTitle"]);` replaces "Order #12345 for Jane Smith - Retail Store" by `****` on all the next pageviews, until the tag is reloaded or if the `resetHidePageTitle` command is run.

### `resetHidePageTitle`

<Badge variant="accent">Product Analytics</Badge> | <Since v="15.10.0" />

Reverts the action of [`hidePageTitle`](#hidepagetitle) for the next pageviews.

```javascript
window._uxa.push(["resetHidePageTitle"]);
```

#### Parameters

<Parameters/>

## eCommerce

### `ec:transaction:create`

<Since v="11.5.0" />

Create transactions before adding items and sending them to Contentsquare.

```javascript
window._uxa.push(['ec:transaction:create', {
  id: TRANSACTION_ID,
  revenue: REVENUE_AMOUNT,
  currency: CODE
}]);
```

#### Parameters

<Parameters>
  <Parameter name="id" type="string">
    Transaction ID.
  </Parameter>
  <Parameter name="revenue" type="integer or string">
    Total cost of the transaction.
  </Parameter>
  <Parameter name="currency" type="string (optional, <= 10 characters)">
    Currency value.  
    When no currency is supplied, the currency used in the one from the Contentsquare project settings.
  </Parameter>
</Parameters>

#### Examples

##### Creating a transaction in euros

```javascript {3-7}
window._uxa = window._uxa || [];

window._uxa.push(['ec:transaction:create', {
  id: "037333583343",
  revenue: 280,
  currency: "EUR"
}]);

window._uxa.push(['ec:transaction:items:add', {
  id: "037333583343",
  name: "Men's Tree Dasher 2",
  sku: "AA000QM080",
  category: "Shoes",
  price: 140,
  quantity: 2
}]);

window._uxa.push(['ec:transaction:send']);
```

### `ec:transaction:items:add`

<Since v="11.10.0" />

Add item to a transaction created with [`ec:transaction:create`](#ectransactioncreate).

```javascript
window._uxa.push(['ec:transaction:items:add', {
  id: TRANSACTION_ID,
  name: ITEM_NAME,
  price: ITEM_AMOUNT,
  quantity: ITEM_QUANTITY,
  sku: ITEM_SKU_CODE,
  category: ITEM_CATEGORY,
  merchant: MERCHANT_NAME
}]);
```

#### Parameters

<Parameters>
  <Parameter name="id" type="string">
    The Transaction ID.
  </Parameter>
  <Parameter name="name" type="string">
    Item name.
  </Parameter>
  <Parameter name="price" type="float">
    Item price.
  </Parameter>
  <Parameter name="quantity" type="integer">
    Number of items.
  </Parameter>
  <Parameter name="sku" type="string (optional)">
    A valid Stock Keeping Unit (SKU) code.
  </Parameter>
  <Parameter name="category" type="string  (optional)">
    Item category.
  </Parameter>
  <Parameter name="merchant" type="string (optional)">
  The merchant name.
  </Parameter>
</Parameters>

#### Examples

##### Adding two items to a transaction

```javascript {9-16}
window._uxa = window._uxa || [];

window._uxa.push(['ec:transaction:create', {
  id: "037333583343",
  revenue: 280,
  currency: "EUR"
}]);

window._uxa.push(['ec:transaction:items:add', {
  id: "037333583343",
  name: "Men's Tree Dasher 2",
  sku: "AA000QM080",
  category: "Shoes",
  price: 140,
  quantity: 2
}]);

window._uxa.push(['ec:transaction:send']);
```

### `ec:transaction:send`

<Since v="10.5.0" />

Send a transaction containing items added with `ec:transaction:items:add` to later associate a user's session with their purchases.

```javascript
window._uxa.push(['ec:transaction:send']);
```

#### Parameters

<Parameters/>

#### Examples

##### Sending a transaction with two items

```javascript {18}
window._uxa = window._uxa || [];

window._uxa.push(['ec:transaction:create', {
  id: "037333583343",
  revenue: 280,
  currency: "EUR"
}]);

window._uxa.push(['ec:transaction:items:add', {
  id: "037333583343",
  name: "Men's Tree Dasher 2",
  sku: "AA000QM080",
  category: "Shoes",
  price: 140,
  quantity: 2
}]);

window._uxa.push(['ec:transaction:send']);
```

### `ec:cart:add`

<Since v="10.5.0" />

Register an add to cart event.

```javascript
window._uxa.push(['ec:cart:add', {
  merchant: MERCHANT_NAME,
  sku: SKU_CODE
}]);
```

#### Parameters

<Parameters>
  <Parameter name="merchant" type="string (optional)">
    The merchant name.
  </Parameter>
  <Parameter name="sku" type="string (optional)">
    A valid Stock Keeping Unit (SKU) code.
  </Parameter>
</Parameters>

:::note
Either `merchant` or `sku` is required.
:::

#### Examples

##### Sending an add to cart event (Merchandising customers)

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['ec:cart:add', {
  merchant: "Pixel patterns",
  sku: "DC126O0FX-L11"
}]);
```

## Session

### `extendSession`

<Since v="9.7.0" />

Extend session duration.

```javascript
window._uxa.push(['extendSession']);
```

This command automatically extends a session until:

- The session duration reaches 4h00
- A new pageview is triggered

To achieve the extension of the session, it will periodically, with a period of 29 minutes:

- Update the session cookie [`cs_s`](/en/web/cookies/#_cs_s) and add 29 minutes.
- Send a dynamic variable `session_expiry_update:Counter` where the counter begins with the value 1 and is incremented (+1) after each call.

#### Parameters

<Parameters/>

### `optout`

<Since v="7.12.0" />

Opt out the current user from data collection.

```javascript
window._uxa.push(['optout']);
```

#### Parameters

<Parameters/>

### `session:start:newVisitor`

<Since v="13.29.0" />

Start a new visitor and a new session.  
Running the command generates a new pageview.

```javascript
window._uxa.push(["session:start:newVisitor"]);
```

#### Parameters

<Parameters/>

### `session:clear:visitor`

<Since v="13.39.0" />

Clear all data linked to previous visitors.

```javascript
window._uxa.push(["session:clear:visitor"]);
```

:::warning
The command must be called before the Tag is loaded.
:::

#### Parameters

<Parameters/>

## Dynamic variables

### `trackDynamicVariable`

<Since v="5.19.0" />

Send a dynamic variable.

```javascript
window._uxa.push(['trackDynamicVariable', {DYNAMIC_VARIABLE}]);
```

#### Parameters

<Parameters>
  <Parameter name="DYNAMIC_VARIABLE" type="object">
  The dynamic variable
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="key" type="string (<= 512 chars)">
        Dynamic variable key
      </Parameter>
      <Parameter name="value" type="number or string (<=255 chars)">
        Dynamic variable value
      </Parameter>
    </details>
  </Parameter>
</Parameters>

#### Examples

##### Sending dynamic variables for A/B testing campaigns

**First user**

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['trackDynamicVariable', { 
  key: "AB_ABT_Label_Best_Price_PC", 
  value: "With best price" 
}]);
window._uxa.push(['trackDynamicVariable', { 
  key: "AB_ABT_Product_Show_Customer_Ratings", 
  value: "Variation 1" 
}]);
```

**Second user**

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['trackDynamicVariable', { 
  key: "AB_ABT_Label_Best_Price_PC", 
  value: "Standard" 
}]);
window._uxa.push(['trackDynamicVariable', { 
  key: "AB_ABT_Product_Show_Customer_Ratings", 
  value: "Variation 2" 
}]);
```

## Page event

### `trackPageEvent`

<Since v="9.5.0" />

Track a page event.

```javascript
window._uxa.push(['trackPageEvent', eventName]);
```

#### Parameters

<Parameters>
  <Parameter name="eventName" type="string (<= 255 chars)">
    The name of the event to collect.
  </Parameter>
</Parameters>

#### Examples

##### Collect when visitors save a property add for later consultation

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['trackPageEvent', 'SubscribedToPropertyButtonClick']);
```

##### Collect user identifiers for Session Replays

<Since v="10.17.0" />

```javascript /@user-identifier@/
window._uxa = window._uxa || [];
window._uxa.push(['trackPageEvent', '@user-identifier@' + accountID]);
```

See [User Identifier](/en/web/personal-data-handling/#user-identifier).

## Sending from submit

### `submit`

<Since v="11.8.0" />

Send the submit state to the Contentsquare Tag.

```javascript
window._uxa.push(['submit', state, htmlElement]);
```

#### Parameters

<Parameters>
  <Parameter name="state" type="string">
    Submit state.

    Possible values: `attempt`, `success`, or `failure`.
  </Parameter>
  <Parameter name="htmlElement" type="string">
    A CSS selector reference to a DOM element.
  </Parameter>
</Parameters>

## Session Replay data collection

### `setCapturedElementsSelector`

<Since v="9.22.0" />

Capture elements' text data with auto-masking enabled.

```javascript
window._uxa.push(['setCapturedElementsSelector', CSS_SELECTORS]);
```

:::warning
The command must be called before the Tag is loaded.  
In case of a [`trackPageview`](#trackpageview), this command should be called beforehand.
:::

#### Parameters

<Parameters>
  <Parameter name="CSS_SELECTORS" type="string">
    Comma-separated list of CSS selectors.
  </Parameter>
</Parameters>

### `setPIISelectors`

<Since v="9.28.0" />

Mask Personal Data using specific selectors.

```javascript
const PIIobject = {
  PIISelectors: [".to-mask, #mask-me"],
  Attributes: [
    {
      selector: ".bar",
      attrName: "foo"
     }
  ]
};

window._uxa.push(['setPIISelectors', {PII Object}]);
```

:::warning
The command must be called before the Tag is loaded.  
In case of a [`trackPageview`](#trackpageview), this command should be called beforehand.
:::

#### Parameters

<Parameters>
  <Parameter name="PII Object" type="object">
    Elements and attributes to be masked in Session Replay.
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="PIISelectors" type="array (optional)">
        Comma-separated list of CSS selectors for elements to mask completely.
      </Parameter>
      <Parameter name="Attributes" type="array of objects (optional)">
        Attributes to mask
        <details class="children">
          <summary data-open="Hide children" data-close="Show children"></summary>
          <Parameter name="selector" type="string">
            CSS selector of the element
          </Parameter>
          <Parameter name="attrName" type="string">
            Attribute name to mask
          </Parameter>
        </details>
      </Parameter>
    </details>
  </Parameter>
</Parameters>

### `setEncryptionSelectors`

<Since v="11.63.0" />

Encrypt sensitive data in elements matched by CSS selectors.

```javascript
window._uxa.push(['setEncryptionSelectors', CSS_SELECTORS]);
```

:::warning
The command must be called before the Tag is loaded.  
In case of a [`trackPageview`](#trackpageview), this command should be called beforehand.
:::

#### Parameters

<Parameters>
  <Parameter name="CSS_selectors" type="string">
    Comma-separated list of CSS selectors
  </Parameter>
</Parameters>

### `trackEventTriggerRecording`

<Since v="9.5.0" />

Trigger Session Replay data collection after a specific event.

```javascript
window._uxa.push(['trackEventTriggerRecording', eventName]);
```

#### Parameters

<Parameters>
  <Parameter name="eventName" type="string (<= 255 chars)">
    The name of the event to collect that triggers Session Replay data collection.
  </Parameter>
</Parameters>

### `excludeURLforReplay`

<Since v="11.66.0" />

Specify a regular expression to exclude matching URLs from Session Replay data collection.

```javascript
window._uxa.push(['excludeURLforReplay', regex]);
```

The command must be called before the Tag is loaded.
The regex is kept until the next page load.

#### Parameters

<Parameters>
  <Parameter name="regex" type="string">
    Regular expression string to exclude matching URLs from Session Replay.
  </Parameter>
</Parameters>

#### Examples

##### Exclude selected ranges of product category pages

```javascript {3}
window._uxa = window._uxa || [];

window._uxa.push(['excludeURLforReplay', "shoetune\\.eu.*/mens-runners.*"]);
```

### `replay:resourceManager:enableForOnlineResource:nextPageviewOnly`

<Since v="13.53.0" />

Activates the collection of remote resources of the page by the Static Resource Manager for the next pageview. Should be used before a pageview containing protected resources starts.

```javascript
window._uxa.push(["replay:resourceManager:enableForOnlineResource:nextPageviewOnly"]);
```

#### Parameters

<Parameters/>

### `replay:resourceManager:getStatus`

<Since v="13.53.0" />

Returns information concerning the Static Resource Manager feature current state to help with implementation and troubleshooting.

```javascript
window._uxa.push(['replay:resourceManager:getStatus']);
```

The response schema from a command run is:

```json
{
 "isStarted": boolean,
 "onlineAssets": {
  "activated": boolean,
  "enabledOnNextPageview": boolean,
  "enabledForChilddrenOnNextStart" boolean
 } 
}
```

#### Parameters

<Parameters/>

## API errors and network requests collection

### `networkRequest:maskUrls`

<Since v="15.24.0" />

Register patterns to mask URLs collected for API errors and network details.

``` javascript
window._uxa.push(["networkRequest:maskUrls", pattern]);
```

:::warning[Compatibility with the api-errors\:maskUrl command]
If a pattern registered by the [api-errors\:maskUrl](/en/web/command-reference/#api-errorsmaskurl) command matches a URL, patterns supplied to `networkRequest:maskUrls` are not taken into account.
:::

#### Parameters

<Parameters>
  <Parameter name="pattern" type="string or array of strings">
    One or several URL masking patterns.  
    Patterns can match the full URL of the page or only a part of it.  

    URL fragments to mask are prefixed by a colon.  
    They are replaced by `CS_ANONYMIZED_{FRAGMENT}`.
  </Parameter>
</Parameters>

You can also call this command multiple times with different patterns each time to register multiple patterns. No patterns are overridden.

#### Examples

Supplying the following URL masking patterns:

```javascript wrap
window._uxa.push(["networkRequest:maskUrls", ["contracts/:contract_id/clients/:client_id", "resources/:resource_id"]]);
```

On the following URLs:

```txt
https://host.com/contracts/123456/clients/llltgm/offers
https://resources/56789/locations
```

Results in these masked URLs which are collected by Tag:

```txt "CS_ANONYMIZED_CONTRACT_ID" "CS_ANONYMIZED_CLIENT_ID" "CS_ANONYMIZED_RESOURCE_ID"
https://host.com/contracts/CS_ANONYMIZED_CONTRACT_ID/clients/CS_ANONYMIZED_CLIENT_ID/offers
https://resources/CS_ANONYMIZED_RESOURCE_ID/locations
```

### `networkRequest:maskUrls:reset`

<Since v="15.24.0" />

Clear all patterns registered using the [`networkRequest:maskUrls`](/en/web/command-reference/#networkrequestmaskurls) command.

```javascript
window._uxa.push(["networkRequest:maskUrls:reset"]);
```
#### Parameters

<Parameters/>

### `api-errors:maskUrl`

<Badge variant="neutral">Deprecated</Badge> | <Since v="10.8.0" />

Register patterns to mask URLs collected for API errors and network details.

``` javascript
window._uxa.push([ 'api-errors:maskUrl', url ])
```

#### Parameters

<Parameters>
  <Parameter name="url" type="string">
    Full URL of the page.

    URL fragments to mask are prefixed by a colon.  
    They are replaced by `CS_ANONYMIZED_{FRAGMENT}`.
  </Parameter>
</Parameters>

#### Examples

##### Mask order IDs

```javascript
var urls = [
  'https://api.net/order/:order_id/merge/:order_id',
  'https://api.net/order/:order_id/item',
  'https://www.api.nl/nl/ajax/nfs/account/cancelOrder/:order_id'
];
for (var i = 0; i < urls.length; i++) {
  window._uxa.push([ 'api-errors:maskUrl', urls[i] ]);
}
```

The URLs will be collected as:

```txt /CS_ANONYMIZED_ORDER_ID/
https://api.net/order/CS_ANONYMIZED_ORDER_ID/merge/CS_ANONYMIZED_ORDER_ID
https://api.net/order/CS_ANONYMIZED_ORDER_ID/item
https://www.api.nl/nl/ajax/nfs/account/cancelOrder/CS_ANONYMIZED_ORDER_ID
```

## Custom Errors collection

<Badge variant="accent">Experience Monitoring Web</Badge> 

### `trackError`

<Since v="11.36.0" />

Collect any text displayed on the user screen as a result of a specific action.

```javascript
window._uxa.push([
  "trackError",
  message,
  {ERROR_CATEGORIES}
])
```

#### Parameters

<Parameters>
  <Parameter name="message" type="string (<= 300 chars)">
    The text to collect.
  </Parameter>
  <Parameter name="ERROR_CATEGORIES" type="object [1...5] (optional)">
    An object containing up to 5 key/value pairs to categorize the errors. Keys and values must be up to 30 characters. When these limitations are not respected, the command is ignored.
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
        <Parameter name="[key_name]" type="string (<= 30 chars)">
          The key name
        </Parameter>
        <Parameter name="[value_name]" type="string (<= 30 chars)">
          The value name
        </Parameter>
    </details>
  </Parameter>
</Parameters>

#### Examples

##### Send a custom error for incorrect user input

```javascript
window._uxa.push([
  "trackError",
  "140000 is not a valid postal code",
  {
    "type": "formValidation",
    "severity": "minor",
    "lang": "english"
  }
])
```

## Identity

<Badge variant="accent">Product Analytics</Badge>

Identity commands allow you to attach a unique identity to the current user.

For more information, see [Track User Identity](https://developers.heap.io/docs/using-identify)

<Render file="en/web/command-avail-heap-tag-status" params={{
  availability: ["cs_sideloads_heap", "cs_crosswrites_heap"]
}}/>

### `identify`

This command associates the current user with the provided identity string.  
If this command is called while the current user
already has an identity string associated with them, the current session will be reset, the user ID will be re-generated, and a new pageview
of type renewal will be sent.

<Tabs syncKey="heap-tag-impl">
  <TabItem label="cs_sideloads_heap">
    <Since v="15.1.0"/>
    ```javascript
    window._uxa.push(["identify", <identityString>]);
    ```

    This command acts as a wrapper for the `heap.identify` command. 
    See https://developers.heap.io/reference/identify

    #### Parameters

    <Parameters>
      <Parameter name="identityString" type="string | number">
          The identity string that will be associated with the current user.
      </Parameter>
    </Parameters>
  </TabItem>
  <TabItem label="cs_crosswrites_heap">
    <Since v="15.69.0"/>
    
    ```javascript
    window._uxa.push(["identify", <identityString>, <options>]);
    ```
    
    #### Parameters

    <Parameters>
      <Parameter name="identityString" type="string | number">
        The identity string that will be associated with the current user.
      </Parameter>
      <Parameter name="options" type="{ hash: boolean }">
        With `{ hash: true }`, the identity string will be hashed before being sent to the server.
      </Parameter>
    </Parameters>
  </TabItem>
</Tabs>

### `resetIdentity`

When called while the current user has an identity string associated with them, the current session will be reset, the user ID will be re-generated, and a new pageview of type renewal will be sent. If the user is not identified, this command has no effect.

<Tabs syncKey="heap-tag-impl">
  <TabItem label="cs_sideloads_heap">
    <Since v="15.1.0"/>
    ```javascript
    window._uxa.push(["resetIdentity"]);
    ```
    #### Parameters

    <Parameters/>

    This command acts as a wrapper for the `heap.resetIdentity` command.  
    See https://developers.heap.io/reference/resetidentity
  </TabItem>
  <TabItem label="cs_crosswrites_heap">
    <Since v="15.69.0"/>
    
    ```javascript
    window._uxa.push(["resetIdentity"]);
    ```

    #### Parameters

    <Parameters/>
  </TabItem>
</Tabs>

### `getIdentity`

This command is a helper command that determines whether the current user has an identity string associated with them.

<Tabs syncKey="heap-tag-impl">
  <TabItem label="cs_sideloads_heap">
    <Since v="15.1.0"/>
    ```javascript
    window._uxa.push(["getIdentity"]);
    ```

    #### Parameters

    <Parameters/>
    
    This command acts as a wrapper for the `heap.getIdentity` command.
    See https://developers.heap.io/docs/api-reference#getidentity
  </TabItem>
  <TabItem label="cs_crosswrites_heap">
    <Since v="15.69.0"/>
    
    ```javascript
    window._uxa.push(["getIdentity"]);
    ```

    #### Parameters

    <Parameters/>

    This command will not return the exact identity string but a hash computed from the identity string.
  </TabItem>
</Tabs>

## User properties

<Badge variant="accent">Product Analytics</Badge>

User properties command allows you to attach custom properties to the current user.

For more information, see [Track User Identity](https://developers.heap.io/docs/using-identify)

<Render file="en/web/command-avail-heap-tag-status" params={{
  availability: ["cs_sideloads_heap", "cs_crosswrites_heap"]
}}/>

### `addUserProperties`

This command associates the current user with the given custom properties, overwriting any previously set values for the same properties.

<Tabs syncKey="heap-tag-impl">
  <TabItem label="cs_sideloads_heap">
    <Since v="15.31.0"/>
    ```javascript
    window._uxa.push(["addUserProperties", properties]);
    ```

    #### Parameters

    <Parameters>
        <Parameter name="properties" type="Record<String, String | number | boolean>">
            The custom properties to attach to the current user.
        </Parameter>
    </Parameters>

    This command acts as a wrapper for the `heap.addUserProperties` command.  
    See https://developers.heap.io/reference/adduserproperties
  </TabItem>
  <TabItem label="cs_crosswrites_heap">
    <Since v="15.69.0"/>
    
    ```javascript
    window._uxa.push(["addUserProperties", properties]);

    ```

    #### Parameters

    <Parameters>
        <Parameter name="properties" type="Record<String, String | number | boolean>">
            The custom properties to attach to the current user.
        </Parameter>
    </Parameters>
  </TabItem>
</Tabs>

## Event properties

<Badge variant='accent'>Product Analytics</Badge>

<Render file="en/web/command-avail-heap-tag-status" params={{
  availability: "cs_sideloads_heap"
}}/>

### `addEventProperties`

<Since v="15.31.0" />

```javascript
window._uxa.push(["addEventProperties", properties]);
```

This command acts as a wrapper for the `heap.addEventProperties` command.  
See https://developers.heap.io/reference/addeventproperties

### `removeEventProperty`

<Since v="15.31.0" />

```javascript
window._uxa.push(["removeEventProperty", property]);
```

This command acts as a wrapper for the `heap.removeEventProperty` command.  
See https://developers.heap.io/reference/removeeventproperty

### `clearEventProperties`

<Since v="15.31.0" />

```javascript
window._uxa.push(["clearEventProperties"]);
```

This command acts as a wrapper for the `heap.clearEventProperties` command.  
See https://developers.heap.io/reference/cleareventproperties

## Integrations

### `getSessionKey`

<Since v="5.15.0" />

Retrieves a unique Contentsquare session key.

```javascript
function callback(sessionKey) {
  const [userId, sessionNumber] = sessionKey.split(".");
  // do something with the session key
}

window._uxa = window._uxa || [];
_uxa.push(["getSessionKey", callback]);
```

#### Parameters

<Parameters>
  <Parameter name="callback" type="function">
  Callback function which receives a `sessionKey` string.  
  A unique session identifier. A string that encodes `<userId>.<sessionNumber>` (example: `59e73d8b-2730u283i20-6712c43aaab3.3`) — `userId` is a unique anonymous ID generated by Contentsquare.
  </Parameter>
</Parameters>

### `afterPageView`

<Since v="7.7.0" />

Allows to execute a callback function after a natural or artificial pageview.

``` javascript
window._uxa.push(['afterPageView', callback]);
 
function callback(context) {
  const sessionKey = context.sessionKey;
  const pageNumber = context.pageNumber;
  const projectId = context.projectId;
  const pageViewType = context.pageViewType;
  const uxaDomain = context.uxaDomain;
  const isRecording = context.isRecording;
  const recordingConsentState = context.recordingConsentState;
  // ...
}
```

#### Parameters

<Parameters>
  <Parameter name="callback" type="function">
    Callback function which receives a context object.
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="context.sessionKey" type="string">
        A unique session identifier. A string that encodes `<userId>.<sessionNumber>` (example: `59e73d8b-2730u283i20-6712c43aaab3.3`) — `userId` is a unique anonymous ID generated by Contentsquare.
      </Parameter>
      <Parameter name="context.pageNumber" type="number">
        The page number
      </Parameter>
      <Parameter name="context.projectId" type="number">
        Your Contentsquare project ID.
      </Parameter>
      <Parameter name="context.pageViewType" type="string">
        Natural (n), Artificial (a), Renewal (r).
      </Parameter>
      <Parameter name="context.uxaDomain" type="string">
        The Contentsquare App domain.
      </Parameter>
      <Parameter name="context.isRecording" type="boolean">
        Whether Session Replay is on.
      </Parameter>
      <Parameter name="context.recordingConsentState" type="number">
        Indicates the visitor's choice regarding consent:

        - 1 = not required,
        - 2 = not expressed,
        - 3 = withdrawn,
        - 4 = granted
      </Parameter>
    </details>
    The callback function is executed after the natural pageview and after each `trackPageview`. You can register multiple callbacks by calling the command multiple times.
  </Parameter>
</Parameters>

#### Examples

##### Check visitor consent for Session Replay a on specific page

```javascript {5-7}
window._uxa = window._uxa || [];
_uxa.push(["afterPageView", callback]);

function callback(context) {
  if (context.recordingConsentState === 2 && context.pageNumber === 42) {
     displayConsentWidget();
  }
}
```

### `replay:link:generate`

<Since v="13.25.0" />

Generate a replay link.

```javascript
window._uxa.push(['replay:link:generate', { withTimestamp: true }, onReplayLinkGenerated]);

function onReplayLinkGenerated(context) {
  var isRecording = context.isRecording;
  var replayLink = context.replayLink;
  // ...
}
```

#### Parameters

<Parameters>
  <Parameter name="options" type="object">
    Replay link options
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="withTimestamp" type="boolean">
        Whether the replay link is generated with a timestamp
      </Parameter>
    </details>
  </Parameter>
  <Parameter name="onReplayLinkGenerated" type="function">
    Callback function which receives a context object.
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="context.isRecording" type="boolean">
        Whether the data collection for Session Replay is in progress.
      </Parameter>
      <Parameter name="context.replayLink" type="string">
        The replay link of the session, optionally with a timestamp query parameter (`withTimeStamp`).
      </Parameter>
    </details>
  </Parameter>
</Parameters>

### `onRecordingContextChange`

<Since v="13.55.0" />

:::note
The command alias `onRecordingStateChange` is still compatible.
:::

Track changes to the data collection context to avoid false positives while generating replay links.

```javascript
window._uxa.push(["onRecordingContextChange", onRecordingContextChange]);

function onRecordingContextChange(context) {
  var isRecording = context.isRecording;
  var recordingStartTimestamp = context.recordingStartTimestamp;
  var etrState = context.etrState;
  var etrStatus = context.etrStatus;
  // ...
}
```

#### Parameters

<Parameters>
  <Parameter name="onRecordingContextChange" type="function">
    Callback function which receives a context object and called each time the data collection context changes.
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="context.isRecording" type="boolean">
        Whether the data collection for Session Replay is in progress.
      </Parameter>
      <Parameter name="context.recordingStartTimeStamp" type="number">
        Timestamp indicating when data collection for Session Replay started.
      </Parameter>
      <Parameter name="context.etrState" type="string">
        `0` (ETR is disabled) or `1` (ETR is enabled).
      </Parameter>
      <Parameter name="context.etrStatus" type="string">
        `0` (ETR is disabled), `1` (ETR is pending), `2` (ETR is triggered on **page**) or `3` (ETR is triggered on **session**).
      </Parameter>
    </details>
  </Parameter>
</Parameters>

## Webview mode

### `setOption`

<Since v="4.0.1" />

Enables webview mode when the Tag is managed by a mobile app opening the WebView.

```javascript
window._uxa.push(['setOption', 'isWebView', true]);
```

---

# Compatibility

URL: https://docs.contentsquare.com/en/web/compatibility/

## Browsers
The Contentsquare Tracking Tag is designed to work on these web browsers: 

| Browser                      | Version        | Issues/Warning                                                                                                                                                                                                                                                                                                                                                                                                       |
|------------------------------|----------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Chrome                       | Latest version | -                                                                                                                                                                                                                                                                                                                                                                                                                   |
| Chrome for Android           | Latest version | -                                                                                                                                                                                                                                                                                                                                                                                                                    |
| Android Browser              | Latest version | -                                                                                                                                                                                                                                                                                                                                                                                                                     |
| Firefox                      | Latest version | -                                                                                                                                                                                                                                                                                                                                                                                                                    |
| Safari                       | Latest version | Tracking Tag uses the Beacon API to send data when the user leaves the page (pageload, close tab, close browser). This feature is only supported OSX 12.1 and later.<br/>ITP 2.1 deletes all JavaScript cookies 7 days after the last visit on a website.                                                                                                                                         |
| iOS Safari                   | Latest version | Tracking Tag uses the Beacon API to send data when the user leaves the page (pageload, close tab, close browser). This feature is only supported iOS 12.2 and later.<br/>ITP 2.1 deletes all JavaScript cookies 7 days after the last visit on a website.                                                                                                                                         |
| Microsoft Edge               | Latest version | -                                                                                                                                                                                                                                                                                                                                                                                                                      |
| Internet Explorer            | 11             | Tracking Tag uses the Beacon API to send data when the user leaves the page (pageload, close tab, close browser). This feature is not supported by this browser.<br/>Older versions of Internet Explorer are not officially supported.                                                                                                                                                               |
| Opera                        | Latest version | -                                                                                                                                                                                                                                                                                                                                                                                                                    |
| In-app browsers and WebViews | -              | The tracking is working as long as the app doesn't restrict required browser APIs, delete or prevent cookies setup and blocks local storage.<br/>    The Tracking Tag behavior has been validated (pageviews and events tracking, session data collection) on the following in-app browsers, on both iOS and Android: Facebook, Facebook Messenger, Twitter, Instagram, LinkedIn, Slack, Snapchat, Pinterest, WeChat. |

:::warning
The Tag does not work on Opera Mini (no `localStorage` support) nor Brave.
:::

## Frameworks

The Contentsquare Tracking Tag is compatible with **all JavaScript frameworks** for single-page applications, including Angular, React, Vue, Ember...

:::note
To make the reporting easier, some pages loading could require the sending of [artificial pageviews](/en/web/sending-pageviews/).
:::

## Partytown (not supported)

[Partytown](https://partytown.qwik.dev/) is a generic all-purpose proxy that helps relocate resource intensive scripts into a web worker, and off of the main thread.

The Tracking Tag is incompatible with Partytown. It relies on DOM mutations, querying, observations, and global variables — features that do not function properly when the Tag is loaded using Partytown.

## Salesforce APEX Lightning (not supported)

Due to limits on CSP management, there is a high chance of the Tracking Tag not being able to work.
Restrictions on window functions preventing to use Tag commands.

## Websites overriding native JavaScript function and browser APIs (not supported)

The Contentsquare Tracking Tag uses common web browser APIs and native JavaScript API. Overriding any of these APIs can prevent the Tag from functioning normally.

## Iframes 

Contentsquare supports iFrames, including for Zoning and Session Replay.

### Implementation

1. Add the tag to the topmost window and inside each iframe down to and including the one(s) you want to track. Use the same Tag ID.
    ![](~/assets/web/iframes.png)

1. Your Contentsquare team enables the `iFrameTracking` tag setting to support iFrame tracking. When the flag is enabled, the tag inside the iFrames is not sending any natural pageview.  

1. For Single Page Applications, trigger an [artificial pageview](/en/web/sending-pageviews/#sending-an-artificial-pageview) inside the iFrame with a condition to execute only in this context to send a pageview.

    ```javascript {1}
    if (window.self !== window.top) {
      window._uxa = window._uxa || [];
      window._uxa.push(['trackPageview', 'PATH']);
    }
    ```

### Session Replay and iframes 

In **version `12.0.0` and later**, tracking of first and third-party iFrames in Session Replay is fully supported, and activated on demand by Contentsquare.

## Custom elements and shadow DOM

The tracking Tag has two separate event trackers: **Session Replay** and **Analytics**.  
Both provide full support for [custom elements](https://developer.mozilla.org/docs/Web/API/Web_components#custom_elements) and the [shadow DOM](https://developer.mozilla.org/docs/Web/API/Web_components#shadow_dom).

## HTML Canvas and WebGL (not fully supported)

The Tag collects mouse events by attaching them to the canvas but there is no possibility to locate them within the canvas.

## Google AMP - Accelerated Mobile Pages (not supported)

Contentsquare doesn't provide tracking capabilities for AMP yet.

## Offline browsing (not supported)

The Tracking tag doesn't verify if data was received by the server before deleting it locally. All events would be deleted at request sending attempt.

## Tracking tag behavior

The tag **only reads** except for the following:

- Adding a `script` into the `head` to call the library;
- Adding a property `__contentsquare_identifier` to every element (when Session Replay is on);
- Overwriting the native function `CSSStyleSheet.prototype.insertRule` (when Session Replay is on).

---

# Content security policy

URL: https://docs.contentsquare.com/en/web/content-security-policy/

import { Badge } from '~/components';
If your website uses a Content Security Policy (CSP), ensure the sources of content required by the tracking tag are included in the list of trusted sources for script execution.

The following CSP configuration allows the tag to function for the majority of websites:

```http wrap
Content-Security-Policy: script-src 'unsafe-inline' *.contentsquare.net app.contentsquare.com; child-src blob:; worker-src blob:; img-src *.contentsquare.net; connect-src *.contentsquare.net *.contentsquare.com; frame-src csxd.{crossdomain}
```

## Directives and values

:::note[Wildcards]
The configuration uses `*.contentsquare.net` and `*.contentsquare.com` wildcards to cover multiple subdomains associated with various capabilities, such as Zoning, Session Replay, and Static Asset Management. This approach ensures forward compatibility by accommodating future additions of subdomains.
:::

### `script-src 'unsafe-inline' *.contentsquare.net app.contentsquare.com`

The tracking tag comes from the domain `t.contentsquare.net`. Optional modules are loaded from additional `contentsquare.net` subdomains. The tracking tag is usually loaded by a small inline script, so you need to allow loading scripts from `unsafe-inline`. Even if you load the tracking tag by other means, you'll need `unsafe-inline` for cross domain tracking, since our cross domain iframe uses inline scripts. 

`app.contentsquare.com` is not used by tracking tag to collect data. However, when creating a zoning from Contentsquare application, a script is injected in an iframe to assist in-page analysis and zoning creation.

### `child-src blob:` / `worker-src blob:`

We use Web Workers, built from a blob URL containing the body of a function as a string. Origins of protocol `blob`: thus need to be authorized.

### `img-src *.contentsquare.net`

We use calls to fake images to send tracked data to our servers. This is why our tracking subdomains need to be authorized sources for images.

### `connect-src *.contentsquare.net *.contentsquare.com`

We use `XMLHttpRequest` (XHR) to send tracked data to our servers. This is why our tracking subdomains need to be authorized sources for HTTP APIs.

### `frame-src csxd.{crossdomain}`

If cross domain tracking is active, the tracking tag will need to load iframes to function. The tag will load one iframe for each domain for which cross domain tracking is active so you need to add them as in: `frame-src csxd.domain1.com csxd.domain2.com`.

### `style-src: unsafe-inline`

<Badge variant="accent">Voice of Customer</Badge>

Voice of Customer widgets apply styles by injecting them inline at runtime when rendering a survey.

---

# Cookies

URL: https://docs.contentsquare.com/en/web/cookies/

import { Badge } from '~/components';
List of cookies and local storage items managed by the Contentsquare Tag.

Contentsquare is only using first-party cookies for analytics purposes.

:::note
Tools such as OneTrust may flag a cookie `_cs_nnnnnnnnnnnnn` as coming from Contentsquare, which is incorrect.
In this context, `nnnnnnnnnnnnn` refers to an unknown pattern of numbers such as in `1083746253643` or `1111111111111`.
Contentsquare is not setting any cookie with a name like `_cs_nnnnnnnnnnnnn` or `_cs_1083746253643`.
:::

| Name | Duration | Description | Applies to |
|---|---|---|---|
| [`_cs_id`](#_cs_id) | 13 months | Stores technical user data | All plans |
| [`_cs_s`](#_cs_s) | 30 minutes | Stores Session Replay data | All plans |
| [`_cs_c`](#_cs_c) | 13 months | Stores user consent on use of session data use within replays (not masked vs. full masked) | All plans |
| [`_cs_cvars`](#_cs_cvars) | Session length | Stores the URL-encoded custom variables from the session | All plans |
| [`_cs_ex`](#_cs_ex) | 30 days | When set, the user is excluded from tracking | Enterprise |
| [`_cs_optout`](#_cs_optout) | 13 months | When set, the user is opted-out from tracking | All plans |
| [`_cs_t`](#_cs_t) | Immediately removed | Checks if the browser supports cookies and sets flags | All plans |
| [`_cs_same_site`](#_cs_same_site) | Immediately removed | Check if the browser supports the `SameSite` flag | All plans |
| [`_cs_root-domain`](#_cs_root-domain) | Immediately removed | Stores the URI-encoded main domain name of the site | All plans |
| [`_cs_debug`](#_cs_debug) | Session length | Enables/disables specific behavior of the Tag for debugging purposes | All plans |
| [`_hjasCachedUserAttributes`](#_hjhascacheduserattributes) | Session length | Specifies whether the data set in `_hjUserAttributes` local storage item is up to date or not | All plans |
| [`_hjUserAttrbutesHash`](#_hjuserattributeshash) | 2 minutes, extended every 30 seconds | Specifies whether any user attribute has changed and needs to be updated | All plans |
| [`_hjUserAttributes`](#_hjuserattributes) | No explicit expiration | Local storage item containing user attributes sent through the Identify API | All plans |
| [`_hjClosedSurveyInvites`](#_hjclosedsurveyinvites) | 365 days | Ensures the same invite does not reappear if it has already been shown. Set when a user interacts with a Link Survey invitation modal. | All plans |
| [`_hjDonePolls`](#_hjdonepolls) | 365 days | Ensures the same Survey does not reappear if it has already been filled in. | All plans |
| [`_hjMinimizedPolls`](#_hjminimizedpolls) | 365 days | Ensures that the Survey stays minimized when the user navigates through your site. Set when a user minimizes an on-site Survey. | All plans |
| [`_hp2_hld`](#_hp2_hld) | Immediately removed | Used to determine which domain a cookie can be set on (since public suffix domains block setting cookies on the top level) | All plans |
| [`_hp5_event_props.ENV_ID`](#_hp5_event_propsenv_id) | 13 months minus a day | Event properties cookie | All plans |
| [`_hp5_let.ENV_ID`](#_hp5_letenv_id) | 13 months minus a day | Contains last event timestamp | All plans |
| [`_hp5_meta.ENV_ID`](#_hp5_metaenv_id) | 13 months minus a day | Contains all metadata related to user/session | All plans |
| [`_cs_mk_aa`](#_cs_mk_aa) | 30 minutes | Ensures Adobe Analytics dimensions and eVars are set only once every 30 minutes | All plans |
| [`_cs_mk_ga`](#_cs_mk_ga) | 30 minutes | Ensures Google Analytics dimensions and eVars are set only once every 30 minutes | All plans |
| [`_cs_mk_pa`](#_cs_mk_pa) | 30 minutes | Ensures Piano Analytics dimensions and eVars are set only once every 30 minutes | All plans |
| [`_cs_tld{nnnnnnnnnnnnn}`](#_cs_tldnnnnnnnnnnnnn) | Immediately removed | Cookies generated for Google Analytics and Adobe Analytics integrations which help determine the main domain on which to create integration cookies | All plans |

## Tag cookies

Cookies required by the Contentsquare tag to collect reliable data.

### `_cs_id`

<h4>Description</h4>

Stores technical user data.  
Contains the following information separated by dots:

- User ID,
- User creation timestamp (seconds),
- Number of visits,
- Last pageview timestamp (seconds),
- Last visit timestamp (seconds),
- Timestamp of the last time this visitor was drawn,
- Cookie expiration date,
- Cookie `SameSite` attribute:
  - `None`: For cross-domain projects
  - `Lax`: For projects that are not cross-domains
  - `X`: When browsers that do not support the `SameSite` cookie attribute.
- Cookie `Secure` attribute value:
  - `0`: cookie is not secure. Default for projects that are not cross-domain or if the browser doesn't support the `SameSame` cookie attribute.
  - `1`: cookie is secure, default for cross-domain projects.

<h4>Lifetime</h4>

13 months, fixed.
The cookie value is updated with every pageview.  
The cookie is recreated if the visitor can be tracked and no `_cs_id` cookie exists.  

<h4>Length</h4>

Up to 103 characters

<h4>Example</h4>

`5c8f99e9-46cc-a2cc-b049-031bfdb3d43b.1661526503.5.1661785703.1661785703.1.1695690503380`

### `_cs_s`

<h4>Description</h4>

Stores Session Replay data.  
Contains the following data separated by dots:

- The number of pages viewed for the current session
- The Session Replay data collection state:
  - For the legacy Session Replay data collection pipeline:
    - `1` when not collected,
    - `3` when collected,
    - `5` when collected after a specific trigger.
  - For the main Session Replay data collection pipeline:
    - `0` when not collected,
    - `5` when collected
- The Event Triggered Replay (ETR) state:
  - `0` when ETR sampling is not allowed
  - `1` when ETR sampling is allowed
- The cookie expiry timestamp (Epoch time)

<h4>Length</h4>

Between 16 and 20 characters.

The maximum number of characters depend on the number of pages seen during the session. On average, for less than 100 pageviews, this adds between 16 and 17 characters.

<h4>Lifetime</h4>

30 minutes, renewed with every page view.

<h4>Example</h4>

`3.0.0.1661531650281`

### `_cs_c`

<h4>Description</h4>

Stores user consent on use of session data use within replays (not masked vs. full masked):

- `1` (consent not expressed) — visitor session is fully masked.
- `2` (consent granted) — visitor session is not fully masked even if the feature is enabled.
- `3` (consent withdrawn) — visitor session is fully masked even if the feature is not enabled.
- `0` (masking not required) — visitor session is not fully masked.

:::note
The value `0` means that full masking was deactivated in your project configuration. This is applicable for projects having no sensitive data or having masked all their sensitive data.
:::

<h4>Lifetime</h4>

13 months, renewed when consent is updated.

### `_cs_cvars`

<h4>Description</h4>

Includes the URL-encoded custom variables from the session.

Used only when using custom vars in scope `visit` or without scope.

<h4>Example</h4>

This will store custom vars inside `_cs_cvars`:

```javascript
window._uxa.push(['setCustomVariable', 5, "cvar_name", "cvar_value", "visit"]);
```

```javascript
window._uxa.push(['setCustomVariable', 5, "cvar_name", "cvar_value"]);
```

This will **not** store custom vars inside `_cs_cvars`:

```javascript
window._uxa.push(['setCustomVariable', 5, "cvar_name", "cvar_value", "page"]);
```

<h4>Lifetime</h4>

While the session lasts.
Created when session-level custom variables are triggered. The value and expiration date are updated with each pageview.

<h4>Length</h4>

The minimum number of characters is 39. Length depends on how many custom variables are pushed as well as and the length of the keys and values passed.

### `_cs_ex`

<Badge variant="accent">Enterprise</Badge>

<h4>Description</h4>

Contains the timestamp of the last time this visitor was drawn.  
Used to exclude visitors from being tracked when:

- The Sample Rate defined for the project is below 100%.
- The user is not selected to be tracked (generated number for user &lt; Sample Rate).

<h4>Lifetime</h4>

30 days, renewed on Tag execution.

### `_cs_optout`

<h4>Description</h4>

When set, the user is opted-out from tracking.

The cookie is set when you implement and execute the `optout` Tag command, for users who [do not consent to data collection](/en/web/send-the-users-decisions-about-data-collection/#users-who-refuse-data-collection).

<h4>Lifetime</h4>

13 months, fixed.

### `_cs_t`

<h4>Description</h4>

Whether the browser supports cookies.  
If so, the Tag sets the `SameSite` flag to `None` and the `Secure` flag to `Yes`.  
Always `1`.

<h4>Lifetime</h4>

Immediately removed.

### `_cs_same_site`

<h4>Description</h4>

Used to check if the browser supports the `SameSite` flag.  
The value is always `Test same site`.

<h4>Lifetime</h4>

Immediately removed.

### `_cs_root-domain`

<h4>Description</h4>

Stores the URI-encoded main domain name of the site.

<h4>Lifetime</h4>

Immediately removed.

<h4>Example</h4>

`https%3A%2F%2Fusps.com` for the domain `usps.com`

### `_cs_debug`

<h4>Description</h4>

Enables/disables specific behavior of the Tag for debugging purposes.

:::danger
You can only use this cookie to inspect the uncompressed payload content, not to perform complete end-to-end data collection tests.

Requests with uncompressed payloads are filtered out by our Session Replay pipeline.  
You will **not** be able to replay **any** session collected with the `compressionDisabled` flag on.  
:::

Supported flags:

- `compressionDisabled`: disables payload compression for inspection in the browser.

<h4>Lifetime</h4>

Session duration. To be created and deleted manually.

<h4>Length</h4>

N/A

<h4>Example</h4>

N/A

## Voice of Customer cookies

### `_hjHasCachedUserAttributes`

<Badge variant="accent">Voice of Customer</Badge>

Specifies whether the data set in `_hjUserAttributes` local storage item is up to date or not.

<h4>Lifetime</h4>

Session duration.

<h4>Example</h4>

`true`

### `_hjUserAttributesHash`

<Badge variant="accent">Voice of Customer</Badge>

Specifies whether any user attribute has changed and needs to be updated.

<h4>Lifetime</h4>

2 minutes, extended every 30 seconds

<h4>Example</h4>

`5fc3d78656281a4f251d087894032eaa`

### `_hjUserAttributes`

<Badge variant="accent">Voice of Customer</Badge>

Local storage item containing user attributes sent through the Identify API.

<h4>Lifetime</h4>

No explicit expiration

<h4>Example</h4>

`eyJhdHRyaWJ1dGVzIjp7InRlc3QiOiJ0ZXN0In0sInVzZXJJZCI6bnVsbH0`

### `_hjClosedSurveyInvites`

<Badge variant="accent">Voice of Customer</Badge>

A list of Survey IDs, URL encoded.  
Ensures the same invite does not reappear if it has already been shown.  
Set when a user interacts with a Link Survey invitation modal.

<h4>Lifetime</h4>

365 days

<h4>Example</h4>

`840982%2C841051%2C733219%2C155923%2C853559%2C859932%2C866639%2C898685%2C896429%2C899130%2C921824%2C951201%2C788909`

### `_hjDonePolls`

<Badge variant="accent">Voice of Customer</Badge>

A list of Survey IDs, URL encoded.  
Ensures the same Survey does not reappear if it has already been filled in.

<h4>Lifetime</h4>

365 days

<h4>Example</h4>

`840982%2C841051%2C733219%2C155923%2C853559%2C859932%2C866639%2C898685%2C896429%2C899130%2C921824%2C951201%2C788909`

### `_hjMinimizedPolls`

<Badge variant="accent">Voice of Customer</Badge>

A list of Survey IDs, URL encoded.  
Ensures that the Survey stays minimized when the user navigates through your site.  
Set when a user minimizes an on-site Survey.

<h4>Lifetime</h4>

365 days

<h4>Example</h4>

`840982%2C841051%2C733219%2C155923%2C853559%2C859932%2C866639%2C898685%2C896429%2C899130%2C921824%2C951201%2C788909`

## Product Analytics cookies

### `_hp2_hld`

<Badge variant="accent">Product Analytics</Badge>

<h4>Description</h4>

Used to determine the highest-level domain a cookie can be set on (since public suffix domains block setting cookies on the top level).

<h4>Lifetime</h4>

Immediately removed

### `_hp5_event_props.ENV_ID`

<Badge variant="accent">Product Analytics</Badge>

<h4>Description</h4>

Event properties cookie.

<h4>Lifetime</h4>

13 months minus a day

### `_hp5_let.ENV_ID`

<Badge variant="accent">Product Analytics</Badge>

<h4>Description</h4>

Contains last event timestamp

<h4>Lifetime</h4>

13 months minus a day

<h4>Example</h4>

```txt
1736522139241
```

### `_hp5_meta.ENV_ID`

<Badge variant="accent">Product Analytics</Badge>

<h4>Description</h4>

Contains all metadata related to user/session

<h4>Lifetime</h4>

13 months minus a day

<h4>Example</h4>

```json
{
	"setPath": {},
	"userId": "6491850061908711",
	"sessionId": "6327163630185553",
	"lastEventTime": 1717426613532,
	"sessionProperties": {
		"time": 1717426613532,
		"referrer": "",
		"id": "6327163630185553",
		"search_keyword": "",
		"utm": {
			"source": "",
			"medium": "",
			"term": "",
			"content": "",
			"campaign": ""
		},
		"initial_pageview_info": {
			"time": 1717426613532,
			"id": "8208811256027992",
			"title": "Landing page",
			"url": {
				"domain": "user.host.io",
				"path": "/pa-cs/page1.html",
				"query": "",
				"hash": ""
			},
			"source_properties": {
				"screen_height": 874,
				"screen_width": 621
			},
			"properties": {}
		}
	}
}
```

## Integration cookies

Cookies used when third-party integrations are enabled.

### `_cs_mk_aa`

<h4>Description</h4>

Ensures Adobe dimensions and eVars are set only once every 30 minutes.

Stores the value of the `csMatchingKey` which is a random number plus timestamp in milliseconds.

<h4>Lifetime</h4>

30 minutes.

<h4>Example</h4>

`0.004432816788423777_1593783518901`

### `_cs_mk_ga`

<h4>Description</h4>

Ensures Google dimensions and eVars are set only once every 30 minutes.

Stores the value of the `csMatchingKey` which is a random number plus timestamp in milliseconds.

<h4>Lifetime</h4>

30 minutes.

<h4>Example</h4>

`0.004432816788423777_1593783518901`

### `_cs_mk_pa`

<h4>Description</h4>

Ensures Piano dimensions and eVars are set only once every 30 minutes.

Stores the value of the `csMatchingKey` which is a random number plus timestamp in milliseconds.

<h4>Lifetime</h4>

30 minutes.

<h4>Example</h4>

`0.004432816788423777_1593783518901`

### `_cs_tld{nnnnnnnnnnnnn}`

<h4>Description</h4>

Cookies generated for Google Analytics and Adobe Analytics integrations which help determine the main domain on which to create integration cookies.

`{nnnnnnnnnnnnn}` is the timestamp.

<h4>Lifetime</h4>

Immediately removed.

<h4>Example</h4>

`_cs_tld1670937307564`

---

# Core concepts

URL: https://docs.contentsquare.com/en/web/core-concepts/

The Contentsquare solution provides all indicators necessary to precisely analyze web user experience. It requires the setting up of the Contentsquare Tracking Tag to collect data.
This document will give you all required notions to understand the collection tool. You will also find all information on the way the library works, and indications on every available command to pass information on correctly.

## Account and project identifier

Your subscription to a Contentsquare contract gives you access to a **tag ID** composed of 13 characters. Each ID is a tag instance for which are notably setup:

- The authorized domains (and subdomains if authorized),
- IP addresses to exclude from the collection,
- The visitors' inclusion percentage for every collected data.

A project ID corresponds to only one instance on this configuration.  
Consequently, if you want different inclusion percentages following sections of the site, you will need several tag IDs, meaning that data will be aggregated in several accounts separated on the Contentsquare interface.

### Several domains

It is possible to associate several domains on the same account.

**By default, a browsing session on a domain doesn't continue on another domain.** For example, a web user going from `domain.com` to `otherdomain.com` will be identified as a "site exit" on `domain.com` and identified as a "new visitor" on `otherdomain.com`.

This is because Contentsquare doesn't use third-party cookies.

#### Activating Cross-domain analysis

:::warning
Cross-domain tracking does not work on Safari and Firefox.
:::

:::note
Cross-domain tracking will only work if HTTPS is enabled.
:::

It is possible to configure the tag so that a session started on a domain stays alive on another one.  
This is **cross-domain tracking**.

There are two possible implementations of cross-domain tracking:

- iFrames hosted on customer domains
- iFrame hosted on Contentsquare domain

#### iFrames hosted on customer domains

The Tracking Tag will retrieve Contentsquare cookies on every domain configured for the project. It uses all iFrames to read cookies from the customer domains.

**Example:** Consider a project with 2 domains `weballwin.com` and `weballwin.net`.

When loaded on `weballwin.com`, the Tag opens an iFrame on `csxd.weballwin.net`. This specific `csxd.`sub-domain redirects the browser to an HTML page served by Contentsquare which allows to read Contentsquare’s cookie on `weballwin.net`.  
The Tag uses the most up-to-date cookies, from `weballwin.com` or `weballwin.net`, and which contain session data.

**Setup**: Every domain's `csxd.*` subdomain must be redirected to Contentsquare servers with a DNS entry, and associated with an SSL certificate. If using foreign SSL certificates isn’t allowed by your IT Policy, a self-hosted alternative can be set up.

:::warning[Restrictions for iFrames hosted on customer domains]
  This feature can link **up to 5 domains** to ensure good performance.

  It does **not** work on Safari or Firefox.
:::

#### iFrame hosted on Contentsquare domain

The Tracking Tag will read and write a copy of its cookies on a Contentsquare domain using a single iFrame.

**Example:** Consider a project with 2 domains `weballwin.com` and `weballwin.net`.

When loaded on `weballwin.com`, the Tag opens an iFrame on `contentsquare.net` to read cookies present for this project; if cookies are present, the Tag uses the most up-to-date cookies, from `weballwin.com` or `weballwin.net`, and which contain session data. The Tag then writes new, up-to-date cookies on `contentsquare.net`.

This approach does not require any setup from your part.

:::warning[Restriction for the iFrame hosted on Contentsquare domain]
  It does **not** work on Safari or Firefox.
:::

### One domain, several accounts

If you are using different Contentsquare accounts for the same main domain, you may encounter this behavior:

- A visitor enters a part of the domain tracked by an account.
- The same visitor navigates to a part of the domain tracked by another account.
 
As Contentsquare doesn't use third-party cookies, going back and forth between accounts may alter data accuracy. Some transactions may be collected on the wrong account for instance.

### Multinational domains

If your site hosts multiple versions of the same content under a single domain, you can either choose to assign a separate tag to each different country or to bundle them all together under one single tag.

#### One tag, One country

This approach will allow you to split the analysis by country, making the Contentsquare account configuration quicker.

We advise to follow this path if there are separate teams working on separate countries/sections that don't need to compare cross-country data. 

#### One tag, Multiple countries

This approach will allow you to tag the whole site with just one **tag id**, making the Contentsquare implementation quicker.

However, when configuring the Contentsquare account you will need to separate the different sites and create ad-hoc segments in order to analyze each different site/country.

## Pageviews

A **pageview** is a pagevisit by a web user (sometimes called "hit" or "pagehit" ). It includes, among other things, the current URL of the page, the screen size, the window size and the size of the document. It is sent automatically.

[Detailed information here...](/en/web/sending-pageviews/)

When a web user is included in the analysis, **pageviews** are sent:

- When the main tag is called, meaning every time a page fully loads ("full reload") but not during Ajax loading,
- The `trackPageview` command is called,
- From every frame loading the tag if the `iFrameTracking` tag has been activated by Contentsquare and the `trackPageview` command is called within the iFrame.

[Learn more about the population included in the analysis...](/en/web/who-is-included-in-the-analysis/)  
[Learn more about sending pageviews...](/en/web/sending-pageviews/)

## Transaction

To link a web user's visit with their potential purchases, meaning the corresponding revenue, it is necessary to send the transaction via a dedicated command which includes, among other things, the reference of the purchase, its amount, which articles were bought, etc.

[Learn more about transaction sending...](/en/web/sending-ecommerce-commands/)

## Events

When the main tag is loaded, our solution will collect and transmit **most interactions** happening on the page: mouseovers and clicks will thus be processed to give you UX indicators on the elements composing the page.  
Only the population included in the analysis is studied. Note that the tag itself does not collect nominative information on visitors.

[Learn more about the included population in the analysis...](/en/web/who-is-included-in-the-analysis/)  
[Learn more about collected data...](/en/web/collected-data/)

## Custom data

### Custom vars

In addition to information automatically integrated in pageviews, it is possible to add data which will ease websites mapping and segmentation. To do so, you can add up to **20 personalized variables** ("custom vars") which will be sent along with pageviews.

[Learn more about sending custom vars...](/en/web/sending-custom-vars/)

### Dynamic Vars

Dynamic vars are additional information on the session that can be used to segment users like A/B Test variations displayed to the current user. It can be fired at any point in time up to 40 per pageview.

[Learn more about sending dynamic vars...](/en/web/sending-dynamic-vars/)

### Page events

A page event or a custom page event is a value (an element or an event) triggered during a session on a specific page. Each page event is unique. They are created to answer a client request, thus they are very varied.

[Learn more about sending custom page events...](/en/web/custom-page-events/)

### Page events vs Custom Vars vs Dynamic Vars

|Custom Vars|Dynamic Vars|Page events|
|---|---|---|
|Fired at pageview|Fired at any point in time|Fired at any point in time|
|Up to 20 Custom Vars per pageview|Up to 40 Dynamic Vars per pageview|Up to 40 page events per pageview|
|Keys of 512 chars. max and values of 255 chars. max|Key of 50 chars. max and values of 255 chars. max|String, values of 255 chars. max|

#### Examples of use cases

- **Custom Vars** are used for page template/category.
- **Dynamic Vars** are commonly used for A/B testing.
- **Page events** are used to trigger ETR (example: VoC form submission) and Custom Visitor Identification (example: Customer ID or Order number)

---

# Custom Page Events

URL: https://docs.contentsquare.com/en/web/custom-page-events/

## General principles
### Use

Custom page events are additional information on the session that can be used to segment sessions. Similar to dynamic vars, custom page events can be sent at any time during a session.
Custom pages events are used when we want to segment based on a specific visitor (`action` or `onload`) event.

They are as flexible as anything you can do with JavaScript on a web page.  
For instance, VoC events triggered (3 stars only, smiley face emoji…), specific messages and validation errors and even things like if page took more than x seconds to load, visitor’s status, such as **"is the user logged in?"**,option selected in drop-down menu. And many more..., up to your imagination.

Furthermore, it can also be used as a trigger for Event Triggered Replay (ETR) where the full user session or specific pageview is collected.

### Limits

- It is possible to save up to 40 page events per pageview. If more are received, only the first 40 will be kept.
- The maximum size is 255 characters.

## Google Tag Manager (Template)

1. Open your container and go to the **templates** section.
![](~/assets/web/gtm-template/main-1.png)

1. Select **Search Gallery**.
![](~/assets/web/gtm-template/main-2.png)

1. Type in **`contentsquare`** and select the **Contentsquare - Page Events** option.
![](~/assets/web/gtm-template/add-page-events-select.png)

1. Click **Add to workspace**.
![](~/assets/web/gtm-template/add-page-events.png)

1. Confirm your choice by selecting **Add**
![](~/assets/web/gtm-template/add-page-events-confirm.png)

1. Go to the Tags section and click the **New** button to create a new tag.
![](~/assets/web/gtm-template/add-tag.png)

1. Configure it by selecting the top-right button.
![](~/assets/web/gtm-template/tag-config.png)

1. Search for **`contentsquare`** and select the **Contentsquare - Page Events** template that you've previously added to your container.
![](~/assets/web/gtm-template/new-page-events.png)

1. Give a title to the tag and input your Tag ID in the dedicated field.  

1. Enter the event name.

1. (Optional) If needed, add additional page events.

    ![](~/assets/web/gtm-template/page-events.png)

1. Select the trigger.

1. Save your changes and go back to your container. You should now see both the template and the newly created tag.
![](~/assets/web/gtm-template/main-7.png)

## Adobe Launch

:::note[Prerequisite]
    You have installed the [Contentsquare extension](/en/web/#installing-the-contentsquare-extension).
:::

1. Within Tag properties, select **Rules** > **Add Rule**.

1. Specify a name, events, and conditions.

1. Add an Action with the following settings:

    - Extension: `Contentsquare`,
    - Action Type: `Page Events`,
    - Name: `Contentsquare - Page Event`.

1. On the right-hand side, enter the event name. 

    ![](~/assets/web/launch/page-events.png)

1. Select **Keep Changes** > **Save**.

## Custom HTML

### Defining page Event

To define a page Event which will be automatically sent right away, use the `trackPageEvent` command:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push(['trackPageEvent', eventName]);
</script>
```

For example, here's how to collect a click event:

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['trackPageEvent', 'SubscribedToPropertyButtonClick']);
```

Or how to collect a user identifier to filter Session Replays, with the `@user-identifier@` prefix:

<Render file="en/plans/dem"/>

```html /@user-identifier@/
<script type="text/javascript">
  window._uxa = window._uxa || [];
  window._uxa.push(['trackPageEvent', '@user-identifier@USER_IDENTIFIER']);
</script>
```

[See User Identifiers](/en/web/personal-data-handling/#user-identifier-implementation)

## Verifying the sending of page events

Our [Contentsquare Tracking Setup Assistant Chrome Extension](https://chrome.google.com/webstore/detail/contentsquare-tracking-se/pfldcnnaiaiaogmpfdjjpdkpnigplfca) displays each page event sent.

### Inspecting the payload

If you can't use our Chrome extension, use the [`_cs_debug`](/en/web/cookies/#_cs_debug) cookie.

1. From the browser console, run this command to create the cookie:

    ```
    document.cookie = "_cs_debug=compressionDisabled"
    ```

    :::note
      Sessions collected with the `compressionDisabled` flag on are filtered out from the Session Replay pipeline.
    :::

1. Reload the page.
1. In the Network tab, search for `pageEvent`, select the request, and check the value of the `value` parameter.

### Checking the requests

To check the actual request that is sent for transactions, follow GET requests sent to `//c.contentsquare.net/pageEvent`, with these parameters.

| Name    | Description                                    | Type    |
|---------|------------------------------------------------|---------|
| `value` | Page Event (compressed)                        | String  |
| `pid`   | Project ID                                     | Integer |
| `r`     | A random digit to avoid request caching        | Integer |
| `uu`    | Unique user ID                                 | String  |
| `pn`    | Page number<br/>(each pageview increments of 1)| Integer |
| `sn`    | Session number                                 | Integer |
| `isETR` | Identifies the page Event has ETR or not       | Boolean |
| `v`     | Tracking tag version                           | String  |

---

# Dynamic Variables Tag

URL: https://docs.contentsquare.com/en/web/dynamic-variables-tag/

Dynamic vars are additional information on the session that can be used to segment users.
For example, they can include information on the A/B Test variations displayed to the current user.

Unlike custom vars, dynamic vars can be sent at any time during a session and do not require to send a pageview.

For more information, see [Dynamic Vars](/en/web/sending-dynamic-vars/).

## Google Tag Manager (Template)

1. Open your container and go to the **templates** section.
![](~/assets/web/gtm-template/main-1.png)

1. Select **Search Gallery**.
![](~/assets/web/gtm-template/main-2.png)

1. Type in **`contentsquare`** and select the **Contentsquare - Dynamic variables** option.
![](~/assets/web/gtm-template/dvars-3.png)

1. Click **Add to workspace**.
![](~/assets/web/gtm-template/add-dvars.png)

1. Confirm your choice by selecting **Add**
![](~/assets/web/gtm-template/add-dvars-confirm.png)

1. Go to the Tags section and click the **New** button to create a new tag.
![](~/assets/web/gtm-template/add-tag.png)

1. Configure it by selecting the top-right button.
![](~/assets/web/gtm-template/tag-config.png)

1. Search for **`contentsquare`** and select the **Contentsquare - Dynamic variables** template that you've previously added to your container.
![](~/assets/web/gtm-template/new-dvars.png)

1. Give a title to the tag and input your Tag ID in the dedicated field.  
For each dynamic variable, enter:

    - The key
    - The value
    - The type - `Number` or `String`.

    ![](~/assets/web/gtm-template/dvars.png)

1. Select the trigger: `All Pages` or `DOM Ready` (when data layer has been fully loaded).
1. Save your changes and go back to your container. You should now see both the template and the newly created tag.

    ![](~/assets/web/gtm-template/dvars-7.png)

## Adobe Launch

:::note[Prerequisite]
    You have installed the [Contentsquare extension](/en/web/#installing-the-contentsquare-extension).
:::

1. Within Tag properties, select **Rules** > **Add Rule**.

1. Specify a name, events, and conditions.

1. Add an Action with the following settings:

    - Extension: `Contentsquare`,
    - Action Type: `Dynamic Variables`,
    - Name: `Contentsquare - Dynamic Variable tracking`.

1. On the right-hand side, select `Add New Variable`.

1. For each dynamic variable, enter:

    - The key
    - The value
    - The type - `Number` or `String`.

    ![](~/assets/web/launch/dvars.png)

1. Select **Keep Changes** > **Save**.

---

# The E-commerce tag

URL: https://docs.contentsquare.com/en/web/ecommerce-tag/

The e-commerce tag is used to keep track of the e-commerce transactions happening on the site and empower analysis with revenue-related metrics.
It needs to be **fired a single time on the confirmation page**, after the transaction has been finalised, and needs the following **mandatory parameters** in order to function:
- Transaction ID, which is the unique identifier for that transaction
- Revenue, which is the total amount of the purchase

You can also include the following **optional** parameters:
- Currency, which is the currency used for the purchase and also in our platform for a potential conversion.
[Full technical documentation firing the e-commerce tag...](/en/web/sending-ecommerce-commands/) 

## Google Tag Manager (Template)

1. Open your container and go to the **templates** section
![](~/assets/web/gtm-template/main-1.png)

1. Select **Search gallery**
![](~/assets/web/gtm-template/main-2.png)

1. Type in **`contentsquare`** and select the **Contentsquare - E-commerce data** option
![](~/assets/web/gtm-template/ecom-1.png)

1. Click **Add to workspace**
![](~/assets/web/gtm-template/ecom-2.png)

1. Confirm your choice by selecting **Add**
![](~/assets/web/gtm-template/ecom-3.png)

1. Go to the Tags section and click the **New** button to create a new tag
![](~/assets/web/gtm-template/add-tag.png)

1. Configure it by selecting the top-right button
![](~/assets/web/gtm-template/tag-config.png)

1. Search for **`contentsquare`** and select the **Contentsquare - E-commerce data** template that you've previously added to your container.
![](~/assets/web/gtm-template/new-ecom.png)

1. Give a title to the tag and add your **GTM Variables** to the **Transaction IDs** and **Revenue** fields.

    Make sure to select a trigger that fires only on the confirmation page, or on all the pages that are needed to keep track of transactions, on which **your variables are going to be populated**.

    ![](~/assets/web/gtm-template/ecom-4.png)

1. If you would like to send Contentsquare the **currency** value as well, fill in the **optional parameters** section.
![](~/assets/web/gtm-template/ecom-5.png)

1. Save your changes and go back to your container.
You should now see both the template and the newly created tag.

## Google Tag Manager (Custom HTML)

1. Create a new tag and paste the following code in the **HTML field**:

    ```html
    <script type="text/javascript">
        window._uxa = window._uxa || [];
        window._uxa.push(['ec:transaction:create', {
            'id': '{{YOUR ID HERE}}',
            'revenue': '{{YOUR REVENUE HERE}}',
            'currency':'{{CURRENCY ISO CODE HERE}}'
        }]);
        window._uxa.push(['ec:transaction:send']);
    </script>
    ```

1. Inside the script, **replace all the placeholder variables** with your GTM values (using the double brace notation: `{{transaction id}}`, `{{transaction revenue}}`).

    These variables must be available in the "Variables" section of Google Tag Manager.

1. In the trigger list, select the "Confirmation page", or create one if it doesn't exist.

    - Select the "+" on the top right,
    - Select "Choose a trigger type to begin setup..."
    - Pick "Window Loaded"
    - You don't want this to be trigger on every page, so choose "Some Window Loaded Events"
    - Add a condition to match only the confirmation page — for instance,  `"Page URL" contains "checkout/confirmation"`
    - Save and name your trigger "Confirmation page"

## Tealium

The Tealium extension will **automatically fire the Contentsquare transaction code** as soon as the transaction values defined have been populated in your `utag` datalayer.

## Adobe Launch

Navigate to **Rules**, and open an existing rule or create a new one.

### Event Configuration

The E-commerce tag **needs to be fired once on the confirmation page**, after a transaction has been made and needs to be tracked.
In order to do so, **specify the path or the event** to be used as a trigger.
For example, if you want to target the confirmation page, you could use a similar condition:

![](~/assets/web/launch/10.png)

If you have chosen the event+condition route, your setup should look similar to this:

![](~/assets/web/launch/11.png)

### Action Configuration

Select the **Contentsquare** extension and then **Ecommerce Transactions** as the action type.

![](~/assets/web/launch/13.png)

You will then be prompted to fill in the required information by using either strings or Data Elements.

![](~/assets/web/launch/14.png)

Given the dynamic nature of transaction details, **it is required to have previously setup Data Elements with the requested information**.

![](~/assets/web/launch/15.png)

## Commanders Act

1. Add a new tag to your container by choosing "Contentsquare (Builder)".
![](~/assets/web/tagco/containers-zoom.png)

1. Set the right Contentsquare template selecting **Ecommerce**.
![](~/assets/web/tagco/ecommerce/tag-type.png)

1. Fill in all required fields with your Commanders Act variables.
![](~/assets/web/tagco/ecommerce/transaction-vars.png)

1. (Optional) If your transactions have different currencies, send Contentsquare the currency value.
![](~/assets/web/tagco/ecommerce/currency.png)

1. (Optional) If you are a merchandising customer, add items.

1. Select a trigger/perimeter that fires only on the confirmation page, and click **Save**.

Your Tag is ready to be deployed.

## Shopify

To track e-commerce data, track the checkout flow which retrieves all the data at the same time.  
See [Track the Checkout flow with Contentsquare](/en/web/#track-the-checkout-flow-with-contentsquare).

## Custom HTML

Supply the transaction ID, revenue, and currency ISO code as parameters to the [`ec:transaction:create`](/en/web/command-reference/#ectransactioncreate) command.

```html  {3-7}
<script type="text/javascript">
    window._uxa = window._uxa || [];
    window._uxa.push(['ec:transaction:create', {
        'id': {{TRANSACTION_ID}},
        'revenue': {{TRANSACTION_REVENUE}},
        'currency': {{CURRENCY_ISO_CODE}}
    }]);
</script>
```

Then execute the [`ec:transaction:send`](/en/web/command-reference/#ectransactionsend) command to send the transaction to Contentsquare.

```html {8}
<script type="text/javascript">
    window._uxa = window._uxa || [];
    window._uxa.push(['ec:transaction:create', {
        'id': {{TRANSACTION_ID}},
        'revenue': {{TRANSACTION_REVENUE}},
        'currency': {{CURRENCY_ISO_CODE}}
    }]);
    window._uxa.push(['ec:transaction:send']);
</script>
```

---

# Error Analysis

URL: https://docs.contentsquare.com/en/web/error-analysis/

Error Analysis enables you to quantify, prioritize and visualize errors occurring on your site. This section covers all the information you need to enable proper error collection within Contentsquare.
<Render file="en/plans/dem"/>

## JavaScript errors

When displaying JavaScript errors in the Error Analysis module, the top error might be "Script error".

Contentsquare collects errors via web browser, however the majority of browsers don’t share the details of an error coming from another domain (function name, file, and so on), unless they are allowed to. 

That’s why, for some errors, Contentsquare can only report “Script Error”, as it is a setting coming from the browser and the hosting server.

### Scripts to unmask

Start by mapping out JavaScript errors that your team struggle to reproduce and fix.

Create a spreadsheet to list your third-party party providers and keep track of which scripts have been unmasked with the [`crossorigin`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) attribute.

Bear in mind that some third-parties such as Google, Meta or Adobe can’t be unmasked.

### Unmasking script errors

1. Add `Add Access-Control-Allow-Origin` HTTP header on the script and a wildcard (`*`).

    ```http
    Access-Control-Allow-Origin: *
    ```

1. Add `crossorigin=anonymous` on the script tag:

    ```javascript 'crossorigin="anonymous"'
    <script src="http://another-domain.com/app.js" crossorigin="anonymous"></script>
    ```
    This instructs the browser to fetch the file anonymously so that no sensitive data is forwarded via cookie or HTTP authentication.

### Unmasking script errors locally

Even though Contentsquare can't access any specific details about local errors, you can try to reproduce the error to know more which errors to unmask first.

1. Open your website on a page that consistently produces errors.
1. Open the browser console to view a full unmasked log of errors on this page.
1. Enter the following code to check what the Tag has access to when this error occurs:

    ```javascript
    window.onerror=function(errorName, file, lineNo, colNo, errStack) {
      debugger;
    }

### Masking script errors permanently

1. Choose the scripts to unmask

    The more scripts you unmask, the more errors you can collect.  
    Start by prioritizing the scripts to unmask:

    - Ask among the website developers team
    - Select scripts from the Error Analysis module: some "Script Errors" point to a specific file
    - Ask third-party providers to do the same: their JavaScript libraries will be added to your watch list.

    :::note
    The process of unmasking script errors applies globally, meaning you do not need to wait for new errors to be generated. This process unmasks all JS errors.
    :::

1. Add a cross-origin HTTP header on the server for these scripts:

    ```http
    Access-Control-Allow-Origin: *
    ```
    
1. Add a `crossorigin="anonymous"` attribute on these scripts:

    ```javascript 'crossorigin="anonymous"'
    <script src="http://another-domain.com/app.js" crossorigin="anonymous"></script>
    ```

After 3 hours, the script errors should start being replaced by the actual details of the scripts in Error Analysis.

## API Errors

API error collection helps you monitor site performance and user experience over time. You have the ability to collect additional information surrounding API Errors, pertaining to your analysis needs.

### Mask API errors URLs

To ensure safe error collection, you may need to configure for Personal Data to be masked. See [Removing Personal Data in API errors](/en/web/personal-data-handling/#removing-personal-data-in-api-errors).

### Advanced troubleshooting

API Errors Advanced Troubleshooting configuration enables you to create rules to collect more information about API errors (headers, request/response body content), as well as collect API errors with a status code, not only in the 4XX-5XX range, so you can troubleshoot errors faster.

Use API Errors Advanced Troubleshooting to:

- Setup collection of API errors for network requests where the HTTP status code is below 400.
- See the following types of additional API error details in the Event Stream of Session Replay:
  - The HTTP headers of the request and the response
  - The body (the data sent by the request or received in the response)
  - The body elements (specific elements of the request/response body)
  - The query parameters of the request endpoint (of the URL of the information you request for).
- Leverage unencrypted response body elements in Errors Dashboard & Alerts and Analysis Context to monitor, identify and quantify errors based on response body content.

For more information, see [Configuring API Error Collection Rules](https://support.contentsquare.com/hc/en-gb/articles/6553281476124-How-to-configure-API-error-collection-rules)

## Custom errors

With the Custom Errors feature, collect any text displayed on the user screen as a result of a specific action such as:

- Filling a form,
- Loading a product list,
- Log in to a website,
- A request failing to get the remaining stock quantity on a product page.

Custom errors can be located inside alert banners, pop-up windows, or inline in a form.

### Sending custom errors

:::note
You can send a maximum of 20 custom errors per page.
:::

To collect custom error messages, use the `trackError` command:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push([
    "trackError",
    "<MESSAGE>",
    {key: value, key: value, ...}
  ])
</script>
```

where:

- `<MESSAGE>` is a `string` which contains the text displayed to end-users (max. 300 characters).
- (optional) - A JavaScript object with **up to 5 key/value pairs** to categorize the errors.
  Both the key and value should be `string` and can be up to 30 characters.

**Examples**

Send a custom error for a failing request, typed as an error from the system:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push([
    "trackError",
    "Could not get stock quantity",
    {"type": "systemError"}
  ])
</script>
```

Send a custom error for incorrect user input with multiple attributes (type, severity, language):

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push([
    "trackError",
    "140000 is not a valid postal code",
    {
      "type": "formValidation",
      "severity": "minor",
      "lang": "english"
    }
  ])
</script>
```

### Verifying the sending of custom errors

Use the [Contentsquare Tracking Setup Assistant Chrome Extension](https://chrome.google.com/webstore/detail/contentsquare-tracking-se/pfldcnnaiaiaogmpfdjjpdkpnigplfca) to track custom errors that are sent.

![](~/assets/web/ctsa-custom-erorrs.png)

### Errors collection in Contentsquare Console

Information retrieved from console messages can help developers understand what is happening behind the scenes, debug issues, and catch exceptions that don't usually block script execution.

## Console messages collection 

As a project administrator or Contentsquare implementation manager, configure the console messages collection:

1. Log into https://console.contentsquare.com/.
1. Within your project, navigate to `Advanced errors troubleshooting` > `Console messages`, and select `Add log levels`.
1. Select the level(s) and click `Apply`.

It takes about one hour to see the analysis for console messages in the Error Analysis module.

---

# ETR Event Tag

URL: https://docs.contentsquare.com/en/web/etr-event-tag/

:::note
**Event-triggered Replay (ETR)** is a paid option which requires specific implementation.
:::
The ETR event tag allows to trigger ETR events to save the collected session of the visitor.

For more information, see [Events Handling](/en/web/events-handling/).

## Google Tag Manager (Template)

1. Open your container and go to the **templates** section.
![](~/assets/web/gtm-template/main-1.png)

1. Select **Search Gallery**.
![](~/assets/web/gtm-template/main-2.png)

1. Type in **`contentsquare`** and select the **Contentsquare - ETR Event** option.
![](~/assets/web/gtm-template/add-etr-select.png)

1. Click **Add to workspace**.
![](~/assets/web/gtm-template/add-etr.png)

1. Confirm your choice by selecting **Add**
![](~/assets/web/gtm-template/add-etr-confirm.png)

1. Go to the Tags section and click the **New** button to create a new tag.
![](~/assets/web/gtm-template/add-tag.png)

1. Configure it by selecting the top-right button.
![](~/assets/web/gtm-template/tag-config.png)

1. Search for **`contentsquare`** and select the **Contentsquare - ETR Event** template that you've previously added to your container.
![](~/assets/web/gtm-template/new-etr.png)

1. Give a title to the tag and input your Tag ID in the dedicated field.  

1. Enter the event name.

1. Select the event type: `Page Level` or `Session Level`.

    ![](~/assets/web/gtm-template/etr.png)

1. Select the appropriate trigger to fire this tag only when you wish for the collection of Session Replay to be started.
1. Save your changes and go back to your container. You should now see both the template and the newly created tag.

![](~/assets/web/gtm-template/main-7.png)

## Adobe Launch

:::note[Prerequisite]
    You have installed the [Contentsquare extension](/en/web/#installing-the-contentsquare-extension).
:::

1. Within Tag properties, select **Rules** > **Add Rule**.

1. Specify a name, events, and conditions.

1. Add an Action with the following settings:

    - Extension: `Contentsquare`,
    - Action Type: `ETR Event`,
    - Name: `Contentsquare - ETR Event`.

1. On the right-hand side, enter the event name.

1. Select the event type: `Page Level` or `Session Level`.
![](~/assets/web/launch/etr-event.png)

1. Select **Keep Changes** > **Save**.

## Custom HTML

### Defining page Event - Event Triggered Replay

To define a page event for Event Triggered Replay feature, use the `trackEventTriggerRecording` command:

**At Session level**

```html /@ETS@/
<script type="text/javascript">
   window._uxa.push(['trackEventTriggerRecording', '@ETS@vocSubmit'])
</script>
```

**At Page level**

```html /@ETP@/
<script type="text/javascript">
   window._uxa.push(['trackEventTriggerRecording', '@ETP@formError'])
</script>
```

:::note
Under the advanced recorder all legacy events are by default considered as Event Triggered Replay on Session if no prefix is specified.

```html
<script type="text/javascript">
  window._uxa.push(['trackEventTriggerRecording', 'formError'])
</script>
```
:::

---

# Events handling

URL: https://docs.contentsquare.com/en/web/events-handling/

**Reminder:** When the main tag has loaded, our tool will collect and transmit **most interactions** happening on the page: hovers and clicks will thus be treated to give you **UX indicators** on elements composing the page.
## Events handling - General principles

### Setup

Events are automatically and systematically collected as soon as:

- The main tag has loaded,
- That the web user has been included in the analysis,
- And the content is loaded (`DOMContentLoaded` event).

### Collected events

The main Tag collects the following events:

- Clicks — `click`, `pointerdown`, `pointerup`, `tap` on all elements
- Hovers — `mouseover`, `mouseout` on `<a>`, `<button>`, `<select>`, `<input>`, `<textarea>` elements
- Focus — `focus`, `blur`, `change` on `<input>`, `<textarea>`, `<select>` elements
- Resize — `window.resize`
- Mouse moves — `scroll`, `pointermove` on all elements

It associates every element to a timestamp and a page block (meaning an HTML marker).

### How is the marker identified

To target a block in the DOM, our tool reads through all parents chain of the element until finding the first **marker with an id** (if it has not been ignored, see below). If no IDs are found in the parent chain, it goes up to the `<html>` tag. It then goes back down counting the position of the tag within identical markers each time.

![](~/assets/web/events0.png)

Elements taken into account for targeting are underlined.
 
In these two examples, the two highlighted blocks will be identified as identical, and interaction data will be assimilated.

### Ignored "id"s

#### Multiple occurrences of the same ID

The Tracking Tag applies the W3C spec: *"id must be unique per webpage DOM tree"*.
If an ID is not unique, the tag **will ignore all its occurrences**.

#### Multiple IDs for the block

Some websites use dynamic ids of which the value changes according to the pages within just one template. This stops us from combining data on those elements in the application.

Also, markers that we want to analyze separately can be placed under the same "id".

To answer those two issues, we exclude:

- Ids with 4 consecutive digits,
- Elements with a `data-cs-override-id` attribute with an empty value (see paragraph below),

![](~/assets/web/events1.png)

> Elements taken into account for targeting are underlined.
>
> On this example, the id "product2134" is ignored; its parent will be considered instead.
>
> Original target: `div#products2134>p>img` => does not allow data combination
>
> Target with dynamic id detected: `div#wrap>div>p>img`  => allows data combination

## Ignore, override or add an "id"

If you need to differentiate a block among others in the solution, you can define an ID that will be used by our tracking events mechanism.

Just use the `data-cs-override-id` attribute, with a valid ID value (authorized characters are `a` to `z`, `A` to `Z`, `0` to `9`, `-` and `_`). Make sure this value is static and doesn't change from one URL to another (no dynamic ID).

This attribute can be added to any HTML tag: `<div>`, `<p>`, `<form>`, `<a>`, and so on.

It must be added to the HTML code, either in the original code or after the "DOM Ready" (`DOMContentLoaded`) event in JavaScript.

```html /data-cs-override-id="main_cta"/
<div class="cta"></div>
<div class="main_cta" data-cs-override-id="main_cta"></div>
<div class="cta"></div>
<div class="cta"></div>
```

You can also signify that an ID must be ignored because the ID differentiates blocks when they are, however, of the same nature.

```html /data-cs-override-id/
<div class="product"></div>
<div class="product" id="<IDENTIFIER_TO_IGNORE>" data-cs-override-id></div>
<div class="product"></div>
<div class="product"></div>
```

## Get Page height and Scroll Rate on a specific HTML element

The Tracking Tag listens to scroll events on the document and get the document height to compute **Page height**, **Scroll Rate** and **Zone Exposure** metrics. These metrics will be wrong on pages for which:

- The document height equals the window height
- And the scroll is happening within a HTML element with a height bigger than the document.

In order to get accurate metrics, add the `data-cs-scroll-container` attribute to the specific HTML element handling the scroll events. It can be added to the original HTML code or after the "DOM Ready" (`DOMContentLoaded`) event in JavaScript.

When binding event handlers, the Tracking Tag will detect the presence of an element in the DOM with the attribute `data-cs-scroll-container`. If such element is found, the Tracking Tag will not listen to the scroll events and page height on document anymore, but on that specific HTML element instead. It will use its height (and its `padding-top`) to compute the page height, scroll rate and exposure metrics.

:::note
If multiple elements in the DOM with the `data-cs-scroll-container` attribute are present, the Tracking Tag will only take into account the first one.
:::

```html
<html>
  <head>...</head>
  <body>
    <div>...</div>
    <div class="main">
      <div class="scrollable" data-cs-scroll-container>...</div>
    </div>
  </body>
</html>
```

## Which HTML code is compatible?

The solution is made to work on **all "normally" developed websites**. Here are some rules; they are for the most part derived from standard development.

- Start each page with the DOCTYPE `<!DOCTYPE html>`.
- Use only one "id" per page, to designate a functional block.
- If an id or a class contains more than one word, use valid separators (`-`, `_`) or camel case: use `addToCart` or `add-to-cart` instead of `addtocart` and `addtoCart`.
- Do not use random "id" or "id" that can change according to the contents or sessions.
- Use valid "id": no space, no "quote".
- Use a consistent hierarchy of information: within the same tag, only put elements of the same nature:

    ```html ins={2, 6}
    <div class="category">
      <div class="list">
        <div class="product"></div>
        <div class="product"></div>
        <div class="product"></div>
      </div>
      <div class="paging"></div>
    </div>
    ```

- Close every opened tag; do not close the parent element's tag before closing the children.

- To facilitate the sending of "pageviews", it is advisable to change the URL with every major UI update.

## Verifying the sending of events

### Storage and performance

So as not to alter display performance, interactions are not sent bit by bit. We stock all interactions in memory on the web user's browser and then send the collected events by packets.

### Sent request

You will regularly notice GET requests to `//c.contentsquare.net/events` which will be sent to an encoded version of the latest events.

Event requests are sent when:
- The number of events in memory reaches 50
- The page is reloaded
- The user "leaves" the page by either being redirected to another page, closing/switching tab, closing browser, switching to another app, lock screen, etc. *(triggers may vary depending on browsers and device type)*

---

# Extending the session length

URL: https://docs.contentsquare.com/en/web/extending-the-session-length/

## Session lifecycle
### General rule

The session lifecycle is handled by the Tracking Tag on the browser side. The session ends 30 minutes after the last user event. 

### Session initialization

To manage the session, the Tag creates a session cookie called `_cs_s` which has its expiration date set to 30 minutes after its initialization. When the tag is executed, it checks for the `_cs_s` cookie:
- If the cookie does not exist, it will increment the session number (stored in the `_cs_id` cookie) and will create the session cookie `_cs_s`
- If the cookie already exists, it will only update the expiration date (now +30 minutes).

### Session update

When a **pageview event** is triggered, natural or artificial, the `_cs_s` cookie expiration date is updated (+30 minutes).

## Extending the session

To artificially extend the session duration, use the `extendSession` command:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push(["extendSession"])
</script>
```

When this command is called the Tag starts a process which:
- **Updates the expiration date of the session cookie** `_cs_s` to 30 minutes after the process is run
- **Sends a dynamic variable** with the key `session_expiry_update` and the process iteration number as value so that the Contentsquare data pipeline knows that the session should not be closed (example `{session_expiry_update: 2}`).

This process will run every 29 minutes:
- As long as the session length has not reached 4 hours (maximum duration of a session), counting from the beginning of the session, not the moment the command executed.
- Until a new **pageview event** is triggered (natural or artificial). The process is then stopped and the session management goes back to its normal behavior.

Thanks to this process, **the command only has to be called once per pageview.** 

## Clear previous visitors data

Use the `session:clear:visitor` command to clear all data linked to previous visitors:

- Cvars
- Consent
- Exclusion
- Visitor ID
- Page number
- Session number

The command must be pushed **before the Tag starts**:

```html {4}
<script type="text/javascript">
(function () {
  window._uxa = window._uxa || [];
  window._uxa.push(["session:clear:visitor"]);
  var mt = document.createElement("script");
  mt.type = "text/javascript";
  mt.async = true;
  mt.src = "//t.contentsquare.net/uxa/YOUR_TAG_ID.js";
  document.getElementsByTagName("head")[0].appendChild(mt);
})();
</script>
```

## Create a new visitor

Use the `session:start:newVisitor` command to trigger the creation of a new visitor.  
The `session:start:newVisitor` command:

1. Creates a new visitor by deleting and replacing the [`_cs_id`](/en/web/cookies/#_cs_id) cookie value. 
1. Creates a new session for this visitor which deletes and recreates the [`_cs_s`](/en/web/cookies/#_cs_s) cookie.
1. Deletes all information, session, and cookies linked such as custom vars, consent cookie [`_cs_c`](/en/web/cookies/#_cs_c), and so on.
1. Triggers a new pageview.

---

# Ideal technical context

URL: https://docs.contentsquare.com/en/web/ideal-technical-context/

The tracking tag is designed to work on most websites out of the box (or with a minimal configuration). Nevertheless, you might want to facilitate and speed up its installation by creating the following technical context:
- A **Tag Management System (TMS)** (Google Tag Manager, Adobe Launch,...) is loaded on every page.

- A **DataLayer** contains at least the current template, the product category and the user connection state.

- The **URL changes at every major change of the UI**: opening of key popin ("add to cart"), step changes in the checkout,...

- The **HTML Code** is **valid** (unique "id" on every page, ad-hoc "doctype") and **logical** (DOM tree making sense for the content) — [More details here.](/en/web/events-handling/#which-html-code-is-compatible)

- All the navigation is on the **same domain** (including the checkout).

- The website **doesn't use any iFrame** but it can be **loaded from within** an iFrame.

---

# Impact on performance

URL: https://docs.contentsquare.com/en/web/impact-on-performance/

import { tagSize } from '~/util/getTagSize.js';
## What is the file size of the tag?

The standard version of the Contentsquare tag is compressed to {tagSize} KB, and transferred from the Contentsquare CDN to the browser, compressed by gzip.

The size of the tag increases with the number of options that you enable, yet Contentsquare always optimizes the bundle size of your tag.

Additional, custom integrations with other third-party services can also increase the file size.

## How long is the tag cached for?

The Contentsquare tag is cached locally on a customers browser for 15 minutes, meaning that it should only be loaded once during the life of a typical browsing session. However, if it passes the 15 minute mark in a session, the only time the tag will be downloaded again is if a new version of the tag is deployed to the CDN.

## How will it impact page performance?

The Contentsquare tag should be executed just after the Document Object Model (DOM) has finished its "load" event. Our recommended approach is to put the tag in the `<head>` element of your HTML page, with a `defer` attribute; this will make the browser download the tag asynchronously while it continues to parse the HTML, and once the DOM is ready, it will execute the tag.

This also means the Contentsquare tag should never impact any "paint" metrics, such as Time to First Byte (TTFB), First Contentful Paint (FCP) or Largest Contentful Paint (LCP).

The only metrics that the Contentsquare tag should have any impact on would be Total Blocking Time (TBT), Time to Interactive (TTI) and Interaction to Next Paint (INP). How much impact the tag has, depends entirely on how large the DOM is, and how often the DOM is "mutated" when the page is interacted with.

A page with a moderately sized DOM, where moving around the page doesn’t change the HTML (aka "mutate") too much, will mean the impact on Total Blocking Time should be very minimal.

Examples would be:

- Desktop device with good processing power, good broadband connection, modern browser - the tag would have an impact of between 0ms and 50ms.
- Mobile device with average processing power, 4G connection, modern browser - the tag would have an impact of between 25ms and 100ms.

If the Total Blocking Time impact from synthetic testing is showing higher than these examples, then it may be due to:

- The Document Object Model (DOM) being large, over 2000 nodes
- Mutation of the DOM being excessive, creating lots of network requests and thereby increasing load on the CPU
- Device being tested on is very old and has minimal processing power
- The synthetic test is on an old simulated mobile device (such as `Moto G4`), and is exaggerating the impact of JavaScript converting "short tasks" into "long tasks" that wouldn’t correlate to a real-world scenario.

## What does this mean for Core Web Vitals?

The only Core Web Vital that would be affected by the Contentsquare tag is First Input Delay. This is a real user metric that relates to the synthetic metric Total Blocking Time.

You can track Core Web Vital scores via Google’s public BigQuery database, and viewed from a Google Data Studio dashboard.

Follow the instructions on this link to set it up for your website: https://g.co/chromeuxdash

## Which performance metrics can the tag impact?

The Contentsquare tag will only impact metrics after it has loaded, parsed, and executed. This means that it will not impact any paint metrics such as FCP, LCP or Speed Index. It will also not affect stability metrics such as Cumulative Layout Shift (CLS).

Here is a table that shows which metrics can be impacted by the Tag.

|Metric Name|Impacted by CS Tag?|
|-----------|-------------------|
|Time to First Byte (TTFB)|No|
|First Meaningful Paint (FMP)|No|
|Largest Contentful Paint (LCP)|No|
|Speed Index|No|
|Cumulative Layout Shift (CLS)|No|
|Time to Interactive (TTI)|Yes|
|Total Blocking Time (TBT)|Yes|
|Interaction to Next Paint (INP)|Yes|

## How many requests will the tag make?

The number of requests the Contentsquare tag will make depends on how many features are activated. If Session Replay is live, then there will be several requests made as the customer navigates around the website. These are batched up and sent as small HTTP POST or GET requests.

If the Document Object Model (DOM) is being changed in any way while the user browses around the page then this can trigger more requests.

Additionally, if the tag is also enabled for capturing errors, then this will trigger a new request per error occurrence on the page.

## How big are the requests that are posted by Contentsquare?

The requests posted to Contentsquare's API vary depending on the information sent. However, the majority are tiny, typically under 500 bytes.

---

# The Main Tracking Tag

URL: https://docs.contentsquare.com/en/web/

The Contentsquare Main Tracking Tag or **Main tag** is the core 'pixel' or 'code snippet' that needs to be implemented on your domain in order to collect analytics data. It can be implemented **through a Tag Management System (TMS) or on the site's template**. Find step-by-step guides below. 
Prior to the implementation, you need to gather the following information:

- A **Contentsquare Tag ID** will be provided after kicking off the Contentsquare partnership. This 13-character unique ID can be used only on agreed domains — no data will be sent from elsewhere.

- You can provide **up to 20 custom variables** to enrich the analysis context with details about the pages or the user. They're usually collected from your datalayer or any other JavaScript object implemented throughout the site.

## Google Tag Manager (Template)

1. Open your container and go to the **templates** section.
![](~/assets/web/gtm-template/main-1.png)

1. Select **Search gallery**.
![](~/assets/web/gtm-template/main-2.png)

1. Type in **`contentsquare`** and select the **Contentsquare - Main tag** option.
![](~/assets/web/gtm-template/main-3.png)

1. Click **Add to workspace**.
![](~/assets/web/gtm-template/main-4.png)

1. Confirm your choice by selecting **Add**
![](~/assets/web/gtm-template/main-5.png)

1. Go to the Tags section and click the **New** button to create a new tag.
![](~/assets/web/gtm-template/add-tag.png)

1. Configure it by selecting the top-right button.
![](~/assets/web/gtm-template/tag-config.png)

1. Search for **`contentsquare`** and select the **Contentsquare - Main tag** template that you've previously added to your container.
![](~/assets/web/gtm-template/new-main.png)

1. Give a title to the tag and input your Tag ID in the dedicated field.
    To configure Custom Variables, enter:

    - The index, from 1 to 20 - unique numbers only.
    - The name.
    - The value itself, which will be taken from one of your GTM Variables.
    - The scope — select `Page & Visit (2 & 3)`, or `Single Page App (nextPageOnly 4)` if your website/part of it is a Single Page Application. 
    Check with Contentsquare contact if unsure.

1. Select the trigger: `All Pages` or `DOM Ready` (when data layer has been fully loaded).
    We suggest **All Pages**, as long as your selected variables will be populated by then.

    ![](~/assets/web/gtm-template/main-6.png)

1. (Optional) Mask Personal Data within the GTM GUI.

    Select the appropriate Personal Data masking method, depending on the type of personal information you’re looking to mask:
    - **Define CSS Selectors** for text nodes.
      ![](~/assets/web/gtm-template/personal-data-text-nodes.png)
    - **CSS Selectors** and **Data Attributes** for element attributes.
      ![](~/assets/web/gtm-template/personal-data-element-attributes.png)

1. Save your changes and go back to your container.
You should now see both the template and the newly created tag.
![](~/assets/web/gtm-template/main-7.png)

## Google Tag Manager (Custom HTML)

1. Add a **new tag** on your workspace.
![](~/assets/web/gtm/gtm-main-1.png)

1. Select **"Choose a tag type to begin setup..."**.
![](~/assets/web/gtm/gtm-main-2.png)

1. In the list, pick the **"Custom HTML"** tag.
![](~/assets/web/gtm/gtm-main-3.png)

1. Depending on your data layer availability, take a look at the following code examples and populate it with the information required:

    - Implementing the tag and **pushing** data layer variables to Contentsquare:

        ```html /{{YOUR_TAG_ID}}/
        <script>
        (function () {
            window._uxa = window._uxa || [];
            try {
                window._uxa.push(['setCustomVariable', 1, 'Sample Variable', {{your-GTM-variable-here}}, 3]);
            } catch(e){}
            if (typeof CS_CONF === 'undefined') {
                window._uxa.push(['setPath', window.location.pathname+window.location.hash.replace('#','?__')]);
                var mt = document.createElement('script'); mt.type = 'text/javascript'; mt.async = true;
                mt.src = '//t.contentsquare.net/uxa/{{YOUR_TAG_ID}}.js';
                document.getElementsByTagName('head')[0].appendChild(mt);
            }
            else {
                window._uxa.push(['trackPageview', window.location.pathname+window.location.hash.replace('#','?__')]);
            }
        })();
        </script>
        ```

    - Implementing the tag **without pushing** data layer variables to Contentsquare:

        ```html /{{YOUR_TAG_ID}}/
        <script>
        (function () {
            window._uxa = window._uxa || [];
            if (typeof CS_CONF === 'undefined') {
                window._uxa.push(['setPath', window.location.pathname+window.location.hash.replace('#','?__')]);
                var mt = document.createElement('script'); mt.type = 'text/javascript'; mt.async = true;
                mt.src = '//t.contentsquare.net/uxa/{{YOUR_TAG_ID}}.js';
                document.getElementsByTagName('head')[0].appendChild(mt);
            }
            else {
                window._uxa.push(['trackPageview', window.location.pathname+window.location.hash.replace('#','?__')]);
            }
        })();
        </script>
        ```

    ![](~/assets/web/gtm/gtm-main-4.png)

1. Select **"Choose a trigger to make this tag fire..."**.
![](~/assets/web/gtm/gtm-main-5.png)

1. In the list, pick the "All pages" trigger, **provided the Datalayer will have been loaded** before firing our tag.
![](~/assets/web/gtm/gtm-main-6.png)

1. Name your tag (for instance *Contentsquare Main Tag*), then click **"Save"**.
![](~/assets/web/gtm/gtm-main-7.png)

## Tealium

1. Add a **new tag** to your containers by choosing "Content Square UX Analytics "
![](~/assets/web/tealium/step1.png)

1. Add your **"TAG ID"** and click "next" twice, keeping the default configuration.
If you do not have custom variables, click **"Finish"** and the installation is over.
![](~/assets/web/tealium/step2.png)

1. (Optional) Add custom variables: 

    - Choose a datalayer Variable in the UDO list and select **Select Destination**
    - Select "Custom"
    - Add a variable Name 
    - Click **Add** 
    - Click **Close** and the mapped variable will appear

    ![](~/assets/web/tealium/step3.png)

1. Click **"Finish"** or **repeat STEP 3 for additional variables**.

    ![](~/assets/web/tealium/step4.png)

## Adobe Launch

### Installing the Contentsquare extension

1. Search for Contentsquare within **Extensions** and select **Install**.
    ![](~/assets/web/launch/1.png)

1. Enter your **Tag ID** (should be provided by your Contentsquare Implementation team).

    ![](~/assets/web/launch/2.png)

    To pass information to Contentsquare via custom variables, select **Add a custom variable** and fill the following fields:

    - The index, from 1 to 20 - unique numbers only.
    - The name.
    - The value itself, which will be taken from one of your GTM Variables.
    - The scope — select `Page & Visit (2 & 3)`, or `Single Page App (nextPageOnly 4)` if your website/part of it is a Single Page Application. 
    Check with Contentsquare contact if unsure.

    Use **Data Elements** in the value fields, as they are the Launch built-in method of passing information between extensions.

    ![](~/assets/web/launch/3.png)

1. (Optional) Select **Add P<b>II</b> Masking**.

    ![](~/assets/web/launch/pii-masking-1.png)

1. Upon activating Personal Data Masking, select the appropriate masking method, depending on the type of personal information you’re looking to mask:

    - Masking textual Personal Data using CSS selectors:
      ![](~/assets/web/launch/pii-masking-5.png)
      Make sure that your CSS selectors are valid.
      ![](~/assets/web/launch/pii-masking-6.png)

    - If non-textual personal information needs to be masked, use the below text box and template:

      ![](~/assets/web/launch/pii-masking-4.png)

1. Save your changes to your working library and move to the next step.

### Firing the Main Tag

Navigate to **Rules**, and open an existing rule or create a new one.

### Event Configuration

Depending on your needs, [select the event](/en/web/custom-page-events/#adobe-launch) to be used from the **Core** extension.

### Default implementation

Take a look at some of the viable examples below:

#### Page Bottom

![](~/assets/web/launch/5.png)

#### DOM ready

![](~/assets/web/launch/5-1.png)

### Action Configuration

Select the **Main Tracking Tag Installation action** from the Contentsquare extension

![](~/assets/web/launch/7.png)

If you don't need to further amend the path or the queries sent, **you can leave the action as it** is and press 'Keep Changes'

![](~/assets/web/launch/8.png)

Should you need to override the path or the query, you can do so by selecting the element and writing the string to be used as a substitute.
You can also create Data Elements and use them in these fields

![](~/assets/web/launch/8-1.png)

Once you're done, your new rule should look similar to the following

![](~/assets/web/launch/9.png)

You can now press save and move on to the next rule.

## Commanders Act

1. Add a **new tag** to your containers by choosing "Contentsquare - Tag Main (builder)".
![](~/assets/web/tagco/containers-zoom.png)

1. Add your previously provided Tag ID. 
![](~/assets/web/tagco/main/project-id.png)

1. Add the desired Custom Variables: 
    - At "Add customs variables" select "yes"
    - Fill all request variables by adding a name and pick the matching variable from the datalayer.
    ![](~/assets/web/tagco/main/cvars.png)

The Contentsquare Main Tag is ready to be deployed.

## Shopify

:::note
To configure Contentsquare tags in your Shopify account, you need to be an admin on the account.
:::

### Base configuration

1. Within the main menu, select **Online Store > Themes**, then click the **Actions** drop-down menu, and **Edit Code**.

    ![](~/assets/web/shopify-interface-edit-code.png)

1. Under `Layout`, select the **theme.liquid** file.

1. Within the code editor, scroll down to the closing `</head>` tag.

1. Copy the code below and replace `YOUR_TAG_ID` with your Contentsquare Tag ID:

    ```html
    <!-- Contentsquare Tags Start -->
    <script type="text/javascript">
    // Contentsquare Main Tracking Tag
    (function() {
        window._uxa = window._uxa || [];
        if (typeof CS_CONF === 'undefined') {
            window._uxa.push(['setPath', window.location.pathname + window.location.hash.replace('#', '?__')]);
            var mt = document.createElement("script");
            mt.type = "text/javascript";
            mt.async = true;
            mt.src = "//t.contentsquare.net/uxa/YOUR_TAG_ID.js";
            document.getElementsByTagName("head")[0].appendChild(mt);
        } else {
            window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);
        }
    })();
    </script>
    <!-- Contentsquare Tags End -->
    ```

1. Paste the code above the closing `</head>` tag.

    ![](~/assets/web/shopify-code-sample-main-tag.png)

1. Click `Save`.

### Track the Checkout flow with Contentsquare

:::warning[Checkout liquid deprecations]
Checkout Extensibility replaces `checkout.liquid`:

- For Checkout pages — deadline August 13, 2024,
- For Thank you and Order status pages — deadline August 28, 2025.

See how to deal with these changes below.
:::

Tracking the Checkout flow is done via a custom pixel to add to your Shopify checkout.  
This custom pixel allows for sending a pageview and a dynamic variable to Contentsquare within each step of the checkout, for mapping and segmentation purposes, and track ecommerce transactions, all in one script.

This solution works for both single page and multi-step checkout scenarios.

Events collected are:

- `checkout_started`
- `checkout_contact_info_submitted`
- `checkout_address_info_submitted`
- `checkout_shipping_info_submitted`
- `payment_info_submitted`
- `checkout_completed`
- Ecommerce data:
    - `orderID`
    - `amount`
    - `currency`

Once collected, these events are available for segmentation and filtering:

![](~/assets/web/shopify-collected-data-in-use-app.png)

:::warning[Limitations with Shopify Checkout Extensibility]

- Custom variables are not part of the current pixel code tracking — you need to customize the script to send them in the checkout,
- No replay or Zoning metrics are available in the Checkout,
- The Contentsquare custom code in the checkout flow sends a pageview based on Shopify events. By default, it is **not subjected to user cookie consent**.  
Make sure to add your own cookie policy logic to the code provided below.
:::

#### Adding the custom pixel to your checkout

1. Select `Settings` in the Shopify admin section.
1. Select `Customer events` then `Add custom pixel`.
1. Enter a name for the pixel such as `Contentsquare Checkout`.
1. Copy and paste the code below and replace `{{YOUR_TAG_ID}}` with your Contentsquare Tag ID:

    ```javascript /{{YOUR_TAG_ID}}/ collapse={15-9999}
    /*
    *Name: Shopify CS Integration
    *Version: 2.2.1
    */

    const csTagID = "{{YOUR_TAG_ID}}";
    const csTypeVendorPrefix = "CMS_SH_";
    let submittedEvents = [];

    function sendToCS(csKey, csValue, csPV, eventContext) {
        csKey = csTypeVendorPrefix + csKey;

        setTimeout(function () {
            let setQuery;

            if (csPV && eventContext) {
                const hash = eventContext.window.location.hash;
                const query = eventContext.window.location.search;
                setQuery = "?" + csPV;

                if (hash) {
                    setQuery = hash.replace("#", "?__") + csPV;
                } else {
                    if (query) {
                        setQuery = "?__" + csPV;
                    }
                }

                _uxa.push(["trackPageview", eventContext.window.location.pathname + setQuery]);
            }

            _uxa.push([
                "trackDynamicVariable",
                {
                    key: csKey,
                    value: csValue,
                },
            ]);
        }, 500);
    }

    function sendEcomCS(orderID, amount, currency) {
        _uxa.push([
            "ec:transaction:create",
            {
                id: orderID,
                revenue: amount,
                currency: currency,
            },
        ]);

        _uxa.push(["ec:transaction:send"]);
    }

    analytics.subscribe("page_viewed", (event) => {
        if (event.context.window.location.pathname.indexOf("/checkouts") > -1 && event.context.window.location.pathname.indexOf("/processing") === -1) {
            if (typeof CS_CONF === "undefined") {
                window._uxa = window._uxa || [];
                _uxa.push(["setPath", event.context.window.location.pathname + event.context.window.location.hash.replace("#", "?__")]);
                const mt = document.createElement("script");
                mt.type = "text/javascript";
                mt.async = true;
                mt.src = "//t.contentsquare.net/uxa/" + csTagID + ".js";
                document.getElementsByTagName("head")[0].appendChild(mt);
            } else {
                _uxa.push(["trackPageview", event.context.window.location.pathname + event.context.window.location.hash.replace("#", "?__")]);
            }
        }
    });

    analytics.subscribe("checkout_started", (event) => {
        if (!submittedEvents.includes(event.name)) {
            submittedEvents.push(event.name);

            sendToCS("Checkout Started", "true", event.name, event.context);
        }
    });

    analytics.subscribe("checkout_contact_info_submitted", (event) => {
        if (!submittedEvents.includes(event.name)) {
            submittedEvents.push(event.name);

            sendToCS("Checkout Contact Info Submitted", "true", event.name, event.context);
        }
    });

    analytics.subscribe("checkout_address_info_submitted", (event) => {
        if (!submittedEvents.includes(event.name)) {
            submittedEvents.push(event.name);

            sendToCS("Checkout Address Info Submitted", "true", event.name, event.context);
        }
    });

    analytics.subscribe("payment_info_submitted", (event) => {
        if (!submittedEvents.includes(event.name)) {
            submittedEvents.push(event.name);
            sendToCS("Payment Info Submitted", "true", event.name, event.context);
        }
    });

    analytics.subscribe("checkout_shipping_info_submitted", (event) => {
        if (!submittedEvents.includes(event.name)) {
            submittedEvents.push(event.name);
            sendToCS("Checkout Shipping Info Submitted", "true", event.name, event.context);
        }
    });

    analytics.subscribe("checkout_completed", (event) => {
        if (!submittedEvents.includes(event.name)) {
            submittedEvents.push(event.name);
            sendToCS("Checkout Completed", "true", event.name, event.context);

            const data = event.data || "";
            const checkout = data.checkout || "";
            const order = checkout.order || "";
            const orderID = order.id;
            const totalPrice = checkout.totalPrice || "";
            const amount = totalPrice.amount;
            const currency = totalPrice.currencyCode;

            if (typeof orderID != "undefined" && typeof amount != "undefined" && typeof currency != "undefined") {
                sendEcomCS(orderID, amount, currency);
            }
        }
    });
    ```

1. Select **Save** then **Connect**.

    :::note
    If you are injecting the CS tags in the checkout via any other means (Tag Management System, or the soon to be deprecated "additional scripts" section in the Shopify checkout setting), make sure you block the firing of the CS Main Tag and E-Commerce tag from these other means.  

    For instance, if you have a CS E-Commerce tag in GTM, pause this tag in GTM as this new pixel you have just implemented tracks the entire checkout and the e-commerce transactions.

1. Test that pageviews are sent in the checkout. Make a transaction to test the ecommerce transaction is also sent as expected.

### Sending custom variables

To send custom variables to Contentsquare, define them before the Contentsquare main tag.

Modify the keys and values to your needs: you can get values from your Liquid Objects or Liquid Tags.

```html
<script type="text/javascript">
    // Contentsquare Send Custom Variables
    window._uxa = window._uxa || [];
    window._uxa.push(['setCustomVariable', 1, "Insert Custom Key 1", "Insert Custom Vale : " + {{ custom_tag.value1 }}]);
    window._uxa.push(['setCustomVariable', 2, "Insert Custom Key 2", "Insert Custom Vale : " + {{ custom_tag.value2 }}]);
    window._uxa.push(['setCustomVariable', 3, "Insert Custom Key 1", "Insert Custom Vale : " + {{ custom_tag.value3 }}]);

    // Contentsquare Main Tracking Tag
    (function () {
        window._uxa = window._uxa || [];
        if (typeof CS_CONF === 'undefined') {
            window._uxa.push(['setPath', window.location.pathname+window.location.hash.replace('#','?__')]);
            var mt = document.createElement('script'); mt.type = 'text/javascript'; mt.async = true;
            mt.src = '//t.contentsquare.net/uxa/769238b6e1309.js';
            document.getElementsByTagName('head')[0].appendChild(mt);
        }
        else {
            window._uxa.push(['trackPageview', window.location.pathname+window.location.hash.replace('#','?__')]);
        }
})();
</script>
```

For more information, see the [setCustomVariable command](sending-custom-vars/).

### Sending dynamic variables

You can send dynamic variables at any point in the pageview, they do not need to be set before the Contentsquare tag is loaded.

Modify the keys and values to your needs: you can get values from your Liquid Objects or Liquid Tags.

```html
<script type="text/javascript">
    // Contentsquare Send Artificial Pageviews
    document.getElementById("AddToCart").addEventListener('click', function() {
        window._uxa = window._uxa || [];
        window._uxa.push(["setPath", "Added_to_cart_" + {{ custom_tag.value }}]);
        window._uxa.push(["trackPageview"]);

        window._uxa = window._uxa || [];
        window._uxa.push(["trackDynamicVariable", {key: "Added to cart", value: {{ custom_tag.value }}}]);
    });
</script>
```

For more information, see the [trackDynamicVariable command](sending-dynamic-vars/).

## Custom HTML

To set up the Tag on your website, add the following lines of code on every page you want to analyze, either at the end of the `<body>` tag, or via a Tag Management System - `YOUR_TAG_ID` is the unique ID of your Contentsquare tag.

```html /YOUR_TAG_ID/
<script type="text/javascript">
(function () {
  window._uxa = window._uxa || [];
  if (typeof CS_CONF === 'undefined') {
    window._uxa.push(['setPath', window.location.pathname + window.location.hash.replace('#', '?__')]);
    var mt = document.createElement("script");
    mt.type = "text/javascript";
    mt.async = true;
    mt.src = "//t.contentsquare.net/uxa/YOUR_TAG_ID.js";
    document.getElementsByTagName("head")[0].appendChild(mt);
  } else {
    window._uxa.push(['trackPageview', window.location.pathname + window.location.hash.replace('#', '?__')]);
  }
})();
</script>
```

This code creates a function which will add an asynchronous call to a script and then execute the function. This is a way to avoid other elements loading being blocked on the page. This reduces the impact of the tag on the website's performance.

In order to collect custom variables from your datalayer, take a look at the following code example:

```html
<script>
(function () {
    window._uxa = window._uxa || [];
    try {
        if (typeof dataLayer !== 'undefined') {
            for (var i = 0; i < dataLayer.length; i++) {
               window._uxa.push(['setCustomVariable', 1, 'Sample Variable', dataLayer[i].sampleVariable, 3]);
            }
        }
    } catch(e){}
    if (typeof CS_CONF === 'undefined') {
        window._uxa.push(['setPath', window.location.pathname+window.location.hash.replace('#','?__')]);
        var mt = document.createElement('script'); mt.type = 'text/javascript'; mt.async = true;
        mt.src = '//t.contentsquare.net/uxa/{{YOUR_TAG_ID}}.js';
        document.getElementsByTagName('head')[0].appendChild(mt);
    }
    else {
        window._uxa.push(['trackPageview', window.location.pathname+window.location.hash.replace('#','?__')]);
    }
})();
</script>
```

Position the tag before the closing `</body>` marker within each page of your website.

To have the most reliable traffic count without slowing down the display of the page, load the script as soon as the page is displayed ([`DOMContentLoaded` event](https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event)). 

Waiting for the whole page to load [`load` event](https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event) may impact the integrity of paths passed on as well as the amount of visits.

Do not forget to include all subdomains as well as the potential pages called by iFrames.

## What it contains

The tag contains:

- A `CS_CONF` object gathering configuration elements of your own account, such as used domain, inclusion percentages, etc.
- The latest Tag version.

## Checking the loading of the main tag

Use the [Contentsquare Tracking Setup Assistant Chrome Extension](https://chrome.google.com/webstore/detail/contentsquare-tracking-se/pfldcnnaiaiaogmpfdjjpdkpnigplfca) to confirm the main is loaded and that a first pageview is sent.

:::warning[Tag configuration and pageviews]
  To check that the Tag configuration is appropriate, run the following script in Google Chrome's developer tools (<kbd>F12</kbd> or <kbd>⌘</kbd>+<kbd>⇧</kbd>+<kbd>C</kbd>), within the `top` JavaScript context.

  ```javascript
  if(typeof CS_CONF != 'undefined'){ if(CS_CONF['status']==1){ console.log("%c UXA: OK on "+CS_CONF.hostnames.join(',') + (CS_CONF.allowSubdomains?" and subdomains":" but not on subdomains"),"color:green"); }else{ console.log("%c UXA: No, "+CS_CONF['status'],"color:red"); }}else{ console.log('%c Not loaded',"color:red");} if(document.cookie.indexOf('_cs_ex')>=0){ console.log("%c Browser excluded by cookie.","color:red"); }
  ```

  A success message displayed in green should be returned.  
  If a red message displays, check [Who is included in the analysis?](who-is-included-in-the-analysis/).
:::

## Advanced settings

### The `_uxa` object

The tag is based on a `window._uxa` object which receives instructions from the `push()` function. It is thus possible to send instructions even before the library has finished loading by initializing the `window._uxa` variable via an array. We use the fact that arrays interpret the `push()` function natively.

This is why all instructions sent to the tag work the following way:

```javascript
window._uxa = window._uxa || [];
window._uxa.push(<INSTRUCTION>);
```

The first line creates an array (`[]`) if the `_uxa` variable does not already exist. The second line adds an instruction to it.

If the library is already loaded, the instruction will be executed immediately. If it has not loaded yet, the instruction will be executed when the library has loaded. In both cases, this guarantees that the execution order of the commands will not generate an error.

### CORS Request

You can call the main tag with CORS requests (Cross-origin resource sharing, [more on this here](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers/onerror#Notes)). You just need to add `crossorigin="anonymous"` to the `<script>` tag of the main tag.

If there is a syntax error in the tag, an exception will be generated that can be caught by your site (with `window.onerror` for instance).

- Without `crossorigin="anonymous"`, you will catch a "Script error" message with no information on the initiator.
- With `crossorigin="anonymous"`, the message will log the file generating the error. You can use it if you see errors on your website.

## Self-hosting

:::warning[Caution]
Avoid self-hosting the Tag if you can. Self-hosting the Tag makes it harder to update to newer versions with security updates, new features, and more.
:::

If you must self-host the tag, we advise you to set up automatic sync with `http://t.contentsquare.net/uxa/{YOUR_TAG_ID}.js` which always serves the latest version of the Tag.

Contentsquare does not serve specific pinned versions of the Tag to any public endpoints.

📬 Subscribe to the [Tag Changelog](/en/web/changelog/) to get notified of releases every month.

---

# IP Addresses

URL: https://docs.contentsquare.com/en/web/ip-addresses/

Contentsquare uses the visitor's IP address for the following purposes only:
- Determining the visitor's geolocation, down to the city level
- Blocklisting unwanted sessions (bots, internal employee traffic, etc.)
- Short-term logging (up to 3 days) and replay troubleshooting purposes. The IP address is subsequently purged from our systems. 

## Blocklist for analytics tools other than Contentsquare

Contentsquare staff may generate some traffic on your site during the implementation phase or to perform some tests. This traffic is negligible, but you can filter it out by blocking the following IPs in your tools:

- 195.68.53.201
- 5.50.90.43
- 176.175.236.35
- 95.178.109.249
- 212.114.25.152
- 62.23.207.242
- 82.163.197.242
- 65.209.26.84
- 50.228.63.242
- 160.72.153.180
- 212.235.51.193
- 84.110.158.42
- 83.135.182.254
- 79.148.101.36
- 80.32.138.162
- 2.139.157.177
- 62.57.159.45
- 80.28.196.106
- 82.163.210.26
- 213.208.255.250
- 202.128.197.138
- 27.110.28.51

---

# Personal data handling

URL: https://docs.contentsquare.com/en/web/personal-data-handling/

Our tag replaces the following information before it's collected:
- JWT tokens in URLs, replaced by `CS_ANONYMIZED_JWT`,
- Email addresses in URLs, custom errors, JavaScript errors, dynamic vars, custom vars, clicked elements, and Session Replay, replaced by `CS_ANONYMIZED_EMAIL`,
- Credit card numbers in clicked elements and Session Replay, replaced by `CS_ANONYMIZED_PII`.
## Personal Data handling in the HTML (in Session Replay)

Sessions will be collected for Session Replay if:

- The `Session Replay` feature has been enabled for your account
- The threshold set by the `Session Replay Collection Rate` is not exceeded.

For the HTML content to be sent, all these conditions must be true:

- The user hasn’t opted out.
- The session is being tracked.
- The browser is [compatible](/en/web/compatibility/).
- The session has been flagged as "Collected for Session Replay", using the `_cs_s` cookie - See the [full list](/en/web/cookies/)

:::warning
If Session Replay is turned off, the HTML text/content of the page **is not** collected during the session. You must ensure that your URLs do not contain Personal Data or that they are masked by [modifying the sent URL](/en/web/sending-pageviews/#modifying-the-sent-url).
:::

### Session Replay data collection options

If Session Replay is turned on and data collection is active for the session, the HTML content of the page is sent **after every pageview** (both natural and artificial) and **every DOM change** (only the updated elements are sent).

:::note
Always contact your Implementation Manager to check your approach to masking.
:::

:::warning[Automasking]
Depending on whether automasking is activated, the resulting replay will differ and additional masking tasks will have to be carried out.
:::

#### With automasking off

:::note
Contentsquare never collects the actual text typed into any `<input>` or `<textarea>` field.
:::

- The content of `<input>` elements with type `text`, `email`, `password`, `search`, `tel`, `url` or `<input>` elements without a `type` attribute are replaced with bullets before the HTML is sent,
- Every figure of `<input>` elements with type `number` are replaced by 0,
- The content `<textarea>` elements is replaced with bullets before the HTML is sent,
- The content of `<script>` elements is emptied,
- Except for the above, all the HTML content is sent, including `<head>`,
- The content of every element marked with the data attribute `data-cs-mask` is removed (see below).

:::note
Dropdowns are usually coded with the `<select>` element, which is collected by default by Contentsquare. 
If you show any Personal Data in these elements, you would have to make sure to apply the `data-cs-mask` data attribute.
:::

#### With automasking on

:::note
Contentsquare never collects the actual text typed into any `<input>` or `<textarea>` field.
:::

- The content of `<input>` elements with type `text`, `email`, `password`, `search`, `tel`, `url` or `<input>` elements without a type are replaced with bullets before the HTML is sent,
- Every figure of `<input>` elements with type `number` are replaced by 0,
- The content `<textarea>` elements is replaced with bullets before the HTML is sent,
- The content of `<script>` elements is emptied,
- The content of every element marked with the data attribute `data-cs-mask` is removed (see below).
- The content of every element marked with the data attribute `data-cs-capture` is collected and shown unless it falls under the excluded elements listed above (`<input>`, `<textarea>`)
- **Every character of the text content included in the elements sent is replaced by "A"**.
- Attributes unrelated to layout are removed. Only `id`, `class`, `style`, `src`, `srcset`, `href`, `rel`, and `type` are kept.

#### Selectively mask pages by URL

In case your site displays Personal Data only on a specific set of pages, **you can decide to run the Auto-Masking process only on a pre-defined set of pages**, so that you won't have to apply the masking across the whole site.

We currently have two available options:

- **Mask all pages except**: All pages will be masked except the ones defined by a Regex Pattern agreed with your dedicated Implementation Manager.
- **Unmask all pages except**: All pages will be collected with clear content except from the ones defined by a Regex pattern agreed with your dedicated Implementation Manager.
 
These can only be configured by your dedicated Implementation Manager.

### Block data collection for specific pages (Session Replay)

Use the `excludeURLforReplay` command to block data collection on pages based on their URL.  
You might want to use this command for the following reasons:

- Some page replays for Session Replay cause performance issues (when the page contains many images or videos, for instance) — you can block these pages until the problem is fixed,
- Personal data has been exposed,
- You want to exclude whole parts of your website from being collected for Session Replay.

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['excludeURLforReplay', "URL_REGEX"]);
```

Using this command does not block page views for the given page(s) — it only blocks data collection for Session Replay.

### Remove content/Personal Data from the collected HTML

There are two methods to remove content from the collected HTML:

1. Using the Contentsquare Personal Data Selector
1. Tagging DOM Elements 

#### Personal Data Selector

Each DOM element to be masked is identified thanks to its CSS selector and those selectors are pushed to the API via a JavaScript object. 
The content of the identified element will be thus removed from the replay.

:::note
In case of CSS selectors being changed or removed, the masking will be removed as well.
:::

The following object that contains CSS selectors for text and for attributes should be pushed to the API as follows, **before firing the main tag**:

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['setPIISelectors', {PII Object}]);
```

The structure of the `PII` Object is as follows:

- `PIISelectors`: Comma-separated list of CSS selectors which allow the **matching DOM elements to be masked by the tag.**

- `Attributes`: Using this key, one can **remove the defined attributes of the DOM elements from the elements matching the CSS selectors.**
Note that it is possible to use an array of attribute names as shown in the example above.

Keep in mind that using both `PII Selectors` and `Attributes` is optional, meaning you can use either full element selectors, specific attribute selectors or both in the same object:

```javascript
{
  PIISelectors: [".css-selector, selector"], // DOM elements to be masked
  Attributes: [
      {
          selector: "select#month option, select#year option", // CSS selector(s)
          attrName: 'id' // Attribute name you want to mask
      },
      {
          selector: ".link-page-7", // CSS selector(s)
          attrName: ['href','name'] // Array attribute names you want to mask
      }
  ]
};
```

#### Tagging DOM elements

To exclude content from being collected, use the `data-cs-mask` attribute on selected elements:

```html mark="data-cs-mask"
Content before
<p data-cs-mask>
  emailaddress@sentitivedata.com
</p>
Content after
```

Their content is removed in the browser before it is sent to Contentsquare:

```html del={3}
Content before
<p data-cs-mask>
  emailaddress@sentitivedata.com
</p>
Content after
```

You can also add the `data-cs-mask` attribute with JavaScript provided you do it before any pageview is sent.

**Events on removed HTML** — [Events](/en/web/events-handling/) (click, hover, etc.) will still be collected and sent to our servers even if they are targeting removed HTML elements. They will be visible in the application using Live Resources (as named in the platform).

:::warning
Using comments within the HTML is not supported (`...`).
:::

### Display content in a fully masked HTML page

There are two methods to display content in a masked HTML page:

1. Using the Contentsquare Personal Data Selector
1. Tagging DOM Elements 

#### Personal Data Selector

Each DOM element to be displayed is identified thanks to its CSS selector and those selectors are pushed to the API via a JavaScript object. The content of the identified element will be thus displayed in Session Replay.

:::note
In case of CSS selectors being changed or removed, the element will be masked by default.
:::

The string which contains comma-separated CSS selectors for text and for attributes must be pushed to the Contentsquare API, **before firing the main tag**, as follows:

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['setCapturedElementsSelector', "#capture-me, .show-me"]);
```

#### Tagging DOM elements

To display an HTML element in a masked page, add the `data-cs-capture` attribute to the HTML elements:

```html mark="data-cs-capture"
Sensitive Content before
<p data-cs-capture>
  some piece of text that is not sensitive
</p>
Sensitive Content after
```

Content that is part of the tagged element is captured as is:

```html mark={3}
AAAA AAAA AA
<p data-cs-capture>
  some piece of text that is not sensitive
</p>
AAA AAA AA 
```

It can also be added with JavaScript but, be careful, as attributes must be added before any pageview is sent.

### Session Replay Testing

#### Prerequisites

- Have Google Chrome installed.
- Download the [Contentsquare Tracking Setup Assistant](https://chrome.google.com/webstore/detail/contentsquare-tracking-se/pfldcnnaiaiaogmpfdjjpdkpnigplfca) Chrome Extension.
- Mask elements from the replay using [CSS selectors](/en/web/personal-data-handling/#personal-data-selector) or the [`data-cs-mask` attribute](/en/web/personal-data-handling/#tagging-dom-elements) — `<input>` elements are not captured by default, except dropdowns which still need masking.
- Activate full session masking.
- If you have already provided us with a list of your internal/office IPs for us to add to our exclusion list, inform your Contentsquare Implementation Manager or Success Manager to temporarily pause that exclusion list. Otherwise, sessions run from such an IP will not be collected by Contentsquare.

#### Testing

1. Start a journey on your website, featuring the elements to be masked.
1. In the Contentsquare Tracking Setup Assistant extension, select `Turn off automasking` to prevent 'AAA' masking from affecting your local session.

    ![](~/assets/web/ctsa-sr-turn-off-anon.png)

1. Select `Collected for Session Replay` to enable Session Replay data collection for your session.

    ![](~/assets/web/ctsa-sr-1.png)

    :::tip[Direct link to replay]
    A **Play** button appears next to the page URL. Click the icon and leave the tab open. The resulting replay will be available at this link 30 minutes after the end of your tests.
    :::

1. Select `Trigger testing pageEvent` to create the `SR Testing` page event which identifies your current session.

    ![](~/assets/web/ctsa-trigger-testing-page-event.png)

1. Make sure that the elements to be masked are visible as you progress along your testing journey. If required, fill out any test personal information. You will be able to check this information has been masked in the resulting replay.

1. Once you are done testing, close your session by either closing the session's tab or deleting your cookies.

    ![](~/assets/web/ctsa-delete-cookies.png)

    :::note[Replay availability]
    The replay is available 30 minutes later:

      - At the link generated above accessible via the **Play** button.
        ![](~/assets/web/ctsa-sr-2.png)

      - On the [Contentsquare platform](https://app.contentsquare.com/), by filtering replays containing the `SR Testing` page event.

        ![](~/assets/web/find-testing-page-event.png)

1. Watch the replay and look for all the areas where Personal Data could appear:  
- ❌ If Personal Data is visible, update your masking and test again.
- ✅ If there were no Personal Data, you are covered in terms of GDPR compliance.

#### What's next?
If you are currently in the initial implementation phase of your project, inform your Implementation Manager about the results so they can double-check and then turn automasking off for you to use full Session Replay.

If you are not in implementation and your tests are successful, you can update the auto masking rules directly from the Console in Contentsquare if you are an Admin, by going to the **Automasking** tab.

See how on [our Help Center](https://support.contentsquare.com/hc/en-gb/articles/360017105259#01H7ZAF8S5FZ70HGHV036TXF18).

#### Following Session Replay requests

HTML content is sent via requests to one of the endpoints listed below, based on where data is stored for your project:

- `https://k.aeu1.contentsquare.net/{apiVersion}/recording`
- `https://k.aus1.contentsquare.net/{apiVersion}/recording`
- `https://k.eu1.az.contentsquare.net/{apiVersion}/recording`
- `https://k.us1.az.contentsquare.net/{apiVersion}/recording`
- `https://k.ba.contentsquare.net/{apiVersion}/recording`
- `https://k.bf.contentsquare.net/{apiVersion}/recording`
- `https://k.aa.contentsquare.net/{apiVersion}/recording`
- `https://k.af.contentsquare.net/{apiVersion}/recording`

The request is sent with the [`_cs_s`](/en/web/cookies/#_cs_s) cookie, which value ends with `.3`:
The request contains all the DOM.

:::note
Image elements containing base64 data will not be serialized by the tag for user privacy and technical reasons. Indeed, most of the time these elements contain Personal Data as they are often used to display personal images uploaded by a user.
:::

:::tip[Inspect data sent for Session Replay]
Use the [`_cs_debug`](/en/web/cookies/#_cs_debug) cookie inspect the decoded data:

Sessions collected with the `compressionDisabled` flag on are filtered out from the Session Replay pipeline.

1. From the browser console, run this command to create the cookie:

    ```
    document.cookie = "_cs_debug=compressionDisabled"
    ```
1. Reload the page.
1. In the Network tab, search for `https://k- contentsquare`, select the request, and check the payload.
:::

## Blocking Personal Data in URLs

Personal Data does not only appear within HTML content.

For a given page, you also need to mask Personal Data found in:

- [The path of the current page](#masking-personal-data-in-the-url-path)
- [The query string parameters of the current page](#masking-personal-data-in-url-query-string-parameters)
- [The referrer of the next visited page](#masking-personal-data-in-the-referrer)

Unmasked data could be exposed in the Error Analysis module.

### Masking Personal Data in the URL path 

To remove Personal Data in the URL of the current page, we must rewrite the URL of the pageview, and mask it, before the tag collects it, using the `setPath` command.

The `setPath` command takes as a parameter the exact new path we want to collect as a URL.

```javascript
window._uxa = window._uxa || [];
window._uxa.push([
  'setPath', <NEW_PATH_TO_COLLECT>
]);
```

This command needs to be fired on **every page where the URL contains Personal Data, before the main Tracking tag is loaded**. Only the path is to be configured, not the whole URL.

#### Example

```javascript
window._uxa = window._uxa || [];
window._uxa.push([
  'setPath', '/users/CS_ANONYMIZED_USER_ID'
]);
```

| URL before masking | URL after masking |
|---|---|
| `https://www.contentsquare.com/users/jon.snow` | `https://www.contentsquare.com/users/CS_ANONYMIZED_USER_ID` |
| `https://www.contentsquare.com/cartpage/users/jon.snow`  | `https://www.contentsquare.com/users/CS_ANONYMIZED_USER_ID` |

### Masking Personal Data in URL query string parameters

When Personal Data can be found in the query parameters of an URL, use the `setQuery` command to replace the query string within the URL with a new masked one.

```javascript
window._uxa = window._uxa || [];
window._uxa.push([
  'setQuery',
  <ANONIMYZED_QUERY_STRING>
]);
```

The `setQuery` command takes as a parameter the exact new query string we want to display within the URL. This command instructs the Tag to replace the part of the URL after the `?` by another one with masked values.

This command must be fired on **all pages where the URL contains Personal Data, and before the main tag is loaded**. Only the query string is to be configured, not the whole URL.

#### Example

```javascript
window._uxa = window._uxa || [];
window._uxa.push([
  'setQuery',
  '?user_id=CS_ANONYMIZED_USER_NAME&address=CS_ANONYMIZED_ADDRESS'
]);
```

| URL before masking | URL after masking |
|---|---|
| `https://www.mysite.com/us/makeup/valentines-day/?user_id=jon.snow&address=castle.black` | `https://www.mysite.com/us/makeup/valentines-day/?user_id=CS_ANONYMIZED_USER_NAME&address=CS_ANONYMIZED_ADDRESS` |
|`https://www.mysite.com/us/makeup/valentines-day/?campaign=valentinesday_feb_2021&user_id=jon.snow&address=castle.black` | `https://www.mysite.com/us/makeup/valentines-day/?user_id=CS_ANONYMIZED_USER_NAME&address=CS_ANONYMIZED_ADDRESS` |

Customize the masked term according to the "type" of the parameter we want to replace, in order for the result to be explicit:

- `CS_ANONYMIZED_USER_ID`
- `CS_ANONYMIZED_EMAIL`
- `CS_ANONYMIZED_ADDRESS`

...and so on.

:::note
The `setPath` and `setQuery` commands are already often used during the initial Implementation Phase, for other purposes than removing Personal Data in our Error Analysis module. If it is the case, the initial command should be amended with the new parameters to avoid collision.
:::

### Masking Personal Data in the referrer

Even when you have masked Personal Data in URLs and query parameters on a page, they propagate to the next visited page through the [`referrer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer). To handle this use case, use the `referrer:` commands below.

#### In the URL

Consider this journey:

1. Users navigate from `https://www.example.com/users/123456/products/ABCDEF` to `https://www.example.com/`.
1. A pageview is sent on `https://www.example.com/`.
1. The referrer value in both the browser and in the pageview request is `https://www.example.com/users/123456/products/ABCDEF`.

To mask Personal data in the URL within the referrer, use the `referrer:maskUrl` command:

```javascript
var referrers = [
  'https://www.example.com/users/:USER_ID/products/:PRODUCT_ID',
  'https://www.example.com/account/cancelOrder/:ORDER_ID',
  'https://www.example.com/order/:ORDER_ID/merge/:ORDER_ID'
];
window._uxa = window._uxa || [];
for (var i = 0; i < referrers.length; i++) { 
  window._uxa.push([ 'referrer:maskUrl', referrers[i] ]);
}
```

The referrer value in the pageview request for `https://www.example.com/` will be:

- `https://www.example.com/users/CS_ANONYMIZED_USER_ID/products/CS_ANONYMIZED_PRODUCT_ID`
- `https://www.example.com/account/cancelOrder/CS_ANONYMIZED_ORDER_ID`
- `https://www.example.com/order/CS_ANONYMIZED_ORDER_ID/merge/CS_ANONYMIZED_ORDER_ID`

:::note
Use the `referrer:maskUrl` command as many times as needed, for example to deal with all URL patterns on your site at once.
:::

#### Within query parameters

Consider this journey:

1. Users navigate from `https://www.example.com/confirmation?firstname=jon&lastname=snow` to `https://www.example.com/`.
1. A pageview is sent on `https://www.example.com/`.
1. The referrer value in both the browser and in the pageview request is `https://www.example.com/confirmation?firstname=jon&lastname=snow`.

To mask Personal data in the query string part of the referrer, use the `referrer:removeQueryString` command:

```javascript
window._uxa = window._uxa || [];
window._uxa.push([
  'referrer:removeQueryString'
]);
```

The referrer value in the pageview request for `https://www.example.com/` will be:

`https://www.example.com/?`

:::note
To revert the behavior of the `referrer:removeQueryString` command, use `referrer:keepQueryString`. Use this command in the context of a multi-step funnel for a single page, where you run `referrer:removeQueryString` before the natural pageview and then need to pass query string parameters to subsequent artificial pageviews.
:::

## Removing Personal Data in API errors

Use the `networkRequest:maskUrls` command to rewrite the URL before the Tag is tracking the API errors and collecting the request URL.

The command takes as parameter one or several masking patterns to apply to URLs containing Personal Data. Patterns can match the full URL of the page or only a part of it.

```javascript
window._uxa = window._uxa || [];
window._uxa.push([
  'networkRequest:maskUrls',
  <PATTERN>
]);
```

Patterns include the URL fragments to mask as variables prefixed by a colon.  
Such variables are replaced by `CS_ANONYMIZED_{FRAGMENT}`:

- `:user_id` becomes `CS_ANONYMIZED_USER_ID`
- `:address` becomes `CS_ANONYMIZED_ADDRESS`
- `:email` becomes `CS_ANONYMIZED_EMAIL`

This command must be fired **on all pages containing Personal Data which call the Contentsquare API, and before the main tag is loaded**.

### Example

```javascript ":order_id"
window._uxa.push(["networkRequest:maskUrls",
  [
    "order/:order_id/merge/:order_id",
    "order/:order_id/item",
    "cancelOrder/:order_id"
  ]
]);
```

| URL before masking | URL after masking |
|---|---|
| `https://api.net/order/:order_id/merge/:order_id` | `https://api.net/order/CS_ANONYMIZED_ORDER_ID/merge/CS_ANONYMIZED_ORDER_ID` |
| `https://api.net/order/:order_id/item` | `https://api.net/order/CS_ANONYMIZED_ORDER_ID/item` |
| `https://www.api.nl/nl/ajax/nfs/account/cancelOrder/:order_id` | `https://www.api.nl/nl/ajax/nfs/account/cancelOrder/CS_ANONYMIZED_ORDER_ID` |

## Removing Personal Data in Clicked Element

When clicked element collection is turned on and the data-collection is active for the session, the Tag collects the text payload of the buttons and links being clicked as part of other analytics payloads (see `/events` [request](/en/web/requests/#events)).

<h3>With automasking off</h3>

The clicked element will be collected except if it is masked by `data-cs-mask`.

<h3>With automasking on</h3>

The clicked element will not be collected except if `data-cs-capture` is present on the clicked button or link.

:::note
You can enable Automasking on [specific URLs](/en/web/personal-data-handling/#selectively-mask-pages-by-url).
:::

You can also mask specific elements on the webpage. This masking takes priority over automasking configuration. For more information, see [personal data selector section](#personal-data-selector-1).

## Controlled Exposure

:::note
This feature is only available to Experience Monitoring customers.

Contact your Implementation Manager to inform them about your implementation of controlled exposure as they’ll need to activate that feature for your project.
:::

The Contentsquare Tracking Tag does not collect any text typed into `input` or `textarea` fields.

If you need to display the personal data of a user, such as shipping/delivery addresses, names, phone numbers, email addresses, text inputs in a form field…, use our collect and encrypt mode.

The collect and encrypt mode allows for collecting, storing, and displaying text in `input`, `textarea` fields, or any other element within a page that is usually masked by the Tag, before it is sent to our servers.

:::warning[Encryption vs Masking]
  Encrypting data is incompatible with element level masking such as tagging DOM elements with the [`data-cs-mask`](#tagging-dom-elements) attribute or through the [Personal Data Selector](#personal-data-selector) using the `setPIISelectors` API.
  
  This means that:
    - Both attributes `data-cs-mask` and `data-cs-encrypt` should never be used on the same HTML element,
    - The `data-cs-mask` attribute should not be used on a container element that would target indirectly another element to be encrypted,
    - If you already have a personal data masking method implemented on your project, check that no element with a `data-cs-encrypt` attribute is targeted by these methods, taking the DOM nesting rules into account.
    - If you wish to mask an element by default but be able to encrypt it and expose it in Session Replays, you should **only** have the `data-cs-encrypt` attribute on this element at the most granular level rather than `data-cs-mask`.
:::

### Collect and encrypt personal data from the collected HTML

There are two methods to collect and encrypt personal data from the collected HTML:

- Using the Contentsquare Encryption Selector
- Tagging DOM Elements

#### Encryption Selector

Each DOM element to be collected and encrypted is identified via its CSS selector. These selectors are pushed to the API via a JavaScript object. The content of the identified element is then encrypted and collected for Session Replays.

:::note
In case of CSS selectors being changed or removed, the encryption and collection will be removed as well.
:::

The following object that contains CSS selectors for text should be pushed to the API as follows, before firing the main tag:

```javascript
window._uxa = window._uxa || [];
window._uxa.push(['setEncryptionSelectors', "#cart, .total-items"]);
```

#### Tagging DOM elements

The `data-cs-encrypt` attribute can be added on an input field, `textarea` field, or any other element.
Instead of being masked, the text present there will be encrypted, stored, and made available for exposing under specific conditions.

The encryption process happens on the `innerText` property of the tagged element. It does not apply on nested elements: the text of the nested element won’t be masked nor encrypted. Make sure to add the `data-cs-encrypt` attribute on the most granular elements that must be collected.

```html
<h2 class="welcoming">
    Welcome back 
    <span class="user_name" data-cs-encrypt>John Doe</span>
</h2>
```

You can also add the `data-cs-encrypt` attribute with JavaScript provided you do it before any pageview is sent.

:::warning
During the encryption process, the value of the text is truncated after 90 characters. Choose carefully the HTML elements to expose: try to avoid `textarea` or long text inputs.
:::

### Data Encryption

To use Controlled Exposure, all data to be collected must be encrypted.
To do this, you will need to obtain a combination of encryption keys:

- Public key: is used by the Tracking Tag so we can encrypt the data
- Private key: is used by the APP for decryption

:::note
You must generate the pair of keys, Contentsquare will never have access nor store the private key.
:::

### How to generate the key pair

#### Option 1: With a Google chrome script

1. Copy the following script:

    ```javascript
    function arrayBufferToString(buffer) {
        const byteArray = new Uint8Array(buffer);
        let byteString = "";
        for (let i = 0; i < byteArray.byteLength; i += 1) {
          byteString += String.fromCodePoint(byteArray[i]);
        }
        return byteString;
    }

    crypto.subtle.generateKey({
        name: "RSA-OAEP",
        hash: "SHA-256",
        modulusLength: 4096,
        publicExponent: new Uint8Array([1,0,1])
    }, true, ["encrypt", "decrypt"]).then(
        (keysObject) => {
            crypto.subtle.exportKey("pkcs8", keysObject.privateKey).then(result => {
                const privateKey = btoa(arrayBufferToString(result));
                console.log(`Private key: `, privateKey);
            });
            crypto.subtle.exportKey("spki", keysObject.publicKey).then(result => {
                const publicKey = btoa(arrayBufferToString(result));
                console.log(`Public key: `,publicKey);
            });
      });
    ```

1. Paste the script in the Chrome console.
1. Press enter on the keyboard.
 
#### Option 2: With OpenSSL or OpenSSH

On linux/Mac, you can use OpenSSL:

```
openssl genpkey -out mykey.pem -algorithm RSA -pkeyopt rsa_keygen_bits:4096
openssl rsa -in mykey.pem -pubout > mykey.pub
```

On Windows you will need to [install WSL](https://docs.microsoft.com/en-us/windows/wsl/install).

#### How to add a public key

1. Go to the Contentsquare Console > Choose the account > Choose the project > "Encryption management" tab.
1. Select "Store public key".
1. Paste your preferred public key.
1. Select "Store key".

:::note
It can take up to 30 minutes before the key is activated.
:::

### Unmask on-screen text in Contentsquare

1. Select the key icon and select Unmask on-screen text
1. Enter in the private key and select decrypt (all replays will be exposed).

## User identifier

:::note
  This feature is only available to Experience Monitoring customers with a 50% Global Replay Sampling rate. 100% is highly recommended: the higher the sampling rate, the more likely you are to find the related replays.

  Always contact your Implementation Manager to inform them about your implementation of user identifier: this feature must be activated for your project.
:::

The **User Identifier** feature allows searching for replays belonging to specific users, using a unique identifier. You gain the ability to search and access all sessions associated with a specific user, for example `john@gmail.com`, within the selected date range. Use this feature in the case of user feedback or complaints.

The user identifier can be any value which uniquely identifies a user such as a username, an account number, email address, phone number, CRM ID, or loyalty system ID. It is immediately hashed and encoded in a one-way format before it is sent to Contentsquare.

When filtering Session Replays with a user identifier in Contentsquare, the same hashing algorithm is used and both hashes are compared to match the user identifier with its associated replay(s).

### User identifier implementation

1. **Choosing the right User Identifier**: Opt for a unique identifier like the email address, username, or account number that is available on the front-end.  
1. **Collecting User Identifiers**: To collect the user identifier, you need to send a page event using the [`trackPageEvent`](/en/web/custom-page-events/#defining-page-event) command, with the prefix `@user-identifier@`:

    ```javascript /@user-identifier@/
    window._uxa = window._uxa || [];
    window._uxa.push(['trackPageEvent', '@user-identifier@user_email']);
    ```

    Or if you pull the identifier from the data layer:

    ```javascript /@user-identifier@/
    window._uxa = window._uxa || [];
    window._uxa.push(['trackPageEvent', '@user-identifier@' + dataLayer.Name]);
    ```

    The user identifier value is limited to 100 characters.

---

# Product Analytics

URL: https://docs.contentsquare.com/en/web/product-analytics/

As of June 2024, Contentsquare users can take advantage of Product Analytics capabilities.
Product Analytics (PA) captures and visualizes user interactions across web, mobile, and other platforms, providing insights into user behavior and engagement. This data helps identify user preferences, pain points, and behavior patterns, allowing for the improvement and optimization of the digital experience.

For more information on Product Analytics, see [this article](https://contentsquare.com/platform/product-analytics/).

For more information about how Product Analytics combines with Experience Analytics, refer to our [plans and pricing](https://contentsquare.com/pricing/).

## Requirements and impacts on the Tag

### Privacy

Masking or encrypted elements defined for CS tag not to capture Personal Data as part of the Session Replay feature will also be enforced by the PA tag to avoid capturing Personal Data in PA systems.  
See [Personal Data Handling](/en/web/personal-data-handling/)

If your project has IP-less mode enabled, IP processing will be disabled on the PA Tag.

Data deletion option can be performed in both CS and PA upon request.

### CSP

If you enforce a Content Security Policy, make sure the [configuration](/en/web/content-security-policy/) includes:

```http wrap
script-src 'unsafe-inline' 'unsafe-eval' https://cdn.heapanalytics.com https://heapanalytics.com;
script-src 'unsafe-inline' *.contentsquare.net;
img-src https://heapanalytics.com;
style-src https://heapanalytics.com;
connect-src https://heapanalytics.com;
font-src https://heapanalytics.com;
```

### Dedicated script

When Product Analytics is enabled, the CS tag loads the PA project configuration from `https://cdn.us.heap-api.com/config/<ENV_ID>/heap_config.js` which loads the PA tag `heap.js`.

The PA tag then captures the required data in synchronization with the CS Tag.

:::note[Impacts on SRI]
If you are using [SRI](/en/web/sri/), reach out to your Contentsquare contact for more information.
:::

### Cookies

The Tag will create [additional cookies](/en/web/cookies/#product-analytics-cookies), prefixed with `_hp*`.

---

# Requests

URL: https://docs.contentsquare.com/en/web/requests/

## Pageview
**Endpoint**

`https://c.contentsquare.net/pageview`

**Trigger**

Tag execution and when the trackpageview command is called

**Method**

`GET`

**Protocol**

`HTTP/2`

**Type**

`gif`

**Additional information**

[See dedicated section for more details](/en/web/sending-pageviews/#verifying-the-sending-of-pageviews)

## Events

**Endpoint**

`https://c.contentsquare.net/events`

**Trigger**

[See dedicated section for more details](/en/web/events-handling/#verifying-the-sending-of-events)

**Method**

`GET` and `POST`

**Protocol**

`HTTP/2`

**Type**

`gif`

**Additional information**

[See dedicated section for more details](/en/web/events-handling/#verifying-the-sending-of-events)

## Quota

**Endpoint**

- `https://k-aeu1.contentsquare.net/quota` (Europe)
- `https://q-aus1.contentsquare.net/quota` (US)

**Trigger**

For projects using the advanced session data collection pipeline, when a session is randomly selected for Session Replay, a POST request to the Quota Service is sent at the beginning of the session. The goal of the request is to check if the project still has credits to collect the current session.

**Method**

`POST`

**Protocol**

`HTTP/2`

**Type**

`xhr`

**Additional information**

There are no request parameters for quota request.

## Transaction

**Endpoint**

`https://c.contentsquare.net/transaction`

**Trigger**

When the `ec:transaction:send` command is called

**Method**

`GET`

**Protocol**

`HTTP/2`

**Type**

`gif`

**Additional information**

[See dedicated section for more details](/en/web/sending-ecommerce-commands/#verifying-the-sending-of-transactions)

## Dynamic variable

**Endpoint**

`https://c.contentsquare.net/dvar`

**Trigger**

When the `trackDynamicVariable` command is called

**Method**

`GET`

**Protocol**

`HTTP/2`

**Type**

`gif`

**Additional information**

[See dedicated section for more details](/en/web/sending-ecommerce-commands/#verifying-the-sending-of-transactions)

## Page Event

**Endpoint**

`https://c.contentsquare.net/pageEvent`

**Trigger**

When the `trackPageEvent` command is called

**Method**

`GET`

**Protocol**

`HTTP/2`

**Type**

`gif`

**Additional information**

[See dedicated section for more details](/en/web/custom-page-events/#verifying-the-sending-of-page-events)

## Session Replay Data Collection

**Endpoint**

- Projects on Advanced Data Collection Pipeline:
  - `https://k-aeu1.contentsquare.net/v2/recording` (Europe)
  - `https://k-aus1.contentsquare.net/v2/recording` (US)

**Trigger**

When session data collection is enabled according to ratio defined in the settings

**Method**

`POST`

**Protocol**

`HTTP/2`

**Type**

`xhr`

**Additional information**

[See dedicated section for more details](/en/web/personal-data-handling/#session-replay-testing)

## Non publicly accessible resources collection

The collection of data URL, non-public, or remote resources by the Tag triggers these requests during session data collection.

**Endpoint**

  - `https://srm.ba.contentsquare.net/exist` (Europe/AWS)
  - `https://srm.ba.contentsquare.net/putTag` (Europe/AWS)
  - `https://srm.aa.contentsquare.net/exist` (Europe/Azure)
  - `https://srm.aa.contentsquare.net/putTag` (Europe/Azure)
  - `https://srm.bf.contentsquare.net/exist` (US/AWS)
  - `https://srm.bf.contentsquare.net/putTag` (US/AWS)
  - `https://srm.af.contentsquare.net/exist` (US/Azure)
  - `https://srm.af.contentsquare.net/putTag` (US/Azure)

**Trigger**

When data URL resources or resources behind authentication are found on the website.

**Method**

`POST`

**Protocol**

`HTTP/2`

**Type**

`fetch`

## E-Merchandising

**Endpoint**

`https://c.contentsquare.net/display`

**Trigger**

When the E-merchandising tracking is enabled for the project.

**Method**

`POST`

**Protocol**

`HTTP/2`

**Type**

`xhr`

**Additional information**

1 request per pageview

## JS Errors

**Endpoint**

`https://c.contentsquare.net/errors`

**Trigger**

When JS Error tracking is enabled for the project. At each pageview.

**Method**

`POST`

**Protocol**

`HTTP/2`

**Type**

`xhr`

**Additional information**

1 request per error with a maximum of 20 requests per pageview

---

# Security

URL: https://docs.contentsquare.com/en/web/security/

Contentsquare is committed to the **confidentiality, data privacy and security of its clients and their end-users**. We will continue to invest extensive resources towards maintaining the highest level of data protection, privacy and security standards. 
## Cloud architecture

Contentsquare leverages cloud technology, and benefits from the **stringent standards** of cloud security maintained by our Cloud provider. These include:

- Compliance with leading industry certifications, regulations and frameworks (ISO 27001, PCI-DSS, SOC 2)
- Physical and environmental security (24-hour manned security, biometric access control, CCTV, environmental control systems with no single point of failure)
- Disaster Recovery infrastructure

## Product security

Contentsquare follows a series of **security best practices** to ensure the availability, confidentiality and integrity of your data: 

- Code development is done through a documented SDLC process which includes guidance on how code is tested, reviewed, and promoted to production.
- Code is peer-reviewed before being committed and analyzed with static code analysis tool targeting injection flaws, input validation and other potential defects.
- Yearly third-party penetration tests are performed against Contentsquare applications and public-facing environments.
- Monthly automated security scans are performed in-house on all our public-facing endpoints.
- Contentsquare leverages Sqreen.io as an additional layer of protection of its web-applications.
- Contentsquare has set-up a private bug-bounty program to reward relevant feedback from the ethical hacking community

## Data security encryption

Sensitive data in storage and in transit is **encrypted using state-of-the-art algorithms**:

- Data in transit is secured from the user’s browser to the application via TLS. Contentsquare TLS strength is ranked A by Qualys SSlabs.
- Technical administrative access from Contentsquare is secured with SSH (RSA 4096 bits key) over a VPN channel.
- Native user passwords are hashed using SHA-512 with salt.
- At-rest data are encrypted with AES-256

## Corporate security

As any enterprise, Contentsquare maintains a **security program to ensure that security** is central to all corporate processes.

- Contentsquare has a dedicated security officer responsible for security across the organization.
- Contentsquare maintains an Information Security Management System that is certified against ISO/IEC 27001.
- Risk management program is monitored through Key Performance Indicators that are shared with all internal stakeholders.
- Security starts with the people Contentsquare employs. New employees must sign an NDA as part of their work contract and must complete Security Awareness and Data Privacy training as part of the onboarding into the organization. All employees are also reminded of best practices through internal communications.
- Contentsquare has put in place a vendor management program to ensure that third-parties and their supply chain of providers comply with its security requirements and standards.
- Contentsquare also maintains an incident response policy and procedures that lay out clear communication channels and escalation paths.

## Tag integrity

Contentsquare runs its own Tag checker service on all projects to make sure no tag file is compromised.

Every 10 minutes, this service checks that the SHA-512 checksum of Tag files served at `//t.contentsquare.net/uxa/YOUR_TAG_ID.js` by our public CDN matches the checksum stored in our databases.

In the event of a compromised Tag, Contentsquare is alerted immediately.

:::note[Contentsquare Tag Checker versus Subresource Integrity]
We don't recommend implementing [Subresource Integrity (SRI)](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).  

If you implement SRI, you need to update to a newer version of the Tag yourself and are more dependent on Contentsquare support.
For more information, see [SRI](/en/web/sri/).
:::

---

# Send the user's decisions about data collection

URL: https://docs.contentsquare.com/en/web/send-the-users-decisions-about-data-collection/

## Users who refuse data collection
In order to have a cookie attesting that the user completely refuse data collection (no pageviews, no transactions will be sent), you need to execute the following code:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push(["optout"]);
</script>
```

We do recommend for you to add this to your privacy policy page:

```html
Contentsquare is a solution which provides the website owner with digital visitor behavior analytics in order to enhance visitor experience.
To be excluded from the collection of data by Contentsquare on this website, <a href="javascript:window._uxa.push(['optout']);">click here</a>.
```

On the current domain, this command will add a `_cs_optout` cookie and remove all the other Contentsquare cookies already there.

**Command by URL** — If the opt-out mechanism is handled by a third-party tool such as Evidon, you can use a link to the targeted domain including `_cs_optout` in the query parameters or in the anchor. On the page, the tag will execute the same code as above to exclude the user from tracking and add the opt-out cookie.

- `www.mydomain.com/?_cs_optout`
- `www.mydomain.com/#_cs_optout`

---

# Sending an add to cart

URL: https://docs.contentsquare.com/en/web/sending-an-add-to-cart/

The Add to cart event is available with **Experience Analytics Web** and **Merchandising**.
The event is not available in **Experience Analytics Mobile**.
For **Experience Analytics Web**:

```html
<script type="text/javascript">
    window._uxa = window._uxa || [];
    window._uxa.push(['trackPageEvent', 'addToCart']);
    window._uxa.push(['ec:cart:add', {
        merchant: window.location.hostname
    }]);
</script>
```

For **Merchandising**, specify an SKU value identical to the value in the Product Catalogue:

```html /sku: "SKU_added_to_cart"/
<script type="text/javascript">
    window._uxa = window._uxa || [];
    window._uxa.push(['ec:cart:add', {
        sku: "SKU_added_to_cart",  /* mandatory */
        merchant: window.location.hostname
    }]);
</script>
```

You can also implement an add to cart in Google Tag Manager using the "Tracking Customization" tag: select `Add to cart` as Action type and supply the SKU.

---

# Sending custom errors

URL: https://docs.contentsquare.com/en/web/sending-custom-errors/

<Render file="en/plans/dem"/>
With the Custom Errors feature, collect any text displayed on the user screen as a result of a specific action such as:

- Filling a form,
- Loading a product list,
- Log in to a website,
- A request failing to get the remaining stock quantity on a product page.

Custom errors can be located inside alert banners, pop-up windows, or inline in a form.

## Collecting custom errors

:::note
You can send a maximum of 20 custom errors per page.
:::

To collect custom error messages, use the `trackError` command:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push([
    "trackError",
    "<MESSAGE>",
    {key: value, key: value, ...}
  ])
</script>
```

where:

- `<MESSAGE>` is a `string` which contains the text displayed to end-users (max. 300 characters).
- (optional) - A JavaScript object with **up to 5 key/value pairs** to categorize the errors.
  Both the key and value should be `string` and can be up to 30 characters.

### Examples

Send a custom error for a failing request, typed as an error from the system:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push([
    "trackError",
    "Could not get stock quantity",
    {"type": "systemError"}
  ])
</script>
```

Send a custom error for incorrect user input with multiple attributes (type, severity, language):

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push([
    "trackError",
    "140000 is not a valid postal code",
    {
      "type": "formValidation",
      "severity": "minor",
      "lang": "english"
    }
  ])
</script>
```

## Verifying the sending of custom errors

Use the [Contentsquare Tracking Setup Assistant Chrome Extension](https://chrome.google.com/webstore/detail/contentsquare-tracking-se/pfldcnnaiaiaogmpfdjjpdkpnigplfca) to track custom errors that are sent.

![](~/assets/web/ctsa-custom-erorrs.png)

---

# Sending custom vars

URL: https://docs.contentsquare.com/en/web/sending-custom-vars/

## General principles
:::note
Custom vars are sent when a pageview event is triggered.
There is no command to send them specifically.
:::

### Use

**Custom vars** are additional information on the page, the user or the session, sent along with pageviews.

They generally include datalayer information, such as:

- Page type,
- Product category,
- If the user is signed in or not,
- The number of items in the cart

This information enables visitor segmentation or page grouping, for which the URL would not be enough.

### Limits

Each custom var is composed of a key (max. 512 characters) and value (max. 255 characters).

You are limited to 20 custom vars per project.  
You can update up to 20 cvars on the same page.

Each custom var holds a unique index, strictly between 1 and 20. Custom vars with indexes outside this range are **not sent**. Indexes are available for users to select within Contentsquare.

Use a consistent index for a given custom var within a project — for instance, if the "page template" is collected with an index of 3, use the slot 3 for this information on every page of the website.

Saving a custom variable creates a URI-encoded cookie which contains a stringified JSON of the stored information. This string may contain all URI [allowed characters](https://en.wikipedia.org/wiki/Percent-encoding).

:::warning
Make sure there is no security limitation on your server which blocks site entry with URI-encoded cookies, or any regex test that could target Contentsquare cookies.
:::

## Defining custom vars

To define a custom var, use the `setCustomVariable` command:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push(['setCustomVariable', index, name, value, scope]);
</script>
```

This means that you have to add an array to the `_uxa` object, containing:

- `index` is a integer > 0 and &lt;= 20
- `name` is a string of 512 characters max (if longer the Tag will truncate it)
- `value` is a string of 255 characters max (if longer the Tag will truncate it)
- `scope` (optional) defines the custom var scope and behavior

    - No `scope` specified (**default**):
      - In scopes `visit` and `page`.
    - `2` or `visit`:
      - In scope `visit`.
    - `3` or `page`:
      - In scope `page`.
      - Deleted after a Natural pageview.
    - `4` or `nextPageOnly`:
      - In scope `nextPageOnly`.
      - Deleted after a Natural pageview, or an Artificial pageview with the next `trackPageview` command.

Once defined, custom vars are sent automatically with the next pageview (natural or artificial).

Defining a custom var with an index that already exists overrides its name and value.

### Examples

Defining a custom var in scope `visit` at index `5` with name `cname` and value `cvalue`.

```html
<script type="text/javascript">
  window._uxa.push(['setCustomVariable', 5, "cname", "cvalue", 2]);
</script>
```

Defining a custom var in scopes `visit` and `page` at index `6` with name `cname` and value `cvalue`.

```html
<script type="text/javascript">
  window._uxa.push(['setCustomVariable', 6, "cname", "cvalue"]);
</script>
```

Defining a custom var with the scope `nextPageOnly`.

```html
<script type="text/javascript">
  // either
  window._uxa.push(['setCustomVariable', 6, "cname", "cvalue", 4]); 
  // or
  window._uxa.push(['setCustomVariable', 6, "cname", "cvalue", "nextPageOnly"]); 
</script>
```

### Delete custom var command

- A custom var can be deleted by calling the command with an empty string value. The index parameter must match the custom var to delete.
- Custom vars with scope `nextPageOnly` are automatically deleted when the next natural or artificial page view is sent.

#### Examples

Deleting the custom var of name `cname`.

```html
<script type="text/javascript">
  window._uxa.push(['setCustomVariable', 5, "cname", ""]);
</script>
```

Deleting custom var of name `cname` from scope `visit`.

```html
<script type="text/javascript">
  window._uxa.push(['setCustomVariable', 6, "cname", "", 2]);
</script>
```

Deleting custom var of name `cname` from both scopes `page` and `visit` with an empty `scope` value.

```html
<script type="text/javascript">
  window._uxa.push(['setCustomVariable', 6, "cname", ""]);
</script>
```

## Verifying the sending of custom vars

To verify that **custom vars** have been sent, check the **`cvarp` parameter of the corresponding pageview**.

[Learn more about pageviews](/en/web/sending-pageviews/)

---

# Sending dynamic vars

URL: https://docs.contentsquare.com/en/web/sending-dynamic-vars/

## General principles
### Use

Dynamic vars are additional information on the session that can be used to segment users.

For example, they can include information on the A/B Test variations displayed to the current user.

Unlike custom vars, dynamic vars can be sent at any time during a session and do not require to send a pageview.

### Limits

#### On the server side

It is possible to save up to 40 distinct dynamic variables per pageview. If more are received, only the first 40 distinct keys will be kept.

If multiple dynamic variables using the same key are fired per pageview, only the last value associated with the key will be kept

#### On the Tracking Tag side

Every dynamic variable is composed of a pair of key (max. 512 characters) and value (max. 255 characters string or integer from 0-4294967296). The key and value are truncated by the Tracking Tag before they are sent.

## Defining dynamic vars

To define and send a dynamic var at once, use the `trackDynamicVariable` command:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push(["trackDynamicVariable", {key: my_key, value: my_value}]);
</script>
```

Allowed values are `number` or `string` — there are specific capabilities for each in the Contentsquare app:
- For values of type **number**, you can use operators (more than, less than, etc.).
- For values of type **string**, auto-completion and regular expressions are available.

## Verifying the sending of dynamic vars

Our [Contentsquare Tracking Setup Assistant Chrome Extension](https://chrome.google.com/webstore/detail/contentsquare-tracking-se/pfldcnnaiaiaogmpfdjjpdkpnigplfca) displays each dynamic var sent.

### Inspecting the payload

If you can't use our Chrome extension, use the [`_cs_debug`](/en/web/cookies/#_cs_debug) cookie.

1. From the browser console, run this command to create the cookie:
  
    ```
    document.cookie = "_cs_debug=compressionDisabled"
    ```

    :::note
      Sessions collected with the `compressionDisabled` flag on are filtered out from the Session Replay pipeline.
    :::

1. Reload the page.
1. In the Network tab, search for `dvar`, select the request, and check the value of the `dv` parameter.

### Checking the requests

To check the actual request that is sent for each dynamic vars package (several dynamic vars pushed at the same time bundled together in a single network request), follow GET requests sent to `//c.contentsquare.net/dvar`, with these parameters.

| Name  | Description                                    | Type    |
|-------|------------------------------------------------|---------|
| `dv`  | Dynamic vars (compressed)                      | String  |
| `pid` | Project ID                                     | Integer |
| `r`   | A random digit to avoid request caching        | Integer |
| `uu`  | Unique user ID                                 | String  |
| `pn`  | Page number<br/>(each pageview increments of 1)| Integer |
| `sn`  | Session number                                 | Integer |

---

# Sending ecommerce commands

URL: https://docs.contentsquare.com/en/web/sending-ecommerce-commands/

Reminder: To associate a web user's visit with their potential purchases (and corresponding revenue), you need to send the transaction information to Contentsquare using a dedicated command. This command will send Contentsquare the order reference, its amount, bought items, etc.
## Sending a transaction (without Merchandising)

To send transaction information to Contentsquare, execute the following command each time a visitor to your website completes a purchase (and populate the values below accordingly for the ID, the revenue and the currency)

:::note
Only send this information when the order is fully completed
:::

```html
<script type="text/javascript"> 
  window._uxa = window._uxa || [];
  // Push transaction info into CS global object
  window._uxa.push(['ec:transaction:create', { 
    'id': '123', /* Transaction ID (string, up to 40 characters) */ 
    'revenue': '9.99', /* Transaction's total amount paid (integer or string, up to 12 digits and 2 decimals - extra decimals   are truncated) */ 
    'currency': 'usd' /* Currency value (string - numeric or alphanumeric ISO 4217 value) (optional) */
  }]);
</script>
```

Followed by:

```html
<script type="text/javascript"> 
  // Send the information to Contentsquare
  window._uxa.push(['ec:transaction:send']);
</script>
```
Assuming no additional merchandising information needs to be sent, you could include the `ec:transaction:send` command inside the same `<script>` tag:

```html
<script type="text/javascript"> 
  window._uxa = window._uxa || [];

  // Push transaction info into CS global object
  window._uxa.push(['ec:transaction:create', { 
    'id': '123', /* Transaction ID (string, up to 40 characters) */ 
    'revenue': '9.99', /* Transaction's total amount paid (integer or string, up to 12 digits and 2 decimals - extra decimals are truncated) */ 
    'currency': 'usd' /* Currency value (string - numeric or alphanumeric ISO 4217 value) (optional) */
  }]);

  // Send the information to Contentsquare
  window._uxa.push(['ec:transaction:send']);
</script>
```

:::note
You can send different transactions with different currencies: Contentsquare handles multi-currency by default. In the Contentsquare application, transaction amounts and metrics are displayed in the [single currency set by each user](https://support.contentsquare.com/hc/en-gb/articles/5968871314716) in their profile.
:::

### Multiple transactions

You can send several transactions to Contentsquare but with different IDs:
- If multiple transactions are sent with an identical transaction ID on the same session, only the last one received is inserted in the database,
- If multiple transactions are sent with different transaction IDs (even on the same session), all of them will be on the database.

## Sending a transaction (for Merchandising)

:::note
This section applies to Merchandising customers only.
:::

When implementing the ecommerce tracking for our Merchandising product, you would be required to specify what products were purchased in each transaction, in addition to the regular transactional information already mentioned above.

For each product purchased, the following script should be triggered, in addition to the generic transaction information explained above, followed by the command `ec:transaction:send`:

```html
<script type="text/javascript">  
  // Push individual product info into CS global object
  window._uxa.push(['ec:transaction:items:add', {
    'id': '123', /* Transaction ID (string, up to 40 characters) */
    'sku': '123ABC', /* Product code (string, up to 20 characters) */ 
    'price': '9.99', /* Product unit price actually paid by the visitor; Not the nominal price (integer or string, up to 6   digits and 2 decimals - extra decimals are truncated) */
    'quantity': '1', /* Quantity (whole number between 1 and 32766) */  
    'name': 'Black scarf', /* Product name (string, up to 50 characters) */
    'category': 'Scarves', /* optional - Product category (string, up to 20 characters) */ 
  }]);
</script>
```

Thus, the code for a full transaction for Merchandising should look something like below:

```html
<script type="text/javascript"> 
  window._uxa = window._uxa || [];
  
  // Push transaction info into CS global object
  window._uxa.push(['ec:transaction:create', { 
  	'id': '123', /* Transaction ID (string, up to 40 characters) */ 
  	'revenue': '9.99', /* Transaction's total amount paid (integer or string, up to 12 digits and 2 decimals - extra decimals   are truncated) */ 
  	'currency': 'usd' /* Currency value (string - numeric or alphanumeric ISO 4217 value) (optional) */
  }]);

  // Push individual product info into CS global object (to be repeated per each product)
  window._uxa.push(['ec:transaction:items:add', {    
    'id': '123', /* Transaction ID (string, up to 40 characters) */
    'sku': '123ABC', /* Product code (string, up to 20 characters) */ 
    'price': '9.99', /* Product unit price actually paid by the visitor; Not the nominal price (integer or string, up to 6 digits and 2 decimals - extra decimals are truncated) */
    'quantity': '1', /* Quantity (whole number between 1 and 32766) */  
    'name': 'Black scarf', /* Product name (string, up to 50 characters) */
    'category': 'Scarves', /* optional - Product category (string, up to 20 characters) */ 
  }]);

  // Send the information to Contentsquare
  window._uxa.push(['ec:transaction:send']);
</script>
```

Here is an example of a complete transaction (including individual products for Merchandising) with transactional information taken from the datalayer:

```html
<script type="text/javascript">
  window._uxa = window._uxa || [];
  window._uxa.push(['ec:transaction:create', {
    'id': dataLayer.ecommerce.transactionId,
    'revenue': dataLayer.ecommerce.totalRevenue,
    'currency': dataLayer.ecommerce.currency
  }]);
  for (var i=0; i<dataLayer.ecommerceItems.length; i++) {
    window._uxa.push(['ec:transaction:items:add', {
      'id': dataLayer.ecommerce.transactionId,
      'name': dataLayer.ecommerceItems[i].name,
      'sku': dataLayer.ecommerceItems[i].sku,
      'category': dataLayer.ecommerceItems[i].category,
      'price': dataLayer.ecommerceItems[i].finalPrice,
      'quantity': dataLayer.ecommerceItems[i].quantity
    }]);
  }
  window._uxa.push(['ec:transaction:send']);
</script>
```

### Orders or products without any amount

Every order must have an amount. To pass those transactions anyway in your conversion rate, you can add an amount of `0`; anyhow, be careful of the consequences on the average cart (the same goes for the pricing of a cart product).

## Verifying the sending of transactions

Our [Contentsquare Tracking Setup Assistant Chrome Extension](https://chrome.google.com/webstore/detail/contentsquare-tracking-se/pfldcnnaiaiaogmpfdjjpdkpnigplfca) will display each transaction sent with its parameters.

### Checking the requests

To check the actual data sent for transactions, follow GET requests to `//c.contentsquare.net/transaction`, with the following parameters:

|parameter|definition|type|
|---|---|---|
|`pid`|project ID|Integer|
|`id`|transaction identifier|String|
|`revenue`|order amount|Double|
|`items` (optional) |order's products list|JSON|

---

# Sending pageviews

URL: https://docs.contentsquare.com/en/web/sending-pageviews/

**Reminder:** ー A **pageview** is when a web user visits a page (sometimes called "hit" or "pagehit"). Notably, it automatically contains the current URL of the page, the screen size, the window size and the size of the document.
## How pageviews are sent

Two instructions can be responsible for the launch of a pageview.

### Natural pageview

A pageview is automatically and compulsorily sent when the main tag has loaded.
It is not possible to prevent this sending but it is possible to modify the sent URL. Note that the URL which is sent does not include the hash (meaning the elements appearing after the `#`).

[Modify the sent URL](#modifying-the-sent-url)

### Artificial pageview

A JavaScript instruction can be executed to send an artificial pageview via the `trackPageview` command. Use this command when the page changes without provoking a full reload, meaning a new loading of the main tag:

- AJAX loading,
- Popin opening,
- Tabs changing,...

## Sending a natural pageview

You just have to load the main tag.

[Learn more about the main tag...](/en/web/#custom-html)

## Sending an artificial pageview

See [Artificial pageviews](/en/web/artificial-pageviews/#custom-html)

## Modifying the sent URL

Contentsquare provides commands to modify the URL to be sent automatically by the Tag.  
Use cases include passing information after the '#' sign, or removing Personal Data.

:::tip[Personal Data and URLs]
For a checklist on Personal Data in URLs, jump to the [dedicated section](/en/web/personal-data-handling/#blocking-personal-data-in-urls).
:::

### Modifying the path

To override the path, use the `setPath` command: 

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push(['setPath', <PATH_TO_SEND>]);
</script>
```

The domain will be automatically added before, and the query after.

:::note
For a natural pageview, make sure to use it **before calling the tag** so the new value is set before the pageview is triggered.
:::

#### Recommendations and limits

- The value passed should be 255 characters maximum.
- Do not add "#", since **fragments** are considered to be anchors and **all that comes after will be erased in the Contentsquare pipeline**.
- Don't use this command to push query parameters. If you do and the initial URL already has query parameters, you will end up having a badly formed URL:

  - Initial URL: `https://www.domain.com/path?initial=1`
  - Sent URL: `https://www.domain.com/overridenPath?overriden=0?initial=1`

#### Example

Let's take the example of a Single Page Application that is using the **fragment** instead of the **path** to define the page identifier:

- The initial URL of the page is: `https://www.domain.com/en#dynamic-app-path/in-the-fragment?query=param`
- The URL inserted in the Contentsquare database would be: `https://www.domain.com/en`
- To fix that, we need to replace the `#` by something else (`/__`): `window._uxa.push(['setPath', window.location.pathname + window.location.hash.replace('#','/__')]);`
- Resulting URL: `https://www.domain.com/en/__dynamic-app-path/in-the-fragment?query=param`

### Modifying the query parameters

To override the query parameters, use the following command:

```html
<script type="text/javascript">
   window._uxa = window._uxa || [];
   window._uxa.push(['setQuery', <QUERY_PARAMETERS_TO_SEND>]);
</script>
```

The domain and path will be automatically added before.

:::note
For a natural pageview, make sure to use it **before calling the tag** so the new value is set before the pageview is triggered.
:::

#### Recommendations and limits

- The value passed should be 255 characters maximum.
- Do not add "#", since **fragments** are considered to be anchors and **all that comes after will be erased in the Contentsquare pipeline**.

#### Example

Let's take the example of a page that could be loaded with a popin displayed and we want to be able to identify it:

- The initial URL of the page is: `https://www.domain.com/mypage?existingQueryParam=all`
- Using `setQuery`: `window._uxa.push(['setQuery', window.location.search + '&cookies-popin=true']);`
- Resulting URL: `https://www.domain.com/mypage?existingQueryParam=all&cookies-popin=true`

## Verifying the sending of pageviews

The [Contentsquare Tracking Setup Assistant Chrome Extension](https://chrome.google.com/webstore/detail/contentsquare-tracking-se/pfldcnnaiaiaogmpfdjjpdkpnigplfca) will display each pageview sent with its URL and Custom vars.

### Checking the requests

To check the actual request that is sent, follow GET requests sent to `//c.contentsquare.net/pageview`, with these query parameters:

| Name    | Description                                           | Type                                                              |
|---------|-------------------------------------------------------|-------------------------------------------------------------------|
| `url`   | Page URL                                              | String                                                            |
| `cvarp` | Custom vars defined for this page                     | JSON — **optional**                                               |
| `pid`   | Project ID                                            | Integer                                                           |
| `r`     | A random digit to avoid request caching               | Integer                                                           |
| `uu`    | Unique user ID                                        | String                                                            |
| `pn`    | Page number<br/>(each pageview increments of 1)       | Integer                                                           |
| `lv`    | Last visit                                            | Timestamp                                                         |
| `hd`    | Hit Date                                              | Timestamp                                                         |
| `lhd`   | Last hit date                                         | Timestamp                                                         |
| `sn`    | Session number                                        | Integer                                                           |
| `re`    | Collection                                            | 1 (standard), 3 (replay) or 5 (triggered replay)                  |
| `dw`    | Document width                                        | Integer                                                           |
| `dh`    | Document height                                       | Integer                                                           |
| `la`    | User's browser language                               | String                                                            |
| `dr`    | Previous page URL (referrer)                          | String                                                            |
| `sw`    | Screen width                                          | Integer                                                           |
| `sh`    | Screen height                                         | Integer                                                           |
| `ww`    | Window width                                          | Integer                                                           |
| `wh`    | Window height                                         | Integer                                                           |
| `cvars` | Session's custom vars                                 | JSON — **optional**                                               |
| `cvaru` | User's custom vars                                    | JSON — **optional**                                               |
| `v`     | UXA tag's number of versions                          | String                                                            |
| `pvt`   | Pageview type                                         | "a" (artificial), "r" (renewal), or "n" (natural)                 |
| `ex`    | Indicates if the pageview can be included in a replay | SR (not included) or empty (can be included)                      |
| `uc`    | User Consent                                          | 0 (Not required), 1 (Not expressed), 2 (Granted) or 3 (Withdrawn) |
| `uxt`   | Ongoing UXT tests, where required                     | JSON — **optional**                                               |
| `uxtv`  | Testing tag version, where required                   | String — **optional**                                             |

---

# Sub-resource integrity (SRI)

URL: https://docs.contentsquare.com/en/web/sri/

Subresource Integrity (SRI) provides an additional layer of security by ensuring that the files your web application or web document fetches (from a CDN or anywhere) have been delivered without a third-party having injected any additional content into those files — and without any other changes of any kind at all having been made to those files. The files will be rejected by the browser if any changes are detected. (SRI protects against attacks such as CDN hijacking and "man-in-the-middle" attacks).
The browser will calculate the hash according to a specified algorithm upon fetching it from the CDN, compare said hash with the hash specified in the integrity attribute of the script tag, and reject the request if no match is found.

In addition to the security benefits of this approach, it also ensures that none of the changes/updates (periodical or ad-hoc) on the Contentsquare side propagate to the Contentsquare tag running on your web application/document, unless the code is updated on your end.

## Setting It Up

To set up Contentsquare SRI on your web application, a tag similar to the below will be provided to you by your Contentsquare team (note the addition of the integrity attribute and the source path changes compared to the "regular" version of the tag). The path will use a project-specific ID that matches your Contentsquare project and the version of the snapshot being used. 

```html
<script type="text/javascript">
  (function () {
    var mt = document.createElement("script");
    mt.type = "text/javascript";
    mt.async = true;
    mt.integrity = "sha512-NEWHASH";
    mt.crossOrigin = "anonymous";
    mt.src = "//t.contentsquare.net/ss/<ID>/<VERSION>/uxa.js";
    document.getElementsByTagName("head")[0].appendChild(mt);
  })();
</script>

```

## Version update procedure 

Each version of the tag is manually generated by your Contentsquare team using the SRI deployment method. 
You can define the updates frequency with your dedicated Contentsquare team. This means that every time we will generate a new version of your tag we will communicate:

- New tag URL with the right version.
- The SRI hash matching the version.
- The changes introduced since the latest version shared with you.

By changing it, **you will benefit from**:

- Latest tag improvements and new features.
- Potential customizations.

## Compatibility 

Latest versions of any browsers **except Internet Explorer.**

---

# Testing your implementation

URL: https://docs.contentsquare.com/en/web/testing-your-implementation/

Make sure that data is sent correctly to our server with the following steps:
1. Download our Chrome Extension [Contentsquare Tracking Setup Assistant](https://chrome.google.com/webstore/detail/contentsquare-assistant/pfldcnnaiaiaogmpfdjjpdkpnigplfca).

    ![](~/assets/web/ctsa.png)

1. Browse your website and, looking at the extension, make sure that:
    - A pageview is sent on every page, or major UI change,
    - You are sending the desired custom vars,
    - If needed, a transaction is sent.

Otherwise, look at our [Troubleshooting section](/en/web/troubleshooting/#my-data-is-not-being-sent).

---

# Third-party integrations

URL: https://docs.contentsquare.com/en/web/third-party-integrations-and-implementation-examples/

## Google Analytics 360 connector
Read the [related documentation](https://support.contentsquare.com/hc/categories/360002508439).

## Adobe Analytics connector

Read the [related documentation](https://support.contentsquare.com/hc/categories/360002508439).

## A/B Testing solutions

You can send the variants from A/B Testing solution (ABTasty, Kameleoon, Monetate, Google Optimize, Dynamic Yield, Qubit, VWO, Optimizely, Usabilla, Maxymiser, Adobe Test and Target...)

Read the [related documentation](https://support.contentsquare.com/hc/categories/360002508439).

## Miscellaneous Implementation samples

## Adblock detection

If you want to detect if the user is using Adblock, you could send this information using a custom var. The following code is an example on how to do it:

```javascript
(function() {
  var test = document.createElement('div');
  test.innerHTML = '&nbsp;';
  test.className = 'adsbox';
  document.body.appendChild(test);
  window._uxa = window._uxa || [];
  if (test.offsetHeight === 0)
    window._uxa.push(['setCustomVariable', 1, 'isAdblock', true]);
  else
    window._uxa.push(['setCustomVariable', 1, 'isAdblock', false]);
  test.remove();
})();
```

## Get Contentsquare session context (for integrations)

### getSessionKey

The `getSessionKey` command allows for retrieving a unique Contentsquare session key. It's a string that encodes both 
a `userId` and a `sessionNumber`, in the form `<userId>.<sessionNumber>` (example: `"59e73d8b-2730u283i20-6712c43aaab3.3"`). You can also provide a callback function:

```javascript
function csCallback(sessionKey) {
  const [userId, sessionNumber] = sessionKey.split(".");
  // do something with the session key
}

window._uxa = window._uxa || [];
_uxa.push(["getSessionKey", csCallback]);
```

### afterPageView

The `afterPageView` command allows for executing a `callback` after the "natural" pageview or "artificial" pageview (`trackPageview` command).

**You don't need to wait for the Contentsquare tag to be fired to send this command.**

If the command is called after the natural pageview, the callback is executed immediately and then after each
`trackPageview`. You can register multiple callbacks by calling the command multiple times.

The `callback` is called with a `context` which contains:

- `projectId`
- `sessionKey`
- `pageNumber`
- `replayConsentRequired`
- `replayConsent`

`context.sessionKey` is a unique session identifier. It's a string that encodes both a `userId` and a `sessionNumber`, in the
form `<userId>.<sessionNumber>` (example: `"59e73d8b-2730u283i20-6712c43aaab3.3"`).

`userId` is a unique anonymous ID generated by Contentsquare.

`sessionNumber` is the position of the session in all the sessions tracked by Contentsquare for the same user (based
on cookie tracking). So if `sessionNumber` is 3, it means that it's the third session tracked for this user.

Here's an example which shows how to get the session context and use it in your callback:

```javascript
function csCallback(context) {
  const projectId = context.projectId;
  const [userId, sessionNumber] = context.sessionKey.split(".");
  const pageNumber = context.pageNumber;
  // do something with the session context
}

window._uxa = window._uxa || [];
_uxa.push(["afterPageView", csCallback]);
```

---

# Static assets scraping

URL: https://docs.contentsquare.com/en/web/static-assets-scraping/

In the context of Zoning and Session Replay, Contentsquare fetches static assets on your website.
To allow Contentsquare fetching these assets, select one of the following options:

- [Allowlist Contentsquare IP addresses](#allowing-ip-addresses)
- [Use a static header to validate requests](#using-a-custom-static-header)

## Allowing IP Addresses

Allow ports `80` (HTTP) and `443` (HTTPS) and the following IP addresses to prevent your proxy, firewall, or server configuration from blocking the scraper.

```
52.18.162.157
20.75.90.236
100.24.76.90
34.192.98.148
20.67.250.109
54.247.44.196
52.51.9.12
35.72.153.38
35.73.99.41
34.192.240.128
```

## Using a custom static header

When selecting this option, Contentsquare adds a custom header to the project settings.

```json {3}
{
  "headers": {
    "my-new-header-key": "myKeyValue"
  }
}
```

You can then validate that scraper requests contain the specific header and value.

``` javascript {4}
receivedHeaderExample = 'myKeyValue';

const CONTENTSQUARE_CUSTOM_HEADER = 'myKeyValue';
if (receivedHeaderExample === CONTENTSQUARE_CUSTOM_HEADER) {
  //
}
```

---

# Troubleshooting

URL: https://docs.contentsquare.com/en/web/troubleshooting/

## My data is not being sent
Using our the Chrome Extension [Contentsquare Tracking Setup Assistant](https://chrome.google.com/webstore/detail/contentsquare-assistant/pfldcnnaiaiaogmpfdjjpdkpnigplfca), use the checklist below.

![](~/assets/web/ctsa-troubleshoot.png)

- Is the **main tag loaded**? (Marker "1" above). If not:
    - Make sure the call is done by your Tag Management System or in your template.
    - Make sure that no Cross-origin Resource Sharing (CORS) rules is preventing the call to be made.
- Is the **tag active**? (Marker "2" above, the "Status" should be "active". — Otherwise, contact us)
- Is the **domain authorized**? (The current domain should be listed here, on marker "2" above — Otherwise, contact us.)
- Is the current **session tracked**? (Marker "3" — Otherwise, update this dropdown menu.)

## My CS metric is different from other Analytics tool

The current web analysis technology is dependent on different browsers, operating systems and screen resolution. These different components can affect the quality of the data of all analytical tools.

When you compare Contentsquare data with other analytical tools, you can see differences between major metrics.
There are several factors to consider depending on the tool and the indicators you are comparing.

*Other analysis definitions.* — The following measurement definitions have been extracted from the official Adobe Analytics and Google Analytics documentation.
For additional troubleshooting assistance, refer to the corresponding tabs.

### Sessions vs Visits metrics

#### Definitions

##### Contentsquare

The number of **unique visits** that happened within the selected analysis context.

A visit ends after 30 minutes of inactivity.

##### Google Analytics

**Total number of Sessions (not unique)** within the date range. 

A session is the period of time a user is actively engaged with your website, app, etc. 

All usage data (Screen Views, Events, Ecommerce, etc.) is associated with a session.

##### Adobe Analytics

A sequence of page views in a sitting. The visits metric is commonly used in reports that display the number of user sessions within the selected time period.

The visit metric is always associated with a time period, so you know whether to count a new visit if the same visitor returns to your site. A session starts when the user first arrives on your site, and ends under one of the following scenarios:
- 30 minutes of inactivity: Almost all sessions end in this manner. If more than 30 minutes have elapsed between image requests, a new visit begins.
- 12 hours of consistent activity: If a user fires images requests without a 30+ minute gap for 12 hours, a new visit automatically starts.
- 2500 hits: If a user generates a large number of hits without starting a new session, a new visit is counted after 2500 image requests.
- 100 hits in 100 seconds: If a visit consists of more than 100 hits that occur in fewer than 100 seconds, the visit automatically ends. This behavior typically indicates bot activity, and this limitation is enforced to prevent these processing-intensive visits from increasing latency and increasing the time it takes to generate reports.

:::note
The definition of a visit can be shortened for a report suite if specifically requested, but it cannot be lengthened. Have one of your organization's supported users contact Customer Care to request this change.
:::

**A visit does not necessarily coincide with a browser session.** 

#### Troubleshooting suggestions

A major discrepancy in the visits/sessions can be due to multiple factors:
- Different metric definition, as per the information shared above
- The **Tag firing method**, which might come in place too late, hence allowing the users to bounce before tracking their visit.
- The **trigger chosen** might not be the same used for your other analytics tool, hence creating a major difference.

### Bounce and Bounce rate metrics

#### Definitions

##### Contentsquare

The ratio between the visitors who entered the site and left it **without having seen a second page** and all visitors, **regardless of the amount of actions taken on that single page**.

##### Google Analytics

A bounce is a single-page session on your site.
Bounce rate is single-page sessions divided by all sessions, or the percentage of all sessions on your site in which **users viewed only a single page and triggered only a single request to the Analytics server**.
These single-page sessions have a session duration of 0 seconds since there are no subsequent hits after the first one that would let Analytics calculate the length of the session.

#### Adobe Analytics

**Bounces**

A visit that consists of a single server call. 

For example, a single page visit is a bounce if a visitor does not interact with the page in a way that sends data to Adobe, such as clicking a link or a video start. 

:::note
If more than a single hit is received in a visit, a Bounce is not counted.
:::

**Bounce Rate** 

Shows the percentage of visits that contain a single hit.

Bounce rate uses the Bounces metric and is calculated as: Bounces divided by Entries.

Bounce Rate does not include visits where multiple actions occurred on a single page.

:::note
Existing implementations can sometimes contain a calculated metric that differs from the Analytics default metric. Check the calculated metric definition to make sure there are no differences.
:::

#### Troubleshooting suggestion

When facing a major discrepancy with bounce and bounce rate, note that **the Contentsquare definition of bounce rate** takes into account visitors who viewed only a single page, regardless of the amount of events/actions they took.

### Pageviews metrics

#### Definitions

##### Contentsquare

Total number of pages viewed.

This takes into account all the artificial pageviews triggered by the **trackpageview** function.

##### Google Analytics

Pageviews is the total number of pages viewed. 

**Repeated views of a single page are counted.**

##### Adobe Analytics

A Page View is counted for each server call that is sent.

This metric represents total instances of Page View. 

**TrackLink calls are not counted** as page views and do not increment the Page Views metric.

#### Troubleshooting suggestions

A major discrepancy in the pageviews count can be due to multiple factors, such as:
- The **events** that you're currently tracking with your other analytics tool might not be accounted for as Pageview.
- If most of your site is running on a SPA framework, note that Contentsquare tracks each re-routing as a new pageview.

### Transactions vs Conversions metrics

#### Definitions

##### Contentsquare

The number of sessions during which visitors completed an Ecommerce transaction.

An E-commerce transaction is defined by firing the Contentsquare E-commerce tag.

##### Google Analytics

Transactions is the total number of completed purchases on your site.

##### Adobe Analytics

**Conversions**

:::note
The conversion and conversion rate are defined as custom reports, hence the configuration comparison is key when checking for data inaccuracy.
:::

Custom Conversion reports are based on eVars (conversion variables). Conversion variables can persist beyond the page view and be associated with metrics within its specified expiration. The reports' default metrics are revenue. 

All standard eCommerce metrics can be used: Revenue, Orders, Units, Carts, Cart Views, Checkouts, Cart Additions, Cart Removals.

For further reference: https://experienceleague.adobe.com/docs/analytics/technotes/ga-to-aa/reports/conversions-reports.html?lang=en

**Orders**

The number of orders made on your website during the selected time period.

#### Troubleshooting suggestions

When facing major discrepancies with the transactions count, if you have **different confirmation pages**, make sure to fire our ecommerce tag on all of them.

### Conversion rate

#### Definitions

##### Contentsquare

The number of sessions with Ecommerce transactions divided by the total number of sessions throughout the selected period.

##### Google Analytics

The percentage of sessions that resulted in an e-commerce transaction.

##### Adobe Analytics

See the conversions point above.

#### Troubleshooting suggestions

When comparing conversion rate between different tools, do note that the Contentsquare **conversion rate** is based on the ratio between **the number of visits with a transaction and the total number of visits**.

This definition might differ depending on the other analytics tool you're using. 

### Revenue metrics

#### Definitions

##### Contentsquare

Total purchase amount of all sessions.

##### Google Analytics

The total revenue from web ecommerce or in-app transactions.

Depending on your implementation, this can include tax and shipping.

##### Adobe Analytics

Revenue is captured on the purchase event, and is defined as the total dollar amount for the sum of the order for each product. 

This value comes from the purchase event.

#### Troubleshooting suggestions

A major discrepancy in the revenue can be due to multiple factors:

- Contentsquare only takes into account the amount set as 'revenue' in the e-commerce tag when calculating **the total revenue displayed**
- If you need to **exclude shipping and taxes** from the total revenue, you would need to do so before sending the transaction.
- If you have a returns policy, do note that Contentsquare does not currently support **negative values** in the transactions, so this won't be tracked.

---

# Voice of Customer

URL: https://docs.contentsquare.com/en/web/voice-of-customer/

As of Fall 2024, Contentsquare users can take advantage of Voice of Customer capabilities.  
Voice of Customer gives context to quantitative data and helps you understand what users are thinking. The Voice of Customer module enables you to create surveys to capture user feedback using a variety of question types and customization options.  

For more information on Voice of Customer, see this article [Help Center](https://contentsquare.com/platform/voice-of-customer/).

For more information about how Voice of Customer combines with Experience Analytics, refer to our [plans and pricing](https://contentsquare.com/pricing/).

## Requirements and impacts on the Tag

### CSP

To use Voice of Customer, make sure your [CSP configuration](/en/web/content-security-policy/) includes:

```
script-src 'unsafe-inline' *.contentsquare.net
```

### Dedicated script

The Tag will inject a `hotjar-{SITE_ID}.js` script which loads the survey widgets.  

:::note[Impacts on SRI]
If you are using [SRI](/en/web/sri/), reach out to your Contentsquare contact for more information.
:::

### Cookies

The Tag will create [additional cookies](/en/web/cookies/#voice-of-customer-cookies), prefixed with `_hj`.

---

# Who is included in the analysis?

URL: https://docs.contentsquare.com/en/web/who-is-included-in-the-analysis/

![](~/assets/web/datacollect.png)
## (1) Tag call conditions

The tag installation is completely on your end: you can install it either by "hard coding" or by using a Tag Management System (TMS).

- Make sure to call the Tag in **every page**.
- Call it **as soon as possible**; It only takes a few seconds to lose a user.

## (2) Pageviews and transactions sending conditions

As soon as the tag is called, the pageview (or transaction) are sent if all conditions below are fulfilled:

- The **tag configuration** display it as "active". In order to check the setting, the variable `CS_CONF.status` must be 1.
- The **current domain** is the one that has been configured for the tag called. To check the setting, the current domain must be mentioned in the variable `CS_CONF.hostnames`. If you navigate through a sub domain, check if the variable `CS_CONF.allowSubdomains` is equal to 1.
- The visitor has allowed cookies and JavaScript; is using a [supported browser](/en/web/compatibility/). **95% of all users** matches these conditions.
- The visitor is not excluded from the analysis by the presence of the **`cs_ex` cookie**. (See below)
- When the "Cross-domain" feature is activated, matching DNS must be installed.

### The `_cs_ex` cookie

The [`_cs_ex`](/en/web/cookies/#_cs_ex) cookie appears in **2 cases**:

- If the tag does not collect 100% of visits, people who were not drawn will be excluded by the cookie. The Session Replay percentage is included in the `CS_CONF.sampleRate` variable.
- If Contentsquare A/B testing tool's "Preview" mode is used, this cookie is automatically used.

To **force exclusion**, you must add a `_cs_ex` cookie with the value `1`.

## (3) Accounting conditions of pageviews and transactions

The pageview (or transaction) received is stored in our database with the following conditions:

- The visitor does not have an **`optout` cookie**.

- The user's IP address is not in our exclusion list for this Contentsquare account (for more info on IP Addresses [see dedicated section](/en/web/ip-addresses/)).

- We did not identified the user **as a bot** (the assumption can come from the IP address used, the browser, the behavior...). This can be applied to 2% of the visitors but sometimes more.

## Differences between analytics

Differences between two analytics can be due to implementation or data issues.

### Implementation differences

- The Tag may **not be called** on the same pages (example: omitted subdomain, 404 page missed).

- The Tag is called **later or earlier** (each second may increase the gap by about 3 points).

### Differences in scopes

- **Bot exclusion rules** differ between tools or they are not shared.

- **Calculation methods** for session, time spent, and bounce rate are different between tools. [More information on the Help Center](https://support.contentsquare.com/hc/en-gb/articles/360011787554).

- The **time zone** impacts daily displayed data (Contentsquare data are saved in UTC).

- **[Compatible browsers](/en/web/compatibility/)** may be different from one tool to another.

---

# Wrapping it up

URL: https://docs.contentsquare.com/en/web/wrapping-it-up/

## Data is collected
Once all the tags above have been implemented, the site will be fully passing data to Contentsquare and ready for analysis.

You will see the collected data on the solution **3 hours after it has been received**.

## Going further

Refer to the "Guides" section of the documentation.

If you need further help following the implementation, reach out to your Customer Success Manager.  
You can also check our [post-implementation maintenance handbook](https://support.contentsquare.com/hc/en-gb/articles/9436639900316)

## Connecting with Third Parties

You can connect the Contentsquare solution to **3rd party analytics tools** and **AB testing platforms**. 

- ABTasty
- Adobe Analytics
- Adobe Test and Target
- Google Analytics 360
- Google Optimize
- Dynamic Yield
- Kameleoon
- Maxymiser
- Monetate
- Optimizely
- Qubit
- Usabilla
- VWO

[Read the dedicated documentation...](https://support.contentsquare.com/hc/categories/360002508439)

---

# Changelog

URL: https://docs.contentsquare.com/en/android/4-37-0/changelog/

import { EmailForm } from '~/components'
<EmailForm/>
## Unified SDK
### 0.6.0 - 2025.04.03
- Update Contentsquare SDK version to `4.37.0`.
- Update Product Analytics Core SDK version to `0.8.0`.
- Update Product Analytics Autocapture SDK version to `0.8.0`.

| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.6.0               | [4.37.0](/en/android/changelog/#4370---20250402)     | [Core 0.8.0](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |


### 0.5.1 - 2025.03.13
- Update Contentsquare SDK version to `4.36.1`.
- Update Product Analytics Core SDK version to `0.7.6`.
- Update Product Analytics Autocapture SDK version to `0.7.7`.

| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.5.1               | [4.36.1](/en/android/changelog/#4361---20250313)     | [Core 0.7.6](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.7](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.7](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |


### 0.5.0 - 2025.02.13
- Update Contentsquare SDK version to `4.36.0`.
- Update Product Analytics Core SDK version to `0.7.6`.
- Update Product Analytics Autocapture SDK version to `0.7.5`.

| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.5.0               | [4.36.0](/en/android/changelog/#4360---20250210)     | [Core 0.7.6](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.5](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.5](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |

### 0.4.0 - 2025.01.7
- Update Contentsquare SDK version to `4.35.0`.
- Update Product Analytics Core SDK version to `0.7.5`.
- Update Product Analytics Autocapture SDK version to `0.7.3`.

| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.4.0               | [4.35.0](/en/android/changelog/#4350---20250102)     | [Core 0.7.5](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.3](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.3](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |

### 0.3.0 - 2024.10.25
- Update Contentsquare SDK version to `4.34.0`.

| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.3.0               | [4.34.0](/en/android/changelog/#4340---20241025)  | [Core 0.7.2](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.1](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.1](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |

### 0.2.0 - 2024.10.18
- Update Contentsquare SDK version to `4.33.0`.
- Update Product Analytics Core SDK version to `0.7.2`.
- Update Product Analytics Autocapture SDK version to `0.7.1`.

| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.2.0               | [4.33.2](/en/android/changelog/#4332---20241018)  | [Core 0.7.2](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.1](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.1](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |

### 0.1.1 - 2024.09.10
- Update Contentsquare SDK version to `4.32.1`.
- Update Product Analytics Core SDK version to `0.7.1`.
- Update Product Analytics Autocapture SDK version to `0.7.0`.

| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.1.1               | [4.32.1](/en/android/changelog/#4321---20240910) | [Core 0.7.1](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |

### 0.1.0 - 2024.09.02
- This release marks the introduction of the Unified SDK which brings together Product Analytics, Experience Analytics, and Monitoring features. From this version onwards, the SDK releases follow a new versioning scheme.
For more information on the underlying SDKs versions, see [the version mapping table](/en/android/unified-sdk/).

| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.1.0               | [4.32.0](/en/android/changelog/#4320---20240902) | [Core 0.7.1](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |

## Contentsquare SDK
### 4.37.0 - 2025.04.02
**Analytics**
  - Public API methods returning values will return default value during SDK initialization. You can use `Contentsquare.wasInitialized()` to be sure that the SDK is initialized, impacted methods:
    - `Contentsquare.getUserId()`
    - `Contentsquare.getProjectId()`
    - `Contentsquare.getSessionNumber()`

**Session Replay**
- **Bug fix:** Improve animation detection logic.

**WebViews**
- **Bug fix:** Fixed a crash in React Native where Android Webview API could return null, before Android API 29.

**Core**
- **Bug fix:** Resolved `java.lang.VerifyError` crash that occurred in debug mode when customer app had `EnableAndroidTestCoverage = true`, caused by JaCoCo instrumentation in an internal SDK class.

### 4.36.3 - 2025.03.26
**Core**
- **Bug fix:** Fixed an issue where webviews could malfunction if no parent activity was present.

### 4.36.2 - 2025.03.21
**Core**
- **Bug fix:** Resolved a bug that cause `optIn`/`optOut` being ignored if the SDK was not yet started.

### 4.36.1 - 2025.03.13
**Core**
- **Bug fix:** Resolved `java.lang.VerifyError` crash caused by JaCoCo plugin in an internal SDK class.
- **Bug fix:** Resolved a bug where a network callback is registered too many times and pass the limit of 100 callbacks while using `CsWebViewClient` API.


**Session Replay**
- **Bug fix:** Resolved a bug where API changed in Android 15 crash with `java.lang.NoSuchMethodError` from `java.util.List`.


### 4.36.0 - 2025.02.10
**Analytics**
- Add `Contentsquare.doNotTrack(View)` API
- Added support for empty, transparent overlays in Jetpack Compose, both for the snapshot and the events
- **Bug fix:** Exposure Metrics scroll value was incorrect for RecyclerViews

**Error Analysis**
- API Errors Improvement - avoid encrypting empty data

**Session Replay**
- [Full masking configuration by App/SDK version in the CSQ Console](/en/android/session-replay/#remote-masking-configuration-in-the-csq-console)

**Core**
- Support network connection type 5G
- **Bug fix:** Resolved `java.util.ConcurrentModificationException` crash in an internal SDK class.

### 4.35.0 - 2025.01.02
**Error Analysis**
- Update Error Analysis Crash Plugin to 1.7.0 to improve compatibility with Gradle Configuration Cache
- Update Error Analysis Network Plugin to 1.6.0 to improve compatibility with competitors and with Gradle Configuration Cache

**Analytics**
- Long Snapshot: Added support for `LazyVerticalGrid`
- Session number will be incremented when app or SDK version number changed
- **Bug fix:** Long Snapshot, fixed crash with empty `LazyColumn` items
- **Bug fix:** Only configuration calls will be queued before the initialization of the SDK is started, for example SR masking, exclusion of Activities from tracking, exclusion from Exposure Metrics
- **Bug fix:** Clickable Compose elements will be preferred during gesture detection
- **Bug fix:** URL of the End of Screen Event was incorrect
- **Bug fix:** Stored events on disk will be sent with correct user ID after user expired

**Session Replay**
- To prevent Personal Data leaks, masked views are systematically blurred without considering their vertical position in the view hierarchy or any transparent view covering them.
- `resumeTracking` now waits for the next screenview before resuming Session Replay
- Session Replay is stopped when [ComponentCallbacks.onLowMemory](https://developer.android.com/reference/android/content/ComponentCallbacks#onLowMemory()) or [ComponentCallbacks2.onTrimMemory](https://developer.android.com/reference/android/content/ComponentCallbacks2#onTrimMemory(int)) happens

**Core**
- **Bug fix:** Fix `UnknownFormatConversionException` crash occurring in the internal `logger`

### 4.34.1 - 2024.12.13
**Analytics**
- **Bug fix:** Fix `NullPointerException` while accessing a `WeakReference`.

### 4.34.0 - 2024.10.25

**Analytics**
- Fixed unstable event URLs for Compose screens
- Handle obfuscated `View` classes in Target View Paths
- Exclusion of scrollable views from Exposure Metrics
- Prevent opening of CS In-App features if the SDK is not started
- Improved synchronisation between Analytics and Session Replay

### 4.33.2 - 2024.10.18
**Core**
- **Bug fix:** Fix an issue where SDK tracking would incorrectly re-enable after calling the stop tracking API when the app resumed from the background.

**Session Replay**
- **Bug fix:** Fixed missing views when Animation detection is used with Compose Material 3 library - Beta

### 4.33.1 - 2024.10.07
**Core**
- **Bug fix:** Update WebViewClient usage for WebViewBridge

### 4.33.0 - 2024.10.02
**Core**
- **Bug fix:** In-app button now shown when SDK started manually from an Activity
- **Bug fix:** Incorrect display of crashes in Log Viz
- Add new API to read the current Project ID
- Add new API to read the current session number

**Analytics**
- Long Snapshot: Add support for huge number of items for lazy Compose lists

### 4.32.1 - 2024.09.10
**Core**
- **Bug fix:** `minVersion` check for feature flags.

### 4.32.0 - 2024.09.02
**Core**
- Reduced library dependencies: com.google.android.material
- **Bug fix:** Fixed crash in Telemetry

**Analytics**
- Long Snapshot: Added support for list items bigger than the screen
- Compose: New API for excluding composables from gesture detection
- **Bug fix:** Fixed TriggeredOnResume was called too often

**Session Replay**
- Animation detection to prevent Personal Data leaks - Beta
- Session Replay can now be blocked for certain application versions based on a pattern or range.

**Error Analysis**
- Collect Telemetry performance metrics for API v2
- **Bug fix:** Fixed duplicate API Error logs

**WebViews**
- Now automatically injecting the global variable `window.CS_isWebView` in your pages, in order to help you detect if they are loaded from a WebView or not. For more details, check the [WebView Detection documentation](/en/android/track-webviews/#inject-a-variable-to-detect-when-you-load-your-page-from-a-webview)

### 4.31.0 - 2024.08.02
**Analytics**
- Long Snapshot feature is now in General Availability for Android Views screens
- **Bug fix:** Fix two long snapshot display issues when using a RecyclerView
- **Bug fix:** Fix memory leak

**Error Analysis**
- OkHttpInterceptor can now be used with API Error v2
- API Error v2: Increase body attribute size limit from 50 to 100 characters

**Session Replay**
- Support of dynamic masking for Flutter in CS in-app
- Support of dynamic masking for WebViews in CS in-app

**WebViews**
- Added Automatic Tag Injection to track locally hosted pages. For more details, check the [Automatic Tag Injection documentation](/en/android/4-31-0/track-webviews/#automatic-tag-injection)

### 4.30.0 - 2024.07.01
**Analytics**
- Long Snapshot is applied to the last scrollable view receiving user interaction
- **Bug fix:** Fix a bug where screen names with special characters would cause a crash of the SDK
- **Bug fix:** Long snapshot now captures correctly RecyclerView items
- **Bug fix:** Fix erroneous Zoning for screens with mixed Compose views and Android views

### 4.29.1 - 2024.06.11
**Error Analysis**
- **Bug fix:** API Error reporting can now work with event streams

### 4.29.0 - 2024.05.29
**Analytics**
- Long snapshot properly captures webviews on Compose screens
- Long snapshot capture can be paused on Compose screens
- Fix erroneous userID after calling optOut/optIn

**Error Analysis**
- Update Error Analysis Crash Plugin to 1.5.0 to support mapping file auto upload

### 4.28.0 - 2024.04.19
**Core**
- API calls made before SDK initialization will be queued until SDK start

**Analytics**
- Implement capture Snapshot / Long Snapshot on Compose screens
- Code refactor to improve robustness & quality
- Fix an issue in Zoning where some elements cannot be zones
- Fix incorrect screen names in Log Viz

**Session Replay**
- Improve Session Replay link API on logs

**Error Analysis**
- Update API Error data collection
- Increase response body size limit to 5kb

### 4.27.1 - 2024.03.29
**Analytics**
- Fix an issue in Zoning that could impact some screens built with Compose

### 4.27.0 - 2024.03.27
**Session Replay**
- Display gesture events in Session Replay event stream
- Fixed a StackOverflowError crash caused by a concurrency issue

**Analytics**
- Improve the Long Snapshot capture, adding the support of more UI components

### 4.26.0 - 2024.02.20
**Session Replay**
- Add new callback API for updates on replay link
- Deprecate existing API to get replay link

**Analytics**
- Downgraded dependencies, so that consumers of the `library` artifact can stick with `compileSdk` 33 (`compose` requires `compileSdk` 34)
- Compose beta: Added support for Jetpack Compose 1.6.0
- Fixed a crash for WebViews when `optIn` or `optOut` was not called from main thread

### 4.25.0 - 2024.01.29
**Session Replay**
- Change Session Replay start behavior (starting processor only once after first screen view event)
- Fixed a crash on Protobuf messages serialization

**Analytics**
- Fixed performance issue caused by SDK initialization on app start-up
- Add capability to Zoning when capturing Long Snapshot of vertically scrollable Compose content
- Re-enable regular snapshot for Compose
- Fixed a crash: Port out of range

**Error Analysis**
- Remove Error Analysis Maven artifact; It's now embedded in the Main Android SDK artifact
- Remove Apache HTTP Client support
:::warning
Starting from version 4.25.0, there is no Error Analysis maven artifact; It's now embedded in the Main SDK.
More info on [Error Analysis migration](/en/android/error-analysis/#migrating-from-versions-4241-and-older-of-error-analysis)
:::

### 4.24.1 - 2024.01.16
**Session Replay**
- Fixed an out-of-sync issue with Flutter, occurring in the first screen view and resulting in a blank screen.
- Introduction of Flutter notification for CSInApp states

### 4.24.0 - 2023.12.15
**Analytics**
- Exposure metrics feature is now part of the SDK (Beta phase). It will help you measure engagement directly in zoning by showing which zones are attracting clicks, or on the contrary being ignored.
- Fixed a crash when calling `Contentsquare.sendUserIdentifier()`
- Fixed a crash when app is put in background
- Internal package reorganization

**Session Replay**
- Fixed an issue where images might be stretched in the replay
- Fixed a delay that might happen when screen change
- Code refactor to improve robustness & quality

**Error Analysis**
- Internal package reorganization
- Added a log when API Error collection is enabled through Error Analysis module

### 4.23.1 - 2023.11.24
**Session Replay**
- Fixed a bug on Composable masking where `sessionReplayMask()` was not propagated to child nodes

**Error Analysis Android SDK**
- Fix a crash due to instrumented bytecode

### 4.23.0 - 2023.11.20
**Analytics**
- Support Jetpack Compose for Zoning - beta
- Local + Auth Assets Support
**Session Replay**
- WebView support. See [Session Replay WebView documentation](/en/android/session-replay/#webview)
- Fix an issue on individual masking for Jetpack Compose, when Compose screen contains embedded Android views
**Misc**
- Fixed performance issue caused by SDK initialization on app start-up

### 4.22.0 - 2023.10.18
**Analytics**
- Long Snapshot - beta

**Error Analysis Android SDK**
- WebView errors: Collect JS, API & Custom errors occurring in WebViews. More info on [WebView errors](/en/webview-tracking-web-tag/error-analysis/)

**Track WebView**
- Introducing new WebView tracking relying on [Web Tracking Tag](/en/webview-tracking-web-tag/).

### 4.21.0 - 2023.08.29
**Analytics**
- Support of custom variables

### 4.20.0 - 2023.07.13
**Session Replay**
- Support Jetpack Compose technology

**Error Analysis**
- Handle error source for cross-platform compatibility

### 4.19.0 - 2023.06.14
**Session Replay**
- Fixed an issue where the set default masking API is not working when the API is called before SDK initialization.
- Add a new API 'sendUserIdentifier' to search a replay based on a personal user identifier [See the Session Replay Send user identifier section](/en/android/session-replay/#send-user-identifier).

**Error Analysis**
- Fixed an issue where crash controller remove existing crash handler when start and stop lifecycle are out of order.
- Fixed a bug where send network error event is called twice.

**Misc**
- Improved SDK initialization lifecycle logic.
- Added a feature flag for user identifier collection.

### 4.18.2 - 2023.05.30
**Error Analysis**
- Fixed a bug that was preventing the Error Analysis module from starting.
- Fixed a potential crash in using instrumented HttpURLConnection for API Error collection.

### 4.18.1 - 2023.05.16
**Bug fix**
  - Fix a bug where the Contentsquare SDK would cause a crash on Dual-SIM devices using Android API 33.

### 4.18.0 - 2023.05.10
**Error Analysis**
- Extended crash report to include stack traces and system threads.
- Improved stability in API Error Handling.

### 4.17.0 - 2023.04.07
**Error Analysis**
- Collect basic crashes and send them to both Session Replay and Analytics
- API Error details are gzipped and subject to a maximum size
- Deprecated internal trace extension function, in favor of new public version

### 4.16.0 - 2023.03.06

:::warning
Session Replay Technical Limitation: views with an alpha channel will be displayed as white rectangles in the replay. This issue will be fixed in the next SDK version.
:::

**Session Replay**
- Improved masking logic, the transparent view will be masked by default.
- Improved Session Replay data batch generation.
- Fixed screen number discrepancy issue between Session Replay and Analytics event.
- Fixed an issue where the set default masking API is not working properly.
- Fixed a bug where sometimes Session Replay continues to collect with 0% collection rate.

**Error Analysis**
- Collect API error details.
- Add a log to warn if an event has been captured before 1st screen view.
- Change error-analysis implementation for library to API.
- Add a public method to mask API error by template URL.
- Rename public API `CsErrorAnalysis` to `ErrorAnalysis`.
- Update Error Analysis network plugin 1.1.0.

:::warning
Error Analysis Android SDK 4.16.0 is incompatible with Error Analysis plugin 1.0.0 and lower version.
:::

### 4.15.0 - 2022.12.20
**Session Replay** New events added when the application enters background or foreground modes

**Error Analysis**
- Collect failed network requests

**Misc**
- Remove the need for manually editing your config file with ProGuard/R8 rules

### 4.14.0 - 2022.11.03
**Log Visualizer**
- Log Visualizer is enabled by default with in-app features

**Session Replay**
- Added the Start event
- Catch hardware bitmap crash and display error message
- Fixed bug when using static snapshot with 0 width/height SurfaceView
- Fixed bug with Dynamic Variable with wrong App versions

**Misc**
- Display public log when request has failed
- Client logs for WebViews

### 4.13.1 - 2022.09.19
**Bug fix**
- Fixed an issue introduced in 4.13.0 where Contentsquare SDK makes the app crash when the automatic SDK initialization is disabled

### 4.13.0 - 2022.09.19

:::warning
This version has a bug where Contentsquare SDK makes the app crash when the automatic SDK initialization is disabled. Use version 4.13.1 or later.
:::

**Analytics**
- Display screen name on the "snapshot in progress/success/fail" screens

**Dynamic Variables**
- Key length increased from 50 to 512 chars

**Session Replay**
- Display information if the quality used have changed (Network switch, configuration changed...)
- Fixed an issue where the SDK starts if the app is auto-started in background after a reboot
- Fixed an issue where after opted out and opted in again, we have a log with an `UNKNOWN` user id
- Fixed a crash after opted out and opted in again
- Fixed a crash after opted in without activity

### 4.12.0 - 2022.08.10
**Session Replay**
- Fixed an issue where the Session Replay feature is not working properly when using stop and resume tracking API.
- Added a mechanism to flush the replay data of the current session when the app is put in the background.

**In-app features**
- Fixed a bug where in-app settings screen and button disappears after enabling share replay link.

**SDK Log Visualizer**
- Removed the need of the Log Visualizer enabled feature flag from SDK configuration.

**Bug fix**
- Fixed an issue where gesture tracking is not working correctly after opt-out and opt-in.
- Fixed an issue where screen view is lost if executed immediately after opt-in.
- Fixed a crash issue related to SharedPreferences concurrent modification.

**Misc**
- Minor internal code improvement leading to SDK size decreased and fewer methods count.

### 4.11.0 - 2022.07.07

- **Dagger:** Dagger dependency has been removed from the SDK.
- **Included in tracking:** When the in-app features are enabled, the device is now always included in tracking.
**Session Replay**
  - Fixed an issue where Session Replay would not start after an app restart.
  - Improved the quality adjustment mechanism triggered by impact on the main thread: Session Replay can stop completely now. Quality level will now get back to its initial value once there is no more impact detected.
  - Decrease in data consumption thanks to image identification algorithm improvement (less duplicates).
- **Snapshot:** Display error message when capturing snapshot before screenview.
- **Bug fix**: Fixed an issue where CS in-app features menu caused a crash while using the opt-out and opt-in operations
- **Misc:** Minor improvements and bug fixes.

### 4.10.0 - 2022.06.03

- **Contentsquare visual identity:** Updated Contentsquare logo and snapshot button to match the new visual identity.
**Session Replay** Fixed a bug for which some views captured were not rendered while replaying a user session.
- **WebViews tracking:** Update of the WebViews injection mechanism to support new events sent by the WebView Tracking Tag (Dynamic variable, Transaction, Opt-in, Opt-out) [See the WebView Tracking Tag documentation](/en/webview-tracking-web-tag/).
- **Misc:** Minor improvements and bug fixes.

### 4.9.0 - 2022.04.15

**Session Replay** Add feature to select different quality levels for Wi-Fi and Cellular [See the Session Replay Quality Levels section](/en/android/session-replay/#quality-levels)
**Session Replay** Fixed a bug on unMask API; fixed rendering bugs;
- **In-app features:** Fixed a bug where snapshot button does not disappear when app is put in background.
- **Misc:** Minor improvements and bug fixes.

### 4.8.0 - 2022.03.18

**Session Replay** Added logs when starting and stopping;
- **Snapshots:** Multiple bug fixes on snapshot button and capture.
- **Misc:** Minor improvements and bug fixes.

### 4.7.0 - 2022.01.14

**Session Replay** Optimization of quality and data consumption.
- **Remove Jetifier:** Agera dependency has been removed, which was using Android Support Library. Jetifier is not required anymore.
- **Misc:** Minor improvements and bug fixes.

### 4.6.0 - 2021.12.15

**Session Replay** new Replay link API to integrate with third-party tools (VoC, crash reporting); Session Replay can be accessed directly within minutes with direct link; replay link button added to in-app features settings; hardware bitmaps are now supported; data consumption optimization; fixed regression on masking API.
- **Misc:** Minor improvements and bug fixes.

### 4.5.0 - 2021.11.18

**Session Replay** Misc improvements.
- **SDK Log Visualizer:** This new module lets you see the live stream of events detected by our SDK (logs) directly in Contentsquare. Check out the [Viewing logs in the Contentsquare platform section](/en/android/in-app-features/#viewing-logs-in-the-contentsquare-platform).
- **Misc:** Minor improvements and bug fixes.

### 4.4.0 - 2021.10.18

- **Drop support for Android Jelly Bean (API Levels 16, 17 and 18):** As Google Play services is discontinuing updates for Jelly Bean (API levels 16, 17 and 18), the minimum supported version is now **Android 4.4 KitKat (API level 19)**.
**Session Replay** WebViews masked by default; performance and quality optimizations;
- **Disable Session Replay for specific app versions:** Introducing capability to disable Session Replay for specific app versions (controlled from back office).
- **Logs:** Reduced noise to keep only relevant logs. You can just filter on `CSLIB`
- **Permission:** Removed overlay permission request for Android &lt;=5.1
- **Misc:** Minor improvements and bug fixes.

### 4.3.0 - 2021.08.10

- **Disable auto-start:** Option to start the SDK in a manual method instead of starting automatically. Check out the [Disabling Automatic SDK Initialization section](/en/android/disable-autostart/)

### 4.2.1 - 2021.07.07

- Fixed an issue introduced in 4.2.0 that affected gestures tracking on the first activity after app start

### 4.2.0 - 2021.06.14

**Session Replay** Session Replay feature is now part of the SDK and disabled by default. This feature is only accessible to customers participating in the Early Access program. For more information reach out to your Contentsquare contact.
- **Gestures:** Fixed issue that caused gestures to be attached to the wrong view in some cases.
- **Misc:** Minor improvements and bug fixes.

### 4.1.0 - 2021.02.16

- **WebView:** WebView tracking back-office setting has been removed. WebView tracking is now always enabled.
- **SDK start:** At SDK start, a unique config file per package name is fetched on our server:
  - Fixed an issue that prevented to display a log informing when no config file is created for the package name
  - Changed the config retrieval logic to respect package name case-sensitivity (we used to lower case package name)
- **Dagger dependency**: Updated from 2.25 to 2.31.2
- **Misc:** Minor improvements and bug fixes.

### 4.0.0 - 2020.10.29

- **In-app features activation:** A simpler and unified way to enable features living inside the SDK (Snapshot Capture and Logs) along with its tracking capabilities. [Enable in-app features section](/en/android/in-app-features/#enable-in-app-features)
- **Snapshot**: Introducing static snapshot to workaround edge cases where snapshots are not rendered properly. See Static snapshot section](/en/android/in-app-features/#snapshot-capture)
- **Webview:** Minor improvement to enable webview zoning analysis

**Upgrading from a previous version**: Update the dependency to point to `com.contentsquare.android:library:4.0.0` and make sure to remove the code snippet from your AndroidManifest.xml that was used to enable snapshot mode.

### 3.2.0 - 2020.07.30

- **Drop support for Android 4.0.3 (API Level 15).** Minimum supported version is now Android 4.1 (API level 16).
- **Snapshots:** Improved support for screen with SwipeRefreshLayout
- **Dynamic Variables:** Key and value are now trimmed when maximum length is exceeded. If key or value are empty, the SDK now sends the literal string "cs-empty" instead.
- **Transaction currency:** Lower and Uppercase are both supported.
- **Session:** Fixed a bug preventing a session to be closed when app was killed. This led to following session to be discarded.
- Minor improvements and bug fixes.

### 3.1.0 - 2020.04.15

- **New logs:** This version brings completely redesigned logs for better understanding of the SDK behavior. See dedicated section [Debugging and logging](/en/android/in-app-features/#debugging-and-logging).
- Enable Logging via ADB SHELL on all Android versions
- Minor improvement related to screenview tracking on React Native apps
- Minor improvements and bug fixes

### 3.0.0 - 2020.03.20

- **Breaking change:** the main class `ContentSquare` is renamed `Contentsquare` (lower-case `s`).
- **Snapshot mode**: Now you can display the **Snapshot Activation Dialog** using a deep link.
- **Track Transactions - Currency:** We now provide the ability to pass the currency as an "alphanumeric code" (example: "USD") on top of the "numeric code" (example: "840"). See the dedicated section [Track transactions](/en/android/track-transactions/).
- Fixed an issue where SDK version was not properly set
- Minor improvements and bug fixes

### 2.3.1 - 2020.03.03

- Gesture tracking: Fix an issue with Android Toolbar

### 2.3.0 - 2020.01.27

- Enable Logging via ADB SHELL (Logging support for Android 10)
- App hide event is now triggered 700ms after the application is put in background (before it was 5 seconds)
- Snapshot improvements for webViews
- Add validation for dynamic variables key and value length
- Remove the rule that prevents to have 2 consecutive screenview events with the same screen name
- Renamed the Pause tracking API to Stop tracking API
- Minor improvements and bug fixes

### 2.2.1 - 2019.11.19

- Fixing theme issue conflict on Snapshot Mode

### 2.2 - 2019.10.02

**/!\ _This version is the first one not supporting Android Support (AndroidX only). If you are still using Android Support, use version 2.1.3._**

- **Dynamic Variables:** Send custom data to Contentsquare for session segmentation. [Dynamic Variables API](/en/android/track-dynamic-variables/)
- **Snapshot mode launched at App start:** No need to shake the device to trigger Snapshot Mode dialog. Benefits: works on a simulator and avoids conflict with features based on shake detection.
- **RecyclingViews tracking:** We improve the gestures tracking accuracy for those elements.
- Minor improvements and bug fixes

### 2.1.3 - 2019.09.30

**/!\ _This version is the last version supporting Android Support. Upcoming versions will only support AndroidX._**

- **Track screens**: Implement the new [Track Screen API](/en/android/track-screens/) to accurately track `screen_view` events for all your app screens.
- **User Consent required by default**: The default privacy setting for every new app will be set to opted-out by default. This means every new user will be opted-out until the [Opt-in API](/en/android/privacy/#opt-in) will be called. [See dedicated documentation section](/en/android/privacy/).
- Workaround on an issue caused by the New Relic SDK
- Snapshots improvements
- Minor improvements and bug fixes

### Versions 2.1.0 to 2.1.2 were pre-released only

### 2.0.1 - 2019.07.04

- **AndroidX support**: SDK is now published in 2 versions, the main one supporting AndroidX and the other supporting the Original Android Support.
- **Snapshot mode**
- **WebView tracking**
- Minor improvements and bug fixes

### 1.6.3 - 2019.03.07

- Minor improvements and bug fixes

### 1.6.2 - 2019.02.28

- Minor improvements and bug fixes

### 1.6.1 - 2019.02.18

- Minor improvements and bug fixes

### 1.6 - 2018.11.09

- Add screen URL customization.
- Change the transaction API packages: **If you were already using this feature, update the import in your code**.
  - Changed Transaction class path from `com.contentsquare.android.internal.api.Transaction` to the `com.contentsquare.android.api.Transaction`
  - Change the Currencies class path from `com.contentsquare.android.internal.api.Currencies` to the `com.contentsquare.android.api.Currencies`
- Minor improvements

### 1.5.1 - 2018.10.18

- Minor bug fix

### 1.5 - 2018.10.15

- **Add Flush event requests on app hide**
- **Change OS version tracking**: now collecting OS version *8.0* instead of Android API Level
- **Change Device info tracking**: now collecting `Device manufacturer` and `Device Model` in 2 distinct fields (`dma`et `dmo`)
- Improve around gesture tracking on unresponsive views
- Minor improvements and bug fixes

### 1.4 - 2018.07.26

- **Add Send transactions**: Transactions events can now be sent using the dedicated public API. [See dedicated documentation section](/en/android/track-transactions/)
- Add screen density tracking: stored in the request meta data. Its values can vary between (0.75 and 10).
- Improvements and bug fixes

### 1.3.1 - 2018.05.30

- Minor improvements and bug fixes

### 1.3 - 2018.05.29

- **Add Privacy Handling Public API**: SDK is now GDPR compliant and offers public APIs handling privacy.
- Improvements and bug fixes

---

# Collected data points

URL: https://docs.contentsquare.com/en/android/4-37-0/collected-data-points/

- The events are in JSON format, which lists the properties and their description in comment.
- Events are sent to the server in batches.
- A batch is a subset of events originating from one session. A session can send events in more than one batch.
- The batch size is defined in a run configuration file specific to each app (50 events by default).
## Requests meta data

Each batch has a common header, a set of device specific, and repeatable information and an array of events, which is immutable.
The header is composed at the moment of sending, so it has to be constant info ONLY. The array in the payload is data stored at the moment of collection.

The structure of the batches of events will have the following format:

```javascript
{
  pid:8, // int - ProjectId - represented in the mobile config format
  uid:"ac1529a7-59f6-49d9-b254-6f0a22f57284", // String - uuid Unique user ID
  dt:4, // int - device type (loosely enforced enum - [sdk-phone : 4, sdk-tablet :5])
  dma:"Samsung", // String - device manufacturer. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  dmo:"SG", // String - device model. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  os:"10.0", // String - os version (Android version name 8.0, 9.0, 10.0)
  l:"en_US", // String - Language in iso-639 format https://www.ibabbleon.com/iOS-Language-Codes-ISO-639.html
  tz:"Europe/Paris", // String - timezone https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  now:1522159618000, // long - timestamp when the batch was sent
  to:{ // object - type origin of the event
    an:"appname" // String - application name
    st:"sdk-android", // String - type of sdk
    sf:"release", // string - sdk flavor/variant [release/debug/god]
  },
  r:{ // Device - resolution.
    w:1080, // int - width
    h:1920 // int - height
    d: 1.5 // The device density as float. Its values can vary between (0.75 and 10)
  },
  pl:[] // JSON array payload - list of event objects, see below
}
```

## Events

### Events meta data

All events have a common first part (don't confuse it with the header explained above). This common section is data which is common for all events by type but is gathered at the moment the event occurred. This common section is a part of the actual event payload.

```javascript
{
  upt:1522, // long - system update in milliseconds
  euid:"euid", // String - event UUID
  url:"app-and://identifier/mainPath/secondaryPath?title=screeName", // String - screenName is passed in the title query Parameter
  scn:4, // int - the number of screens already shown in the session
  c:3, // int - connectivity type [-1 - offline, 0 - error, 1 - wifi, 2 - 2g, 3 - 3g, 4 - 4g]
  ci:"verizon", // String - carrier_id when user is on mobile network
  o:1, // int - orientation [0 = portrait, 1 = landscape]
  vo:{ // object - version origin of the event
    sv:"2.1", // string version of the sdk
    sb:4, // int - sdk build number
    av:"appVersion", // String - application version
    af:"appFlavor" // String - application string - [release/debug/god]
    ab:1 // int - application build number
  },
  sn:1, // int - session id (positive int)
  t:12894726459435 // long - timestamp of the event (in milliseconds)
}
```

All event specific properties are appended to this JSON object.

### App Start

This event describes the absolute start of the app.

The trigger for this event is the absolute start of the app.

This is the first event sent when the SDK is invoked.

```javascript
ea:0 // int - event action - defined above
```

### App Show

This event is sent when the user brings the app in the foreground (switching from another app, exiting lock screen, etc.). This event means the app is focused.

```javascript
ea:1 // int - event action - defined above
```

### App Hide

This event is sent when the user exits (minimizes) the app, or switches to something else. This event means the app is not focused and the session might end, but we have not completely ended the session yet, as the user might return.

```javascript
ea:2 // int - event action - defined above
```

### Screenview

Everything starts with a View event. This is an event which describes the equivalent of a "page view" on the web. This event is sent when the Track Screen API is called.

```javascript
ea:4 // int - event action - defined above
st:"title", // String - screen title
sl:34543 // int - (load time) screen load time (diff between last action and this event)
```

### Tap

Single Finger gesture event, when the user is interacting with a loaded screen. This is an event which describes the equivalent of a "click" in the web.
This event is defined by the following sequence of touch events:

- Touch Down -> N x Touch Move -> Touch Up

```javascript
ea:6 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
ur: true, // boolean - was this a "responsive" touch event (the target view had a handler)
```

### Long press

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Duration: > 500ms
- Distance: < 24 dp

```javascript
ea:8 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
```

### Drag (Slow Swipe)

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Distance: > 48 dp
- Finger Velocity < 100 dp/s

```javascript
ea:9 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
fd: 3, // int - finger direction - [1,2,3,4,5] -> [up, down, left, right, complex_pattern]
tvd:100, // int - target view distance dragged
tvv:100 // int - target view velocity while dragging dp/s
```

### Flick (Fast Swipe)

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Distance: > 48 dp
- Finger Velocity > 100 dp/s

```javascript
ea:10 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view graph path
tvid:"btn_ok", // String - target view id
fd: 3, // int - finger direction - [1,2,3,4,5] -> [up, down, left, right, complex_pattern]
tvd:100, // int - target view distance scrolled
tvv:100 // int - target view velocity while scrolling dp/s
```

### Transaction

To track transactions we provide a public API which can send a transaction object (see section [Track Transactions](/en/android/track-transactions/)). This object must contain the following parameters:

```javascript
ea:16, // int - event action - defined above
tr:{ // a json object with different properties defining the transaction made
    vl: 20.0, // mandatory - float - the value of the transaction
    cu: 978, // mandatory - int - the ISO 4217 code of the currency of the transaction
    id: "32akjkljklJ575775" // optional - string - an id for the transaction
    }
```

### Dynamic variables

To track dynamic variables we provide a public API (see section [Dynamic variables](/en/android/track-dynamic-variables/)).

```javascript
// Dynamic variable event with a string value
ea:18, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v:"value" // String - Custom value assigned by client.
```

```javascript
// Dynamic variable event with a number value
ea:19, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v: 2344 // Integer - Custom value assigned by client.
```

## Exposure Metrics

In the Zoning Analysis module, Exposure Metrics provide information on the size of the display zone in the application and data about exposure of content in scrolling elements.

### Behavior for scrollable elements

Exposure Metrics data for scrolling is only calculated on the first scrollable element on the screen. Other scrolling elements in the view hierarchy are not taken into account.

The event is defined by the following content:

```javascript
ea:23, // int - event action
dx:10, // int - normalized x content offset
dy:10, // int - normalized y content offset
du: 5, // int - duration of the movement (in milliseconds)
```
:::note[Limitations]
- Exposure Metrics are not available for Jetpack Compose.
:::

#### Exclude `ScrollView`, `HorizontalScrollView`, `NestedScrollView`, or `RecyclerView` type object from Exposure Metrics

To exclude a scrollable container from Exposure Metrics, use the `Contentsquare.excludeFromExposureMetric(View)` API. Call it from the `onCreate` method of the activity or the `onCreateView` method of the fragment.

<Tabs syncKey="android-lang">
  <TabItem label="Java">
    ```java
    import com.contentsquare.android.Contentsquare;

    @Override
    public void onResume() {
        super.onResume();

        // ...
        ScrollView scrollView = findViewById(R.id.scrollView); // or HorizontalScrollView, NestedScrollView, or RecyclerView
        Contentsquare.excludeFromExposureMetric(scrollView);
    }
    ```
  </TabItem>
  <TabItem label="Kotlin">
    ```kotlin
    import com.contentsquare.android.Contentsquare

    public override fun onResume() {
        super.onResume()

        // ...
        val scrollView = findViewById<ScrollView>(R.id.scrollView) // or HorizontalScrollView, NestedScrollView, or RecyclerView
        Contentsquare.excludeFromExposureMetric(scrollView)
    }
    ```
  </TabItem>
</Tabs>

---

# Compatibility

URL: https://docs.contentsquare.com/en/android/4-37-0/compatibility/

- **Programming languages:** The Android SDK supports and tracks content on any screen developed in **Java or Kotlin**.
- **Android version:** we support Android SDK API Level 21 (Android 5.0 - Lollipop) and later
- **Android SDK version:** The library is built and compiled against Android SDK version 34 (`compileSdk = 34`).
<Render file="en/mobile/compatibility/android-seven-letsencrypt"/>

## Java versions

This version has been compiled on `Java 17` (Bytecode version 61).

:::note
If you try to import the Contentsquare SDK while using a lower Java version in your project, you will get a `bad class file` error. Update your Java version to get rid of the error.
:::

## Kotlin versions

Contentsquare Android SDK is compiled with Kotlin version `1.8.22`.

If you don't use the `1.8.22` Kotlin version and you have conflict issues; you must exclude the Kotlin `stdlib` from our SDK.

<Code lang="groovy" mark={2} code={`
implementation("com.contentsquare.android:sdk:0.6.0") {
    exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jdk8"
}
`}/>

:::note[Compatibility modes]
We use [Kotlin Compatibility modes](https://kotlinlang.org/docs/compatibility-modes.html) flags to be backward compatible with two previous Kotlin versions and one next version.
For an in-depth understanding of compatibility modes, see this [quicksheet](https://blog.mbonnin.net/kotlin-compatibility-quicksheet).
:::

## Jetpack Compose versions

Contentsquare Compose SDK <code>{`com.contentsquare.android:compose:${frontmatter.version}`}</code> is compiled using Jetpack Compose version `1.5.0` (`bom 2023.08.00`).

| Unified SDK Version | CS Compose version | Embedded Compose version  | Minimum Compose version | Latest tested Compose version |
| ------------------ | ------------------ | ------------------------- | ----------------------- | ----------------------------- |
| 0.6.0              | 4.37.0             | 1.5.0                     | 1.5.0                   | 1.7.7                         |
| 0.5.1              | 4.36.1             | 1.5.0                     | 1.5.0                   | 1.7.7                         |
| 0.5.0              | 4.36.0             | 1.5.0                     | 1.5.0                   | 1.7.7                         |
| 0.4.0              | 4.35.0             | 1.5.0                     | 1.5.0                   | 1.7.0-beta06                  |
| 0.3.0              | 4.34.0             | 1.5.0                     | 1.5.0                   | 1.7.0-beta06                  |
| 0.2.0              | 4.33.2             | 1.5.0                     | 1.5.0                   | 1.7.0-beta06                  |
|                    | 4.33.1             | 1.5.0                     | 1.5.0                   | 1.7.0-beta06                  |
|                    | 4.33.0             | 1.5.0                     | 1.5.0                   | 1.7.0-beta06                  |
| 0.1.1              | 4.32.1             | 1.5.0                     | 1.5.0                   | 1.7.0-beta06                  |
| 0.1.0              | 4.32.0             | 1.5.0                     | 1.5.0                   | 1.7.0-beta06                  |
|                    | 4.31.0             | 1.5.4                     | 1.5.0                   | 1.7.0-beta06                  |
|                    | 4.30.0             | 1.5.4                     | 1.5.0                   |                               |
|                    | 4.29.1             | 1.5.4                     | 1.5.0                   |                               |
|                    | 4.28.0             | 1.5.4                     | 1.5.0                   |                               |
|                    | 4.27.1             | 1.5.4                     | 1.4.0                   |                               |
|                    | 4.26.0             | 1.5.4                     | 1.4.0                   |                               |
|                    | 4.25.0             | 1.5.4                     | 1.4.0                   |                               |
|                    | 4.24.1             | 1.5.4                     | 1.4.0                   |                               |
|                    | 4.23.1             | 1.4.0                     | 1.4.0                   |                               |
|                    | 4.22.0             | 1.4.0                     | 1.4.0                   |                               |
|                    | 4.21.0             | 1.4.0                     | 1.4.0                   |                               |
|                    | 4.20.0             | 1.4.0                     | 1.4.0                   |                               |

:::note
If your project uses a lower Compose version than the one embedded in the Contentsquare Compose SDK, Gradle will automatically use the latter version.
Update the Compose version to the one used by our SDK or later.
:::

## Dependencies

The Contentsquare SDK has a few dependencies. We try to be up-to-date as much as possible to avoid conflict issues.

### Handling conflicts

We may sometimes have conflicts between your app dependencies VS SDK dependencies. In this case, you can exclude from our SDK any dependency we pull and use your version instead.

#### Example with excluding `recyclerview` dependency

If you have a version of the **`recyclerview`** in your app which is older than the one we use, you can use the following to exclude it in your Gradle file.

<Code lang="groovy" code={`
  implementation("com.contentsquare.android:sdk:0.5.1") {
    exclude group: "androidx.recyclerview", module: "recyclerview"
    exclude group: "androidx.swiperefreshlayout", module: "swiperefreshlayout"
  }
`}/>

By doing this, you skip the **`recyclerview`** and **`swiperefreshlayout`** dependencies provided by our SDK.

### Dependencies list

The list of dependencies for each artifact is searchable on mvnrepository.com:
- [`com.contentsquare.android:sdk:0.5.1`](https://mvnrepository.com/artifact/com.contentsquare.android/sdk/0.5.1)

## Known limitations and recommendations

### Native UI Elements are not supported

**Symptom:**

1. You capture snapshots but main elements of the screen are not appearing.
1. SDK does not log any gesture events when interacting with some native UI elements.

**Explanation:** Native UI Elements such as Bottom Sheets, Dialogs, Menus are currently not supported by the SDK.

### Gestures not attached to the expected view (Layout visibility)

**Symptom:** In some cases, we found that gestures tracked by the SDK are not attached to the right UI element of the screen. These gestures will be attached to an invisible view.

**Explanation:** The reason for this is that when the SDK attaches the gesture to a UI element, it generates a path regarding the visibility of the view when traversing the view hierarchy. If a view is visible and it matches the coordinates on where the gesture was performed it will be taken into account. Most of the time, the issue is that a layout is still present on the screen even if there is no content.

**Best Practice:** When designing your application UI, do not let any layout stray along if it is not used. If a layout contains widgets like progress bar, remember to set its visibility to `GONE` or `INVISIBLE` after its purpose is served.

### Taps will be assigned to the first clickable view

**Symptom:** A tap is not assigned to the tapped view, but to a view higher in the view hierarchy.

**Explanation:** When a tap is captured, the view hierarchy is traversed to find all views that match the tap coordinates. The tap is assigned to the first clickable view, starting at the tail of the view list, meaning the search starts at the lowest hierarchy level. If no clickable view is found, then the tap is assigned to the view at the tail of the list.

Jetpack Compose example:

```kotlin
Button(
    onClick = { ... }
) {
    Text(text = "Simple Button")
}
```

A tap on the `Text` will be assigned to the `Button`, because the `Button` is clickable.

**Best practice:** If the described behavior does not fit your needs, you may add click listeners to the corresponding views. In the example above, you may add an identical click listener to the `Text`.

### No gesture detection for WebViews embedded in scroll container

**Symptom:** Swipe gestures are not detected for a WebView.

**Explanation:** For WebViews, the gesture detection is completely covered by the CS Tag, not the native Android SDK. However, when a WebView is placed inside a scrollable container, for example a `ScrollView`, the WebView will expand to its full size and all scrolling will be done by the scrollable container. In this case, no swipe gestures will be detected.

**Best practice:** Ensure that WebViews are not placed inside any scrollable containers.

---

# Disabling Automatic SDK Initialization

URL: https://docs.contentsquare.com/en/android/4-37-0/disable-autostart/

## How to disable autostart
Set the `com.contentsquare.android.autostart` flag to false in your `AndroidManifest.xml` file.

```xml title="AndroidManifest.xml" {5}
<application>
  ...
    <meta-data
      android:name="com.contentsquare.android.autostart"
      android:value="false"
    />
  ...
</application>
```

Then, you can start the Contentsquare SDK by calling the `start()` method of the Contentsquare class. 

```kotlin
Contentsquare.start(context) 
```

This initialize function is called automatically on app startup if the `com.contentsquare.android.autostart` flag is not listed in the AndroidManifest. 

This function should be called before the first activity is created. Call this function in the `onCreate()` method of a custom Application subclass:

```kotlin
import android.app.Application
import com.contentsquare.android.Contentsquare

class MyApplication : Application() {
    override fun onCreate() {
        super.onCreate()

        // Start Contentsquare SDK
        Contentsquare.start(this)
    }
}
```

---

# Error Analysis

URL: https://docs.contentsquare.com/en/android/4-37-0/error-analysis/

<Render file="en/plans/dem"/>
## Prerequisites

### Screen tracking implemented

Tracking will start at the 1st screenview event, it is required to have screen tracking implemented. Make sure to follow the [Android Track screens](/en/android/track-screens/) sections.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time (or choose to take this update as an opportunity to review your Privacy related implementation), make sure to follow the [Android Privacy](/en/android/privacy/) sections.

## API errors

### Automatic network inspection

By using code instrumentation, network calls will be instrumented to collect network data.
This way, two largely used network stacks are supported, and all the libraries that use them:
 - [OkHttp](https://square.github.io/okhttp/),
 - [HttpURLConnection](https://developer.android.com/reference/java/net/HttpURLConnection)

#### Adding the Gradle plugin

With the use of a Gradle plugin, an instrumentation of your code will be performed to collect the data about network errors.

In your root-level (project-level) Gradle file (`<project>/build.gradle` or `<project>/build.gradle.kts`), add the Contentsquare Network Gradle plugin to the plugins block:
<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
      Using the plugins DSL:

      ```groovy title="build.gradle"
      plugins {
         // Add the dependency for the Contentsquare Network Gradle plugin
         id "com.contentsquare.error.analysis.network" version "1.6.0" apply false
      }
      ```

      Using legacy plugin application:

      ```groovy title="build.gradle"
      buildscript {
         repositories {
            maven {
               url "https://plugins.gradle.org/m2"
            }
         }
         dependencies {
            classpath "com.contentsquare.gradle:error-analysis-network:1.6.0"
         }
      }
      ```

  </TabItem>
  <TabItem label="Kotlin">
      Using the plugins DSL:

      ```kotlin title="build.gradle.kts"
      plugins {
         // Add the dependency for the Contentsquare Network Gradle plugin
         id("com.contentsquare.error.analysis.network") version "1.6.0" apply false
      }
      ```

      Using legacy plugin application:

      ```kotlin title="build.gradle.kts"
      buildscript {
         repositories {
            maven {
               url = uri("https://plugins.gradle.org/m2")
            }
         }
         dependencies {
            classpath("com.contentsquare.gradle:error-analysis-network:1.6.0")
         }
      }
      ```
  </TabItem>
</Tabs>

In your module (app-level) Gradle file (usually `<project>/<app-module>/build.gradle` or `<project>/<app-module>/build.gradle.kts`), add the Contentsquare Network Gradle plugin:

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
      Using the plugins DSL:

      ```groovy title="app/build.gradle"
      plugins {
         id "com.contentsquare.error.analysis.network"
      }
      ```

      Using legacy plugin application:
      ```groovy title="app/build.gradle"
      apply plugin: "com.contentsquare.error.analysis.network"
      ```
  </TabItem>
  <TabItem label="Kotlin">
      Using the plugins DSL:

      ```kotlin title="app/build.gradle.kts"
      plugins {
         id("com.contentsquare.error.analysis.network")
      }
      ```

      Using legacy plugin application:
      ```kotlin title="app/build.gradle.kts"
      apply(plugin = "com.contentsquare.error.analysis.network")
      ```
  </TabItem>
</Tabs>

#### Task added

The plugin adds new tasks for network code instrumentation: `transformVariantClassesWithAsm`

This task can be time consuming, and should be disabled for development build.

#### Configure Gradle plugin

By default the plugin is enabled for each variant, there are three ways to disable the Gradle plugin:

##### Build type

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
      ```groovy title="build.gradle"
      android {
         buildTypes {
            debug {
               errorAnalysisNetwork {
                     setInstrumentationEnabled(false)
               }
            }
         }
      }
      ```
  </TabItem>
  <TabItem label="Kotlin">
      ```kotlin title="build.gradle.kts"
      android {
         buildTypes {
            debug {
               configure<com.contentsquare.gradle.error.analysis.network.ErrorAnalysisNetworkExtension> {
                     setInstrumentationEnabled(false)
               }
            }
         }
      }
      ```
  </TabItem>
</Tabs>

##### By flavor

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
      ```groovy title="build.gradle"
      android {
         flavorDimensions "example"
         productFlavors {
            enable {
               dimension "example"
            }
            disable {
               dimension "example"
               errorAnalysisNetwork {
                     setInstrumentationEnabled(false)
               }
            }
         }
      }
      ```
  </TabItem>
  <TabItem label="Kotlin">
      ```kotlin title="build.gradle.kts"
      android {
         flavorDimensions += "example"
         productFlavors {
            create("enable") {
               dimension = "example"
            }
            create("disable") {
               dimension = "example"
               configure<com.contentsquare.gradle.error.analysis.network.ErrorAnalysisNetworkExtension> {
                     setInstrumentationEnabled(false)
               }
            }
         }
      }
      ```
  </TabItem>
</Tabs>

##### With a Gradle properties

```properties title="gradle.properties"
errorAnalysisNetworkInstrumentationEnabled=false
```

Command line:

```shell
./gradlew :app:assembleDebug -PerrorAnalysisNetworkInstrumentationEnabled=false
```

### Manual inspection

:::note
Our recommendation is to use the Gradle plugin.
:::

#### OkHttp interceptor

If your project is using OkHttp client, an interceptor (`ErrorAnalysisInterceptor`) can be added to collect all the network errors:

<Tabs syncKey="android-lang">
  <TabItem label="Java">
     ```java
      import com.contentsquare.android.error.analysis.network.ErrorAnalysisInterceptor;

      new OkHttpClient().newBuilder()
         .addInterceptor(new ErrorAnalysisInterceptor())
         .build();
      ```
  </TabItem>
  <TabItem label="Kotlin">
     ```kotlin
      import com.contentsquare.android.error.analysis.network.ErrorAnalysisInterceptor

      OkHttpClient().newBuilder()
         .addInterceptor(ErrorAnalysisInterceptor())
         .build()
      ```
  </TabItem>
</Tabs>

#### Custom implementation

If no other solution works, a custom implementation can be created via the `newNetworkMetric` method.

Multiple data will need to be gathered: **URL** and **method** at the creation of the metric, and **status code** after the request is done.
Also calling `start` (before the request) and `stop` (after all the rest) methods for time metrics to be collected and to send the event.

<Tabs syncKey="android-lang">
  <TabItem label="Java">
      ```java
      import com.contentsquare.android.error.analysis.ErrorAnalysis;
      import com.contentsquare.android.error.analysis.NetworkMetric;


      NetworkMetric metric = ErrorAnalysis.getInstance().newNetworkMetric(url, ErrorAnalysis.HttpMethod.GET);
      metric.start();

      // do your request

      metric.setStatusCode(code);
      metric.stop();
      ```
  </TabItem>
  <TabItem label="Kotlin">
      ```kotlin
      import com.contentsquare.android.error.analysis.ErrorAnalysis
      import com.contentsquare.android.error.analysis.trace

      ErrorAnalysis.getInstance().newNetworkMetric(url, ErrorAnalysis.HttpMethod.GET).trace {

         // do your request

         setStatusCode(code)
      }
      ```
  </TabItem>
</Tabs>

:::note
`start` and `stop` are automatically called by `trace`
:::

### Removing Personal Data in request URL path

By default, the API errors feature collects the URL path of the failed API requests. To prevent the collection of Personal Data in the URL path, you can rewrite the request URL path with the `ErrorAnalysis.setUrlMaskingPatterns` SDK API.

Replace a step of the path - meaning between two slashes (/) - containing Personal Data with a variable:

- `:user_id` becomes CS_ANONYMIZED_USER_ID
- `:address` becomes CS_ANONYMIZED_ADDRESS

#### Example

<Tabs syncKey="android-lang">
  <TabItem label="Java">
      ```java
      ErrorAnalysis.setUrlMaskingPatterns(
         List.of("https://www.contentsquare.com/users/:user_id/address/:address")
      );
      ```
  </TabItem>
  <TabItem label="Kotlin">
      ```kotlin
      ErrorAnalysis.setUrlMaskingPatterns(
         listOf("https://www.contentsquare.com/users/:user_id/address/:address")
      )
      ```
  </TabItem>
</Tabs>

##### Result

| URL before masking | URL after masking |
|---|---|
| `https://www.contentsquare.com/users/123/address/castle+black` | `https://www.contentsquare.com/users/CS_ANONYMIZED_USER_ID/address/CS_ANONYMIZED_ADDRESS` |

### Validate API error integration

#### Validate API error collection is enabled

If in-app features are enabled, an info log should appear when API Error collection has successfully been enabled (see [Android Debugging and Logging](/en/android/in-app-features/#debugging-and-logging) section).:

```
CSLIB: Api Error collection is enabled
```

#### Validate API error collection

If you have [logging enabled](/en/android/in-app-features/#debugging-and-logging), you will see API errors:
- Displayed in [Contentsquare Log Visualizer](/en/android/in-app-features/#viewing-logs-in-the-contentsquare-platform).
- As an Info log in Logcat:

```
CSLIB: API Error - 401 GET https://api.client.com
```

### How API errors works

#### Initialization

The way our SDK works is by auto-starting with the application launch and collecting the API errors through the instrumented code added by the Gradle plugin.

#### Configuration

Once started, our SDK fetches its config from our servers.
It will start collecting data from network events if the API errors setting is enabled in the config (this is handled by the Contentsquare team).

#### API errors collection
The SDK monitors only the API errors with response code equal or above 400, and generates analytics data.
These events are then locally stored, and eventually sent to our servers in batches.

:::warning
For API errors to be tracked and processed, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

#### Sending API errors data

For each network error, a new event will be sent in analytics and Session Replay data. Check the following sections to learn more about how data is processed and sent:
 - [Analytics requests](/en/android/how-the-sdk-works/#sending-data)
 - [Session Replay requests](/en/android/session-replay/#requests)

### API Troubleshooting Details

API errors troubleshooting details enables you to collect more information about API errors so you can troubleshoot errors faster.

With this feature you will be able to see three types of additional API error details in the Event Stream of Session Replay.

 - The HTTP headers of the request and the response.
 - The body (the data sent by the request or received in the response).
 - The query parameters of the request endpoint (of the URL of the information you request for).

<Render file="en/plans/dem"/>

See [API Troubleshooting Details](https://support.contentsquare.com/hc/en-gb/articles/6553281476124) for more details.

### Collected data points

Only network calls in error (response code above 400) will be collected.
Here the exhaustive list of data collected:
 - Response code
 - URL (without query strings)
 - HTTP method
 - Timestamp of the request
 - Timestamp of the response

### Known limitations and recommendations

#### Conflict with Firebase Performance using code instrumentation

Code instrumentation of requests made using HttpURLConnection does not work well with Firebase Performance plugin.
Network events will not be logged when using Contentsquare Error Analysis network and Firebase performance plugin (only one of the two will log events).
If you want to use both libraries, prefer using interceptors than code instrumentation.

## Crash Reporter

### Upload mapping file

Android mapping files are generated during the process of obfuscating Android application code using tools like ProGuard. A mapping file for your app will be generated for all [obfuscated builds](https://developer.android.com/build/shrink-code) at compile time.

<a href="/ff-sample-mapping.txt" download="ff-sample-mapping.txt">Download the mapping file example</a> generated when building the [Contentsquare Android sample app](https://github.com/ContentSquare/contentsquare-android-sample).

In order to produce readable crash reports from builds that have been obfuscated, Contentsquare requires to upload the mapping file produced by your build to our servers. To simplify this process, we've provided a Gradle plugin that you can integrate into your build.
It adds a distinct Gradle task that will be executed immediately after the build is done.
This new task will be automatically triggered on assemble task for any minified build.

:::warning
In versions prior to **1.4.0** of Error Analysis Crash Plugin, it was necessary to manually trigger the upload task for the mapping file.
Since it's now automatically triggered, you need to remove any manual call to the `uploadContentsquareMappingFile` task.
:::

#### Adding the Gradle plugin

In your root-level (project-level) Gradle file (`<project>/build.gradle` or `<project>/build.gradle.kts`), add the Contentsquare Crash Gradle plugin to the plugins block:

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
      Using the plugins DSL:

      ```groovy title="build.gradle"
      plugins {
         // Add the dependency for the Contentsquare Crash Gradle plugin
         id "com.contentsquare.error.analysis.crash" version "1.7.0" apply false
      }
      ```

      Using legacy plugin application:

      ```groovy title="build.gradle"
      buildscript {
         repositories {
            maven {
               url "https://plugins.gradle.org/m2"
            }
         }
         dependencies {
            classpath "com.contentsquare.gradle:error-analysis-crash:1.7.0"
         }
      }
      ```
  </TabItem>
  <TabItem label="Kotlin">
      Using the plugins DSL:

      ```kotlin title="build.gradle.kts"
      plugins {
         // Add the dependency for the Contentsquare Crash Gradle plugin
         id("com.contentsquare.error.analysis.crash") version "1.7.0" apply false
      }
      ```

      Using legacy plugin application:

      ```kotlin title="build.gradle.kts"
      buildscript {
         repositories {
            maven {
               url = uri("https://plugins.gradle.org/m2")
            }
         }
         dependencies {
            classpath("com.contentsquare.gradle:error-analysis-crash:1.7.0")
         }
      }
      ```
  </TabItem>
</Tabs>

In your module (app-level) Gradle file (usually `<project>/<app-module>/build.gradle` or `<project>/<app-module>/build.gradle.kts`), add the Contentsquare Crash Gradle plugin:

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
      Using the plugins DSL:

      ```groovy title="app/build.gradle"
      plugins {
         id "com.contentsquare.error.analysis.crash"
      }
      ```

      Using legacy plugin application:

      ```groovy title="app/build.gradle"
      apply plugin: "com.contentsquare.error.analysis.crash"
      ```
  </TabItem>
  <TabItem label="Kotlin">
      Using the plugins DSL:

      ```kotlin title="app/build.gradle.kts"
      plugins {
         id("com.contentsquare.error.analysis.crash")
      }
      ```

      Using legacy plugin application:

      ```kotlin title="app/build.gradle.kts"
      apply(plugin = "com.contentsquare.error.analysis.crash")
      ```
  </TabItem>
</Tabs>

#### Configuring the Gradle Plugin

To use the plugin, you must provide it with the relevant credentials to be able to upload the mapping file.

##### Get project ID

1. Login to the Contentsquare platform on https://app.contentsquare.com
1. Make sure to be on the right project
1. The project ID can be found in the URL query parameter `project`: `https://app.contentsquare.com/#/{MODULE_NAME}?project={PROJECT_ID}&hash={HASH}`

##### Get project credentials

Follow the dedicated documentation from the Help Center to get the **client ID** and **client Secret**: [How to create API credentials](https://support.contentsquare.com/hc/en-gb/articles/9292880837660).

##### Use credentials

You can do this by setting the `uploadCredentials` property of the errorAnalysisCrash extension in your app-level `build.gradle` or `build.gradle.kts` file, as shown below. The errorAnalysisCrash extension is available on all build types and product flavours.

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
      ```groovy title="build.gradle"
      android {
         buildTypes {
            release {
               errorAnalysisCrash {
                  uploadCredentials {
                     projectId = <you project Id>
                     clientId = "<your client Id>"
                     clientSecret = "<your client secret>"
                  }
               }
            }
         }
      }
      ```
  </TabItem>
  <TabItem label="Kotlin">
      ```kotlin title="build.gradle.kts"
      android {
         buildTypes {
            release {
               configure<ErrorAnalysisCrashExtension> {
                  uploadCredentials {
                     projectId = <your project Id>
                     clientId = "<your client Id>"
                     clientSecret = "<your client secret>"
                  }
               }
            }
         }
      }
      ```
  </TabItem>
</Tabs>

#### Disable Upload

By default, the mapping file will be uploaded automatically. If you need to disable the upload, you can do it by adding a specific flag `mappingFileUploadEnabled` to the plugin configuration:

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
      ```groovy title="build.gradle" ins={5}
      android {
         buildTypes {
            release {
               errorAnalysisCrash {
                  mappingFileUploadEnabled = false
                  uploadCredentials {
                     ...
                  }
               }
            }
         }
      }
      ```
  </TabItem>
  <TabItem label="Kotlin">
      ```kotlin title="build.gradle.kts" ins={5}
      android {
         buildTypes {
            release {
               configure<ErrorAnalysisCrashExtension> {
                  mappingFileUploadEnabled = false
                  uploadCredentials {
                     ...
                  }
               }
            }
         }
      }
      ```
  </TabItem>
</Tabs>

It is also possible to disable the upload using the command line when the assemble task is triggered by using the flag `errorAnalysisCrashMappingFileUploadEnabled` as follow:
```
./gradlew app:assembleRelease -PerrorAnalysisCrashMappingFileUploadEnabled=false
```

Doing that, the upload task will be disabled and you will see the following log:
```
[ErrorAnalysisCrashPlugin] uploadContentsquareMappingFileRelease disabled for release
```

#### ProGuard Configuration

To ensure that we can provide line numbers and file names in the crash reports, add the following
configuration to your ProGuard file:

```
-keepattributes SourceFile,LineNumberTable        # Keep file names and line numbers
```

### Validate Crash reporter integration

#### Validate crash collection is activated

If in-app features are enabled, an info log should appear when the Crash reporter has successfully been initialized (see [Android Debugging and Logging](/en/android/in-app-features/#debugging-and-logging) section).:

```
CSLIB: Crash reporter is enabled
```

#### Validate crash reporting

To test that the Crash Reporter is working properly, you can force a crash in your application. The next time you start your application, the crash
will be sent to our servers. If you have [logging enabled](/en/android/in-app-features/#debugging-and-logging), you will see the upload reflected in the log:

```
CSLIB: Crash event detected and sent for userID: <user-id>, session: <session-number> on screen: <screen-number> crashID: <crash-id>
```

### How Crash Reporter works

#### Initialization

Crash Reporter is started automatically and begins to report basic information for crashes in your application when it is launched.

#### Configuration

Once started, our SDK fetches its configuration from our servers.
It will start reporting crashes if the Crash Reporter setting is enabled (this is handled by the Contentsquare team).

#### Reporting

When a crash occurs, a report is created and stored locally in the device. Once the app is launched again, the report is sent to our servers and then removed from the local storage.

:::warning
For crashes to be reported and processed, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

#### Sending crash data

For each crash, a new event will be sent to Analytics and Session Replay data when the app is launched again after the crash occurred and the network conditions allow for the server to be reached.

### Collected data points

The Crash Reporter will capture any crashes caused by an unhandled exception in applications written in Java or Kotlin. It will collect information about the application,
system, process, threads, stack traces and some other event metadata you can find in [collected data points](/en/android/collected-data-points/)

### Known limitations and recommendations

Native crashes from applications written using C or C++ are currently not supported.

#### Compatibility with other crash reporters

It is possible that the Crash Reporter will work with other SDKs, but we cannot guarantee it.
Android has a global error handling class and therefore we rely on other SDKs forwarding the error on to us in the event of
a crash, should they have been registered first. If the Contentsquare Crash Reporter is registered first, it will forward on errors to any other
registered handlers.

Based on our tests, we can confirm it is compatible with Firebase Crashlytics.

## WebView errors

Errors occurring in web pages loaded in WebViews can be collected if Webview tracking is set up in your app.

See 📚 [Webview Tracking implementation](/en/webview-tracking-web-tag/).

Once WebView tracking is implemented, errors collection can be set up.

See 📚 [Errors (in WebView)](/en/webview-tracking-web-tag/error-analysis/)

## Compatibility

### Dependencies list

|Package|Name|Version|
|---|---|---|
|androidx.annotation|annotation|1.5.0|

## Impact on Performance

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well.
These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.

The following performance results were obtained under the following conditions:
| Condition                                   | Value     |
| --------------------------------------------| --------- |
| Device model                                | Pixel 5   |
| Android version                             | 13        |

We used [Android Microbenchmark](https://developer.android.com/topic/performance/benchmarking/microbenchmark-overview) to measure the time added by our implementation.

:::note
The numbers provided below will vary depending on the user's device, Android version, SDK version.
:::

The instrumented code added is running in _less than 1ms_ per request: our benchmarks show less 400µs.

About CPU and memory, the overhead of adding the collection of network error is negligible.

## Migrating from versions 4.24.1 and older of Error Analysis

In versions prior to 4.25.0 of the Contentsquare SDK, the Error Analysis module was provided as a distinct artifact. To integrate it into your application, a dedicated Gradle dependency was required. Starting from version 4.25.0, this is no longer the case.

If you had previously integrated the Error Analysis module into your application using the standalone artifact, you will need to remove it from your dependency list.

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
   <Code lang="groovy" code={`
// Remove the following line from your dependencies
implementation "com.contentsquare.android:error-analysis:4.24.1"
   `}/>
  </TabItem>
  <TabItem label="Kotlin">
   <Code lang="kotlin" code={`
// Remove the following line from your dependencies
implementation "com.contentsquare.android:error-analysis:4.24.1"
   `}/>
  </TabItem>
</Tabs>

Should you fail to follow these steps you will see one of the following errors.

In the event of not removing the error-analysis module and upgrading the version, it will not be found:

```
FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':app:dataBindingMergeDependencyArtifactsRelease'.
> Could not resolve all files for configuration ':app:releaseCompileClasspath'.
   > Could not find com.contentsquare.android:error-analysis:4.32.0.
     Required by:
         project :app
```

In the event of not removing the error-analysis module and keeping it on version 4.24.0, you will see a list of duplicate classes found:

```
> Task :app:checkDebugDuplicateClasses FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':app:checkDebugDuplicateClasses'.
> A failure occurred while executing com.android.build.gradle.internal.tasks.CheckDuplicatesRunnable
   > Duplicate class com.contentsquare.android.ErrorAnalysisModule found...
```

---

# Impact on performance

URL: https://docs.contentsquare.com/en/android/4-37-0/impact-on-performance/

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well. These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.
The performance results were obtained under the following conditions:

| Condition                                   | Value            |
| --------------------------------------------| ---------------- |
| Device model                                | Pixel 5          |
| Android version                             | 34 (Android 14)  |

:::note
The numbers provided below will vary depending on the user's device and Android version.
:::

| Property                                           | Value     |
| -------------------------------------------------- | --------- |
| SDK size                                           | 1241 KB   |
| Nbr. of methods                                    | 4868      |
| Nbr. of fields                                     | 3164      |
| RAM usage                                          | &lt;4 MB  |
| SDK CPU peak on event                              | &lt;15 %  |
| Data transmitted over network for a default batch size of 50 events.<br/>The size of the batch can be customized if needed.| ~25kb |

## Performance test procedure

|CPU Usage Test|RAM Usage Test|Memory Leak Test|
|------ | ------ | ------ |
| We are profiling our Demo app with and without the SDK dependency by following the same use case. | We are profiling our Demo app with and without the SDK dependency by following the same use case. | We are profiling our demo app and we are using the Adb Monkey tool to create random user input events |
| We are measuring the CPU peak for both versions of the app and we are computing the difference | We are measuring the RAM usage peak for both versions of the app and we are computing the difference | During this time we are monitoring the RAM behavior for any anomaly. We are using the Memory Profiler to track/fix the issue|

---

# How the SDK works

URL: https://docs.contentsquare.com/en/android/4-37-0/how-the-sdk-works/

## Initialization
The way our SDK works is by auto-starting with the application launch and attaching to the current process in order to intercept the events and gestures we are interested in.

See [Session Replay Initialization](/en/android/session-replay/#initialization) to learn how Session Replay is initialized.

## Configuration

Once started, our SDK fetches its configuration from our servers.
Then depending on the segmentation size (defined by our team when you sign a contract) and the user consent status, it will start collecting analytics data from system and user events it detects from the runtime.

## Data collection

### Analytics data collection

The SDK monitors the application, lifecycle events, the view hierarchy, and generates data from the behavior of the app, the content of the screen and the user interactions.
These events are then locally stored, and eventually sent to our servers in batches. We then aggregate that data to create usable visual information into our Web Application, which you use to gather insights.

### Session Replay data collection

See [Session Replay Initialization](/en/android/session-replay/#data-collection) to learn how Session Replay data collection works. 

## Sending data

### Sending analytics data
Analytics data are sent in batches of maximum 50 events. Requests are triggered when network conditions allow for the server to be reached and:
- The current batch of events has reached 50
- Or the app is put in background

### Sending Session Replay Data
See [Session Replay Requests](/en/android/session-replay/#requests) to learn more about how Session Replay data is sent.

### Sending crash Data
See [Send Crash data](/en/android/error-analysis/#sending-crash-data) to learn more about how crash data is sent. 

## Session definition
<Render file="en/mobile/how-the-sdk-works/session-definition"/>

---

# In-app features

URL: https://docs.contentsquare.com/en/android/4-37-0/in-app-features/

Alongside its tracking capabilities, the SDK embeds some features aimed at Contentsquare users such as [Snapshot Capture](#snapshot-capture) and [SDK Logs](#debugging-and-logging).
## Enable in-app features
To enable in-app features within your app, you have to **first make sure your app is launched in the background**. To do so, start it and press the Android home button. Then, follow the appropriate method described as follows.

### On a device: scan the QR code
If you have access to the Contentsquare platform, you can open the in-app features modal from the menu and scan the QR code with your phone. 

![](~/assets/android/in-app-features-android.gif)

:::note
On Android, some devices have a built-in QR code reader feature in the default camera app. If that is not the case for you, use [QR & Barcode Reader by TeaCapps](https://play.google.com/store/apps/details?id=com.teacapps.barcodescanner&hl=en&gl=US).
:::

### On an emulator: use the ADB command
If you are using an emulator, you can use the ADB command to enable in-app features.

If you have access to the Contentsquare platform, you can open the in-app features modal from the menu and select "Copy this ADB command". 

![](~/assets/android/enable-in-app-features-android-emulator.png)

It will look like this:

```shell
adb shell am start -W -a android.intent.action.VIEW -d "cs-{{packageName}}://contentsquare.com?activationKey={{uniqueActivationKey}}\&userId={{userId}}"
```

If you don't have access to the Contentsquare platform, you can ask the Contentsquare team to share the link with you.

## Debugging and Logging

Contentsquare provides Logging capabilities that allow you to see the raw event data logged by your app in Android Studio or in the Contentsquare platform. Check logs for validation purposes during the instrumentation phase of development and can help you discover errors and mistakes in your analytics implementation and confirm that all events are being logged correctly.

### Viewing logs in Android Studio

By default, almost all logs are disabled. There is only one log that is always visible to notify that the SDK has started:

<Code lang="text" code={`
CSLIB: Contentsquare SDK ${frontmatter.version} starting in app: your.application.package
`}/>

In order to enable all logs, activate [in-app features](#enable-in-app-features). Logging is directly linked to in-app features state: it starts when in-app features are enabled and stops when you disable in-app features.

To view logs:

1. Plug your Android Phone to your Computer (or use emulator)
1. Start the Android Studio app
1. Open the Logcat view and select your phone or emulator
1. Filter logs on `CSLIB`

![](~/assets/android/logs-android.png)

### Viewing logs in the Contentsquare platform
To view logs directly on the platform, you can use Log visualizer.
Log visualizer is a helper tool to see SDK logs without logging tools.
It requires having platform access for your project and enabling in-app features.
See the [SDK Log Visualizer Help Center Article](https://support.contentsquare.com/hc/en-gb/articles/4408408544530) for more information.

## Snapshot Capture

In order to unlock the full data-visualization capabilities of Contentsquare, the SDK provides a way to capture snapshots of your app screens. These snapshots can only be taken by Contentsquare's users on their device. They are not captured from your end-users device. It means your Personal Data is safe, as long as you use a test user account.

:::warning
For snapshot capture to work, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

:::note
The snapshot capture is only supported from Android API 26 (Android Oreo).
:::

:::note
To maintain accurate statistics in the Zoning Analysis module, the SDK prevents R8/ProGuard from obfuscating the names of all
[View](https://developer.android.com/reference/android/view/View) subclasses.
However, class methods and fields can still undergo obfuscation and optimization.
:::

![](~/assets/android/snapshot-capture-long.gif)

Snapshots are used in the **Zoning Analysis** module to look at zone-level metrics (Tap rate, Swipe rate...):

![](~/assets/android/snapshot-use-in-zoning.gif)

### Jetpack Compose support

To enable Jetpack Compose support for Zoning, it is necessary to add a new Gradle dependency to your Gradle build file. Make sure to follow the [Track screens](/en/android/track-screens/#jetpack-compose-support) section.

### Invisible overlays covering other elements of a Compose screen

Invisible overlays are transparent information overlays that do not display any information most of the time. These overlays may lead to issues in the Zoning editor. The screen elements covered by the overlay will display 0 taps. On the Contentsquare SDK side, the gesture recognition assigns the taps to the overlay, that is the target view path (TVP) of the tap differs from the TVP of the covered element in the Zoning editor.

To avoid this issue, you may change the layout of the screen so that the overlay is no longer present. Another option is to mark the overlay using the extension function `Modifier.excludeFromGestureRecognition()`.

```kotlin
/**
 * [Modifier] extension function that provides the facility to exclude a Composable from the gesture recognition.
 */
fun Modifier.excludeFromGestureRecognition(): Modifier
```

The marked Composable and all of its children will be excluded from the gesture recognition. Thus no gestures will be assigned to this part of the Composable hierarchy anymore.

For example:

```kotlin
@Composable
private fun InfoOverlay() {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .excludeFromGestureRecognition()
    ) {
        // some content that is displayed occasionally
    }
}
```

### Lists with Slowly Rendering Items

When creating a Long Snapshot of a RecyclerView or a lazy Compose list, the contents of the list are scrolled automatically. If individual elements of the list are missing in the resulting snapshot, that is they are invisible, this may be because the elements take too long to render. In such a case, automatic scrolling can be delayed. You must have enabled in-app features:

1. Long press on the snapshot button to open the Contentsquare settings.
1. Move the slider to set the delay for scrolling. The value is displayed in milliseconds.
1. Tap on the arrow back to close the Contentsquare settings.

You can now repeat the snapshot and then check it in the zoning editor.

![](~/assets/android/snapshot-scroll-delay.gif)

## Known limitations

### Snapshot Capture

- The snapshot capture is only supported from Android API 26 (Android Oreo).
- The combination of CoordinatorLayout, AppBarLayout, and RecyclerView is currently not supported.
- ConcatAdapter is currently not supported.
- Lists with different item layouts are not supported.
- Two or more scrollable containers are not supported. Furthermore, horizontal scrollable containers are not supported.
- Snapshots of screens in edge-to-edge / fullscreen mode may contain visual artifacts in Zoning Analysis module, for example from the status and navigation button bar. Although some zoning elements will be visually altered by system bars, creating zones and displaying statistics will still work correctly.
- Some lifecycle events are currently not handled, for example app in background, device rotation, fragment change.
- The dark mode is currently not supported.

### Additional limitations for Compose Screens

- The snapshot for Jetpack Compose is not fully supported yet. This also applies to the combination of Compose and WebViews.
- The visual information may not be consistent for snapshots of Jetpack Compose screens. This applies in particular to transparency and visibility.
- Scrollable elements with spacings and paddings may not yet be fully supported. While all elements can be selected as zones in the Zoning editor and statistics will be accurate, visual presentation might be affected by artifacts.
- Screens containing transparent overlays are not supported in the Zoning module. Any transparent Composables covering the main content of the screen need to be fully removed when unused.
- Android views embedded within scrollable Compose containers are not fully supported. These views can be selected as zones in the Zoning editor, and the statistics will be accurate. However, they will not scroll properly with the rest of the content.
- Sometimes, LazyColumn items may contain more than one direct composable, or no composables at all. This can result in an error during snapshot creation or an invalid snapshot in the Zoning editor. To avoid this, wrap the LazyColumn items with an additional Column wrapper, like this:
    ```kotlin
    LazyColumn(modifier = Modifier.fillMaxSize()) {
        items(20) { itemIndex ->
            // Wrapping every item with additional Column avoids issues if some
            // items have multiple direct composables, or no composables at all.
            Column {
                when (itemIndex % 3) {
                    0 -> {
                        // Item with 1 direct composable (Row).
                        Row {
                            Text(text = "Sample")
                        }
                    }
                    1 -> {
                        // Item with multiple direct composables (Text, Row).
                        Text(text = "Sample")
                        Row {
                            Text(text = "Sample")
                        }
                    }
                    // No else statement: some items will have no composables at all.
                }
            }
        }
    }
    ```

---

# Getting Started

URL: https://docs.contentsquare.com/en/android/4-37-0/

import { CardGrid, LinkCard, RepoCard } from '~/components';
<Render file="en/mobile/getting-started-intro"/>

## Install the SDK

Our Android SDK is shipped as an Android library (AAR) which you need to add as a dependency to your Gradle file.

See [Compatibility](compatibility/) for more information.

### Include the SDK

For distribution of our API we use **Maven Central Repository** which is supported by the Android build system by default. To add our SDK (or library), add the following line to your application's dependency list.

:::tip[Unified SDK]
The Unified Android SDK v0.6.0 is installed with the following setup, embedding the Contentsquare Android SDK v4.37.0.

Learn more about the [Unified SDK](unified-sdk/).
:::

<Tabs syncKey="android-lang">
  <TabItem label="Groovy">
    <Code lang="groovy" title="build.gradle" code={`
implementation "com.contentsquare.android:sdk:0.6.0"
    `}/>
  </TabItem>
  <TabItem label="Kotlin">
    <Code lang="kotlin" title="build.gradle.kts" code={`
implementation("com.contentsquare.android:sdk:0.6.0")
    `}/>
  </TabItem>
</Tabs>

The SDK autostarts when your application launches, requiring no manual initialization.

If you are using an older Kotlin version, see [Compatibility](compatibility/).

### Validate SDK integration

<Render file="en/mobile/getting-started-validate-sdk-integration" params={{
  version: frontmatter.version,
  platform: frontmatter.category
}}/>

## Check the logs

<Render file="en/mobile/getting-started-check-the-logs"
  params={{tools: "Android Studio"}}
/>

### Viewing logs in Android Studio

To view SDK logs:

1. Plug your Android phone into your computer (or use an emulator)
1. Open Android Studio and start your app
1. Open the `Logcat` view and select your phone or emulator
1. Filter logs by `CSLIB`

![](~/assets/android/logs-android.png)

### Enable in-app features

<Render file="en/mobile/getting-started-in-app-features"/>

To enable in-app features within your app, make sure your app is launched in the background. To do so, start it and press the Android home button. Then, follow the appropriate method described as follows.

#### On a device: scan the QR code

<Render file="en/mobile/getting-started-scan-qr-code" params={{
  platform: frontmatter.category
}}/>

:::note
On Android, some devices have a built-in QR code reader feature in the default camera app. If that is not the case for you, use the [QR & Barcode Reader by TeaCapps](https://play.google.com/store/apps/details?id=com.teacapps.barcodescanner&hl=en&gl=US).
:::

#### On an emulator: use the ADB command

If you are using an emulator, use the ADB command to enable in-app features.

In Contentsquare, select the Mobile icon in the menu top bar then select your application ID, and "Copy this ADB command".

![](~/assets/android/log-visualizer-access-adb.png)

The following command is copied to the clipboard:

```shell
adb shell "am start -W -a android.intent.action.VIEW -d cs-{{packageName}}://contentsquare.com?activationKey={{uniqueActivationKey}}\&userId={{userId}}"
```

To execute the ADB command:

1. Plug your Android phone into your Computer (or use an emulator).
1. Make sure that only one phone or emulator is connected or running.
1. Start Android Studio.
1. Open the Terminal view.
1. Paste the ADB command into the Terminal and press <kbd>Enter</kbd>.
1. Switch to your phone or emulator and follow the steps on the screen.

### Contentsquare Log Visualizer

<Render file="en/mobile/getting-started-log-visualizer" params={{
  platform: frontmatter.category
}}/>

## Get user consent

<Render file="en/mobile/getting-started-get-user-consent"/>

### User opt-in

The SDK treats users as **opted-out by default.** 

To start tracking, forward user consent with `optIn()`.
Calling this method generates a user ID and initiates tracking.

Handle user consent by implementing a UI for privacy preferences. Assuming you have an opt-in screen with a button to give consent, the code could look like this:

<Tabs syncKey="android-lang">
  <TabItem label="Java">
    ```java
    import com.contentsquare.android.Contentsquare;

    Button optinButton = ...
    optinButton.setOnClickListener(view -> {
        Contentsquare.optIn(view.getContext());
        // Then finish initialization and move to the next screen...
    });
    ```
  </TabItem>
  <TabItem label="Kotlin">
    ```kotlin
    import com.contentsquare.android.Contentsquare

    val optinButton: Button = ...
    optinButton.setOnClickListener {
        Contentsquare.optIn(it.context)
        // Then finish initialization and move to the next screen...
    }
    ```
  </TabItem>
</Tabs>

:::note[Going further]
For advanced configuration regarding user consent or personal data handling, see [Privacy](/en/android/privacy/).
:::

## Track your first screens

<Render file="en/mobile/getting-started-track-first-screens"/>

### Sending screenview events

Screen tracking is achieved by sending a `screenview` event each time a new screen is displayed on the user's device. 

To trigger a screenview each time an activity becomes visible, place the call in the `onResume()` method (XML layouts only):

<Tabs syncKey="android-lang">
  <TabItem label="Java">
    ```java
    import com.contentsquare.android.Contentsquare;

    public class MyActivity extends Activity {
        @Override
        public void onResume() {
            super.onResume();

            // Send screenView
            Contentsquare.send("screen_name");
        }
    }
    ```
  </TabItem>
  <TabItem label="Kotlin">
    ```kotlin
    import com.contentsquare.android.Contentsquare

    class MyActivity : Activity() {
        override fun onResume() {
            super.onResume()

            // Send screenView
            Contentsquare.send("screen_name")
        }
    }
    ```
  </TabItem>
</Tabs>

#### Jetpack Compose support

To enable Jetpack Compose support, add a new dependency to your Gradle build file.

<Tabs>
  <TabItem label="Groovy">
    <Code lang="groovy" title="build.gradle" code={`
implementation 'com.contentsquare.android:compose:${frontmatter.version}'
    `}/>
  </TabItem>
  <TabItem label="Kotlin">
    <Code lang="kotlin" title="build.gradle.kts" code={`
implementation("com.contentsquare.android:compose:${frontmatter.version}")
    `}/>
  </TabItem>
</Tabs>

Attention must be paid to recompositions. The call should be wrapped using `TriggeredOnResume` to ensure only one screenview is triggered when a given screen is presented to the user.

```kotlin
import com.contentsquare.android.Contentsquare
import com.contentsquare.android.compose.analytics.TriggeredOnResume

@Composable
fun MyComposable(data: Data) {
    TriggeredOnResume {
        Contentsquare.send("screen_name")
    }
	// ...
}
```

### Implementation recommendations

From a functional perspective, a screenview should be triggered in the following cases:

- When the screen appears on the device
- When a modal or pop-up is displayed
- When a modal or pop-up is closed, returning the user to the screen
- When the app is brought back to the foreground (after being minimized)

:::note[Specific triggers]
Depending on how your app is built (Popups, Webviews, Redirections, etc...), you might need specific implementation use cases for triggering screenview events.

See the [dedicated section on screen tracking](/en/android/track-screens/#implementation-recommendations). 
:::

#### Tracking app launch

Most events collected by the SDK require a screenview event to be sent first so they can be associated with that screen; otherwise, they will be discarded. If you need to collect events from the moment the app launches, you should trigger a screenview event immediately after the SDK has started.

Refer to [our guide](/en/android/track-screens/#when-to-send-your-first-screenview) for implementation examples.

#### Screen name handling

It is necessary to provide a name for each screen when calling the screenview API.

As a general rule, keep distinct screen names under 100. As they are used to map your app in Contentsquare, you will want something comprehensive.
The screen name length is not limited on the SDK side. However, the limit is 2083 characters on the server side.

More on [screen name handling](/en/android/track-screens/#how-to-name-screens).

:::tip[Tracking plan]
To get the most out of your data, it’s best to follow a tracking plan. This way, you’ll capture every step of the user’s journey without missing important interactions, giving you a complete picture of how your app is used.
:::

## Test your setup

<Render file="en/mobile/getting-started-test-setup" params={{
  tools: "Android Studio or Log Visualizer",
}}/>

### Visualize events in Contentsquare

<Render file="en/mobile/getting-started-visualize-events"
params={{
  platform: frontmatter.category
}}/>

### Visualize data in Contentsquare

<Render file="en/mobile/getting-started-visualize-data"/>

## Sample app

To explore some of these features in context, check our Android sample app.

<RepoCard
  repo="ContentSquare/android-sample-app"
/>

## Next steps

<Render file="en/mobile/getting-started-next-steps"/>

<CardGrid>
  <LinkCard
    title="Custom Variables"
    description="Collect additional details about the screen or the user."
    href="/en/android/track-custom-variables/"
  />
  <LinkCard
    title="Dynamic Variables"
    description="Collect additional information about the session."
    href="/en/android/track-dynamic-variables/"
  />
  <LinkCard
    title="Transactions tracking"
    description="Associate user’s session with their potential purchases and corresponding revenue."
    href="/en/android/track-transactions/"
  />
  <LinkCard
    title="WebViews"
    description="For native apps which embark web applications or pages."
    href="/en/android/track-webviews/"
  />
  <LinkCard
    title="Session Replay"
    description="Collect data for Session Replay in compliance personal data masking."
    href="/en/android/session-replay/"
  />
  <LinkCard
    title="Error Analysis"
    description="Track API errors and application crashes with automated collection and privacy-safe debugging tools."
    href="/en/android/error-analysis/"
  />
</CardGrid>

---

# Privacy

URL: https://docs.contentsquare.com/en/android/4-37-0/privacy/

To learn about Contentsquare privacy practices, see our [Privacy Center](https://contentsquare.com/privacy-center/) and [Privacy Policy](https://contentsquare.com/privacy-center/privacy-policy/).
## Handling User Consent
Contentsquare collects usage data on your app. **By default, the SDK will consider every new user to be opted-out.** To start tracking, the SDK [Opt-in API](#opt-in) must be called.
You are responsible for handling the UI asking users for their consent and allowing them to manage their privacy settings. Use the Contentsquare [SDK APIs](#privacy-apis) to pass the user decision to the SDK.

:::note
If for some reason you think that securing user consent is not required for your app, discuss it during the Implementation process with your main contact.
:::

## Privacy APIs

Contentsquare provides APIs to manage the user consent.

### Opt-in

Use the Opt-in API to get user consent. Calling this API will generate a user ID and initiate tracking.

```kotlin
import com.contentsquare.android.Contentsquare

// To opt in to CS Tracking
Contentsquare.optIn(context) // non-null Context
```

### Opt-Out

When this API is called, tracking stops immediately, all settings are reset (Session number, Page number...) and all files and directory regarding to Contentsquare are deleted. This means that the user ID is deleted. The SDK will never track and collect any data from the user's phone unless the Opt-in API is called again.

```kotlin
import com.contentsquare.android.Contentsquare

// To opt out of CS Tracking
Contentsquare.optOut(context) // non-null Context
```

### Get Contentsquare User ID

Use this API to get the [Contentsquare User ID](#contentsquare-user-id). This can be used to make a data request to Contentsquare as part of an end user request.

```kotlin
import com.contentsquare.android.Contentsquare

// Get CS User ID
Contentsquare.getUserId()
```

:::note
This API can return an `"UNKNOWN"` string if the SDK has not been started or is under initialization.
You can use `Contentsquare.wasInitialized()` to check if the SDK has been successfully initialized.
:::

### Enrichment API

[The Enrichment API](/en/api/enrichment/) allows for enriching the behavioural data tracked by Contentsquare client-side, with other session-based data that can be sent server-side.

During a visit on an app, you can interact with Contentsquare’s SDK to pull those identifiers with the following SDK APIs:

```kotlin
val projectId = Contentsquare.getProjectId()
val sessionNumber = Contentsquare.getSessionNumber()
// store these Contentsquare session identifiers in your backend
```

:::note
This API can return null if the SDK has not been started or is under initialization.
You can use `Contentsquare.wasInitialized()` to check if the SDK has been successfully initialized.
:::

### Stop / Resume Tracking

Use stop and resume tracking APIs to completely exclude areas of the App from tracking.
When `stop` is called, the SDK pauses all tracking (Analytics, Session Replay, Errors).
When `resume` is called, the SDK resumes all tracking (Analytics, Session Replay, Errors).

```kotlin
import com.contentsquare.android.Contentsquare

// Stop tracking
Contentsquare.stopTracking()

// Resume tracking
Contentsquare.resumeTracking()
```

:::note
As this mechanism pauses the tracking, make sure that you call resume once your user exits the sensitive screen. Best practice would be to link these method calls to lifecycle events on activities/fragments.
:::

### Stop gesture tracking

Gestures are tracked automatically. In specific cases, you might want to stop gesture tracking momentarily for some Activities.
To do so, you can use our public API:

```kotlin
Contentsquare.doNotTrack(@NonNull Class<? extends Activity>... activitiesClasses) // filters the activities according to their classes
```

In addition, it is possible to stop the tracking of individual Views. We also offer a public API:

```kotlin
Contentsquare.doNotTrack(@NonNull View view) // filters a single view instance
```

In case you still need to track these Activities or Views but the automatic gesture tracking does not work, we offer the possibility to do this manually by capturing and sending the gesture events via our public API method:

```kotlin
class MainActivity : AppCompatActivity() {

  ..........

    override fun dispatchTouchEvent(ev: MotionEvent): Boolean {
        Contentsquare.consumeEvent(ev)
        return super.dispatchTouchEvent(ev)
    }
}
```

### Forget me

**Permanently breaking the link between the collected data and actual user.**

This resets all settings and deletes all files and directories from the user's device (User ID is deleted). If user is opted in, next time user starts the app, the SDK will re-start its collection mechanisms as if this was the first ever run for a new user, under a new user id. Configurations will be fetched from the server and application tracking will be on.

:::note
"Forget me" only works when user is opted in.
:::

:::warning[Deprecated]
This API is deprecated. To achieve the same effect use [Opt-out API](#opt-out) to delete all files and settings including the user ID, and call [Opt-in API](#opt-in) on next app launch if tracking needs to resume.
:::

```kotlin
import com.contentsquare.android.Contentsquare

Contentsquare.forgetMe()
```

### Disable user tracking across sessions

If you don't want to link the different sessions of a user to the same userID, you can follow these instructions to reset the userID at each app start:
1. Disable [SDK auto-start](/en/android/disable-autostart/)
1. Implement the following:

    ```kotlin
    class MyApplication : Application() {
        override fun onCreate() {
            super.onCreate()

            // Start Contentsquare SDK
            Contentsquare.start(this)
            Contentsquare.optOut(this)
            Contentsquare.optIn(this)
        }
    }
    ```

    Starting the SDK manually using `start()` will ensure that opt-out is called right after the start of the SDK (no event tracked in between).

    Calling `optOut()` will delete the previous userID.

    Calling `optIn()` will set a new one.

:::note
If you are monitoring the network requests, you may see event requests being sent at app start. This is expected as there may be events from the previous session that haven't been sent yet. The opt-out API makes sure to send all data stored locally before stopping the tracking and wiping all data.
:::

### Session Replay privacy APIs
As part of Session Replay capabilities, Contentsquare provides masking and un-masking APIs to control how data is collected. See [Session Replay Personal data masking](/en/android/session-replay/#personal-data-masking) for more information.

## Play Store Privacy Guidelines Compliance
The Contentsquare SDK is compliant with the [Play Store Privacy guidelines](https://support.google.com/googleplay/android-developer/answer/10144311?visit_id=637574546075634450-3505282410&rd=1).

## User identifiers

### Contentsquare User ID
The SDK generates a unique user ID (UUID) (random hash) which is specific to users on their device. Contentsquare cannot identify a user across devices.
This user ID and all collected data are stored for 13 months.
We don’t persist the UUID when the app is deleted and re-installed. The SDK generates a new UUID after install or re-install.
Contentsquare does not share this user ID with any third parties.

### "User identifier" feature
Contentsquare provides the ability to search for session(s) associated with a specific visitor, based on an identifier provided by the customer. See [User identifier feature](/en/android/session-replay/#send-user-identifier) for more information.

### Usage of App Set ID
Contentsquare does not use App Set ID.

---

# Security

URL: https://docs.contentsquare.com/en/android/4-37-0/security/

## Transmission and hosting
Our server uses HTTPS to make sure that data is encrypted in transport.

## Deep links usage in Contentsquare SDK

As outlined in the [Android Security Guidelines](https://developer.android.com/privacy-and-security/risks/unsafe-use-of-deeplinks), there are security risks associated with using deep links.

To address these concerns, the Contentsquare SDK implements robust data validation for deep links and safeguards to prevent deep link hijacking, following these guidelines.

If you have specific security concerns and prefer to remove the Contentsquare SDK deep link declaration from your application, add the following code snippet to your `AndroidManifest.xml` file inside the `<application>` tag:

```xml
<application>

  <activity
      android:name="com.contentsquare.android.analytics.internal.features.deeplink.DeepLinkActivity"
      tools:node="remove" />

</application>
```

Note that removing the deep link will disable the In-app feature within your application.

---

# Third-party libraries license

URL: https://docs.contentsquare.com/en/android/4-37-0/third-party-libraries-license/

## Third party libraries license
| Libraries      | License            | Copyright                                                    | 
| -------------- | ------------------ | ------------------------------------------------------------ |
| Androidx       | Apache-2.0 license | Copyright 2024 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the "License"); |
| Kotlinx        | Apache-2.0 license | Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.  |

---

# Session Replay

URL: https://docs.contentsquare.com/en/android/4-37-0/session-replay/

import levelgrand from '~/assets/sdk-images/img-sr/android-quality-levelgrand.gif'
<Render file="en/plans/dem"/>

## Prerequisites

### Screen tracking implemented

As **session data collection will start at the 1st screenview event**, it is required to have screen tracking implemented. Make sure to follow the [Track screens](/en/android/track-screens/) sections.

### Updating to latest SDK version

In order to enable Session Replay in your app and get the most stable version, it is required to upgrade the SDK to its latest version.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time (or choose to take this update as an opportunity to review your Privacy related implementation), make sure to follow the [Privacy](/en/android/privacy/) section.

## Jetpack Compose support

:::note[Beta version]
  Jetpack Compose support for Session Replay for Android is currently available in beta, starting from 4.20.0.
:::

To enable Jetpack Compose support in Session Replay, it is necessary to add a new Gradle dependency to your Gradle build file. Make sure to follow the [Track screens](/en/android/track-screens/#jetpack-compose-support) section.

## WebView

WebView events can be collected as part Session Replay under the following conditions:
 - The WebView is injected
 - The web page implements the **Tag in WebView mode**

For the full guide to implementation of WebView Tracking, see 📚 [Mobile Apps Webview Tracking](/en/webview-tracking-web-tag/).

WebView personal data masking is entirely handled on the web side — see 📚 [Personal Data handling in WebView](/en/webview-tracking-web-tag/session-replay/#personal-data-handling).

## Testing and Debugging

### Enable Session Replay on your device

Since not all sessions are collected (depending on the percentage set in the Contentsquare back office), we have implemented an option to force data collection for Session Replay on your device for testing and debugging purposes.
This option can be enabled from the in-app features settings:

1. [Enable in-app features](/en/android/in-app-features/#enable-in-app-features)
1. Open in-app features settings with a long press on the snapshot button
1. Under "Session Replay", toggle "Enable Session Replay" on
1. Kill the app
1. Start app, a new session is starting with Session Replay enabled

![](~/assets/sdk-images/img-sr/android-enable-sr.png)

#### How do I know if Session Replay is enabled?

There are 2 places where you can check if Session Replay is enabled:

**In the logs:** The log `CSLIB|SessionReplay: Session Replay is starting.` will confirm that Session Replay is enabled.

**In in-app features settings:** Below the "Enable "will start at next app start" *(see below [Access the replay](#access-the-replay))*, you will either see:
- `No replay link available` which means Session Replay is not running for the current session
- `Get Replay link` which means Session Replay is running for the current session

### Access the Replay

The replay will be **available within 5 minutes**. Only the "ended screen views" are processed *(we know a screenview is ended when we start receiving data for the next screenview)*. This means that you will be able to replay your session up to the previous screenview if the session is still running.

Since 4.6.0, the Session can be accessed by tapping on `Get replay link` button from the in-app features settings:

![](~/assets/sdk-images/img-sr/android-get-replay-link.gif)

## Personal Data Masking

The Session Replay feature collects every user interaction within your app. In order to respect the user’s right to privacy, the Contentsquare SDK:
- Masks everything by default
- Fully mask your app(s) through remote configuration in the CSQ Console
- Control which parts of your user interface are collected using our masking and unmasking APIs, if the full masking is not set for the app version

### Masking mechanisms

Every single UI element is converted into a highly pixelated image to reach a very low resolution. Text and images will appear very blurry so that the content cannot be identified.

#### Original VS Replay fully masked

![](~/assets/sdk-images/img-sr/android-sr-masked.png)

### Masking rules priority

<Render file="en/mobile/android/masking-rules-priority"/>

### Masking rules

The masking rules can be applied in two ways:
- Through [remote masking configuration in the CSQ Console](#remote-masking-configuration-in-the-csq-console)
- Using the SDK [public masking APIs](#public-masking-apis)

#### Remote masking configuration in the CSQ Console

##### Full masking

In the event of a personal data leak, the full masking configuration in the Console enables a swift and comprehensive masking of the specified application version(s). This ensures that all elements across all screens of these version(s) are completely masked.

This configuration can be accessed through the "Data Masking" tab in the Console and is supported only on Android SDK version 4.36.0 and later.

It provides three configuration capabilities:

- A toggle to "Mask all eligible versions," enabling the masking of all app versions embedding the CS Android SDK 4.36.0 or later.
- An "App version" field to mask specific app version(s)
- A "CS SDK version" field to mask the app version(s) embedding the specified SDK version(s)

#### Public masking APIs

##### Default masking

:::warning
You should not perform any call on Contentsquare API before the first visible Activity to be sure our SDK is initialized.
If you perform a call too soon, it will be discarded and you will see the following log:
```
CSLIB Contentsquare SDK: Unable to call the public API, make sure you are not opted out of the Contentsquare tracker and SDK was correctly initialized.
```
:::

All Android View elements, their subclasses and Jetpack Compose components are fully masked by default.
The SDK provides an API to change the default masking state:

```kotlin
/**
* Set the default masking of all the views.
* @param masked true mask all views by default.
*               false unmask all views by default.
*               The default value is true.
*/
setDefaultMasking(boolean masked)
```

:::note
If you change the default masking state to `false`, `EditText` will stay masked by default. This does not apply to Jetpack Compose composables, meaning `TextField` components will also be unmasked.
:::

##### Masking/Un-masking by instance

:::warning
Animations are not supported when masking by instance. To know more, see [Animations are not supported when masking by instance or type](/en/android/session-replay/#animations-are-unsupported-when-masking-by-instance-or-type)
:::

<Tabs syncKey="android-views-compose">
   <TabItem label="Views">
   Use `mask(View view)` and `unmask(View view)` methods to mask or unmask a specific view instance.

   ```kotlin
   /**
   * Masks a specific {@link View} during data collection for Session Replay.
   *
   * @param view an instance of {@link View} to be masked.
   */
   public static void mask(@NonNull View view)
   ```

   ```kotlin
   /**
   * Unmasks a specific {@link View} during data collection for Session Replay.
   *
   * @param view an instance of {@link View} to be unmasked.
   */
   public static void unMask(@NonNull View view)
   ```

   Following the previous example, we have the views hierarchy in which all instances of TextView type are unmasked with the default masking state of all the views are masked by default.

   ![](~/assets/sdk-images/img-sr/android-unmask-view-instance.png)

   In this example you may want to mask a specific text view TextView1, call `mask(textView1)` then this instance of TextView1 will be masked. As you can see in this example the view instance rule overrides the type rule and the default rule.

   </TabItem>
   <TabItem label="Jetpack Compose">
   Use the `Modifier.sessionReplayMask(enableMasking: Boolean)` extension function to mask or unmask a composable.

   ```kotlin
   /**
   * [Modifier] extension function that provides the facility to mask or unmask a composable in
   * Session Replay.
   *
   * @param enableMasking `true` when the target composable has to be masked; `false` otherwise.
   */
   fun Modifier.sessionReplayMask(enableMasking: Boolean): Modifier
   ```

   For example:

   ```kotlin
   Text(
      text = "Text",
      modifier = Modifier.sessionReplayMask(true)  // mask this `Text` composable
   )
   ```

   </TabItem>
</Tabs>

##### Masking/Un-masking by type

The Contentsquare SDK allows masking elements by type for convenience but it isn't the recommended masking mechanism because it will impact all screens of your application. For instance, use this when you have a specific class for presenting user information or for displaying the user profile picture to make sure it always stays mask.

:::warning
Animations are not supported when masking by type. To know more, see [Animations are not supported when masking by instance or type](/en/android/session-replay/#animations-are-unsupported-when-masking-by-instance-or-type)
:::

<Tabs syncKey="android-views-compose">
   <TabItem label="Views">
   Use `mask(Class type)` and `unmask(Class type)` methods to mask or unmask a specific type.

   ```kotlin
   /*
   * Masks all instances of a specific {@link Class}
   * and subclass of a view during data collection for Session Replay.
   *
   * @param type {@link Class} to be masked.
   */
   public static void mask(@NonNull Class<?> type)
   ```

   ```kotlin
   /**
   * Unmasks all instances of a specific {@link Class}
   * and subclass of a view during data collection for Session Replay.
   *
   * @param type {@link Class} to be unmasked.
   */
   public static void unMask(@NonNull Class<?> type)
   ```

   For example, given the views hierarchy:

   ![](~/assets/sdk-images/img-sr/android-unmask-type.png)

   The default masking state of all the views is masked by default and for example, you may want to unmask all **TextView** types, you can call `unMask(TextView.class)` then all instances of **TextView** type will be unmasked. In this example, the button is also impacted by the unmask API because the button is also a **TextView** type (a subclass of **TextView**). You can also notice that the **EditText** is also a **TextView** type but it is not impacted by `unMask(TextView.class)` call because the **EditText** type is masked by default [see Masking rules priority](#masking-rules-priority).

   </TabItem>
   <TabItem label="Jetpack Compose">
   As of now, it is not possible to mask or unmask composables by type.

   Alternatively, you can mask or unmask a group of composables by wrapping multiple composables within the same parent, then applying the `Modifier.sessionReplayMask(enableMasking: Boolean)` modifier on the parent.
   </TabItem>
</Tabs>

##### Masking and Unmasking behaviors on a parent view

<Tabs syncKey="android-views-compose">
   <TabItem label="Views">
   The masking of the ViewGroup (RelativeLayout, LinearLayout, ConstraintLayout, etc..) is supported. If a parent view is masked all of its children will inherit the masking state from the parent. The children's view masking state can be overridden by using a specific API to mask or unmask by instance or by type.

   ![](~/assets/sdk-images/img-sr/android-unmask-parent.png)

   For example, given the view hierarchy with the default masking state. All the views are masked by default in the initial state and in this case, you may want to unmask all children’s views of the parent view **LinearLayout1**, you can call `unMask(linearLayout1)` then all children views of the parent view **LinearLayout1** will be unmasked. As noticed here the **EditText** is not impacted from the parent call because the **EditText** type is masked by default [Masking rules priority](#masking-rules-priority).
   </TabItem>
   <TabItem label="Jetpack Compose">
   The masking of a parent layout (for example `Column`, `Row`, or `Box`) is supported. If a parent composable is masked, then all of its children will inherit the masking state from the parent. The children's masking state can be overridden by using the dedicated `Modifier.sessionReplayMask(enableMasking: Boolean)` function.

   For example:

   ```kotlin
   Column(
      modifier = Modifier.sessionReplayMask(true)        // mask every children
   ) {
      Row {
         Text(
            text = "Text",
            modifier = Modifier.sessionReplayMask(false) // unmask this `Text` composable
         )
      }
      Row {
         Text(
            text = "Text 2",                             // this `Text` composable will be masked, as it inherits the masking state from the parent
         )
      }
   }
   ```
   </TabItem>
</Tabs>

##### Handling Transparent Views

The SDK processes masked views first (using the [Masking rules priority](/en/android/session-replay/#masking-rules-priority)), ensuring that if a view has transparency and is not masked, it will not expose any personal data since masked views have already been processed.

This approach ensures the protection of sensitive information, even in UIs with transparent views.

### Implementation recommendations

#### Where to perform masking operations

Masking operation should be performed before the first draw of the view and it should always be called on the UI thread.

At the **Activity** level, call the masking API methods on the `onCreated` lifecycle method.

At the **Fragment** level, call the masking API methods on the `onViewCreated`  lifecycle method.

:::note
The masking API stores the view element to be masked or unmasked inside a WeakHashMap, repeating the masking operation multiple times on the same element will override the old value that is already stored in the map.
:::

##### Keeping track of what is masked

The SDK doesn't provide a list of what is currently masked, if you need to keep track, you probably will have to write your specific wrapper.

##### Masking operations performance impact

You can call `unmask(View view)` multiple times without impacting the SDK performance or your app.

### Masking limitations

#### Maps

You can mask or unmask a Map, that will then be captured as an image in the replay. However, you won't be able to mask or unmask specific elements within the Map.

#### Views embedded into composables

In case a classic view is embedded in a composable container,
the masking (or unmasking) of the composable container is not propagated to the embedded view.

As presented in the following code example, masking of the parent `Column` container is propagated
to the child composable, but not to the embedded views.
If you also want to mask embedded views, you need to mask them additionally,
with `Contentsquare.mask(View)`. If the embedded and additionally masked view
is a `ViewGroup`, masking of it will be correctly propagated to its child views.

```kotlin
// Masked Compose container
Column(Modifier.sessionReplayMask(true)) {
    // Parent Column masking is propagated to embedded composables
    Text(text = "Masked by Column")
    // Parent Column masking is not propagated to embedded view
    AndroidView(factory = { context ->
        TextView(context).apply { text = "Not masked by Column" }
    })
    // Workaround: apply additional masking to embedded view
    AndroidView(factory = { context ->
        TextView(context).apply {
            Contentsquare.mask(this)
            text = "Masked"
        }
    })
}
```

#### Navigate between fragments using animations

Masking rules don't apply on Fragments using animations. So to mask this type of Fragment, mask the container view where the Fragment is inserted, rather than masking its content. This ensures that the Fragment content remains masked during transitions.

Additionally, you can unmask some specific views within the Fragment content, by using `Contentsquare.unmask(View)` or `Modifier.sessionReplayMask(false)`.

#### Rotated or Scaled Views

The masking solution relies on the bounding box reported by a view to determine the area that should be masked.
In most cases, this approach is sufficient, as the bounding box accurately reflects the view's position and dimensions
on the screen.

However, when a view is rotated or scaled, the bounding box no longer represents the view's actual position or size
after the transformation.

To prevent any personal data from being leaked, we advise adopting one of the following approaches:

- **Mask the Parent View**: Apply masking to the parent container of the transformed view. This ensures that the entire area encompassing the rotated or scaled view is covered, regardless of transformations.

- **Mask the Entire Window**: In case of complex layouts, transformations, or critical scenarios where absolute certainty is required, mask the entire window to guarantee that no personal data is exposed.

These approaches provide the highest level of confidence in preventing personal data leakage while working within the constraints of the current implementation.

## Advanced features for Experience Monitoring

<Render file="en/plans/dem"/>

### Send user identifier

Contentsquare provides the ability to search for session(s) associated with a specific visitor, based on an identifier: email, phone number, customer ID…
As these values are typically personal data, from the moment the SDK is collecting the User Identifier, we immediately encode the value using a hashing algorithm so that the information is hidden and can never be accessed.

Use the following code to send a user identifier:

```kotlin
Contentsquare.sendUserIdentifier("any_identifier")
```

When called, the SDK will log:

```
CSLIB: User identifier hashed sent {value}
```

#### Sending a user identifier for each session

You may want to send the user identifier for each session. While triggering the user identifier at app launch will cover most cases, it will not be enough. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See Session definition section for more information.

That is why we also recommend sending the user identifier every time the app enters foreground.

You can use the [`ProcessLifecycleOwner` Class](https://developer.android.com/reference/androidx/lifecycle/ProcessLifecycleOwner) to detect foreground and trigger a `sendUserIdentifier()`.

#### Limitations

- User identifier max length is 100 characters (if the limit is exceeded, the user identifier will not be handled and you will see an error message in the Console/Logcat)
- Only the first 15 user identifiers per view will be processed on server side
- The SDK will trim and lowercase user identifier
- User identifier event are not visible in Log visualizer

## Integrations

Contentsquare provides the ability to retrieve the link of the replay to be attached to other vendors such as Voice of Customer or Crash reporting tools.

### Get current replay Link

Generate a link to the replay of the current session. This link can be pushed to any internal or 3rd-party tool as a custom property/variable.
For instance, you can add the replay link to:
 - Each user request sent to your customer service tool
 - Each user voting in your Voice of Customer tool
 - Each user session in your App Performance, Observability tool
 - ...

:::note
The replay link can also be accessed from the in-app features settings. See [Access the Replay](#access-the-replay)
:::

:::warning
For the API to return a valid replay link, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before it's called, since Session Replay only starts after the first screenview event.
:::

Use the following code to retrieve a Session Replay link each time it changes:

```kotlin
Contentsquare.onSessionReplayLinkChange { link ->
   // Send link to your customer service tool
}
```

To unregister the current callback, pass `null` as the argument:

```kotlin
Contentsquare.onSessionReplayLinkChange(null)
```

To avoid memory leaks, you can use the [`ProcessLifecycleOwner` Class](https://developer.android.com/reference/androidx/lifecycle/ProcessLifecycleOwner) to detect foreground and background events and register or unregister the callback.

When a new link is available, the SDK will also log:

```
CSLIB: SessionReplay link: https://app.contentsquare.com/quick-playback/index.html?pid={projectId}&uu={userId}&sn={sessionNumber}&recordingType=cs
```

:::warning
You can only have one callback at a time. Calling this API twice will override the previous callback.
:::

The replay will be **available within 5 minutes**. Only the "ended screen views" are processed *(we know a screenview is ended when we start receiving data for the next screenview)*. This means that you will be able to replay the session up to the previous screenview if the session is still running.

## How Session Replay works

### Initialization

Sessions can be collected for Session Replay if the Session Replay feature has been enabled for your project and the session matches the collection criteria.

The following conditions will have an impact on which sessions will be collected:

- **User consent**: The users have given their **consent** (if required)
- **Collection rate**: The session is being **drawn for collection** (see Collection rate below)
- **Compatibility**: The **OS version** is supported.
- **App version**: The **app version** is not part of the block list (see App version block list below)

Note that, when Session Replay is turned off, no content specific to Session Replay is collected whatsoever. Also note that the standard Contentsquare analytics tracking remains unaffected by this.

#### Collection rate

Data collection for Session Replay is based on a percentage of the total sessions. By default data collection for Session Replay is disabled.

During the early access phase, the percentage or collected sessions will be set to 1% at the beginning. It will then be adjusted according to:
- The traffic on your app
- The volume of collected sessions set in the contract

#### Compatibility

See [compatibility](/en/android/compatibility/).

#### App version block list

Contentsquare team can add versions of your app in the block list to make sure Session Replay does not start on these versions. This is done when a problem is discovered on a specific version of your app, such as a Personal Data for which the masking was forgotten. This allows to keep Session Replay to work on the other app versions (especially the new ones with the fix).

### Data collection

The SDK monitors the application lifecycle events and the view hierarchy, and generates Session Replay data from the behavior of the app, the content of the screen and the interaction of the user.
These events are then locally stored, and eventually sent to our servers in batches. We then aggregate that data to create usable visual information into our Web Application, which you use to gather insights.

:::tip
Data collection for Session Replay will start at the 1st screenview event.
:::

### Quality levels

Session Replay has three quality levels available: High, Medium, Low. Quality level is defined by the frame rate and the image quality.
The quality level is defined independently for **Wi-Fi** and **Cellular Network**.
The default level for both is **Medium**.
For more information on network data consumption see: [Performance Impact section](#performance-impact).

:::note
If you require a particular setting, reach out to your Contentsquare contact that will make the adjustment in the project configuration.
:::

#### Quality level examples

Select the image to open it in full size and GIF format.
<a href={levelgrand.src}>![](~/assets/sdk-images/img-sr/sr-quality-android-static.png)</a>

### Network and Storage

By default, Session Replay data can be sent over **cellular network**. If the particular context of your app or users requires a very limited impact on cellular data consumption, **sending data over cellular network can be completely disabled**. Once disabled, data will be sent when the device is using Wi-Fi.

Reach out to your Contentsquare contact that will make the adjustment in the project configuration.

#### Storage

<Render file="en/mobile/session-replay/android-storage-limit"/>

### Requests

The maximum request size is 1Mbyte.

Requests are sent:
- On screen change
- When [Replay Link API](#get-current-replay-link) is called

## Performance impact

### Performance impact mitigation

Most operations related to Session Replay are performed on dedicated background threads, for a minimal impact on the main thread. If CPU usage is too high for background tasks, some expensive calculations will be discarded. To make sure of this, we run performance tests on testing applications, along with the Android profiler.

If too much time is spent on the main thread, the [quality level](#quality-levels) will decrease automatically: from high to medium to low to a complete stop if required. Once conditions are back to normal, quality level will be changed back to the default value set in the configuration.

We defined our network strategy to have the lesser impact on CPU, memory and data consumption of the users devices. We measure these impacts, using the Android profiler and dedicated logging system, for each release of our SDK.

You can reduce the quality level if you want to favor performance impact over quality.

### Performance test results

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well. These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.

The performance results were obtained under the following conditions:

| Condition                                   | Value            |
| --------------------------------------------| ---------------- |
| Device model                                | Pixel 5          |
| Android version                             | 34 (Android 14)  |
| Quality level                               | High             |
| Default Masking State                       | Disabled         |

:::note
That the numbers provided below will vary depending on the user's device and Android version.
:::

| Property                                                                    | Value    |
| --------------------------------------------------------------------------- | ---------|
| Total % on main thread (CPU Profiling)                                      | &lt;15 %    |
| Memory overhead                                                             | 10 MB    |
| Session Replay data transmitted over network during 1 minute of use:        |          |
|  - with "High quality" level                                                | &lt;722 KB  |
|  - with "Medium quality" level                                              | &lt;505 KB  |
|  - with "Low quality" level                                                 | &lt;313 KB  |

#### Additional info on performance test procedure

**CPU Usage Test**
We are profiling our Demo app with and without the SDK dependency by following the same use case.
We are measuring the CPU peak for both versions of the app and we are computing the difference.

**RAM Usage Test**
We are profiling our Demo app with and without the SDK dependency by following the same use case.
We are measuring the RAM usage peak for both versions of the app and we are computing the difference.

**Memory Leak Test**
We are profiling our demo app and we are using the ADB Monkey tool to create random user input events.
During this time we are monitoring the RAM behavior for any anomaly.
We are using the Memory Profiler to identify leaks.

**Data consumption**
We replay a predefined, repeatable and automated user scenario on our demo app and all data sent is measured in kB/min.

**JankStats**
If you use the alpha library from Google to monitor the jank frames and you already have some jank frames in your application (main thread overwhelmed), you can expect an increase of 1% or 2% with data collection for Session Replay activated.
Data collection for Session Replay requires to perform tasks on the main thread (screen capture and view hierarchy inspection).

## Known limitations

### SurfaceView

[SurfaceView](https://developer.android.com/reference/android/view/SurfaceView) are not supported for now. They will be displayed as white views. This includes views used for video streaming and camera previews, ensuring that no such content is captured.
### Dialogs

[Dialogs](https://developer.android.com/reference/android/app/Dialog) and [Compose Dialogs](https://developer.android.com/jetpack/compose/components/dialog) are not supported. They are not visible in replays.

### Views on top of the application views

If your application uses some library that displays views on top of your application views hierarchy, like a [MaterialShowcaseView](https://github.com/deano2390/MaterialShowcaseView), these views may not be visible in replays.

### Animations are unsupported when masking by instance or type

When views are masked by instance or type, personal data may leak during animations in the collected session.

To prevent this, there are two possible options: masking the entire screen or masking around the animation.

**Mask the entire Screen**

Apply default masking to the entire screen with `setDefaultMasking(true)`, without using any [instance-based](/en/android/session-replay/#maskingun-masking-by-instance) or [type-based](/en/android/session-replay/#maskingun-masking-by-type) masking/unmasking.
After the user navigates to another screen, you can deactivate the default masking with `setDefaultMasking(false)` and use any view masking APIs.

**Mask around the animation**

Mask the entire screen just before the animation, following the [Masking rules priority](/en/android/session-replay/#masking-rules-priority).
This involves reversing any [instance-based](/en/android/session-replay/#maskingun-masking-by-instance) or [type-based](/en/android/session-replay/#maskingun-masking-by-type) masking/unmasking for views and then calling `setDefaultMasking(true)`.
After the animation, you can restore the previous masking settings by instance or type.

## Troubleshooting

### Requests are not sent from an Android emulator

If you struggle to watch a replay created on an emulator/simulator, it may be due to some network constraints applied on your computer (VPN, company network restrictions, etc.). Check your configuration or use a real device.

See [Requests are failing](/en/android/troubleshooting/#requests-are-failing) for more information about our endpoints and requests.

#### Very long session on an Android emulator

It is important to remember that **an app kill does not end a session**. See [Session definition](/en/android/how-the-sdk-works/#session-definition) for more information.
If you leave the simulator/emulator running with the app in foreground, the session will not end, even if you are inactive.
To better reflect actual end user behavior and avoid unusually long sessions (last hours), put the app in background or kill it.

#### Unmasking with CS InApp features is broken

When activating the toggle in CS InApp to unmask the elements in the Session Replay, it can sometimes give a strange result with some elements still masked.
This is due to the fact that unmasking with InApp features acts differently than when done in the code by the app developer.
To ensure a session is fully unmasked as it would be if it was done in the code of the app, follow these steps:
 - Toggle the "Unmask ..." switch
 - Navigate to a different screen
 - Go back to the previous screen
 - Put the app in background
 - Wait for the session timeout
 - Re-open the app
From this point on, you will have a fully unmasked session.

---

# Track custom variables

URL: https://docs.contentsquare.com/en/android/4-37-0/track-custom-variables/

## Usage
*Custom variables* are additional information on the screen, the user or the session, sent within screenviews.
For example, they can include information on the current layout of a screen, like dark or light mode.

## Limits

### On the server side
 - It is possible to save up to 20 distinct custom variables per screenview. If more are received, only the first 20 custom variables, based on their `index` value, will be kept.
 - The `index` value of custom variable is used to determine which custom variable to be kept. Only `index` value between 1 and 20 will be taken into account.

### On the SDK side
- Every custom variable is composed of `index`, `name` and `value`.
- If you are using the same `index` twice in a single screen only the first (`name`, `value`) pair associated with the `index` will be kept.
- In case `name` (max. 512 characters) or `value` (max. 255 characters) maximum characters length is reached, the SDK will automatically trim the exceeding characters.
- If `name` or `value` are empty, the SDK will instead send the literal string `"cs-empty"`.
- Use a consistent `index` for a given variable within an application - for instance, if the "screen layout" is collected with an `index` of 3, use the slot 3 for this information on every screen of the application.

## Defining custom variables

To define and send custom variables, follow this:

<Tabs syncKey="android-lang">
  <TabItem label="Java">
    ```java
    CustomVar customVar1 = new CustomVar(1, "CustomVarName1", "CustomVarValue1");
    CustomVar customVar2 = new CustomVar(2, "CustomVarName2", "CustomVarValue2");

    CustomVar[] customVars = new CustomVar[] {customVar1, customVar2};

    Contentsquare.send("ScreenName", customVars);
    ```

    <Aside type="warning">
    For consistent analytics, use the same index/name pair values across your application:

    ```java "carousel" title="Screen A"
    CustomVar customVar4 = new CustomVar(4, "hero_banner_type", "carousel");

    CustomVar[] customVars = new CustomVar[] {customVar4};

    Contentsquare.send("ScreenA", customVars);
    ```

    ```java "slider" title="Screen B"
    CustomVar customVar4 = new CustomVar(4, "hero_banner_type", "slider");

    CustomVar[] customVars = new CustomVar[] {customVar4};

    Contentsquare.send("ScreenB", customVars);
    ```
    </Aside>
  </TabItem>
  <TabItem label="Kotlin">
    ```kotlin
    val customVar1 = CustomVar(1, "CustomVarName1", "CustomVarValue1")
    val customVar2 = CustomVar(2, "CustomVarName2", "CustomVarValue2")

    Contentsquare.send("ScreenName", arrayOf(customVar1, customVar2))
    ```

    <Aside type="warning">
    For consistent analytics, use the same index/name pair values across your application:

    ```kotlin "carousel" title="Screen A"
    val customVar4 = CustomVar(4, "hero_banner_type", "carousel")

    Contentsquare.send("ScreenA", arrayOf(customVar4))
    ```

    ```kotlin "slider" title="Screen A"
    val customVar4 = CustomVar(4, "hero_banner_type", "slider")

    Contentsquare.send("ScreenB", arrayOf(customVar4))
    ```
    </Aside>
  </TabItem>
</Tabs>

---

# Track dynamic variables

URL: https://docs.contentsquare.com/en/android/4-37-0/track-dynamic-variables/

## General principles
### Usage
*Dynamic variables* are additional information on the session that can be used to *segment sessions*.

For example, they can include information on the A/B Test variations displayed to the current user.

### Limits

#### On the server side
- It is possible to save up to 40 distinct *dynamic variable keys* per screenview. If more are received, only the first 40 keys will be kept.
- If you are using the same key twice on the same screenview, the last value associated with the key will be collected.

#### On the SDK side
- Every dynamic variable is composed of a pair of key (max. 512 characters) and value (max. 255 characters string or number of type `Long` between 0 and 2<sup>32</sup> - 1). In case these maximums length are reached, the SDK will automatically trim the exceeding characters.
- If key or value are empty, the SDK will instead send the literal string "cs-empty".

## Defining dynamic variables

To define and send a dynamic variable, directly use the key and String/Long value:

```kotlin
Contentsquare.send("my key 1", "my value")
Contentsquare.send("my key 2", 10)
```

**Type of the value** — The value can be either a **whole number** or a **string**. For each case, available features won't be the same in the Contentsquare app:
- For **whole numbers**, you will be able to do some algebra. Example: _sessions with dynamic variable key = "numberOfFriends" and value >= 10_
- For **strings**, auto-completion and Regular Expression will be available. Example: _sessions with dynamic variable key = "accountType" and value = "Premium"_

## Sending a dynamic variable for each session

You may want to send a dynamic variable for each session (like the user's country or store). While **triggering the dynamic variable at app launch will cover most cases, it will not be enough**. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See [Session definition](/en/android/how-the-sdk-works/#session-definition) section for more information.

That is why we also recommend **sending such dynamic variable every time the app enters foreground**.

You can use the [`ProcessLifecycleOwner` Class](https://developer.android.com/reference/androidx/lifecycle/ProcessLifecycleOwner) to detect foreground and trigger a dynamic variable.

---

# Track screens

URL: https://docs.contentsquare.com/en/android/4-37-0/track-screens/

Contentsquare aggregates user behavior and engagement at the screen level. To achieve this, it is necessary to provide a name for each screen by calling a dedicated screenview API.
:::warning
Sessions without at least one screenview will be discarded.
:::

```kotlin
import com.contentsquare.android.Contentsquare

// Sends Screenview
Contentsquare.send("screen_name")
```

## Jetpack Compose support

To enable Jetpack Compose support, it is necessary to add a new dependency to your Gradle build file.

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
    <Code lang="groovy" title="build.gradle" code={`
implementation 'com.contentsquare.android:compose:${frontmatter.version}'
    `}/>
  </TabItem>
  <TabItem label="Kotlin">
    <Code lang="kotlin" title="build.gradle" code={`
implementation("com.contentsquare.android:compose:${frontmatter.version}")
    `}/>
  </TabItem>
</Tabs>

Attention must be paid to recompositions. The call should be wrapped using `TriggeredOnResume` to ensure only one screenview is triggered when a given screen is presented to the user.

```kotlin
import com.contentsquare.android.Contentsquare
import com.contentsquare.android.compose.analytics.TriggeredOnResume

@Composable
fun MyComposable(data: Data) {
    TriggeredOnResume {
        Contentsquare.send("screen_name")
    }
	// ...
}
```

## Screen name handling

The screen name is limited to 2083 characters. However, this limit is not enforced by the SDK, but rather by the Contentsquare servers.

## Implementation recommendations

### General rules

From a functional standpoint, we expect a screenview to be sent:

- When the screen appears on the device
- When a modal or pop-up is displayed
- When a modal or pop-up is closed, returning the user to the screen
- When the app is brought back to the foreground (after being minimized)

### When to send your first screenview

Most events collected by the SDK require a screenview event to be sent first so they can be associated with that screen; otherwise, they will be discarded. If you need to collect events from the moment the app launches, you should trigger a screenview event immediately after the SDK has started.

#### Automatic start

If the SDK is started automatically, you should send your first screenview when your app's life cycle begins. For instance, you can send it in your Application `onCreate()` method:

<Tabs syncKey="android-lang">
  <TabItem label="Java">
    ```java
    import android.app.Application;
    import com.contentsquare.android.Contentsquare;
    
    public class MyApplication extends Application {
      @Override
      public void onCreate() {
          super.onCreate();

          // Send screenView
          Contentsquare.send("Launch screen");
      }
    }
    ```
  </TabItem>
  <TabItem label="Kotlin">
    ```kotlin
    import android.app.Application

    import com.contentsquare.android.Contentsquare
    
    class MyApplication : Application() {
        override fun onCreate() {
            super.onCreate()
    
            // Send screenView
            Contentsquare.send("Launch screen")
        }
    }
    ```
  </TabItem>
</Tabs>

#### Manual start

If the SDK is started manually, you should send your first screenview right after calling `start()`:

<Tabs syncKey="android-lang">
  <TabItem label="Java">
    ```java
    Contentsquare.start();
    Contentsquare.send("Launch screen");
    ```
  </TabItem>
  <TabItem label="Kotlin">
    ```kotlin
    Contentsquare.start()
    Contentsquare.send("Launch screen")
    ```
  </TabItem>
</Tabs>

### Activities

To trigger a custom screenview each time the activity becomes visible, place the call in the `onResume` method (XML layouts only).

### ViewPagers

To avoid double tagging on Fragments, make sure to include the call in each ViewPager's `onPageChangeListener` callback.

### Popups

When tracking a popup as an isolated screen, use the API to send a screenview event in `onShow`. To re-trigger a screenview of the current activity when the popup is dismissed, make sure to trigger a screenview event with the original activity screenName on the popup `DismissListener`.

### Bottom sheets

When tracking a bottom sheet as an isolated screen, use the API to send a screenview event on view displayed. On its dismiss, make sure to trigger a screenview event with the original screen name on `BottomSheetBehaviorCallback` state change (Usually when STATE_HIDDEN) to track the complete cycle. 

### Back navigation and navigation between screens

Make sure that screenview events will be triggered when a user will go to the previous screen (example: Home → Profile → Home), it is expected to have a screenview event for the Home screen that might be reached with the back navigation button.
Trigger screenview event in a [**custom callback**](https://developer.android.com/guide/navigation/navigation-custom-back) to catch the back events.

### Redirecting the user to another screen (authentication, home) when closing the app/re-opening the app

For some apps, you might want to redirect users whenever they hide your app, for example for security purposes (bank apps, password managers, etc...). If that is the case, pay specific attention to the way `screen_view` events are sent, in order not to track a screen which is not actually shown users.

## How to name screens

As a general rule, keep the number of distinct screen names under 100. Since these names are used to map your app in Contentsquare, choose names that are clear and comprehensive.

### Separate words with spaces, dashes or underscores

When generating screen names with multiple words, separate them using spaces, dashes, or underscores.

For instance, use `Home & Living - Home Furnishings` instead of ~~`homeLivingHomeFurnishings`~~ for a sub-category in a retail app.

### Screen name limitations

:::warning[Casing sensitivity]
  Screen names are not case sensitive and will appear in lowercase on the Contentsquare platform.

  ```kotlin frame="code"
  Contentsquare.send("ScreenName") // screenname
  Contentsquare.send("Screen Name") // screen name
  Contentsquare.send("screen_name") // screen_name
  Contentsquare.send("screenname") // screenname
  ```
:::

### Use screen template/layout names

As a general recommendation, use names referring to the screen template/layout rather than referring to the specific content (data). This will help:
- To keep the number of distinct screen names low and therefore make Contentsquare easier to use
- Remove the risk of sending Personal Data to Contentsquare

List of screen types falling into that category: Product detail, Event detail, Conversation/Chat, User profile, and so on.

### Screens with multiple states/layouts

<Render file="en/mobile/multiple-layout-screens"/>

## How to track sessions & screen metadata

**Custom Variables**

Custom variables are designed to provide additional details about the screenview or user information during end-user engagement. These variables can encompass various aspects, including screen-specific attributes or user-related information, and serve as a means to enhance data collection and analysis.

Example:
- Product name: "Acme Widget"
- Product color: "red"
- Product price: "$19.99"

[Learn how to setup Custom Variables](/en/android/track-custom-variables/)

**Dynamic Variables**

Dynamic variables are used to provide additional information on the session, such as the name of a campaign or the version of a variation for an A/B test integration. They can be sent at any time during a session and do not require sending a screenview. Note that dynamic variables should be used only in segments.

Example:
- Campaign name: "Summer Sale 2023"
- Variation version: "Version A"

[Learn how to setup Dynamic Variables](/en/android/track-dynamic-variables/)

---

# Track transactions

URL: https://docs.contentsquare.com/en/android/4-37-0/track-transactions/

To associate a user's session with their potential purchases (and corresponding revenue), you must send the transaction via a dedicated API.
For each transaction, we send:
- Price (mandatory)
- Currency (mandatory)
- Transaction ID (optional)
<Tabs syncKey="android-lang">
  <TabItem label="Java">
  ```java
  import com.contentsquare.android.api.Currencies;
  import com.contentsquare.android.api.model.Transaction;

  // Sends Transaction
  float price = 430.00f;
  String id = "id";
  // Currency
  Currencies currency = Currencies.EUR; // or currency = "USD"

  Contentsquare.send(Transaction.builder(price, currency).id(id).build());
  ```
  </TabItem>
  <TabItem label="Kotlin">
  ```kotlin
  import com.contentsquare.android.api.Currencies
  import com.contentsquare.android.api.model.Transaction

  // Sends Transaction
  val price = 430.00f
  val id = "id"
  // Currency
  val currency = Currencies.EUR // or currency = "USD"

  Contentsquare.send(Transaction.builder(price, currency).id(id).build())
  ```
  </TabItem>
</Tabs>

:::warning
**Each transaction must only be sent once**. A common mistake is to trigger the sending when the confirmation screen is displayed. This leads to triggering the transaction each time the user puts the app in background and then in foreground on the confirmation screen.
:::

## Currency
The currency is conforming to the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) standard. The currency can be passed either as "alphanumeric code" or "numeric code".

If the currency passed doesn't match the supported currencies, the SDK will send a currency value of `-1`. It will be processed as the default currency of the project.

---

# Troubleshooting

URL: https://docs.contentsquare.com/en/android/4-37-0/troubleshooting/

## Requests are failing
<Render file="en/mobile/troubleshooting/endpoints-to-allow"/>

## Duplicate Error Analysis classes

If you see build errors similar to this, you need to remove the legacy error-analysis module from your build. For more details, see the [Error Analysis migration guide](/en/android/error-analysis/#migrating-from-versions-4241-and-older-of-error-analysis).

```
> Task :app:checkDebugDuplicateClasses FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':app:checkDebugDuplicateClasses'.
> A failure occurred while executing com.android.build.gradle.internal.tasks.CheckDuplicatesRunnable
   > Duplicate class com.contentsquare.android.ErrorAnalysisModule found...
```

---

# Track WebViews

URL: https://docs.contentsquare.com/en/android/4-37-0/track-webviews/

:::note[Android compatibility]
    Contentsquare **only** allows to track instances of `android.webkit.WebView`.  
    `androidx.browser.customtabs` is **not** supported: The Contentsquare SDK **cannot** track what is happening within its context, and its content will **not** be visible in replays.
:::
##  Enable tracking in WebViews

### Where to inject your WebViews?

It is **essential** that the following steps are done before an URL is loaded in your WebView. With that in mind, you should inject your webviews in `onCreate()` in Activity and `onCreateView()` in Fragment.

No matter where you decide to add the following injection code, keep in mind that it will not take effect until the next WebView content reload.

### Inject a variable to detect when you load your page from a WebView

If your page can be loaded both in a WebView and in a browser, you need to differentiate both in order to inject the proper CS Tag first.

If you don't already have a system in place, you can rely on `window.CS_isWebView`. This global variable is injected in your page by Contentsquare when the content is loaded from a WebView.

### Inject the Bridge between the CS Tag in WebView mode and the SDK 

Use the following API:
```kotlin
CsWebViewManager.injectEventTrackingInterface(@NonNull WebView webView) // to start tracking the specific WebView
```

This step is threefold:
1. It will inject our **JavaScript Bridge** in order to connect the **CS Tag in WebView mode** and our SDK.
1. It will inject your **CS Tag in WebView mode** if it was not already injected, allowing us to gather data on all your webviews, even when the user is offline, on pages showing local HTML.
1. It will inject a `window.CS_isWebView` variable for you to use in order to detect if the page is loaded from a WebView.

### Inject the CS Tag in WebView mode into your HTML page

After doing all the above, in order for the implementation to be completed, you will need to make sure our **CS Tag in WebView mode** is injected on your pages. To do so, refer to 📚 [Mobile Apps WebView Tracking Documentation](/en/webview-tracking-web-tag/).

### Automatic tag injection

As of version 4.31.0, the SDK will automatically inject the CS Tag in WebView mode if it was not already injected. This will allow us to gather data on all your webviews, even when the user is offline, on pages showing local HTML. 

```kotlin
import com.contentsquare.android.api.CsWebViewManager

// ...

// tag injection will trigger when you inject the bridge
CsWebViewManager.injectEventTrackingInterface(webview)
```

## Let's sum it up

Let's illustrate our implementation with an Activity. In your `onCreate()` method, you will add the following:

```kotlin
override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_web_view)

    // Inject the variable to detect that you are in a WebView context
    val isWebViewJS = "window.isWebView = true;"
    val webView = findViewById<WebView>(R.id.webview)
    webView.settings.javaScriptEnabled = true
    webView.webViewClient = object : WebViewClient() {
        override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?){
            webView.evaluateJavascript(isWebViewJS){ _ -> }
            super.onPageStarted(view, url, favicon)
        }
    }
    
    // Inject the Bridge between the CS Tag in WebView mode and the SDK 
    CsWebViewManager.injectEventTrackingInterface(webView)

    webView.loadUrl(DEFAULT_WEB_VIEW_CONTENT_URL)
    webView.reload()
}
```

If you are using Fragments, the approach is similar, but should be done in the `onCreateView()` method, as stated previously.

## Validate your implementation of WebView tracking

*Currently, there is no way of validating the implementation on the native side only.*

### Validating the implementation on the web side

Once you arrive on the screen with the tracked WebView, you should see an initial confirmation log message:

```
WebView detected and WebView tracking enabled on native side
```

Specific logs are then emitted for:

- Page views fired by the WebView Tracking Tag in the same format as for screen views: `Screenview - Screen name: {{page name given}} - Screen number: 11`
- Taps and swipes detected by the WebView Tracking Tag in the same format as for defaults taps and swipe but with the target matching an HTML DOM element value: `Tap - Target: {Last view info: div:eq(0)} - Unresponsive: false`

***Going further:*** If you still have doubt, you can look for logs by filtering on `WebViewEventProcessor`. Their presence will confirm that it is well implemented on both web and native sides.

---

# Unified SDK versions mapping

URL: https://docs.contentsquare.com/en/android/4-37-0/unified-sdk/

With our Unified SDK, you gain access to the entire Contentsquare Mobile Platform with a single installation, including [Experience Analytics](/en/android/session-replay/), [Experience Monitoring](/en/android/error-analysis/) and [Product Analytics](https://developers.heap.io/docs/android).
The Unified SDK integrates all our solution-specific SDKs. Here is the version mapping between SDKs:
| Unified SDK version | Experience Analytics / Monitoring SDK version        | Product Analytics SDK Version |
|---------------------|------------------------------------------------------|-------------------------------|
| 0.6.0               | [4.37.0](/en/android/changelog/#4370---20250402)     | [Core 0.8.0](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |
| 0.5.1               | [4.36.1](/en/android/changelog/#4361---20250313)     | [Core 0.7.6](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.7](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.5](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |
| 0.5.0               | [4.36.0](/en/android/changelog/#4360---20250210)     | [Core 0.7.6](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.5](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.5](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |
| 0.4.0               | [4.35.0](/en/android/changelog/#4350---20250102)     | [Core 0.7.5](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.3](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.3](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |
| 0.3.0               | [4.34.0](/en/android/changelog/#4340---20241025)     | [Core 0.7.2](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.1](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.1](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |
| 0.2.0               | [4.33.2](/en/android/changelog/#4332---20241018)     | [Core 0.7.2](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.1](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.1](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |
| 0.1.1               | [4.32.1](/en/android/changelog/#4321---20240910)     | [Core 0.7.1](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |
| 0.1.0               | [4.32.0](/en/android/changelog/#4320---20240902)     | [Core 0.7.1](https://developers.heap.io/docs/android-changelog#android-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/android-changelog#android-view-autocapture-changelog)      |

---

# Use Adobe Analytics

URL: https://docs.contentsquare.com/en/android/4-37-0/use-adobe-analytics/

<Render file="en/mobile/adobe-analytics/use-adobe-analytics"/>
## Prerequisites

**Adobe SDK code requirements**

Make sure you register at least `Identity.EXTENSION` and `Analytics.EXTENSION` extensions before starting `MobileCore`.  
Check the [Adobe iOS AEPAnalytics SDK](https://github.com/adobe/aepsdk-analytics-android) repository for that.

<Render file="en/mobile/adobe-analytics/ios/prerequisites"/>

## Code implementation

Add the CSAppLifecycleObserver to the [ProcessLifecycleOwner](https://developer.android.com/reference/androidx/lifecycle/ProcessLifecycleOwner)

:::note
  <Render file="en/mobile/adobe-analytics/csmatchingkey-sending-rule"/>
:::

<Tabs syncKey="android-lang">
<TabItem label="Java">
```java
public class CSAppLifecycleObserver implements DefaultLifecycleObserver {
    private final SharedPreferences sharedPreferences;
    private final Random random = new Random();

    public CSAppLifecycleObserver(@NonNull Context appContext) {
        sharedPreferences = appContext.getSharedPreferences(
                "CSAppLifecycleObserver",
                MODE_PRIVATE
        );
    }

    @Override
    public void onResume(@NonNull LifecycleOwner owner) {
        DefaultLifecycleObserver.super.onResume(owner);
        sendCSMatchingKeyIfNeeded();
    }

    public void sendCSMatchingKeyIfNeeded() {
        String csMatchingKeyTimestampKey = "csMatchingKey_ts";
        int csMatchingKeyValidityMs = 1800000; // 30 minutes

        long currentTimestamp = new Date().getTime();
        long csMatchingKeyIsPreviousTimestamp = sharedPreferences.getLong(csMatchingKeyTimestampKey, 0);

        if ((currentTimestamp - csMatchingKeyIsPreviousTimestamp) <= csMatchingKeyValidityMs) {
            return;
        }

        sharedPreferences.edit().putLong(csMatchingKeyTimestampKey, currentTimestamp).apply();

        String csMatchingKey = "csMatchingKey";
        String csMatchingKeyValue = random.nextDouble() + "_" + currentTimestamp;

        Contentsquare.send(csMatchingKey, csMatchingKeyValue);
        MobileCore.trackState(csMatchingKey + "_state", Collections.singletonMap(csMatchingKey, csMatchingKeyValue));
    }    
}
```
</TabItem>
<TabItem label="Kotlin">
```kotlin
class CSAppLifecycleObserver(appContext: Context) : DefaultLifecycleObserver {
    private val sharedPreferences = appContext.getSharedPreferences(
        "CSAppLifecycleObserver",
        Context.MODE_PRIVATE
    )
    private val random = Random()

    override fun onResume(owner: LifecycleOwner) {
        super.onResume(owner)
        sendCSMatchingKeyIfNeeded()
    }

    private fun sendCSMatchingKeyIfNeeded() {
        val csMatchingKeyTimestampKey = "csMatchingKey_ts"
        val csMatchingKeyValidityMs = 1800000 // 30 minutes
        
        val currentTimestamp = Date().time
        val csMatchingKeyIsPreviousTimestamp = sharedPreferences.getLong(csMatchingKeyTimestampKey, 0)
        
        if (currentTimestamp - csMatchingKeyIsPreviousTimestamp <= csMatchingKeyValidityMs) {
            return
        }
</TabItem>
</Tabs>        
        sharedPreferences.edit().putLong(csMatchingKeyTimestampKey, currentTimestamp).apply()
        
        val csMatchingKey = "csMatchingKey"
        val csMatchingKeyValue = random.nextDouble().toString() + "_" + currentTimestamp
        
        Contentsquare.send(csMatchingKey, csMatchingKeyValue)
        MobileCore.trackState("${csMatchingKey}_state", Collections.singletonMap(csMatchingKey, csMatchingKeyValue))
    }
}
```
</TabItem>
</Tabs>

---

# Use Google Tag Manager

URL: https://docs.contentsquare.com/en/android/4-37-0/use-google-tag-manager/

If you are using Firebase to track events such as screenviews or transactions, you can trigger these events for Contentsquare with minimal effort, thanks to Google Tag Manager.
## Prerequisites

If you are following this Google Tag Manager integration process, you should already have followed the Google Tag Manager + Firebase setup as described in [Google's Tag Manager + Firebase: Getting Started](https://developers.google.com/tag-manager/android/)

You also need to [integrate the Contentsquare SDK](/en/android/).

## Screenview events

This section covers how to trigger a Contentsquare screenview event for every Firebase screenview event.
Firebase allows you to [log screenviews automatically or manually](https://firebase.google.com/docs/analytics/screenviews) for an exhaustive coverage of your app screens. 

### Variables

Contentsquare screenview events require a `name` parameter.

Firebase has 2 ways to track screens:

#### 1. Variable for automatically tracked screens

Firebase’s `screen_view` events have an `_sc` parameter (for screen class) which we can use as parameter for screens that are **automatically tracked**.

We will create a variable called **Auto Screenview** with:

- The **Variable Type** set to **Event Parameter**
- The **Event Type** set to **Custom Parameter**
- The **Event Parameter Key** set manually to `_sc`

![](~/assets/android/gtm-screenview-variable-auto.png)
#### 2. Variable for manually tracked screens

Firebase’s `screen_view` events have a `_sn` parameter (for screen name) which we can use as parameter for screens that are **manually tracked**.

We will create a variable called **Manual Screenview** with:

- The **Variable Type** set to **Event Parameter**
- The **Event Type** set to **Custom Parameter**
- The **Event Parameter Key** set manually to `_sn`

![](~/assets/android/gtm-screenview-variable-manual.png)

We can also create variables for our own custom parameters, for example, we can send a `screen_view` event like this:
```kotlin
firebaseAnalytics.logEvent(FirebaseAnalytics.Event.SCREEN_VIEW) {
    param(FirebaseAnalytics.Param.SCREEN_NAME, "MyScreenName")
    param("is_user_logged_in", "true")
}
```
and create a variable called **Is User Logged In** with:

- The **Variable Type** set to **Event Parameter**
- The **Event Type** set to **Custom Parameter**
- The **Event Parameter Key** set manually to `is_user_logged_in`

Check out [Configure variables in Tag Manager](https://developers.google.com/tag-platform/tag-manager/android/v5#configure_variables_in_tag_manager) for more information.

### Screenview trigger

We will need to tell Google Tag Manager when to send a Contentsquare screenview, and for that we need to create a **Trigger**. Firebase sends screenviews as events of name `screen_view`, so we need to create a trigger for that event.

- Name your trigger `Screenview Trigger`
- **Trigger Type** should be set to **Custom**
- Trigger should fire on **Some Events**
- For the Event, the **Event Name** should be **equal** to `screen_view`

![](~/assets/android/gtm-screenview-trigger.png)

### Create the custom function Tag

In Google Tag Manager, a **Tag** is what configures what happens when some trigger is activated. It will be automatically linked to a custom class which we will create in a later step.

The **Tag Type** should be a **Function Call**. You will also need to fill in the **Class Path** field with a class name of your liking, typically related to what the tag is about (here we chose `com.myapp.ContentsquareScreenviewTag`), which you will re-use later.

![](~/assets/android/gtm-screenview-tag.png)

### Adding the trigger and the variables to the Tag

Edit the `ContentsquareScreenviewTag` Tag:

- Add an argument with the key `auto_screen_name` and the variable `{{Automatic Screenview Name}}` as the value
- Add an argument with the key `manual_screen_name` and the variables `{{Manual Screenview Name | Is User Logged In}}` or `{{Manual Screenview Name}}` as the value 
- Add **Contentsquare Screenview Trigger** as the Tag's trigger

It should look like this now:

![](~/assets/android/gtm-screenview-tag-final.png)

### Create the custom function Tag class

In your app code, create a class of the same name as the `Class Path` you configured in the GTM interface, for example `ContentsquareScreenviewTag`. This is how GTM connects the configuration and the actual class to trigger. This class is used to call the Contentsquare screenview tracking function as follows:

```kotlin
@Keep
class ContentsquareScreenviewTag : com.google.android.gms.tagmanager.CustomTagProvider {
  override fun execute(map: MutableMap<String, Any>?) {
      val autoScreenName = map?.get("auto_screen_name") as String?
      val manualScreenName = map?.get("manual_screen_name") as String?
      if (autoScreenName != null) {
          Contentsquare.send(autoScreenName)
          Log.w("GTM", "-------> $autoScreenName")
      }
      if (manualScreenName != null) {
          Contentsquare.send(manualScreenName)
          Log.w("GTM", "-------> $manualScreenName")
      }
  }
}
```

Now, every time Firebase sends a screenview event, Contentsquare will send one as well.

## Screenview events with Custom Variables

:::tip[Custom Variables]
Custom variables are additional information on the page, the user or the session, sent within screenviews.
For more information about custom variables, see [Track Custom Variables](/en/android/track-custom-variables/).
:::

It is possible to send custom variables along with the screenview events.
To do so:
1. Follow **Use Google Tag Manager** > [Screenview events](#screenview-events)
1. Add extra arguments to the `ContentsquareScreenviewTag` Tag as follows:

    - *Key:*  the index of the custom variable
    - *Value:*  a string that will contain the custom variable name and value such as `CVAR_NAME : {{Event Name}}`

:::note
The value of the custom variable is composed of a name and a value: `NAME : VALUE` concatenated into a single string and separated by `:`.
:::

It should look like this:
![](~/assets/android/gtm-custom-variables-function-call.png)

:::note[For Custom Variables]
You are free to implement your own logic for filling key and value in GTM, but the application side must be able to receive and extract for each custom variable:
1. An index
1. A name
1. A value
:::

In the code of your application, edit the code of your class to handle the added custom variables:

```kotlin
@Keep
class ContentsquareScreenviewTag : com.google.android.gms.tagmanager.CustomTagProvider {
    override fun execute(map: Map<String, Any>) {
        val autoScreenName = map["auto_screen_name"] as String?
        val manualScreenName = map["manual_screen_name"] as String?
        val screenName = manualScreenName ?: autoScreenName ?: "No screen name!"

        val cvars = mutableListOf<CustomVar>()
        for ((tagKey, tagValue) in map) {
            val varIndex = tagKey.toIntOrNull() ?: continue
            val tagValueString = tagValue as? String ?: continue
            val splitTagValues = tagValueString.split(':')
            if (splitTagValues.size == 2) {
                val varName = splitTagValues[0].trim()
                val varValue = splitTagValues[1].trim()
                cvars.add(CustomVar(varIndex, varName, varValue))
            }
        }

        Contentsquare.send(screenName, cvars.toTypedArray())
        Log.d("GTM", "-------> $screenName")
    }
}
```

With this code, the custom variables will be sent by Contentsquare automatically along with the screenview.

## Transaction events

A Contentsquare transaction event can also be triggered for every Firebase `purchase` event ([See Firebase documentation](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event#public-static-final-string-purchase)).
To do so, you will need to follow the setup described below.

### Variables
We have to create at least two variables in order to be able to build a transaction event: Value and Currency. Optionally, it is also possible to pass a transaction identifier, meaning you would need to create an additional variable in order to be able to use it.

#### Value (mandatory)
![](~/assets/android/gtm-transaction-variable-value.png)

#### Currency (mandatory)
![](~/assets/android/gtm-transaction-variable-currency.png)

#### Transaction ID (optional)
![](~/assets/android/gtm-transaction-variable-transactionid.png)

### Trigger
Create the following custom trigger.

![](~/assets/android/gtm-transaction-trigger.png)

### Tag

Create a **Function call** Tag called `ContentsquareTransactionTag`.  
You will also need to fill in the **Class Path** field with a class path of your liking, typically related to what the tag is about (here we chose `com.myapp.ContentsquareTransactionTag`), which you will re-use later.  
Pass the two to three variables created earlier as arguments (skip the `id` line if you do not want to use it) and set its trigger to the one you just created.

![](~/assets/android/gtm-transaction-tag.png) 

### Implementing the function call

We need to create a `ContentsquareTransactionTag` class, and have it adhere to the `CustomTagProvider` interface to link it to the Google Tag Manager custom Tag of the same name.

Take good note that in order to be able to create and send a Contentsquare Transaction successfully, when you create a Firebase purchase event you will **have to** at least pass values for `VALUE` and `CURRENCY`, and can optionally pass a value for `TRANSACTION_ID` [see Firebase reference docs](https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event#PURCHASE)

```kotlin
@Keep
class ContentsquareTransactionTag : com.google.android.gms.tagmanager.CustomTagProvider {
  override fun execute(map: MutableMap<String, Any>?) {
      val value = map?.get("value") as String?
      val currency = map?.get("currency") as String?
      if (value != null && currency != null) {
          val transactionBuilder = Transaction.builder(value.toFloat(), currency)
          val id = map?.get("id") as String?
          if (id != null) {
              transactionBuilder.id(id)
          }
          Contentsquare.send(transactionBuilder.build())
      }
  }
}
```

Now, every time Firebase sends an `ecommerce_purchase` event, Contentsquare will send one as well.

## Dynamic variable events 

We can send values from any Firebase event as a Contentsquare dynamic variable:
```kotlin
firebaseAnalytics.logEvent("addToCart") {
    param("product_count", 12)
    param("product_name", "ProductA")
}
```

### Variables
The `addToCart` event has parameters `product_count`, `product_name`, we will create variables called **Product Count** and **Product Name** with:

- The **Variable Type** set to **Event Parameter**
- The **Event Type** set to **Custom Parameter**
- The **Event Parameter Key** set manually to `product_count`/`product_name`

Check out [Configure variables in Tag Manager](https://developers.google.com/tag-platform/tag-manager/android/v5#configure_variables_in_tag_manager) for more information.

### Triggers

We need to create a **Trigger** to tell Google Tag Manager when to send a Contentsquare dynamic variable, so we will create one for the event `addToCart`.

- Name your trigger `AddToCartTrigger`
- **Trigger Type** should be set to **Custom**
- Trigger should fire on **Some Events**
- For the Event, the **Event Name** should be **equal** to `addToCart`

### Create the custom function Tag

We need to create a function tag **AddToCartDynamicVar**

- The **Tag Type** set to **Function Call**
- The **Class Name** set to **DynamicVarTag** (we'll create this class later)
- Add two arguments
  - Key: `cs_dynamic_var_key`, Value: `Product`
  - Key: `cs_dynamic_var_value`, Value: `{{Product Name}}: {{Product Count}}`
- The **Triggering** set to **AddToCartTrigger**

It should look like this now:

![](~/assets/android/gtm-dynamic-var-tag.png)

### Create the custom function Tag class

In your app code, create a class of the same name as the `Class Name` you configured in the GTM interface, for example `DynamicVarTag`. This is how GTM connects the configuration and the actual class to trigger. This class is used to call the Contentsquare dynamic variable function as follows:

```kotlin
@Keep
class DynamicVarTag : com.google.android.gms.tagmanager.CustomTagProvider {
    override fun execute(parameters: MutableMap<String, Any>) {
        val dynamicVarKey = parameters["cs_dynamic_var_key"] as? String ?: return
        when (val dynamicVarValue = parameters["cs_dynamic_var_value"]) {
            is String -> Contentsquare.send(dynamicVarKey, dynamicVarValue)
            is Long -> Contentsquare.send(dynamicVarKey, dynamicVarValue)
        }
    }
}
```

Now, every time Firebase sends an `addToCart` event, Contentsquare will send a dynamic variable `key: "Product", value: "ProductA: 12"`.

:::note
To create another tag for a dynamic variable, you can use the `DynamicVarTag` class again.
:::

---

# Authentication

URL: https://docs.contentsquare.com/en/api/export/authentication/

import { Parameters, Parameter } from '~/components';
:::warning
**Since April 30th, 2024, API keys are no longer supported**. You must use OAuth credentials instead to authenticate on our APIs, and migrate your existing applications using API keys.
:::

## OAuth2 authentication

The Contentsquare APIs use the server-to-server OAuth 2.0 standard for authentication, also know as 2-legged OAuth or
OAuth 2LO.

The flow basically consists in calling an authentication endpoint with a pair `client_id` / `client_secret` to retrieve
an access token that remains valid for 1 hour. This JWT token should then be used as a Bearer token in the headers of
your HTTPS requests (in the form `Authorization: Bearer YOUR_API_KEY`).

Note that the API call to the authentication endpoint will also dynamically return the right base URL that you must use.
This base URL depends on which cloud the target project is installed on.

You can refer below to a [detailed example](#example-of-authentication-flow) of the overall flow to retrieve a token and
a base URL, and use those to query the Data Export API.

You can generate a pair `client_id` / `client_secret` from the Contentsquare [console](https://console.contentsquare.com),
as a Contentsquare administrator. You can find how to generate these credentials in our [Help Center documentation](https://support.contentsquare.com/hc/en-gb/articles/9292880837660-How-to-create-API-credentials).

You can create OAuth credentials either:

- At the Project level, to request access resources from a specific project only
- At the Account level: to request access for any project of the account

:::warning
Your OAuth credentials carry many privileges, so make sure to keep them secure! Do not share them in publicly accessible
areas such as GitHub, client-side code, and so forth.
:::

## Refresh your access token

Once you get a JWT access token (see the [authentication endpoint](#authentication-endpoint) below), it's valid for 1 hour.
If you try to query the Contentsquare APIs with access to token that has expired, you will receive a `401 Unauthorized`
error with the error code `JWT_EXPIRED`, in the form:

```json
{
  "success": false,
  "errorMessage": "Auth token is expired.",
  "errorCode": "JWT_EXPIRED"
}
```

In that case, you should first use your OAuth credentials (your pair `client_id` / `client_secret`) to query a new
access token. The OAuth credentials don't expire.

## Authentication endpoint

<span class="post verb">POST</span> https://api.contentsquare.com/v1/oauth/token

<h3>Request parameters</h3>

<Parameters>
  <Parameter name="client_id" type="string" required>
    The OAuth `client_id` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="client_secret" type="string" required>
    The OAuth `client_secret` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="grant_type" type="string" required>
    Always set it to `"client_credentials"`, as required by the
    OAuth 2.0 standard.
  </Parameter>
  <Parameter name="scope" type="string" required>
    You should use `"data-export"`.  
    If needed, you can specify a list of several scopes to get a token that
    can query several APIs (for example `"data-export metrics"` if you want your token
    to cover both the Data Export API and [Metrics API](/en/api/metrics/) scopes).
    The only scope that cannot be combined with other scopes is `enrichment`.
  </Parameter>
  <Parameter name="project_id" type="string">
    Required only if you use account-level OAuth credentials, to
    specify which project of the account you want to target.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location 'https://api.contentsquare.com/v1/oauth/token' \
--header 'Content-Type: application/json' \
--data '{
    "client_id": "c3133d76-a768-4f5a-XXX",
    "client_secret": "0ISL0DEC;UyYKB;riWRS0EXXX",
    "grant_type": "client_credentials",
    "scope": "data-export",
    "project_id": 42
}'
```

<h3>Response example</h3>

```json
{
  "access_token": "eyJhbGciOiJSIsImtpY5MTXXX.CNTcKWAUb2mTp2cZyiDRYYOtGCKXXX", // to be used as bearer token to query the APIs
  "token_type": "bearer",
  "expires_in": 3600,
  "scope": "data-export",
  "project_id": 42,
  "endpoint": "https://api.eu-west-1.production.contentsquare.com" // this is the base URL you should use to query the Data Export API endpoints - the provided URL depends on the cloud the project is installed on
}
```

## Example of authentication flow

Below is a sample of JavaScript code to show a complete API call flow that first retrieves an access token and then use
it to retrieve the list of export jobs on a project:

```javascript
const clientId = "<your_client_id>";
const clientSecret = "<your_client_secret>";
const authEndpoint = "https://api.contentsquare.com/v1/oauth/token";
const authRequestOptions = {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    client_id: clientId,
    client_secret: clientSecret,
    grant_type: "client_credentials",
    project_id: 42,
    scope: "data-export",
  }),
};
const authResponse = await fetch(authEndpoint, authRequestOptions);
const authJsonData = await authResponse.json();
// Below are the access token and base URL that must be used to query the Data Export API endpoints
const accessToken = authJsonData.access_token;
const baseURL = authJsonData.endpoint;
// Using the access token and base URL to query the Data Export API endpoints and get the export jobs in this example
const dataExportApiEndpointResponse = await fetch(`${baseURL}/v1/exports`, {
  headers: { Authorization: `Bearer ${accessToken}` },
});
const dataExportApiEndpointauthJsonData = await dataExportApiEndpointResponse.json();
const exports = dataExportApiEndpointauthJsonData.payload;
```

## OAuth credentials information endpoint

<span class="post verb">POST</span> https://api.contentsquare.com/v1/oauth/me

<h3>Request parameters</h3>

<Parameters>
  <Parameter name="client_id" type="string" required>
    The OAuth `client_id` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="client_secret" type="string" required>
    The OAuth `client_secret` generated from the Contentsquare console.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location 'https://api.contentsquare.com/v1/oauth/me' \
--header 'Content-Type: application/json' \
--data '{
    "client_id": "c3133d76-a768-4f5a-XXX",
    "client_secret": "0ISL0DEC;UyYKB;riWRS0EXXX",
}'
```

<h3>Response example</h3>

```json
{
  "scopes": "metrics data-export session-replay symbolicator",
  "permissions": {
    "projects": [
      {
        "id": 42,
        "name": "UX ANALYTICS"
      }
    ]
  }
}
```

---

# Enumerations

URL: https://docs.contentsquare.com/en/api/export/enumerations/

Enumerations used in the request or response payloads.
## `deviceId`

<strong>integer</strong>

- `-1`: All devices
- `0`: Unknown
- `1`: Desktop
- `2`: Mobile (Web)
- `3`: Tablet (Web)
- `4`: Mobile (App)
- `5`: Tablet (App)

## `format`

<strong>string</strong>

Beginning of date range for analysis.

- `CSV`: CSV (with first row as headers)
- `JSONL`: JSON Lines format, a file format with one line per row of data, each line being a JSON object

## `frequency`

<strong>string</strong>

- `daily`: daily job
- `hourly`: hourly job
- `once`: one-time job

## `scope`

<strong>string</strong>

- `sessions`: to extract session-level data
- `views`: to extract pageview-level data

## `state` (job state)

<strong>string</strong>

- `ACTIVE`: active jobs (as opposed to SUSPENDED for daily jobs).An active job will execute job runs. A one-time "once" job in ACTIVE status is a job queued waiting for execution.
- `COMPLETED`: for completed one-time ("once") jobs (not relevant for daily jobs)
- `COMPUTING`: for running one-time ("once") jobs
- `DELETED`: for deleted jobs
- `SUSPENDED`: for deactivated daily jobs (as opposed to ACTIVE); only relevant for daily jobs. A suspended job will not execute job runs.

## `state` (job run state)

<strong>string</strong>

- `CREATED`: for job runs created and not yet RUNNABLE
- `FAILURE`: for job runs terminated with an error
- `RUNNABLE`: for job runs ready-to-execute
- `RUNNING`: for deleted jobs
- `SUCCESS`: for job runs completed with success

---

# Endpoints reference

URL: https://docs.contentsquare.com/en/api/export/endpoints-reference/

import { Parameters, Parameter } from '~/components';
## Create an export job

<span class="post verb">POST</span> /v1/exports

This endpoint allows for creating a new export job.

<h3>Request parameters</h3>

<Parameters>
  <Parameter name="name" type="string" required>
    The name of the export. Must not be empty.
  </Parameter>
  <Parameter name="format" type="string" required>
     The file format of the export output.

     Possible values: `JSONL`, or `CSV`.
  </Parameter>
  <Parameter name="scope" type="string (<= 255 chars)">
    The scope of the export.
  </Parameter>
  <Parameter name="frequency" type="object" required>
    The frequency of the export.
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="value" type="string">
      The frequency value.

      Possible values: `once`, `daily`, or `hourly`.
      </Parameter>
      <Parameter name="dateRange.from" type="string">
        Required only if frequency.value is "once". The value must be a valid ISO 8601 date string. It should be anterior to frequency.dateRange.to, but not anterior to the project data retention period
      </Parameter>
      <Parameter name="dateRange.to" type="string">
        Required only if frequency.value is "once". The value must be a valid ISO 8601 date string. It should be posterior but not more than 7 days after frequency.dateRange.from.
      </Parameter>
    </details>
  </Parameter>
  <Parameter name="fields" type="object" required>
    The list of fields to export.  
    To list the exportable fields for a given scope, see the [dedicated endpoint](/en/api/export/endpoints-reference/#get-the-list-of-all-exportable-fields).
    <details class="children">
      <summary data-open="Hide children" data-close="Show children"></summary>
      <Parameter name="fieldName" type="string" required>
      A valid `fieldName` corresponding to the name property of the fields that can be listed via the [/v1/exportable-fields](/en/api/export/endpoints-reference/#get-the-list-of-all-exportable-fields) endpoint. You cannot specify a `fieldName` more than once, except for the special values `custom_var` and `dynamic_var` (used to export custom or dynamic variables).
      </Parameter>
      <Parameter name="aliasName" type="string">
        An alias that will be used to rename the exported field in the output file.
      </Parameter>
      <Parameter name="customVarPosition" type="string">
        Required only if `custom_var` is specified as `fieldName`. The custom variable position. Must be between 1 and 20 inclusive. To learn more about custom variables, see [Sending custom vars](/en/web/sending-custom-vars/). To list custom variables available on the authenticated project, see the [/v1/custom_vars](/en/api/export/endpoints-reference/#get-the-list-of-custom-variables) endpoint.
      </Parameter>
      <Parameter name="dynamicVarKey" type="string">
        Required only if `dynamic_var` is specified as `fieldName`. The dynamic variable key. To learn more about dynamic variables, see [Sending dynamic vars](/en/web/sending-dynamic-vars/). To list dynamic variables available on the authenticated project, see the [/v1/dynamic_var_keys](/en/api/export/endpoints-reference/#get-the-list-of-dynamic-variables) endpoint.
      </Parameter>
    </details>
  </Parameter>
  <Parameter name="deviceLabel" type="string" required>
    A device filter.

    Possible values: `all`, `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="segmentId" type="string">
    A valid `segmentId`. If no segment is provided, the data for all users will be exported. To retrieve the list of available segments for the project, you can call the [/v1/segment](/en/api/metrics/objects-endpoints/#segments) endpoint.
  </Parameter>
</Parameters>

<h3>Request example 1</h3>

```shell
curl --location --request POST 'https://api.contentsquare.com/v1/exports' \
--header 'Authorization: Bearer <your_access_token>' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "Test API POST",
    "format": "JSONL",
    "scope": "sessions",
    "frequency": {
        "value": "daily"
    },
    "fields": [
        {
            "fieldName": "project_id",
        },
        {
            "fieldName": "session_id",
        }
    ],
    "deviceLabel": "all",
    "segmentId": 123
}'
```

<h3>Request example 2</h3>

```shell
curl --location --request POST 'https://api.contentsquare.com/v1/exports' \
--header 'Authorization: Bearer <your_access_token>' \
--header 'Content-Type: application/json' \
--data-raw '{
    "name": "Test API POST",
    "format": "CSV",
    "scope": "views",
    "frequency": {
        "value": "once",
        "dateRange": {
            "from": "2023-02-14T00:00:00.000Z",
            "to": "2023-02-15T23:59:59.999Z"
        }
    },
    "fields": [
        {
            "fieldName": "session_id",
            "aliasName": "Session ID"
        },
        {
            "fieldName": "view_number",
            "aliasName": "View number in session"
        },
        {
            "fieldName": "custom_var",
            "customVarPosition": 2,
            "aliasName": "My Custom Variable of index 2"
        },
        {
            "fieldName": "dynamic_var",
            "dynamicVarKey": "AB Test",
            "aliasName": "Experiment"
        }
    ],
    "deviceLabel": "desktop",
    "segmentId": 123
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "jobId": 1372
  },
  "success": true
}
```

## Get the list of all export jobs

<span class="get verb">GET</span> /v1/exports

This endpoint provides the list of all the available export jobs (be they in status active, suspended, computing or completed).

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="format" type="string">
    To filter based on the export format (see [Enumerations](/en/api/export/enumerations/#format))
  </Parameter>
  <Parameter name="frequency" type="string">
    To filter based on the export frequency (see [Enumerations](/en/api/export/enumerations/#format))
  </Parameter>
  <Parameter name="limit" type="integer">
    To change the page size of results (25 by default, 100 max).
  </Parameter>
  <Parameter name="order" type="string">
    To change the order of the results list ("ASC" or "DESC", "DESC" by default).  
    Ordering is based on the `jobId`.
  </Parameter>
  <Parameter name="page" type="integer">
    The page of results to retrieve.
  </Parameter>
  <Parameter name="scope" type="string">
    To filter based on the job scope (see [Enumerations](/en/api/export/enumerations/#scope)).
  </Parameter>
  <Parameter name="state" type="string">
    To filter based on the job status (see [Enumerations](/en/api/export/enumerations/#state-job-state))
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/exports?state=completed' \
--header 'Authorization: Bearer <your_access_token>'
```

<h3>Response example</h3>

```json
{
  "payload": [
    {
      "jobId": 0,
      "name": "string",
      "ownerId": 0,
      "lastUpdatorId": 0,
      "accountId": 0,
      "nextFrom": "2021-05-02T16:22:43.439Z",
      "nextTo": "2021-05-02T16:22:43.439Z",
      "projectIds": [0],
      "state": "ACTIVE",
      "createdAt": "2021-05-02T16:22:43.439Z",
      "format": "JSON",
      "scope": "views",
      "frequency": "string",
      "fields": [
        {
          "fieldName": "string",
          "aliasName": "string"
        }
      ],
      "lastRunTime": "2021-05-02T16:22:43.439Z",
      "nextRunTime": "2021-05-02T16:22:43.439Z",
      "updatedAt": "2021-05-02T16:22:43.439Z",
      "filters": {
        "deviceId": 0
      }
    }
  ],
  "success": true
}
```

`nextFrom` and `nextTo` represent the next date range that will be extracted, while `lastRunTime` and `nextRunTime` indicate when the last and next execution started / will start.

## Get the list of all successful job runs

<span class="get verb">GET</span> /v1/exports/successful-runs

This endpoint provides the list of all the jobs runs that completed successfully. Use it to find which jobs have generated extraction files to be downloaded.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="page" type="integer">
    The page of results to retrieve.
  </Parameter>
  <Parameter name="order" type="string">
    To change the order of the results list ("ASC" or "DESC", "DESC" by default).  
    Ordering is based on the `jobId`.
  </Parameter>
  <Parameter name="limit" type="integer">
    To change the page size of results (25 by default, 100 max).
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/exports/successful-runs' \
--header 'Authorization: Bearer <your_access_token>'
```

<h3>Response example</h3>

```json
{
  "payload": [
    {
      "jobId": 0,
      "jobRunId": 0,
      "name": "string",
      "projectIds": [0],
      "from": "2021-05-02T16:40:14.022Z",
      "to": "2021-05-02T16:40:14.022Z",
      "completionTime": "2021-05-02T16:40:14.022Z",
      "format": "JSONL",
      "scope": "views",
      "frequency": "string",
      "nbOfFiles": 0
    }
  ],
  "success": true
}
```

## Get a specific job

<span class="get verb">GET</span> /v1/exports/\{jobId}

This endpoint allows for retrieving a specific job with its ID.

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="jobId" type="integer" required>
    The Job ID.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/exports/1234' \
--header 'Authorization: Bearer <your_access_token>'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "jobId": 0,
    "name": "string",
    "ownerId": 0,
    "lastUpdatorId": 0,
    "accountId": 0,
    "nextFrom": "2021-05-02T16:50:29.301Z",
    "nextTo": "2021-05-02T16:50:29.301Z",
    "projectIds": [0],
    "state": "ACTIVE",
    "createdAt": "2021-05-02T16:50:29.301Z",
    "format": "JSONL",
    "scope": "views",
    "frequency": "string",
    "fields": [
      {
        "fieldName": "string",
        "aliasName": "string"
      }
    ],
    "lastRunTime": "2021-05-02T16:50:29.301Z",
    "nextRunTime": "2021-05-02T16:50:29.301Z",
    "updatedAt": "2021-05-02T16:50:29.301Z",
    "filters": {
      "deviceId": 0
    }
  },
  "success": true
}
```

`nextFrom` and `nextTo` represent the next date range that will be extracted, while `lastRunTime` and `nextRunTime` indicate when the last and next execution started / will start.

## Get the list of all job runs of a job

<span class="get verb">GET</span> /v1/exports/\{jobId}/runs

This endpoint provides the list of all the job runs related to a specific job.

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="jobId" type="integer" required>
  The Job ID.
  </Parameter>
</Parameters>

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="limit" type="integer">
    To change the page size of results (25 by default, 100 max).
  </Parameter>
  <Parameter name="order" type="string">
    To change the order of the results list ("ASC" or "DESC", "DESC" by default).  
    Ordering is based on the `jobId`.
  </Parameter>
  <Parameter name="page" type="integer">
    The page of results to retrieve.
  </Parameter>
  <Parameter name="state" type="string">
     To filter based on the job status (see
      [Enumerations](/en/api/export/enumerations/#state-job-state)).
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/exports/1354/runs' \
--header 'Authorization: Bearer <your_access_token>'
```

<h3>Response example</h3>

```json
{
  "payload": [
    {
      "jobRunId": 0,
      "startDate": "2021-05-02T16:51:51.004Z",
      "state": "CREATED",
      "endDate": "2021-05-02T16:51:51.004Z",
      "completionRate": 0
    }
  ],
  "success": true
}
```

## Get a specific job run

<span class="get verb">GET</span> /v1/exports/\{jobId}/runs/\{runId}

This endpoint allows for retrieving a specific job run with its ID. The response includes all the extraction files available for download if any (in the `files` field). The files can be downloaded via the provided URL in the `url` field. Files will not be available for download after the `expirationDate`.

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="jobId" type="integer" required>
  The Job ID.
  </Parameter>
  <Parameter name="runId" type="integer" required>
  The Job Run ID.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/exports/1354/runs/67226' \
--header 'Authorization: Bearer <your_access_token>'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "jobRunId": 0,
    "startDate": "2021-05-02T16:54:55.983Z",
    "state": "CREATED",
    "files": [
      {
        "partId": 0,
        "fileSize": 0,
        "url": "string",
        "expirationDate": "2021-05-02T16:54:55.983Z"
      }
    ],
    "endDate": "2021-05-02T16:54:55.983Z",
    "completionRate": 0
  },
  "success": true
}
```

## Get the list of all exportable fields

<span class="get verb">GET</span> /v1/exportable-fields

This endpoint allows for retrieving all fields that can be extracted for a specified scope (the list of fields will depend on the scope).

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="scope" type="string" required>
    To filter based on the job scope (see [Enumerations](/en/api/export/enumerations/#state-job-state))
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/exportable-fields?scope=sessions' \
--header 'Authorization: Bearer <your_access_token>'
```

<h3>Response example</h3>

```json
{
  "payload": [
    {
      "name": "string",
      "description": "string",
      "example": "string",
      "aliases": ["string"],
      "parameters": ["string"]
    }
  ],
  "success": true
}
```

## Get the list of custom variables

<span class="get verb">GET</span> /v1/custom-vars

This endpoint allows for retrieving all the custom variables available on a project.
To learn more about custom variables, see [Sending custom vars](/en/web/sending-custom-vars/).

<h3>Parameters</h3>

<Parameters/>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/custom-vars' \
--header 'Authorization: Bearer <your_access_token>'
```

<h3>Response example</h3>

```json
{
    "payload": [
        {
            "position": 2,
            "key": "dataType",
            "values": [
                "journey",
                "recording",
                "zoning"
            ]
        },
        {
            "position": 3,
            "key": "pageType",
            "values": [
                "checkoutstep 1"
                "checkoutstep 2",
                "checkoutstep 3",
            ]
        },
        {
            "position": 1,
            "key": "Goal achieved",
            "values": [
                "false",
                "true"
            ]
        }
    ],
    "success": true
}
```

## Get the list of dynamic variables

<span class="get verb">GET</span> /v1/dynamic-var-keys

This endpoint allows for retrieving all the dynamic variables available on a project between two dates.
To learn more about dynamic variables, see [Sending dynamic variables](/en/web/sending-dynamic-vars/).

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="from" type="ISO 8601 date string">
   Start date of the query date range.
  </Parameter>
  <Parameter name="to" type="ISO 8601 date string">
   End date of the query date range.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/dynamic-var-keys?from=2023-02-10T00:00:00&to=2023-02-17T00:00:00' \
--header 'Authorization: Bearer <your_access_token>'
```

<h3>Response example</h3>

```json
{
  "payload": [
    {
      "key": "AB Test",
      "type": "string"
    },
    {
      "key": "Traffic Source",
      "type": "string"
    },
    {
      "key": "VoC feedback score",
      "type": "string"
    },
    {
      "key": "Web Analytics Segment",
      "type": "string"
    }
  ],
  "success": true
}
```

---

# Fields reference (pageview)

URL: https://docs.contentsquare.com/en/api/export/fields-reference-pageview/

## Errors
### `errors.message`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of descriptions of the JavaScript error events.
Each event has the same index in all `errors.*` fields.

| Data type     | Example value                                                                                                          |
| ------------- | ---------------------------------------------------------------------------------------------------------------------- |
| Array(String) | ['Uncaught Error: Mismatched anonymous define() module...', 'Uncaught TypeError: Cannot read properties of undefined'] |

### `errors.error_time`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of timestamps of the JavaScript error events.
Each event has the same index in all `errors.*` fields.

| Data type     | Example value                                 |
| ------------- | --------------------------------------------- |
| Array(String) | ['2020-07-11 18:55:41','2020-07-11 18:55:42'] |

### `errors.filename`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of URLs of the files where the JavaScript error events occurred.
Each event has the same index in all `errors.*` fields.

| Data type     | Example value                                                                                                   |
| ------------- | --------------------------------------------------------------------------------------------------------------- |
| Array(String) | ['https:<span/>//a.site.com/static/scripts/lib1.js',<br/>'https:<span/>//b.site.com/static/scripts/lib2.js'] |

### `errors.line_number`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of line numbers in the files where the JavaScript error events occurred.
Each event has the same index in all `errors.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| Array(Number) | [2, 1998]     |

### `errors.col_number`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of column numbers in the files where the JavaScript error events occurred.
Each event has the same index in all `errors.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| Array(Number) | [55, 44]      |

### `errors.group_id`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of Group IDs of the JavaScript error events, used to regroup similar errors together in Contentsquare.
Each event has the same index in all `errors.*` fields.

| Data type     | Example value                               |
| ------------- | ------------------------------------------- |
| Array(Number) | [2406037528566246307, 17923195893144918451] |

### `errors_api.url`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of URL endpoints of the API error events.
Each event has the same index in all `errors_api.*` fields.

| Data type     | Example value                                                       |
| ------------- | ------------------------------------------------------------------- |
| Array(String) | ['https:<span/>//some.site.com/login', 'https:<span/>//someother.site.com/login'] |

### `errors_api.method`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of HTTP methods of the API error events.
Each event has the same index in all `errors_api.*` fields.

| Data type     | Example value   |
| ------------- | --------------- |
| Array(String) | ['GET', 'POST'] |

### `errors_api.status_code`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of HTTP status codes of the API error events.
Each event has the same index in all `errors_api.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| Array(Number) | [500, 501]    |

### `errors_api.request_time`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of the API call start timestamps of the API error events.
Each event has the same index in all `errors_api.*` fields.

| Data type     | Example value                                  |
| ------------- | ---------------------------------------------- |
| Array(String) | ['2023-01-19 01:50:36', '2023-01-21 01:50:36'] |

### `errors_api.group_id`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of Group IDs of the API error events, used to regroup similar errors together in Contentsquare.
Each event has the same index in all `errors_api.*` fields.

| Data type     | Example value                               |
| ------------- | ------------------------------------------- |
| Array(Number) | [2406037528566246307, 17923195893144918451] |

### `custom_errors.message`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of descriptions of the custom error events.
Each event has the same index in all `custom_errors.*` fields.

| Data type     | Example value                                   |
| ------------- | ----------------------------------------------- |
| Array(String) | ['An error happened', 'Another error happened'] |

### `custom_errors.error_time`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of timestamps of the custom error events.
Each event has the same index in all `custom_errors.*` fields.

| Data type     | Example value                                  |
| ------------- | ---------------------------------------------- |
| Array(String) | ['2023-01-19 01:50:36', '2023-01-20 01:50:36'] |

### `custom_errors.attributes`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of key/value pairs of custom tags of the custom error events. Each event can have a list of several key/value pairs.
Each event has the same index in all `custom_errors.*` fields.

| Data type            | Example value                                   |
| -------------------- | ----------------------------------------------- |
| Array(Array(String)) | [[('severity', 'high'), ('category', 'login')]] |

### `custom_errors.group_id`

:::note
This field is only available for [DEM](https://contentsquare.com/platform/digital-experience-monitoring/) customers.  
Contact your CSM if you don't have access to the Errors module.
:::

The list of Group IDs of the custom error events, used to regroup similar errors together in Contentsquare.
Each event has the same index in all `custom_errors.*` fields.

| Data type     | Example value                               |
| ------------- | ------------------------------------------- |
| Array(Number) | [2406037528566246307, 17923195893144918451] |

## Events

### `has_all_interaction_events`

If we got all kinds of events (clicks, mouse moves etc.) on the page, value is 1, else 0.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 0             |

### `page_events`

List of page events.

| Data type     | Example value                                           |
| ------------- | ------------------------------------------------------- |
| Array(String) | ['Config: Release_20201112','FB_MD_Feedback Submitted'] |

### `raw_clicks.event_time`

The list of the dates and UTC times of the click events.
Each event has the same index in all `raw_click.*` fields.

| Data type | Example value                                  |
| --------- | ---------------------------------------------- |
| String    | ['2020-07-26 05:53:04', '2020-07-26 05:54:22'] |

### `raw_clicks.event_type`

The list of the raw events types. Can be either:

- `5`: CLICK
- `10`: CHANGE
- `11`: FOCUS
- `12`: BLUR

Each event has the same index in all `raw_click.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [5, 11]       |

### `raw_clicks.relative_time_ms`

Number of milliseconds between the beginning of the view and each of the raw events.
Each event has the same index in all `raw_click.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [3981, 1782]  |

### `raw_clicks.target_blank_field`

Whether the event was an interaction with a blank field in a form. Can be either:

- `0`: Not applicable
- `1`: False
- `2`: True

Each event has the same index in all `raw_click.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [1, 2]        |

### `raw_clicks.target_path`

The list of the paths that were clicked.
Each event has the same index in all `raw_click.*` fields.

| Data type     | Example value                                                               |
| ------------- | --------------------------------------------------------------------------- |
| Array(String) | ['html\:eq(0)>form\:eq(0)>div\:eq(0)>button\:eq(0)', 'html\:eq(0)>button\:eq(0)'] |

### `targets_clicks.path`

The list of the paths of the target zone.
Each target has the same index in all `targets_clicks.*` fields.

| Data type     | Example value                                                               |
| ------------- | --------------------------------------------------------------------------- |
| Array(String) | ['html\:eq(0)>form\:eq(0)>div\:eq(0)>button\:eq(0)', 'html\:eq(0)>button\:eq(0)'] |

### `targets_clicks.sum`

The number of times the target was clicked on (aggregation of `raw_clicks`).
Each target has the same index in all `targets_clicks.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [2, 1]        |

### `targets_clicks.time_before_msec`

The delay between the loading of the page and the time the user clicked on the target for the first time (in milliseconds).
Each target has the same index in all `targets_clicks.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [779, 391]    |

### `targets_clicks.time_between_last_hover_and_first_click`

Time before last hover and first select the target (in milliseconds).
Each target has the same index in all `targets_clicks.*` fields.

| Data type      | Example value  |
| -------------- | -------------- |
| Array(Integer) | [13533, 30791] |

### `targets_focus.path`

List of the raw path of the targets.
Each target has the same index in all `targets_focus.*` fields.

| Data type     | Example value                                                               |
| ------------- | --------------------------------------------------------------------------- |
| Array(String) | ['html\:eq(0)>form\:eq(0)>div\:eq(0)>button\:eq(0)', 'html\:eq(0)>button\:eq(0)'] |

### `targets_focus.sum`

List of the number of times the target was focused on.
Each target has the same index in all `targets_focus.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [2, 5]        |

### `targets_focus.time_before_msec`

List of times before first focus on a zone (in milliseconds).
Each target has the same index in all `targets_focus.*` fields.

| Data type      | Example value  |
| -------------- | -------------- |
| Array(Integer) | [13533, 30791] |

### `targets_hover.path`

List of the raw path of the targets.
Each target has the same index in all `targets_hover.*` fields.

| Data type     | Example value                                                               |
| ------------- | --------------------------------------------------------------------------- |
| Array(String) | ['html\:eq(0)>form\:eq(0)>div\:eq(0)>button\:eq(0)', 'html\:eq(0)>button\:eq(0)'] |

### `targets_hover.sum`

List of the number of times the target was hovered on.
Each target has the same index in all `targets_hover.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [2, 5]        |

### `targets_hover.sum_times`

List of the total time the target was hovered on (in milliseconds).
Each target has the same index in all `targets_hover.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [2563 ,252]   |

### `targets_hover.time_before_msec`

List of times before first hover on a zone (in milliseconds).
Each target has the same index in all `targets_hover.*` fields.

| Data type      | Example value  |
| -------------- | -------------- |
| Array(Integer) | [13533, 30791] |

## Frustration

Those fields are only exportable for projects with access to the frustration score in Contentsquare.

### `any_api_error_ind`

A normalized score between 0 and 1 to indicate whether any API error occurred on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 0.27          |

### `any_js_error_ind`

A normalized score between 0 and 1 to indicate whether any JavaScript error occurred on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 0.27          |

### `api_error_after_click_ind`

A normalized score between 0 and 2 to indicate whether API errors occurred after some clicks.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 0.27          |

### `excessive_hovers_ind`

A normalized score between 0 and 2 to indicate whether excessive hovers occurred on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 1.64          |

### `frustration_score`

A normalized score between 0 and 100 computed based on all other frustration indicators, to express an overall frustration level on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 0.27          |

### `is_watchable`

Whether the page is considered watchable (1) or not (0). Only pages that are watchable have a frustration score. To be considered watchable, the page view must respect the following conditions:

- Be part of a collected session ([`is_recorded`](#is_recorded) = 1)
- Its duration should be at least 2 seconds
- There should be at least 2 clicks on the page

This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 0             |

### `js_error_after_click_ind`

A normalized score between 0 and 2 to indicate whether any JavaScript error occurred after clicks on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 1.64          |

### `loading_time_ind`

A normalized score between 0 and 1 to indicate whether loading time was slow on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 0.27          |

### `multiple_button_interaction_ind`

A normalized score between 0 and 2 to indicate multiple interactions on button targets on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 1.64          |

### `multiple_field_interaction_ind`

A normalized score between 0 and 2 to indicate multiple interactions on field targets on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 1.64          |

### `multiple_used_targets_ind`

A normalized score between 0 and 1 to indicate multiple interactions on targets on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 0.27          |

### `no_clicks_on_page_ind`

A normalized score between 0 and 1 to indicate low activity on the page.
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 0.27          |

### `rage_click_all_targets_ind`

A normalized score between 0 and 2 to indicate rage clicks (multiple clicks in a short time frame).
This field is only exportable for projects with access to the frustration score in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Float     | 1.64          |

## Geography

### `city`

City associated to the user.

| Data type | Example value |
| --------- | ------------- |
| String    | Paris         |

### `country_code`

Country associated to the user.

| Data type | Example value |
| --------- | ------------- |
| String    | FR            |

### `language`

Language associated to the user.

| Data type | Example value |
| --------- | ------------- |
| String    | fr            |

## Identifiers

### `project_id`

Unique project identifier.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 42            |

### `user_id`

Unique user identifier.
This is the hash of the `user_id_unashed` identifier.

| Data type | Example value       |
| --------- | ------------------- |
| Integer   | 5066017809039612144 |

### `user_id_unhashed`

Unique user identifier.
User id stored in a cookie named `_cs_id`, which has a lifetime of 13 months.

:::note
This field will be empty for dates prior to September, 5th 2023, as this identifier was not collected before that date.
:::

| Data type | Example value       |
| --------- | ------------------- |
| String    | ae267-6g87D-88Nn6od |

## Mobile (CS App)

### `app_events.event_name`

List of the app event names.
Each app event has the same index in all `app_events.*` fields.

| Data type     | Example value                                     |
| ------------- | ------------------------------------------------- |
| Array(String) | ['appStartEvent', 'appShowEvent', 'appHideEvent'] |

### `app_events.event_time`

List of dates and UTC time of the app events.
Each app event has the same index in all `app_events.*` fields.

| Data type     | Example value                                                         |
| ------------- | --------------------------------------------------------------------- |
| Array(String) | ['2020-06-24 17:07:42', '2020-06-24 17:07:42', '2020-06-24 17:08:53'] |

### `app_events.event_type`

List of the app events types related to the session:

- `0`: app start
- `1`: app show
- `2`: app hide

Each app event has the same index in all `app_events.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [0, 1, 2]     |

### `app_events.view_number`

The pageview number related to the event.
Each app event has the same index in all `app_events.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [0, 0, 1]     |

### `app_version`

The client app version.

| Data type | Example value |
| --------- | --------------|
| String    | 10.8.2.0      |

### `density`

Pixel density measured in Pixels Per Inch (PPI) on the display.

| Data type | Example value |
| --------- | ------------- |
| Float     | 38912.312     |

### `manufacturer`

The mobile device manufacturer.

| Data type | Example value |
| --------- | ------------- |
| String    | HUAWEI        |

### `model`

The mobile device model.

| Data type | Example value |
| --------- | ------------- |
| String    | SNE-LX1       |

### `os_version`

Version of Android or iOS used by the visitor (iOS 13.1. or iOS 13.2 etc.)

| Data type | Example value    |
| --------- | ---------------- |
| Integer   | 2251799813685248 |

### `screen_name`

The screen name.

| Data type | Example value |
| --------- | ------------- |
| String    | Showroom      |

### `targets_drag.finger_direction`

List of finger directions related to the swipe events:

- `1`: up
- `2`: down
- `3`: left
- `4`: right
- `5`: complex

Each target has the same index in all `targets_drag.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| List(Integer) | [2, 5]        |

### `targets_drag.sum`

The number of times the target was swiped.

| Data type     | Example value |
| ------------- | ------------- |
| List(Integer) | [3, 1]        |

Each target has the same index in all `targets_drag.*` fields.

### `targets_drag_and_flick.finger_direction`

List of finger directions related to the swipe or fast swipe events:

- `1`: up
- `2`: down
- `3`: left
- `4`: right
- `5`: complex

Each target has the same index in all `targets_drag_and_flick.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| List(Integer) | [2, 5]        |

### `targets_drag_and_flick.orientation`

List of orientations related to the swipe or fast swipe events:

- `0`: portrait
- `1`: landscape

Each target has the same index in all `targets_drag_and_flick.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| List(Integer) | [1, 0]        |

### `targets_drag_and_flick.sum`

Each target has the same index in all `targets_drag_and_flick.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| List(Integer) | [3, 1]        |

Each value has the same array index as their corresponding `targets_drag_and_flick.finger_direction` and `targets_drag_and_flick.orientation`.

### `targets_flick.finger_direction`

List of finger directions related to the fast swiped events:

- `1`: up
- `2`: down
- `3`: left
- `4`: right
- `5`: complex

Each target has the same index in all `targets_flick.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| List(Integer) | [2, 5]        |

### `targets_flick.sum`

The number of times the target was fast swiped.

| Data type     | Example value |
| ------------- | ------------- |
| List(Integer) | [3, 1]        |

Each target has the same index in all `targets_flick.*` fields.

### `targets_long_press.sum`

List of the number of times the target was long press (a target is considered long pressed after at least 500ms).

| Data type     | Example value |
| ------------- | ------------- |
| List(Integer) | [3, 1]        |

### `targets_tap.responsive`

List of values equal to 1 if the App reacted to the tap, else 0.
Each target has the same index in all `targets_tap.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| Aray(Integer) | [0, 1]        |

### `targets_tap.sum`

List of the number of times the target was tapped.
Each target has the same index in all `targets_tap.*` fields.

| Data type     | Example value |
| ------------- | ------------- |
| Aray(Integer) | [3, 1]        |

### `targets_tap.time_before_msec`

List of delays between the loading of the page and the time the user taps on the target for the first time (in milliseconds).
Each target has the same index in all `targets_tap.*` fields.

| Data type     | Example value  |
| ------------- | -------------- |
| Aray(Integer) | [31029, 26496] |

## Page

### `custom_vars_view.key`

Array of keys of custom variables extracted from the website datalayer.
Each variable has the same index in all `custom_vars_view.*` fields.

| Data type     | Example value                             |
| ------------- | ----------------------------------------- |
| Array(String) | ['pageType', 'page_error', 'user_logged'] |

### `custom_vars_view.position`

Array of positions of custom variables extracted from the website datalayer.
Each variable has the same index in all `custom_vars_view.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [1, 7, 16]    |

### `custom_vars_view.value`

Array of values of custom variables extracted from the website datalayer.
Each variable has the same index in all `custom_vars_view.*` fields.

| Data type     | Example value                                       |
| ------------- | --------------------------------------------------- |
| Array(String) | ['catalogsearch_result_index', '200', 'not_logged'] |

### `document_height`

Page height in pixels.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 4326          |

### `document_width`

Page width in pixels.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1280          |

### `dom_interactive_after_msec`

The time in milliseconds required before the user is able to interact with the page (although all resources may not be fully loaded yet).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 5356          |

### `dynamic_vars_int_in_view.key`

Array of keys of integer dynamic variables extracted from the website datalayer of the pageview.
Each variable has the same index in all `dynamic_vars_int_in_view.*` fields.

| Data type     | Example value                   |
| ------------- | ------------------------------- |
| Array(String) | ['VAR_name_123', VAR_name_456'] |

### `dynamic_vars_int_in_view.value`

Array of values of integer dynamic variables extracted from the website datalayer of the pageview.
Each variable has the same index in all `dynamic_vars_int_in_view.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [123, 456]    |

### `dynamic_vars_string_in_view.key`

Array of keys of string dynamic variables extracted from the website datalayer of the pageview.
Each variable has the same index in all `dynamic_vars_string_in_view.*` fields.

| Data type     | Example value                   |
| ------------- | ------------------------------- |
| Array(String) | ['VAR_name_123', VAR_name_456'] |

### `dynamic_vars_string_in_view.value`

Array of values of string dynamic variables extracted from the website datalayer of the pageview.
Each variable has the same index in all `dynamic_vars_string_in_view.*` fields.

| Data type     | Example value                      |
| ------------- | ---------------------------------- |
| Array(String) | ['VAR_value_123', 'VAR_value_456'] |

### `fully_loaded`

The time in milliseconds required to fully load all the resources of the page, from initiation of the pageview to load completion in the browser.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 8186          |

### `is_first`

If the page is the entry page then value is 1, otherwise value is 0.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 0             |

### `is_last`

If the page is the exit page then value is 1, otherwise value is 0.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1             |

### `last_hover_path`

The last path that was hovered by the visitor.

| Data type | Example value                               |
| --------- | ------------------------------------------- |
| String    | html\:eq(0)>body\:eq(0)>div:eq(4)>input\:eq(0) |

### `page_interaction_time_msec`

Interaction time in milliseconds.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 4967          |

### `path`

Path of the pageview URL.

| Data type | Example value                |
| --------- | ---------------------------- |
| String    | /cs-squad-3307216025801.html |

### `prefix`

Host of the pageview URL.

| Data type | Example value         |
| --------- | --------------------- |
| String    | www<span/>.contentsquare.com |

### `query`

Query of the pageview URL.

| Data type | Example value |
| --------- | ------------- |
| String    | cs=42&lang=fr |

### `scheme`

Protocol (HTTP or HTTPS).

| Data type | Example value |
| --------- | ------------- |
| String    | https         |

### `scroll_rate`

The portion of the page which was displayed (in percentage points).

| Data type | Example value |
| --------- | ------------- |
| Float     | 61.4          |

### `start_render`

Timestamp sent by tag when the rendering of the page started.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 112           |

### `url`

The complete URL of the page (concatenation of [prefix](#prefix), [path](#path) and [query](#query)).

| Data type | Example value                   |
| --------- | ------------------------------- |
| String    | https:<span/>//<span/>contentsquare.com/?s=ux |

### `url_no_query_param`

The URL of the page excluding query parameters (concatenation of [prefix](#prefix) and [path](#path)).

| Data type | Example value              |
| --------- | -------------------------- |
| String    | https:<span/>//<span/>contentsquare.com/ |

### `view_duration_msec`

Duration between the page view event time (`view_time`) and the timestamp of the
last interaction event (in milliseconds).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 49118         |

### `view_number`

The pageview number in the session.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 2             |

### `view_time`

The pageview date and UTC time.

| Data type | Example value       |
| --------- | ------------------- |
| String    | 2020-07-26 05:53:04 |

### `viewports.bottom_screen_position`

Array of bottom positions of the screen of the user. A new value is appended in the array after each scroll event if
it's not already present in the array.

| Data type      | Example value     |
| -------------- | ----------------- |
| Array(Integer) | [754, 2332, 2620] |

The values in this array can be combined with the values at the same index in the arrays `viewports.top_screen_position`
and `viewports.exposition_time_msec` to find corresponding top position of viewports and the total time the viewport
was exposed in a given position.

For example, say a user:

- Starts at a viewport position (top=0, bottom=800) and stays in that position for 30 seconds; then
- Scrolls down to a viewport position (top=600, bottom=1400) and stays there for 10 seconds; then
- Scrolls up again back to the original viewport position (top=0, bottom=800) and stays there for another 20 seconds

Then the 3 `viewports` array fields will look like this:

- `viewports.bottom_screen_position`: [0, 600]
- `viewports.top_screen_position`: [800, 1400]
- `viewports.exposition_time_msec`: [50000, 10000] (30s + 20s = 50s = 50000ms)

### `viewports.exposition_time_msec`

The exposition time in milliseconds of the areas that were exposed to the user. A new value is appended in the array after each scroll event.

| Data type      | Example value      |
| -------------- | ------------------ |
| Array(Integer) | [22740, 679, 1338] |

The values in this array can be combined with the values at the same index in the arrays `viewports.bottom_screen_position`
and `viewports.top_screen_position` to find corresponding top position of viewports and the total time the viewport
was exposed in a given position.

For example, say a user:

- Starts at a viewport position (top=0, bottom=800) and stays in that position for 30 seconds; then
- Scrolls down to a viewport position (top=600, bottom=1400) and stays there for 10 seconds; then
- Scrolls up again back to the original viewport position (top=0, bottom=800) and stays there for another 20 seconds

Then the 3 `viewports` array fields will look like this:

- `viewports.bottom_screen_position`: [0, 600]
- `viewports.top_screen_position`: [800, 1400]
- `viewports.exposition_time_msec`: [50000, 10000] (30s + 20s = 50s = 50000ms)

### `viewports.top_screen_position`

Array of top positions of the screen of the user. A new value is appended in the array after each scroll event if
it's not already present in the array.

| Data type      | Example value   |
| -------------- | --------------- |
| Array(Integer) | [0, 1578, 1866] |

The values in this array can be combined with the values at the same index in the arrays `viewports.bottom_screen_position`
and `viewports.exposition_time_msec` to find corresponding top position of viewports and the total time the viewport
was exposed in a given position.

For example, say a user:

- Starts at a viewport position (top=0, bottom=800) and stays in that position for 30 seconds; then
- Scrolls down to a viewport position (top=600, bottom=1400) and stays there for 10 seconds; then
- Scrolls up again back to the original viewport position (top=0, bottom=800) and stays there for another 20 seconds

Then the 3 `viewports` array fields will look like this:

- `viewports.bottom_screen_position`: [0, 600]
- `viewports.top_screen_position`: [800, 1400]
- `viewports.exposition_time_msec`: [50000, 10000] (30s + 20s = 50s = 50000ms)

### `window_height`

Height of the window in which the page is opened.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 720           |

### `window_width`

Width of the window in which the page is opened.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1280          |

## Session

### `is_excludable`

Values are either 1 or 0, to indicate whether the session is generated from bot
traffic (1) or not (0).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1             |

### `is_recorded`

For Session Replay, indicates whether the session was collected (1) or not (0).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1             |

### `session_date`

Session start date.

| Data type | Example value |
| --------- | ------------- |
| String    | 2020-07-26    |

### `session_duration_msec`

Session duration in milliseconds.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 881633        |

### `session_id`

Unique session identifier.

| Data type | Example value       |
| --------- | ------------------- |
| Integer   | 5066017809039605767 |

### `session_number`

The number of sessions of the user (takes into account how many times the user visited before).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 7             |

### `session_number_of_transactions`

Number of transactions placed during the session.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 2             |

### `session_number_of_views`

The number of page views in the session.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 5             |

### `session_replay_link`

The replay link, if the session was collected (see `is_recorded` field).

| Data type | Example value                                                   |
| --------- | --------------------------------------------------------------- |
| String    | https:<span/>//app.contentsquare.com/quick-playback/index.html?pid=... |

### `session_time`

Session start date and UTC time.

| Data type | Example value       |
| --------- | ------------------- |
| String    | 2020-07-26 05:53:04 |

### `session_transactions_revenue_cents`

Total revenue generated by the session (in US dollar cents).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 37655         |

### `referer_url`

The referring URL to the first page view of the session.

| Data type | Example value          |
| --------- | ---------------------- |
| String    | https:<span/>//ww<span/>w.google.fr/ |

## Speed Analysis

Those fields are only exportable for projects with access to the Speed Analysis module in Contentsquare.

### `time_to_first_byte`

Delay (in milliseconds) between the request for the web page and when the web browser received the first piece of data.
This field is only exportable for projects with access to the Speed Analysis module in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 83            |

### `first_contentful_paint`

Delay (in milliseconds) to render the first piece of content.
This field is only exportable for projects with access to the Speed Analysis module in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 196           |

### `largest_contentful_paint`

Delay (in milliseconds) to render the largest piece of content (part of Core Web Vitals).
This field is only exportable for projects with access to the Speed Analysis module in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 297           |

### `cumulative_layout_shift`

Score about the layout stability of the page rendering (part of Core Web Vitals).
This field is only exportable for projects with access to the Speed Analysis module in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 7             |

### `first_input_delay`

Delay (in milliseconds) between the first user interaction and when the web browser can handle it (part of Core Web Vitals).
This field is only exportable for projects with access to the Speed Analysis module in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 42            |

### `interaction_to_next_paint`

Longest visual delay (in milliseconds) experienced by a user when interacting with the page (clicks or keystrokes).
This field is only exportable for projects with access to the Speed Analysis module in Contentsquare.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 61            |

## Technology

### `browser_major_version`

The browser major version.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 83            |

### `browser_name`

The browser name.

| Data type | Example value |
| --------- | ------------- |
| String    | Chrome        |

### `browser_version`

The browser version.

| Data type | Example value |
| --------- | ------------- |
| String    | 83.0.4103.116 |

### `device_id`

Unique device identifier:

- `0`: Unknown
- `1`: Desktop
- `2`: Mobile (Web)
- `3`: Tablet (Web)
- `4`: Mobile (App)
- `5`: Tablet (App)

| Data type | Example value |
| --------- | ------------- |
| Integer   | 2             |

### `platform_name`

The operating system name.

| Data type | Example value |
| --------- | ------------- |
| String    | Windows       |

### `platform_version`

The operating system version.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 10            |

### `screen_height`

The screen height in pixels.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 700           |

### `screen_width`

The screen width in pixels.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1280          |

---

# Limits

URL: https://docs.contentsquare.com/en/api/export/limits/

- 10 concurrent requests maximum per project
- 10 OAuth credentials (`client_id`/`client_secret`) per project and per account maximum
- The data available for query is limited to the project contractual data retention period
- The retention period for the generated files is 7 days. Passed this period, you will not be able to download them anymore. If you missed some files from a daily job for example, keep in mind that you can still create a one-time ("once") job to retrieve the data later.
- For one-time jobs, you cannot extract data for a date range including more than 7 days.
:::note
**Limitations are tracked at the project level**, not at the OAuth credentials level. So if you have created
several OAuth credentials requesting resources for a target project, the total number of concurrent requests must not
exceed 10 for a specific project, all credentials taken into account.
:::

---

# Fields reference (session)

URL: https://docs.contentsquare.com/en/api/export/fields-reference-session/

## Geography
### `city`

City associated to the user.

| Data type | Example value |
| --------- | ------------- |
| String    | Paris         |

### `country_code`

Country associated to the user.

| Data type | Example value |
| --------- | ------------- |
| String    | FR            |

### `language`

Language associated to the user.

| Data type | Example value |
| --------- | ------------- |
| String    | fr            |

## Identifiers

### `project_id`

Unique project identifier.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 42            |

### `user_id`

Unique user identifier.
This is the hash of the `user_id_unashed` identifier.

| Data type | Example value       |
| --------- | ------------------- |
| Integer   | 5066017809039612144 |

### `user_id_unhashed`

Unique user identifier.
User id stored in a cookie named `_cs_id`, which has a lifetime of 13 months.

:::note
This field will be empty for dates prior to September, 5th 2023, as this identifier was not collected before that date.
:::

| Data type | Example value       |
| --------- | ------------------- |
| String    | ae267-6g87D-88Nn6od |

## Mobile (CS App)

Those fields are only available for Apps projects.

### `app_events.event_name`

List of the app event names.
Each app event has the same index in all `app_events.*` fields.

| Data type     | Example value                                     |
| ------------- | ------------------------------------------------- |
| Array(String) | ['appStartEvent', 'appShowEvent', 'appHideEvent'] |

### `app_events.event_time`

List of dates and UTC times of the app events.
Each app event has the same index in all `app_events.*` fields.

| Data type     | Example value                                                         |
| ------------- | --------------------------------------------------------------------- |
| Array(String) | ['2020-06-24 17:07:42', '2020-06-24 17:07:42', '2020-06-24 17:08:53'] |

### `app_events.event_type`

List of the app events types related to the session:

- `0`: app start
- `1`: app show
- `2`: app hide

Each app event has the same index in all `app_events.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [0, 1, 2]     |

### `app_events.view_number`

The pageview number related to the event.
Each app event has the same index in all `app_events.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [0, 0, 1]     |

### `app_version`

The client app version.

| Data type | Example value |
| --------- | --------------|
| String    | 10.8.2.0      |

### `density`

Pixel density measured in Pixels Per Inch (PPI) on the display.

| Data type | Example value |
| --------- | ------------- |
| Float     | 38912.312     |

### `manufacturer`

The mobile device manufacturer.

| Data type | Example value |
| --------- | ------------- |
| String    | HUAWEI        |

### `model`

The mobile device model.

| Data type | Example value |
| --------- | ------------- |
| String    | SNE-LX1       |

### `os_version`

Version of Android or iOS used by the visitor (iOS 13.1. or iOS 13.2 etc.)

| Data type | Example value    |
| --------- | ---------------- |
| Integer   | 2251799813685248 |

## Session

### `dynamic_vars_int_in_session.key`

Array of keys of integer dynamic variables extracted from the website datalayer.
Each variable has the same index in all `dynamic_vars_int_in_session.*` fields.

| Data type     | Example value                   |
| ------------- | ------------------------------- |
| Array(String) | ['VAR_name_123', VAR_name_456'] |

### `dynamic_vars_int_in_session.value`

Array of values of integer dynamic variables extracted from the website datalayer.
Each variable has the same index in all `dynamic_vars_int_in_session.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [123, 456]    |

### `dynamic_vars_string_in_session.key`

Array of keys of string dynamic variables extracted from the website datalayer.
Each variable has the same index in all `dynamic_vars_string_in_session.*` fields.

| Data type     | Example value                   |
| ------------- | ------------------------------- |
| Array(String) | ['VAR_name_123', VAR_name_456'] |

### `dynamic_vars_string_in_session.value`

Array of values of string dynamic variables extracted from the website datalayer.
Each variable has the same index in all `dynamic_vars_string_in_session.*` fields.

| Data type     | Example value                      |
| ------------- | ---------------------------------- |
| Array(String) | ['VAR_value_123', 'VAR_value_456'] |

### `is_excludable`

Values are either 1 or 0, to indicate whether the session is generated from bot
traffic (1) or not (0).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1             |

### `is_recorded`

For Session Replay, indicates whether the session was collected (1) or not (0).
This field can only be exported for projects with access to Session Replay.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1             |

### `session_add_to_cart_items.add_to_cart_time`

_Those values are populated when sending an add to cart event to Contentsquare._

Array of the datetimes when the items were added to cart.
Each item has the same index in all `session_add_to_cart_items.*` fields.

| Data type     | Example value                                                         |
| ------------- | --------------------------------------------------------------------- |
| Array(String) | ['2020-06-24 17:07:42', '2020-06-24 17:07:42', '2020-06-24 17:08:53'] |

### `session_add_to_cart_items.add_to_cart_view_number`

_Those values are populated when sending an add to cart event to Contentsquare._

Array of the page view numbers (position in session) from which items were added to cart.
Each item has the same index in all `session_add_to_cart_items.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [2, 5, 3]     |

### `session_add_to_cart_items.catalog_id`

_Those values are populated when sending an add to cart event to Contentsquare._

Array of the catalog identifiers of the items added to the cart. Will be 0 if the project has no Merchandising catalog set-up.
Each item has the same index in all `session_add_to_cart_items.*` fields.

| Data type      | Example value      |
| -------------- | ------------------ |
| Array(Integer) | [71893, 0, 991893] |

### `session_add_to_cart_items.is_in_transaction`

_Those values are populated when sending an add to cart event to Contentsquare._

Array of the booleans indicating whether the items added to cart were purchased (1) or not (0).
Each item has the same index in all `session_add_to_cart_items.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [0, 0, 1]     |

### `session_add_to_cart_items.product_id_hashed`

_Those values are populated when sending an add to cart event to Contentsquare._

Array of the items' hashed identifiers. Will be '0' if the project has no Merchandising catalog set-up.
Each item has the same index in all `session_add_to_cart_items.*` fields.

| Data type     | Example value                 |
| ------------- | ----------------------------- |
| Array(String) | ['3976139', '0', '30230O013'] |

### `session_add_to_cart_items.sku`

_Those values are populated when sending an add to cart event to Contentsquare._

Array of the SKUs of the items added to cart.
Each item has the same index in all `session_add_to_cart_items.*` fields.

| Data type     | Example value                      |
| ------------- | ---------------------------------- |
| Array(String) | ['987897849120', '47807017348784'] |

### `session_date`

Session start date.

| Data type | Example value |
| --------- | ------------- |
| String    | 2020-07-26    |

### `session_duration_msec`

Session duration in milliseconds.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 881633        |

### `session_id`

Unique session identifier.

| Data type | Example value       |
| --------- | ------------------- |
| Integer   | 5066017809039605767 |

### `session_number`

The number of sessions of the user (takes into account how many times the user visited before).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 7             |

### `session_number_of_transactions`

Number of transactions placed during the session.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 2             |

### `session_number_of_views`

The number of page views in the session.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 5             |

### `session_replay_link`

The replay link, if the session was collected (see `is_recorded` field).
This field can only be exported for projects with access to Session Replay.

| Data type | Example value                                                   |
| --------- | --------------------------------------------------------------- |
| String    | https:<span/>//app.contentsquare.com/quick-playback/index.html?pid=... |

### `session_time`

Session start date and UTC time.

| Data type | Example value       |
| --------- | ------------------- |
| String    | 2020-07-26 05:53:04 |

### `session_transaction_items.catalog_id`

_Those values are populated when sending a transaction event to Contentsquare._

Array of the catalog identifiers of the purchased items. Will be 0 if the project has no Merchandising catalog set-up.
Each item has the same index in all `session_transaction_items.*` fields.

| Data type      | Example value      |
| -------------- | ------------------ |
| Array(Integer) | [71893, 0, 991893] |

### `session_transaction_items.id`

_Those values are populated when sending a transaction event to Contentsquare._

Array of the transactions identifiers.
Each item has the same index in all `session_transaction_items.*` fields.

| Data type     | Example value               |
| ------------- | --------------------------- |
| Array(String) | ['ABC287632', 'ABC1290873'] |

### `session_transaction_items.product_id_hashed`

_Those values are populated when sending a transaction event to Contentsquare._

Array of the items' hashed identifiers. Will be '0' if the project has no Merchandising catalog set-up.
Each item has the same index in all `session_transaction_items.*` fields.

| Data type     | Example value                 |
| ------------- | ----------------------------- |
| Array(String) | ['3976139', '0', '30230O013'] |

### `session_transaction_items.quantity`

_Those values are populated when sending a transaction event to Contentsquare._

Array of the purchased quantity of the items.
Each item has the same index in all `session_transaction_items.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [2, 4, 1]     |

### `session_transaction_items.revenue_cents`

_Those values are populated when sending a transaction event to Contentsquare._

Array of the revenues (in cents) of the purchased items.
Each item has the same index in all `session_transaction_items.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [89211, 450]  |

### `session_transaction_items.sku`

_Those values are populated when sending an add to cart event to Contentsquare._

Array of the SKUs of the purchased items.
Each item has the same index in all `session_transaction_items.*` fields.

| Data type     | Example value                      |
| ------------- | ---------------------------------- |
| Array(String) | ['987897849120', '47807017348784'] |

### `session_transaction_items.transaction_time`

_Those values are populated when sending a transaction event to Contentsquare._

Array of the datetimes when the items were purchased.
Each item has the same index in all `session_transaction_items.*` fields.

| Data type     | Example value                                                         |
| ------------- | --------------------------------------------------------------------- |
| Array(String) | ['2020-06-24 17:07:42', '2020-06-24 17:07:42', '2020-06-24 17:08:53'] |

### `session_transaction_items.transaction_view_number`

_Those values are populated when sending a transaction event to Contentsquare._

Array of the page view numbers (position in session) from which items were purchased.
Each item has the same index in all `session_transaction_items.*` fields.

| Data type      | Example value |
| -------------- | ------------- |
| Array(Integer) | [2, 5, 3]     |

### `session_transactions_revenue_cents`

Total revenue generated by the session (in US dollar cents).

| Data type | Example value |
| --------- | ------------- |
| Integer   | 37655         |

### `referer_url`

The referring URL to the first page view of the session.

| Data type | Example value          |
| --------- | ---------------------- |
| String    | https:<span/>//w<span/>ww.google.fr/ |

## Technology

### `browser_major_version`

The browser major version.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 83            |

### `browser_name`

The browser name.

| Data type | Example value |
| --------- | ------------- |
| String    | Chrome        |

### `browser_version`

The browser version.

| Data type | Example value |
| --------- | ------------- |
| String    | 83.0.4103.116 |

### `device_id`

Unique device identifier:

- `0`: Unknown
- `1`: Desktop
- `2`: Mobile (Web)
- `3`: Tablet (Web)
- `4`: Mobile (App)
- `5`: Tablet (App)

| Data type | Example value |
| --------- | ------------- |
| Integer   | 2             |

### `platform_name`

The operating system name.

| Data type | Example value |
| --------- | ------------- |
| String    | Windows       |

### `platform_version`

The operating system version.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 10            |

### `screen_height`

The screen height in pixels.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 700           |

### `screen_width`

The screen width in pixels.

| Data type | Example value |
| --------- | ------------- |
| Integer   | 1280          |

---

# Getting Started

URL: https://docs.contentsquare.com/en/api/export/

The Contentsquare Data Export API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
All API requests must be made over HTTPS.
Not a developer? Contact your CSM. They will direct you to the best solution to meet your data needs.

- **Base URL of the API:** `https://api.{cloud}.contentsquare.com`
- **Current Version of the API:** 1.0

:::note
The `{cloud}` part in the base URL depends on which cloud the target project you want to query resources from is
installed. The base URL that you should use will be returned dynamically by our authentication server. See an
explanation and a detailed example in the [Authentication](authentication/) section.
:::

## What is Contentsquare?

Contentsquare is a next-gen Analytics tool that helps you understand how and why your users are interacting with your app, mobile, and websites.

Contentsquare allows its clients to create and manage export jobs to extract raw data that we rely on for our analytics. For a complete documentation of how to create jobs in the Contentsquare platform, refer to the documentation included in the help center or provided by your CSM.

By extracting raw data in downloadable files, clients can perform their own analyses for business intelligence or data science use cases, for example. And they can store this data in their own infrastructure, allowing to go beyond the contractual data retention period provided by Contentsquare.

## What this API is about

Use this API to programmatically create export jobs and retrieve the exported files.
Currently, you can't use the API to update an existing export job.
Edit export jobs for your project in the Contentsquare console (**Data Export** tab).

This API allows for extracting raw data, as opposed to aggregated data. To retrieve the aggregated data of your Contentsquare analyses modules, use the [Metrics API](/en/api/metrics/).

You can extract raw data at the pageview or session level.

To understand how the export API works, you should understand the basic objects that you will manipulate via the provided endpoints.

## Jobs

A job is the abstract definition of an extraction task. A job definition includes:

- A **name** for the job
- A file **format** ("CSV" or "JSONL")
- A **scope** ("sessions" or "views")
- A **frequency** ("daily", "hourly", or "once"): a daily job will run every day to extract the last day of data (the job is triggered every day at midnight **UTC** + 4 hours); a "once" job is triggered immediately after creation or is queued if another once job is running.
- A **date range**: only required for a "once" job, and not to exceed 7 days; not required for daily jobs (extraction is automatically run for the last day everyday)
- The **fields** to extract (example: `session_id`): extractable fields will depend on the scope
- The **filters** (example: "deviceId")

## Job runs

A job run is a specific instance of a job. For example, if a daily job has been defined, a job run represents the execution of this job on a specific day.

## Job run parts

Job runs will generate several files to be downloaded. A job run part corresponds to a specific file.

---

# Authentication

URL: https://docs.contentsquare.com/en/api/metrics/authentication/

import { Parameters, Parameter } from '~/components';
:::warning
**Since April 30th, 2024, API keys are no longer supported**. You must use OAuth credentials instead to authenticate on our APIs, and migrate your existing applications using API keys.
:::

## OAuth2 authentication

The Contentsquare APIs use the server-to-server OAuth 2.0 standard for authentication, also know as 2-legged OAuth or
OAuth 2LO.

The flow basically consists in calling an authentication endpoint with a pair `client_id` / `client_secret` to retrieve
an access token that remains valid for 1 hour. This JWT token should then be used as a Bearer token in the headers of
your HTTPS requests (in the form `Authorization: Bearer YOUR_ACCESS_TOKEN`).

Note that the API call to the authentication endpoint will also dynamically return the right base URL that you must use.
This base URL depends on which cloud the target project is installed on.

You can refer below to a [detailed example](#example-of-authentication-flow) of the overall flow to retrieve a token and
a base URL, and use those to query the Metrics API.

You can generate a pair `client_id` / `client_secret` from the Contentsquare [console](https://console.contentsquare.com),
as a Contentsquare administrator. You can find how to generate these credentials in our Help Center documentation.

You can create OAuth credentials either:

- At the Project level, to request access resources from a specific project only
- At the Account level: to request access for any project of the account

:::warning
Your OAuth credentials carry many privileges, so make sure to keep them secure! Do not share them in publicly accessible
areas such as GitHub, client-side code, and so forth.
:::

## Refresh your access token

Once you get a JWT access token (see the [authentication endpoint](#authentication-endpoint) below), it's valid for 1 hour.
If you try to query the Contentsquare APIs with access to token that has expired, you will receive a `401 Unauthorized`
error with the error code `JWT_EXPIRED`, in the form:

```json
{
  "success": false,
  "errorMessage": "Auth token is expired.",
  "errorCode": "JWT_EXPIRED"
}
```

In that case, you should first use your OAuth credentials (your pair `client_id` / `client_secret`) to query a new
access token. The OAuth credentials don't expire.

## Authentication endpoint

<span class="post verb">POST</span> https://api.contentsquare.com/v1/oauth/token

<h3>Request parameters</h3>

<Parameters>
  <Parameter name="client_id" type="string" required>
    The OAuth `client_id` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="client_secret" type="string" required>
    The OAuth `client_secret` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="grant_type" type="string" required>
    Always set it to `"client_credentials"`, as required by the
    OAuth 2.0 standard.
  </Parameter>
  <Parameter name="scope" type="string" required>
    You should use `"metrics"`.  
    If needed, you can specify a list of several scopes to get a token that can query several APIs (for example "data-export metrics" if you want your token to cover both the [Data Export API](/en/api/export/) and Metrics API scopes). The only scope that cannot be combined with other scopes is `enrichment`.
  </Parameter>
  <Parameter name="project_id" type="integer">
    Required only if you use account-level OAuth credentials, to
    specify which project of the account you want to target.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location 'https://api.contentsquare.com/v1/oauth/token' \
--header 'Content-Type: application/json' \
--data '{
    "client_id": "c3133d76-a768-4f5a-XXX",
    "client_secret": "0ISL0DEC;UyYKB;riWRS0EXXX",
    "grant_type": "client_credentials",
    "scope": "metrics",
    "project_id": 42
}'
```

<h3>Response example</h3>

```json
{
  "access_token": "eyJhbGciOiJSIsImtpY5MTXXX.CNTcKWAUb2mTp2cZyiDRYYOtGCKXXX", // to be used as bearer token to query the APIs
  "token_type": "bearer",
  "expires_in": 3600,
  "scope": "metrics",
  "project_id": 42,
  "endpoint": "https://api.eu-west-1.production.contentsquare.com" // this is the base URL you should use to query the Metrics API endpoints - the provided URL depends on the cloud the project is installed on
}
```

## Example of authentication flow

Below is a sample of JavaScript code to show a complete API call flow that first retrieves an access token and then use
it to retrieve the list of segments on a project:

```javascript
const clientId = "<your_client_id>";
const clientSecret = "<your_client_secret>";
const authEndpoint = "https://api.contentsquare.com/v1/oauth/token";
const authRequestOptions = {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    client_id: clientId,
    client_secret: clientSecret,
    grant_type: "client_credentials",
    project_id: 42,
    scope: "metrics",
  }),
};
const authResponse = await fetch(authEndpoint, authRequestOptions);
const authJsonData = await authResponse.json();
// Below are the access token and base URL that must be used to query the Metrics API endpoints
const accessToken = authJsonData.access_token;
const baseURL = authJsonData.endpoint;
// Using the access token and base URL to query the Metrics API endpoints and get the segments in this example
const metricsApiEndpointResponse = await fetch(`${baseURL}/v1/segments`, {
  headers: { Authorization: `Bearer ${accessToken}` },
});
const metricsApiEndpointauthJsonData = await metricsApiEndpointResponse.json();
const segments = metricsApiEndpointauthJsonData.payload;
```

## OAuth credentials information endpoint

<span class="post verb">POST</span> https://api.contentsquare.com/v1/oauth/me

<h3>Request parameters</h3>

<Parameters>
  <Parameter name="client_id" type="string" required>
    The OAuth `client_id` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="client_secret" type="string" required>
    The OAuth `client_secret` generated from the Contentsquare console.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location 'https://api.contentsquare.com/v1/oauth/me' \
--header 'Content-Type: application/json' \
--data '{
    "client_id": "c3133d76-a768-4f5a-XXX",
    "client_secret": "0ISL0DEC;UyYKB;riWRS0EXXX",
}'
```

<h3>Response example</h3>

```json
{
  "scopes": "metrics data-export session-replay symbolicator",
  "permissions": {
    "projects": [
      {
        "id": 42,
        "name": "UX ANALYTICS"
      }
    ]
  }
}
```

---

# Date Ranges

URL: https://docs.contentsquare.com/en/api/metrics/date-ranges/

For metrics endpoints, you need to specify the date range you want to query.
On the Contentsquare platform, you cannot query more than 92 days of data for at once (this is to guarantee reliability
and performance).
If a date range exceeds 92 days or is out of the project data retention period, the API will return an error message
indicating that the range is out of bounds.
In terms of format, dates must respect one of the following ISO formats:

- 2021-08-13T12:32:40.000Z (`YYYY-MM-DDThh:mm:ss.sssZ`) for a date in UTC.
- 2021-08-13T12:32:40 (`YYYY-MM-DDThh:mm:ss`), equivalent to 2021-08-13T12:32:40.000Z.
- 2021-08-13T12:32 (`YYYY-MM-DDThh:mm`), equivalent to 2021-08-13T12:32:00.000Z.
- 2021-08-13 (`YYYY-MM-DD`), equivalent to 2021-08-13T00:00:00.000Z.
- 2021-08 (`YYYY-MM`), equivalent to 2021-08-01T00:00:00.000Z.
- 2021-08-13T12:32:40+02:00 (`YYYY-MM-DDThh:mm:ss+hh:mm`) where the part after the `+` (it can also be `-`) represents the time zone UTC offset. Keep in mind that when specifying dates in URL parameters, the `+` character must be encoded into `%2B` (for example: `2021-08-13T12:32:40%2B02:00`).
- 2021-08-13T12:32+02:00 (`YYYY-MM-DDThh:mm+hh:mm`), equivalent to 2021-08-13T12:32:00+02:00.

---

# Getting Started

URL: https://docs.contentsquare.com/en/api/metrics/

The Contentsquare Metrics API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
All API requests must be made over HTTPS.
Not a developer? Contact your CSM. They will direct you to the best solution to meet your data needs, whether it's connectors (such as Google Data Studio or Reeport) or the help of the Professional Services team at Contentsquare.

- **Base URL of the API:** `https://api.{cloud}.contentsquare.com`
- **Current Version of the API:** 1.0

:::note
The `{cloud}` part in the base URL depends on which cloud the target project you want to query resources from is
installed. The base URL that you should use will be returned dynamically by our authentication server. See an
explanation and a detailed example in [Authentication](authentication/) section.
:::

## What is Contentsquare?

Contentsquare is a next-gen Analytics tool that helps you understand how and why your users are interacting with your app, mobile, and websites.

To understand the metrics exposed by the API Metrics you should understand some very important concepts of Contentsquare. The metrics are obtained based on elements created and managed within the Contentsquare interface.

## Mappings

Defined by a name and set of pages, a mapping helps model your site by grouping together your site's URLs into page groups. Thanks to multiple mappings of varying granularity, you can analyze your site at a macro and micro level.

Contentsquare's Mappings are organized into URLs which are sorted in different "page groups" and the "page groups" are grouped under different categories.

[More information here](https://support.contentsquare.com/hc/en-gb/articles/208559985)

## Page Groups

Contentsquare page groups allow you to gather and group one or several URLs of the same type: a set of pages from your website sharing the same template and function, such as Product pages or List pages.

Gathering URLs into "buckets" is the easiest way to analyze your website according to different levels of granularity.

[More information here](https://support.contentsquare.com/hc/en-gb/articles/208559985)

## Zonings

The Zoning Analysis module allows you to analyze visitors' in-page navigation. You can differentiate clickable areas on the page, called "zones". Zoning Analysis has a large range of metrics so as to provide the most accurate and deepest in-page analysis. This way, you can determine what zones bring navigation anomalies and should be changed or moved.

You can perform your analysis with segment or goal.

Zonings split your page groups into zones. The definition of zones is based on the div of your HTML code.

You can create multiple zonings for the same page group.

See [Zonings](/en/api/metrics/objects-endpoints/#zonings), [Zones](/en/api/metrics/objects-endpoints/#zones), [Zone Metrics for Web Endpoints](/en/api/metrics/zone-metrics-endpoints-web/) and [Zone Metrics for Apps Endpoints](/en/api/metrics/zone-metrics-endpoints-apps/).

[Learn more about the Zoning feature on the Help Center](https://support.contentsquare.com/hc/en-gb/articles/360010600620).

## Goals

A Goal is a navigation event collected by the tag.

A goal can be one of three types:

- A page view
- A select a zone
- A hover over a zone

[More information here](https://support.contentsquare.com/hc/en-gb/articles/202511191)

## Segments

Segments help you to divide visitors into homogeneous population groups based on behaviors. A segment can be composed of:

- Conditions tied to visitors’ context (location, technology used, language, etc.)
- Conditions tied to visitors’ intention (behaviors, visit time, page viewed, etc.)

[More information here](https://support.contentsquare.com/hc/en-gb/articles/204368141)

---

# Limits

URL: https://docs.contentsquare.com/en/api/metrics/limits/

- 10 concurrent requests maximum per project
- 10 OAuth credentials (`client_id`/`client_secret`) per project and per account maximum
- The data available for query is limited to the project contractual data retention period
:::note
**Limitations are tracked at the project level**, not at the OAuth credentials level. So if you have created
several OAuth credentials requesting resources for a target project, the total number of concurrent requests must not
exceed 10 for a specific project, all credentials taken into account.
:::

---

# Object endpoints

URL: https://docs.contentsquare.com/en/api/metrics/objects-endpoints/

import { Parameters, Parameter } from '~/components';
The metrics API replicates the behavior of the analysis context in Contentsquare. To get a metric, you can filter by device, segment etc. Plus, for page groups and zones metrics, you will have to define for which page group or zones you want data. To help you, we provide an API that retrieves these objects: segments, page groups etc.

## Segments

<span class="get verb">GET</span> /v1/segments

Get the list of all segments for a project. [More information regarding segments in Contentsquare](https://support.contentsquare.com/hc/en-gb/articles/204368141)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="ids" type="string">
  Filter the results and get a list of segments that matches the ids provided.  
  Multiple IDs should be separated by a comma.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": [
    {
      "id": 1,
      "name": "New visitors",
      "source": "contentsquare",
      "createdAt": "2019-11-21T09:46:16.000Z",
      "updatedAt": "2019-11-21T09:46:16.000Z"
    }
  ],
  "success": true
}
```

## Goals

<span class="get verb">GET</span> /v1/goals

Get the list of all goals for a project. [More information regarding goals in Contentsquare](https://support.contentsquare.com/hc/en-gb/articles/202511191)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": [
    {
      "id": 100,
      "name": "Reach Cart",
      "type": "pageview",
      "createdAt": "2019-10-05T10:34:42.670Z",
      "updatedAt": "2019-11-21T09:46:09.000Z"
    }
  ],
  "success": true
}
```

## Mappings

<span class="get verb">GET</span> /v1/mappings

Get the list of all mappings for a project. [More information regarding mappings in Contentsquare](https://support.contentsquare.com/hc/en-gb/articles/208559985)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="ids" type="string">
  Filter the results and get a list of segments that matches the ids provided.  
  Multiple IDs should be separated by a comma.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": [
    {
      "id": 101010,
      "name": "New Zoning Mapping",
      "description": "Test",
      "createdAt": "2019-11-05T09:44:51.000Z",
      "updatedAt": "2019-11-05T09:45:05.000Z"
    }
  ],
  "success": true
}
```

<span class="get verb">GET</span> /v1/mappings/\{mappingId}

Get information for a specific mapping [More information regarding mappings in Contentsquare](https://support.contentsquare.com/hc/en-gb/articles/208559985)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
    Required only for an account-level API key. The target project.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="mappingId" type="integer" required>
  The Mapping ID.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": [
    {
      "id": 101010,
      "name": "New Zoning Mapping",
      "description": "Test",
      "createdAt": "2019-11-05T09:44:51.000Z",
      "updatedAt": "2019-11-05T09:45:05.000Z"
    }
  ],
  "success": true
}
```

## Page Groups

<span class="get verb">GET</span> /v1/mappings/\{mappingId}/page-groups

Get all the page groups for a specific mapping [More information regarding mappings and page groups in Contentsquare](https://support.contentsquare.com/hc/en-gb/articles/208559985)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
    Required only for an account-level API key. The target project.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="mappingId" type="integer" required>
  The Mapping ID.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": [
    {
      "id": 1010,
      "name": "Product Pages",
      "category": "Other"
    }
  ],
  "success": true
}
```

<span class="get verb">GET</span> /v1/page-groups/\{pageGroupId}

Get information about a page and all the related mappings [More information regarding page groups in Contentsquare](https://support.contentsquare.com/hc/en-gb/articles/208559985)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
    Required only for an account-level API key. The target project.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The Page Group ID.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "id": 1010,
    "name": "Product pages",
    "category": "Other",
    "mappings": [
      {
        "id": 147,
        "name": "Ecommerce",
        "description": null,
        "createdAt": "2018-10-16T11:37:36.000Z",
        "updatedAt": "2019-08-21T07:12:18.000Z"
      },
      {
        "id": 148,
        "name": "All pages",
        "description": null,
        "createdAt": "2018-10-16T12:49:49.000Z",
        "updatedAt": "2019-08-21T07:12:23.000Z"
      }
    ]
  },
  "success": true
}
```

## Zonings

<span class="get verb">GET</span> /v1/page-groups/\{pageGroupId}/zonings

Get all the zonings for a page group [More information regarding zonings in Contentsquare](https://support.contentsquare.com/hc/en-gb/articles/360010600620)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
    Required only for an account-level API key. The target project.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The Page Group ID.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": [
    {
      "id": 100,
      "name": "Revamp product page",
      "createdAt": "2019-10-25T13:12:45.000Z",
      "lastUpdatedAt": "2019-10-29T11:11:22.000Z"
    }
  ],
  "success": true
}
```

## Zones

<span class="get verb">GET</span> /v1/zonings/\{zoningId}/zones

Get all the zones for a zoning [More information regarding zonings in Contentsquare](https://support.contentsquare.com/hc/en-gb/articles/360010600620)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
    Required only for an account-level API key. The target project.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoningId" type="integer" required>
  The Zoning ID.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": [
    {
      "id": 100,
      "name": "Add to cart button"
    }
  ],
  "success": true
}
```

---

# Page metrics endpoints

URL: https://docs.contentsquare.com/en/api/metrics/page-group-metrics-endpoints/

import { Parameters, Parameter } from '~/components';
## All page groups metrics

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}

Returns all page group metrics between two dates.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 4.820247587511826,
        "name": "activityRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 64.65578424414478,
        "name": "bounceRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 4.267288693743139,
        "name": "conversionRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 9.558127422045425,
        "name": "elapsedTime",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 63.23623764917233,
        "name": "exitRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 907.4778647504171,
        "name": "foldHeight",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1009.0064436943848,
        "name": "interactionTime",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 13.648339726452013,
        "name": "landingRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.6267757352941177,
        "name": "loadingTime",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 3862.80071859361,
        "name": "pageHeight",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 53.2996317888923,
        "name": "scrollRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 4.267288693743139,
        "name": "transformationRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7284,
        "name": "uniqueVisits",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7793,
        "name": "views",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.0692919868276618,
        "name": "viewsVisits",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7288,
        "name": "visits",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Activity rate

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/activity-rate

The ratio of time visitors spend interacting with the page to the time spent on the page. Displayed as percentage. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955253)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 4.820247587511827,
        "name": "activityRate",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Bounce rate

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/bounce-rate

The ratio between the visitors who landed on the page and left the site without having seen a second page and all visitors who landed on the page. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017792914)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 64.65578424414478,
        "name": "bounceRate",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Conversion rate

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/conversion-rate

Ratio between the number of users that viewed the page and reached the goal during their navigation and the number of users that viewed the page.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 4.267288693743139,
        "name": "conversionRate",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Exit rate

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/exit-rate

The ratio between the number of views of the page which are the last page view of the session and the total number of views of the page. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360018106413)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 63.23623764917233,
        "name": "exitRate",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Height / Fold Height

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/fold-height

Average screen height.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 907.4778647504171,
        "name": "foldHeight",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Interaction time

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/interaction-time

The average time spent interacting on the page.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1009.0064436943848,
        "name": "interactionTime",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Landing rate

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/landing-rate

Ratio between users that landed on this screen and the total number of users. For mobile project only.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 13.648339726452013,
        "name": "landingRate",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Loading time / Load time

:::warning[Deprecated]
As of July 8th, 2024, this endpoint is deprecated.<br/>
To retrieve the web performance metrics of a page, use the [Web Vitals](/en/api/metrics/page-group-metrics-endpoints/#web-vitals) endpoint instead.
:::

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/loading-time

The average time in seconds between the call of the page and when the visitor can start interacting with it. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955393)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.6267757352941177,
        "name": "loadingTime",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Page height

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/page-height

The average height of the page in pixels at its first load (an average for all the URLs included in the page). [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017793174)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 3862.80071859361,
        "name": "pageHeight",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Scroll rate

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/scroll-rate

The proportion of the page displayed by visitors (the ratio between the last line of pixels displayed on the screen and the height of the page). [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017792994)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 53.2996317888923,
        "name": "scrollRate",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Time spent / Elapsed time

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/elapsed-time

The average time spent on the page, from the first page view trigger to the last event sent. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017793034)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 9.558127422045425,
        "name": "elapsedTime",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Unique visits

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/unique-visits

The number of unique users who saw the selected page at least once during their session.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7284,
        "name": "uniqueVisits",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Views

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/views

The number of times the page was viewed. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955073)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7793,
        "name": "views",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Views / Visit

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/views-visits

The average number of times the page is viewed per visit. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017968913)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.0692919868276618,
        "name": "viewsVisits",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Visits

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/visits

Number of sessions where the page has been seen at least once. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955153)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
  The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7288,
        "name": "visits",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Web Vitals

Access to some metrics / capabilities requires Speed Analysis RUM. Reach out to your point of contact at Contentsquare for more information.

<span class="get verb">GET</span> /v1/metrics/page-group/\{pageGroupId}/web-vitals

Returns a list of Web Vitals metrics (including Core Web Vitals).

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
    Required only for an account-level API key. Specifies the target project
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.

ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).

  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.

ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).

  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.

  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.

Possible values: none (default), `daily`.

  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>

<Parameter name="metricType" type="string">
  Possible values: `Quantile` (default), `Average`.
</Parameter>

  <Parameter name="quantile" type="number">
      Default to the 75th percentile of each metric if the metric type is `Quantile`. It is ignored if the metric type is `Average`.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="pageGroupId" type="integer" required>
    The ID of the Page Group.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "value": 0.003103,
        "startDate": "2024-06-01T00:00:00.000Z",
        "endDate": "2024-06-04T00:00:00.000Z",
        "name": "cumulativeLayoutShift",
        "metricType": "Quantile",
        "quantile": 0.9
      },
      {
        "value": 0.016,
        "startDate": "2024-06-01T00:00:00.000Z",
        "endDate": "2024-06-04T00:00:00.000Z",
        "name": "interactionToNextPaint",
        "metricType": "Quantile",
        "quantile": 0.9
      },
      {
        "value": 0.002,
        "startDate": "2024-06-01T00:00:00.000Z",
        "endDate": "2024-06-04T00:00:00.000Z",
        "name": "firstInputDelay",
        "metricType": "Quantile",
        "quantile": 0.9
      },
      {
        "value": 2.468,
        "startDate": "2024-06-01T00:00:00.000Z",
        "endDate": "2024-06-04T00:00:00.000Z",
        "name": "firstContentfulPaint",
        "metricType": "Quantile",
        "quantile": 0.9
      },
      {
        "value": 2.256,
        "startDate": "2024-06-01T00:00:00.000Z",
        "endDate": "2024-06-04T00:00:00.000Z",
        "name": "timeToFirstByte",
        "metricType": "Quantile",
        "quantile": 0.9
      },
      {
        "value": 2.444,
        "startDate": "2024-06-01T00:00:00.000Z",
        "endDate": "2024-06-04T00:00:00.000Z",
        "name": "largestContentfulPaint",
        "metricType": "Quantile",
        "quantile": 0.9
      }
    ]
  },
  "success": true
}
```

---

# Site metrics endpoints

URL: https://docs.contentsquare.com/en/api/metrics/site-metrics-endpoints/

import { Parameters, Parameter } from '~/components';
## All site metrics

<span class="get verb">GET</span> /v1/metrics/site

Returns all site metrics between two dates.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 93.00790024010534,
        "name": "bounceRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 186.890756302521,
        "name": "cartAverage",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 3649,
        "name": "conversionCount",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7.068828577516902,
        "name": "conversionRate",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.1468321586244288,
        "name": "pageviewAverage",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 22240,
        "name": "revenueSum",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 3.1195242041669893,
        "name": "sessionTimeAverage",
        "currency": "USD"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 51644,
        "name": "visits",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Bounce rate

<span class="get verb">GET</span> /v1/metrics/site/bounce-rate

The ratio between the visitors who entered the site and left it without having seen a second page and all visitors.

[More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017952113)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 93.00790024010534,
        "name": "bounceRate",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Cart average

<span class="get verb">GET</span> /v1/metrics/site/cart-average

The average cart amount is calculated by dividing the total revenue by the number of transactions. This metric is only accessible for "e-commerce" projects.

[More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017789914)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 186.890756302521,
        "name": "cartAverage",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Conversions

<span class="get verb">GET</span> /v1/metrics/site/conversions

The number of sessions where a specified goal was reached.
[More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017952553)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="goalId" type="integer">
  **Required only for non "e-commerce" projects**. Goal filter for analysis.  
  If not specified for an "e-commerce" project, the API will return data for the "e-commerce" goal.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 3649,
        "name": "conversionCount",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Conversion rate

<span class="get verb">GET</span> /v1/metrics/site/conversion-rate

Ratio between the number of sessions where a specified goal was reached and the total number of sessions.
[More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017789914)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="goalId" type="integer">
  **Required only for non "e-commerce" projects**. Goal filter for analysis.  
  If not specified for an "e-commerce" project, the API will return data for the "e-commerce" goal.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7.068828577516902,
        "name": "conversionRate",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Pageview average

<span class="get verb">GET</span> /v1/metrics/site/pageview-average

Average number page views during a session (a page that has been refreshed counts as one view).

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.1468321586244288,
        "name": "pageviewAverage",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Revenue

<span class="get verb">GET</span> /v1/metrics/site/revenue

Sum of all the transaction amounts. This metric is only accessible for "e-commerce" projects.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 22240,
        "name": "revenueSum",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Session time average

<span class="get verb">GET</span> /v1/metrics/site/session-time-average

Average time spent from entry on the site to site exit for each visit.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 3.1195242041669893,
        "name": "sessionTimeAverage",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Visits

<span class="get verb">GET</span> /v1/metrics/site/visits

Number of sessions.
[More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017951413)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 51644,
        "name": "visits",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

---

# Zone metrics for Apps endpoints

URL: https://docs.contentsquare.com/en/api/metrics/zone-metrics-endpoints-apps/

import { Parameters, Parameter } from '~/components';
## All zone metrics

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}

Returns all zone metrics between two dates

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 16.953225338691635,
        "name": "avgTransactionAfterTap",
        "device": "mobile",
        "currency": "EUR"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 0.11907269940804448,
        "name": "dragFlickRate",
        "device": "mobile",
        "currency": "EUR"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.0633130962705983,
        "name": "dragFlickRecurrence",
        "device": "mobile",
        "currency": "EUR"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7.6946619277745105,
        "name": "revenuePerTap",
        "device": "mobile",
        "currency": "EUR"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 12.096980737693068,
        "name": "tapRate",
        "device": "mobile",
        "currency": "EUR"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.0165105816266422,
        "name": "tapRecurrence",
        "device": "mobile",
        "currency": "EUR"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 4.493400932241734,
        "name": "timeBeforeFirstTap",
        "device": "mobile",
        "currency": "EUR"
      },
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 902791.6,
        "name": "totalRevenueWithTap",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

## Conversion rate per tap

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/conversion-rate-per-tap

Of users that tapped on the zone, the percentage that also completed the selected goal during the same session.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 16.953225338691635,
        "name": "avgConversionAfterTap",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

## Revenue

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/revenue

Total revenue generated by users who clicked on the zone.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 900157.6,
        "name": "totalRevenueWithTap",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

## Revenue per tap

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/revenue-per-tap

Average revenue per tap generated by users after they tapped on an element.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 7.684434465625721,
        "name": "revenuePerTap",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

## Swipe rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/swipe-rate

Percentage of users performing at least one swipe on a zone during a screen display.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 0.6463799007761929,
        "name": "dragFlickRate",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

## Swipe recurrence

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/swipe-recurrence

Average number of times an element was swiped when engaged with during a screenview.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.0633130962705983,
        "name": "dragFlickRecurrence",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

## Tap rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/tap-rate

Percentage of users that tapped on the zone at least once.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 12.096980737693068,
        "name": "tapRate",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

## Tap recurrence

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/tap-recurrence

Average number of times an element was tapped when engaged with during a screenview.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 1.0165105816266422,
        "name": "tapRecurrence",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

## Time before first tap

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/time-before-first-tap

Number of seconds between screen load and first tap on an element.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-07-16T00:00:00.000Z",
        "endDate": "2021-07-22T00:00:00.000Z",
        "value": 4.493400932241734,
        "name": "timeBeforeFirstTap",
        "device": "mobile",
        "currency": "EUR"
      }
    ]
  },
  "success": true
}
```

---

# Zone metrics for Web endpoints

URL: https://docs.contentsquare.com/en/api/metrics/zone-metrics-endpoints-web/

import { Parameters, Parameter } from '~/components';
## All zone metrics

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}

Returns all zone metrics between two dates

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 6.033720930232558,
        "name": "averageRevenueAfterClick",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 10.497237569060774,
        "name": "avgConversionAfterClick",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 10.9011137360783,
        "name": "avgConversionAfterHover",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 0.003087246192893401,
        "name": "avgHoverTime",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 33.472123489387634,
        "name": "clickRate",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 1.4462985436893203,
        "name": "clickRepetition",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 104.56852791878173,
        "name": "engagementRateLive",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 0.5985779733009708,
        "name": "hesitation",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 32.00974916218137,
        "name": "hoverRate",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 15.274424150485437,
        "name": "timeBeforeFirstClick",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 4767,
        "name": "totalClicks",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 25945,
        "name": "totalRevenueAfterClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Attractiveness rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/attractiveness-rate

The percentage of page views with at least one select the zone out of the views where the zone was displayed. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017956153)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-10-10T22:00:00.000Z",
        "endDate": "2021-10-17T21:59:59.000Z",
        "value": 4.808743169398907,
        "name": "attractivityRate",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Click rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/click-rate

The percentage of pageviews with at least one select the zone. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955553)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:10:50.314Z",
        "value": 33.472123489387634,
        "name": "clickRate",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Click recurrence

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/click-recurrence

The average number of clicks on the zone, for pageviews with at least one select the zone. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017793794)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:11:13.661Z",
        "value": 1.4462985436893203,
        "name": "clickRepetition",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Conversion Rate per Click

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/conversion-rate-per-click

Percentage of visitors who achieved the goal after clicking on a zone. This metric allows you to determine whether interaction (click) with a zoning encourages or prevents visitors from exhibiting the goal. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955713)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:11:44.754Z",
        "value": 10.497237569060774,
        "name": "avgConversionAfterClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Conversion Rate per Hover

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/conversion-rate-per-hover

Percentage of visitors who achieved the goal after hovering on a zone. This metric allows you to determine whether consumption (hover) of zone is contributing or detrimental to completing the goal. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955633)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:12:16.518Z",
        "value": 10.9011137360783,
        "name": "avgConversionAfterHover",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Engagement Rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/engagement-rate

Percentage of visitors who clicked after having hovered a zone. This metric translates the affordance of an element, that is its capacity to define how it should be interacted with through its design. For example, the design of a CTA should make it obvious that it should be clicked. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955793)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:12:56.222Z",
        "value": 104.56852791878173,
        "name": "engagementRateLive",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Exposure rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/exposure-rate

The exposure rate takes into account the time spent on a zone. If a user scrolled through a zone very quickly, it will not be taken into account in the exposure data.
A zone can only be considered "exposed" if it has been displayed for at least 150 milliseconds. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955993)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-10-10T22:00:00.000Z",
        "endDate": "2021-10-17T21:59:59.000Z",
        "value": 87.4,
        "name": "exposureRate",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Exposure time

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/exposure-time

Time a zone was exposed. A zone can only be considered "exposed" if it has been displayed for at least 150 milliseconds.
If you scroll fast from the top to the bottom of the page, the middle page will not be taken into account as the scroll movement is too fast to consider the zones in the middle have been exposed.. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017956013)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-10-10T22:00:00.000Z",
        "endDate": "2021-10-17T21:59:59.000Z",
        "value": 20.451490710382515,
        "name": "exposureTime",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Hesitation time

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/hesitation

Average time elapsed between the last hover and the first select a zone. This metric translates whether the content is understood quickly or if users hesitate before clicking. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017794714)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:13:21.844Z",
        "value": 0.5985779733009708,
        "name": "hesitation",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Hover Rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/hover-rate

Percentage of users who hovered a zone at least once. This metric determines which zones are consumed the most. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955753)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:13:51.154Z",
        "value": 32.00974916218137,
        "name": "hoverRate",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Hover time / Float time

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/hover-time

Average total time spent hovering over an element. This metric translates interest or lack of clarity, depending on the type of element. For example, a float time over 3 seconds is positive on an image or description text but is not on a CTA. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955833)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:14:10.533Z",
        "value": 0.003087246192893401,
        "name": "avgHoverTime",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Number of clicks

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/number-of-clicks

The total number of clicks on the zone, for pageviews with at least one select the zone.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:14:33.276Z",
        "value": 4767,
        "name": "totalClicks",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Revenue

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/revenue

Total revenue generated by the segmented users after they clicked on an element.
This metric ranks elements based on their contribution to revenue. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017790814)

This metric is only accessible for "e-commerce" projects.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:14:56.993Z",
        "value": 25945,
        "name": "totalRevenueAfterClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Revenue per Click

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/revenue-per-click

Average revenue per click generated by users after they clicked on an element. This metric ranks elements based on their contribution to revenue. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955733)

This metric is only accessible for "e-commerce" projects.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:15:15.384Z",
        "value": 7.871662621359223,
        "name": "averageRevenueAfterClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Time Before First Click

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/time-before-first-click

Number of seconds between page load and first select an element. This metric identifies which elements were interacted with first. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955593)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:15:40.261Z",
        "value": 15.274424150485437,
        "name": "timeBeforeFirstClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

---

# Zone metrics for Web endpoints

URL: https://docs.contentsquare.com/en/api/metrics/zone-metrics-endpoints/

import { Parameters, Parameter } from '~/components';
## All zone metrics

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}

Returns all zone metrics between two dates

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 6.033720930232558,
        "name": "averageRevenueAfterClick",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 10.497237569060774,
        "name": "avgConversionAfterClick",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 10.9011137360783,
        "name": "avgConversionAfterHover",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 0.003087246192893401,
        "name": "avgHoverTime",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 33.472123489387634,
        "name": "clickRate",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 1.4462985436893203,
        "name": "clickRepetition",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 104.56852791878173,
        "name": "engagementRateLive",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 0.5985779733009708,
        "name": "hesitation",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 32.00974916218137,
        "name": "hoverRate",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 15.274424150485437,
        "name": "timeBeforeFirstClick",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 4767,
        "name": "totalClicks",
        "device": "desktop",
        "currency": "USD"
      },
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T09:59:03.543Z",
        "value": 25945,
        "name": "totalRevenueAfterClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Attractiveness rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/attractiveness-rate

The percentage of page views with at least one select the zone out of the views where the zone was displayed. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017956153)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-10-10T22:00:00.000Z",
        "endDate": "2021-10-17T21:59:59.000Z",
        "value": 4.808743169398907,
        "name": "attractivityRate",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Click rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/click-rate

The percentage of pageviews with at least one select the zone. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955553)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:10:50.314Z",
        "value": 33.472123489387634,
        "name": "clickRate",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Click recurrence

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/click-recurrence

The average number of clicks on the zone, for pageviews with at least one select the zone. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017793794)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:11:13.661Z",
        "value": 1.4462985436893203,
        "name": "clickRepetition",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Conversion Rate per Click

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/conversion-rate-per-click

Percentage of visitors who achieved the goal after clicking on a zone. This metric allows you to determine whether interaction (click) with a zoning encourages or prevents visitors from exhibiting the goal. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955713)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:11:44.754Z",
        "value": 10.497237569060774,
        "name": "avgConversionAfterClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Conversion Rate per Hover

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/conversion-rate-per-hover

Percentage of visitors who achieved the goal after hovering on a zone. This metric allows you to determine whether consumption (hover) of zone is contributing or detrimental to completing the goal. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955633)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
  <Parameter name="goalId" type="integer">
  To return conversion metrics for a non-ecommerce goal.
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:12:16.518Z",
        "value": 10.9011137360783,
        "name": "avgConversionAfterHover",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Engagement Rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/engagement-rate

Percentage of visitors who clicked after having hovered a zone. This metric translates the affordance of an element, that is its capacity to define how it should be interacted with through its design. For example, the design of a CTA should make it obvious that it should be clicked. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955793)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:12:56.222Z",
        "value": 104.56852791878173,
        "name": "engagementRateLive",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Exposure rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/exposure-rate

The exposure rate takes into account the time spent on a zone. If a user scrolled through a zone very quickly, it will not be taken into account in the exposure data.
A zone can only be considered "exposed" if it has been displayed for at least 150 milliseconds. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955993)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-10-10T22:00:00.000Z",
        "endDate": "2021-10-17T21:59:59.000Z",
        "value": 87.4,
        "name": "exposureRate",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Exposure time

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/exposure-time

Time a zone was exposed. A zone can only be considered "exposed" if it has been displayed for at least 150 milliseconds.
If you scroll fast from the top to the bottom of the page, the middle page will not be taken into account as the scroll movement is too fast to consider the zones in the middle have been exposed.. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017956013)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-10-10T22:00:00.000Z",
        "endDate": "2021-10-17T21:59:59.000Z",
        "value": 20.451490710382515,
        "name": "exposureTime",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Hesitation time

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/hesitation

Average time elapsed between the last hover and the first select a zone. This metric translates whether the content is understood quickly or if users hesitate before clicking. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017794714)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:13:21.844Z",
        "value": 0.5985779733009708,
        "name": "hesitation",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Hover Rate

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/hover-rate

Percentage of users who hovered a zone at least once. This metric determines which zones are consumed the most. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955753)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:13:51.154Z",
        "value": 32.00974916218137,
        "name": "hoverRate",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Hover time / Float time

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/hover-time

Average total time spent hovering over an element. This metric translates interest or lack of clarity, depending on the type of element. For example, a float time over 3 seconds is positive on an image or description text but is not on a CTA. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955833)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:14:10.533Z",
        "value": 0.003087246192893401,
        "name": "avgHoverTime",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Number of clicks

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/number-of-clicks

The total number of clicks on the zone, for pageviews with at least one select the zone.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:14:33.276Z",
        "value": 4767,
        "name": "totalClicks",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Revenue

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/revenue

Total revenue generated by the segmented users after they clicked on an element.
This metric ranks elements based on their contribution to revenue. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017790814)

This metric is only accessible for "e-commerce" projects.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:14:56.993Z",
        "value": 25945,
        "name": "totalRevenueAfterClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Revenue per Click

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/revenue-per-click

Average revenue per click generated by users after they clicked on an element. This metric ranks elements based on their contribution to revenue. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955733)

This metric is only accessible for "e-commerce" projects.

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:15:15.384Z",
        "value": 7.871662621359223,
        "name": "averageRevenueAfterClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

## Time Before First Click

<span class="get verb">GET</span> /v1/metrics/zone/\{zoneId}/time-before-first-click

Number of seconds between page load and first select an element. This metric identifies which elements were interacted with first. [More information regarding the metric and how to interpret it...](https://support.contentsquare.com/hc/en-gb/articles/360017955593)

<h3>Query parameters</h3>

<Parameters>
  <Parameter name="projectId" type="integer">
  Required only for an account-level API key. The target project.
  </Parameter>
  <Parameter name="startDate" type="ISO 8601 date string" required>
  Beginning of date range for analysis. Must be a date prior to `endDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="endDate" type="ISO 8601 date string" required>
  End of date range for analysis. Must be a date after `startDate`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="device" type="string">
  Device filter for analysis.

  Possible values: `all` (default), `desktop`, `mobile`, or `tablet`.
  </Parameter>
  <Parameter name="period" type="string">
  Granularity of the results. Can only be used on a date range larger than one day. It allows you to have data for each day instead of having a combined result.  

  Possible values: none (default), `daily`.
  </Parameter>
  <Parameter name="segmentIds" type="integer">
  Filter analysis with Contentsquare segments. Default: All visitors.  
  You can specify multiple segments separated by commas to retrieve the metrics for the intersection of the specified segments
  </Parameter>
</Parameters>

<h3>Path parameters</h3>

<Parameters>
  <Parameter name="zoneId" type="integer" required>
  The ID of the Zone.
  </Parameter>
</Parameters>

<h3>Example of response</h3>

```json
{
  "payload": {
    "values": [
      {
        "startDate": "2021-08-03T00:00:00.000Z",
        "endDate": "2021-08-11T17:15:40.261Z",
        "value": 15.274424150485437,
        "name": "timeBeforeFirstClick",
        "device": "desktop",
        "currency": "USD"
      }
    ]
  },
  "success": true
}
```

---

# Analysis endpoints

URL: https://docs.contentsquare.com/en/api/speed-analysis-lab/analysis-endpoints/

import { Parameters, Parameter } from '~/components';
## Get an analysis report

<span class="post verb">POST</span> /v1/speed-analysis/analysis/report

Returns the analysis report.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="reportId" type="string" required>
  Unique identifier of a report.
  </Parameter>
  <Parameter name="metricsOnly" type="boolean">
  Set to true to only generate a summary report, excluding advice, categories, and detected technologies (default: `false`).
  </Parameter>
    <Parameter name="getUniqueIDsForTips" type="boolean">
  Set to true to get an ID for each element of `report.tips`  (default: `false`).
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/analysis/report' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "reportId": "",
    "metricsOnly": true,
    "getUniqueIDsForTips": false
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "missing": [""],
    "report": {
        "publicReportUrl": "https://www.dareboost.com/[lang]/report/[reportId]",
        "harFileUrl": "https://www.dareboost.com/download/harFile/[reportId]",
        "date": 0,
        "url": "",
        "lang": "",
        "config": {
            "location": "",
            "browser": {
                "name": "",
                "version": ""
            },
            "isMobile": false,
            "bandwidth": {
                "upstream": 0,
                "downstream": 0
            },
            "latency": 0,
            "isPrivate": false,
            "adblock": false,
            "screen": {
                "height": 0,
                "width": 0
            },
            "basicAuth": {
                "user": "",
                "password": ""
            },
            "postData": [
                {
                    "key": "",
                    "value": ""
                }
            ],
            "header": [
                {
                    "key": "",
                    "value": ""
                }
            ],
            "blacklist": [],
            "whiteList": [],
            "dnsMapping": [
                {
                    "origin": "",
                    "destination": ""
                }
            ],
            "cookies": [],
            "repeatedView": false,
            "hhtp2Disabled": false,
            "animationsStopped": {}
        },
        "summary": {
            "loadTime": 0,
            "score": 0,
            "requestsCount": 0,
            "weight": 0
        },
        "categories": [
            {
                "name": "",
                "mark": 0
            }
        ],
        "tips": [
            {
                "advice": "",
                "category": "",
                "score": -1,
                "name": "",
                "priority": 0
            }
        ],
        "timings": {
            "navigationStart": 0,
            "firstByte": 0,
            "firstPaint": 0,
            "domInteractive": 0,
            "loadEvent": 0,
            "startRender": 0,
            "speedIndex": 0,
            "visuallyComplete": 0,
            "oldVisuallyComplete": 0,
            "loadEventStart": 0,
            "lastByte": 0,
            "domLoading": 0,
            "domContentLoadedEventStart": 0,
            "domContentLoadedEventEnd": 0,
            "domComplete": 0,
            "firstContentfulPaint": 0,
            "firstConsistentlyInteractive": 0,
            "largestContentfulPaint": 0,
            "totalBlockingTime": 0,
            "maxPotentialFirstInputDelay": 0,
            "totalLongTasks": 0,
            "lastLongTask": 0,
            "nbLongTasks": 0,
            "cumulativeLayoutShift": 0
        },
        "resourceByType": [
            {
                "type": "",
                "bodyWeight": 0,
                "headerWeight": 0,
                "requestCount": 0
            }
        ],
        "customTimings": [
            {
                "type": "",
                "name": "",
                "startTime": 0,
                "duration": 0
            }
        ],
        "technos": [
            {
                "name": "",
                "version": ""
            }
        ]
    }
  },
  "success": true
}
```


## Get HAR from an analysis
<span class="post verb">POST</span> /v1/speed-analysis/analysis/har

Returns the HAR from the analysis.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="reportId" type="string" required>
  Unique identifier of a report.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/analysis/report' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "reportId": ""
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "har": ""
  },
  "success": true
}
```

---

# Authentication

URL: https://docs.contentsquare.com/en/api/speed-analysis-lab/authentication/

import { Parameters, Parameter } from '~/components';
:::warning
**Since April 30th, 2024, API keys are no longer supported**. You must use OAuth credentials instead to authenticate on our APIs, and migrate your existing applications using API keys.
:::

## OAuth2 authentication

The Contentsquare APIs use the server-to-server OAuth 2.0 standard for authentication, also know as 2-legged OAuth or
OAuth 2LO.

The flow basically consists in calling an authentication endpoint with a pair `client_id` / `client_secret` to retrieve
an access token that remains valid for 1 hour. This JWT token should then be used as a Bearer token in the headers of
your HTTPS requests (in the form `Authorization: Bearer YOUR_ACCESS_TOKEN`).

Note that the API call to the authentication endpoint will also dynamically return the right base URL that you must use.
This base URL depends on which cloud the target project is installed on.

You can refer below to a [detailed example](#example-of-authentication-flow) of the overall flow to retrieve a token and
a base URL, and use those to query the Speed Analysis Lab API.

You can generate a pair `client_id` / `client_secret` from the Contentsquare [console](https://console.contentsquare.com),
as a Contentsquare administrator. You can find how to generate these credentials in our Help Center documentation.

You can create OAuth credentials either:

- At the Project level, to request access resources from a specific project only
- At the Account level: to request access for any project of the account

:::warning
Your OAuth credentials carry many privileges, so make sure to keep them secure! Do not share them in publicly accessible
areas such as GitHub, client-side code, and so forth.
:::

## Refresh your access token

Once you get a JWT access token (see the [authentication endpoint](#authentication-endpoint) below), it's valid for 1 hour.
If you try to query the Contentsquare APIs with access to token that has expired, you will receive a `401 Unauthorized`
error with the error code `JWT_EXPIRED`, in the form:

```json
{
  "success": false,
  "errorMessage": "Auth token is expired.",
  "errorCode": "JWT_EXPIRED"
}
```

In that case, you should first use your OAuth credentials (your pair `client_id` / `client_secret`) to query a new
access token. The OAuth credentials don't expire.

## Authentication endpoint

<span class="post verb">POST</span> https://api.contentsquare.com/v1/oauth/token

<h3>Parameters</h3>

<Parameters>
  <Parameter name="client_id" type="string" required>
    The OAuth `client_id` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="client_secret" type="string" required>
    The OAuth `client_secret` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="grant_type" type="string" required>
    Always set it to `"client_credentials"`, as required by the
    OAuth 2.0 standard.
  </Parameter>
  <Parameter name="scope" type="string" required>
    You should use `"speed-analysis"`.  
    If needed, you can specify a list of several scopes to get a token that can query several APIs (for example "data-export speed-analysis" if you want your token to cover both the [Data Export API](/en/api/export/) and Speed Analysis Lab API scopes). The only scope that cannot be combined with other scopes is `enrichment`.
  </Parameter>
  <Parameter name="project_id" type="integer">
    Required only if you use account-level OAuth credentials, to
    specify which project of the account you want to target.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location 'https://api.contentsquare.com/v1/oauth/token' \
--header 'Content-Type: application/json' \
--data '{
    "client_id": "c3133d76-a768-4f5a-XXX",
    "client_secret": "0ISL0DEC;UyYKB;riWRS0EXXX",
    "grant_type": "client_credentials",
    "scope": "speed-analysis",
    "project_id": 42
}'
```

<h3>Response example</h3>

```json
{
  "access_token": "eyJhbGciOiJSIsImtpY5MTXXX.CNTcKWAUb2mTp2cZyiDRYYOtGCKXXX", // to be used as bearer token to query the APIs
  "token_type": "bearer",
  "expires_in": 3600,
  "scope": "speed-analysis",
  "project_id": 42,
  "endpoint": "https://api.eu-west-1.production.contentsquare.com" // this is the base URL you should use to query the Speed Analysis Lab API endpoints - the provided URL depends on the cloud the project is installed on
}
```

## Example of authentication flow

Below is a sample of JavaScript code to show a complete API call flow that first retrieves an access token and then use
it to retrieve the list of segments on a project:

```javascript
const clientId = "<your_client_id>";
const clientSecret = "<your_client_secret>";
const authEndpoint = "https://api.contentsquare.com/v1/oauth/token";
const authRequestOptions = {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    client_id: clientId,
    client_secret: clientSecret,
    grant_type: "client_credentials",
    project_id: 42,
    scope: "speed-analysis",
  }),
};
const authResponse = await fetch(authEndpoint, authRequestOptions);
const authJsonData = await authResponse.json();
// Below are the access token and base URL that must be used to query the Speed Analysis Lab API endpoints
const accessToken = authJsonData.access_token;
const baseURL = authJsonData.endpoint;
// Using the access token and base URL to query the Speed Analysis Lab API endpoints and get the monitoring list in this example
const speedAnalysisLabResponse = await fetch(`${baseURL}/v1/speed-analysis/monitoring list`, {
  headers: { Authorization: `Bearer ${accessToken}` },
});
const data = await speedAnalysisLabResponse.json();
const monitorings = data.payload.monitorings;
```

## OAuth credentials information endpoint

<span class="post verb">POST</span> https://api.contentsquare.com/v1/oauth/me

<h3>Parameters</h3>

<Parameters>
  <Parameter name="client_id" type="string" required>
    The OAuth `client_id` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="client_secret" type="string" required>
    The OAuth `client_secret` generated from the Contentsquare console.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location 'https://api.contentsquare.com/v1/oauth/me' \
--header 'Content-Type: application/json' \
--data '{
    "client_id": "c3133d76-a768-4f5a-XXX",
    "client_secret": "0ISL0DEC;UyYKB;riWRS0EXXX",
}'
```

<h3>Response example</h3>

```json
{
  "scopes": "speed-analysis metrics data-export session-replay symbolicator",
  "permissions": {
    "projects": [
      {
        "id": 42,
        "name": "UX ANALYTICS"
      }
    ]
  }
}
```

---

# Event endpoints

URL: https://docs.contentsquare.com/en/api/speed-analysis-lab/event-endpoints/

import { Parameters, Parameter } from '~/components';
## Get a list of events

<span class="post verb">POST</span> /v1/speed-analysis/event/list

Returns the list of events.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="key" type="string">
  Key of the event.
  </Parameter>
  <Parameter name="dateFrom" type="ISO 8601 date string">
  Retrieve events executed after this date. 

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="monitoringId" type="number">
  Unique identifier of a monitoring. It can used to get events for a specific monitoring.
  </Parameter>
  <Parameter name="scenarioId" type="number">
  Unique identifier of a scenario. It can used to get events for a specific scenario.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/event/list' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "key": ""
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "events": [
        {
            "key": "",
            "text": "",
            "date": "2016-10-07T12:00:00.000+02:00"
        }
    ]
  },
  "success": true
}
```


## Create an event

<span class="post verb">POST</span> /v1/speed-analysis/event/create

Returns the created event.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="key" type="string" required>
  Key of the event.
  </Parameter>
  <Parameter name="text" type="string" required>
  Text of the event.
  </Parameter>
  <Parameter name="date" type="ISO 8601 date string" required>
  Date of the event.

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="monitorings" type="number[]">
  List of monitoring identifiers that can be retrieved from the monitoring list (`/monitoring/list`). 
  It can be used to associate the event with multiple monitorings.
  </Parameter>
  <Parameter name="scenarios" type="number[]">
  List of scenario identifiers that can be retrieved from the scenario list (`/scenario/list`). 
  It can be used to associate the event with multiple scenarios.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/event/create' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
  "key":"", 
  "text": "", 
  "date": "",
  "monitorings":[0]
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "key": ""
  },
  "success": true
}
```

## Delete an event

<span class="post verb">POST</span> /v1/speed-analysis/event/delete

Returns the deleted event.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="key" type="string" required>
  Key of the event.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/event/create' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
  "key":""
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "key": ""
  },
  "success": true
}
```

---

# Monitoring endpoints

URL: https://docs.contentsquare.com/en/api/speed-analysis-lab/monitoring-endpoints/

import { Parameters, Parameter } from '~/components';
## Get the list of monitorings

<span class="post verb">POST</span> /v1/speed-analysis/monitoring/list

Returns the list of monitorings.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="name" type="string">
  String pattern to filter your monitorings and return only those that contain the pattern in their name
  </Parameter>
 <Parameter name="url" type="string">
  String pattern to filter your monitorings and return only those that contain the pattern in their URL
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/monitoring/list' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "name": "",
    "url": ""
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "monitorings": [
        {
            "id": 0,
            "url": "",
            "name": "",
            "state": "OK",
            "errorMessage": "",
            "lastExecution": 0,
            "enabled": true,
            "frequency": 1440,
            "lang": "en",
            "config": {
                "location": "",
                "browser": {
                    "name": "",
                    "version": ""
                },
                "isMobile": false,
                "bandwidth": {
                    "upstream": 0,
                    "downstream": 0
                },
                "latency": 0,
                "isPrivate": false,
                "screen": {
                    "height": 0,
                    "width": 0
                },
                "basicAuth": {
                    "user": "",
                    "password": ""
                },
                "postData": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "header": [
                    {
                        "key": "",
                        "value": ""
                    }
                ],
                "blacklist": [],
                "whiteList": [],
                "dnsMapping": [
                    {
                        "origin": "",
                        "destination": ""
                    }
                ],
                "cookies": [],
                "repeatedView": false,
                "hhtp2Disabled": false,
                "animationsStopped": {}
            }
        }
    ]
  },
  "success": true
}
```


## Get the monitoring last report

<span class="post verb">POST</span> /v1/speed-analysis/monitoring/last-report

Returns the last report of a monitoring.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="monitoringId" type="number" required>
  Unique identifier of a monitoring.
  </Parameter>
  <Parameter name="metricsOnly" type="boolean">
  Set to true to only generate a summary report, excluding advice, categories, and detected technologies (default: `false`).
  </Parameter>
    <Parameter name="getUniqueIDsForTips" type="boolean">
  Set to true to get an ID for each element of `report.tips`  (default: `false`).
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/monitoring/last-report' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "monitoringId": 0,
    "metricsOnly": false,
    "getUniqueIDsForTips": false
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "lastExecution": 0,
    "alerts": [
        {
            "type": "",
            "threshold": 0,
            "value": 0
        }
    ],
    "missing": [],
    "report": {
        "publicReportUrl": "https://www.dareboost.com/[lang]/report/[reportId]",
        "harFileUrl": "https://www.dareboost.com/download/harFile/[reportId]",
        "date": 0,
        "url": "",
        "lang": "",
        "config": {
            "location": "",
            "browser": {
                "name": "",
                "version": ""
            },
            "isMobile": false,
            "bandwidth": {
                "upstream": 0,
                "downstream": 0
            },
            "latency": 0,
            "isPrivate": false,
            "adblock": false,
            "screen": {
                "height": 0,
                "width": 0
            },
            "basicAuth": {
                "user": "",
                "password": ""
            },
            "postData": [
                {
                    "key": "",
                    "value": ""
                }
            ],
            "header": [
                {
                    "key": "",
                    "value": ""
                }
            ],
            "blacklist": [],
            "whiteList": [],
            "dnsMapping": [
                {
                    "origin": "",
                    "destination": ""
                }
            ],
            "cookies": [],
            "repeatedView": false,
            "hhtp2Disabled": false,
            "animationsStopped": {}
        },
        "summary": {
            "loadTime": 0,
            "score": 0,
            "requestsCount": 0,
            "weight": 0
        },
        "categories": [
            {
                "name": "",
                "mark": 0
            }
        ],
        "tips": [
            {
                "advice": "",
                "category": "",
                "score": -1,
                "name": "",
                "priority": 0
            }
        ],
        "timings": {
            "navigationStart": 0,
            "firstByte": 0,
            "firstPaint": 0,
            "domInteractive": 0,
            "loadEvent": 0,
            "startRender": 0,
            "speedIndex": 0,
            "visuallyComplete": 0,
            "oldVisuallyComplete": 0,
            "loadEventStart": 0,
            "lastByte": 0,
            "domLoading": 0,
            "domContentLoadedEventStart": 0,
            "domContentLoadedEventEnd": 0,
            "domComplete": 0,
            "firstContentfulPaint": 0,
            "firstConsistentlyInteractive": 0,
            "largestContentfulPaint": 0,
            "totalBlockingTime": 0,
            "maxPotentialFirstInputDelay": 0,
            "totalLongTasks": 0,
            "lastLongTask": 0,
            "nbLongTasks": 0,
            "cumulativeLayoutShift": 0
        },
        "resourceByType": [
            {
                "type": "",
                "bodyWeight": 0,
                "headerWeight": 0,
                "requestCount": 0
            }
        ],
        "customTimings": [
            {
                "type": "",
                "name": "",
                "startTime": 0,
                "duration": 0
            }
        ],
        "technos": [
            {
                "name": "",
                "version": ""
            }
        ]
    }
  },
  "success": true
}
```

## Get the monitoring reports

<span class="post verb">POST</span> /v1/speed-analysis/monitoring/reports

Returns the monitoring reports.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="monitoringId" type="number" required>
  Unique identifier of a monitoring.
  </Parameter>
  <Parameter name="limit" type="number">
  Limits the number of reports to return (default: `30`). Set to `0` to get all monitoring reports.
  </Parameter>
  <Parameter name="lastDays" type="number">
  Retrieve reports from the last X days, where X is the value of this parameter.
  </Parameter>
  <Parameter name="dateFrom" type="ISO 8601 date string">
  Retrieve audit executed after this date. Must be a date before `dateTo`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="dateTo" type="ISO 8601 date string">
  Retrieve audit executed before this date. Must be a date after `dateFrom`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="error" type="boolean">
  By default, all results are returned. Set to `false` to retrieve only executions without error. Set to `true` to retrieve only executions with error.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/monitoring/reports' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "monitoringId": 0,
    "limit": 30,
    "lastDays": 0,
    "dateFrom": "2016-03-11T00:00:00.000+0100",
    "dateTo": "2016-03-11T23:59:59.000+0100",
    "error": false
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "statistics": {
        "averageScore": 0,
        "averageWeight": 0,
        "averageRequests": 0,
        "averageLoadTime": 0,
        "averageTimings": {
            "navigationStart": 0,
            "firstByte": 0,
            "firstPaint": 0,
            "domInteractive": 0,
            "loadEvent": 0,
            "startRender": 0,
            "speedIndex": 0,
            "visuallyComplete": 0,
            "oldVisuallyComplete": 0,
            "loadEventStart": 0,
            "lastByte": 0,
            "domLoading": 0,
            "domContentLoadedEventStart": 0,
            "domContentLoadedEventEnd": 0,
            "domComplete": 0,
            "firstContentfulPaint": 0,
            "firstConsistentlyInteractive": 0,
            "largestContentfulPaint": 0,
            "totalBlockingTime": 0,
            "maxPotentialFirstInputDelay": 0,
            "totalLongTasks": 0,
            "lastLongTask": 0,
            "nbLongTasks": 0,
            "cumulativeLayoutShift": 0
        },
        "averageCustomTimings": [
            {
                "type": "",
                "name": "",
                "startTime": 0,
                "duration": 0
            }
        ]
    },
    "monitoringData": [
        {
            "state": "OK",
            "errorMessage": "",
            "id": 0,
            "date": 0,
            "score": 0,
            "weight": 0,
            "requests": 0,
            "loadTime": 0,
            "unreachableRequests": 0,
            "timings": {
                "navigationStart": 0,
                "firstByte": 0,
                "firstPaint": 0,
                "domInteractive": 0,
                "loadEvent": 0,
                "startRender": 0,
                "speedIndex": 0,
                "visuallyComplete": 0,
                "oldVisuallyComplete": 0,
                "loadEventStart": 0,
                "lastByte": 0,
                "domLoading": 0,
                "domContentLoadedEventStart": 0,
                "domContentLoadedEventEnd": 0,
                "domComplete": 0,
                "firstContentfulPaint": 0,
                "firstConsistentlyInteractive": 0,
                "largestContentfulPaint": 0,
                "totalBlockingTime": 0,
                "maxPotentialFirstInputDelay": 0,
                "totalLongTasks": 0,
                "lastLongTask": 0,
                "nbLongTasks": 0,
                "cumulativeLayoutShift": 0
            },
            "customTimings": [
                {
                    "type": "mark",
                    "name": "bootstrap_start",
                    "startTime": 3510,
                    "duration": 0
                }
            ]
        }
    ]
  },
  "success": true
}
```

---

# Scenario endpoints

URL: https://docs.contentsquare.com/en/api/speed-analysis-lab/scenario-endpoints/

import { Parameters, Parameter } from '~/components';
## Get the list of scenarios

<span class="post verb">POST</span> /v1/speed-analysis/scenario/list

Returns the list of scenarios.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="name" type="string">
  String pattern to filter your scenarios and return only those that contain the pattern in their name
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/scenario/list' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "name": ""
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "scenarios": [
        {
            "id": 1,
            "name": ""
        }
    ]
  },
  "success": true
}
```


## Get a scenario report

<span class="post verb">POST</span> /v1/speed-analysis/scenario/report

Returns a scenario report.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="scenarioId" type="number" required>
  Unique identifier of a scenario.
  </Parameter>
  <Parameter name="date" type="number" required>
  Timestamp (in ms) indicating when the report was generated.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/scenario/report' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "scenarioId": 0,
    "date": 1542117158294
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "scenarioReport": {
        "scenarioId": 0,
        "name": "",
        "resultId": 0,
        "date": 0,
        "viewOnTheWeb": "https://www.dareboost.com/scenario/[scenarioId]/report/[date]",
        "summary": {
            "fail": 0,
            "unavailableResource": 0,
            "browserError": 0,
            "sum": {
                "firstPaint": 0,
                "request": 0,
                "startRender": 0,
                "lastByte": 0,
                "weight": 0,
                "domInteractive": 0,
                "domContentLoadedEventStart": 0,
                "domComplete": 0,
                "loadEvent": 0,
                "firstContentfulPaint": 0,
                "loadTime": 0,
                "loadEventStart": 0,
                "firstConsistentlyInteractive": 0,
                "visuallyComplete": 0,
                "speedIndex": 0,
                "firstByte": 0,
                "domContentLoadedEventEnd": 0,
                "domLoading": 0,
                "largestContentfulPaint": 0,
                "totalBlockingTime": 0,
                "maxPotentialFirstInputDelay": 0,
                "totalLongTasks": 0,
                "lastLongTask": 0,
                "nbLongTasks": 0,
                "cumulativeLayoutShift": 0
            },
            "average": {
                "firstPaint": 0,
                "request": 0,
                "startRender": 0,
                "lastByte": 0,
                "weight": 0,
                "domInteractive": 0,
                "domContentLoadedEventStart": 0,
                "domComplete": 0,
                "loadEvent": 0,
                "firstContentfulPaint": 0,
                "loadTime": 0,
                "loadEventStart": 0,
                "firstConsistentlyInteractive": 0,
                "visuallyComplete": 0,
                "speedIndex": 0,
                "firstByte": 0,
                "domContentLoadedEventEnd": 0,
                "domLoading": 0,
                "largestContentfulPaint": 0,
                "totalBlockingTime": 0,
                "maxPotentialFirstInputDelay": 0,
                "totalLongTasks": 0,
                "lastLongTask": 0,
                "nbLongTasks": 0,
                "cumulativeLayoutShift": 0
            }
        },
        "steps": [
            {
                "stepId": 0,
                "stepResultId": "",
                "name": "",
                "description": "",
                "fail": 0,
                "unavailableResource": 0,
                "browserError": 0,
                "timings": {
                    "navigationStart": 0,
                    "firstByte": 0,
                    "firstPaint": 0,
                    "domInteractive": 0,
                    "loadEvent": 0,
                    "startRender": 0,
                    "speedIndex": 0,
                    "visuallyComplete": 0,
                    "oldVisuallyComplete": 0,
                    "loadEventStart": 0,
                    "lastByte": 0,
                    "domLoading": 0,
                    "domContentLoadedEventStart": 0,
                    "domContentLoadedEventEnd": 0,
                    "domComplete": 0,
                    "firstContentfulPaint": 0,
                    "firstConsistentlyInteractive": 0,
                    "largestContentfulPaint": 0,
                    "totalBlockingTime": 0,
                    "maxPotentialFirstInputDelay": 0,
                    "totalLongTasks": 0,
                    "lastLongTask": 0,
                    "nbLongTasks": 0,
                    "cumulativeLayoutShift": 0
                },
                "weight": 0,
                "requestsCount": 0,
                "loadTime": 0,
                "customTimings": [
                    {
                        "type": "",
                        "name": "",
                        "startTime": 0,
                        "duration": 0
                    }
                ]
            }
        ]
    }
  },
  "success": true
}
```

## Get the scenario reports

<span class="post verb">POST</span> /v1/speed-analysis/scenario/reports

Returns the scenario reports.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="scenarioId" type="number" required>
  Unique identifier of a scenario.
  </Parameter>
  <Parameter name="limit" type="number">
  Limits the number of reports to return (default: `30`). Set to `0` to get all scenario reports.
  </Parameter>
  <Parameter name="lastDays" type="number">
  Retrieve reports from the last X days, where X is the value of this parameter.
  </Parameter>
  <Parameter name="dateFrom" type="ISO 8601 date string">
  Retrieve audit executed after this date. Must be a date before `dateTo`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="dateTo" type="ISO 8601 date string">
  Retrieve audit executed before this date. Must be a date after `dateFrom`.  

  ISO format in UTC (for example "2021-08-13T12:32:40.000Z") or with a time zone offset ("2021-08-13T12:32:40+02:00" or "2021-08-13T12:32:40%2B+02:00" when encoded in the URL).
  </Parameter>
  <Parameter name="error" type="boolean">
  By default, all results are returned. Set to `false` to retrieve only executions without error. Set to `true` to retrieve only executions with error.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/scenario/reports' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "scenarioId": 0,
    "limit": 30,
    "lastDays": 0,
    "dateFrom": "2016-03-11T00:00:00.000+0100",
    "dateTo": "2016-03-11T23:59:59.000+0100",
    "error": false
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "scenario": {
        "id": 0,
        "name": "",
        "reports": [
            {
                "resultId": 0,
                "date": 0,
                "viewOnTheWeb": "https://www.dareboost.com/scenario/[scenarioId]/report/[date]",
                "summary": {
                    "fail": 0,
                    "unavailableResource": 0,
                    "browserError": 0,
                    "sum": {
                        "firstPaint": 0,
                        "request": 0,
                        "startRender": 0,
                        "lastByte": 0,
                        "weight": 0,
                        "domInteractive": 0,
                        "domContentLoadedEventStart": 0,
                        "domComplete": 0,
                        "loadEvent": 0,
                        "firstContentfulPaint": 0,
                        "loadTime": 0,
                        "loadEventStart": 0,
                        "firstConsistentlyInteractive": 0,
                        "visuallyComplete": 0,
                        "speedIndex": 0,
                        "firstByte": 0,
                        "domContentLoadedEventEnd": 0,
                        "domLoading": 0,
                        "largestContentfulPaint": 0,
                        "totalBlockingTime": 0,
                        "maxPotentialFirstInputDelay": 0,
                        "totalLongTasks": 0,
                        "lastLongTask": 0,
                        "nbLongTasks": 0,
                        "cumulativeLayoutShift": 0
                    },
                    "average": {
                        "firstPaint": 0,
                        "request": 0,
                        "startRender": 0,
                        "lastByte": 0,
                        "weight": 0,
                        "domInteractive": 0,
                        "domContentLoadedEventStart": 0,
                        "domComplete": 0,
                        "loadEvent": 0,
                        "firstContentfulPaint": 0,
                        "loadTime": 0,
                        "loadEventStart": 0,
                        "firstConsistentlyInteractive": 0,
                        "visuallyComplete": 0,
                        "speedIndex": 0,
                        "firstByte": 0,
                        "domContentLoadedEventEnd": 0,
                        "domLoading": 0,
                        "largestContentfulPaint": 0,
                        "totalBlockingTime": 0,
                        "maxPotentialFirstInputDelay": 0,
                        "totalLongTasks": 0,
                        "lastLongTask": 0,
                        "nbLongTasks": 0,
                        "cumulativeLayoutShift": 0
                    }
                },
                "steps": [
                    {
                        "stepId": 0,
                        "stepResultId": "",
                        "name": "",
                        "description": "",
                        "fail": 0,
                        "unavailableResource": 0,
                        "browserError": 0,
                        "timings": {
                            "navigationStart": 0,
                            "firstByte": 0,
                            "firstPaint": 0,
                            "domInteractive": 0,
                            "loadEvent": 0,
                            "startRender": 0,
                            "speedIndex": 0,
                            "visuallyComplete": 0,
                            "oldVisuallyComplete": 0,
                            "loadEventStart": 0,
                            "lastByte": 0,
                            "domLoading": 0,
                            "domContentLoadedEventStart": 0,
                            "domContentLoadedEventEnd": 0,
                            "domComplete": 0,
                            "firstContentfulPaint": 0,
                            "firstConsistentlyInteractive": 0,
                            "largestContentfulPaint": 0,
                            "totalBlockingTime": 0,
                            "maxPotentialFirstInputDelay": 0,
                            "totalLongTasks": 0,
                            "lastLongTask": 0,
                            "nbLongTasks": 0,
                            "cumulativeLayoutShift": 0
                        },
                        "weight": 0,
                        "requestsCount": 0,
                        "loadTime": 0,
                        "customTimings": [
                            {
                                "type": "",
                                "name": "",
                                "startTime": 0,
                                "duration": 0
                            }
                        ]
                    }
                ]
            }
        ]
    }
  },
  "success": true
}
```


## Get the scenario step report

<span class="post verb">POST</span> /v1/speed-analysis/scenario/step/report

Returns the report of the scenario step.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="stepId" type="string" required>
  Unique identifier of the step result of a scenario. Refers to the `stepResultId` of `/scenario/reports` and `/scenario/report`.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/scenario/step/report' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "stepId": ""
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "step": {
        "id": "",
        "previousStepId": "",
        "nextStepId": "",
        "stepResultId": 0,
        "date": 0,
        "timings": {
            "firstByte": 0,
            "firstPaint": 0,
            "domInteractive": 0,
            "loadEvent": 0,
            "startRender": 0,
            "speedIndex": 0,
            "visuallyComplete": 0,
            "oldVisuallyComplete": 0,
            "loadEventStart": 0,
            "lastByte": 0,
            "domLoading": 0,
            "domContentLoadedEventStart": 0,
            "domContentLoadedEventEnd": 0,
            "domComplete": 0,
            "firstContentfulPaint": 0,
            "firstConsistentlyInteractive": 0,
            "largestContentfulPaint": 0,
            "totalBlockingTime": 0,
            "maxPotentialFirstInputDelay": 0,
            "totalLongTasks": 0,
            "lastLongTask": 0,
            "nbLongTasks": 0,
            "cumulativeLayoutShift": 0
        },
        "browserError": "[]",
        "unavailableResource": "{}",
        "actionsResult": [
            {
                "id": 0,
                "time": 0,
                "status": "",
                "message": ""
            }
        ],
        "customTimings": [
            {
                "type": "",
                "name": "",
                "startTime": 0,
                "duration": 0
            }
        ]
    }
  },
  "success": true
}
```

## Get HAR from an analysis
<span class="post verb">POST</span> /v1/speed-analysis/scenario/report/har

Returns the HAR from the analysis.

<h3>Parameters</h3>

<Parameters>
  <Parameter name="scenarioStepResultId" type="string" required>
  Unique identifier of the scenario step result, obtained when launching a scenario execution.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location --request GET 'https://api.contentsquare.com/v1/speed-analysis/scenario/report/har' \
--header 'Authorization: Bearer <your_access_token>'
--data '{
    "scenarioStepResultId": ""
}'
```

<h3>Response example</h3>

```json
{
  "payload": {
    "har": ""
  },
  "success": true
}
```

---

# Getting Started

URL: https://docs.contentsquare.com/en/api/speed-analysis-lab/

The Contentsquare Speed Analysis Lab API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.
All API requests must be made over HTTPS.

Not a developer? Contact your CSM. They will direct you to the best solution to meet your data needs.

- **Base URL of the API:** `https://api.{cloud}.contentsquare.com`
- **Current Version of the API:** 1.0

:::note
The `{cloud}` part in the base URL depends on which cloud the target project you want to query resources from is
installed. The base URL that you should use will be returned dynamically by our authentication server. See an
explanation and a detailed example in [Authentication](authentication/).
:::

## What is Contentsquare?

Contentsquare is a next-gen Analytics tool that helps you understand how and why your users are interacting with your app, mobile, and websites.

Speed Analysis is a web pages testing and monitoring capability which enables you to monitor your website, spot slowdowns, discover optimization opportunities, and benchmark against your competitors.

<Render file="en/plans/dem"/>

## Analysis

Speed Analysis Lab allows you to analyze the performance on demand and generate reports for any web page.

[See how to analyze a website](https://support.contentsquare.com/hc/en-gb/articles/4412110709266-How-to-run-a-basic-web-performance-test)

## Monitorings 

Leverage the Speed Analysis Lab’s synthetic monitoring to keep a close eye on your main pages:

- Be notified when a page experiences slowness or downtime
- Analyze performance trends over time and detect regression
- Benchmark your pages against your competitors
- Monitor lower environments to fix performance issues before reaching production

[See how to create monitorings](https://support.contentsquare.com/hc/en-gb/articles/360021548400-How-to-use-web-page-monitoring)

## Scenarios

Create scenarios to closely monitor your main funnels and user journeys. With scenarios, you can:
- Be alerted when a funnel breaks or slows down
- Analyze performance trends over time and detect regression
- Leverage scenarios on lower environments to fix performance issues before reaching production


[See how to create scenarios](https://support.contentsquare.com/hc/en-gb/articles/15550675911964-How-to-record-and-import-scenarios-via-your-web-browser)


## Events

Events in Speed Analysis Lab are user-defined markers that allow you to track and document significant events (for example website updates, releases, failures). These events are then shown on your performance graphs, helping you correlate changes in website performance with specific actions or incidents.

[See how to add events](https://support.contentsquare.com/hc/en-gb/articles/4415633493266-How-to-add-events)

[Learn more about the Speed Analysis Lab](https://support.contentsquare.com/hc/en-gb/articles/360019574579-Introduction-to-Speed-Analysis-Lab).

---

# Authentication

URL: https://docs.contentsquare.com/en/api/enrichment/authentication/

import { Parameters, Parameter } from '~/components';
:::warning
**Since April 30th, 2024, API keys are no longer supported**. You must use OAuth credentials instead to authenticate on our APIs, and migrate your existing applications using API keys.
:::

## OAuth2 authentication

The Contentsquare APIs use the server-to-server OAuth 2.0 standard for authentication, also know as 2-legged OAuth or
OAuth 2LO.

The flow basically consists in calling an authentication endpoint with a pair `client_id` / `client_secret` to retrieve
an access token that remains valid for 1 hour. This JWT token should then be used as a Bearer token in the headers of
your HTTPS requests (in the form `Authorization: Bearer YOUR_API_KEY`).

Note that the API call to the authentication endpoint will also dynamically return the right base URL that you must use.
This base URL depends on which cloud the target project is installed on.

You can refer below to a [detailed example](#example-of-authentication-flow) of the overall flow to retrieve a token and
a base URL, and use those to query the Data Export API.

You can generate a pair `client_id` / `client_secret` from the Contentsquare [console](https://console.contentsquare.com),
as a Contentsquare administrator. You can find how to generate these credentials in our Help Center documentation.

You can create OAuth credentials either:

- At the Project level, to request access resources from a specific project only
- At the Account level: to request access for any project of the account

:::warning
Your OAuth credentials carry many privileges, so make sure to keep them secure! Do not share them in publicly accessible
areas such as GitHub, client-side code, and so forth.
:::

## Refresh your access token

Once you get a JWT access token (see the [authentication endpoint](#authentication-endpoint) below), it's valid for 1 hour.
If you try to query the Contentsquare APIs with access to token that has expired, you will receive a `401 Unauthorized`
error with the error code `JWT_EXPIRED`, in the form:

```json
{
  "success": false,
  "errorMessage": "Auth token is expired.",
  "errorCode": "JWT_EXPIRED"
}
```

In that case, you should first use your OAuth credentials (your pair `client_id` / `client_secret`) to query a new
access token. The OAuth credentials don't expire.

## Authentication endpoint

<span class="post verb">POST</span> https://api.contentsquare.com/v1/oauth/token

<h3>Request parameters</h3>

<Parameters>
  <Parameter name="client_id" type="string" required>
    The OAuth `client_id` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="client_secret" type="string" required>
    The OAuth `client_secret` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="grant_type" type="string" required>
    Always set it to `"client_credentials"`, as required by the
    OAuth 2.0 standard.
  </Parameter>
  <Parameter name="scope" type="string" required>
    You should use `"enrichment"`.  
    You **cannot** combine this scope with any other scopes (for example: `data-export enrichment` will return an error).
  </Parameter>
  <Parameter name="project_id" type="integer">
    Required only if you use account-level OAuth credentials, to
    specify which project of the account you want to target.
  </Parameter>
    <Parameter name="integration_id" type="integer" required>
    Required only if you use the `enrichment` scope.  
    This is the ID of the target integration.  
    This ID is provided by Contentsquare when installing the [integration](/en/api/enrichment/definitions/#integration) on a project.
  </Parameter>
  
</Parameters>

<h3>Request example</h3>

```shell
curl --location 'https://api.contentsquare.com/v1/oauth/token' \
--header 'Content-Type: application/json' \
--data '{
    "client_id": "c3133d76-a768-4f5a-XXX",
    "client_secret": "0ISL0DEC;UyYKB;riWRS0EXXX",
    "grant_type": "client_credentials",
    "scope": "enrichment",
    "project_id": 42,
    "integration_id": 123,
}'
```

<h3>Response example</h3>

```json
{
  "access_token": "eyJhbGciOiJSIsImtpY5MTXXX.CNTcKWAUb2mTp2cZyiDRYYOtGCKXXX", // to be used as bearer token to query the APIs
  "token_type": "bearer",
  "expires_in": 3600,
  "scope": "enrichment",
  "project_id": 42,
  "endpoint": "https://api.eu-west-1.production.contentsquare.com" // this is the base URL you should use to query the Data Export API endpoints - the provided URL depends on the cloud the project is installed on
}
```

## Example of authentication flow

Below is a sample of JavaScript code to show a complete API call flow that first retrieves an access token and then use
it to retrieve the list of export jobs on a project:

```javascript
const clientId = "<your_client_id>";
const clientSecret = "<your_client_secret>";
const authEndpoint = "https://api.contentsquare.com/v1/oauth/token";
const authRequestOptions = {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    client_id: clientId,
    client_secret: clientSecret,
    grant_type: "client_credentials",
    scope: "data-export",
    project_id: 42,
    integration_id: 123,
  }),
};
const authResponse = await fetch(authEndpoint, authRequestOptions);
const authJsonData = await authResponse.json();
// Below are the access token and base URL that must be used to query the Data Export API endpoints
const accessToken = authJsonData.access_token;
const baseURL = authJsonData.endpoint;
// Using the access token and endpoint to push data to the enrichment API
await fetch(`${baseURL}/...`);
```

## OAuth credentials information endpoint

<span class="post verb">POST</span> https://api.contentsquare.com/v1/oauth/me

<h3>Request parameters</h3>

<Parameters>
  <Parameter name="client_id" type="string">
    The OAuth `client_id` generated from the Contentsquare console.
  </Parameter>
  <Parameter name="client_secret" type="string">
    The OAuth `client_secret` generated from the Contentsquare console.
  </Parameter>
</Parameters>

<h3>Request example</h3>

```shell
curl --location 'https://api.contentsquare.com/v1/oauth/me' \
--header 'Content-Type: application/json' \
--data '{
    "client_id": "c3133d76-a768-4f5a-XXX",
    "client_secret": "0ISL0DEC;UyYKB;riWRS0EXXX",
}'
```

<h3>Response example</h3>

```json
{
  "scopes": "metrics data-export session-replay symbolicator",
  "permissions": {
    "projects": [
      {
        "id": 42,
        "name": "UX ANALYTICS"
      }
    ]
  }
}
```

---

# Definitions

URL: https://docs.contentsquare.com/en/api/enrichment/definitions/

## Provider
A provider is the entity (usually a technology partner) that will enrich the
data.

A provider is identified by a unique `providerId` by Contentsquare.

A provider will create [integrations](#integration) in order to be able to send
data to Contentsquare.

## Integration

An integration is created by a [provider](#provider) to declare what data will
be sent to Contentsquare. It is represented by a data schema provided by the
provider, in the form of a JSON object.

When data will be sent to Contentsquare, a specific integration will be
authenticated and Contentsquare will check that enrichments abide by the schema
of the integration.

An integration is identified by a unique `integrationId` by Contentsquare.

An integration can have multiple [integration versions](#integration-version).

## Integration version

An integration can have multiple schema versions, to allow for updating and
versioning an [integration](#integration) while avoiding to break enrichments
flows relying on a previous schema.

See [the dedicated section](/en/api/enrichment/update-an-integration-schema/) to see how to manage
an integration schema update.

## Enrichment

An enrichment is a data instance that matches an [integration](#integration)
schema.
It is the data sent by the provider to enrich Contentsquare sessions.

If an enrichment does not meet the specified [integration version schema](#integration-version),
it will be rejected.

As several enrichments can be sent to enrich the same Contentsquare [session](#session),
each enrichment for a specific session is indexed with an [enrichment number](#enrichment-number).

## Enrichment number

Each new [enrichment](#enrichment) for a specific session is indexed to be
differentiated from the previous enrichments received for the same session.

Currently, no more than 3 enrichments can be sent per session, so enrichments
will be indexed with a number from 1 to 3 included. The enrichment number should
be specified by the provided but if not, it will be considered as being 1 by
default.

The enrichment number can be used to update an existing enrichment: if for a
session, an enrichment is pushed with the same index as a existing enrichment,
it will get updated with the last enrichment received.

See [the dedicated section](/en/api/enrichment/update-an-enrichment/) to see how to manage an
enrichment update.

## Enrichment field

An enrichment field is a specific key in an [enrichments](#enrichment) data
object.

## Enrichment batch

An enrichment batch is a collection of [enrichments](#enrichment), in the form
of an array of JSON objects. Enrichments are sent in batch to the Enrichment API
endpoint. Of course, nothing prevents the provider from sending a batch of one
enrichment only.

For security purposes, if an enrichment gets rejected, the full batch will be
rejected.

## Session

A session is a visit of a user on a website or mobile app.
The purpose of the Enrichment API is to enrich Contentsquare sessions data.

---

# Creating an integration

URL: https://docs.contentsquare.com/en/api/enrichment/creating-integration/

Get in touch with your Contentsquare contact to provide the required
information.
You will need to provide:

- A data schema (in the form of a JSON object): see below
- A name, logo and description of what the integration does and related use
  cases to be listed in the Contentsquare integrations catalog.

## Schema format

```json
{
  "fields": [
    // the list of fields
    {
        "name": "FIELD_NAME_1", // max 50 bytes
        "type": "STRING", // either "DATETIME", "INT", "FLOAT", "STRING" or "BOOL"
        "optional": true, // either true or false to make this field optional or not
        "label": "Field 1", // a business name that can be used in user interfaces
        "description": "A first field" // a business description that can be displayed in documentation pages and user interfaces
    },
    {
        "name": "FIELD_NAME_2",
        "type": "INT",
        "optional": false,
        "label": "Field 2",
        "description": "Another field"
    }
  ]
}
```

:::note
When registering a new schema, Contentsquare will provide you with a
corresponding `integrationVersion` (will be 1 by default for the first schema that
is created and will be incremented by 1 for each new version). Then [when
pushing enrichments](/en/api/enrichment/sending-enrichment-data-batches-cs/#sending-data-to-the-enrichment-endpoint), you will need to
specify for which `integrationVersion`.
:::

:::tip
Using different integration versions, you can safely update and version an
integration while avoiding to break enrichments flows relying on a previous
schema. See [the dedicated section](/en/api/enrichment/update-an-integration-schema/) to see how
to manage an integration schema update.
:::

### Data types

An enrichment field can be of one of the following `type`s:

- `"STRING"`:
  - Min length: `0`
  - Max length: `50` bytes
- `"INT"`:
  - Min integer: `-2147483648`
  - Max integer: `2147483647`
- `"FLOAT"`:
  - Min float: `-1.79769e+308`
  - Min float: `1.79769eE+308`
- `"BOOL"`:
  - Boolean values: `true` / `false`
- `"DATETIME"`:
  - Format: `YYYY-MM-DDThh:mm:ssZ` (example: "2022-07-26T14:47:35Z").

## Limitations

- A schema cannot include more than 10 fields of each type (so there can be up
  to 10 strings, 10 integers, 10 booleans etc.)
- Key names length is limited to 30 bytes
- Strings are limited to 50 bytes

:::tip
Try to keep your key names as short as possible to optimize performance.
:::

## Example

An example schema for a provider sending phone call data could look like this:

```json
{
  "fields": [
    {
      "name": "answered",
      "type": "BOOL",
      "optional": true,
      "label": "Call answered",
      "description": "Whether the call was answered (true) or not (false)"
    },
    {
      "name": "call_duration",
      "type": "INT",
      "optional": false,
      "label": "Call duration",
      "description": "The call duration in milliseconds"
    },
    {
      "name": "call_client_rating",
      "type": "FLOAT",
      "optional": true,
      "label": "Client rating",
      "description": "The call rating left by the client after the call if any"
    },
    {
      "name": "call_center_name",
      "type": "STRING",
      "optional": false,
      "label": "Call center name",
      "description": "The name of the call center that made the call"
    },
    {
      "name": "call_datetime",
      "type": "DATETIME",
      "optional": false,
      "label": "Call date and time",
      "description": "The date and time at which the call started"
    }
  ]
}
```

---

# Enrichment API

URL: https://docs.contentsquare.com/en/api/enrichment/

The Contentsquare Enrichment API is organized around REST. Our API has
predictable resource-oriented URLs, accepts form-encoded request bodies,
returns JSON-encoded responses, and uses standard HTTP response codes,
authentication, and verbs.
Not a developer? Contact your CSM. They will direct you to the best
solution to meet your data needs.

- **Base URL of the API:** `https://enrichment-api.{cloud}.contentsquare.com/`
- **Current Version of the API:** 1.0

:::note
The `{cloud}` part in the base URL depends on which cloud the target project you want to query resources from is
installed. The base URL that you should use will be returned dynamically by our authentication server. See an
explanation and a detailed example in [Authentication](authentication/).
:::

## What is Contentsquare?

Contentsquare is a next-gen Analytics tool that helps you understand how and why
your users are interacting with your app, mobile, and website.

## What this API is about

Contentsquare relies on a web tracking tag or mobile SDK to track session-based
data. By session we mean a user's visit on a website or app.

This API allows for enriching the behavioural data tracked by Contentsquare
client-side, with other session-based data that can be sent server-side.

For example, you can start reconciling offline and online journeys by enriching
web sessions data with phoning data for calls that were triggered from those
sessions. As Contentsquare cannot access phone call data during a web session
via its tag or SDK, the related data must be sent to Contentsquare server-side,
once the calls are ended and processed. In Contentsquare, you can then create
user segments based on this phoning data and start answering questions like:
"how does a specific journey on my website impact my conversion on the phone?",
or "How do users who end up making a qualitative call behave on my website?"

:::note
As of today, the Enrichment API does not support Transactions.
:::

## Enrichment Flow overview

Making an integration based on the Enrichment API up and running goes through
the following steps:

1. As a starting point, the [Provider](definitions/#provider) provides an integration schema
   to Contentsquare and gets listed in the Contentsquare integrations catalog
1. Customers install the integration and provides the [Provider](definitions/#provider) with
   the generated Contentsquare OAuth credentials (client_id/client_secret)
1. During web sessions, the [Provider](definitions/#provider) pulls Contentsquare session
   information (project ID, session ID) that will be used by Contentsquare
   to match the data received server-side
1. The [Provider](definitions/#provider) can then send enrichment data batches:
   1. The [Provider](definitions/#provider) authenticates with the OAuth credentials provided
      by the customer, and receives both a JWT access token valid for 1 hour and
      the dynamic base URL of the enrichment endpoint (that depends on the cloud
      the target project is installed on)
   1. The [Provider](definitions/#provider) sends the data to the enrichment endpoint with a
      valid JWT access token

And here is a diagram summarizing the detailed interactions involved in the
authentication flow for an integration based on the integration API:

![Enrichment API Authentication Flow Diagram](~/assets/api/enrichment/enrichment_api_auth_flow.png)

We will detail each step in the following sections.

---

# Installing an integration

URL: https://docs.contentsquare.com/en/api/enrichment/installing-an-integration/

Once an integration has been created by a [Provider](/en/api/enrichment/definitions/#provider) and is available in
the Contentsquare integrations catalog, from there customers can install the
integration.
When they go through the installation flow, customers are provided with a
**project ID** and **OAuth credentials** (a pair `client_id` / `client_secret`) in
the Contentsquare UI. Those 2 elements have to be provided to the technology
partner so that the latter can know which project to send data for, and how to
authenticate.

:::note
It means that on the [Provider](/en/api/enrichment/definitions/#provider) side, there should be some kind of
configuration user interface prompting the customer for the Contentsquare
project ID and OAuth credentials.
:::

:::tip
The scope of one customer "project" in the [Provider](/en/api/enrichment/definitions/#provider) definition may
correspond to several projects in the Contentsquare definition. In such a
case, and if data should be sent to multiple Contentsquare projects, then
several integrations will have to be installed and a list of (project ID, OAuth
credentials) pairs will need to be stored in the configuration of the technology
partner.
:::

---

# Retrieving Contentsquare session identifiers from the customer's website

URL: https://docs.contentsquare.com/en/api/enrichment/retrieving-cs-session-ids-from-customers-website/

Once an integration has been installed, the [Provider](/en/api/enrichment/definitions/#provider) should start
collecting Contentsquare session identifiers during web visits on the common
customer's website. These identifiers will be used to attach the enrichment data
to the right Contentsquare sessions when data will be received from the
[Provider](/en/api/enrichment/definitions/#provider).
Those identifiers are:

- The **project ID**: identifies the Contentsquare project ID where the data is
  stored
- The **user ID**: identifies the Contentsquare anonymous user ID for the user
  visiting the website
- The **session number**: identifies a specific session (as an ordered index) of the
  user ID. For example, if Contentsquare has tracked 4 different sessions of the same
  anonymous user, the last session number will be 4.

:::note
The combination of a user ID and session number makes a unique session
identifier.
:::

## How to get those Contentsquare session identifiers?

### Web

During a visit on a website, you can interact with Contentsquare’s tag to pull
those identifiers via the [`afterPageView`](/en/web/third-party-integrations-and-implementation-examples/#afterpageview) command. A JavaScript code using that
command should look like this:

```javascript
const yourCallback = (context) => {
  const projectId = context.projectId;
  const [userId, sessionNumber] = context.sessionKey.split(".");
  // store these Contentsquare session identifiers in your backend
};

window._uxa = window._uxa || [];
_uxa.push(["afterPageView", yourCallback]);
```

By calling this function you will get the project ID, user ID and session number
of each session that are required to identify the Contentsquare sessions to be
enriched.

:::tip
We advise [Provider](/en/api/enrichment/definitions/#provider) to group the data by project ID as each project
ID will require specific OAuth credentials to authenticate.
:::

### Android native

You can call the Contentsquare public API on the Android SDK to retrieve these identifiers at any time.

```kotlin
val projectId = Contentsquare.getProjectId()
val sessionNumber = Contentsquare.getSessionNumber()
// store these Contentsquare session identifiers in your backend
```

:::tip
We advise [Provider](/en/api/enrichment/definitions/#provider) to group the data by project ID as each project
ID will require specific OAuth credentials to authenticate.
:::

### iOS native

You can call the Contentsquare public API on the iOS SDK to retrieve these identifiers at any time.

```swift
let projectID = Contentsquare.projectID
let sessionNumber = Contentsquare.sessionNumber
// store these Contentsquare session identifiers in your backend
```

:::tip
We advise [Provider](/en/api/enrichment/definitions/#provider) to group the data by project ID as each project
ID will require specific OAuth credentials to authenticate.
:::

---

# Sending enrichment data batches to Contentsquare

URL: https://docs.contentsquare.com/en/api/enrichment/sending-enrichment-data-batches-cs/

Once the [Provider](/en/api/enrichment/definitions/#provider) has collected the required Contentsquare
session identifiers, they can start enriching the Contentsquare data with their
own data.
Sending a batch of enrichment data falls into 2 steps:

- Authenticating and retrieving the right enrichment endpoint dynamically
- Sending the enrichment data to this endpoint with a valid JWT

## Authentication

See the dedicated [Authentication section](/en/api/enrichment/authentication/).

## Sending data to the enrichment endpoint

### Prerequisites

- Step 3: the [Provider](/en/api/enrichment/definitions/#provider) must have the knowledge of which
  Contentsquare project ID and sessions the data will enrich
- Step 4.1: the [Provider](/en/api/enrichment/definitions/#provider) must have a valid JWT and base URL for the enrichment endpoint
- All the enrichments of a batch sent to the enrichment endpoint have to match
  the schema version of the integration provided in the request (if an
  enrichment gets rejected, then the full batch will be rejected)

### HTTP Request

#### Request

- **Endpoint** (returned by the authentication call in step 4.1):<br/>
  `https://enrichment-api.{cloud}.contentsquare.com/v1/enrichments`
- **Method**: `POST`
- **Header**: `Authorization: Bearer {JWT access token}`
- **Body**:

```json
{
  "integrationVersion": 1, // required, provided by Contentsquare when creating a new schema
  "projectId": 1, // retrieved in step 3
  "enrichments": [
    {
      "userId": "{USER_ID}", // string, retrieved in step 3
      "sessionNumber": {SESSION_NUMBER}, // integer, retrieved in step 3
      "enrichmentNumber": 1, // integer, max 3, optional (will be 1 if not specified)
      "enrichment": {
        "field1": "Some string",
        "field2": 42,
        "field3": 3.14,
        "field4": "2022-03-23T00:10:30Z",
        "field5": true
      }
    }
  ]
}
```

- `integrationVersion`: **a schema version for the integration must be
  specified** so that Contentsquare can know which schema the data must match.
  Every time a new schema is created, Contentsquare provides the provider with a
  new integration version. The [Provider](/en/api/enrichment/definitions/#provider) must take care of sending data that
  match the right schema version. If the [Provider](/en/api/enrichment/definitions/#provider) has only one schema
  registered, then the `integrationVersion` should remain `1` by default.
- `enrichmentNumber`: as a Contentsquare session can be enriched with up to 3
  enrichments, each enrichment must be indexed so that it can potentially be
  updated later (see the [dedicated section](/en/api/enrichment/update-an-enrichment/) on how to
  update an enrichment). **Index should start at 1 and can be max 3**. If no
  enrichment number is specified by the [Provider](/en/api/enrichment/definitions/#provider), it will be considered as `1`
  by default (meaning that if the [Provider](/en/api/enrichment/definitions/#provider) never specifies any enrichment
  number, any new enrichment for a session will overwrite the previous one and
  there will be only 1 enrichment per session - with index `1`)

#### Response

**Success `200`**

(Empty body)

#### Errors

##### Unauthorized: `401`: invalid JWT token

```json
{
  "message": "Unauthorized"
}
```

##### Bad request `400`: data validation failed

```json
{
  "message": "enrichments don't match expected payload"
}
```

##### Bad request `400`: bad integration version

```json
{
  "message": "bad integration version"
}
```

### Example

#### Request

```shell
curl --location --request POST 'https://enrichment-api.ba.contentsquare.com/v1/enrichments' \
--header 'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IktJRCJ9.eyJpc3MiOiJlbnJpY2htZW50SW50ZWdyYXRpb24iLCJpYXQiOiJJQVQiLCJleHAiOiJFWFAiLCJ2ZXJzaW9uIjoiMSIsInByb2plY3RJZCI6MTYyLCJpbnRlZ3JhdGlvbklkIjoxMDB9' \
--data-raw '{
    "integrationVersion": 1,
    "projectId": 162,
    "enrichments": [
        {
            "userId": "aaa-aaa-aaa",
            "sessionNumber": 5,
            "enrichmentNumber": 1,
            "enrichment": {
                "has_called": true,
                "call_duration": 3532,
                "call_client_rating": 4.5,
                "call_center_name": "RENNES",
                "call_date": "2022-01-01T20:02:22Z"
            }
        },
        {
            "userId": "aaa-aaa-aaa",
            "sessionNumber": 5,
            "enrichmentNumber": 2,
            "enrichment": {
                "has_called": true,
                "call_duration": 2293,
                "call_client_rating": 2,
                "call_center_name": "RENNES",
                "call_date": "2022-01-01T18:09:54"
            }
        }
    ]
}'
```

#### Response

**Success `200`**

### Limitations

- EnrichmentNumber:
  - Min: 1
  - Max: 3
- Number of enrichments per batch: max 200
- Sessions that started more than 7 days ago cannot be enriched (enrichment for
  those sessions will not be rejected but no data will be available in the
  Contentsquare platform in the end)

:::note
For security purposes, if any enrichment gets rejected, then the full
enrichment batch it belongs to will be rejected.
:::

---

# Update an enrichment

URL: https://docs.contentsquare.com/en/api/enrichment/update-an-enrichment/

If the [Provider](/en/api/enrichment/definitions/#provider) wants to update a specific enrichment, it can be done
thanks to the `enrichmentNumber` key.
While incrementing this key represents a whole new "event" for the target
session, sending an enrichment with an enrichment number already used for that
session will overwrite the enrichment that was sent previously with the same
enrichment number.

Use this to update the data that was sent previously based on some new
information the [Provider](/en/api/enrichment/definitions/#provider) processed for the same event.

## Example

In a scenario where the [Provider](/en/api/enrichment/definitions/#provider) is a company that tracks phone calls, it might
happen that some data related to the call gets processed after the original
enrichment for this call was sent (for example, a conversion occurred following the call
but was not materialized yet the first time the call data was sent to
Contentsquare).

In such a case, as it's still related to the same phone call, the [Provider](/en/api/enrichment/definitions/#provider) can
update the enrichment later instead of sending a whole new enrichment.

---

# Update an integration schema

URL: https://docs.contentsquare.com/en/api/enrichment/update-an-integration-schema/

If the [Provider](/en/api/enrichment/definitions/#provider) wants to update the schema of an integration, it can be done
thanks to the `integrationVersion` key. By incrementing the version, the
provider can decide to add, delete or edit keys of the data schema while
protecting enrichment flows that may prevail based on a previous schema.
Enrichments batches should specify the `integrationVersion` so that the data is
compared to the right schema.

## Example

In a scenario where a [Provider](/en/api/enrichment/definitions/#provider) wants to update its integration to add
new enrichment fields, the provider can:

- Send to Contentsquare a new integration version to be registered
- While Contentsquare is reviewing and registering the new schema, enrichments
  can still be sent on the previous schema
- When the new schema is registered eventually, the [Provider](/en/api/enrichment/definitions/#provider) can
  switch to the new schema for all new enrichment by the specifying the right
  version in the enrichment batches
- Potentially some customers could still decide to rely on the previous schema
  if needed (then the [Provider](/en/api/enrichment/definitions/#provider) would need to keep a mapping of which
  customer relies on which version)

---

# Collected data points

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/collected-data-points/

- The events are in JSON format, which lists the properties and their description in comment.
- Events are sent to the server in batches.
- A batch is a subset of events originating from one session. A session can send events in more than one batch.
- The batch size is defined in a run configuration file specific to each app (50 events by default).
## Requests meta data

Each batch has a common header, a set of device specific, and repeatable information and an array of events, which is immutable.
The header is composed at the moment of sending, so it has to be constant info ONLY. The array in the payload is data stored at the moment of collection.

The structure of the batches of events will have the following format:

```javascript
{
  pid:8, // int - ProjectId - represented in the mobile config format
  uid:"ac1529a7-59f6-49d9-b254-6f0a22f57284", // String - uuid Unique user ID
  dt:4, // int - device type (loosely enforced enum - [SDK-phone : 4, SDK-tablet :5])
  dma:"Samsung", // String - device manufacturer. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  dmo:"SG", // String - device model. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  os:"7.0", // String - os version (Android version name 6.0, 7.0, 8.0)
  l:"en_US", // String - Language in iso-639 format https://www.ibabbleon.com/iOS-Language-Codes-ISO-639.html
  tz:"Europe/Paris", // String - timezone https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  now:1522159618000, // long - timestamp when the batch was sent
  to:{ // object - type origin of the event
    an:"appname" // String - application name
    st:"SDK-android", // String - type of SDK
    sf:"release", // string - SDK flavor/variant [release/debug/god]
  },
  r:{ // Device - resolution.
    w:1080, // int - width
    h:1920 // int - height
    d: 1.5 // The device density as float. Its values can vary between (0.75 and 10)
  },
  pl:[] // JSON array payload - list of event objects, see below
}
```

## Events

### Events meta data

All events have a common first part (don't confuse it with the header explained above). This common section is data which is common for all events by type but is gathered at the moment the event occurred. This common section is a part of the actual event payload.

```javascript
{
  upt:1522, // long - system update in milliseconds
  euid:"euid", // String - event UUID
  url:"app-and://identifier/mainPath/secondaryPath?title=screeName", // String - screenName is passed in the title query Parameter
  scn:4, // int - the number of screens already shown in the session
  c:3, // int - connectivity type [-1 - offline, 0 - error, 1 - wifi, 2 - 2g, 3 - 3g, 4 - 4g]
  ci:"verizon", // String - carrier_id when user is on mobile network
  o:1, // int - orientation [0 = portrait, 1 = landscape]
  vo:{ // object - version origin of the event
    sv:"2.1", // string version of the SDK
    sb:4, // int - SDK build number
    av:"appVersion", // String - application version
    af:"appFlavor" // String - application string - [release/debug/god]
    ab:1 // int - application build number
  },
  sn:1, // int - session id (positive int)
  t:12894726459435 // long - timestamp of the event (in milliseconds)
}
```

All event specific properties are appended to this JSON object.

### App Start

This event describes the absolute start of the app.

The trigger for this event is the absolute start of the app.

This is the first event sent when the SDK is invoked.

```javascript
ea:0 // int - event action - defined above
```

### App Show

This event is sent when the user brings the app in the foreground (switching from another app, exiting lock screen, etc.). This event means the app is focused.

```javascript
ea:1 // int - event action - defined above
```

### App Hide

This event is sent when the user exits (minimizes) the app, or switches to something else. This event means the app is not focused and the session might end, but we have not completely ended the session yet, as the user might return.

```javascript
ea:2 // int - event action - defined above
```

### Screenview

Everything starts with a View event. This is an event which describes the equivalent of a "page view" on the web. This event is sent when the Track Screen API is called.

```javascript
ea:4 // int - event action - defined above
st:"title", // String - screen title
sl:34543 // int - (load time) screen load time (diff between last action and this event)
```

### Transaction

To track transactions, we provide a public API which can send a transaction object (see section [Track Transactions](/en/capacitor/track-transactions/)). This object must contain the following parameters:

```javascript
ea: 16, // int - event action - defined above
tr: { // a json object with different properties defining the transaction made
    vl: 20.0, // mandatory - float - the value of the transaction
    cu: 978, // mandatory - int - the ISO 4217 code of the currency of the transaction
    id: "32akjkljklJ575775" // optional - string - an id for the transaction
}
```

### Dynamic variables

To track dynamic variables we provide a public API which can send a custom event object (see section [Dynamic variables](/en/capacitor/track-dynamic-variables/)).

```javascript
// Dynamic variable event with a string value
ea:18, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v:"value" // String - Custom value assigned by client.
```

```javascript
// Dynamic variable event with a number value
ea:19, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v: 2344 // Integer - Custom value assigned by client.
```

---

# Compatibility

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/compatibility/

Each version of the Contentsquare plugin will be linked to specific, fixed versions of each native SDK. In order to make that clear, here is a compatibility table to consider when choosing your version of the plugin (refer to the [Capacitor Plugin Changelog](/en/capacitor/changelog/)) to know what the changes are for each version.
| Plugin Version | iOS SDK Version | Android SDK Version | Min Capacitor Version | Max Capacitor Version |
| :---: | :---: | :---: | :---: | :---: |
| 6.1.0 | 4.40.2 | 4.36.1 | 6.0.0 | 6.2.x |
| 6.0.0 | 4.34.0 | 4.30.0 | 6.0.0 | 6.1.x |
| 5.1.0 | 4.34.0 | 4.30.0 | 5.0.0 | 5.7.x |
| 5.0.0 | 4.28.0 | 4.24.0 | 5.0.0 | 5.7.x |
| 4.1.0 | 4.34.0 | 4.30.0 | 4.0.0 | 4.7.x |
| 4.0.0 | 4.28.0 | 4.24.0 | 4.0.0 | 4.7.x |
| 0.3.1 | 4.20.0 | 4.15.0 | 3.0.0 | 4.7.x |
| 0.3.0 | 4.20.0 | 4.15.0 | 3.0.0 | 4.7.x |
| 0.2.0 | 4.18.0 | 4.15.0 | 3.0.0 | 4.1.x |
| 0.1.0 | 4.15.1 | 4.12.0 | 3.0.0 | 4.1.x |

---

# Error analysis

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/error-analysis/

<Render file="en/plans/dem"/>
## Get Started

### Start the SDK

You do not need to do anything to start the errors collection, it will start itself with Contentsquare SDK.

## Sample App

For best implementation practices of our library, explore the [Contentsquare for Capacitor sample app](https://github.com/ContentSquare/capacitor-sample-app).

## JS Errors

Similar to web context, JS errors are collected out of the box if the collection is enabled in the web project associated to the Capacitor project.

Find more information on how Contentsquare handles JS errors in our [JavaScript errors Help Center article](https://support.contentsquare.com/hc/en-gb/articles/360019857800).

## API Errors

### Automatic network inspection

API Errors automatically collects failed network requests.

### Debugging and Logging

If in-app features are enabled, a info log should appear with the details of the event (see [Capacitor Debugging and Logging](/en/capacitor/#check-the-logs) section):

```
CSLIB ℹ️ Info: API Error (from Webview) - GET 401 https://api.client.com
```

### How API Errors works

#### Initialization

The way our SDK works is by auto-starting with the application launch and automatically collects failed network requests.

#### Configuration

Once started, our SDK fetches its config from our servers.
It will start collecting data from network events if the API Errors setting is enabled in the config (this is handled by the Contentsquare team).

#### Tracking

The SDK monitors only the API Errors with response code above 400, and generates analytics data.
These events are then locally stored, and eventually sent to our servers in batches.

:::warning
To make sure API Errors occurring at app launch are correctly tracked, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

#### Sending data

For each network error, a new event will be sent in analytics and Session Replay data.

### API Troubleshooting Details

API Errors troubleshooting details enables you to collect more information about API errors so you can troubleshoot errors faster.

With this feature you will be able to see three types of additional API error details in the Event Stream of Session Replay.

- The HTTP headers of the request and the response.
- The body (the data sent by the request or received in the response).
- The query parameters of the request endpoint (of the URL of the information you request for).

<Render file="en/plans/dem"/>

See [API Troubleshooting Details](https://support.contentsquare.com/hc/en-gb/articles/6553281476124) for more details.

### Collected data points

Only network calls in error (response code above 400) will be collected.  
Here the exhaustive list of data collected:

- URL (without query strings)
- HTTP method
- Response code
- Timestamp of the request
- Timestamp of the response
- HTTP headers of the request
- HTTP headers of the response
- HTTP body of the request
- HTTP body of the response
- Query parameters of the request endpoint

### Known limitations and recommendations

#### Conflict with Firebase Performance Monitoring

<Tabs syncKey="native">
  <TabItem label="Android">
    Contentsquare Error Analysis is not compatible with Firebase Performance
    Monitoring auto-collection. Only one of the two will log events, and
    usually, the events will be automatically logged by the Contentsquare Error
    Analysis. To log events to Firebase Performance Monitoring, we suggest
    [logging it
    manually](https://rnfirebase.io/perf/usage#http-request-tracing).
  </TabItem>
  <TabItem label="iOS">
    Contentsquare Error Analysis is compatible with Firebase Performance
    auto-collection, but the HTTP body from the response won't be collected by
    the Error Analysis SDK. Contentsquare Error Analysis may not be compatible
    with other network auto-collection tools.
  </TabItem>
</Tabs>

---

# How the SDK works

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/how-the-sdk-works/

## Initialization
The way our SDK works is by auto-starting with the application launch and attaching to the current process in order to intercept the events and gestures we are interested in.

## Configuration

Once started, our SDK fetches its config from our servers, and then depending on the segmentation size (defined by our team when you sign a contract) it will start collecting data from system and user events it detects from the runtime.

## Tracking

The SDK monitors the application lifecycle events and the view hierarchy, and generates analytics data from the behavior of the app, the content of the screen and the interaction of the user.
These events are then locally stored, and eventually sent to our servers in batches. We then aggregate that data to create usable visual information into our Web Application, which you use to gather insights.

## Sending data

📚 [Native Android SDK documentation for Sending data](/en/android/how-the-sdk-works/#sending-data)  
📚 [Native iOS SDK documentation for Sending data](/en/ios/how-the-sdk-works/#sending-data)

## Session definition
<Render file="en/mobile/how-the-sdk-works/session-definition"/>

---

# Impact on performance

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/impact-on-performance/

We always strive to be non-intrusive, and transparent to the developers of the client app.
We apply this rule on the performance as well.

📚 [Native Android SDK Impact on Performance](/en/android/impact-on-performance/)  
📚 [Native iOS SDK Impact on Performance](/en/ios/impact-on-performance/)

---

# Changelog

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/changelog/

import { EmailForm } from '~/components'
<EmailForm/>

## 6.1.0 - 2025.03.24

- **Native SDKs:** iOS 4.40.2, Android 4.36.1
- Native SDKs perform tracking tag injection

## 6.0.0 - 2024.08.27

- **Capacitor 6** is now supported
- **Native SDKs:** iOS 4.34.0, Android 4.30.0

## 5.0.0 - 2024.03.11

- **Capacitor 5** is now supported
- **Session Replay:** is now supported.
- **Snapshot Capture:** is now supported.
- **Native SDKs:** iOS 4.28.0, Android 4.24.0

## 4.1.0 - 2024.08.05

- **Native SDKs:** iOS 4.34.0, Android 4.30.0

## 4.0.0 - 2024.01.11

- **Session Replay:** is now supported.
- **Snapshot Capture:** is now supported.
- **Native SDKs:** iOS 4.28.0, Android 4.24.0

## 0.3.1 - 2023.05.10

**Gesture tracking:** Fixed issue on Android related to webview injection at startup.

## 0.3.0 - 2023.03.06

- **Gesture tracking:** is now supported.
- **Native SDKs:** iOS 4.20.0

## 0.2.0 - 2022.09.28

- **Dynamic Variables:** The API is now available.
- **Track Transactions:** The API is now available.

## 0.1.1 - 2022.09.07

- First beta version. 
- Opt-in is supported.
- Opt-out is supported.
- Screenview event is supported.
- The Plugin uses **[Android native SDK 4.12.0](/en/android/changelog/#4120---20220810)** and **[iOS native SDK 4.15.1](/en/ios/changelog/#4151---20220726)**

---

# In-app features

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/in-app-features/

Alongside its tracking capabilities, the SDKs embed some features aimed at Contentsquare users such as [SDK Logs](#debugging-and-logging).
## Implement in-app features

:::note
This step only applies to iOS.
:::

To allow Contentsquare users to enable in-app features, perform these tasks:

1. [Add the custom URL scheme in your app Info](#1-add-the-custom-url-scheme-in-your-app-info)
1. [Call the SDK when the app is launched via a deeplink](#2-call-the-sdk-when-the-app-is-launched-via-a-deeplink)

### 1. Add the custom URL scheme in your app Info

You have to allow your app to be opened via a custom URL scheme which can be done using one of the following methods:

### Xcode

1. Open your project settings
1. Select the app target
1. Select the `Info` settings
1. Scroll to `URL Types`
1. Set the URL scheme to `cs-$(PRODUCT_BUNDLE_IDENTIFIER)`

#### Text editor

1. Open the `Info.plist` of your project
1. Add the following snippet:

    ```xml title="Info.plist"
    <key>CFBundleURLTypes</key>
    <array>
        <dict>
            <key>CFBundleURLSchemes</key>
            <array>
                <string>cs-$(PRODUCT_BUNDLE_IDENTIFIER)</string>
            </array>
        </dict>
    </array>
    ```

### 2. Call the SDK when the app is launched via a deeplink

Depending on the project, there are multiple ways to handle the deeplink opening. Choose the method matching your project structure:

<Tabs>
  <TabItem label="AppDelegate">
  In your `AppDelegate` class, complete or implement the function `application(app, open url:, options:)` with: `Contentsquare.handle(url: url)`
  </TabItem>
  <TabItem label="SceneDelegate">
  In your `WindowSceneDelegate` class, you need to:

  1. Update `func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)` with:

      ```swift
      if let url = connectionOptions.urlContexts.first?.url {
            Contentsquare.handle(url: url)
      }
      ```

  1. Complete or implement `func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>)` with:

      ```swift
      if let url = URLContexts.first?.url {
          Contentsquare.handle(url: url)
      }
      ```
  </TabItem>
  <TabItem label="SwiftUI">
  In the `body` of your main App struct, add the `onOpenURL` modifier and call the `Contentsquare` SDK to handle the URL:

  ```swift
  @main
  struct MyApp: App {
    var body: some Scene {
      WindowGroup {
        MyView()
          .onOpenURL { url in
            Contentsquare.handle(url: url)
          }
      }
    }
  }
  ```
  </TabItem>
</Tabs>

## Enable in-app features

In-app features can be enabled in different ways:

### Scan the QR Code

If you have access to the Contentsquare platform, you can open the in-app features modal from the menu and scan the QR code displayed with your phone. 

Take a look at the native documentation for further information.

### Alternative methods

We provide alternative methods to enable in-app features especially for iOS Simulator and Android Emulator.

📚 [Native Android SDK documentation for Enable in-app features](/en/android/in-app-features/)  
📚 [Native iOS SDK documentation for Enable in-app features](/en/ios/in-app-features/)

## Debugging and Logging

Contentsquare provides Logging capabilities that allow you to see the raw event data logged by your app. Use this for validation purposes during the instrumentation phase of development and can help you discover errors and mistakes in your analytics implementation and confirm that all events are being logged correctly.

📚 [Native Android SDK documentation for Debugging and Logging](/en/android/in-app-features/#debugging-and-logging)  
📚 [Native iOS SDK documentation for Debugging and Logging](/en/ios/in-app-features/#debugging-and-logging)

## Snapshot Capture

In order to unlock the full data-visualization capabilities of Contentsquare, the SDK provides a way to capture snapshots of your app screens. These snapshots can only be taken by Contentsquare's users on their device. They are not captured from your end-users device. It means your Personal Data is safe, as long as you use a test user account.

:::warning
For snapshot capture to work, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

<Tabs syncKey="native">
  <TabItem label="Android">
    Follow the [Native Android SDK documentation for Snapshot Capture](/en/android/in-app-features/#snapshot-capture)
  </TabItem>
  <TabItem label="iOS">
    Follow the [Native iOS SDK documentation for Snapshot Capture](/en/ios/in-app-features/#snapshot-capture)
  </TabItem>
</Tabs>

---

# Getting Started

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/

import { CardGrid, LinkCard, RepoCard } from '~/components';
<Render file="en/mobile/getting-started-intro"/>

## Install the SDK

The SDK is shipped as a Capacitor plugin which you need to add as a dependency to your Capacitor application. 

See [Compatibility](compatibility/) for more information.

### Include the SDK

Install the plugin as follows, specifying the exact version you want to install if needed:

```shell
npm install @contentsquare/capacitor-plugin
npx cap sync
```

You do not need to do anything to start the SDK. Now that the SDK is a dependency of your app, it will autostart itself when your application starts.

### Validate SDK integration

<Render file="en/mobile/getting-started-validate-sdk-integration" params={{
  version: frontmatter.version,
  platform: frontmatter.category
}}/>

## Check the logs

<Render file="en/mobile/getting-started-check-the-logs"
  params={{tools: "Android Studio, Xcode"}}
/>

### Viewing local logs in IDE

<Tabs syncKey="native">
  <TabItem label="Android">
    To view SDK logs:

    1. Plug your Android phone into your computer (or use an emulator)
    1. Open Android Studio and start your app
    1. Open the `Logcat` view and select your phone or emulator
    1. Filter logs by `CSLIB`

    ![](~/assets/android/logs-android.png)
    </TabItem>
  <TabItem label="iOS">
    1. Unless you are using a simulator, ensure the device you are using is connected to your Mac or is on the same Wi-Fi network.
    1. Open the macOS Console app or Xcode.  

        For the macOS Console app, make sure info messages are included at [Choose Action > Include Info Messages](https://support.apple.com/guide/console/customize-the-log-window-cnsl35710/mac).
    1. Filter logs by `CSLIB`.

    ![](~/assets/ios/logs-ios.png)
    </TabItem>
</Tabs>

### Implement in app-features

:::note
This step only applies to iOS.
:::

<Render file="en/mobile/getting-started-in-app-features"/>

To allow Contentsquare users to enable in-app features, perform these tasks:

1. [Add the custom URL scheme in your app Info](#1-add-the-custom-url-scheme-in-your-app-info)
1. [Call the SDK when the app is launched via a deeplink](#2-call-the-sdk-when-the-app-is-launched-via-a-deeplink)

#### 1. Add the custom URL scheme in your app Info

You have to allow your app to be opened via a custom URL scheme which can be done using one of the following methods:

##### Xcode

1. Open your project settings
1. Select the app target
1. Select the `Info` settings
1. Scroll to `URL Types`
1. Set the URL scheme to `cs-$(PRODUCT_BUNDLE_IDENTIFIER)`

##### Text editor

1. Open the `Info.plist` of your project
1. Add the following snippet:

    ```xml title="Info.plist"
    <key>CFBundleURLTypes</key>
    <array>
        <dict>
            <key>CFBundleURLSchemes</key>
            <array>
                <string>cs-$(PRODUCT_BUNDLE_IDENTIFIER)</string>
            </array>
        </dict>
    </array>
    ```

#### 2. Call the SDK when the app is launched via a deeplink

Depending on the project, there are multiple ways to handle the deeplink opening. Choose the method matching your project structure:

<Tabs>
  <TabItem label="AppDelegate">
  In your `AppDelegate` class, complete or implement the function `application(app, open url:, options:)` with: `Contentsquare.handle(url: url)`
  </TabItem>
  <TabItem label="SceneDelegate">
  In your `WindowSceneDelegate` class, you need to:

  1. Update `func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)` with:

      ```swift
      if let url = connectionOptions.urlContexts.first?.url {
            Contentsquare.handle(url: url)
      }
      ```

  1. Complete or implement `func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>)` with:

      ```swift
      if let url = URLContexts.first?.url {
          Contentsquare.handle(url: url)
      }
      ```
  </TabItem>
  <TabItem label="SwiftUI">
  In the `body` of your main App struct, add the `onOpenURL` modifier and call the `Contentsquare` SDK to handle the URL:

  ```swift
  @main
  struct MyApp: App {
    var body: some Scene {
      WindowGroup {
        MyView()
          .onOpenURL { url in
            Contentsquare.handle(url: url)
          }
      }
    }
  }
  ```
  </TabItem>
</Tabs>

### Enable in-app features

To enable in-app features within your app, you have to **first make sure your app is launched in the background**. Then, follow the appropriate method described as follows.

#### On a device: scan the QR code

<Render file="en/mobile/getting-started-scan-qr-code" params={{
  platform: frontmatter.category
}}/>

#### On an emulator/simulator

<Tabs syncKey="native">
  <TabItem label="Android">

    In Contentsquare, select the Mobile icon in the menu top bar then select your application ID, and "Copy this ADB command".

    ![](~/assets/android/log-visualizer-access-adb.png)
  </TabItem>
  <TabItem label="iOS">

    In Contentsquare, select the Mobile icon in the menu top bar then select your Bundle ID, and select "Copy this link". Paste it in Safari on your simulator to trigger the in-app features.

    ![](~/assets/ios/log-visualizer-access-custom-link.png)
  </TabItem>
</Tabs>

### Contentsquare Log Visualizer

<Render file="en/mobile/getting-started-log-visualizer" params={{
  platform: frontmatter.category
}}/>

## Get user consent

<Render file="en/mobile/getting-started-get-user-consent"/>

:::warning
You are responsible for handling the UI asking users for their consent and allowing them to manage their privacy settings. Consult our [Privacy Center](https://contentsquare.com/privacy-center/) and [Privacy Policy](https://contentsquare.com/privacy-center/privacy-policy/).
:::

### User opt-in

The SDK treats users as **opted-out by default.**

Forward user consent with `optIn()`. Calling this method generates a user ID and initiates tracking.

```javascript
import { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';

ContentsquarePlugin.optIn();
```

:::note[Going further]
For advanced configuration regarding user consent or personal data handling, see [Privacy](/en/capacitor/privacy/).
:::



## Track your first screens

<Render file="en/mobile/getting-started-track-first-screens"/>

### Sending screenview events

Screen tracking is achieved by sending a `screenview` event each time a new screen is displayed on the user's device. 

```javascript
import { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';

ContentsquarePlugin.sendScreenName(screenName)
  .catch((err) => {
        // Handle error
    });
```







### Implementation recommendations

From a functional perspective, a screenview should be triggered in the following cases:

- When the screen appears on the device
- When a modal or pop-up is displayed
- When a modal or pop-up is closed, returning the user to the screen
- When the app is brought back to the foreground (after being minimized)

#### Screen name handling

It is necessary to provide a name for each screen when calling the screenview API.

As a general rule, keep distinct screen names under 100. As they are used to map your app in Contentsquare, you will want something comprehensive.
The screen name length is not limited on the SDK side. However, the limit is 2083 characters on the server side.

More on [screen name handling](/en/capacitor/track-screens/#how-to-name-screens).

:::tip[Tracking plan]
To get the most out of your data, it’s best to follow a tracking plan. This way, you’ll capture every step of the user’s journey without missing important interactions, giving you a complete picture of how your app is used.
:::

## Test your setup

<Render file="en/mobile/getting-started-test-setup" params={{
  tools: "Android Studio, Xcode, or Log Visualizer",
}}/>

### Visualize events in Contentsquare

<Render file="en/mobile/getting-started-visualize-events"
params={{
  platform: frontmatter.category
}}/>

### Visualize data in Contentsquare

<Render file="en/mobile/getting-started-visualize-data"/>

## Sample app

To explore some of these features in context, check our Capacitor sample app.

<RepoCard
  repo="ContentSquare/capacitor-sample-app"
/>

## Next steps

<Render file="en/mobile/getting-started-next-steps"/>

<CardGrid>
  <LinkCard
    title="Dynamic Variables"
    description="Collect additional information about the session."
    href="/en/capacitor/track-dynamic-variables/"
  />
  <LinkCard
    title="Transactions tracking"
    description="Associate user’s session with their potential purchases and corresponding revenue."
    href="/en/capacitor/track-transactions/"
  />
  <LinkCard
    title="Session Replay"
    description="Collect data for Session Replay in compliance personal data masking."
    href="/en/capacitor/session-replay/"
  />
  <LinkCard
    title="Error Analysis"
    description="Track API errors and application crashes with automated collection and privacy-safe debugging tools."
    href="/en/capacitor/error-analysis/"
  />
</CardGrid>

---

# Privacy

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/privacy/

The Contentsquare Capacitor Plugin and SDKs are compliant with the **Play Store and App Store Privacy guidelines** as well as with the **EU General Data Protection Regulation (GDPR)**.
Consult our [Privacy Center](https://contentsquare.com/privacy-center/) and [Privacy Policy](https://contentsquare.com/privacy-center/privacy-policy/).

## Handling User Consent

Even though Contentsquare only collects usage data on your app, we will consider every new user to be opted-out. To start tracking, the `optIn()` API must be called.

:::note
If for some reason you think that securing user consent is not required for your app, discuss it during the Implementation process with your main contact.
:::

## Opt-in

Use the `optIn()` API to get user consent. Calling this API will generate a user ID and initiate tracking.

```javascript
import { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';

ContentsquarePlugin.optIn();
```

## Opt-Out

**Permanently breaking the link and stopping all data collection.**

When this API is called, tracking stops immediately, all settings are reset (session number, page number, user ID...) and all files related to Contentsquare tracking are deleted. Contentsquare will never track and collect any data from the user's phone unless the Opt-in API is called again.

```javascript
import { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';

ContentsquarePlugin.optOut();
```

---

# Security

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/security/

## Transmission and hosting
Our server side uses HTTPS to make sure that data is encrypted in transport.

Our hosting solution is a PCI DSS Level 1 Service Provider.

## What is not collected

- Passwords from password fields
- Geo location information
- Information from contacts, emails, or any other user identifiable information.
- Text from labels, buttons, and any other widget which contains text
- Accessibility information from any widget which the user interacts with
- Labels printed on the screen of any kind

---

# Session Replay

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/session-replay/

import iossrenable from '~/assets/sdk-images/img-sr/ios-enable-sr-2.gif';
## Prerequisites

### Screen tracking implemented

As **session data collection will start at the 1st screenview event**, it is required to have screen tracking implemented. Make sure to follow the [Capacitor Track screens](/en/capacitor/track-screens/) sections.

### Updating to latest SDK version

In order to enable Session Replay in your app and get the most stable version, it is required to upgrade the SDK to its latest version.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time (or choose to take this update as an opportunity to review your Privacy related implementation), make sure to follow the [Capacitor Privacy](/en/capacitor/privacy/) sections.

## Testing and Debugging

### Enable Session Replay on your device

Since not all sessions are collected (depending on the percentage set in the Contentsquare back office), we have implemented an option to force replay collection on your device for testing and debugging purposes.
This option can be enabled from the in-app features settings:
1. [Enable in-app features](/en/capacitor/in-app-features/)
1. Open in-app features settings with a long press on the snapshot button
1. Under "Session Replay", toggle "Enable Session Replay" on
1. Kill the app
1. Start app, a new session is starting with Session Replay enabled

#### Android

![](~/assets/sdk-images/img-sr/android-enable-sr.png)

#### How do I know if Session Replay is enabled?

There are 2 places where you can check if Session Replay is enabled:

**In the logs:** The log `Session Replay is starting` (Android) or `Enable  Session Replay for Capacitor succeeded` (iOS) will confirm that Session Replay is enabled.

**In in-app features settings:** Below the "Enable "will start at next app start" *(see below [Access the replay](#access-the-replay))*, you will either see:
- `No replay link available` which means Session Replay is not running for the current session
- `Get Replay link` which means Session Replay is running for the current session

### Access the replay

The replay can be accessed by tapping on `Get replay link` button from the in-app features settings:
The replay will be **available within 5 minutes**. Only the "ended screen views" are processed *(we know a screenview is ended when we start receiving data for the next screenview)*. This means that you will be able to replay your session up to the previous screenview if the session is still running.

#### Android

![](~/assets/sdk-images/img-sr/android-get-replay-link.gif) 

#### iOS

![](~/assets/sdk-images/img-sr/ios-get-replay-link.gif)

## Personal Data Masking

The Session Replay feature collects every user interaction within your app. In order to respect the user’s right to privacy, the Contentsquare SDK:
- Masks everything by default
- Allows you to control which part of the user interface is collected via our masking and un-masking component.

### Masking mechanisms

:::warning
If your application contains native screens, see the [iOS](/en/ios/session-replay/#personal-data-masking) and the [Android](/en/android/session-replay/#personal-data-masking) Masking documentation.

:::note
Contentsquare never collects the actual text typed into any `<input>` or `<textarea>` field.
:::

Sessions will be collected for Session Replay if:

- The `Session Replay` feature has been enabled for your account
- The threshold set by the `Session Replay Collection Rate` is not exceeded.

For the HTML content to be sent, all these conditions must be true:

- The user hasn’t opted out.
- The session is being tracked.

:::warning
If Session Replay is turned off, the HTML text/content of the page **is not** collected during the session.
:::

### Session Replay data collection options

If Session Replay is turned on and data collection is active for the session, the HTML content of the page is sent **after every pageview** (both natural and artificial) and **every DOM change** (only the updated elements are sent).

Depending on the Session Replay option chosen, the resulting replay will differ and additional masking tasks will have to be carried out.

:::note
Always contact your Implementation Manager to check your approach to masking.
:::

#### Clear content with masked Personal Data

With this option enabled, the Tracking Tag performs the following tasks:

- The content of `<input>` elements with type `text`, `email`, `password`, `search`, `tel`, `url` or `<input>` elements without a `type` attribute are replaced with bullets before the HTML is sent,
- Every figure of `<input>` elements with type `number` are replaced by 0,
- The content `<textarea>` elements is replaced with bullets before the HTML is sent,
- The content of `<script>` elements is emptied,
- Except for the above, all the HTML content is sent, including `<head>`,
- The content of every element marked with the data attribute `data-cs-mask` is removed (see below).

:::note
Dropdowns are usually coded with the `<select>` element, which is collected by default by Contentsquare. 
If you show any Personal Data in these elements, you would have to make sure to apply the `data-cs-mask` data attribute.
:::

#### Auto-masked content with AAA masking

With this option enabled, the Tracking Tag performs the following tasks:

- The content of `<input>` elements with type `text`, `email`, `password`, `search`, `tel`, `url` or `<input>` elements without a type are replaced with bullets before the HTML is sent,
- Every figure of `<input>` elements with type `number` are replaced by 0,
- The content `<textarea>` elements is replaced with bullets before the HTML is sent,
- The content of `<script>` elements is emptied,
- The content of every element marked with the data attribute `data-cs-mask` is removed (see below).
- The content of every element marked with the data attribute `data-cs-capture` is collected and shown unless it falls under the excluded elements listed above (`<input>`, `<textarea>`)
- **Every character of the text content included in the elements sent is replaced by "A"**.
- Attributes unrelated to layout are Only `id`, `class`, `style`, `src`, `srcset`, `href`, `rel`, and `type` are kept.

#### Selectively mask pages by URL

In case your site displays Personal Data only on a specific set of pages, **you can decide to run the Auto-Masking process only on a pre-defined set of pages**, so that you won't have to apply the masking across the whole site.

We currently have two available options:

- **Mask all pages except**: All pages will be masked except the ones defined by a Regex Pattern agreed with your dedicated Implementation Manager.
- **Unmask all pages except**: All pages will be collected with clear content except from the ones defined by a Regex pattern agreed with your dedicated Implementation Manager.
 
These can only be configured by your dedicated Implementation Manager.

### Block data collection for specific pages (Session Replay)

Use the `excludeURLforReplay` command to block data collection on pages based on their URL.  
You might want to use this command for the following reasons:

- Some page replays for Session Replay cause performance issues (when the page contains many images or videos, for instance) — you can block these pages until the problem is fixed,
- Personal data has been exposed,
- You want to exclude whole parts of your website from being collected for Session Replay.

```javascript
import { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';

ContentsquarePlugin.excludeURLForReplay(URL_REGEX);
```

Using this command does not block page views for the given page(s) — it only blocks data collection for Session Replay.

### Remove content/Personal Data from the collected HTML

There are two methods to remove content from the collected HTML:

- Using the Contentsquare Personal Data Selector
- Tagging DOM Elements 

#### Personal Data Selector

Each DOM element to be masked is identified thanks to its CSS selector and those selectors are pushed to the API via a JavaScript object. 
The content of the identified element will be thus removed from the replay.

:::note
In case of CSS selectors being changed or removed, the masking will be removed as well.
:::

The following object that contains CSS selectors for text and for attributes should be pushed to the API as follows, **before firing the main tag**:

```javascript
import { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';

ContentsquarePlugin.setPIISelectors({PII Object});
```

The structure of the `PII` Object is as follows:

- `PIISelectors`: CSS selectors defined here will allow the **matching DOM element to be masked by the tag.**

- `Attributes`: Using this key, one can **remove the defined attributes of the DOM elements from the elements matching the CSS selectors.**
Note that it is possible to use an array of attribute names as shown in the example above.

Keep in mind that using both `PII Selectors` and `Attributes` is optional, meaning you can use either full element selectors, specific attribute selectors or both in the same object:

```javascript
{
  PIISelectors: [".css-selector, ss-selector"], // DOM elements to be sked
  Attributes: [
      {
          selector: "select#month option, select#year option", // CSS selectors
          attrName: 'id' // Attribute name you want to mask
      },
      {
          selector: ".link-page-7", // CSS selectors
          attrName: ['href','name'] // Array attribute names you want to mask
      }
  ]
};
```

#### Tagging DOM elements

To exclude content from being collected, use the `data-cs-mask` attribute on selected elements:

```html mark="data-cs-mask"
Content before
<p data-cs-mask>
  emailaddress@sentitivedata.com
</p>
Content after
```

Their content is removed in the browser before it is sent to Contentsquare:

```html del={3}
Content before
<p data-cs-mask>
  emailaddress@sentitivedata.com
</p>
Content after
```

You can also add the `data-cs-mask` attribute with JavaScript provided you do it before any pageview is sent.

**Events on removed HTML** &mdash; [Events](/en/web/events-handling/) (click, hover, etc.) will still be collected and sent to our servers even if they are targeting removed HTML elements. They will be visible in the application using Live Resources (as named in the platform).

:::warning
Using comments within the HTML is not supported (`...`).
:::

### Display content in a fully masked HTML page

There are two methods to display content in a masked HTML page:

- Using the Contentsquare Personal Data Selector
- Tagging DOM Elements 

#### Personal Data Selector

Each DOM element to be displayed is identified thanks to its CSS selector and those selectors are pushed to the API via a JavaScript object. The content of the identified element will be thus displayed in Session Replay.

:::note
In case of CSS selectors being changed or removed, the element will be masked by default.
:::

The string which contains comma-separated CSS selectors for text and for attributes must be pushed to the Contentsquare API, **before firing the main tag**, as follows:

```javascript
import { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';

ContentsquarePlugin.setCapturedElementsSelector('#capture-me, .show-me');
```

#### Tagging DOM elements

To display an HTML element in a masked page, add the `data-cs-capture` attribute to the HTML element:

```html mark="data-cs-capture"
Sensitive Content before
<p data-cs-capture>
  some piece of text that is not sensitive
</p>
Sensitive Content after
```

Content that is part of the tagged element is displayed as is:

```html mark={3}
AAAA AAAA AA
<p data-cs-capture>
  some piece of text that is not sensitive
</p>
AAA AAA AA 
```

It can also be added with JavaScript but, be careful, as attributes must be added before any pageview is sent.
## Known limitations

- Some fonts are not loaded
- SVG assets are not supported
- Zoom is not properly handled

### Android specific
- Some screen titles don't correspond to the screen currently shown in the player
- Ratio of the screen is not correct while the gesture positions are correct on the player
- "Loading webviews" and "Webview not tracked" messages sometimes appear in the player
- The CSS is sometimes not immediately loaded on a new page

## Troubleshooting

### Requests are not sent from an Android emulator / iOS simulator

If you struggle to watch a replay collected on an emulator/simulator, it may be due to some network constraints applied on your computer (VPN, company network restrictions, etc.). Check your configuration or use a real device.

See following sections for more information about our endpoints and requests:
- [Android - Requests are failing](/en/android/troubleshooting/#requests-are-failing)
- [iOS - Requests are failing](/en/ios/troubleshooting/#requests-are-failing)

### Very long session on an Android emulator / iOS simulator

It is important to remember that **an app kill does not end a session**. See [Session definition](/en/ios/how-the-sdk-works/#session-definition) for more information.
If you leave the simulator/emulator running with the app in foreground, the session will not end, even if you are inactive.
To better reflect actual end user behavior and avoid unusually long sessions (last hours), put the app in background or kill it.

### SR has weird timestamps when using Android / iOS simulator
Some bugs with the timestamps only appear when testing with a simulator/emulator. Test out the Session Replay feature when implementing it with a device in order not to trigger it.

---

# Track dynamic variables

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/track-dynamic-variables/

## General principles
### Usage

Dynamic variables are additional information on the session that can be used to segment sessions.

For example, they can include information on the A/B Test variations displayed to the current user.

### Limits

#### On the server side

- It is possible to save up to 40 distinct dynamic variable keys per screen view. If more are received, only the first 40 keys will be kept.
- If you are using the same key twice, the last value associated with the key will be collected.

#### On the SDK side

- Every dynamic variable is composed of a pair of key (max. 512 characters) and value (max. 255 characters string or a whole number between 0 and 2<sup>32</sup> - 1 ). The SDK will trim the exceeding characters.
- If key or value is empty, the SDK will send the string "cs-empty".

## Defining dynamic variables

To define and send a dynamic variable, use the API below. For each dynamic variable, we send:
- Key (`string`, mandatory)
- Value (`string` or `integer`, mandatory)

Note that if you send an integer as a value, it has indeed to be an integer. A null or a float will not be accepted as a valid parameter, and will result in an error.

```javascript
import { ContentsquarePlugin, DynamicVarItem } from '@contentsquare/capacitor-plugin';

const myDynamicVar: DynamicVarItem = {
    dynVarKey: 'myKey',
    dynVarValue: 32,
}

ContentsquarePlugin.sendDynamicVar(myDynamicVar)
  .catch(err => {
        // Handle Error
    });
```

## Sending a dynamic variable for each session

You may want to send a dynamic variable for each session (like the user's country or store). While **triggering the dynamic variable at app launch will cover most cases, it will not be enough**. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See [Session definition](/en/capacitor/how-the-sdk-works/#session-definition) for more information.

That is why we also recommend **sending such dynamic variable every time the app enters foreground**.

You can use the [`appStateChange` event](https://capacitorjs.com/docs/apis/app) triggered by Capacitor to detect foreground and trigger a dynamic variable.

---

# Track screens

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/track-screens/

Contentsquare aggregates user behavior and engagement at the screen level. To achieve this, it is necessary to provide a name for each screen by calling a dedicated screenview API.
:::warning
Sessions without at least one screenview will be discarded.
:::

```javascript
import { ContentsquarePlugin } from '@contentsquare/capacitor-plugin';

ContentsquarePlugin.sendScreenName(screenName)
  .catch((err) => {
        // Handle error
    });
```

## Screen name handling

The screen name is limited to 2083 characters. However, this limit is not enforced by the SDK, but rather by the Contentsquare servers.

## Screenview after app in background

The SDK triggers a screenview automatically after the app is put in background and foreground, as long as a screenview with a screen name has been triggered previously. It will use the last screen name set.

## Implementation recommendations

From a functional standpoint, we expect a screenview to be sent:
- When the screen appears
- When a modal/pop-up is closed and the user is back on the screen
- When the app is put in the foreground (after an app hide)

## How to name screens

As a general rule, keep the number of distinct screen names under 100. Since these names are used to map your app in Contentsquare, choose names that are clear and comprehensive.

### Separate words with space, dash or underscore characters

If you want to generate screen names including more than one word, it is best to separate them and to do so using space, dash or underscore characters. Contentsquare handles automatically the formatting for them.

**Example:** For a sub-category list of a retail app, use `Home and Living - Home Furnishings` instead of `homeLivingHomeFurnishings`.

### Use screen template/layout names

As a general recommendation, use names referring to the screen template/layout rather than referring to the specific content (data). This will help:
- To keep the number of distinct screen names low and therefore make Contentsquare easier to use
- Remove the risk of sending Personal Data to Contentsquare

List of screen types falling into that category: _Product detail, Event detail, Conversation/Chat, User profile..._

### Screens with multiple states/layouts

<Render file="en/mobile/multiple-layout-screens"/>

---

# Track transactions

URL: https://docs.contentsquare.com/en/capacitor/6-1-0/track-transactions/

To associate a user's session with their potential purchases (and corresponding revenue), you must send the transaction via a dedicated API.
For each transaction, we send:
- Price (`number`, mandatory)
- Currency (`CurrencyCode` or `string`, mandatory)
- Transaction ID (`string`, optional)
The plugin defines a `TransactionItem` type to prevent potential typing errors. 

```javascript
import { ContentsquarePlugin, CurrencyCode, TransactionItem } from '@contentsquare/capacitor-plugin';

const myTransaction: TransactionItem = {
      transactionValue: 10,
      transactionCurrency: CurrencyCode.USD,
      transactionId: 'my_transaction_id',
};
ContentsquarePlugin.sendTransaction(myTransaction)
      .catch(err => {
        // Handle Error
      });
```

:::warning
**Each transaction must only be sent once**. A common mistake is to trigger the sending when the confirmation screen is displayed. This leads to triggering the transaction each time the user puts the app in background and then in foreground on the confirmation screen.
:::

## Currency

The currency is conforming to the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) standard. Although the currency can be passed as "alphanumeric code", you should always prefer using the plugin's CurrencyCode object values. If you have to pass the ISO code as a string, note that capitalization is not a factor (`"USD"`, `"Usd"` or `"usd"` will all be treated as the US Dollar).

If the currency passed doesn't match our supported currencies, the SDK will send a currency value of "-1". It will be processed as the default currency of the project.

---

# Changelog

URL: https://docs.contentsquare.com/en/cordova/0-3/changelog/

## 0.3.0 - 2023.04.04
- Gesture tracking: is now supported.
- Native SDKs: iOS 4.20.0

## 0.2.0 - 2022.09.19

- Dynamic Variables: The API is now available.
- Track Transactions: The API is now available.

## 0.1.0 - 2022.08.12

- First beta version.
- Opt-in is supported.
- Opt-out is supported.
- Screenview event is supported.
- The Plugin uses Android native SDK 4.12.0 and iOS native SDK 4.15.1

---

# Collected Data Points

URL: https://docs.contentsquare.com/en/cordova/0-3/collected-data-points/

- The events are in JSON format, which lists the properties and their description in comment.
- Events are sent to the server in batches.
- A batch is a subset of events originating from one session. A session can send events in more than one batch.
- The batch size is defined in a run configuration file specific to each app (50 events by default).
## Requests meta data

Each batch has a common header, a set of device specific, and repeatable information and an array of events, which is immutable.
The header is composed at the moment of sending, so it has to be constant info ONLY. The array in the payload is data stored at the moment of collection.

The structure of the batches of events will have the following format:

```javascript
{
  pid:8, // int - ProjectId - represented in the mobile config format
  uid:"ac1529a7-59f6-49d9-b254-6f0a22f57284", // String - uuid Unique user ID
  dt:4, // int - device type (loosely enforced enum - [SDK-phone : 4, SDK-tablet :5])
  dma:"Samsung", // String - device manufacturer. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  dmo:"SG", // String - device model. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  os:"7.0", // String - os version (Android version name 6.0, 7.0, 8.0)
  l:"en_US", // String - Language in iso-639 format https://www.ibabbleon.com/iOS-Language-Codes-ISO-639.html
  tz:"Europe/Paris", // String - timezone https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  now:1522159618000, // long - timestamp when the batch was sent
  to:{ // object - type origin of the event
    an:"appname" // String - application name
    st:"SDK-android", // String - type of SDK
    sf:"release", // string - SDK flavor/variant [release/debug/god]
  },
  r:{ // Device - resolution.
    w:1080, // int - width
    h:1920 // int - height
    d: 1.5 // The device density as float. Its values can vary between (0.75 and 10)
  },
  pl:[] // JSON array payload - list of event objects, see below
}
```

## Events

### Events meta data

All events have a common first part (don't confuse it with the header explained above). This common section is data which is common for all events by type but is gathered at the moment the event occurred. This common section is a part of the actual event payload.

```javascript
{
  upt:1522, // long - system update in milliseconds
  euid:"euid", // String - event UUID
  url:"app-and://identifier/mainPath/secondaryPath?title=screeName", // String - screenName is passed in the title query Parameter
  scn:4, // int - the number of screens already shown in the session
  c:3, // int - connectivity type [-1 - offline, 0 - error, 1 - wifi, 2 - 2g, 3 - 3g, 4 - 4g]
  ci:"verizon", // String - carrier_id when user is on mobile network
  o:1, // int - orientation [0 = portrait, 1 = landscape]
  vo:{ // object - version origin of the event
    sv:"2.1", // string version of the SDK
    sb:4, // int - SDK build number
    av:"appVersion", // String - application version
    af:"appFlavor" // String - application string - [release/debug/god]
    ab:1 // int - application build number
  },
  sn:1, // int - session id (positive int)
  t:12894726459435 // long - timestamp of the event (in milliseconds)
}
```

All event-specific properties are appended to this JSON object.

### App Start

This event describes the absolute start of the app.

The trigger for this event is the absolute start of the app.

This is the first event sent when the SDK is invoked.

```javascript
ea:0 // int - event action - defined above
```

### App Show

This event is sent when the user brings the app in the foreground (switching from another app, exiting lock screen, etc.). This event means the app is focused.

```javascript
ea:1 // int - event action - defined above
```

### App Hide

This event is sent when the user exits (minimizes) the app, or switches to something else. This event means the app is not focused and the session might end, but we have not completely ended the session yet, as the user might return.

```javascript
ea:2 // int - event action - defined above
```

### Screenview

Everything starts with a View event. This is an event which describes the equivalent of a "page view" on the web. This event is sent when the Track Screen API is called.

```javascript
ea:4 // int - event action - defined above
st:"title", // String - screen title
sl:34543 // int - (load time) screen load time (diff between last action and this event)
```

### Transaction

To track transactions, we provide a public API which can send a transaction object (see section [Track Transactions](/en/cordova/track-transactions/)). This object must contain the following parameters:

```javascript
ea: 16, // int - event action - defined above
tr: { // a json object with different properties defining the transaction made
    vl: 20.0, // mandatory - float - the value of the transaction
    cu: 978, // mandatory - int - the ISO 4217 code of the currency of the transaction
    id: "32akjkljklJ575775" // optional - string - an id for the transaction
}
```

### Dynamic variables

To track dynamic variables we provide a public API which can send a custom event object (see section [Dynamic variables](/en/cordova/track-dynamic-variables/)).

```javascript
// Dynamic variable event with a string value
ea:18, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v:"value" // String - Custom value assigned by client.
```

```javascript
// Dynamic variable event with a number value
ea:19, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v: 2344 // Integer - Custom value assigned by client.
```

---

# Compatibility

URL: https://docs.contentsquare.com/en/cordova/0-3/compatibility/

Each version of the Contentsquare plugin will be linked to specific, fixed versions of each native SDK. In order to make that clear, here is a compatibility table to consider when choosing your version of the plugin (refer to the [Cordova Plugin Changelog](/en/cordova/changelog/)) to know what the changes are for each version.
| Plugin Version | iOS SDK Version | Android SDK Version | Min Cordova Version | Max Cordova Version |
| :---: | :---: | :---: | :---: | :---: |
| 0.3.0 | 4.20.0 | 4.15.0 | 11.0.0 | 11.0.x |
| 0.2.0 | 4.18.0 | 4.15.0 | 11.0.0 | 11.0.x |
| 0.1.0 | 4.15.1 | 4.11.0 | 11.0.0 | 11.0.x |

---

# How the SDK works

URL: https://docs.contentsquare.com/en/cordova/0-3/how-the-sdk-works/

## Initialization
The way our SDK works is by auto-starting with the application launch and attaching to the current process in order to intercept the events and gestures we are interested in.

## Configuration

Once started, our SDK fetches its config from our servers, and then depending on the segmentation size (defined by our team when you sign a contract) it will start collecting data from system and user events it detects from the runtime.

## Tracking

The SDK monitors the application lifecycle events and the view hierarchy, and generates analytics data from the behavior of the app, the content of the screen and the interaction of the user.
These events are then locally stored, and eventually sent to our servers in batches. We then aggregate that data to create usable visual information into our Web Application, which you use to gather insights.

## Sending data

📚 [Native Android SDK documentation for Sending data](/en/android/how-the-sdk-works/#sending-data)  
📚 [Native iOS SDK documentation for Sending data](/en/ios/how-the-sdk-works/#sending-data)

## Session definition
<Render file="en/mobile/how-the-sdk-works/session-definition"/>

---

# Impact on performance

URL: https://docs.contentsquare.com/en/cordova/0-3/impact-on-performance/

We always strive to be non-intrusive, and transparent to the developers of the client app.
We apply this rule on the performance as well.

📚 [Native Android SDK Impact on Performance](/en/android/impact-on-performance/)  
📚 [Native iOS SDK Impact on Performance](/en/ios/impact-on-performance/)

---

# In-app features

URL: https://docs.contentsquare.com/en/cordova/0-3/in-app-features/

Alongside its tracking capabilities, the SDKs embed some features aimed at Contentsquare users such as [SDK Logs](#debugging-and-logging).
## Implement in-app features

### 1. Install the Cordova plugin to handle URL schemes

In order for your application to open when you scan the QR code or enter the URL we provide in a web browser, you have to install a Cordova plugin which will handle the URL scheme.

```javascript
cordova plugin add cordova-plugin-customurlscheme --variable URL_SCHEME=cs-{package-id}
// Example:
// my package id is 'com.mycompany.myapp'
// cordova plugin add cordova-plugin-customurlscheme --variable URL_SCHEME=cs-com.mycompany.myapp
```

### 2. Call the SDK when your app is opened with the custom URL

Then, you will need to link your app with our SDK. When your application is started via a deeplink, a specific global JavaScript function, handleOpenURL(), is automatically called in your App.
You will have to define this function in the 'window' global scope and you will need to call a function of our API via the Contentsquare Cordova Plugin.

```javascript
window.handleOpenURL = function (url) {
    console.log("received url: " + url);
    ContentsquarePlugin.handleURL(url);
}
```

## Enable in-app features

In-app features can be enabled in different ways:

### Scan the QR Code

If you have access to the Contentsquare platform, you can open the in-app features modal from the menu and scan the QR code displayed with your phone. 

Take a look at the native documentation for further information.

### Alternative methods

We provide alternative methods to enable in-app features especially for iOS Simulator and Android Emulator.

📚 [Native Android SDK documentation for Enable in-app features](/en/android/in-app-features/)  
📚 [Native iOS SDK documentation for Enable in-app features](/en/ios/in-app-features/)

## Debugging and Logging

Contentsquare provides Logging capabilities that allow you to see the raw event data logged by your app. Use this for validation purposes during the instrumentation phase of development and can help you discover errors and mistakes in your analytics implementation and confirm that all events are being logged correctly.

📚 [Native Android SDK documentation for Debugging and Logging](/en/android/in-app-features/#debugging-and-logging)  
📚 [Native iOS SDK documentation for Debugging and Logging](/en/ios/in-app-features/#debugging-and-logging)

---

# Getting Started

URL: https://docs.contentsquare.com/en/cordova/0-3/

import { CardGrid, LinkCard, RepoCard } from '~/components';
<Render file="en/mobile/getting-started-intro"/>

## Install the SDK

The Contentsquare Plugin for Cordova is a plugin between the Contentsquare SDKs for iOS and Android, and your Cordova JavaScript code. It allows for the use of our solution both in native and JavaScript parts of your app. The Contentsquare functionality is provided through an NPM package including only the plugin and dependencies to specific versions of the SDKs.

See [Compatibility](compatibility/) for more information.

### Include the SDK

Install the plugin as follows, specifying the exact version you want to install if needed:

```shell
cordova plugin add @contentsquare/cordova-plugin
```

If your app is written in TypeScript, you can also install the types definitions package.

```shell
npm install -D @contentsquare/cordova-plugin-types
```

#### Use the plugin in your JavaScript code

The plugin defines a `ContentsquarePlugin` object.

Although the object is in the global scope, features provided by this plugin are not available until after the deviceready event.

```javascript
document.addEventListener("deviceready", onDeviceReady, false);

function onDeviceReady() {
  // ContentsquarePlugin is now available
}
```

You do not need to do anything to start the SDK. Now that the SDK is a dependency of your app, it will autostart itself when your application starts.

### Validate SDK integration

<Render file="en/mobile/getting-started-validate-sdk-integration"
  params={{
    platform: frontmatter.category,
    version: frontmatter.version
  }}/>

## Check the logs

<Render file="en/mobile/getting-started-check-the-logs"
  params={{tools: "Android Studio, Xcode"}}
/>

### Viewing local logs in IDE

<Tabs syncKey="native">
  <TabItem label="Android">
    To view SDK logs:

    1. Plug your Android phone into your computer (or use an emulator)
    1. Open Android Studio and start your app
    1. Open the `Logcat` view and select your phone or emulator
    1. Filter logs by `CSLIB`

    ![](~/assets/android/logs-android.png)
    </TabItem>
  <TabItem label="iOS">
    1. Unless you are using a simulator, ensure the device you are using is connected to your Mac or is on the same Wi-Fi network.
    1. Open the macOS Console app or Xcode.  

        For the macOS Console app, make sure info messages are included at [Choose Action > Include Info Messages](https://support.apple.com/guide/console/customize-the-log-window-cnsl35710/mac).
    1. Filter logs by `CSLIB`.

    ![](~/assets/ios/logs-ios.png)
    </TabItem>
</Tabs>

### Implement in app-features

<Render file="en/mobile/getting-started-in-app-features"/>

To allow Contentsquare users to enable in-app features, perform these tasks:

1. [Install the Cordova plugin to handle URL schemes](#1-install-the-cordova-plugin-to-handle-url-schemes)
1. [Call the SDK when your app is opened with the custom URL](#2-call-the-sdk-when-your-app-is-opened-with-the-custom-url)

#### 1. Install the Cordova plugin to handle URL schemes

In order for your application to open when you scan the QR code or enter the URL we provide in a web browser, you have to install a Cordova plugin which will handle the URL scheme.

```javascript
cordova plugin add cordova-plugin-customurlscheme --variable URL_SCHEME=cs-{package-id}
// Example:
// my package id is 'com.mycompany.myapp'
// cordova plugin add cordova-plugin-customurlscheme --variable URL_SCHEME=cs-com.mycompany.myapp
```

#### 2. Call the SDK when your app is opened with the custom URL

Then, you will need to link your app with our SDK. When your application is started via a deeplink, a specific global JavaScript function, handleOpenURL(), is automatically called in your App.
You will have to define this function in the 'window' global scope and you will need to call a function of our API via the Contentsquare Cordova Plugin.

```javascript
window.handleOpenURL = function (url) {
    console.log("received url: " + url);
    ContentsquarePlugin.handleURL(url);
}
```

### Enable in-app features

To enable in-app features within your app, you have to **first make sure your app is launched in the background**. Then, follow the appropriate method described as follows.

#### On a device: scan the QR code

<Render file="en/mobile/getting-started-scan-qr-code" params={{
  platform: frontmatter.category
}}/>

#### On an emulator/simulator

<Tabs syncKey="native">
  <TabItem label="Android">

    In Contentsquare, select the Mobile icon in the menu top bar then select your app ID, and “Copy this ADB command”.

    ![](~/assets/android/log-visualizer-access-adb.png)
  </TabItem>
  <TabItem label="iOS">

    If you have access to the Contentsquare platform, you can open the in-app features modal from the menu then select your app ID, and select “Copy this link”. Paste it in Safari on your simulator to trigger the in-app features.

    ![](~/assets/ios/log-visualizer-access-custom-link.png)
  </TabItem>
</Tabs>

### Contentsquare Log Visualizer

<Render file="en/mobile/getting-started-log-visualizer" params={{
  platform: frontmatter.category
}}/>

## Get user consent

<Render file="en/mobile/getting-started-get-user-consent"/>

:::warning
You are responsible for handling the UI asking users for their consent and allowing them to manage their privacy settings. Consult our [Privacy Center](https://contentsquare.com/privacy-center/) and [Privacy Policy](https://contentsquare.com/privacy-center/privacy-policy/).
:::

### User opt-in

The SDK treats users as **opted-out by default.**

To start tracking, use `optIn()`. The `optIn()` API enables tracking via Contentsquare by generating a user ID and initiating tracking. This method should be called after receiving consent from the user.

For example, call `optIn()` when the user accepts your app's privacy policy or tracking terms:

```javascript
import React, { useState } from "react";
import { View, Text, Button } from "react-native";
import Contentsquare from "@contentsquare/react-native-bridge";

const PolicyConsentScreen = () => {
  const [isTrackingAccepted, setIsTrackingAccepted] = useState(false);

  const handleAcceptPolicy = () => {
    setIsTrackingAccepted(true);
    Contentsquare.optIn(); // Opt-in for CS Tracking
  };

  return (
    <View>
      <Text>Please accept our privacy policy to proceed.</Text>
      <Button title="Accept Policy" onPress={handleAcceptPolicy} />
    </View>
  );
};

export default PolicyConsentScreen;
```

:::note[Going further]
For advanced configuration regarding user consent or personal data handling, see [Privacy](/en/android/privacy/).
:::

## Track your first screens

<Render file="en/mobile/getting-started-track-first-screens"/>

### Sending screenview events

Screen tracking is achieved by sending a screenview event each time a new screen is displayed on the user’s device.

```javascript
import { ContentsquareCDVPlugin } from '@contentsquare/cordova-plugin-types';

declare var ContentsquarePlugin: ContentsquareCDVPlugin;

ContentsquarePlugin.sendScreenName("ScreenName", (result)=>{
    // Success
}, (err)=>{
    // Handle error
});
```

### Implementation recommendations

From a functional perspective, a screenview should be triggered in the following cases:

- When the screen appears on the device
- When a modal or pop-up is displayed
- When a modal or pop-up is closed, returning the user to the screen
- When the app is brought back to the foreground (after being minimized)

#### Screen name handling

It is necessary to provide a name for each screen when calling the screenview API.

As a general rule, keep distinct screen names under 100. As they are used to map your app in Contentsquare, you will want something comprehensive.
The screen name length is not limited on the SDK side. However, the limit is 2083 characters on the server side.

More on [screen name handling](/en/cordova/track-screens/#how-to-name-screens).

:::tip[Tracking plan]
To get the most out of your data, it’s best to follow a tracking plan. This way, you’ll capture every step of the user’s journey without missing important interactions, giving you a complete picture of how your app is used.
:::

## Test your setup

<Render file="en/mobile/getting-started-test-setup" params={{
  tools: "Android Studio, Xcode, or Log Visualizer",
}}/>

### Visualize events in Contentsquare

<Render file="en/mobile/getting-started-visualize-events"
params={{
  platform: frontmatter.category
}}/>

### Visualize data in Contentsquare

<Render file="en/mobile/getting-started-visualize-data"/>

## Sample app

To explore some of these features in context, check our Cordova sample apps.

<RepoCard
  repo="ContentSquare/cordova-sample-app"
/>

## Next steps

<Render file="en/mobile/getting-started-next-steps"/>

<CardGrid>
  <LinkCard
    title="Dynamic Variables"
    description="Collect additional information about the session."
    href="/en/cordova/track-dynamic-variables/"
  />
  <LinkCard
    title="Transactions tracking"
    description="Associate user’s session with their potential purchases and corresponding revenue."
    href="/en/cordova/track-transactions/"
  />
</CardGrid>

---

# Security

URL: https://docs.contentsquare.com/en/cordova/0-3/security/

## Transmission and hosting
Our server side uses HTTPS to make sure that data is encrypted in transport.

Our hosting solution is a PCI DSS Level 1 Service Provider.

## What is not collected

- Passwords from password fields
- Geo location information
- Information from contacts, emails, or any other user identifiable information.
- Text from labels, buttons, and any other widget which contains text
- Accessibility information from any widget which the user interacts with
- Labels printed on the screen of any kind.

---

# Track Dynamic Variables

URL: https://docs.contentsquare.com/en/cordova/0-3/track-dynamic-variables/

## General principles
### Usage

Dynamic variables are additional information on the session that can be used to segment sessions.

For example, they can include information on the A/B Test variations displayed to the current user.

### Limits

#### On the server side

- It is possible to save up to 40 distinct dynamic variable keys per screen view. If more are received, only the first 40 keys will be kept.
- If you are using the same key twice, the last value associated with the key will be collected.

#### On the SDK side

- Every dynamic variable is composed of a pair of key (max. 512 characters) and value (max. 255 characters string or a whole number between 0 and 2<sup>32</sup> - 1 ). The SDK will trim the exceeding characters.
- If key or value is empty, the SDK will send the string "cs-empty".

## Defining dynamic variables

To define and send a dynamic variable, use the API below. For each dynamic variable, we send:
- Key (`string`, mandatory)
- Value (`string` or `integer`, mandatory)

Note that if you send an integer as a value, it has indeed to be an integer. A null or a float will not be accepted as a valid parameter, and will result in an error.

```javascript
import { ContentsquareCDVPlugin, DynamicVarItem } from '@contentsquare/cordova-plugin-types';

declare var ContentsquarePlugin: ContentsquareCDVPlugin;

const myDynamicVar: DynamicVarItem = {
    dynVarKey: 'myKey',
    dynVarValue: 32,
}

ContentsquarePlugin.sendDynamicVar(myDynamicVar, (result) => {
    // Success
}, (err) => {
    // Handle Error
});
```

## Sending a dynamic variable for each session

You may want to send a dynamic variable for each session (like the user's country or store). While **triggering the dynamic variable at app launch will cover most cases, it will not be enough**. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See [Session definition](/en/cordova/how-the-sdk-works/#session-definition) for more information.

That is why we also recommend **sending such dynamic variable every time the app enters foreground**.

You can use the [`onResume` event](https://cordova.apache.org/docs/en/latest/cordova/events/events.html) triggered by Cordova to detect foreground and trigger a dynamic variable.

---

# Track transactions

URL: https://docs.contentsquare.com/en/cordova/0-3/track-transactions/

To associate a user's session with their potential purchases (and corresponding revenue), you must send the transaction via a dedicated API.
For each transaction, we send:
- Price (`number`, mandatory)
- Currency (`CurrencyCode` or `string`, mandatory)
- Transaction ID (`string`, optional)
The plugin defines a `TransactionItem` type to prevent potential typing errors.

```javascript
import { ContentsquareCDVPlugin, CurrencyCode, TransactionItem } from '@contentsquare/cordova-plugin-types';
 
declare var ContentsquarePlugin: ContentsquareCDVPlugin;
 
const myTransaction: TransactionItem = {
      transactionValue: 10.99,
      transactionCurrency: CurrencyCode.USD,
      transactionId: 'my_transaction_id',
};
 
ContentsquarePlugin.sendTransaction(myTransaction, (result) => {
  // Success
}, (err) => {
    // Handle Error
});
```

:::warning
**Each transaction must only be sent once**. A common mistake is to trigger the sending when the confirmation screen is displayed. This leads to triggering the transaction each time the user puts the app in background and then in foreground on the confirmation screen.
:::

## Currency

The currency is conforming to the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) standard. Although the currency can be passed as "alphanumeric code", you should always prefer using the plugin's CurrencyCode object values. If you have to pass the ISO code as a string, note that capitalization is not a factor (`"USD"`, `"Usd"` or `"usd"` will all be treated as the US Dollar).

If the currency passed doesn't match our supported currencies, the SDK will send a currency value of "-1". It will be processed as the default currency of the project.

---

# Privacy

URL: https://docs.contentsquare.com/en/cordova/0-3/privacy/

The Contentsquare Cordova Plugin and SDKs are compliant with the **Play Store and App Store Privacy guidelines** as well as with the **EU General Data Protection Regulation (GDPR)**.
Consult our [Privacy Center](https://contentsquare.com/privacy-center/) and [Privacy Policy](https://contentsquare.com/privacy-center/privacy-policy/).

## Handling User Consent

Even though Contentsquare only collects usage data on your app, we will consider every new user to be opted-out. To start tracking, the Opt-in API must be called.

:::note
If for some reason you think that securing user consent is not required for your app, discuss it during the Implementation process with your main contact.
:::

## Opt-in

Use the Opt-in API to get user consent. Calling this API will generate a user ID and initiate tracking.

```javascript
import { ContentsquareCDVPlugin } from '@contentsquare/cordova-plugin-types';

declare var ContentsquarePlugin: ContentsquareCDVPlugin;

ContentsquarePlugin.optIn((result)=>{
    // Success
}, (err)=>{
    // Handle error
});
```

## Opt-Out

**Permanently breaking the link and stopping all data collection.**

When this API is called, tracking stops immediately, all settings are reset (session number, page number, user ID...) and all files related to Contentsquare tracking are deleted. Contentsquare will never track and collect any data from the user's phone unless the Opt-in API is called again.

```javascript
import { ContentsquareCDVPlugin } from '@contentsquare/cordova-plugin-types';

declare var ContentsquarePlugin: ContentsquareCDVPlugin;

ContentsquarePlugin.optOut((result)=>{
    // Success
}, (err)=>{
    // Handle error
});
```

---

# Track screens

URL: https://docs.contentsquare.com/en/cordova/0-3/track-screens/

Contentsquare aggregates user behavior and engagement at the screen level. To achieve this, it is necessary to provide a name for each screen by calling a dedicated screenview API.
:::warning
Sessions without at least one screenview will be discarded.
:::

```javascript
import { ContentsquareCDVPlugin } from '@contentsquare/cordova-plugin-types';

declare var ContentsquarePlugin: ContentsquareCDVPlugin;

ContentsquarePlugin.sendScreenName("ScreenName", (result)=>{
    // Success
}, (err)=>{
    // Handle error
});
```

## Screen name handling

The screen name is limited to 2083 characters. However, this limit is not enforced by the SDK, but rather by the Contentsquare servers.

## Screenview after app in background

The SDK triggers a screenview automatically after the app is put in background and foreground, as long as a screenview with a screen name has been triggered previously. It will use the last screen name set.

## Implementation recommendations

From a functional standpoint, we expect a screenview to be sent:
- When the screen appears
- When a modal/pop-up is closed and the user is back on the screen
- When the app is put in the foreground (after an app hide)

## How to name screens

As a general rule, keep the number of distinct screen names under 100. Since these names are used to map your app in Contentsquare, choose names that are clear and comprehensive.

### Separate words with space, dash or underscore characters

If you want to generate screen names including more than one word, it is best to separate them and to do so using space, dash or underscore characters. Contentsquare handles automatically the formatting for them.

**Example:** For a sub-category list of a retail app, use `Home and Living - Home Furnishings` instead of `homeLivingHomeFurnishings`.

### Use screen template/layout names

As a general recommendation, use names referring to the screen template/layout rather than referring to the specific content (data). This will help:
- To keep the number of distinct screen names low and therefore make Contentsquare easier to use
- Remove the risk of sending Personal Data to Contentsquare

List of screen types falling into that category: _Product detail, Event detail, Conversation/Chat, User profile..._

### Screens with multiple states/layouts

<Render file="en/mobile/multiple-layout-screens"/>

---

# Adobe Analytics

URL: https://docs.contentsquare.com/en/flutter/3-16-2/adobe-analytics/

<Render file="en/mobile/adobe-analytics/use-adobe-analytics"/>
## Prerequisites

<Render file="en/mobile/adobe-analytics/flutter/aepedge-prerequisites"/>

## Code implementation

:::note[Adobe SDK code requirements]
On the native Android and iOS parts of your Flutter project, make sure you have followed the instructions of [Usage of `flutter_aepedge`](https://pub.dev/packages/flutter_aepedge#usage).  

<Render file="en/mobile/adobe-analytics/csmatchingkey-sending-rule"/>
:::

Add the following code snippet in your application code.
Add a call to the `sendCSMatchingKeyIfNeeded()` from within the `initState` of your application.
Listen to `AppLifecycleState` change and call `sendCSMatchingKeyIfNeeded()` when the application resumed.

```dart
import 'package:contentsquare/contentsquare.dart';
import 'package:flutter_aepedge/flutter_aepedge.dart';
// ... others imports


// TODO: Use your local storage. A package you can use is: https://pub.dev/packages/shared_preferences
final localStorage = LocalStorageFake();

@override
void initState() {
  // ... your code
  sendCSMatchingKeyIfNeeded();
  WidgetsBinding.instance.addObserver(this);
  // ... your code
}

@override
void dispose() {
  // ... your code
  WidgetsBinding.instance.removeObserver(this);
  super.dispose();
  // ... your code
}

@override
void didChangeAppLifecycleState(AppLifecycleState state) {
  super.didChangeAppLifecycleState(state);
  // Check if the app is in the foreground
  if (state == AppLifecycleState.resumed) {
    sendCSMatchingKeyIfNeeded();
  }
}

Future<void> sendCSMatchingKeyIfNeeded() async {
  // TODO: Implement your local storage. A package you can use is: https://pub.dev/packages/shared_preferences
  final csMatchingKeyTimestampMap = await localStorage.getMap(
    'csMatchingKey_creation_ts',
  );

  final csMatchingKeyIsNotGenerated = csMatchingKeyTimestampMap == null;
  if (csMatchingKeyIsNotGenerated) {
    await _submitNewCsMatchingKey();
    return;
  }

  final timestamp = DateTime.fromMillisecondsSinceEpoch(
    csMatchingKeyTimestampMap['timestamp'],
  );
  if (DateTime.now().difference(timestamp).inMinutes > 30) {
    // if the key is not valid anymore, submit a new one
    await _submitNewCsMatchingKey();
  }
  // if the key is still valid, do nothing
}

Future<void> _submitNewCsMatchingKey() async {
  // Generate the matching key and store it in the local storage
  final millisecondsSinceEpoch = DateTime.now().millisecondsSinceEpoch;
  final csMatchingKeyValue = '${Random().nextDouble()}_$millisecondsSinceEpoch';

  await localStorage.setMap('csMatchingKey_creation_ts', {
    'csMatchingKey': csMatchingKeyValue,
    'timestamp': millisecondsSinceEpoch,
  });
  
  // Submit the matching key to Adobe
  final experienceEvent = ExperienceEvent({
    'xdmData': {'eventType': 'csMatchingKey_state'},
    'data': {'csMatchingKey': csMatchingKeyValue}
  });
  await Edge.sendEvent(experienceEvent);

  // Submit the matching key to Contentsquare
  await Contentsquare().sendDynamicVar(
    'csMatchingKey',
    stringValue: csMatchingKeyValue,
  );
}
```

---

# Changelog

URL: https://docs.contentsquare.com/en/flutter/3-16-2/changelog/

import { EmailForm } from '~/components'
<EmailForm/>

## 3.16.2 - 2025.03.19
- **Session Replay**
    - Support all `ExcludeSemantics` widgets
    - Support `IgnorePointer` and `AbsorbPointer` widgets

## 3.16.1 - 2025.03.13
- **Bug fix:**
    - Fix an Android bug where API changed in Android 15 crash with `java.lang.NoSuchMethodError` from `java.util.List`.
- **Native SDK update**
  - Android: 4.36.0 → 4.36.1

## 3.16.0 - 2025.02.21
- **Session Replay**
    - [Support full remote masking configuration by APP/SDK versions through the CSQ Console](/en/flutter/session-replay/#remote-masking-configuration)
    - Support Session Replay gestures in the player's event stream
    - [Add the ability to mask `CustomPaint`](/en/flutter/session-replay/#masking-mechanisms)
    - Android Webviews in Session Replay have now the expected sizes
- **Snapshot**
    - Fix a crash that could occur when taking a snapshot on Android
- **API**
  - `Contentsquare.start` and `ContentsquareNavigatorObserver` are now officially supported. The `@experimental` annotation has been removed.
- **🚨 Minimum iOS and Flutter version announcement**
  - Starting with the next release (`3.17.0`), Contentsquare plugin will require iOS version to be `13.0` or later
  - Starting with the next release (`3.17.0`), Contentsquare plugin will require Flutter SDK to be `3.16.9` or later
- **Native SDK update**
  - iOS: 4.38.2 → 4.40.2
  - Android: 4.34.0 → 4.36.0

## 3.15.3 - 2025.02.04
- **Bug fix:**
    - Fixed a bug, where an improperly tracked tap could create an exception. 

## 3.15.2 - 2025.01.22
- **Bug fix:**
    - Fixed a bug, when unable to zone bottom bar
    - Fixed a bug on iOS, when the webview zones become displaced when snapshot is scrolled
    - Fixed a bug, when bottom dialog shows up after the language changes

## 3.15.1 - 2024.12.11
- **Zoning**
  - Fixed a bug where ReliableTargets could be not properly tracked in some cases, when multiple lists containing a Reliable Target in the same index, are switched in the same area of the screen.

## 3.15.0 - 2024.12.04
- **🚨 Minimum Flutter version announcement**
  - Starting with the next release (`3.16.0`), Contentsquare plugin will require Flutter SDK `3.13.9` or later
- **Experience Analytics**
  - Introduce collection of Flutter errors feature
- **Session Replay**
  - Support Text widgets when they are wrapped with `Semantics` or contain `semanticsLabel`
  - Improve performance and stability
  - Support `Opacity` widget
  - Fix a bug in `onSessionReplayLinkChange` for android where the link is not updated after the app returns from background
- **Other**
  - Resolve an issue that could prevent building obfuscated Android applications with Android Gradle Plugin (AGP) versions 8.4.0 and later
  
:::warning
Versions of the SDK lower than 3.15.0 do not support AGP versions 8.4.0 and later.
To ensure compatibility with AGP >= 8.4.0 , upgrade to Contentsquare Flutter SDK version 3.15.0 or later.
:::

- **Native SDK update**
  - iOS: 4.37.2 → 4.38.2
  - Android: 4.33.2 → 4.34.0

## 3.14.159 - 2024.11.05

- **WebView support:** 
  - Improve support for WebViews
- **Logging:** 
  - Fix an issue where warning logs were incorrectly displayed as error logs
- **Dependencies:** 
  - Updated protobuf dependency in `pubspec.yaml` to `>=2.0.0 <4.0.0`

## 3.14.1 - 2024.10.22

- **Privacy**
  - Fix a bug occurring to `resumeTracking` when `CSInApp` is enabled
- **Native SDKs:**
  - Android: 4.33.1 → 4.33.2

## 3.14.0 - 2024.10.17

- **API**
  - Adds `ContentsquareNavigatorObserver` to automatically track screen changes (as an [experimental](/en/flutter/experimental/) feature)
  - Adds `start` method to manually start the SDK (as an [experimental](/en/flutter/experimental/) feature)
- **Session Replay:** 
  - Adds more fidelity in replays
    - Texts and icons have now high fidelity 
    - Font uploading is no longer needed for android and iOS
- **🚨 Minimum Flutter version change**
  - Contentsquare plugin now requires Flutter SDK `3.10.6` or later
- **Native SDKs:**
  - iOS: 4.36.0 → 4.37.2
  - Android: 4.32.1 → 4.33.1

## 3.13.1 - 2024.09.24

- **🚨 Minimum Flutter version announcement**
  - Starting with the next release (`3.14`), Contentsquare plugin will requires Flutter SDK `3.10.1` or later

- **Analytics:**
  - Fix an issue occurring on iOS Zoning snapshot when a custom root `ViewController` is used

- **Session Replay:**
  - Fix an issue occurring in Session Replay when a `CustomPainter` animation is disposed

- **Native SDKs:**
  - iOS: 4.36.0 → 4.36.1

## 3.13.0 - 2024.09.13

- **WebViews**
  - Improved webViews tracking with the new widget `ContentsquareWebViewWrapper`

- **Native SDKs:**
  - iOS: 4.35.0 → 4.36.0
  - Android: 4.31.0 → 4.32.1

## 3.12.0 - 2024.08.14

- **Session Replay:** 
  - Support dynamic `QualityLevels` in the `SessionReplay` (low, medium and high)
  - Improve `SessionReplay` performance
  - Fidelity improvements
    - Support `CustomPaint`
    - Support borders 
    - Support checkboxes, radio buttons, and switches
    - Support SVG images (for `flutter_svg` package)
    - Additional support for `Decorations`
  - Fixed error that occurs when `RichText` is masked
- **Native SDKs:**
  - iOS: 4.33.1 → 4.35.0
  - Android: 4.29.1 → 4.31.0

## 3.11.1 - 2024.06.18

- **Native SDKs:**
  - iOS: 4.33.0 → 4.33.1
  - Android: 4.29.0 → 4.29.1

## 3.11.0 - 2024.06.11

- **Session Replay:** 
  - Improve fidelity
  - Support images and gradient colors in `ShapeDecoration`
- **ApiErrors:**
  - Introduce a `gentle` HttpOverride
  - Fix a bug with tracking requests in `dio` package
- **Native SDKs:**
  - iOS: 4.32.0 → 4.33.0
  - Android: 4.28.0 → 4.29.0

## 3.10.0 - 2024.04.29

- **Session Replay:** 
  - Added support for `WidgetSpan`
- **Native SDKs:**
  - iOS: 4.31.2 → 4.32.0
  - Android: 4.27.1 → 4.28.0
- **🚨 Minimum Flutter version change**
  - Contentsquare plugin now requires Flutter SDK 3.3.10 or later.

## 3.9.0 - 2024.04.02

- **Session Replay:** 
  - Add public API: `onSessionReplayLinkChange` to listen to Session Replay URL changes during app lifecycle
  - Deprecate public API: `currentSessionReplayUrl`
  - Performance improvement in Android Session Replay
  - Partially support gradient colors in Session Replay as solid color
  - Fix a bug happening when CS in-app is opened while Session Replay is running, on Android
  - Fix a minor bug displaying a warning as an error during Session Replay
- **Platform support:**
  - Contentsquare SDK is now completely disabled on unsupported platforms (Desktop and Web) and non mobile apps can now be built safely.
- **Native SDKs:**
  - iOS: 4.30.2 → 4.31.2
  - Android: 4.26.0 → 4.27.1

## 3.8.0 - 2024.03.04

- **API:** 
  - `forgetMe` has been deprecated
- **Session Replay:**
  - Fix a bug that could occur when using the `span` widget
  - Fix a bug that stops the Session Replay when translation animation is set to infinity, that could happen if BottomNavigationBar's selectedFontSize is set to 0
- **Analytics:**
  - Fix an issue in webviews using the tracking tag that impacted the launch of Analytics
- **Snapshot:**
  - Fixed a bug that could lead to a restart of the app state during the usage of CS in-app tool
- **Native SDKs:**
  - iOS: 4.29.1 → 4.30.2
  - Android: 4.24.1 → 4.26.0
    - ⚠️ `compileSdkVersion` requirement has fallen back to `33`
    - Added support to use ProGuard for minification and shrinking

## 3.7.0 - 2024.01.26

- **Snapshots:**
    - A bug provoking state restart while taking snapshots from CS in-app is fixed
    - A bug provoking state restart of ContentsquareRoot when displaying CS in-app is fixed
- **[Session Replay](/en/flutter/session-replay/#webview)**
  - Fix an issue on Android Session Replays
  - Support of webviews was added to the Session Replay for both Android and iOS platforms (check the documentation for additional implementation steps)
  - From now on, the masking configuration can be changed dynamically during the Session Replay on the Flutter elements
- **Native SDKs:**
  - iOS: 4.27.0 → 4.29.1
  - Android: 4.23.1 → 4.24.1
    - ⚠️ `compileSdkVersion` should be bumped to `34`

:::warning[Version 3.6.0 retraction]
Version 3.6.0 of the Contentsquare Flutter plugin has been identified to contain a deployment issue for iOS.
As a result, this version has been retracted and is no longer available for use.
Upgrade to the [latest version](/en/flutter/).
:::

## 3.5.1 - 2023.12.20

- **[🚨 Maximum Flutter version]**
  - Add support of the latest Flutter version (3.16 and later)

## 3.5.0 - 2023.12.01

- **[API Errors:](/en/flutter/error-analysis/)**
  - Support of the `API Errors` feature has been added to Android platform
- **[Session Replay](/en/flutter/session-replay/)**
  - Support of the `Session Replay` feature has been added to Android platform
- **[Reliable Targets](/en/flutter/reliable-targets/)**
  - Support of the `Reliable Targets` feature has been added to both Android and iOS platforms
- **[User Identifier](/en/flutter/session-replay/#send-user-identifier)**
  - Support of the `User Identifier` feature has been added to both Android and iOS platforms  
- **Native SDKs:**
  - Android: 4.21.0 → 4.23.1
  - iOS: 4.25.0 → 4.27.0
- **[🚨 Maximum Flutter version]**
  - Currently, the maximum Flutter version supported by the plugin is `3.13.9`. 
  - Support of the Flutter version 3.16 and later is added back in the plugin `3.5.1`. Update the plugin if you are using Flutter 3.16 or later.

## 3.4.0 - 2023.09.14

- **Custom Variables:** 
  - Support of the `Custom Variables` feature has been added to Android
- **[API Errors:](/en/flutter/error-analysis/)**
  - Support of the `API Errors` feature has been added to iOS
- **[Session Replay](/en/flutter/session-replay/)**
  - Minor fidelity improvements
- **Native SDKs:**
  - Android: 4.20.0 → 4.21.0
  - iOS: 4.24.0 → 4.25.0
- **[🚨 Maximum Flutter version]**
  - Currently, the maximum Flutter version supported by the plugin is `3.13.9`. 
  - Support of the Flutter version 3.16 and later is added back in the plugin `3.5.1`. Update the plugin if you are using Flutter 3.16 or later.

## 3.3.0 - 2023.08.01

- **Native SDKs:**
  - Android: 4.19.0 → 4.20.0
  - iOS: 4.23.0 → 4.24.0
- **[Session Replay](/en/flutter/session-replay)**
  - Minor fidelity improvements
- **Custom Variables:** 
  - Support of the Custom Variables feature has been added to iOS
- **API Errors:**
  - Added a log when API Errors collection is enabled or disabled in iOS (for future usage)
- **[🚨 Maximum Flutter version]**
  - Currently, the maximum Flutter version supported by the plugin is `3.13.9`. 
  - Support of the Flutter version 3.16 and later is added back in the plugin `3.5.1`. Update the plugin if you are using Flutter 3.16 or later.

## 3.2.1 - 2023.07.04

- **Bug fix:**
    - Fixed an issue on Android, causing a crash during the initialization of the SDK. Bug was introduced since the release of 3.1.0
- **[🚨 Maximum Flutter version]**
  - Currently, the maximum Flutter version supported by the plugin is `3.13.9`. 
  - Support of the Flutter version 3.16 and later is added back in the plugin `3.5.1`. Update the plugin if you are using Flutter 3.16 or later.

## 3.2.0 - 2023.06.30

- **Bug fix:** Fix critical bug for clients who use Flutter < 3.0 introduced in the CS SDK release 3.1.0
- **API**:
  - New method getter `currentSessionReplayUrl` (iOS Only)
- [Session Replay](/en/flutter/session-replay/) fidelity improvements:
  - Shadows
  - Clipping
  - Radius
  - Transparency
  - Blur
- **[🚨 Maximum Flutter version]**
  - Currently, the maximum Flutter version supported by the plugin is `3.13.9`. 
  - Support of the Flutter version 3.16 and later is added back in the plugin `3.5.1`. Update the plugin if you are using Flutter 3.16 or later.

## 3.1.0 - 2023.06.20

- **Native SDKs:**
  - Android: 4.18.1 → 4.19.0
  - iOS: 4.22.1 → 4.23.0
- [Session Replay](/en/flutter/session-replay/) improvements:
  - Added icons support
  - Performance improvement for unmasked images
- **[🚨 Maximum Flutter version]**
  - Currently, the maximum Flutter version supported by the plugin is `3.13.9`. 
  - Support of the Flutter version 3.16 and later is added back in the plugin `3.5.1`. Update the plugin if you are using Flutter 3.16 or later.

## 3.0.0 - 2023.05.17

:::danger[Breaking change]
  Remove support for `sendTouchEvent`.
:::
- **Native SDKs:**
  - Android: 4.17.0 → 4.18.1
  - iOS: 4.21.0 → 4.22.1
- [Session Replay](/en/flutter/session-replay/) feature is available for iOS only. For more information, reach out to your Contentsquare contact.
- **[🚨 Maximum Flutter version]**
  - Currently, the maximum Flutter version supported by the plugin is `3.13.9`. 
  - Support of the Flutter version 3.16 and later is added back in the plugin `3.5.1`. Update the plugin if you are using Flutter 3.16 or later.

## 2.3.0 - 2023.04.13

- **Native SDKs:**
  - Android: 4.16.0 → 4.17.0
  - iOS: 4.20.0 → 4.21.0

## 2.2.0 - 2023.03.09

- **Native SDKs:**
  - Android: 4.15.0 → 4.16.0

## 2.1.0 - 2023.03.02

- **Native SDKs:**
  - iOS: 4.18.0 → 4.20.0

## 2.0.1 - 2023.02.28

- **Bug fix:** Track Transactions now supports any value while it would previously fail if the given transaction value contained decimals.

## 2.0.0 - 2023.01.30

:::danger[Breaking change]
  First party support for `webview_flutter` plugin has been removed for now.
  Use the generic webview tracking API in the meantime.
  See [the updated documentation](/en/flutter/track-webviews/#examples) for concrete implementation examples.
:::

- **WebView Tracking:**
    - **[🚨 Breaking Change 🚨] Feature:** You can now use the SDK with any version of the `webview_flutter` plugin. However to do so we had to remove the first party support for this plugin. You can still use the generic webview tracking API. See [the updated documentation](/en/flutter/track-webviews/#examples) for concrete implementation examples.
    - **[🚨 Breaking Change 🚨] Refactoring:** `JavascriptChannel` has been renamed to `ContentsquareJavascriptChannel` to avoid naming conflicts with other plugins.
    - **Refactoring:** `tracker.initializeWebViewTracking` has been renamed to `tracker.startPageTracking`. Using `tracker.initializeWebViewTracking` is deprecated and will be removed in a future release.

## 1.3.2 - 2022.12.23

:::danger[Data Breaking change]
  Snapshots for Android apps are not compatible with the previous versions and need to be retaken.
:::

- **Native SDKs:** 
  - Android: 4.14.0 → 4.15.0
  - iOS: 4.17.0 → 4.18.0
- **Fix:** Bump the lowest supported Dart SDK version from 2.12.0 to 2.15.0

## 1.3.1 - 2022.12.22 - Deprecated

:::warning[Deprecation notice]
  This version is deprecated because it introduces an incompatibility between the snapshots API and the touch events API, which breaks the zoning analysis feature.
:::

## 1.3.0 - 2022.11.24

- **Native SDKs:** 
  - Android: 4.13.1 → 4.14.0
  - iOS: 4.13.0 → 4.17.0

## 1.2.0 - 2022.11.14

- **Snapshots:** Beta third-party WebView tracking support (see [flutter_inappwebview](https://pub.dev/packages/flutter_inappwebview))

## 1.1.0 - 2022.11.07

- **Snapshots:** Beta WebView tracking support (only for the [official WebView plugin](https://pub.dev/packages/webview_flutter))

## 1.0.1 - 2022.10.31

- **Fix:** Update dependency of `contentsquare` on `contentsquare_plugin_interface`

## 1.0.0 - 2022.10.24 - Deprecated
⚠️ This version is deprecated due to bad dependency which prevents the plugin from compiling. Use the latest version of the plugin instead.

- **License:** License update

## 0.5.3 - 2022.07.13
  - **Bug fix:** Fixed an issue on Android, where CS in-app features menu caused a crash while using the opt-out and opt-in operations
  - **Native SDKs:** Android 4.11.0

## 0.5.2 - 2022.07.04

- **Error when building in profile mode:** Bump `compileSdkVersion` to 31 to support Gradle version >= `4.2.0`

## 0.5.1 - 2022.05.30

- **Snapshots:** 
  - Stability improvement for `Navigator` pushed screens

## 0.5.0 - 2022.05.12

- **Snapshots:** 
  - Fix issue on generating accurate targets for gestures
  - Only include widgets which are currently visible
- **Native SDKs:** Android 4.9.0 and iOS 4.13.0

## 0.4.2 - 2022.04.14

- **Snapshots:** Fixed an issue where snapshot captured was not rendering the right screen.
- **Gesture tracking:** Fixed an issue on our gesture detector that could cause an exception to be thrown in edge cases.
- **Native SDKs:** Android 4.8.0 and iOS 4.12.0

## 0.4.1 - 2022.03.25

- **Snapshots:** Fixed snapshot capture infinite loading on Android caused by WebView; fixed snapshot capture infinite loading on iOS caused by conflict with `background_locator` plugin; fixed visual bug with the app bar; fixed empty snapshot on iOS related to autostart disabled.
- **Native SDKs:** Android 4.8.0 and iOS 4.11.0

## 0.4.0 - 2022.03.01

- **Crash at app launch on Android:** Fixed a bug introduced crashing the app on Android, at app start.

## 0.3.0 - 2022.02.18

- **Gesture tracking:** Gesture tracking optimization; fixed issue preventing scrolling in WebView;
- **Snapshots:** Size Optimization.
- **Native SDKs:** Android 4.7.0 and iOS 4.11.0

## 0.2.3 - 2022.02.07

- **Native SDKs:** Android 4.7.0 and iOS 4.10.1

## 0.2.2 - 2022.01.13

- **Gesture tracking:** Fixed performance issue related to gesture tracking
- **Snapshots:** Support snapshot capture on iOS
- **Native SDKs:** Android 4.3.0 and iOS 4.10.0

## 0.2.1 - 2022.12.17

- **Gesture tracking:** Now support gesture tracking accurately.

---

# Compatibility

URL: https://docs.contentsquare.com/en/flutter/3-16-2/compatibility/

Before implementing the SDK, make sure your app meets the following technical prerequisites to avoid integration issues and ensure optimal performance.
## Supported platforms

Currently, only Flutter application on the following platforms are supported by the `Contentsquare Flutter SDK`:
- Android
- iOS

Calling the SDK on other platforms is safe but will not have any effect.

If you need to use the SDK on another platform, contact our support team.

Hybrid applications are not supported.
By hybrid application, we mean iOS and Android apps that integrate Flutter as an [add-to-app module](https://docs.flutter.dev/add-to-app)

## Compatibility matrix

Each version of the Contentsquare Flutter SDK will be linked to specific, fixed versions of each native SDK. In order to make that clear, here is a compatibility table to consider when choosing your version of the bridge (refer to the Flutter SDK Changelog to know what the changes are for each version).

:::note
If the Maximum Flutter Version is not specified, it means that the bridge is compatible with all versions of Flutter up to the latest one.
:::

:::warning
Versions of the SDK lower than 3.15.0 do not support Android Gradle Plugin versions 8.4.0 and later.
To ensure compatibility with AGP >= 8.4.0 , upgrade to Contentsquare Flutter SDK version 3.15.0 or later.
:::

| Contentsquare Flutter SDK Version | iOS SDK Version | Android SDK Version | Minimum Flutter Version | Maximum Flutter Version |
| --------------------------------- | --------------- | ------------------- | ----------------------- | ----------------------- |
| 3.16.2                            | 4.40.2          | 4.36.1              | 3.13.9                  | -                       |
| 3.15.3                            | 4.38.2          | 4.34.0              | 3.10.6                  | -                       |
| 3.14.159                          | 4.37.2          | 4.33.2              | 3.10.6                  | -                       |
| 3.13.1                            | 4.36.1          | 4.32.1              | 3.3.10                  | -                       |
| 3.12.0                            | 4.35.0          | 4.31.0              | 3.3.10                  | -                       |
| 3.11.1                            | 4.33.1          | 4.29.1              | 3.3.10                  | -                       |
| 3.10.0                            | 4.32.0          | 4.28.0              | 3.3.10                  | -                       |
| 3.9.0                             | 4.31.2          | 4.27.1              | 2.8.0                   | -                       |
| 3.8.0                             | 4.30.2          | 4.26.0              | 2.8.0                   | -                       |
| 3.7.0                             | 4.29.1          | 4.24.1              | 2.8.0                   | -                       |
| 3.6.0 (deprecated)                | 4.28.0          | 4.24.1              | 2.8.0                   | -                       |
| 3.5.1                             | 4.27.0          | 4.23.1              | 2.8.0                   | -                       |
| 3.4.0                             | 4.25.0          | 4.21.0              | 2.8.0                   | 3.13.9                  |
| 3.3.0                             | 4.24.0          | 4.20.0              | 2.8.0                   | 3.13.9                  |
| 3.2.0                             | 4.23.0          | 4.19.0              | 2.8.0                   | 3.13.9                  |
| 3.1.0                             | 4.23.0          | 4.19.0              | 2.8.0                   | 3.13.9                  |
| 3.0.0                             | 4.22.1          | 4.18.1              | 2.8.0                   | 3.13.9                  |
| 2.3.0                             | 4.21.0          | 4.17.0              | 2.8.0                   | -                       |
| 2.2.0                             | 4.20.0          | 4.16.0              | 2.8.0                   | -                       |
| 1.3.2                             | 4.18.0          | 4.15.0              | 2.8.0                   | -                       |
| 1.2.0                             | 4.13.0          | 4.13.1              | 2.8.0                   | -                       |
| 1.1.0                             | 4.13.0          | 4.13.1              | 2.8.0                   | -                       |
| 1.0.1                             | 4.13.0          | 4.13.1              | 2.0.0                   | -                       |
| 0.5.3                             | 4.13.0          | 4.11.0              | 2.0.0                   | -                       |
| 0.4.2                             | 4.12.0          | 4.8.0               | 2.0.0                   | -                       |
| 0.3.0                             | 4.11.0          | 4.7.0               | 2.0.0                   | -                       |
| 0.2.3                             | 4.10.1          | 4.7.0               | 2.0.0                   | -                       |
| 0.1.0                             | 4.3.0           | 4.1.0               | 2.0.0                   | -                       |

---

# Contentsquare CLI

URL: https://docs.contentsquare.com/en/flutter/3-16-2/contentsquare-cli/

A Dart plugin that offers a command-line interface for users of the Contentsquare package.
## Installation

Add `contentsquare_cli` as a **dev dependency**.

```shell
flutter pub add -d contentsquare_cli
```

<Code lang="yaml" title="pubspec.yaml" code={`
  dev_dependencies:
    contentsquare_cli: ^1.0.0
`}/>

then run

```shell
dart run contentsquare_cli
```

## Usage

### upload-debug-files command

This command enables you to upload debug files generated by the `flutter build` command to Contentsquare. This allows you to read the [Flutter errors](/en/flutter/error-analysis/#error-reporter) generated in an [obfuscated or de-symbolized](/en/flutter/error-analysis/#symbolization-and-de-obfuscation) app.

#### Configuration

To use the command, provide the following identification elements. These can be passed directly as arguments each time you run the command or set up in a configuration file within your project for a more streamlined command usage.

The required information includes:
- **The targeted platform**

  `ios` or `android`, corresponding to the `flutter build` command. 

- **The project ID**

  1. Login to the Contentsquare platform on https://app.contentsquare.com
  1. Make sure to be on the right project
  1. The project ID can be found in the URL query parameter `project`: `https://app.contentsquare.com/#/{MODULE_NAME}?project={PROJECT_ID}&hash={HASH}]` 

- **Valid API credentials** 

  Follow the dedicated documentation from the Help Center to get the client ID and client Secret: [How to create API credentials](https://support.contentsquare.com/hc/en-gb/articles/9292880837660-How-to-create-API-credentials). 

- **The debug info directory**

  Provided to the `--split-debug-info` option during build command

- **The obfuscation map path (optional)**

  If you use the `--obfuscate` option during the build process, you can specify the path for the obfuscation map by adding the build option `--extra-gen-snapshot-options=--save-obfuscation-map=[YOUR DESIRED FILE PATH]`.

##### Using the YAML configuration file

You can supply this information by adding a `contentsquare_cli.yaml` file to the root of your project.

<Code lang="yaml" title="contentsquare_cli.yaml" code={`
  contentsquare_cli:
    android:
      client_id: "[ANDROID CLIENT ID]"
      client_secret: "[ANDROID CLIENT SECRET]"
      project_id: "[ANDROID PROJECT ID]"
      debug_info_dir: "[PATH PROVIDED TO THE --split-debug-info option]"
      obfuscation_mapping_file: "[PATH TO THE OBFUSCATION MAP]"
    ios:
      client_id: "[IOS CLIENT ID]"
      client_secret: "[IOS CLIENT SECRET]"
      project_id: "[IOS PROJECT ID]"
      debug_info_dir: "[PATH PROVIDED TO THE --split-debug-info option]"
      obfuscation_mapping_file: "[PATH TO THE OBFUSCATION MAP]"
`}/>

##### Using the command line arguments

Alternatively, this information can be provided directly as arguments on the command line.

| Option            | Description                  |
| ---------------   | ---------------------------- |
| --platform        | The target platform for which the debug files are uploaded | 
| --client-id       | The client ID of [API credentials](https://support.contentsquare.com/hc/en-gb/articles/9292880837660-How-to-create-API-credentials)     |
| --client-secret   | The client SECRET of [API credentials](https://support.contentsquare.com/hc/en-gb/articles/9292880837660-How-to-create-API-credentials)     |
| --project-id      | The contentsquare project ID    |
| --debug-info-dir | The path from `--split-debug-info` option  | 
| --obfuscation-mapping-file | The generated obfuscation map path  | 

:::note
Use `--help` option for further information
:::

:::tip
You can combine these two approaches: for example, use the YAML file to store paths and the project ID, while providing the client identifier and secret as command-line arguments.
:::

#### Examples

Let's take the case of debug files generated by this `flutter build` command: 
```shell
flutter build apk --release --split-debug-info=myDebugInfoDir --obfuscate --extra-gen-snapshot-options=--save-obfuscation-map=app.android.map.json
```

Using this configuration file:

<Code lang="yaml" title="contentsquare_cli.yaml" code={`
  contentsquare_cli:
    android:
      client_id: "my-client-id-android"
      client_secret: "myClientSecretAndroid"
      project_id: "00000"
      debug_info_dir: "myDebugInfoDir"
      obfuscation_mapping_file: "app.android.map.json"
    ios:
      client_id: "my-client-id-ios"
      client_secret: "myClientSecretIos"
      project_id: "00001"
      debug_info_dir: "myDebugInfoDir"
      obfuscation_mapping_file: "app.ios.map.json"
`}/>

You can invoke the upload-debug-files command as follows:
```shell
dart run contentsquare_cli upload-debug-files --platform=android
```

If you prefer using the command line only:
```shell
dart run contentsquare_cli upload-debug-files --platform=android --client-id=my-client-id-android --client-secret="myClientSecretAndroid" --project-id=00000 --debug-info-dir=./myDebugInfoDir --obfuscation-mapping-file=./app.android.map.json
```

:::note
For automatic execution, integrate this command in a release script or in a CI/CD pipeline.
:::

## Changelog
### 1.0.0 - 2024.11.05

- Introduce the `upload-debug-files` command

---

# Error Analysis

URL: https://docs.contentsquare.com/en/flutter/3-16-2/error-analysis/

## Prerequisites
### Contentsquare SDK is included

You must include the [Contentsquare SDK](/en/flutter/) first using the same integration method and understand [how the SDK works](/en/flutter/how-the-sdk-works/).

### Updating to latest SDK version

To enable Error Analysis in your application and ensure optimal stability, make sure to always use the last SDK version.

### Screen tracking implemented

Tracking will start at the 1st screenview event, it is required to have screen tracking implemented. Make sure to follow the [Flutter Track screens](/en/flutter/track-screens/) sections.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time, or if you choose to take this update as an opportunity to review your privacy-related implementation, ensure that you follow the [Flutter Privacy](/en/flutter/privacy/) section and use the [Opt-in API](/en/flutter/privacy/#opt-in) to get the user consent, otherwise no data will be collected.

## Get Started

### Start the SDK

You do not need to do anything to start the Error Analysis SDK, it will start itself with Contentsquare SDK.

### Validate SDK integration

When the SDK starts, you should see a log like this one:

```
// success case
CSLIB ℹ️ Info: Contentsquare Error Analysis [SDKVersionNumber] starting in app : [your.app.packageName]

// fail case
// << No public fail log
```

## API Errors

### Automatic network inspection

API Errors automatically collects failed network requests.

### Removing Personal Data in request URL path

By default, the API Errors feature collects the URL path of the failed API requests. To prevent the collection of Personal Data in the URL path, you can rewrite the request URL path with the `Contentsquare.setURLMaskingPatterns` SDK API.

Replace a step of the path - meaning between two slashes (/) - containing Personal Data with a variable:

- `:user_id` becomes CS_ANONYMIZED_USER_ID
- `:address` becomes CS_ANONYMIZED_ADDRESS

#### Example

```dart
import 'package:contentsquare/contentsquare.dart';

Contentsquare.setURLMaskingPatterns(patterns: [
  'https://www.contentsquare.com/users/:user_id/address/:address',
]);
```

##### Result

| URL before masking                                       | URL after masking                                                                   |
| -------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `https://www.contentsquare.com/users/123/address/castle+black` | `https://www.contentsquare.com/users/CS_ANONYMIZED_USER_ID/address/CS_ANONYMIZED_ADDRESS` |

### Debugging and Logging

If in-app features are enabled, a info log should appear with the details of the event (see [Flutter Debugging and Logging](/en/flutter/in-app-features/#debugging-and-logging) section):

```
CSLIB ℹ️ Info: API Error - GET 401 https://api.client.com
```

### How API Errors works

#### Initialization

Our SDK automatically starts upon application launch and seamlessly captures failed network requests.

#### Configuration

Once started, our SDK fetches its config from our servers.
It will start collecting data from network events if the API Errors setting is enabled in the config (this is handled by the Contentsquare team).

#### Tracking

The SDK monitors only the API Errors with response code 400 and above, and generates analytics data.
These events are then locally stored, and eventually sent to our servers in batches.

:::warning
To ensure that API Errors occurring at app launch are accurately tracked, ensure the session is being tracked (the user is included in tracked users and has not opted out), and a first screenview event has been sent.
:::

:::warning
During the initialization, the SDK overrides the `HttpOverrides.global` property.
Avoid overriding `HttpOverrides.global` in your app. If you have to, see [Use a custom HttpOverrides](#use-a-custom-httpoverrides).
:::

#### Sending data

For each network error, a new event will be sent in Analytics and Session Replay data. Check the following sections to learn more about how data is processed and sent:

- [Analytics requests](/en/flutter/how-the-sdk-works/#sending-data)
- [Session Replay requests](/en/flutter/session-replay/#requests)

### API Troubleshooting Details

API Errors troubleshooting details feature enhances your ability to collect additional information about API errors, facilitating faster troubleshooting.

With this feature, you can view three types of additional API error details in the Event Stream of Session Replay:

- The HTTP headers of the request and the response.
- The body (the data sent by the request or received in the response).
- The query parameters of the request endpoint (of the URL of the information you request for).

<Render file="en/plans/dem"/>

See [API Troubleshooting Details](https://support.contentsquare.com/hc/en-gb/articles/6553281476124) for more details.

### Collected data points

Only network calls in error (response code 400 and above) will be collected.  
Here is the exhaustive list of data collected:

- URL (without query strings)
- HTTP method
- Response code
- Timestamp of the request
- Timestamp of the response
- HTTP headers of the request
- HTTP headers of the response
- HTTP body of the request
- HTTP body of the response
- Query parameters

### Known limitations and recommendations

#### Conflict with Firebase Performance Monitoring

##### Android

Contentsquare Error Analysis is not compatible with Firebase Performance Monitoring auto-collection. Only one of the two will log events, and usually, the events will be automatically logged by the Contentsquare Error Analysis.
To log events to Firebase Performance Monitoring, we suggest [logging it manually](https://rnfirebase.io/perf/usage#http-request-tracing).

##### iOS

Contentsquare Error Analysis is compatible with Firebase Performance auto-collection, but the HTTP body from the response won't be collected by the Error Analysis SDK.

Contentsquare Error Analysis may not be compatible with other network auto-collection tools.

### Use a custom HttpOverrides
Use `ContentsquareHttpOverrides` if you need to override the global `HttpOverrides`.

```dart
import 'dart:io';
import 'package:contentsquare/contentsquare.dart' show ContentsquareHttpOverrides;

class YourCustomHttpOverrides extends HttpOverrides {
  @override
  HttpClient createHttpClient(SecurityContext? context) {
    return super.createHttpClient(context);
  }
}

void main() {
  HttpOverrides.global = ContentsquareHttpOverrides(
    httpOverrides: YourCustomHttpOverrides(),
  );
}
```
:::note
Your custom `HttpOverrides` will function as expected under the normal conditions. The `ContentsquareHttpOverrides` will operate exclusively as a proxy.
:::

:::note
If during the initialization it is observed that another `HttpOverrides` is being used globally and it is not `ContentsquareHttpOverrides`, it will be automatically replaced with `ContentsquareHttpOverrides`, as illustrated in the example.
:::

## Error Reporter

### Handle the Flutter errors

You can collect unhandled errors from the framework by using the [FlutterError.onError](https://api.flutter.dev/flutter/foundation/FlutterError/onError.html) callback. 
However, errors that occur outside of Flutter’s callbacks, such as asynchronous errors, will not be captured. To handle these, consider implementing the [PlatformDispatcher.onError](https://api.flutter.dev/flutter/dart-ui/PlatformDispatcher/onError.html) or [runZonedGuarded](https://api.flutter.dev/flutter/dart-async/runZonedGuarded.html) callbacks.

#### Example
<Tabs>
  <TabItem label="Using PlatformDispatcher.onError">
    ```dart ins={5, 9}
    void main() async {
      WidgetsFlutterBinding.ensureInitialized();
      FlutterError.onError = (FlutterErrorDetails details) {
        // Collects Flutter errors
        Contentsquare().collectFlutterError(details: details);
      };
      WidgetsBinding.instance.platformDispatcher.onError = (exception, stackTrace) {
        // Collects all unhandled errors from the root isolate, including platform-level errors
        Contentsquare().collectError(error: exception, stackTrace: stackTrace);
        return false;
      };
      runApp(MyApp());
    }
    ```
  </TabItem>
  <TabItem label="Using runZonedGuarded">
    ```dart ins={5, 10}
    void main() async {
      runZonedGuarded(() {
        FlutterError.onError = (FlutterErrorDetails details) {
          // Collects Flutter errors
          Contentsquare().collectFlutterError(details: details);
        };
        runApp(MyApp());
      }, (error, stack) {
        // Collects all unhandled errors in the zone
        Contentsquare().collectError(error: error, stackTrace: stack);
      });
    }
    ```
  </TabItem>
</Tabs>

#### Flutter error presentation

Contentsquare automatically [presents](https://api.flutter.dev/flutter/foundation/FlutterError/presentError.html) the Flutter errors. You can disable it by using the optional `presentErrorDetails` parameter in `collectFlutterError` API.

```dart
Contentsquare().collectFlutterError(details: details, presentErrorDetails: false);
```

#### Compatibility with Firebase Crashlytics

Integrating Crashlytics as an additional error reporting solution is straightforward: include the corresponding instruction within each callback.

##### Example with Firebase Crashlytics

```dart ins={3, 6, 10}
void main() async {
    WidgetsFlutterBinding.ensureInitialized();
    await Firebase.initializeApp();
    FlutterError.onError = (FlutterErrorDetails details) {
      Contentsquare().collectFlutterError(details: details, presentErrorDetails: false);
      FirebaseCrashlytics.instance.recordFlutterError(details);
    };
    WidgetsBinding.instance.platformDispatcher.onError = (exception, stackTrace) {
      Contentsquare().collectError(error: exception, stackTrace: stackTrace);
      FirebaseCrashlytics.instance.recordError(exception, stackTrace);
      return false;
    };
    runApp(MyApp());
  }
```

### Validate integration

1. Enable the [in-app features](/en/flutter/in-app-features/#enable-in-app-features).
2. Run your application. You should see a log printed in the console:

```
┌───────────────────────────────────────────────────────────────────────────────
│ ℹ️ INFO ℹ️ (CSLIB)                                                           
├───────────────────────────────────────────────────────────────────────────────
│ Errors Reporter module has started.                                          
└───────────────────────────────────────────────────────────────────────────────
```

#### Validate error reporting

With [in-app features](/en/flutter/in-app-features/#enable-in-app-features) enabled, any errors occurring in your application should generate a log in the console:

```
┌───────────────────────────────────────────────────────────────────────────────
│ ℹ️ INFO ℹ️ (CSLIB)                                                           
├───────────────────────────────────────────────────────────────────────────────
│ Error was collected.                                                          
│ Exception: type 'String' is not a subtype of type 'int' in type cast
└───────────────────────────────────────────────────────────────────────────────
```

### Symbolization and de-obfuscation

:::note
The following step are only needed if you are using the `--split-debug-info` or `--obfuscate` options with the `flutter build` commands 
:::

To be able to read errors from an application built with Flutter obfuscation and/or de-symbolisation, you will need to upload the debug files to Contentsquare.

1. [Enable the `contentsquare_cli` plugin](/en/flutter/contentsquare-cli/#installation)

2. [Run the upload command](/en/flutter/contentsquare-cli/#upload-debug-files-command) 

The upload command must be executed immediately after the Flutter build. 

:::warning[Automating the upload]

As Flutter overwrites debug files for the same platform with each build, if you fail to upload the debug files in time, you won’t be able to read errors from the previous release.

You should run the upload command within your CI/CD pipeline or build script after every release build.
:::

#### Minimum required Flutter version

- Android: 3.10.6
- iOS: 3.13.0

### How Error Reporter works

#### Initialization

Error Reporter is started automatically and begins to collect the reported errors when your application is launched

#### Configuration

Once started, our SDK fetches its configuration from our servers. It will start reporting errors if the Error Reporter setting is enabled (this is handled by the Contentsquare team).

You have to implement an error handler strategy and collect the received errors. See [Flutter errors](/en/flutter/error-analysis/#handle-the-flutter-errors) for examples

#### Reporting

When an error occurs, a report is created and stored locally in the device. The report is sent to our servers as soon as possible and then removed from the local storage.

:::warning
To make sure errors are correctly tracked, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent. See [Track screens](/en/flutter/track-screens) for more details.
:::

#### Sending error data

For each error, a new event will be sent to analytics and Session Replay data when the network conditions allow for the server to be reached.

### Native crashes

Crashes from the native parts of your application can be captured with additional setup.

See 📚 [iOS Crash Reporter](/en/ios/error-analysis/#crash-reporter).

See 📚 [Android Crash Reporter](/en/android/error-analysis/#crash-reporter).

### WebView errors

Errors occurring in web pages loaded in WebViews can be collected if Webview tracking is setup in your app.

See 📚 [Webview Tracking implementation](/en/webview-tracking-web-tag/).

Once WebView tracking is implemented, errors collection can be set up.

See 📚 [Errors (in WebView)](/en/webview-tracking-web-tag/error-analysis/)

---

# Experimental Annotation Documentation

URL: https://docs.contentsquare.com/en/flutter/3-16-2/experimental/

In our continuous effort to enhance the Contentsquare Flutter SDK, there are instances where we develop new features that we want to make available to our customers ahead of their official global release. These features are marked as **experimental** to indicate their status.
## What is the Experimental Annotation?

The `@experimental` annotation is an annotation we apply to certain features within the SDK.  
This annotation indicates that while the feature is accessible for use, it is not yet fully stable and may undergo changes.  
The experimental status allows us to share innovative capabilities with our clients earlier, but it also serves as a caution that the feature is still under evaluation.

:::note
The experimental annotation is not a guarantee that the feature will be included in the SDK stable release.
:::

## Why Do We Use the Experimental Annotation?

Marking an experimental API is crucial for several reasons:

- **API Stability:** Although thoroughly tested internally, the API might still evolve based on customer feedback.
- **Client Needs:** We want to ensure that the feature fully addresses our clients needs before it becomes a permanent part of the SDK.
- **Transparency:** We want to be transparent about the status of the feature and its potential for change.

## What Does It Mean for You?

Adopting an experimental feature means you are using a feature that could be modified or removed at any time, even without a change in the SDK major version number. 
While these features grant early access to new functionality, there are important points to consider:

- **Logs**: When using an experimental feature, you will see a log message indicating that the feature is experimental.
- **Risk of Breaking Changes:** As these features are still under development, they may undergo significant changes without prior notice.

:::note
Experimental warning log might be visible even when SDK is not started. This does not submit any data to remote. It is only information notifying you that an experimental feature is used.
:::

:::note
- **Documentation and Support:** We will provide up-to-date documentation, including examples of how to use the experimental feature.
- **Changelog Updates:** Any introduction of or changes to an experimental feature will be documented in the changelog, ensuring transparency.
:::

## Experimental Feature Lifecycle

Experimental features follow one of three potential paths:

### 1. Positive Outcome

If the feature proves successful and meets client needs, it will graduate from experimental status. The annotation will be removed, and the feature will be integrated into the SDK as a stable component.  
The documentation and the patch note will be updated to reflect this change.

### 2. Negative Outcome

If the feature is determined to be unnecessary or ineffective, it will quickly move toward deprecation. This process involves marking the feature as `@deprecated` in the upcoming release, signaling to clients that the feature will no longer be supported. 
The feature will then be fully removed in the following minor version of the SDK. The documentation will be updated to clearly communicate the deprecation and eventual removal of the feature.

### 3. Work in Progress

If further development is needed, the feature will remain experimental, with ongoing adjustments to its API, behavior, and scope.

## Providing Feedback on Experimental Features

We highly value your input on experimental features, as your feedback plays a crucial role in shaping the final version of these features.  
If you're using an experimental feature, we encourage you to share your experiences, including any issues you encounter, suggestions for improvement, or use cases that the feature supports well.

The most direct way to provide feedback is by submitting a support ticket. When doing so, mention that you are using an experimental feature and provide any relevant details.

---

# How the SDK works

URL: https://docs.contentsquare.com/en/flutter/3-16-2/how-the-sdk-works/

## Initialization
Contentsquare SDK requires the application to be wrapped into a `ContentsquareRoot` widget. After that, the SDK works by automatically launching when the app starts.

## Configuration

Upon initialization, our SDK fetches its configuration from our servers. Depending on the segmentation size defined in your contract, it will start collecting data from system and user events detected during runtime.

## Tracking

The SDK monitors application lifecycle events and the view hierarchy, generating analytics data from app behavior, screen content, and user interaction. These events are stored locally and eventually sent to our servers in batches. We aggregate this data to create actionable visual insights in our Web Application, enabling you to gather insights.

## Sending data

<Tabs>
  <TabItem label="Android">
    Checkout the [Native Android SDK documentation for Sending data](/en/android/how-the-sdk-works/#sending-data)
  </TabItem>
  <TabItem label="iOS">
    Checkout the [Native iOS SDK documentation for Sending data](/en/ios/how-the-sdk-works/#sending-data)
  </TabItem>
</Tabs>

## Session definition
<Render file="en/mobile/how-the-sdk-works/session-definition"/>

---

# In-app features

URL: https://docs.contentsquare.com/en/flutter/3-16-2/in-app-features/

In addition to its tracking functionalities, the SDKs incorporate certain features tailored for Contentsquare users, including **Snapshot Capture** and **SDK Logs**.
## Implement in-app features (iOS Only)

:::note
This implementation phase is required on the iOS side only (on Android, there is nothing to do).
:::

In order to allow Contentsquare users to enable in-app features:

1. [Add the custom URL scheme in your app Info](#1-add-the-custom-url-scheme-in-your-app-info)
1. [Call the SDK when the app is launched via a deeplink](#2-call-the-sdk-when-the-app-is-launched-via-a-deeplink)

### 1. Add the custom URL scheme in your app Info

For in-app features to function, your app needs to be accessible via a custom URL scheme. This can be achieved by implementing **ONE** of the following approaches:

#### Using Xcode

1. Open your project settings
1. Select the app target
1. Select the `Info` settings
1. Scroll to `URL Types`
1. Set the URL scheme to `cs-$(PRODUCT_BUNDLE_IDENTIFIER)`

#### Or using a Text editor

1. Open the `Info.plist` of your project
1. Add the following snippet:

    ```xml title="Info.plist"
    <key>CFBundleURLTypes</key>
    <array>
        <dict>
            <key>CFBundleURLSchemes</key>
            <array>
                <string>cs-$(PRODUCT_BUNDLE_IDENTIFIER)</string>
            </array>
        </dict>
    </array>
    ```

### 2. Call the SDK when the app is launched via a deeplink

In `ios/Runner/AppDelegate.swift`, add a new method to the `AppDelegate` class:

```swift title="ios/Runner/AppDelegate.swift"
import ContentsquareModule

override func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
    Contentsquare.handle(url: url)
    return super.application(app, open: url, options: options)
  }
```

Here is what your `AppDelegate` class should look like after adding the in-app features:

```swift title="ios/Runner/AppDelegate.swift"
import UIKit
import Flutter
import ContentsquareModule

@UIApplicationMain
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }

  // Add this method:
  override func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
      Contentsquare.handle(url: url)
      return super.application(app, open: url, options: options)
  }
}
```

## Enable in-app features

In-app features can be enabled in different ways:

### Scan the QR Code

If you have access to the Contentsquare platform, you can open the in-app features modal from the menu and scan the QR code displayed with your phone. 

Take a look at the native documentation for further information.

### Alternative methods

We provide alternative methods to enable in-app features especially for iOS Simulator and Android Emulator.

<Tabs syncKey="native">
  <TabItem label="Android">
    Follow the [Native Android SDK documentation for Enable in-app features](/en/android/in-app-features/)
  </TabItem>
  <TabItem label="iOS">
    Follow the [Native iOS SDK documentation for Enable in-app features](/en/ios/in-app-features/)
  </TabItem>
</Tabs>

## Debugging and Logging

Contentsquare provides Logging capabilities that allow you to see the raw event data logged by your app. Use this when for validation purposes during the instrumentation phase of development and can help you discover errors and mistakes in your analytics implementation and confirm that all events are being logged correctly.

## Snapshot Capture

In order to unlock the full data-visualization capabilities of Contentsquare, the SDK provides a way to capture snapshots of your app screens. These snapshots can only be taken by Contentsquare's users on their device. They are not captured from your end-users device. It means your Personal Data is safe, as long as you use a test user account.

:::warning
For snapshot capture to work, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

<Tabs>
  <TabItem label="Android">
    Follow the [Native Android SDK documentation for Snapshot Capture](/en/android/4-31-0/in-app-features/#snapshot-capture)
  </TabItem>
  <TabItem label="iOS">
    Follow the [Native iOS SDK documentation for Snapshot Capture](/en/ios/in-app-features/#snapshot-capture)
  </TabItem>
</Tabs>

## Known limitations

- In debug mode, snapshots are not reliable and may differ from those taken in release mode. For accurate and consistent results, use snapshots from release mode.

---

# Getting Started

URL: https://docs.contentsquare.com/en/flutter/3-16-2/

import { CardGrid, LinkCard, RepoCard } from '~/components';
<Render file="en/mobile/getting-started-intro"/>

## Install the SDK

With Flutter CLI:
<Code lang="shell" code={`
flutter pub add contentsquare
`}/>
This will add a line like this to your package's pubspec.yaml (and run an implicit `flutter pub get`):

<Code lang="yaml" title="pubspec.yaml" code={`
  dependencies:
    contentsquare: ^${frontmatter.version}
`}/>

See [Compatibility](compatibility/) for more information.

### Import the SDK

Now in your Dart code, you can use:

<Code lang="dart" code={`
import 'package:contentsquare/contentsquare.dart';
`}/>

### Start the SDK

Wrap the entire application inside the `ContentsquareRoot` widget:

    ```dart title="main.dart" {11-16}
    import 'package:contentsquare/contentsquare.dart';
    import 'package:flutter/material.dart';

    void main() {
      runApp(const MyApp());
    }

    class MyApp extends StatelessWidget {
      @override
      Widget build(BuildContext context) {
        return ContentsquareRoot(
          child: MaterialApp(
            title: 'My Flutter App',
            home: Home()
          ),
        );
      }
    }
    ```

Once you have wrapped your application with the `ContentsquareRoot` widget, it will autostart itself when your application starts. You will be able to access all Contentsquare API using `Contentsquare()`.

:::note
If you want to call [`.optIn()`](/en/flutter/privacy/#opt-in) or [`.optOut()`](/en/flutter/privacy/#opt-out) methods before the app is wrapped with the `ContentsquareRoot` widget and the `build` method is called, call the `.start()` first.
:::

### Validate SDK integration

<Render file="en/mobile/getting-started-validate-sdk-integration" params={{
  version: frontmatter.version,
  platform: frontmatter.category
}}/>

## Check the logs

<Render file="en/mobile/getting-started-check-the-logs"
  params={{tools: "Android Studio, Xcode"}}
/>

### Viewing local logs in IDE

<Tabs>
  <TabItem label="Android Studio">
    To view SDK logs:

    1. Plug your Android phone into your computer (or use an emulator)
    1. Open Android Studio and start your app
    1. Open the `Logcat` view and select your phone or emulator
    1. Filter logs by `CSLIB`

    ![](~/assets/android/logs-android.png)
  </TabItem>
  <TabItem label="Xcode">
    1. Unless you are using a simulator, ensure the device you are using is connected to your Mac or is on the same Wi-Fi network.
    1. Open the macOS Console app or Xcode.  

    For the macOS Console app, make sure info messages are included at [Choose Action > Include Info Messages](https://support.apple.com/guide/console/customize-the-log-window-cnsl35710/mac).
    1. Filter logs by `CSLIB`.

    ![](~/assets/ios/logs-ios.png)
  </TabItem>
</Tabs>

### Enable In-app features

<Render file="en/mobile/getting-started-in-app-features"/>

To enable in-app features within your app, you have to **first make sure your app is launched in the background**. Then, follow the appropriate method described as follows.

#### On a device: scan the QR code

<Render file="en/mobile/getting-started-scan-qr-code" params={{
  platform: frontmatter.category
}}/>

#### On an emulator/simulator

<Tabs syncKey="native">
  <TabItem label="Android">

    In Contentsquare, select the Mobile icon in the menu top bar then select your application ID, and "Copy this ADB command".

    ![](~/assets/android/log-visualizer-access-adb.png)
  </TabItem>
  <TabItem label="iOS">

    In Contentsquare, select the Mobile icon in the menu top bar then select your Bundle ID, and select "Copy this link". Paste it in Safari on your simulator to trigger the in-app features.

    ![](~/assets/ios/log-visualizer-access-custom-link.png)
  </TabItem>
</Tabs>

### Contentsquare Log Visualizer

<Render file="en/mobile/getting-started-log-visualizer" params={{
  platform: frontmatter.category
}}/>

## Get user consent

<Render file="en/mobile/getting-started-get-user-consent"/> 

:::warning
You are responsible for handling the UI asking users for their consent and allowing them to manage their privacy settings.
:::

The SDK will consider **every new user to be opted-out by default.** 
To start tracking, the SDK Opt-in API must be called.

### User opt-in

Forward user consent with `optIn()`. Calling this method generates a user ID and initiates tracking.

```dart {16-17} title="opt_in_page.dart" wrap
import 'package:contentsquare/contentsquare.dart';
import 'package:flutter/material.dart';

class OptInPage extends StatelessWidget {
  const OptInPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Optin Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // This need to be only called once per installation, or if user opt-out
            Contentsquare().optIn();
            Navigator.of(context).push(
              MaterialPageRoute(
                builder: (context) => const HomePage(),
              ),
            );
          },
          child: const Text(
            'Press to opt-in to Contentsquare',
          ),
        ),
      ),
    );
  }
}
```

:::note[Going further]
For advanced configuration regarding user consent or personal data handling, see [Privacy](/en/flutter/privacy/).
:::

## Track your first screens

<Render file="en/mobile/getting-started-track-first-screens"/>

### Sending screenview events

Screen tracking is achieved by sending a `screenview` each time a screen is displayed on the user's device.

:::warning[Important]
Sending at least one screen event is required to start tracking.
:::

```dart {13} title="home.dart"
import 'package:contentsquare/contentsquare.dart';
import 'package:flutter/material.dart';

class Home extends StatefulWidget {
  @override
  _HomeState createState() => _HomeState();
}
class _HomeState extends State<Home> {

  @override
  void initState() {
    super.initState();
    Contentsquare().send('Home'); 
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Home'),
      ),
      body: const Center(
        child: Text('Welcome to Contentsquare!'),
      ),
    );
  }
}
```

### Implementation recommendations

For more detailed information on how to track screens, refer to the complete [screen tracking](/en/flutter/track-screens/) guide.

## Test your setup

<Render file="en/mobile/getting-started-test-setup" params={{
  tools: "Android Studio, Xcode, or Log Visualizer",
}}/>

### Visualize events in Contentsquare

<Render file="en/mobile/getting-started-visualize-events"
params={{
  platform: frontmatter.category
}}/>

### Visualize data in Contentsquare

<Render file="en/mobile/getting-started-visualize-data"/>

## Next Steps

<Render file="en/mobile/getting-started-next-steps"/>

<CardGrid>
  <LinkCard
    title="Custom Variables"
    description="Collect additional details about the screen or the user."
    href="/en/flutter/track-custom-variables/"
  />
  <LinkCard
    title="Dynamic Variables"
    description="Collect additional information about the session."
    href="/en/flutter/track-dynamic-variables/"
  />
  <LinkCard
    title="Transactions tracking"
    description="Associate user’s session with their potential purchases and corresponding revenue."
    href="/en/flutter/track-transactions/"
  />
  <LinkCard
    title="WebViews"
    description="For native apps which embark web applications or pages."
    href="/en/flutter/track-webviews/"
  />
  <LinkCard
    title="Session Replay"
    description="Collect data for Session Replay in compliance personal data masking."
    href="/en/flutter/session-replay/"
  />
  <LinkCard
    title="Error Analysis"
    description="Track API errors and application crashes with automated collection and privacy-safe debugging tools."
    href="/en/flutter/error-analysis/"
  />
</CardGrid>

---

# Manual SDK Start

URL: https://docs.contentsquare.com/en/flutter/3-16-2/manual-sdk-start/

In certain situations, you may want to have full control over when the SDK is initialized. 
The `manual SDK start` feature allows you to initiate the SDK at any point in your application's lifecycle.
On this page you will find the steps to control manual start of the Contentsquare Flutter SDK.

## Disabling Automatic SDK Initialization

To manage SDK start manually, you need to disable automatic initialization on the platform's native side.
For this you need to modify the `AndroidManifest.xml` file of your Android project as well as the `Info.plist` file of your iOS project.

<Tabs syncKey="native">
  <TabItem label="Android">
    Add the `com.contentsquare.android.autostart` flag to `false` in your `AndroidManifest.xml` file.

    ```xml title="AndroidManifest.xml" {5}
    <application>
      ...
        <meta-data
          android:name="com.contentsquare.android.autostart"
          android:value="false"
        />
      ...
    </application>
    ```
  </TabItem>
  <TabItem label="iOS">
    Add the `CSDisableAutostart` key to your `Info.plist`. Set it to `true` to disable the autostart.
    ```xml title="Info.plist"
    <key>CSDisableAutostart</key>
    <true/>
    ```
  </TabItem>
</Tabs>

## Manual SDK start

You can control the SDK initialization from your Flutter app code by calling the `start` method of the `Contentsquare` class.

```dart {11, 13, 14, 15}
class UserConsentScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('User Consent'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            await Contentsquare().start();

            // Depending on the project configuration in `CS Digital`
            // you might need to call `optIn`
            // await Contentsquare().optIn();
          },
          child: Text('Agree with Terms and Conditions'),
        ),
      ),
    );
  }
}
```

After the `start` is called the SDK will be initialized and [the config will be fetched](/en/flutter/how-the-sdk-works/#configuration).
Validate the SDK integration by following the [validation steps](/en/flutter/#validate-sdk-integration).

:::note
Only the first call to `start` will initialize the SDK. Subsequent calls will be ignored.
:::

### Start method arguments

#### MaskingConfig

`MaskingConfig` allows you to set the default `MaskingConfig` for your entire application. For more dynamic and localized masking, refer to the `Session Replay` [masking documentation](/en/flutter/session-replay/#personal-data-masking).

```dart
void _startContentsquare() async {
  final maskingConfig = MaskingConfig(
    maskTexts: true,
    maskImages: false,
  );

  await Contentsquare().start(maskingConfig: maskingConfig);
}
```

---

# Privacy

URL: https://docs.contentsquare.com/en/flutter/3-16-2/privacy/

The Contentsquare Flutter Bridge and SDKs are compliant with the Play Store and App Store Privacy guidelines as well as with the EU General Data Protection Regulation (GDPR).
Refer to our [Privacy Center](https://contentsquare.com/privacy-center/) and [Privacy Policy](https://contentsquare.com/privacy-center/privacy-policy/) for further information.

## Handling User Consent

While Contentsquare only collects usage data on your app, we will treat every new user as opted-out by default. To start tracking, the Opt-in API must be called.

:::note
If, for any reason, you believe that securing user consent may not be necessary for your app, address this concern during the implementation process with your main contact.
:::

## Opt-in

Use the Opt-in API to get user consent. Calling this API will generate a user ID and initiate tracking.

```dart
Contentsquare().optIn();
```

:::note
If you want to call `.optIn()` before the app is wrapped with the `ContentsquareRoot` widget and the `build` method is called, call the `.start()` first.
:::

## Opt-Out

Permanently breaking the link and stopping all data collection.

When this API is called, tracking stops immediately, all settings are reset (session number, page number, user ID...) and all files related to Contentsquare tracking are deleted. Contentsquare will never track and collect any data from the user's phone unless the Opt-in API is called again.

```dart
Contentsquare().optOut();
```

:::note
If you want to call `.optOut()` before the app is wrapped with the `ContentsquareRoot` widget and the `build` method is called, call the `.start()` first.
:::

## Forget me

:::warning[Deprecated]
This API is deprecated as of plugin version 3.8.0. To achieve the same effect use Opt-out API to delete all files and settings including the user ID, and call Opt-in API on next app launch if tracking needs to resume. 
:::

```dart
Contentsquare().forgetMe();
```

## Give me my data

We allow the client to provide to their users their Contentsquare user ID.

This ID is a non binding identifier which can be used to make a data request to Contentsquare. You are able to get an ID only if the user has not Opted-out.

```dart
final userId = await Contentsquare().getUserId();
```

## Stop / Resume Tracking

Although we do not gather any humanly readable text from the user's screens, we understand that there may be some areas that you want to completely exclude from tracking. For this reason, we also support stopping and resuming the complete tracking mechanism. 

Tracking will automatically resume if the app is killed and restarted.

```dart
Contentsquare().stopTracking();

Contentsquare().resumeTracking();
```

---

# Reliable Targets

URL: https://docs.contentsquare.com/en/flutter/3-16-2/reliable-targets/

Contentsquare SDK uses zoning identifiers that relies heavily on the structure of the widget tree. Consequently, changes to the widget tree, such as moving, nesting, or removing a widget, may result in the loss of tracking data.
For instance, consider the widget tree of a Flutter app as illustrated below:

```dart  {11} title="main.dart"
Widget _buildMyAwesomeContent() {
  return Column(
    children: const [
      Text('Answer to the Ultimate Question of Life, The Universe, and Everything'),
      Text('is'),
      Text('42'),
    ],
  );
}
```

In many cases, maintaining a `Reliable Target`, despite changes in its position within the tree, is essential. 
This consistency ensures reliable analysis of data across different `Snapshots`, dates, and versions, including variations in layouts or A/B testing.

Having a `Reliable Target` for a widget enables the analysis of data across various `Snapshots` from different dates and versions, including layouts or different A/B testing variations.

Here are some scenarios where the Reliable Targets feature proves beneficial:

- Tracking elements capable of dynamically shifting on a page (example: customizable profile page).
- Monitoring elements across various app versions, even if their positions change (example: carousel transitioning from top to bottom).
- Tracking elements amidst A/B testing (example: testing old and new product pages within the same version).
- Monitoring elements used across multiple pages (example: search bar).
- Ensuring a unique identifier for a call to action regardless of its location on the screen (example: "Add to Cart" button).

To facilitate this, the `Contentsquare` Flutter SDK offers a `ReliableTarget` widget, designed to encapsulate the widget intended for reliable tracking.

The `ReliableTarget` widget requires a mandatory `name` argument for identifying the component to track. Below is an example of implementing it with the provided code:

```dart {3} title="main.dart"
Widget _buildMyAwesomeContent() {
  return ReliableTarget(
    name: '42_is_the_answer',
    child: Column(
      children: const [
        Text('Answer to the Ultimate Question of Life, The Universe, and Everything'),
        Text('is'),
        Text('42'),
      ],
    ),
  );
}
```

:::warning[Limitations]
- `name` MUST be unique
- `name` should NOT be empty
- `name` for the same `ReliableTarget` must be the same across different versions of the app
:::

---

# Security

URL: https://docs.contentsquare.com/en/flutter/3-16-2/security/

## Transmission and hosting
Our server side uses HTTPS to make sure that data is encrypted in transport.

Our hosting solution is a PCI DSS Level 1 Service Provider.

## What is not collected

- Passwords from password fields
- Geo location information
- Information from contacts, emails, or any other user identifiable information.
- Text from labels, buttons, and any other widget which contains text
- Accessibility information from any widget which the user interacts with
- Labels printed on the screen of any kind.

---

# Session Replay

URL: https://docs.contentsquare.com/en/flutter/3-16-2/session-replay/

import iossrenable from '~/assets/sdk-images/img-sr/ios-enable-sr-2.gif'
## Prerequisites

### Screen tracking implemented

As **session collection initiate upon the 1st screenview event**, it's essential to have screen tracking implemented. Make sure to follow the [Flutter Track screens](/en/flutter/track-screens/) section.

### Updating to latest SDK version

To enable Session Replay in your application and ensure optimal stability, make sure to always use the last SDK version.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time, or if you choose to take this update as an opportunity to review your privacy-related implementation, ensure that you follow the [Flutter Privacy](/en/flutter/privacy/) section and use the [Opt-in API](/en/flutter/privacy/#opt-in) to get the user consent, otherwise no data will be collected.

## WebView

WebView events can be collected as part Session Replay under the following conditions:

 - The web page implements the Web Tracking Tag.
 - Your webview is wrapped with the `ContentsquareWebViewTrackerBuilder` widget
 - Your webview allows JavaScript execution
 - The `ContentsquareWebViewTracker` methods are registered in the webview 
 
 For the full guide to implementation of Webview Tracking, see 📚 [Mobile Apps Webview Tracking](/en/webview-tracking-web-tag/).

:::note
WebView personal data masking is entirely handled on the web side — see 📚 [Personal Data handling in WebView](/en/webview-tracking-web-tag/session-replay/#personal-data-handling).
:::

## Testing and Debugging

### Enable Session Replay on your device

Since not all sessions are collected (depending on the percentage set in the Contentsquare back office), we have implemented an option to force replay collection on your device for testing and debugging purposes.
This option can be enabled from the in-app features settings:
1. [Enable in-app features](/en/flutter/in-app-features/)
1. Open in-app features settings with a long press on the snapshot button
1. Under "Session Replay", toggle "Enable Session Replay" on
1. Kill the app
1. Upon restarting the app, a new session will start with Session Replay enabled.

#### iOS example

    <img src={iossrenable.src} />

#### How do I know if Session Replay is enabled?

There are 2 places where you can verify if Session Replay is enabled:

**In the logs:** The log `Session Recording is starting` will confirm that Session Replay is enabled.

**In in-app features settings:** Below the "Enable "will start at next app start" *(see below [Access the replay](#access-the-replay))*, you will either see:
- `No replay link available` which means Session Replay is not running for the current session
- `Get Replay link` which means Session Replay is running for the current session

### Access the Replay

The session can be accessed by tapping on `Get replay link` button from the in-app features settings:

![](~/assets/sdk-images/img-sr/ios-get-replay-link.gif)

The replay will be **available within 5 minutes**. Only the *concluded* screen views are processed, and we identify a screenview has *concluded* when we begin receiving data for the subsequent screenview or if the session has ended. This means that you will be able to replay your session up to the previous screenview if the session is still ongoing.

#### Get the replay link programmatically

The `onSessionReplayLinkChange` method is designed to provide a mechanism for tracking changes to the Session Replay URL in real-time. 

##### Function signature

```dart
void onSessionReplayLinkChange(void Function(Uri url)? onLinkChanged);
```
##### Parameters

`onLinkChanged (void Function(Uri url)?)`: A callback function that receives the updated Session Replay URL. This parameter is nullable.

##### Key Features:

- Real-Time Updates: The callback is triggered every time there is a change in the Session Replay URL. It is also triggered when the callback is first registered, providing the current Session Replay URL.

- Single Callback Registration: Only one callback can be active at a time. If the API is called multiple times, the most recent callback registration overrides the previous one.

- Optional Callback: The `onLinkChanged` argument is nullable, allowing the API to be used to stop listening to URL changes.

##### Usage 

##### Registering a Callback
To start listening to changes: 

```dart
Contentsquare().onSessionReplayLinkChange((Uri url) {
  /// Handle the updated Session Replay URL
  print('Session Replay URL: $url');
});
```
:::note
- Upon registering the callback, if a Session Replay URL is already available, the callback will be triggered immediately.
- If there is no Session Replay URL available, the callback will not be triggered until a URL becomes available. 
- Once registered, the callback will be triggered each time the Session Replay URL changes.
:::

##### Stopping the Listener 

To stop listening to changes:

```dart
Contentsquare().onSessionReplayLinkChange(null);
```

## Personal Data Masking

The Session Replay feature collects every user interaction within your app. In order to respect the user’s right to privacy, the Contentsquare SDK:
- Masks potentially user sensitive data by default (see [Default masking](#default-masking))
- Provides APIs for controlling which parts of the user interface are collected through masking and unmasking functionalities.

### Masking mechanisms

Masking depends on the type of element:
 - **Images**: Not collected, instead a placeholder is sent in place of the content, and the "IMG" placeholder is displayed within the element's frame.
 - **SVG images**: Not collected, instead a placeholder is sent in place of the content, and the "IMG" placeholder is displayed within the element's frame.
 - **CustomPaint**: custom-made `CustomPaint` are not collected, instead a placeholder is sent in place of the content, and the "IMG" placeholder is displayed within the element's frame. [Framework specific decorative `CustomPaint`](#unmaskable-framework-specific-custompaint-classes) not containing any sensitive data are collected.
 - **Text**: Replaced by "la" repeated as many times as needed to equal the original character count. White characters are preserved. For instance `the lazy fox` is collected as `lal lala ala`. All other visual properties are collected (text color, background color, alignment, etc.).
 - **TextFields**: Same as Text
 - **Other types**: no specific data is collected but visual properties are collected.
 - **Icons**: Single characters belonging to the Private Use Area	` U+E000..U+F8FF ` are collected.

If you believe a particular element might disclose personal data through any of these properties, you must mask it using one of the methods outlined below. A reliable method to assess how a view is rendered in a replay is to navigate to the desired view with the CS SDK active, then use the [quick replay link](#access-the-replay).

#### Masking example

Here's an illustration of a masked view:

`Original` -> `Replay fully unmasked` -> `Replay fully masked`

![](~/assets/sdk-images/img-sr/flutter-sr-masking-example_from_3_14.png)

### Masking rules priority

The masking configuration can be set up in two ways:

- Through [remote masking configuration in the CSQ Console](#remote-masking-configuration)
- Using the plugin's [public masking APIs](#public-masking-apis)

When using `SessionReplayMaskingScope` and `MaskingConfig`, it's essential to understand the priority of masking rules in the widget tree. The masking rules specified in a `SessionReplayMaskingScope` widget will affect its descendants, and if nested scopes are used, the innermost (closest) scope takes precedence.

Once a rule is triggered, the state is set, and subsequent rules are not applied:
| Priority | Rule | Configured via |
| -------- | -------- | -------- |
| 1 | The app or plugin version is [fully masked](#full-masking) | CSQ Console
| 2 | The `MaskingConfig` object provided to a `SessionReplayMaskingScope` widget sets the masking rules for its child and descendants. | API
| 3 | The `MaskingConfig` object provided to the `ContentsquareRoot` or to the `SessionReplayMaskingScope` widget wrapping the app sets the masking rules for the entire app. | API
| 4 | If using [manual SDK start](/en/flutter/manual-sdk-start/) The `MaskingConfig` object provided to the `start()` method sets the masking rules for the entire app. | API
| 5 | Otherwise the widget remains masked except for `CustomPaints`and `SvgImages` | default

### Masking rules

#### Remote masking configuration

##### Full Masking

In the event of a personal data leak, the full masking configuration in the Console enables a swift and comprehensive masking of the specified application version(s). This ensures that all maskable elements across all screens of these version(s) are completely masked.

This configuration can be accessed through the “Data Masking” tab in the Console and is supported only on CS Flutter plugin version 3.16.0 and later.

It provides three configuration capabilities:

- A toggle to “Mask all eligible versions,” enabling the masking of all app versions embedding the CS Flutter plugin version 3.16.0 or later.
- An “App version” field to mask specific app version(s)
- A “CS SDK version” field to mask the app version(s) embedding the specified plugin version(s)

:::note
The full masking configuration applied through the Console is equivalent to `MaskingConfig.maskAll()` applied to the entire application.
:::

#### Public Masking APIs
##### Default masking

By default all images, text and Text fields will be masked. SVGs and CustomPaints are not masked.

##### Masking/Un-masking in Flutter

`SessionReplayMaskingScope` is a Flutter widget that applies specified masking rules to its descendant widgets. This can be used when you want to mask sensitive information during Session Replays, such as user data or private texts.

`MaskingConfig` is a class that determines what type of content should be masked during Session Replays. You can customize the masking behavior by setting the masking options for texts, text fields, and images.

##### How to use SessionReplayMaskingScope

To use `SessionReplayMaskingScope`, wrap the desired widget(s) with the `SessionReplayMaskingScope` widget and provide a `MaskingConfig` object to configure the masking rules.

Here's an example of how to use `SessionReplayMaskingScope`:

```dart
SessionReplayMaskingScope(
  maskingConfig: MaskingConfig.maskAll(),
  child: const Text('Hello world'),
);
```

In this example, `MaskingConfig.maskAll()` is used to mask the `Text` widget.

You can also use nested `SessionReplayMaskingScope` widgets to apply different masking rules to different parts of your widget tree. Here's an example:

```dart
SessionReplayMaskingScope(
  maskingConfig: MaskingConfig.maskAll(),
  child: Column(
    children: [
      const Text('This text will be masked'),
      SessionReplayMaskingScope(
        maskingConfig: MaskingConfig(maskTexts: false),
        child: Text('This text will NOT be masked'),
      ),
    ],
  ),
);
```

In this example, the first `Text` widget will be masked, while the second one will not be masked due to the `maskTexts: false` option in the nested `SessionReplayMaskingScope`.

##### How to use MaskingConfig

`MaskingConfig` allows you to configure the masking behavior for different types of content:

- `maskTexts`: If set to `true`, any widget that creates a `RenderParagraph` (example: `Text`, `RichText`) will be masked.
- `maskTextFields`: If set to `true`, any widget that creates a `RenderEditable` (example: `TextFormField`, `TextField`) will be masked.
- `maskImages`: If set to `true`, any widget that creates an image (example: `Image`, `BoxDecoration.image`) will be masked.
- `maskSvgImages`: If set to `true`, any widget that creates an SVG image through `flutter_svg` will be masked.
- `maskCustomPaints`: If set to `true`, any custom-made widget that creates a `CustomPaint` will be masked. [Framework specific decorative `CustomPaint`](#unmaskable-framework-specific-custompaint-classes) not containing any sensitive data are not masked.

You can create a custom `MaskingConfig` object by using the constructor:

```dart
const MaskingConfig({
  bool maskTexts,
  bool maskImages,
  bool maskTextFields,
  bool maskSvgImages,
  bool maskCustomPaints,
})
```

For easier readability and convenience, you can use the following factory constructors:

- `MaskingConfig.maskAll()`: Returns a `MaskingConfig` object with all values set to `true`, meaning everything will be masked.
- `MaskingConfig.unMaskAll()`: Returns a `MaskingConfig` object with all values set to `false`, meaning nothing will be masked.

If any masking parameter is omitted in the `MaskingConfig` object, its value is inherited from the nearest `SessionMaskingScope` widget in the widget tree.

:::note
By default, the `ContentsquareRoot` widget masks all types of content (texts, text fields, and images) except the SVG images and CustomPaints during Session Replays. It achieves this by providing a default `MaskingConfig` object if none is specified. The default configuration masks everything, ensuring that sensitive information is protected.
However, you can override the default masking behavior by providing your own `MaskingConfig` object when creating a `ContentsquareRoot` widget. This allows you to customize the masking rules for your app according to your requirements.
:::

:::note
If you did not include any sensitive content in `CustomPaint`s or SVG images, prefer to use `MaskingConfig` with `maskCustomPaints` and `maskSvgImages` set to false, to avoid unnecessary masking and guarantee the best Session Replay fidelity.
:::

:::note
If you are using [manual SDK start](/en/flutter/manual-sdk-start/), you can set the default `MaskingConfig` for the entire app by providing a `MaskingConfig` object to the `start` method.
```dart
final maskingConfig = MaskingConfig(maskTexts: false);
await Contentsquare().start(maskingConfig: maskingConfig);
```
:::

## Advanced features for Experience Monitoring

<Render file="en/plans/dem"/>

### Send user identifier

Contentsquare provides the ability to search for session(s) associated with a specific visitor, based on an identifier: email, phone number, customer ID…
As these values are typically personal data, from the moment the SDK is collecting the `User Identifier`, we immediately encode the value using a hashing algorithm so that the information is hidden and can never be accessed.

Use the following code to send a user identifier:

```dart
Contentsquare().sendUserIdentifier('the_neo@one.com');
```

When called, the native SDK will log:

```
CSLIB ℹ️ Info: User identifier hashed sent {value}
```

### Sending a user identifier for each session

You may consider sending the user identifier for each session. Although triggering the user identifier at app launch will cover most cases, it may not be adequate in all scenarios. For instance, a session might start when the app is brought to the foreground after being in the background for more than 30 minutes. For further details, refer to the [Session definition](/en/ios/how-the-sdk-works/#session-definition) section.
That is why we also recommend sending the user identifier every time the app enters foreground.

### Limitations

- User identifier max length is 100 characters (if the limit is exceeded, the user identifier will not be handled and you will see an error message in the native Console/Logcat)
- Only the first 15 user identifiers per view will be processed on server side
- The SDK will trim and lowercase user identifier
- User identifier event are not visible in `LogVisualizer`

## Session Replay Quality

### Quality Levels

Session Replay is designed by reconstructing the app's tree structure from selected frames. To minimize performance impact during a session, different quality levels are dynamically applied. Each quality level determines whether certain styles are preserved or omitted while maintaining the overall screen structure and appearance.

#### High Quality Level
![](~/assets/flutter/hq_sr.jpg)

At this level, all supported styles are captured every 200ms, provided a new frame is available. This ensures a comprehensive reproduction of the session's visual fidelity.

#### Low Quality Level
This level captures supported styles only when user interaction ceases, such as during screen scrolling. images are reduced to their average color representation.

### Quality Level Adjustment

Our plugin continuously monitors its performance while running. Upon detecting a performance issue, the quality level is automatically reduced to mitigate any potential impact on the application. The quality level may increase when navigating to a new screen, provided the performance issue is resolved.

Quality levels are visibly indicated in the Session Player event stream.
![](~/assets/flutter/quality_change_sr.png)

## How Session Replay works

### Initialization

Sessions can be collected for Session Replay if the Session Replay feature has been enabled for your project and the session matches the collection criteria.

The following conditions will have an impact on which sessions will be collected:

- **User consent**: The users have provided their **consent** (if required)
- **Collection rate**: The session is **designated for collection** (see [Collection Rate](#collection-rate))
- **Compatibility**: The **OS version** is supported.
- **App version**: The **app version** is not included in the block list (see [App Version Block List](#app-version-block-list))

:::note
When Session Replay is disabled, no content specific to Session Replay is collected. Additionally, be aware that standard Contentsquare analytics tracking remains unaffected by this.
:::

#### Collection Rate

Session Replay collection is based on a percentage of the total sessions. By default Session Replay collection is disabled.

During the early access phase, the percentage of collected sessions will be set to 1% at the beginning. It will then be adjusted based on:
- The traffic on your app
- The volume of collected sessions set in the contract

#### Compatibility

See the [Compatibility matrix](/en/flutter/compatibility/#compatibility-matrix).

#### App Version Block List

The Contentsquare team can include versions of your app in the block list to prevent Session Replay from initiating on these versions. This functionality proves valuable when a problem is identified on a particular version of your app, such as a situation where masking for Personal Data was not implemented. By employing this feature, Session Replay can continue to operate on other app versions, particularly those with necessary fixes implemented.

### Collection

The SDK monitors the application lifecycle events and the view hierarchy, capturing Session Replay data based on app behavior, screen content, and user interaction. These events are initially stored locally and later sent to our servers in batches. Subsequently, we aggregate this data to generate actionable visual insights in our Web Application, facilitating your ability to gather insights.

:::tip
Session collection begins when the first screenview event is triggered.
:::

### Network and Storage

By default, Session Replay data can be sent over **cellular network**. However, if your app's context or user preferences necessitate minimal impact on cellular data usage, you can opt to disable data transmission over cellular networks entirely. Once disabled, data will only be sent when the device is connected to Wi-Fi.

To make this adjustment in your project's configuration, contact your Contentsquare representative.

#### Storage

Before being sent, data is stored in local files on disk up to 30MB on iOS and 20MB on Android.
If the limit is reached, Session Replay is halted. It will resume at the next app launch once the SDK can transmit the data.

### Requests

The maximum request size is 1 MByte.

#### iOS

Requests are sent:
- Every 10 seconds
- At app hide
- When [Replay Link API](#access-the-replay) is called

#### Android

Requests are sent:
- On screen change
- When [Replay Link API](#access-the-replay) is called

## Performance impact

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well. These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.

### Performance impact mitigation

Most operations related to Session Collection are performed on background threads, for the impact on the main thread to be minimal.

We also set up mechanisms that adapts and stop the Session Collection if we detect the feature is using too much memory.

We defined our network strategy to have the lesser impact on CPU and battery of the users devices. We measure these impacts, using Apple Dev Tools, for each release of our SDK.

Session Collection will also stop if we use up to 30Mbytes of local storage.

### Performance Benchmarks
We have conducted performance tests on the SDK to ensure that it has a minimal impact on the app's performance. The tests were conducted on a variety of devices and operating systems to ensure that the SDK performs well across different platforms. These tests use the [Flutter Gallery](https://github.com/flutter/gallery) app as a reference and simulate an intensive normal user interaction with the app during 60 seconds (scrolling, tapping, etc.) using the Session Replay feature.

#### iOS
For iPhone 14 with iOS 16.3

| Metric | Value |
| --- | --- |
| CPU Usage Delta | < 3% |
| Memory Usage Delta | < 2% |
| Network Usage | < 80kb |

#### Android
For Pixel 6 with Android 13

| Metric | Value |
| --- | --- |
| CPU Usage Delta | < 25% |
| Memory Usage Delta | < 20% |
| Network Usage | < 80kb |

## Known limitations

- Images set by `Ink.image` are not currently supported.
- Custom shapes are sent as rectangles.
- Blur style is not supported when the app is [obfuscated](https://docs.flutter.dev/deployment/obfuscate).
- In the event stream of the Session Replay, a tapped element is displayed as `unknown` if it has a transparent parent.
- In debug mode, the stability and performance of the Session Replay feature are not guaranteed. Moreover, hot restart and hot reload may introduce unexpected issues. For a reliable and high-performing Session Replay experience, use release or profile builds.
- Masking applied to parent widgets does not apply to the [Draggable.feedback](https://api.flutter.dev/flutter/widgets/Draggable/feedback.html) widget. To ensure proper masking while dragging, wrap the Draggable.feedback widget within its own SessionReplayMaskingScope.

## Unmaskable Framework specific `CustomPaint` classes

- CupertinoActivityIndicator
- CupertinoTextSelectionToolbar
- BottomNavigationBar
- DatePickerDialog
- DropdownButton
- InputDecorator
- PhysicalShape
- LinearProgressIndicator
- CircularProgressIndicator
- Stepper
- TabBar
- TextSelectionToolbar
- AnimatedIcon
- GridPaper
- GlowingOverscrollIndicator
- Placeholder

---

# Track custom variables

URL: https://docs.contentsquare.com/en/flutter/3-16-2/track-custom-variables/

## Usage
Custom variables provide additional information about the page, user, or session, which is sent along with screenviews.

For example, they can contain details about the current layout of a screen, such as day/night mode.

## Limits

### On the server side

- A maximum of 20 distinct custom variables per screenview can be stored. If more are received, only the first 20 custom variables, based on their `index` value, will be retained.
- The `index` value of the custom variable determines which ones will be retained. Only index values from 1 to 20 (inclusive) will be considered.

### On the SDK side

- Every custom variable is composed of `index`, `name` and `value`. 
- If the same `index` is used twice in the same screen, only the first (`name`, `value`) pair associated with the `index` will be kept.
- A maximum of 20 custom variables can be stored on the same screenview.
- If the maximum character length is reached for `name` (512 characters) or `value` (255 characters), the SDK will automatically truncate the additional characters automatically.
- If `name` or `value` are empty, the SDK will instead send the literal string `"cs-empty"`.
- Maintain a consistent index for a given custom variable throughout the application. For example, if the "screen layout" is collected with an `index` of 3, use the slot 3 for this information on every screen of the application.

## Defining custom variables

To define and send custom variables, follow this implementation:

```dart
import 'package:contentsquare/contentsquare.dart';

final customVar1 = CustomVar(
  index: 1,
  name: 'customName_1',
  value: 'customValue_1',
);

final customVar2 = CustomVar(
  index: 2,
  name: 'customName_2',
  value: 'customValue_2',
);

Contentsquare().send(
  'myAwesomeScreenName',
  customVars: [customVar1, customVar2],
);
```

<Aside type="warning">
  For consistent analytics, use the same index/name pair values across your application:

  ```dart "carousel" title="Screen A"
  const cVar4: CustomVar = {
    index: 4,
    key: 'hero_banner_type',
    value: 'carousel',
  };

  Contentsquare.send('ScreenA', [cVar4]);
  ```

  ```dart "slider" title="Screen B"
  const cVar4: CustomVar = {
    index: 4,
    key: 'hero_banner_type',
    value: 'slider',
  };
  
  Contentsquare.send('ScreenB', [cVar4]);
  ```
</Aside>

---

# Track dynamic variables

URL: https://docs.contentsquare.com/en/flutter/3-16-2/track-dynamic-variables/

## Usage
Dynamic variables are additional information on the session that can be used to segment sessions.

For example, they can include information on the A/B Test variations displayed to the current user.

## Limits

### On the server side

- It is possible to save up to 40 distinct dynamic variable keys per screen view. If more are received, only the first 40 keys will be kept.
- If you are using the same key twice, the last value associated with the key will be collected.

### On the SDK side

- Every dynamic variable is composed of a pair of key (max. 50 characters) and value (max. 255 characters string or number of type Long between 0 and 2<sup>32</sup> - 1). In case these maximums length are reached, the SDK will automatically trim the exceeding characters.
- If key or value are empty, the SDK will instead send the literal string "cs-empty".

## Defining dynamic variables

To define and send a dynamic variable, you just need to use the following API. For each dynamic variable, we send:

- `key` (`String`, required)
- `stringValue` (`String`, optional)
- `intValue` (`int`, optional)

Note that exactly one of `stringValue` or `intValue` should be used at the same time.

Also, in order for you to be able to handle such errors happening when we try to send the dynamic variable, you should wrap your call in a try/catch as explained in the Usage part.

```dart
Contentsquare().sendDynamicVar('my key 1', stringValue: 'testValue');

Contentsquare().sendDynamicVar('my key 1', intValue: 12);
```

Type of the value — The value can be either a number or a string. For each case, available features won't be the same in the Contentsquare app:

- For `int`, you will be able to do some algebra. Example: sessions with dynamic variable key = "numberOfFriends" and value >= 10
- For `String`, auto-completion and Regular Expression will be available. Example: sessions with dynamic variable key = "accountType" and value is "Premium"

## Sending a dynamic variable for each session

You may want to send a dynamic variable for each session (like the user's country or store). While **triggering the dynamic variable at app launch will cover most cases, it will not be enough**. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See [Session definition](/en/flutter/how-the-sdk-works/#session-definition) section for more information.

That is why we also recommend **sending such dynamic variable every time the app enters foreground**.

You can use [`didChangeAppLifecycleState` method](https://api.flutter.dev/flutter/widgets/WidgetsBindingObserver/didChangeAppLifecycleState.html) to detect foreground and trigger a dynamic variable.

---

# Track screens

URL: https://docs.contentsquare.com/en/flutter/3-16-2/track-screens/

Contentsquare aggregate user behavior and engagement at the screen level. To leverage our full range of features, you must implement effective screen tracking.
You can set this up:
- [Manually](/en/flutter/track-screens/#track-screens-manually), by calling a dedicated API.
- [Automatically](/en/flutter/track-screens/#track-screens-automatically), by using our observer to track screens based on changes in the navigation stack.

:::warning
Sessions without at least one screenview will be discarded.
:::

## Track screens manually 

Call the `.send(String)` API when a screen appears to track screens manually. When you call the API, the SDK logs a screenview event which identifies the new screen with the screen name you provided.

```dart
ContentSquare().send('ScreenName');
```

:::warning
If you have implement the manual start of the SDK, you need to start the SDK before sending any screen view.
```dart
await Contentsquare().start();
```
Until this is done, no screen tracking will be collected. To find out more about the manual SDK start [visit this page](/en/flutter/manual-sdk-start/).
:::

### Back navigation handling

Back navigation is not automatically tracked by the SDK. 
When back navigation occurs the `send` method should be manually invoked with the screen name of the previous screen.

#### Example with a custom navigation observer
```dart
class CustomNavigationObserver extends NavigatorObserver {
  
  @override
  void didPop(Route route, Route? previousRoute) {
    ...
    final previousScreenName = // get the previous screen name
    Contentsquare().send(previousScreenName);
    ...
  }
  
}
```

### Screen name handling

The screen name length is not limited on the SDK side. However, it's important to note that there is a limit of 2083 characters on the server side. Ensure that screen names do not exceed this limit to prevent any issues with data transmission and processing.

### Handling Screen Views When App Returns from Background

The Contentsquare SDK automatically triggers a screen view when the app is moved to the background and subsequently brought back to the foreground. This occurs provided that a screen view with a screen name has been triggered previously. In such cases, the SDK will use the last screen name that was set.

### Implementation recommendations

From a functional standpoint, we expect a screenview to be sent:

- When the screen becomes visible
- When a modal or pop-up is closed, returning the user to the screen
- When a route is popped, returning the user to the screen

Achieving this can be facilitated through a [NavigatorObserver](https://api.flutter.dev/flutter/widgets/NavigatorObserver-class.html). This observer can be used to listen to route changes and send screenviews accordingly.

### How to name screens

As a general rule, aim to keep distinct screen names under 100 characters.
Choose names that provide a comprehensive understanding of the screen's content or purpose. This will help you to identify the screen in the Contentsquare interface.
:::tip
We advise against relying on the `runtimeType` of the class, as in the release version, the class name may be obfuscated, rendering the name meaningless.
:::

#### Separate words with space, dash or underscore characters

If you want to create screen names with multiple words, it's best to separate them using spaces, dashes, or underscores. Contentsquare will handle the formatting automatically.

**Example:** For a sub-category list of a retail app, use `Home and Living - Home Furnishings` instead of ~~`homeLivingHomeFurnishings`~~.

#### Use screen template/layout names

As a general guideline, opt for names that describe the screen template or layout rather than focusing on specific content (data). This approach will minimize the number of unique screen names, making Contentsquare easier to use and reducing the potential for Personal Data transmission.

Examples of screen types falling into this category include Product Detail, Event Detail, Conversation/Chat, and User Profile.

### Screens with multiple states/layouts

<Render file="en/mobile/multiple-layout-screens"/>

## Track screens automatically

Automatic screen view tracking can be done using the `ContentsquareNavigatorObserver`. This will observe the navigation stack of the application and log screen events accordingly. 

This observer can be attached to any `WidgetApp` (like `MaterialApp`, `CupertinoApp`) or to a `RouterConfig`

<Tabs>
	<TabItem label="WidgetApp">

  ```dart
  MaterialApp(
    navigatorObservers: [ContentsquareNavigatorObserver()],
  );

  CupertinoApp(
    navigatorObservers: [ContentsquareNavigatorObserver()],
  );

  WidgetsApp(
    navigatorObservers: [ContentsquareNavigatorObserver()],
  );
  ```
  </TabItem>
  <TabItem label="RouterConfig">

  ```dart
  MaterialApp.router(
    routerConfig: GoRouter(
      observers: [ContentsquareNavigatorObserver()],
    ),
  );
  ```
  </TabItem>
</Tabs>

:::warning
To ensure effective results, make sure that each [Route](https://api.flutter.dev/flutter/widgets/Route-class.html) is properly named
:::

### Configuration

The `ContentsquareNavigatorObserver` can be configured with the following arguments: 

#### ShouldTrack

An optional callback function that determines whether a specific route should be tracked. The function takes a `Route` as input and returns a `bool`. 

Use this function to selectively exclude certain routes from automatic tracking by returning false for those routes.

By default, all routes are tracked. 

```dart
ContentsquareNavigatorObserver(
  shouldTrack: (route) {
    // Exclude /myRoute from tracking
    if (route.settings.name == '/myRoute') return false;
    return true;
  },
)
```

#### ScreenNameProvider

An optional callback function used to customize the screen name for a given route. The function takes a `Route` as input and returns a `String` representing the desired screen name. 

Use this function to define custom screen names for specific routes.

By default, the route's name is used if available; otherwise, the route type will be used.

```dart
ContentsquareNavigatorObserver(
  screenNameProvider: (route) {
    final screenName = _formatScreenName(route.settings.name);
    return screenName;
  },
)
```

#### CustomVarsProvider

An optional callback function used to provide a list of custom variables for a specific route. The function takes a `Route` as input and returns a `List<CustomVar>`. 

Use this function to attach custom variables to specific routes for tracking purposes.

```dart
ContentsquareNavigatorObserver(
  customVarsProvider: (route) {
    final routeName = route.settings.name;
    final productPageRegex = RegExp(r'/product/(\d)+');

    // In this example, a product ID is extracted from the route name.
    // For a route like "/product/1234", the value "1234" will be set as a customVar.
    if (routeName != null && productPageRegex.hasMatch(routeName)) {
      final productId = productPageRegex.firstMatch(routeName)?.group(1);
      if (productId != null) {
        return [
          CustomVar(index: 1, name: 'productId', value: productId),
        ];
      }
    }
    return [];
  },
)
```

### Troubleshooting

#### Tab bar 

TabBar views are commonly tracked as individual screens. However, most TabBar implementations push the route to the navigation stack only during initialization, which can make it challenging to properly track navigation events for each tab change.

To support TabBar tracking correctly, additional configuration may be necessary.

For example, when using AutoTabsRouter from the AutoRoute package, the default behavior does not track tab changes automatically. In this case, combining an AutoRouteObserver with the manual tracking API is required to ensure each tab is tracked as a distinct screen.

```dart
class TabRouteObserver extends AutoRouteObserver {
  @override
  void didInitTabRoute(TabPageRoute route, TabPageRoute? previousRoute) {
    Contentsquare().send(route.name);
  }

  @override
  void didChangeTabRoute(TabPageRoute route, TabPageRoute previousRoute) {
    Contentsquare().send(route.name);
  }

  @override
  void didPop(Route route, Route? previousRoute) {
    final routeName = previousRoute?.settings.name;
    if (routeName == null) return;

    if (_tabRouteNames.contains(routeName)) {
      Contentsquare().send(routeName);
    }
  }
}

[...]

MaterialApp(
  navigatorObservers: [
    ContentsquareNavigatorObserver(),
    TabRouteObserver(),
  ],
);
```

#### PageBuilder

If you use a `pageBuilder` in your routes, make sure to set the page `.name`. 

Example using GoRoute: 

```dart {"Specify the page name here": 5-6}
GoRoute(
  path: 'checkout',
  name: 'Checkout Screen',
  pageBuilder: (context, state) => MaterialPage(

    name: 'Checkout Screen',
    key: ValueKey(state.pathParameters),
    fullscreenDialog: true,
    child: const CheckoutScreen(),
  ),
),
```

---

# Track transactions

URL: https://docs.contentsquare.com/en/flutter/3-16-2/track-transactions/

To associate a user's session with their potential purchases (and corresponding revenue), you must send the transaction via a dedicated API. Each transaction requires the following information:
- `price` (`double`, required)
- `currency` (`String`, required)
- `transactionId` (`String`, optional)

```dart
Contentsquare().sendTransaction(430, 'EUR', "testId");
```

You can also use the `Currency` helper to get the list of ISO 4217 currencies.

```dart
Contentsquare().sendTransaction(430, Currency.EUR.toStr());
```

If the currency passed doesn't match our supported currencies, the SDK will send a currency value of "-1". This value will be interpreted as the default currency of the project.

:::warning
**Each transaction must only be sent once**. A common mistake is to trigger the sending when the confirmation screen is displayed. This leads to triggering the transaction each time the user puts the app in background and then in foreground on the confirmation screen.
:::

---

# Track WebViews

URL: https://docs.contentsquare.com/en/flutter/3-16-2/track-webviews/

## Usage
In order to enable WebView tracking, two steps are required:
1. Inject the Contentsquare Tracking Tag in WebView mode in the web pages loaded in your app’s WebViews. For more information on this step, refer to [📚 Mobile Apps WebView Tracking Documentation.](/en/webview-tracking-web-tag/).
1. Make sure JavaScript is enabled in your WebViews.
1. Wrap your WebView widget with `ContentsquareWebViewWrapper` widget and implement it as explained below.

## Implementation
:::warning
Our implementation will work if and only if the WebView widget you are using in your app is relying on an underlying instance of `android.webkit.WebView` on Android and WebKit’s `WKWebView` on iOS.
:::

The implementation can be done in two different ways depending on how your WebView allows the injection of scripts. These two different ways relies of two subtypes of `WebViewWrapperDelegate`:
- `UserScriptWebViewWrapperDelegate` to inject the required Contentsquare script through User Scripts. Choose this if you use the `flutter_inappwebview` package.
- `JSChannelWebViewWrapperDelegate`  to inject the required Contentsquare script through JavaScript channel. Choose this if you use packages like `webview_flutter` or `flutter_webview_plugin`.

### Examples
<Tabs>
	<TabItem label="Using UserScriptWebViewWrapperDelegate">
		
This example uses the [flutter_inappwebview](https://pub.dev/packages/flutter_inappwebview) `InAppWebView` widget.

```dart {"1. Ensure JavaScript is enabled": 5-9} {"2. Inject the Contentsquare script": 13-21}
ContentsquareWebViewWrapper(
  delegate: UserScriptWebViewWrapperDelegate(
    builder: (BuildContext context, String userScript) {
      return InAppWebView(
        
        initialOptions: InAppWebViewGroupOptions(
          crossPlatform: InAppWebViewOptions(
            javaScriptEnabled: true,
          ),
        ),
        initialUrlRequest: URLRequest(
          url: Uri.parse(url),
        ),
        initialUserScripts: UnmodifiableListView([
          UserScript(
            // Inject the script properly
            // by setting the `userScript` as source
            source: userScript,
            // Set the injectionTime as AT_DOCUMENT_START
            injectionTime: UserScriptInjectionTime.AT_DOCUMENT_START,
          ),
        ]),
      );
    },
  ),
)
```

:::note
You should always set the property `injectionTime` of `UserScript` to `UserScriptInjectionTime.AT_DOCUMENT_START`. 
`UnmodifiableListView` is imported from `dart:collection`.
:::

	</TabItem>
	<TabItem label="Using JSChannelWebViewWrapperDelegate">
		
This example uses the [webview_flutter](https://pub.dev/packages/webview_flutter) `WebViewWidget` widget.

```dart {"1. Ensure JavaScript is enabled": 1-2} {"2. Inject the Contentsquare script": 5-11} {"3. Build the WebView widget": 14-17}
​
webViewController.setJavaScriptMode(JavaScriptMode.unrestricted);
ContentsquareWebViewWrapper(
  delegate: JSChannelWebViewWrapperDelegate(

    addJavaScriptChannel: (WebViewJSChannelHandler handler) {
      webViewController.addJavaScriptChannel(
        handler.channelName,
        onMessageReceived: (jsMessage) {
          handler.onMessageReceived(jsMessage.message);
        },
      );
    },

    builder: (context) {
      return WebViewWidget(controller: webViewController);
    },
  ),
);
```

:::note
You should always set the channel name to `handler.channelName` and call `handler.onMessageReceived(...)` in the JavaScript channel message callback.
:::

	</TabItem>
</Tabs>

## Validate WebView tracking

To validate the tracking of WebViews, refer to the platform-specific instructions.
- [📚 Android documentation](/en/android/track-webviews/#validating-the-implementation-on-the-web-side)
- [📚 iOS documentation](/en/ios/track-webviews/#on-the-web-side)

---

# Troubleshooting

URL: https://docs.contentsquare.com/en/flutter/3-16-2/troubleshooting/

This section provides pointers to help you solve issues you can run into the Flutter SDK.
:::tip[Start by upgrading]
To narrow down the root cause and eliminate potential issues, upgrade to the [latest version of the SDK](/en/flutter/). If your issue persists after the upgrade and using this section, contact us. 
:::

## Sessions are not tracked

For sessions to be tracked:

<Render file="en/mobile/troubleshooting/flutter/tracked-session-helper"/>

## SDK is not working on my hybrid app

Contentsquare SDK [is not compatible](/en/flutter/compatibility/#compatibility-matrix) with hybrid applications.

## Cannot see in-app features on iOS

In-app features requires a [specific configuration](/en/flutter/in-app-features/#implement-in-app-features-ios-only) on iOS.

## I lost some zoning data after changing my widget tree

Contentsquare SDK uses zoning identifier that relies heavily on the structure of the widget tree.
Changes to the widget tree such as moving, nesting, or removing a widget may result in the loss of tracking data.

The Contentsquare Flutter SDK provides the [`ReliableTarget` widget](/en/flutter/reliable-targets/), designed to encapsulate the widget intended for reliable tracking.

## Transactions are sent multiple times

A common mistake is to trigger the sending when the confirmation screen is displayed. 
This leads to triggering the transaction each time the user puts the app in background and then in foreground on the confirmation screen. 

## Cannot see images and texts are incomprehensible in Session Replay

By default, the `ContentsquareRoot` widget masks all types of content (texts, text fields, and images) during replays. It achieves this by providing a default `MaskingConfig` object if none is specified.  
The default configuration masks everything, ensuring that sensitive information is protected.  
However, you can override the default masking behavior by providing your own `MaskingConfig` object when creating a `ContentsquareRoot` widget.
This allows you to customize the masking rules for your app according to your requirements.
See [MaskingConfig](/en/flutter/session-replay/#how-to-use-maskingconfig) for more information.

## Masking / Unmasking Session Replay using in-app features settings is not reflected in the player

The masking / unmasking of Session Replay through the in-app features settings is not yet supported by the Flutter SDK.

This setting is intended for debugging purposes only.
See [MaskingConfig](/en/flutter/session-replay/#how-to-use-maskingconfig) for more information.

## Session Replay is enabled but I see nothing when connecting to the URL

Put your app in background to trigger the sending of the session to the server.  
Session Replay is not instantaneous and takes from 5 minutes to 30 minutes to be available.

For Session Replay to work, sessions must be tracked:

<Render file="en/mobile/troubleshooting/flutter/tracked-session-helper"/>

## My replays not an exact rendering of my app

There is no collection of the user's screen, but rather a reconstruction interactions based on the data collected by the SDK.  
The rendering may not be pixel-perfect, but it should give you a good idea of how users interact with your app.
There are some [known limitations](/en/flutter/session-replay/#known-limitations) to the Session Replay feature.

If you notice a limitation that is not referenced in our documentation, contact us.

## Session Replay requests are not sent from an Android emulator / iOS simulator

If you struggle to watch a replay collected on an emulator/simulator, it may be due to some network constraints applied on your computer (VPN, company network restrictions, etc.). Check your configuration and/or use a real device.

For more information about our endpoints and requests, see:
- [Android - Requests are failing](/en/android/troubleshooting/#requests-are-failing)
- [iOS - Requests are failing](/en/ios/troubleshooting/#requests-are-failing)

## Replays are extremely long

It is important to remember that **an app kill does not end a session**.  
See [Session definition](/en/ios/how-the-sdk-works/#session-definition) for more information.

If you leave the simulator/emulator running with the app in foreground, the session will not end, even if you are inactive.
To better reflect actual end user behavior and avoid unusually long sessions (last hours), put the app in background or kill it.

## I use an HttpOverrides.global does not work

During the initialization, the Contentsquare SDK overrides the `HttpOverrides.global` property.

Avoid overriding `HttpOverrides.global` in your app.  
If you have to, see [Use a custom HttpOverrides](/en/flutter/error-analysis/#use-a-custom-httpoverrides).

## SwiftContentsquarePlugin was registered twice

There is a known issue with the [`background_locator`](https://pub.dev/packages/background_locator) plugin which causes Contentsquare plugin to be registered twice. This issue has been mitigated and you can ignore this warning.

If you are not using the `background_locator` plugin and encounter this warning, contact us.

## Requests are failing

<Render file="en/mobile/troubleshooting/endpoints-to-allow"/>

---

# Webview

URL: https://docs.contentsquare.com/en/flutter/3-16-2/webview/

A plugin to use Contentsquare in [webview_flutter](https://pub.dev/packages/webview_flutter) webviews.
This plugin supports Android and iOS.

This plugin exposes a custom implementation of the [Webview tracking feature](/en/flutter/track-webviews/#examples) which tracks [webview_flutter](https://pub.dev/packages/webview_flutter) package webviews without having to implement the tracker again.

This package is not required to track these webviews but offers a convenient wrapper around the base `ContentsquareWebViewTrackerBuilder` class.

This package relies on the Contentsquare Flutter plugin, and does not need any additional configuration.

## Installation

Add the `contentsquare_webview_flutter` package in your `pubspec.yaml`:

```yaml title="pubspec.yaml"
dependencies:
  flutter:
    sdk: flutter

  contentsquare_webview_flutter: ^2.1.0
```

then run

```shell
flutter pub get
```

### Usage

```dart
final _webViewController = WebViewController();
[...]
ContentsquareWebViewFlutterTrackerBuilder(
  webViewController: _webViewController,
  onTrackingReady: () => _webViewController.loadRequest(Uri.parse(url)),
  child: WebViewWidget(controller: _webViewController),
)
```

## Compatibility

Each version of the Contentsquare Webview Flutter plugin is related to a version of the third party plugin [webview_flutter](https://pub.dev/packages/webview_flutter).

| Contentsquare WebView Flutter Version | [webview_flutter](https://pub.dev/packages/webview_flutter) Version | Contentsquare Flutter Plugin Version |
| --------------------------------- | --------------- | ------- |
| 2.1.0                             | ^4.0.0         | ^2.3.0   |
| 2.0.0                             | ^4.0.0         | ^2.0.0   |
| 1.0.0                             | ^3.0.0         | ^1.3.2   |

## Changelog
### 2.2.0 - 2023.06.21

- **Contentsquare Flutter Plugin:**
  - 2.3.0 → 3.1.0
- Support of Flutter 3.10

### 2.1.0 - 2023.05.03

- **Contentsquare Flutter Plugin:**
  - 2.2.0 → 2.3.0

### 2.0.0 - 2023.03.28

:::danger[Breaking change]
The plugin now supports the new [Flutter webview plugin](https://pub.dev/packages/webview_flutter) (^4.0.0). The plugin is no longer compatible with the previous version of the Flutter webview plugin (^3.0.0)
:::

- Support of webview_flutter v4

### 1.0.0 - 2023.03.22

- Support of webview_flutter v3

---

# Changelog

URL: https://docs.contentsquare.com/en/ios/4-41-0/changelog/

import { EmailForm } from '~/components'
<EmailForm/>
## Unified SDK

### 0.6.0 - 2025.04.02
- Update Contentsquare SDK to 4.41.0

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.6.0               | [4.41.0](/en/ios/changelog/#4410---20250402) | [Core 0.8.1](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.5.2 - 2025.03.12
- Update Contentsquare SDK to 4.40.2
- Update Product Analytics Core SDK to 0.8.1

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.5.2               | [4.40.2](/en/ios/changelog/#4402---20250220) | [Core 0.8.1](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.5.1 - 2025.02.21
- Update Contentsquare SDK to 4.40.1

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.5.1               | [4.40.1](/en/ios/changelog/#4401---20250218) | [Core 0.8.0](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.5.0 - 2025.02.14
- Update Contentsquare SDK to 4.40.0
- Update Product Analytics Core and Autocapture SDKs to 0.8.0

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.5.0               | [4.40.0](/en/ios/changelog/#4400---20250212) | [Core 0.8.0](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.4.0 - 2025.01.15
- Update Contentsquare SDK to 4.39.0

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.4.0               | [4.39.0](/en/ios/changelog/#4390---20250109) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.3.1 - 2024.12.06
- Update Contentsquare SDK to 4.38.2

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.3.1               | [4.38.2](/en/ios/changelog/#4382---20241128) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.3.0 - 2024.10.25
- Update Contentsquare SDK to 4.38.0

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.3.0               | [4.38.0](/en/ios/changelog/#4380---20241025) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.2.3 - 2024.10.25
- Update Contentsquare SDK to 4.37.3

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.2.3               | [4.37.3](/en/ios/changelog/#4373---20241022) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.2.2 - 2024.10.18
- Update Contentsquare SDK to 4.37.2

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.2.2               | [4.37.2](/en/ios/changelog/#4372---20241015) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.2.1 - 2024.10.14
- Update Contentsquare SDK to 4.37.1

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.2.1               | [4.37.1](/en/ios/changelog/#4371---20241001) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.2.0 - 2024.10.11
- Update Contentsquare SDK to 4.37.0
- Update Product Analytics Core SDK to 0.7.2

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.2.0               | [4.37.0](/en/ios/changelog/#4370---20240927) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.1.1 - 2024.09.27
- Update Contentsquare SDK to 4.36.1

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.1.1               | [4.36.1](/en/ios/changelog/#4361---20240920) | [Core 0.7.1](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

### 0.1.0 - 2024.09.06
This release marks the introduction of the Unified SDK which brings together Product Analytics, Experience Analytics, and Monitoring features. From this version onwards, the SDK releases follow a new versioning scheme.
For more information on the underlying SDKs versions, see [the version mapping table](/en/ios/unified-sdk/).

| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.1.0               | [4.36.0](/en/ios/changelog/#4360---20240906) | [Core 0.7.1](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

## Contentsquare SDK

### 4.41.0 - 2025.04.02

**Analytics**
- Fix an issue where the long snapshot would contain blank content
- Improve handling of `insetGroup` `Tableviews` in the long snapshot

**Session Replay**
- Fix some `UIScrollView` updates not detected with iOS >= 18.2

### 4.40.2 - 2025.02.20

**Analytics**
- Fix an issue that prevents Flutter snapshots to show up in the Zoning module

### 4.40.1 - 2025.02.18

**Analytics**
- Zoning Analysis: Fix an issue where obfuscated class names would lead to inconsistent metrics

### 4.40.0 - 2025.02.12

**Session Replay**
- Fix an issue where Session Replay was not playable when [Enable Session Replay](/en/ios/session-replay/#enable-session-replay-on-your-device) was toggled on
- [Full masking configuration by App/SDK version in the CSQ Console](/en/ios/session-replay/#remote-masking-configuration-in-the-csq-console)

### 4.39.0 - 2025.01.09

**Analytics**
- The session number will be incremented when the application or the SDK version number has changed

### 4.38.3 - 2024.12.10

- Fix for webview not collected when added to view hierarchy with zero size.
- Fix crash related to failed Tag fetching.

### 4.38.2 - 2024.11.28

**Session Replay**
- Pass SDK version to Session Replay requests for further data processing.

### 4.38.1 - 2024.11.20

**Session Replay**
- Fix masking of SwiftUI elements for all types of view modifiers
- Fix a rare crash caused by pattern-based background color 

### 4.38.0 - 2024.10.25

**Analytics**
- The long snapshot capture is properly cancelled when the application goes to background
- Fix an issue where sessions could be abnormally long when the application is in background

### 4.37.3 - 2024.10.22

**Session Replay**
- Prevent a crash due to an issue with the rendering of certain SwiftUI elements.

### 4.37.2 - 2024.10.15

**Session Replay**
- Fix webview replay for Flutter apps.

### 4.37.1 - 2024.10.01

**Analytics**
- Fixed inconsistent target paths in Zoning Analysis by excluding zero-size WKWebView from index calculations.
- Resolved snapshot failure when the Contentsquare Tag is not found in WKWebview.

**Error Analysis**
- Fixed a slowdown of network calls and a potential crash while collecting API errors.

### 4.37.0 - 2024.09.27

**Core**
- New public API: projectID (the id of the project on the Contentsquare platform)
- New public API: `sessionNumber` (the number of the session for the current user)

**Analytics**
- **Exposure Metrics:** Add a new API to prevent a UIScrollView from generating exposure events. For more details, check the [Exposure Metrics section](/en/ios/collected-data-points/#exposure-metrics)

**Session Replay**
- Immediately stop replay when collection rate is set to 0

### 4.36.1 - 2024.09.20

**Session Replay**
- Fixed an issue where some SwiftUI system images were missing from the replay

### 4.36.0 - 2024.09.06

**Core**
- No data will be collected for applications running on iOS < 13.0

**Error Analysis**
- The upload-symbols script now supports network proxies.
- Error messages for the upload-symbols script are improved for clarity.

**Session Replay**
- Session Replay can now be blocked for certain application versions based on a pattern or range.
- Improved support for text dynamic colors.

**WebViews**
- Now automatically injecting the global variable `window.CS_isWebView` in your pages, in order to help you detect if they are loaded from a WebView or not. For more details, check the [WebView Detection documentation](/en/ios/track-webviews/#inject-a-variable-to-detect-when-you-load-your-page-from-a-webview)

### 4.35.1 - 2024.08.14

**Core SDK**
- The in-app menu can now be displayed over modal views, such as Alerts and Action sheets
- Limit SwiftProtobuf version up to 1.26.0, to prevent a potential crash

### 4.35.0 - 2024.08.05

**Analytics**
- **Custom Variables:** Custom variables are now sent properly with the automatic screenview when the app enters foreground

**Session Replay**
- **Data consumption:** Session Replay will send much less data in some cases

**WebViews**
- Added Automatic Tag Injection to track locally hosted pages. For more details, check the [Automatic Tag Injection documentation](/en/ios/track-webviews/#automatic-tag-injection)

### 4.34.0 - 2024.07.02

**Core SDK**
- **Delivery:** Remove Carthage support

**Session Replay**
- Fix an issue when masking a SwiftUI TextField with borders
- Fix an issue where content might not be visible when app enters foreground
- Improve shadow support for SwiftUI

### 4.33.1 - 2024.06.13

**Session Replay**
- Fix memory usage for image capture.

### 4.33.0 - 2024.05.30

**Analytics**
- Reliable targets: When a duplicated reliable target is found on screen, the SDK will not use the reliable target but fallback to the regular target path
- Snapshot: The long snapshot capture is cancelled when the app is put in background

### 4.32.0 - 2024.04.23

**Analytics**
- **Zoning:** Fix an issue where some UI elements could be captured twice
- Fix an issue that could cause an erroneous session duration computation
- Fix memory leaks

**Session Replay**
- Font are supported for NSAttributedString

**Error Analysis**
- CSCrashReporter is updated to 1.0.0

### 4.31.2 - 2024.03.25

**Core SDK**
- **Delivery:** Fix an issue with Xcode 15.3 when SDK is installed through Swift Package Manager

### 4.31.1 - 2024.03.19

**Core SDK**
- **Delivery:** Fix a privacy manifest issue for required reason API `NSPrivacyAccessedAPICategorySystemBootTime`

### 4.31.0 - 2024.03.18

**Analytics**
- Specific UI components can now be excluded from the snapshot capture, on specific screens, via the project configuration
- Improve the capture of long snapshots, for screens with multiple scrolling components
- Fix an issue on snapshot that could cause some views to be overlapped
- Fix some memory leaks

**Session Replay**
- Add SR link retrieval inside the logs when then API callback is triggered
- Fix on SR link where it would be updated twice when session is incremented

**Error Analysis**
- Add an API to disable errors auto collection

### 4.30.2 - 2024.02.29

**Error Analysis**
- Fix an issue where network requests with status code 2xx are collected as API Errors.

### 4.30.1 - 2024.02.27

**Error Analysis**
- Fix an issue where API Error details are not collected.

### 4.30.0 - 2024.02.23

**Session Replay**
- Add new callback API for updates on replay link
- Deprecate existing API to get replay link

**Error Analysis**
- Fix a rare issue in the Crash Reporter, that could cause a crash

### 4.29.1 - 2024.01.26

**Core SDK**
- **Delivery:** Fix an internal configuration issue that would cause an App Store rejection because of our dynamic framework

### 4.29.0 - 2024.01.23

:::warning[Deprecated version]
This version is deprecated.  
Upgrade to the [latest version](/en/ios/).
:::

**Core SDK**
- **Session Replay:** Fix a bug where the masking of a view wouldn't be applied properly

**Error Analysis iOS SDK**
- **Delivery:** Error Analysis package is now delivered inside the main package **Core SDK**. See [Migration Guide](/en/ios/error-analysis/#migrating-from--4280) section for more details

### 4.28.0 - 2023.12.19

:::warning[Deprecated version]
This version is deprecated.  
Upgrade to the [latest version](/en/ios/).
:::

**Core SDK**
- **Privacy manifest:** SDK now includes a privacy manifest. See [App Store Privacy Guidelines Compliance](/en/ios/privacy/#app-store-privacy-guidelines-compliance) section for more details
- **Signature:** SDK is now digitally signed and can be verified automatically in Xcode 15
- **ForgetMe:** This API is now deprecated. See the [Privacy section](/en/ios/privacy/#forget-me) for more details.
- **Session Replay:** Fix a crash related to threading issues in SRM module
- **Session Replay:** Fix an issue when masking containers in SwiftUI
- **CS InApp:** Fix a crash when accessing replay link
- **Snapshots:** Fix a bug where taking a snapshot could cause the app to freeze on some screens containing multiple `UIWindow`

**Error Analysis iOS SDK**
- **Privacy manifest:** SDK now includes a privacy manifest
- **Signature:** SDK is now digitally signed and can be verified automatically in Xcode 15

### 4.27.1 - 2023.11.30

**Core SDK**
- **Zoning analysis:** Fix a bug where a long snapshot wouldn't be scrollable in the Zoning module
- **Zoning analysis:** Fix a bug where some elements of a long snapshot wouldn't appear in the Zoning module

### 4.27.0 - 2023.11.16

**Core SDK**
- **Zoning analysis:** Improve the support of SwiftUI LazyStacks in the Zoning module
- **Session Replay:** Fix a bug that could cause applications using `AVPlayer` to crash

### 4.26.0 - 2023.10.18

**Core SDK**
- **Snapshots:** Display more detailed error message in case of failure

**Error Analysis iOS SDK**
- **WebView errors:** Collect JS, API & Custom errors occurring in WebViews. More info on [WebView errors](/en/webview-tracking-web-tag/error-analysis/)
- **Crash Reporter:** Added support for compressed dSYMs and [fastlane](/en/ios/error-analysis/#use-fastlane-to-upload-dsyms). More info on [Upload dSYMs](/en/ios/error-analysis/#use-script-to-upload-dsyms)

### 4.25.2 - 2023.09.22

**Core SDK**

- **Zoning analysis:** Fix an issue with Snapshots that could lead to incorrect data

### 4.25.1 - 2023.09.13

**Error Analysis iOS SDK**

- **API Errors:** Fix a crash when passing nil data to `URLSession.uploadTask(with request: URLRequest, from bodyData: Data)` for background sessions.

### 4.25.0 - 2023.08.25

**Core SDK**

- **Zoning analysis:** Fix an issue with identifying some elements
- **Session Replay:** Fix an issue with gesture displayed over WebViews
- **Session Replay:** Improve screen duration calculation

### 4.24.0 - 2023.07.14

**Core SDK**

- **Session Replay:** Fix a memory leak that could happen when Session Replay was stopped
- **Session Replay:** Fix an issue with views being wrongly masked/unmasked
- **Misc:** Fix a bug where user sessions would span over abnormally long periods of time.

**Error Analysis iOS SDK**

- **API Errors:** Fix a memory leak related to URLSessionDelegate

### 4.23.0 - 2023.06.09

**Core SDK**

- **Custom Variables:** The [Custom Variables feature](/en/ios/track-custom-variables/) is now in General Availability
- **Snapshots:** Long Snapshots feature is now in General Availability
- **Exposure Metrics:** Exposure metrics feature is now in General Availability
- **Zoning analysis:** [Reliable targets feature](/en/ios/collected-data-points/#reliable-targets) is now available for UIKit views
- **Integrations:** It's now possible to use [Adobe Analytics](/en/ios/use-adobe-analytics/) with Contentsquare
- **Track WebView:** Introducing new WebView tracking relying on [Web Tracking Tag](/en/webview-tracking-web-tag/).
- **Session Replay:** WebView support. See [Session Replay WebView documentation doc](/en/ios/session-replay/#webview)
- **Session Replay:** Fix a masking issue for TextField on SwiftUI
- **Session Replay:** Fix a memory leak related to masking
- **Session Replay:** Fix an issue that would cause some collected screens to appear grey in the Session Replay player
- **Session Replay:** Add a new API 'sendUserIdentifier' to search a replay based on a personal user identifier [See the Session Replay Send user identifier section](/en/ios/session-replay/#send-user-identifier).

**Error Analysis iOS SDK**

- **API Errors:** Update log level to info for API Errors activation log.

### 4.22.1 - 2023.05.05

**Core SDK**

- **Exposure Metrics:** Exposure metrics feature is now part of the SDK (Beta phase). It will help you measure engagement directly in zoning by showing which zones are attracting clicks, or on the contrary being ignored.
- **Snapshots:** Improved support of 'LazyVStack', the content is now properly captured
- **Session Replay:** Fix a bug where buttons with background images wouldn't be displayed correctly

**Error Analysis iOS SDK**

- **Crash Reporter:** Create script to upload dSYM files to symbolicate crashes.
- **Crash Reporter:** Collect stack trace and details for crashes.
- **Misc:** Fix a bug that caused an error when the SDK was imported.

### 4.21.0 - 2023.04.07

**Core SDK**

- **Misc:** Fix a bug where user sessions would span over abnormally long periods of time.
- **Misc:** Add contextual information in the log displayed when an API is used before the SDK can start.

**Error Analysis iOS SDK**
- **Crash Reporter:** Collect basic information for crashes.
- **⚠️ Added [PLCrashReporter](https://github.com/microsoft/plcrashreporter) dependency:**
- **API Errors:** Compress API Error details and limit the size of the collected information.
- **API Errors:** Limit API errors to 20 per screenview.

### 4.20.0 - 2023.02.24

**Core SDK**
- **Custom Variables:** The [Custom Variables feature](/en/ios/track-custom-variables/) is now part of the SDK (Beta phase).
- **Snapshots:** Fix a bug where taking a snapshot of a modal view would fail.

**Error Analysis iOS SDK**
- **API Errors:** API Troubleshooting details.
- **API Errors:** Print a console log for screen-related events sent before first screen event.

### 4.19.0 - 2023.01.26

**Core SDK**
- **Session Replay:** Fix a bug where SwiftUI Texts wouldn't be masked/unmasked properly
- **Misc:** Fix user ID renewal bug on simulator

**Error Analysis iOS SDK**
- **API Errors:** Fix a bug where API Errors were sometimes missed.
- **API Errors:** Add a new API to mask URL by patterns.

### 4.18.0 - 2022.12.16

**Core SDK**
- **Session Replay:** Fix a bug where UITextFields wouldn't be masked properly
- **Session Replay:** Fix a bug where UITextFields wouldn't be rendered properly in the replay
- **Session Replay:** Fix a bug where gestures on masked TextFields wouldn't be handled correctly
- **Misc:** Fix a bug where the snapshot button would disappear in landscape mode

**Error Analysis iOS SDK**
- **API Errors:** Collect failed network requests

### 4.17.0 - 2022.10.24

- **Drop support for iOS 11.** Minimum support version is now iOS 12.4. [See Compatibility section](/en/ios/compatibility/).
- **Session Replay:** Add a Log when Session Replay data exceeds the 8 MB limit for a screenview
- **Session Replay:** Improve background on unmasking/masking in UIKit and SwiftUI
- **Session Replay:** Custom components (or system components not listed) are now masked in the default masking state
- **Session Replay:** Masking is applied recursively to all children unless a specific rule has been applied to 1 of them. See [Masking and Unmasking behaviors on a parent view](/en/ios/session-replay/#masking-and-unmasking-behaviors-on-a-parent-view)
- **Log visualizer** Enabled by default when in-app features are activated

### 4.16.0 - 2022.09.12

- **Session Replay:** Fix a bug where the texts built with SwiftUI wouldn't appear in the replays
- **Session Replay:** Fix a bug where the modals and alerts wouldn't appear in the replays
- **Snapshots:** Fix a bug where tab bar icons wouldn't be displayed properly
- **Misc:** Add a CSLIB log when a request from CS SDK fails
- **Dynamic Variables:** Key length increased from 50 to 512 chars

### 4.15.1 - 2022.07.26

- **Misc:** Fix a bug where the SDK would send several `AppHide` events when app goes to background

### 4.15.0 - 2022.07.21

- **Snapshots:** Fix a bug where tab bar icons wouldn't be displayed properly
- **Misc:** Fix a bug where the app would become inactive after calling a review prompt with SKStoreReviewController.requestReview()

### 4.14.0 - 2022.06.08

- **Session Replay:** Add new high-level APIs to ease the masking implementation: `maskTexts`, `maskImages`, `maskTextInputs` [See the Session Replay Data Masking section](/en/ios/session-replay/#personal-data-masking)
- **Session Replay:** SwiftUI is now fully supported in Session Replay; all SwiftUI elements are properly collected 
- **Session Replay:** Fix a bug where Session Replay data collection wouldn't stop when Contentsquare.stopTracking() is called
- **Snapshots:** Fix a bug where WebViews would have incorrect position  
- **Misc:** Improvements and bug fixes

### 4.13.0 - 2022.05.05

- **Session Replay:** Add a new API 'setDefaultMasking' to ease the masking implementation [See the Session Replay Data Masking section](/en/ios/session-replay/#personal-data-masking)
- **Session Replay:** Add a new event in the replay when the quality of the replay has changed
- **Session Replay:** Add new events in the replay when the replay starts and stops 
- **Session Replay:** Fix a bug where Session Replay data collection wouldn't start as expected
- **WebViews tracking:** Update of the WebViews injection mechanism to support new events sent by the WebView Tracking Tag (Dynamic variable, Transaction, Opt-in, Opt-out) [See the WebView Tracking Tag documentation](/en/webview-tracking-web-tag/)
- **Screenview tracking:** Disabled automatic screenview after background/foreground when screen name is empty [See Screenview after app in background section](/en/ios/track-screens/#screenview-after-app-in-background)
- **Misc:** Improvements and bug fixes

### 4.12.0 - 2022.04.05

- **Contentsquare visual identity:** Updated Contentsquare logo and snapshot button to match the new visual identity
- **Snapshots:** More accurate message displayed in case of error.
- **Session Replay:** Add feature to select different quality levels for Wi-Fi and Cellular [See the Session Replay Quality Levels section](/en/ios/session-replay/#quality-levels)
- **Session Replay:** Fix a bug where the session number would not be correctly incremented.
- **Session Replay:** Fix a bug where the Session Replay link would be erroneous.
- **Session Replay:** Misc improvements and bug fixes

### 4.11.0 - 2022.02.04

- **Session Replay:** Data consumption optimization on scrollable views; Fixed an issue where sessions were wrongly flagged as collected.
- **Included in tracking:** When in-app features are enabled, the device is now always included in tracking.
- **Manual Integration:** Updated process for dynamic and static linking. See "Manual Integration" in [How to include it section](/en/ios/#install-the-sdk)
- **Misc:** Minor improvements and bug fixes.

### 4.10.1 - 2022.01.14

- **Static Framework:** Fixed an error when uploading app to App Store Connect.
- **Manual Integration:** Our SDK can be integrated manually.

### 4.10.0 - 2021.12.13

- **SDK Version:** Fixed a bug caused by a new Xcode option introduced in version 13 called "Manage Version and Build Number", enabled by default in the App Store distribution process. This option is overriding the SDK version with the application version.
- **Static Framework:** Fixed a build error when code coverage is disabled. Manual Install is not supported anymore, use Swift Package Manager or CS_iOS_SDK_STATIC instead. [See How to include it section](/en/ios/#install-the-sdk).
- **Framework:** Fixed a warning in Xcode 13 and newer.
- **Session Replay:** Added a screenview event to assign inactivity period to the right screen.
- **Network connectivity:** Now able to identify 5G network.

### 4.9.0 - 2021.11.04

- **Swift Package Manager**: Our SDK is now distributed on Swift Package Manager. [See How to include it section](/en/ios/#install-the-sdk).
- **CocoaPods Static Framework**: Our SDK can be linked statically on CocoaPods. [See How to include it section](/en/ios/#install-the-sdk).
- **Drop support for iOS 10.** Minimum supported version is now iOS 11. [See Compatibility section](/en/ios/compatibility/)
- **SDK Log Visualizer:** This new module lets you see the live stream of events detected by our SDK (logs) directly in Contentsquare. Check out the [Viewing logs in the Contentsquare platform section](/en/ios/in-app-features/#viewing-logs-in-the-contentsquare-platform).
- **Misc:** Minor improvements and bug fixes.

### 4.8.0 - 2021.10.06

- **Session Replay:** Minor improvements around fidelity and start logic.
- **Misc:** Minor improvements and bug fixes.

### 4.7.0 - 2021.09.22

- **⚠️ SDK now uses XCFrameworks for Carthage**: follow [this guide](https://github.com/Carthage/Carthage#migrating-a-project-from-framework-bundles-to-xcframeworks) to migrate from framework bundles to XCFrameworks.
- **⚠️ Added Swift Protobuf dependency:** If you are using **Carthage** or **static framework**, follow [the dedicated documentation](/en/ios/#install-the-sdk) to add this dependency to your project. [More info on Swift Protobuf](https://github.com/apple/swift-protobuf).
- **Xcode Compatibility:** From this version, the SDK only works with Xcode 12.5 and newer.
- **Disable Session Replay for specific app versions:** Introducing capability to disable Session Replay for specific app versions (controlled from back office).
- **Session Replay improvements:** Optimizations around **data format, storage and sending strategy**; **Fidelity improvements** (dialogs, text, buttons).
- **Fixed Session Replay issue when using Simulator**: causing the data to be sent on the wrong endpoint.
- **Fixed Session Replay bug:** causing a crash with WebKit in some cases.
- **Misc:** Minor improvements and bug fixes.

### 4.6.1 - 2021.08.31

- **Misc:** Minor improvements and bug fixes.

### 4.6.0 - 2021.08.10

- **Disable auto-start:** Option to start the SDK in a manual method instead of starting automatically. Check out the [Manual Start section](/en/ios/track-screens/#manual-start)

### 4.5.0 - 2021.07.26

- **Session Replay:** Fidelity improvements; Improved data sending for better performance; supports keyboard display;
- **Stability:** Fixed a crash caused by Session Replay code in edge cases.
- **Misc:** Minor improvements and bug fixes.

### 4.4.0 - 2021.06.23

- **Session Replay:** Fidelity improvements; displays when app is put in background; when masked, text is now replaced by `lalala`; ability to send data over cellular network (if feature is enabled); requests are now compressed; replay link button added to in-app features settings.
- **In-app features:** Fixed a bug that caused in-app features enabling to fail the first times.
- **Misc:** Minor improvements and bug fixes.

### 4.3.1 - 2021.06.03

**React Native related:** Fixed a bug on alerts impacting iOS app running with React Native 0.64+.
**WebViews:** Fixed a potential issue related to WebViews management.

### 4.3.0 - 2021.05.26

- **Session Replay:** We now support dialogs and device orientation (landscape mode); fidelity improvements and bug fixes; mask/un-mask types from in-app features settings;
- **Snapshot button:** Fixed an issue that made the button disappear on long press
- **Snapshot:** Display error message when capturing snapshot before screenview
- **Track screen:** when API called but no screen name is pushed, the SDK will use a default value "missing screenName" with the name of the View Controller.
- **Logs:** Logs intended for Contentsquare SDK developers (Verbose) are now hidden to make it less confusing, it means you can now filter on `CSLIB`. We also improved logs to debug WebView tracking.

### 4.2.0 - 2021.03.12

- **Session Replay:** Session Replay feature is now part of the SDK and disabled by default. This feature is only accessible to customers participating in the Early Access program. For more information reach out to your Contentsquare contact. 

### 4.1.0 - 2021.01.21

- **Snapshot capture:** Fix a bug causing the app to crash when capturing a snapshot in an edge case scenario.
- **Snapshot capture:** Screen name is now displayed when capturing a snapshot (on the "snapshot in progress/success/fail" screens)
- **WebView:** WebView tracking back-office setting has been removed. WebView tracking is now always enabled.
- **Misc:** Minor improvements and bug fixes.

### 4.0.1 - 2021.01.11

**Session:** Corrected a bug preventing a session to end because of a dynamic variable triggered before App Start.

### 4.0.0 - 2020.10.28

- **In-app features activation:** A simpler and unified way to enable features living inside the SDK (Snapshot Capture and Logs) along with its tracking capabilities. See [Enable in-app features section](/en/ios/in-app-features/)
- **WebView:** Minor improvement to enable WebView zoning analysis
- **Snapshot**: Minor improvement for handling clipped views

**Upgrading from a previous version:** Make sure to remove the snapshot mode flag (`Contentsquare.enableSnapshots = true`) used to enable snapshot mode and to [implement in-app features](/en/ios/in-app-features/#implement-in-app-features).

### 3.2.1 - 2020.08.26

- **Disable logs and clipboard access on iOS 14:** The upcoming iOS 14 will embark a banner notifying users when apps are accessing the clipboard. To prevent this from happening, Logs are disabled on iOS 14.

### 3.2.0 - 2020.07.27

- **Drop support for iOS 9.** Minimum support version is now iOS 10. [See Compatibility section](/en/ios/compatibility/)
- **Dynamic Variables:** Key and value are now trimmed when maximum length is exceeded. If key or value are empty, the SDK now sends the literal string "cs-empty" instead. [See Dynamic Variables section](/en/ios/track-dynamic-variables/)
- **Transaction currency:** Lower and Uppercase are both supported.
- **Snapshots:** Improvements for React Native screens and snapshot size
- **Logs:** Some improvements for logs.
- **SwiftUI Support:** Now providing official support for SwiftUI (Snapshot Mode, gestures tracking, etc.)
- Minor improvements and bug fixes.

### 3.1.1 - 2020.04.07

- Minor bug fix

### 3.1.0 - 2020.03.30

- **New logs:** This version brings completely redesigned logs for better understanding of the SDK behavior. See dedicated section [Debugging and logging](/en/ios/in-app-features/#debugging-and-logging).
- **Enable Snapshot Mode:** New name for the API allowing for Snapshot Mode enablement: `enableSnapshot`. The previous API `isDebug` is now marked as deprecated.
- **Snapshot Button**: Fix issue related to snapshot button disappearing in some situations: behind a modal, after keyboard displayed, etc.
- **Dynamic Variables:** The API is now available in Objective-C. This is also a Prerequisite for React Native support.
- **Track Transactions - Currency:** We now provide the ability to pass the currency as an "alphanumeric code" (example: "USD") on top of the "numeric code" (example: "840"). See the dedicated section [Track transactions](/en/ios/track-transactions/).
- Minor improvements and bug fixes

### 3.0.0 - 2020.01.15

- **Breaking change:** the main class `ContentSquare` is renamed `Contentsquare` (lower-case `s`) and the framework is now called `ContentsquareModule`.
- Gesture tracking: now using the native system gesture recognizer
- **Performance improvements**: Impact on CPU has been reduced. See [Impact on performance](/en/ios/impact-on-performance/) section.
- **Xcode/Swift Compatibility:** From this version, the SDK will be compatible with all future Swift versions
- **Dynamic Variables:** Enforce limitation for the key and value length.
- Minor improvements and bug fixes
- **Static framework** is now available. See [Using the static framework (manual install)](/en/ios/) tab in the "*Add Contentsquare to your app*" section.

### 2.2.2 - 2019.11.20

- Adding support to Swift 5.1.2 and Xcode 11.2

**/!\ _This version does not support previous Xcode versions._**

### 2.2.1 - 2019.10.11

- Improvement around events storage management when the device storage is full

### 2.2 - 2019.09.26

- **Dynamic Variables:** Send custom data to Contentsquare for session segmentation. [Dynamic Variables API](/en/ios/track-dynamic-variables/) 
- **Snapshot mode launched at App start:** No need to shake the device to trigger Snapshot Mode dialog. Benefits: works on a simulator and avoids conflict with features based on shake detection.
- **CollectionView and TableView tracking:** We improve the gestures tracking accuracy for those elements.
- **Support for Swift 5.1 and Xcode 11**
- Use lower priority QoS for event requests
- Minor improvements related to snapshots

### 2.1.3 - 2019.08.07

- Minor improvement to prepare transaction API support for React Native.

### 2.1.2 - 2019.07.29

- Another minor improvement to make our SDK compatible with other SDKs.

### 2.1.1 - 2019.07.19

- Minor improvement to make our SDK compatible with other SDKs.

### 2.1 - 2019.06.12

- **Track screens**: Implement the new [Track Screen API](/en/ios/track-screens/) to accurately track `screen_view` events for all your app screens.
- **User Consent required by default**: The default privacy setting for every new app will be set to opted-out by default. This means every new user will be opted-out until the [Opt-in API](/en/ios/privacy/#opt-in) will be called.
- Swift 5 support
- Xcode 10.2 support
- Snapshots improvements
- Add support for HKD currency when tracking Transactions
- Other minor improvements and bug fixes

### 2.0 - 2019.03.20

- Add screen URL customization
- URL structure change: added the screen title in the query parameter to match a standard format between iOS and Android
- **Snapshot mode**
- **WebView tracking**
- Screen snapshot quality improvements
- Minor improvements and bug fixes

### 1.0.6 - 2018.12.06

- Minor improvements and bug fixes

### 1.0.5 - 2018.11.22

- Minor improvements and bug fixes

### 1.0.4 - 2018.11.15

- Change screen elements identification (target view path collected with gestures).

### 1.0.3 - 2018.11.01

- Add Xcode 10.1 support
- Fixed integration bug related to private modules

### 1.0.2 - 2018.10.22

- Minor improvements and bug fixes

### 1.0.1 - 2018.10.18

- SDK is now available on `CocoaPods` and `Carthage`
- Minor improvements and bug fixes

### 1.0 - 2018.09.14

- iOS SDK 1st version

---

# Collected data points

URL: https://docs.contentsquare.com/en/ios/4-41-0/collected-data-points/

- The events are in JSON format, which lists the properties and their description in comment.
- Events are sent to the server in batches.
- A batch is a subset of events originating from one session. A session can send events in more than one batch.
- The batch size is defined in a run configuration file specific to each app (50 events by default).
## Requests meta data

Each batch has a common header, a set of device specific, and repeatable information and an array of events, which is immutable.
The header is composed at the moment of sending, so it has to be constant info ONLY. The array in the payload is data stored at the moment of collection.

The structure of the batches of events will have the following format:

```javascript
{
  pid:8, // int - ProjectId - represented in the mobile config format
  uid:"ac1529a7-59f6-49d9-b254-6f0a22f57284", // String - uuid Unique user ID
  dt:4, // int - device type (loosely enforced enum - [sdk-phone : 4, sdk-tablet :5])
  dma:"Samsung", // String - device manufacturer. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  dmo:"SG", // String - device model. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  os:"10.0", // String - os version (Android version name 8.0, 9.0, 10.0)
  l:"en_US", // String - Language in iso-639 format https://www.ibabbleon.com/iOS-Language-Codes-ISO-639.html
  tz:"Europe/Paris", // String - timezone https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  now:1522159618000, // long - timestamp when the batch was sent
  to:{ // object - type origin of the event
    an:"appname" // String - application name
    st:"sdk-android", // String - type of sdk
    sf:"release", // string - sdk flavor/variant [release/debug/god]
  },
  r:{ // Device - resolution.
    w:1080, // int - width
    h:1920 // int - height
    d: 1.5 // The device density as float. Its values can vary between (0.75 and 10)
  },
  pl:[] // JSON array payload - list of event objects, see below
}
```

## Events

### Events meta data

All events have a common first part (don't confuse it with the header explained above). This common section is data which is common for all events by type but is gathered at the moment the event occurred. This common section is a part of the actual event payload.

```javascript
{
  upt:1522, // long - system update in milliseconds
  euid:"euid", // String - event UUID
  url:"app-and://identifier/mainPath/secondaryPath?title=screeName", // String - screenName is passed in the title query Parameter
  scn:4, // int - the number of screens already shown in the session
  c:3, // int - connectivity type [-1 - offline, 0 - error, 1 - wifi, 2 - 2g, 3 - 3g, 4 - 4g]
  ci:"verizon", // String - carrier_id when user is on mobile network
  o:1, // int - orientation [0 = portrait, 1 = landscape]
  vo:{ // object - version origin of the event
    sv:"2.1", // string version of the sdk
    sb:4, // int - sdk build number
    av:"appVersion", // String - application version
    af:"appFlavor" // String - application string - [release/debug/god]
    ab:1 // int - application build number
  },
  sn:1, // int - session id (positive int)
  t:12894726459435 // long - timestamp of the event (in milliseconds)
}
```

All event specific properties are appended to this JSON object.

### App Start

This event describes the absolute start of the app.

The trigger for this event is the absolute start of the app.

This is the first event sent when the SDK is invoked.

```javascript
ea:0 // int - event action - defined above
```

### App Show

This event is sent when the user brings the app in the foreground (switching from another app, exiting lock screen, etc.). This event means the app is focused.

```javascript
ea:1 // int - event action - defined above
```

### App Hide

This event is sent when the user exits (minimizes) the app, or switches to something else. This event means the app is not focused and the session might end, but we have not completely ended the session yet, as the user might return.

```javascript
ea:2 // int - event action - defined above
```

### Screenview

Everything starts with a View event. This is an event which describes the equivalent of a "page view" on the web. This event is sent when the Track Screen API is called.

```javascript
ea:4 // int - event action - defined above
st:"title", // String - screen title
sl:34543 // int - (load time) screen load time (diff between last action and this event)
```

### Tap

Single Finger gesture event, when the user is interacting with a loaded screen. This is an event which describes the equivalent of a "click" in the web.
This event is defined by the following sequence of touch events:

- Touch Down -> N x Touch Move -> Touch Up

```javascript
ea:6 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
ur: true, // boolean - was this a "responsive" touch event (the target view had a handler)
```

### Long press

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Duration: > 500ms
- Distance: < 24 dp

```javascript
ea:8 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
```

### Drag (Slow Swipe)

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Distance: > 48 dp
- Finger Velocity < 100 dp/s

```javascript
ea:9 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
fd: 3, // int - finger direction - [1,2,3,4,5] -> [up, down, left, right, complex_pattern]
tvd:100, // int - target view distance dragged
tvv:100 // int - target view velocity while dragging dp/s
```

### Flick (Fast Swipe)

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Distance: > 48 dp
- Finger Velocity > 100 dp/s

```javascript
ea:10 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view graph path
tvid:"btn_ok", // String - target view id
fd: 3, // int - finger direction - [1,2,3,4,5] -> [up, down, left, right, complex_pattern]
tvd:100, // int - target view distance scrolled
tvv:100 // int - target view velocity while scrolling dp/s
```

### Transaction

To track transactions we provide a public API which can send a transaction object (see section [Track Transactions](/en/ios/track-transactions/)). This object must contain the following parameters:

```javascript
ea:16, // int - event action - defined above
tr:{ // a json object with different properties defining the transaction made
    vl: 20.0, // mandatory - float - the value of the transaction
    cu: 978, // mandatory - int - the ISO 4217 code of the currency of the transaction
    id: "32akjkljklJ575775" // optional - string - an id for the transaction
    }
```

### Dynamic variables

To track dynamic variables we provide a public API (see [Dynamic variables](/en/ios/track-dynamic-variables/)).

```javascript title="Event with a string value" {3}
ea:18, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v:"value" // String - Custom value assigned by client.
```

```javascript title="Event with a number value" {3}
ea:19, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v: 2344 // Integer - Custom value assigned by client.
```

## Reliable targets

:::note[Limitations]
- For now, reliable targets are available for UIKit only.
- If the view doesn't qualify to be a reliable target then we use our current mechanism for zoning
:::

In the Zoning Analysis module, reliable targets are assigned to zones to ensure that a `UIView` remains accessible in the view hierarchy, even if it has been moved within the same page.  
Having a reliable target for a view or a container of views enables the analysis of data across various Snapshots from different dates and versions, including layouts or different A/B testing variations. 

One of the following properties must be assigned for a view to have a reliable target.  
Our SDK will check the properties in this order:

1. [`accessibilityIdentifier`](https://developer.apple.com/documentation/uikit/uiaccessibilityidentification/1623132-accessibilityidentifier)
1. [`restorationIdentifier`](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621499-restorationidentifier)
1. [`tag`](https://developer.apple.com/documentation/uikit/uiview/1622493-tag)

### accessibility Identifier

if the view has `accessibilityIdentifier` it uses it as first priority and provides a short reliable target.

Example:
```swift
                    /*
                    [SalesViewController]

                                ViewOne
                                   |
                                viewTwo
                            /     |      \
                     viewThree viewFour   viewFive
                    */
                    
let viewOne = UIView()
viewOne.accessibilityIdentifier = "rootView"
let viewTwo = UIView()
viewTwo.restorationIdentifier = "dichotomy"
let viewThree = UIButton()
viewThree.accessibilityIdentifier = "on_sale"
let viewFour = UIButton()
viewFour.accessibilityIdentifier = "new_arrivals"
let viewFive = UIButton()
viewFive.accessibilityIdentifier = "for_kids"

viewTwo.addSubview(viewThree)
viewTwo.addSubview(viewFour)
viewTwo.addSubview(viewFive)
viewOne.addSubview(viewTwo)

// viewThree target would be: UIButton[ai:SalesViewController.on_sale]
// viewFour target would be: UIButton[ai:SalesViewController.new_arrivals]

// We change the view hierarchy
viewThree.removeFromSuperview()
viewFour.addSubview(viewThree)

// viewThree target would be: UIButton[ai:SalesViewController.on_sale]
// viewFour target would be: UIButton[ai:SalesViewController.new_arrivals]
```

### restoration Identifier

If the view has `restorationIdentifier` and no `accessibilityIdentifier` then it provides a long reliable target.

```swift

/*
[SalesViewController]

            ViewOne
            /
        viewTwo
        /       \
    viewThree   viewFour
*/

let viewOne = UIView()
viewOne.restorationIdentifier = "trichotomy"
let viewTwo = UIView()
viewTwo.restorationIdentifier = "dichotomy"
let viewThree = UIView()
let viewFour = UIView()

viewTwo.addSubview(viewThree)
viewTwo.addSubview(viewFour)
viewOne.addSubview(viewTwo)

// viewThree target would be: [root]>UIView[ri:SalesViewController.trichotomy]>UIView[ri:SalesViewController.dichotomy]>UIView:eq(0)
// viewFour target would be: [root]>UIView[ri:SalesViewController.trichotomy]>UIView[ri:SalesViewController.dichotomy]>UIView:eq(1)
```

### tag

If the view has no `accessibilityIdentifier` and no `restorationIdentifier` then our SDK will use the `tag` that has been set, and will provide a long reliable target as well.
tag yields the same identifiers as accessibility with a different tag

ex: `[root]>UIView[tg:444]>UIView[tg:223]>UIView:eq(1)`

## Exposure Metrics

In the Zoning Analysis module, Exposure Metrics provide information on the size of the display zone in the application, and data about content exposure in scrolling elements.

### Behavior for scrollable elements

Exposure Metrics data for scrolling is only calculated on the first scrollable element in the screen. Other scrolling elements in the view hierarchy are not taken into account.

This event is defined by the following content:

```javascript
ea:23 // int - event action
dx:10, // int - normalized x content offset
dy:10, // int - normalized y content offset
du: 5, // int - duration of the movement (in milliseconds)
```

#### Exclude `UIScrollView` type object from Exposure Metrics

:::note[Limitations]
- Exclusion mechanism is available for UIKit only, for objects inheriting from `UIScrollView`.
:::

<Tabs>
<TabItem label="Swift">
```swift
let scrollView = UIScrollView() // or UICollectionView, UITableView or any class inheriting from UIScrollView
scrollView.excludeFromExposureMetric()
```
</TabItem>
<TabItem label="Objective-C">
```objective-c
UIScrollView *scrollView = [[UIScrollView alloc] init];
[scrollView excludeFromExposureMetric];
```
</TabItem>
</Tabs>

---

# Compatibility

URL: https://docs.contentsquare.com/en/ios/4-41-0/compatibility/

- **Programming languages:** The iOS SDK supports and tracks content on any screen developed in **Objective-C or Swift (version >= 4.2)**.
- **SwiftUI:** is officially supported
- **iOS version:** starting with SDK 4.17.0 we support **iOS 12.4 and later**
    - Starting with SDK 4.36.0, **no data will be collected for applications running on iOS < 13.0**
    - Current Xcode supports simulators on 12.4 and later
    - ReactNative requires a minimum of iOS 12.4
    - All devices released since 2014 can be updated to iOS 12.4
    - `SFSafariViewController` is **not** supported
## Known limitations and recommendations

### Snapshot fidelity: Combining Visual Effects with Filters

**Symptom:** Some elements of the snapshots may not be visible, such as `UITabBar` buttons.

**Explanation:** Our capturing method prevents to capture views when Visual effects are combined with filters. Our tools captures as much as Xcode’s ‘Debug View Hierarchy’ feature. If you want to preview what is going to be rendered, you can use this feature to visualize your screen. [Capturing a Snapshot of a UIVisualEffectView](https://developer.apple.com/documentation/uikit/uivisualeffectview).

### Snapshot fidelity: Customized layer(s) applied on a container view

**Symptom:** Some elements of the snapshots may not be displayed correctly in the **Zoning Analysis**.

**Explanation:** Our capture method relies on views to determine zoning elements. A view containing subviews is a container and when a container is assigned a customized [layer](https://developer.apple.com/documentation/uikit/uiview/1622436-layer), it may not appear in the **Zoning Analysis**.

**Workaround:** Instead of applying customized layer to the container, prefer applying it on view of type, or subtype, `UIImageView` or `UIControl`.

### Snapshot fidelity: Floating header/footer missing in Zoning

**Symptom:** Some elements of the snapshots don't exist in the **Zoning Analysis**.

**Explanation:** The **Zoning Analysis** module does not support `UITableViewHeaderFooterView` in `UITableView` and `UICollectionReusableView` in `UICollectionView` due to their highly dynamic memory and rendering behavior.

### Gestures not attached to `UIImageView`

**Symptom:** When analysing the tap rate on an image, we see 0% when we know it is not possible.

**Explanation:** By default `UIImageView` have their `isUserInteractionEnabled` property set to false ([See Apple documentation](https://developer.apple.com/documentation/uikit/uiimageview/1621063-isuserinteractionenabled)).
This means that the `UIImageView` won’t receive any input event. All events will be handled by the first parent to have `isUserInteractionEnabled` set to true (usually the first parent will do).

**Workaround:** Create a zone on the parent view to get the taps on the image.

### `UICollectionViewCompositionalLayout` TVP lack of consistency

**Explanation:** As explained in the [Apple documentation](https://developer.apple.com/documentation/uikit/uicollectionviewcompositionallayout), `UICollectionViewCompositionalLayout` is a highly dynamic layout creation object. We are not able to ensure TVP value is the same between different usages.

### Zoning Limitation in SwiftUI with scrolling (Lazy)Stack and (Lazy)Grid

- **Snapshot and Gesture Tracking Limitations:**
  - Using `LazyStack`, or `LazyGrid` nested in a `ScrollView` may present limitations in snapshot and gesture tracking due to differences in memory management compared to UIKit.
  - Intricate hierarchies of `LazyStacks` or `LazyGrids` can lead to inconsistent identification of elements, impacting the reliability of element identification. **Prefer to use single layered Lazy components**, when possible.

- **Rotation Limitation:**
  - Unique identification of elements within SwiftUI `Stack`, `Grid`, `LazyStack`, or `LazyGrid` is not guaranteed after a rotation, so, **rotation is not supported** for `Stack`, `Grid`, `LazyStack`, or `LazyGrid`.

- **Scrolling Element Offset Limitation:**
  - The consistency of unique identifiers is not guaranteed when the scrolling element is displayed starting at an offset different than zero.

Check the following Help Center article for more information about the symptom, root cause and potential mitigation solutions: [I can't create a zone on a list element on iOS (SwiftUI)](https://support.contentsquare.com/hc/en-gb/articles/4408117004690)

---

# Disabling Automatic SDK Initialization

URL: https://docs.contentsquare.com/en/ios/4-41-0/disable-autostart/

If you prefer to control when the SDK starts, you can disable the autostart feature and programmatically start the SDK when needed.
The first step is to add the required key to your `Info.plist`. The key is `CSDisableAutostart` of type boolean. To disable the autostart, you need to set its value to `true`:

- Disable autostart using Xcode:

    ![](~/assets/ios/disable-autostart-xcode.png "Disable autostart using Xcode")

- Disable autostart using a text editor:

    ```xml title="Info.plist"
    <key>CSDisableAutostart</key>
    <true/>
    ```

Then just call `start` in the `application:didFinishLaunchingWithOptions:` of your `UIApplicationDelegate` like this:

```swift
Contentsquare.start()
```

When you call the start method, the SDK automatically starts tracking users' interactions with the app (gestures, lifecycle events and crashes).

---

# Error Analysis

URL: https://docs.contentsquare.com/en/ios/4-41-0/error-analysis/

<Render file="en/plans/dem"/>
## Prerequisites

### Screen tracking implemented

Tracking will start at the 1st screenview event, it is required to have screen tracking implemented. Make sure to follow the [iOS Track](/en/ios/track-screens/) screens sections.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time (or choose to take this update as an opportunity to review your Privacy related implementation), make sure to follow the [iOS Privacy](/en/ios/privacy/) section and use the [Opt-in API](/en/ios/privacy/#opt-in) to get the user consent, otherwise no data will be collected.

## API errors

### Automatic collection
API errors automatically collects failed network requests that use `URLSession`.

### Disable automatic collection 
Automatic collection can be disabled by setting `CSDisableAPIErrorsAutoCollection` to `YES` in the Info.plist.

### Add custom monitoring for specific network requests 
The API errors automatically collects most network requests for your app. However, some requests might not be collected or you might use a different library to make network requests. In these cases, you can use the following API `HTTPMetric` to manually collect data.

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
    ```swift
    guard let url = URL(string: "https://www.apple.com") else { return }
    let request: URLRequest = URLRequest(url: url)
    let metric = HTTPMetric(request: request)
    let session = URLSession(configuration: .default)
    let dataTask = session.dataTask(with: request) { (urlData, response, error) in
        if let httpResponse = response as? HTTPURLResponse {
            metric.setStatusCode(httpResponse.statusCode)
        }
        metric.stop()
    }
    dataTask.resume()
    ```
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c
    NSURL *url = [NSURL URLWithString:@"https://www.apple.com"];
    NSURLRequest *request = [[NSURLRequest alloc]initWithURL:url];
    HTTPMetric *metric = [[HTTPMetric alloc]initWithRequest:request];
    NSURLSession *session = [NSURLSession sessionWithConfiguration:NSURLSessionConfiguration.defaultSessionConfiguration];
    NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
        NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
        [metric setStatusCode:httpResponse.statusCode];
        [metric stop];
    }];
    [task resume];
    ```
  </TabItem>
</Tabs>

### Removing Personal Data in request URL path

By default, the API Errors feature collects the URL path of the failed API requests. To prevent the collection of Personal Data in the URL path, you can rewrite the request URL path with the `setURLMaskingPatterns` SDK API.
```swift
/// This API must be called at App launch.
public static func setURLMaskingPatterns(_ patterns: [String])
```

Replace a step of the path - meaning between two slashes (/) - containing Personal Data with a variable:

- `:user_id` becomes CS_ANONYMIZED_USER_ID
- `:address` becomes CS_ANONYMIZED_ADDRESS

#### Example

```swift
ErrorAnalysis.setURLMaskingPatterns([
    "https://www.contentsquare.com/users/:user_id/address/:address"
])
```

| URL before masking | URL after masking |
|---|---|
| `https://www.contentsquare.com/users/123/address/castle+black` | `https://www.contentsquare.com/users/CS_ANONYMIZED_USER_ID/address/CS_ANONYMIZED_ADDRESS` |

### Validate API error integration

#### Validate API error collection is enabled

If in-app features are enabled, a log should appear indicating if API errors is enabled or disabled:

```
CSLIB ℹ️ Info: API Errors is enabled
```

#### Validate API error collection
If you have [logging enabled](/en/android/in-app-features/#debugging-and-logging), you will see API errors:
- Displayed in [Contentsquare Log Visualizer](/en/android/in-app-features/#viewing-logs-in-the-contentsquare-platform).
- As an Info log:

```
CSLIB ℹ️ Info: API Error - GET 401 https://api.client.com
```

### How API errors works

#### Initialization
The way our SDK works is by auto-starting with the application launch and automatically collects failed network requests that use `URLSession`.

#### Configuration
Once started, our SDK fetches its config from our servers.
It will start collecting data from network events if the API errors setting is enabled in the config (this is handled by the Contentsquare team).

#### API errors collection
The SDK monitors only the API errors with response code equal or above 400, and generates analytics data. 
These events are then locally stored, and eventually sent to our servers in batches. 

:::warning
To make sure API errors occurring at app launch are correctly tracked, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before. See [when to send your first screenview](/en/ios/track-screens/#when-to-send-your-first-screenview) for more details.
:::

#### Sending API errors data
For each network error, a new event will be sent in analytics and Session Replay data. Check the following sections to learn more about how data is processed and sent:
 - [Analytics requests](/en/ios/how-the-sdk-works/#sending-data)
 - [Session Replay requests](/en/ios/session-replay#requests)

### API Troubleshooting Details

API errors troubleshooting details enables you to collect more information about API errors so you can troubleshoot errors faster.

With this feature you will be able to see three types of additional API error details in the Event Stream of Session Replay.

 - The HTTP headers of the request and the response.
 - The body (the data sent by the request or received in the response).
 - The query parameters of the request endpoint (of the URL of the information you request for).

:::note
This feature is only available for Experience Monitoring Mobile customers.  
Contact your CSM for more details on the validation and implementation process.
:::

See [API Troubleshooting Details](https://support.contentsquare.com/hc/en-gb/articles/6553281476124) for more details.

### Collected data points
Only network calls with error (response code above 400) will be collected.
Here is the list of data collected:
 - URL (without query strings)
 - HTTP method
 - Response code
 - Timestamp of the request
 - Timestamp of the response
 - HTTP headers of the request
 - HTTP headers of the response
 - HTTP body of the request
 - HTTP body of the response
 - Query parameters of the request endpoint

### Known limitations and recommendations

#### Automatic collection limitations

The auto collection doesn't work for the following methods:

    ```swift
    func data(for request: URLRequest) async throws -> (Data, URLResponse)
    func data(from url: URL) async throws -> (Data, URLResponse)
    func upload(for request: URLRequest, from bodyData: Data) async throws -> (Data, URLResponse)
    func upload(for request: URLRequest, fromFile fileURL: URL) async throws -> (Data, URLResponse)
    func download(for request: URLRequest) async throws -> (URL, URLResponse)
    func download(from url: URL) async throws -> (URL, URLResponse)

    func downloadTask(withResumeData: Data) -> URLSessionDownloadTask
    func downloadTask(withResumeData: Data, completionHandler: (URL?, URLResponse?, Error?) -> Void) -> URLSessionDownloadTask

    func streamTask(withHostName: String, port: Int) -> URLSessionStreamTask
    func streamTask(with: NetService) -> URLSessionStreamTask

    func webSocketTask(with: URL) -> URLSessionWebSocketTask
    func webSocketTask(with: URLRequest) -> URLSessionWebSocketTask
    func webSocketTask(with: URL, protocols: [String]) -> URLSessionWebSocketTask
    ```

    **Workaround:** For the `async` methods, use the corresponding Contentsquare methods:

    ```swift
    try await URLSession.shared.cs.data(for: request)
    try await URLSession.shared.cs.data(from: url)
    try await URLSession.shared.cs.upload(for: request, from: data)
    try await URLSession.shared.cs.upload(for: request, fromFile: file)
    try await URLSession.shared.cs.download(for: request)
    try await URLSession.shared.cs.download(from: url)
    ```
    For other methods, use the custom monitoring APIs.

#### Conflict with Firebase Performance SDK on auto-collection

API errors is compatible with Firebase Performance auto-collection, but the HTTP body from the response won't be collected by the Error Analysis SDK.

**Workaround**: [Disable auto collection](#disable-automatic-collection) and use [API `HTTPMetric`](#add-custom-monitoring-for-specific-network-requests) to manually collect data.

It may also not be compatible with other network auto collection tools.

## Crash Reporter

### Setup Firebase Crashlytics compatibility mode

The Contentsquare Crash Reporter is compatible with [Firebase Crashlytics](https://firebase.google.com/docs/crashlytics) as long as it is initialized after Contentsquare. If Firebase Crashlytics is initialized first, some crashes may not be reported in Crashlytics.

#### Basic Setup

To make both SDKs compatible, use the `onCrashReporterStart()` API to launch Firebase Crashlytics after the Contentsquare Crash Reporter has started:

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
    ```swift
    ErrorAnalysis.onCrashReporterStart { _ in
      FirebaseApp.configure()
    }
    ```
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c
    [ErrorAnalysis onCrashReporterStart:^(BOOL _) {
      [FIRApp configure];
    }];
    ```
  </TabItem>
</Tabs>

#### Integration with Firebase Crashlytics and Firebase Performance

When using Firebase Crashlytics, Firebase Performance, and the Contentsquare Crash Reporter, initializing Firebase Performance traces before all SDKs are fully initialized may lead to app crashes.

Recommended setup:
 - Initialize Firebase Crashlytics first
 - Then initialize Contentsquare Crash Reporter
 - Trigger Firebase Performance traces only after `FirebaseApp.configure()`

:::note
Reach out to your Contentsquare contact to learn more about potential alternatives.
:::

### Upload dSYMs

*"When Xcode compiles your source code into machine code, it generates a list of symbols in your app — class names, global variables, and method and function names. These symbols correspond to the file and line numbers where they're defined; this association creates a debug symbol"* 
[See Apple's documentation for more details](https://developer.apple.com/documentation/xcode/building-your-app-to-include-debugging-information/).

When an app crashes, the operating system collects diagnostic information about what the app was doing at the time of crash. Some of the most important parts of the crash report are presented as hexadecimal addresses. To translate those addresses into readable function names and line numbers from your source code, a process called symbolication is used. 
[See Apple's documentation for more details](https://developer.apple.com/documentation/xcode/adding-identifiable-symbol-names-to-a-crash-report/).

In order to symbolicate the crashes reported by a specific version of your app and make them readable, you need to provide the symbol files (dSYMs) that were generated when your app was built. 

#### Build your app with dSYMs

Make sure Xcode is generating dSYMs for your app:

1. Open your project in Xcode.
1. Select the project file in the Xcode Navigator.
1. Select your main target.
1. Select the `Build Settings` tab and click `All` to show all the build settings.
1. Filter by `Debug Information Format`.
1. Set `Debug Information Format` to `DWARF with dSYM File` for all the build types you want to generate dSYMs.
1. Rebuild your main target.

#### Locate dSYMs

##### Download dSYMs from the App Store

If you build your main target using bitcode (`Bitcode Enabled` turned on in build settings) and you uploaded your app's symbols to the App Store, you need to download the dSYMs from the App Store:

1. Log in to [App Store Connect](https://appstoreconnect.apple.com/login), then select `My Apps`.
1. Select your app from the grid.
1. Select the build you want to download a dSYM for.
1. Click `Build Details` > `Download dSYM`.

In case you use bitcode to build your main target but you didn't upload your dSYMs to the App Store, you need to [find your dSYMs on your local machine](#find-dsyms-on-your-local-machine) and [restore hidden symbols using the BCSymbolMaps](#restore-hidden-symbols-using-bcsymbolmaps) Xcode generates.

##### Find dSYMs on your local machine

You can find the dSYMs in the `.xcarchive` directory on disk:

1. In Xcode, open the Organizer window (_Window -> Organizer_).
1. Select your app from the list.
1. Control-click an archive and select `Show in Finder`.
1. A Finder window should appear. Control-click the `xcarchive` package and select `Show Package Contents`.
1. There should be a dSYMs directory that contains the dSYMs generated in Xcode's archiving process. If you use the `Download Debug Symbols` option from Xcode's organizer, the recompiled bitcode dSYMs are also downloaded to this directory.

#### Restore hidden symbols using BCSymbolMaps

Restoring hidden symbols using BCSymbolMaps is only required if you built your main target using bitcode (`Bitcode Enabled` turned on in build settings). If you used bitcode but downloaded the dSYMs from the App Store, the dSYMs will be recompiled and you can skip this step.

To restore hidden symbols you can run the following command:

```shell
dsymutil -symbol-map /path/to/archive/BCSymbolMaps /path/to/dsym.dSYM
```

#### Get project ID
1. Login to the Contentsquare platform on https://app.contentsquare.com
1. Make sure to be on the right project
1. The project ID can be found in the URL query parameter `project`: `https://app.contentsquare.com/#/{MODULE_NAME}?project={PROJECT_ID}&hash={HASH}]`

#### Get project credentials

Follow the dedicated documentation from the Help Center to get the **client ID** and **client Secret**: [How to create API credentials](https://support.contentsquare.com/hc/en-gb/articles/9292880837660).

#### Use script to upload dSYMs

To upload dSYMs to Error Analysis you need to use the provided `upload-symbols` script. You need to provide the path where the dSYM files are located as a positional argument, and the Project ID, Client ID and Client Secret either as keyword arguments or set them as environment variables.

Additionally, you can use a proxy by specifying the proxy URL. Print more detailed logs by using the `--verbose` flag.

| Key             | Environment Key              |
| --------------- | ---------------------------- |
| --project-id    | ERROR_ANALYSIS_PROJECT_ID    | 
| --client-id     | ERROR_ANALYSIS_CLIENT_ID     |
| --client-secret | ERROR_ANALYSIS_CLIENT_SECRET |
| --proxy         | ERROR_ANALYSIS_PROXY_URL     |

If both are provided, the keyword arguments will prevail over the environment variables. 

#### Set up Xcode to automatically upload dSYM files
The following steps describe how to configure Xcode to automatically upload your dSYMs whenever you build your app.

1. Open your project's Xcode workspace, then select its project file in the left Project navigator.
1. From the TARGETS list, select your main build target.
1. Click the **Build Phases** tab, then complete the following steps so that Xcode can process your dSYMs and upload the files.
    1. Click + > **New Run Script Phase**.
    Make sure this new Run Script phase is your project's last build phase; otherwise, dSYMs might not be ready.
    1. Expand the new **Run Script** section.
    1. In the script field (located under the Shell label), add the following run script.

<Tabs>
  <TabItem label="Swift Package Manager">
    If you are using SPM to integrate the Error Analysis SDK, the `upload-symbols` script will be located in the SPM checkout path for the SDK. 
    Copy the following script.
    ```shell
    # Only upload symbols for App Store build.
    # Replace `Release` with the configuration used when uploading to the App Store.
    if [ "${CONFIGURATION}" != "Release" ]; then
    exit 0
    fi
    ${BUILD_DIR%Build/*}SourcePackages/checkouts/CS_iOS_SDK/scripts/upload-symbols "${DWARF_DSYM_FOLDER_PATH}" --project-id "PROJECT_ID" --client-id "CLIENT_ID" --client-secret "CLIENT_SECRET"
    ```
  </TabItem>
  <TabItem label="Other dependency managers">
    If you are using CocoaPods or you are manually integrating the Error Analysis SDK, you will need to download the `upload-symbols` script from the latest SDK release.

    1. Go to the [CS_iOS_SDK releases page](https://github.com/ContentSquare/CS_iOS_SDK/releases).
    1. Click on `Show all assets` located at the bottom of the Assets list of the latest release.
    1. Click on `upload-symbols-script.zip`.
    1. Unzip the script.
    1. Move the script to your project root, same location as xxxx.xcodeproj.

    Copy the following script.

    ```shell
    # Only upload symbols for App Store build.
    # Replace `Release` with the configuration used when uploading to the App Store.
    if [ "${CONFIGURATION}" != "Release" ]; then
      exit 0
    fi
    ${SRCROOT}/upload-symbols "${DWARF_DSYM_FOLDER_PATH}" --project-id "PROJECT_ID" --client-id "CLIENT_ID" --client-secret "CLIENT_SECRET"
    ```
  </TabItem>
</Tabs>
In the *Input Files* section, make sure you have the paths for the locations of the following files:
```
${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}
```
```
${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Resources/DWARF/${PRODUCT_NAME}
```
```
${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}/Contents/Info.plist
```
```
$(TARGET_BUILD_DIR)/$(EXECUTABLE_PATH)
```
Make sure *User Script Sandboxing* is set to NO in Xcode Build Settings. 
if you don't want to disabled it, you need to add the paths of all your dSYMs files one by one in *Input Files*.

#### Use fastlane to upload dSYMs

The instructions require fastlane `1.93.0` or later.

1. Add fastlane plugin to your project:
   1. Run `fastlane add_plugin fastlane-plugin-contentsquare`.
   1. Select `Git URL` and input https://github.com/ContentSquare/contentsquare-fastlane-plugin.git.
   See [fastlane Plugins](https://docs.fastlane.tools/plugins/using-plugins/) for more information.
1. Call fastlane plugin in your build process: 
   `upload_symbols_to_error_analysis(project_id: your_project_id, client_id: "your_client_id", client_secret: "your_client_secret")`

:::note
You need to use `bundle exec fastlane [lane]` to run fastlane.
::: 

### Validate crash reporter integration

#### Validate crash collection is activated

Enabling crash reporting will conflict with any attached debuggers, so make sure a debugger isn't attached when you crash the app. In case a debugger is attached to the device, Crash Reporter won't be initialized and a log will be printed in the console:

```
CSLIB ℹ️ Info: Debugger present, crash reporter is not initialized
```

To test if Crash Reporter is working properly, you first need to disconnect your test device or simulator from Xcode debugger:

 - Tap on the _Edit scheme..._ option of your current scheme
 - Disable the _Debug executable_ option in your scheme configuration.
 - Build and run your current scheme. 

If Crash Reporter is successfully initialized when you launch your application, you should see a log printed in the console:

```
CSLIB ℹ️ Info: Crash reporter is initialized
```

Alternatively, you can detach your application from Xcode debugger by stopping it after it is launched. This way Crash Reporter will be initialized and will start reporting crashes, but you won't be able to see the logs printed in the console:

 - Build and run your current scheme.
 - Wait until the app is up and running.
 - Click on Stop running the scheme.
 - Open the app directly from your test device or simulator.

#### Validate crash reporting

Run your application and force a crash (you can do it by adding a `fatalError()` in your code). Launch the application again using Xcode and you should see a log printed in the console that indicates that a crash has been detected and sent: 

```
CSLIB ℹ️ Info: Crash event detected and sent for userID: <user-id>, session: <session-number> on screen: <screen-number> - crashID: <crash-id>
```

### How Crash Reporter works

#### Initialization
Crash Reporter is started automatically and begins to report crashes when your application is launched.

#### Configuration
Once started, our SDK fetches its configuration from our servers.
It will start reporting crashes if the Crash Reporter setting is enabled (this is handled by the Contentsquare team).

#### Reporting

When a crash occurs, a report is created and stored locally in the device. Once the app is launched again, the report is sent to our servers and then removed from the local storage.

:::warning
To make sure crashes occurring at app launch are correctly tracked, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before. See [when to send your first screenview](/en/ios/track-screens/#when-to-send-your-first-screenview) for more details.
:::

#### Sending crash data

For each crash, a new event will be sent to analytics and Session Replay data when the app is launched again after the crash occurred and the network conditions allow for the server to be reached.

Our requests use [`lowPriority`](https://developer.apple.com/documentation/foundation/urlsessiontask/1411509-lowpriority).

### Collected data points

Crash Reporter handles multiple types of crashes, including:
 - Mach kernel exceptions
 - Fatal signals
 - C++ exceptions
 - Objective-C exceptions

For each crash we collect information of the application, system, process, threads, stack traces and some other events metadata you can find in [collected data points](/en/ios/collected-data-points/).

### Known limitations and recommendations

#### Compatibility with other crash reporters

Beyond Firebase Crashlytics (see [Setup Firebase Crashlytics compatibility mode](#setup-firebase-crashlytics-compatibility-mode)), the Contentsquare Crash Reporter is not compatible with other crash reporters. For more details, reach out to your Contentsquare contact.

## WebView errors

Errors occurring in web pages loaded in WebViews can be collected if Webview tracking is set up in your app.

See 📚 [Webview Tracking implementation](/en/webview-tracking-web-tag/).

Once WebView tracking is implemented, errors collection can be set up.

See 📚 [Errors (in WebView)](/en/webview-tracking-web-tag/error-analysis/)

## Impact on Performance

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well. These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.

The following performance results were obtained under the following conditions: 

| Condition                                   | Value                   |
| --------------------------------------------| ----------------------- |
| Device model                                | iPhone 11 Pro 64GB |
| iOS version                                 | 16.5                    |
| Test App built using Xcode version          | 15.3                    |
| Test App built with Swift version           | 5.8                     |

:::note
The numbers provided below will vary depending on the user's device, iOS version, SDK version, as well as if you use Swift or not, which Swift version you use if you do, if you enabled bitcode or not and which options you used when building your IPA for App Store distribution.
:::

| Property                                                                    | Value       |
| --------------------------------------------------------------------------- | ----------- |
| Max RAM usage                                                               | &lt;2MB     |
| Max SDK CPU peak on event                                                   | &lt;2%      |

## Migrating from \<\= 4.28.0
Until version 4.28.0 of the Contentsquare SDK, the Error Analysis add-on was provided as a distinct artifact. To integrate it into your application, a dedicated XCFramework dependency was required and could be installed through 
SPM/Cocoapods/Carthage or manually. Starting from version 4.29.0, this is no longer the case as Error Analysis is included in main package.

If you had previously integrated the Error Analysis module into your application, you will need to remove it from your dependencies. Depending on how you integrated Error Analysis you can follow the instructions below:
<Tabs>
  <TabItem label="SPM">
      In the app’s targets `General settings tab, in the Frameworks, Libraries, and Embedded Content` section remove `ContentsquareErrorAnalysisModule`.
  </TabItem>
  <TabItem label="Cocoapods">
      ```ruby
      // Remove one of the following line from your Podfile
      pod 'CS_ErrorAnalysis'
      pod 'CS_ErrorAnalysis_STATIC'
      ```
      run command `pod update`
  </TabItem>
  <TabItem label="Carthage">

      Update the reference in your Cartfile:

      ```diff del={1} ins={2} title="Cartfile"
      binary "https://raw.githubusercontent.com/ContentSquare/CS_iOS_SDK/master/carthage/ContentsquareErrorAnalysisModule.json"
      github "ContentSquare/CS_iOS_CrashReporter" ~> 0.0.3
      ```
  </TabItem>
  <TabItem label="Manually">
    1. Remove `ContentsquareErrorAnalysisModule.xcframework` stored in the project folder
    1. Select the target of your project in Xcode and go to tab `General` -> `Frameworks, Libraries and Embedded Content` and remove `ContentsquareErrorAnalysisModule.xcframework` by selecting it and clicking on `-`
    1. Select the target of your project in Xcode and go to tab `General` -> `Frameworks, Libraries and Embedded Content` and add `CSCrashReporter.xcframework` by clicking on `+` then `Add Other...` -> `Add Files...`
    1. Clean build folder (in Xcode `Product` > `Clean Build Folder...`) and build/run your app
  </TabItem>
</Tabs>

Once done you can remove all the `import ContentsquareErrorAnalysisModule` in the source code of your app.

---

# How the SDK works

URL: https://docs.contentsquare.com/en/ios/4-41-0/how-the-sdk-works/

## Initialization
The way our SDK works is by auto-starting with the application launch and attaching to the current process in order to intercept the events and gestures we are interested in.

See [Session Replay Initialization](/en/ios/session-replay/#initialization) to learn how Session Replay is initialized.

## Configuration

Once started, our SDK fetches its configuration from our servers.  
Then, depending on the segmentation size (defined by our team when you sign a contract) and the user consent status, it will start collecting analytics data from system and user events it detects from the runtime.

## Data collection

### Analytics data collection

The SDK monitors the application lifecycle events, the view hierarchy, and generates data from the behavior of the app, the content of the screen and the user interactions.  
These events are then locally stored, and eventually sent to our servers in batches. We then aggregate that data to create usable visual information into our Web Application, which you use to gather insights.

### Session Replay data collection

See [Session Replay Initialization](/en/ios/session-replay/#data-collection) to learn how Session Replay data collection works. 

## Sending data

### Sending analytics data
Analytics data are sent in batches of maximum 50 events. Requests are triggered when network conditions allow for the server to be reached and:
- The current batch of events has reached 50
- Or the app is put in background

Our requests use [`lowPriority`](https://developer.apple.com/documentation/foundation/urlsessiontask/1411509-lowpriority).

### Sending Session Replay Data
See [Session Replay Requests](/en/ios/session-replay/#requests) to learn more about how Session Replay data is sent.

### Sending crash Data
See [Send Crash data](/en/ios/error-analysis/#sending-crash-data) to learn more about how crash data is sent. 

## Session definition
<Render file="en/mobile/how-the-sdk-works/session-definition"/>

---

# Impact on performance

URL: https://docs.contentsquare.com/en/ios/4-41-0/impact-on-performance/

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well. These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.
The following performance results were obtained under the following conditions: 

| Condition                                   | Value  |
| --------------------------------------------| ------ |
| Device model                                | iPhone 11 Pro                |
| iOS version                                 | 16.5                    |
| Test App built using Xcode version          | 15.3                    |
| Test App built with Swift version           | 5.8                     |

We conducted the tests using a default `Master-Detail` app built using AdHoc distribution with no app thinning and with Swift symbols stripped. In the app, the SDK was making calls to the Public APIs, running and collecting data in its default state.

:::note
The numbers provided below will vary depending on the user's device, iOS version, SDK version, as well as if you use Swift or not, which Swift version you use if you do, if you enabled bitcode or not and which options you used when building your IPA for App Store distribution.
:::

| Property                                                                    | Value  |
| --------------------------------------------------------------------------- | ------ |
| SDK size (installed size, no Bitcode)                                                                                     | 5.2Mb    |
| Max RAM usage                                                                                                             | &lt;2Mb  |
| Max SDK CPU peak on event                                                                                                 | &lt;3%   |
| Data transmitted over network for a default batch size of 50 events<br/>The size of the batch can be customized if needed | ~29kb    |

---

# In-app features

URL: https://docs.contentsquare.com/en/ios/4-41-0/in-app-features/

Alongside its tracking capabilities, the SDK embeds some features aimed at Contentsquare users such as [Snapshot Capture](/en/react-native/in-app-features/#snapshot-capture) and [SDK Logs](#debugging-and-logging).
## Implement in-app features

In order to allow Contentsquare users to enable in-app features, you must perform 2 implementation tasks:

1. [Add the custom URL scheme in your app Info](#1-add-the-custom-url-scheme-in-your-app-info)
1. [Call the SDK when the app is launched via a deeplink](#2-call-the-sdk-when-the-app-is-launched-via-a-deeplink)

### 1. Add the custom URL scheme in your app Info

You have to allow your app to be opened via a custom URL scheme which can be done using one of the following methods:

#### Xcode

1. Open your project settings
1. Select the app target
1. Select the `Info` settings
1. Scroll to `URL Types`
1. Set the URL scheme to `cs-$(PRODUCT_BUNDLE_IDENTIFIER)`

#### Text editor

1. Open the `Info.plist` of your project
1. Add the following snippet:

    ```xml title="Info.plist"
    <key>CFBundleURLTypes</key>
    <array>
        <dict>
            <key>CFBundleURLSchemes</key>
            <array>
                <string>cs-$(PRODUCT_BUNDLE_IDENTIFIER)</string>
            </array>
        </dict>
    </array>
    ```

### 2. Call the SDK when the app is launched via a deeplink

Depending on the project, there are multiple ways to handle the deeplink opening. Choose the method matching your project structure:

<Tabs>
  <TabItem label="AppDelegate">
  In your `AppDelegate` class, complete or implement the function `application(app, open url:, options:)` with: `Contentsquare.handle(url: url)`
  </TabItem>
  <TabItem label="SceneDelegate">
  In your `WindowSceneDelegate` class, you need to:

  1. Update `func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)` with:

      ```swift
      if let url = connectionOptions.urlContexts.first?.url {
            Contentsquare.handle(url: url)
      }
      ```

  1. Complete or implement `func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>)` with:

      ```swift
      if let url = URLContexts.first?.url {
          Contentsquare.handle(url: url)
      }
      ```
  </TabItem>
  <TabItem label="SwiftUI">
  In the `body` of your main App struct, add the `onOpenURL` modifier and call the `Contentsquare` SDK to handle the URL:

  ```swift
  @main
  struct MyApp: App {
    var body: some Scene {
      WindowGroup {
        MyView()
          .onOpenURL { url in
            Contentsquare.handle(url: url)
          }
      }
    }
  }
  ```
  </TabItem>
</Tabs>

### Enable in-app features

Once the implementation is done, in-app features can be enabled in different ways:

#### Scan the QR code

If you have access to the Contentsquare platform, you can open the in-app features modal from the menu and scan the QR code displayed with your iPhone. 

![](~/assets/ios/in-app-features-ios-gif.gif)

#### Use the custom link for simulator

If you have access to the Contentsquare platform, you can open the in-app features modal from the menu and select "Copy link" (to copy the deeplink) and paste it in Safari on your Simulator to trigger the in-app features.

![](~/assets/ios/enable-in-app-features-ios-simulator.gif)

:::note
If you don't have access to the Contentsquare platform, you can ask the Contentsquare team to share the link with you.
:::

#### Using the Terminal

In a Terminal console, open an URL in your current simulator with the following command (replacing `CUSTOM_LINK` with yours):

```shell
xcrun simctl openurl booted "CUSTOM_LINK"
```

### Debugging and Logging

Contentsquare provides Logging capabilities that allow you to see the raw event data logged by your app in the macOS Console App, Xcode or in the Contentsquare platform. Use this for validation purposes during the instrumentation phase of development and can help you discover errors and mistakes in your analytics implementation and confirm that all events are being logged correctly.
 
#### Viewing Logs in Xcode or the macOS Console app

By default, almost all logs are disabled. There is only one log that is always visible to notify that the SDK has started:

```
CSLIB ℹ️ Info: Contentsquare SDK v{{SDKversionNumber}} starting in app: {{bundleID}}
```

In order to enable all logs, activate [in-app features](#enable-in-app-features). Logging is directly linked to in-app features state: it starts when in-app features are enabled and stops when you disable in-app features.

To view logs:

1. Make sure the device you are using is plugged to your Mac or is on the same Wi-Fi network (skip this step if you are using a simulator)
1. Start the macOS Console app *(make sure that info messages are included: [Choose Action > Include Info Messages](https://support.apple.com/guide/console/customize-the-log-window-cnsl35710/mac))* or Xcode.
1. Filter logs on `CSLIB`

![](~/assets/ios/logs-ios.png)

#### Viewing logs in the Contentsquare platform

To view logs directly on the platform, you can use Log visualizer.
Log visualizer is a helper tool to see SDK logs without logging tools.
It requires having platform access for your project and enabling in-app features.
See the [SDK Log Visualizer Help Center Article](https://support.contentsquare.com/hc/en-gb/articles/4408408544530) for more information.

### Snapshot Capture

In order to unlock the full data-visualization capabilities of Contentsquare, the SDK provides a way to capture snapshots of your app screens. These snapshots can only be taken by Contentsquare's users on their device. They are not captured from your end-users device. It means your Personal Data is safe, as long as you use a test user account.

:::warning
For snapshot capture to work, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

:::note
Snapshots require a screenview event to be triggered before they can be captured.
:::

![](~/assets/ios/snapshot-capture-ios.gif)

Snapshots are used in the **Zoning Analysis** module to look at zone-level metrics (Tap rate, Swipe rate...):

![](~/assets/ios/snapshot-use-in-zoning.gif)

---

# Privacy

URL: https://docs.contentsquare.com/en/ios/4-41-0/privacy/

To learn about Contentsquare privacy practices, see our [Privacy Center](https://contentsquare.com/privacy-center/) and [Privacy Policy](https://contentsquare.com/privacy-center/privacy-policy/).
## Handling User Consent

:::note
The App Store guidelines regarding privacy ([see section 5.1.1 ii Permissions](https://developer.apple.com/app-store/review/guidelines/#privacy)) states that:  
*"Apps that collect user or usage data must secure user consent for the collection, even if such data is considered to be anonymous at the time of or immediately following collection."*
:::

Contentsquare collects usage data on your app. **By default, the SDK will consider every new user to be opted-out.** To start tracking, the SDK [Opt-in API](#opt-in) must be called.  
You are responsible for handling the UI asking users for their consent and allowing them to manage their privacy settings. Use the Contentsquare [SDK APIs](#privacy-apis) to pass the user decision to the SDK.

:::note
If for some reason you think that securing user consent is not required for your app, discuss it during the Implementation process with your main contact (as this would go against Apple Privacy guidelines).
:::

## Privacy APIs

Contentsquare provides APIs to manage the user consent.

### Opt-in

Use the Opt-in API to get user consent. Calling this API will generate a user ID and initiate tracking.
<Tabs syncKey="ios-lang">
    <TabItem label="Swift">
        ```swift
        Contentsquare.optIn()
        ```
    </TabItem>
    <TabItem label="Objective-C">
        ```objective-c
        [Contentsquare optIn];
        ```
    </TabItem>
</Tabs>

### Opt-Out

When this API is called, tracking stops immediately, all settings are reset (Session number, Page number...) and all files and directory regarding to Contentsquare are deleted. This means that the user ID is deleted. The SDK will never track and collect any data from the user's phone unless the Opt-in API is called again.

<Tabs syncKey="ios-lang">
    <TabItem label="Swift">
        ```swift
        Contentsquare.optOut()
        ```
    </TabItem>
    <TabItem label="Objective-C">
        ```objective-c
        [Contentsquare optOut];
        ```
    </TabItem>
</Tabs>

### Get Contentsquare User ID

Use this API to get the [Contentsquare User ID](#contentsquare-user-id). This can be used to make a data request to Contentsquare as part of an end user request.

<Tabs syncKey="ios-lang">
    <TabItem label="Swift">
        ```swift
        Contentsquare.userID()
        ```
    </TabItem>
    <TabItem label="Objective-C">
        ```objective-c
        [Contentsquare userID];
        ```
    </TabItem>
</Tabs>

 :::note
You are able to get an ID only if the user is not Opted-out.
:::

### Enrichment API

[The Enrichment API](/en/api/enrichment) allows for enriching the behavioural data tracked by Contentsquare client-side, with other session-based data that can be sent server-side.

During a visit on an app, you can interact with Contentsquare’s SDK to pull those identifiers with the following SDK APIs:

```swift
let projectID = Contentsquare.projectID
let sessionNumber = Contentsquare.sessionNumber
// store these Contentsquare session identifiers in your backend
```

### Pause / Resume Tracking

Contentsquare does not collect any humanly readable text from the user's screens.  
To completely exclude areas of the App from tracking, use the pause and resume tracking APIs.
When `stop/pause` is called, the SDK pauses all tracking (Analytics, Session Replay, Errors).  
When `resume` is called, the SDK resumes all tracking (Analytics, Session Replay, Errors).  

<Tabs syncKey="ios-lang">
    <TabItem label="Swift">
        ```swift
        Contentsquare.stopTracking()
        // ...
        Contentsquare.resumeTracking()
        ```
    </TabItem>
    <TabItem label="Objective-C">
        ```objective-c
        [Contentsquare stopTracking];
        // ...
        [Contentsquare resumeTracking];
        ```
    </TabItem>
</Tabs>

:::note
As this mechanism pauses the tracking, make sure that you call resume once your user exits the sensitive screen. Best practice would be to link these method calls to lifecycle events on UIView/UIViewControllers.
:::

### Forget me

:::warning[Deprecated]
This API is deprecated as of SDK version 4.28.0. To achieve the same effect use Opt-out API to delete all files and settings including the user ID, and call Opt-in API on next app launch if tracking needs to resume. 
:::

**Permanently breaking the link between the collected data and actual user.**

This resets all settings and deletes all files and directories from the user's device (User ID is deleted). If user is opted in, next time user starts the app, the SDK will re-start its collection mechanisms as if this was the first ever run for a new user, under a new user id. Configurations will be fetched from the server and application tracking will be on.

:::note
'Forget me' only works when user is opted in.
:::

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
    ```swift
    Contentsquare.forgetMe()
    ```
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c
    [Contentsquare forgetMe];
    ```
  </TabItem>
</Tabs>

## Give me my data

**We allow the client to provide to their users their Contentsquare user ID.**

This ID is a non binding identifier which can be used to make a data request to Contentsquare.  
You are able to get an ID only if the user is not Opted-out.

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
    ```swift
    Contentsquare.userID
    ```
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c
    [Contentsquare userID];
    ```
  </TabItem>
</Tabs>

## Disable user tracking across sessions

If you don't want to link the different sessions of a user to the same userID, follow these instructions to reset the userID at each app start:
1. [Disable SDK auto-start](/en/ios/track-screens/#manual-start)
1. Implement the following:

    ```swift
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) {
        Contentsquare.start()
        Contentsquare.optOut()
        Contentsquare.optIn()
    …
    }
    ```

    Starting the SDK manually using `start()` will ensure that opt-out is called right after the start of the SDK (no event tracked in between). 

    Calling `optOut()` will delete the previous userID. 

    Calling `optIn()` will set a new one.

:::note
If you are monitoring the network requests, you may see event requests being sent at app start. This is expected as there may be events from the previous session that haven't been sent yet. The [opt-out API](#opt-out) makes sure to send all data stored locally before stopping the tracking and wiping all data.
:::

### Session Replay privacy APIs

As part of Session Replay capabilities, Contentsquare provides masking and un-masking APIs to control how data is collected. See [Session Replay Personal data masking](/en/ios/session-replay/#personal-data-masking) for more information.

## App Store Privacy Guidelines Compliance

The Contentsquare SDK is compliant with the [**App Store Privacy guidelines**](https://developer.apple.com/app-store/review/guidelines/#privacy).

### Privacy manifest

Contentsquare SDK includes a [privacy manifest](https://github.com/ContentSquare/CS_iOS_SDK/blob/master/ContentsquareModuleWrapper/PrivacyInfo.xcprivacy) describing the type of data collected and their purpose. [See Apple's website for more information](https://developer.apple.com/app-store/app-privacy-details/).

### Tracking and App Tracking Transparency (ATT)

App Store (Apple) requests App developers to receive the user’s permission to track them or access Advertising ID using the AppTrackingTransparency framework (ATT).  
According to Apple’s definition, Contentsquare only matches the definition of a ["Third- party partner" involved in Data collection](https://developer.apple.com/app-store/app-privacy-details/#data-collection). 

**It is not required to put Contentsquare behind the ATT as it does not match the ["tracking" definition of Apple](https://developer.apple.com/app-store/app-privacy-details/#user-tracking)** as the data collected is not linked with Third-Party Data for targeted advertising or advertising measurement purposes nor shared with a data broker.

### Data linked to the user

All collected data is linked to the user via the [Contentsquare User ID](#contentsquare-user-id) we generate.

### Types of data and purpose

Here is the list of data type we collect by default that are part of our privacy manifests.

:::warning
Contentsquare SDK provides features that allow you to send to Contentsquare custom data. If you decide to use these features to collect new data or use already collected data but for a different purpose, it is up to you to describe these privacy practices in your app manifest.
Involved features: [Dynamic variables](/en/ios/track-dynamic-variables/), [Custom variables](/en/ios/track-custom-variables/), [User identifier](/en/ios/session-replay/#send-user-identifier), [Screen names](/en/ios/track-screens/), [Session Replay (unmasking elements)](/en/ios/session-replay/#personal-data-masking).  
:::

| Categories   | Data type  |  Purposes |
| ------------ | ---------- | ---------- |
| Identifiers | User ID | Analytics, App Functionality |
| Usage Data | Product Interaction | Analytics, App Functionality |
| Usage Data | Other usage data | Analytics, App Functionality |
| Other Data types | Other Data types | Analytics, App Functionality |
| Diagnostics | Crashes | Analytics, App functionality |
| Diagnostics | Performance data | Analytics, App functionality |
| Diagnostics | Other diagnostic data | Analytics, App functionality |

See how the data types and purposes are reflected in the [privacy manifest](https://github.com/ContentSquare/CS_iOS_SDK/blob/master/ContentsquareModuleWrapper/PrivacyInfo.xcprivacy).

## User identifiers

### Contentsquare User ID

The SDK generates a unique user ID (UUID) (random hash) which is specific to users on their device. Contentsquare cannot identify a user across devices.  
This user ID and all collected data are stored for 13 months.  
We don’t persist the UUID when the app is deleted and re-installed. The SDK generates a new UUID after install or re-install.  
Contentsquare does not share this user ID with any third parties.

### IDFA

Contentsquare does not collect the **IDFA** (Advertising ID) or any ad related information to identify the user.

Check out our page about [10 Things to know about the Contentsquare solution's data processing](https://contentsquare.com/privacy-center/10-things-to-know-cs-data-processing/).

### "User identifier" feature

Contentsquare provides the ability to search for session(s) associated with a specific visitor, based on an identifier provided by the customer. See [User identifier feature](/en/ios/session-replay/#send-user-identifier) for more information.

---

# Getting Started

URL: https://docs.contentsquare.com/en/ios/4-41-0/

import { CardGrid, LinkCard, RepoCard } from '~/components';
<Render file="en/mobile/getting-started-intro"/>

## Install the SDK

Our iOS SDK is shipped as a `.xcframework` which you need to add as a dependency of your project.

See [Compatibility](compatibility/) for more information.

### Include the SDK

The SDK requires Xcode 15 or later, if you are using older versions of Xcode reach out to your Contentsquare contact for more information.

:::tip[Unified SDK]
The Unified iOS SDK v0.6.0 is installed with the following setup, which embeds the Contentsquare iOS SDK 4.41.0.

Learn more about the [Unified SDK](unified-sdk/)
:::

<Tabs>
  <TabItem label="Swift Package Manager">
    1. For iOS 13 and later, add the following link via `File > Add Packages…` in XCode:

        ```
        https://github.com/ContentSquare/apple-sdk.git
        ```

        <Aside type="warning" title="iOS 12 support">
        If you are supporting iOS 12, install the SDK using the following package:

        ```
        https://github.com/ContentSquare/CS_IOS_SDK.git
        ```
        
        </Aside>

    1. Remove `https://github.com/apple/swift-protobuf.git` if you have added it prior to version 4.35.1.
    1. To ensure the library can start properly you will need to add `-ObjC` as a linker flag under `Build Settings` > `Linking` > `Other Linker Flags`.
  </TabItem>
  <TabItem label="CocoaPods">
    Static linking is the default behavior with `use_frameworks!`.

    1. Add the following line to your Podfile:

        ```ruby title="Podfile"
        pod 'ContentsquareSDK'
        ```
      
    1. Remove `pod 'SwiftProtobuf', '<= 1.26.0'` if you have added it prior to version 4.35.1.

    1. For iOS 13 and later, add the following line to your Podfile:

        ```
        https://github.com/ContentSquare/apple-sdk.git
        ```

        <Aside type="warning" title="iOS 12 support">
        If you are supporting iOS 12, install the SDK using the following package:

        ```ruby title="Podfile"
        pod 'CS_iOS_SDK_STATIC'
        ```
        
        </Aside>

    <Aside type="note">
    Since we are distributing an XCFramework archive you need to use **CocoaPods 1.14.3** and up (`pod --version`). If you have an older version of `CocoaPods`, do `[sudo] gem install cocoapods`.
    </Aside>

    <h3>Known Issues</h3>

    - Updating `IPHONEOS_DEPLOYMENT_TARGET` in your `post_install` may have the following error.

        ```
        dyld[47592]: Symbol not found: __ZN5swift34swift50override_conformsToProtocolEPKNS_14TargetMetadataINS_9InProcessEEEPKNS_24TargetProtocolDescriptorIS1_EEPFPKNS_18TargetWitnessTableIS1_EES4_S8_E
        Referenced from: Xxxx
        ```

      **Workaround:** Skip updating IPHONEOS_DEPLOYMENT_TARGET for SwiftProtobuf by following these steps.
        1. Update your `post_install` to:

            ```ruby title="Podfile"
            post_install do |installer|
            installer.pods_project.targets.each do |target|
                # Skip updating IPHONEOS_DEPLOYMENT_TARGET for SwiftProtobuf
                next if target.to_s == 'SwiftProtobuf'
                target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = 'XX.X'
                end
            end
            end
            ```

        1. Rerun `pod install`.
        1. Clean Builder Folder.
        1. Rebuild.
  </TabItem>
  <TabItem label="Manual">
    Not yet supported.

    <Aside type="note">
      Before version 4.34.0 we supported including the SDK through Carthage but this is no longer the case. To continue receiving SDK updates you need to switch to one of the other methods listed previously.
    </Aside>
  </TabItem>
</Tabs>

The SDK autostarts when your application launches, requiring no manual initialization.

### Validate SDK integration

<Render file="en/mobile/getting-started-validate-sdk-integration" params={{
  version: frontmatter.version,
  platform: frontmatter.category
}}/>

## Check the logs

<Render file="en/mobile/getting-started-check-the-logs"
  params={{tools: "Xcode, the macOS Console app"}}
/>

### Viewing logs in Xcode or the Console app

To view SDK logs:

1. If using an actual device, make sure it is plugged to your Mac or is on the same Wi-Fi network.
1. Start the macOS Console app or Xcode.
    
    If using the Console app, make sure that info messages are included: [Choose Action > Include Info Messages](https://support.apple.com/guide/console/customize-the-log-window-cnsl35710/mac).

1. Filter logs by `CSLIB`

![](~/assets/ios/logs-ios.png)

### Implement in-app features

<Render file="en/mobile/getting-started-in-app-features"/>

In order to allow Contentsquare users to enable in-app features:

1. [Add the custom URL scheme in your app Info](#1-add-the-custom-url-scheme-in-your-app-info)
1. [Call the SDK when the app is launched via a deeplink](#2-call-the-sdk-when-the-app-is-launched-via-a-deeplink)

#### 1. Add the custom URL scheme in your app Info

You have to allow your app to be opened via a custom URL scheme which can be done using one of the following methods:

##### Xcode

1. Open your project settings
1. Select the app target
1. Select the `Info` settings
1. Scroll to `URL Types`
1. Set the URL scheme to `cs-$(PRODUCT_BUNDLE_IDENTIFIER)`

##### Text editor

1. Open the `Info.plist` of your project
1. Add the following snippet:

    ```xml title="Info.plist"
    <key>CFBundleURLTypes</key>
    <array>
        <dict>
            <key>CFBundleURLSchemes</key>
            <array>
                <string>cs-$(PRODUCT_BUNDLE_IDENTIFIER)</string>
            </array>
        </dict>
    </array>
    ```

#### 2. Call the SDK when the app is launched via a deeplink

Depending on the project, there are multiple ways to handle the deeplink opening. Choose the method matching your project structure:

<Tabs>
  <TabItem label="AppDelegate">
  In your `AppDelegate` class, enrich or implement the function `application(app, open url:, options:)` with: `Contentsquare.handle(url: url)`
  </TabItem>
  <TabItem label="SceneDelegate">
  In your `WindowSceneDelegate` class, you need to:

  1. Update `func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions)` with:

      ```swift
      if let url = connectionOptions.urlContexts.first?.url {
            Contentsquare.handle(url: url)
      }
      ```

  1. Enrich or implement `func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>)` with:

      ```swift
      if let url = URLContexts.first?.url {
          Contentsquare.handle(url: url)
      }
      ```
  </TabItem>
  <TabItem label="SwiftUI">
  In the `body` of your main App struct, add the `onOpenURL` modifier and call the `Contentsquare` SDK to handle the URL:

  ```swift
  @main
  struct MyApp: App {
    var body: some Scene {
      WindowGroup {
        MyView()
          .onOpenURL { url in
            Contentsquare.handle(url: url)
          }
      }
    }
  }
  ```
  </TabItem>
</Tabs>

### Enable in-app features

#### On a device: scan the QR code

<Render file="en/mobile/getting-started-scan-qr-code" params={{
  platform: frontmatter.category
}}/>

#### On a simulator: with the custom link

If you are using a simulator, use the custom link to enable in-app features.

In Contentsquare, select the Mobile icon in the menu top bar then select your Bundle ID, and select "Copy this link".
Paste it in Safari on your simulator to trigger the in-app features.

![](~/assets/ios/log-visualizer-access-custom-link.png)

#### On a simulator: with the Terminal

In a Terminal console, open a URL in your current simulator with the following command (replacing `CUSTOM_LINK` with yours):

```shell
xcrun simctl openurl booted "CUSTOM_LINK"
```

### Contentsquare Log Visualizer

<Render file="en/mobile/getting-started-log-visualizer" params={{
  platform: frontmatter.category
}}/>

## Get user consent

<Render file="en/mobile/getting-started-get-user-consent"/>

### User opt-in

The SDK treats users as **opted-out by default.** 

To start tracking, forward user consent with `optIn()`.
Calling this method generates a user ID and initiates tracking.

Handle user consent by implementing a UI for privacy preferences.

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
    ```swift
    Contentsquare.optIn()
    ```
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c
    [Contentsquare optIn];
    ```
  </TabItem>
</Tabs>

:::note[Going further]
For advanced configuration regarding user consent or personal data handling, see [Privacy](/en/ios/privacy/).
:::
 
## Track your first screens

<Render file="en/mobile/getting-started-track-first-screens"/>

### Sending screenview events

Screen tracking is achieved by sending a `screenview` event each time a new screen is displayed on the user's device.

As a general rule of thumb, you should send your screenviews in `viewWillAppear(_ animate: Bool)` when using UIKit, in `.onAppear()` when using SwiftUI.

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
  ```swift
  import ContentsquareModule

  Contentsquare.send(screenViewWithName: String, cvars: [CustomVar] = [])
  ```
  </TabItem>
  <TabItem label="Objective-C">
  ```objective-c
  @import ContentsquareModule;

  [Contentsquare sendWithScreenViewWithName:(NSString * _Nonnull)];
  // or
  [Contentsquare sendWithScreenViewWithName:(NSString * _Nonnull) cvars:(NSArray<CustomVar *> * _Nonnull)]; // To add custom variables to screen tracking
  ```
  </TabItem>
</Tabs>

### Implementation recommendations

From a functional perspective, a screenview should be triggered in the following cases:

- When the screen appears on the device
- When a modal or pop-up is displayed
- When a modal or pop-up is closed, returning the user to the screen
- When the app is brought back to the foreground (after being minimized)

:::note[Specific triggers]
Depending on how your app is built (Popups, Webviews, Redirections, etc...), you might need specific implementation use cases for triggering screenview events.

See the [dedicated section in our Guide](/en/ios/track-screens/#implementation-recommendations). 
:::

#### Tracking app launch

Most events collected by the SDK require a screenview event to be sent first so they can be associated with that screen; otherwise, they will be discarded. If you need to collect events from the moment the app launches, you should trigger a screenview event immediately after the SDK has started.

Refer to [our guide](/en/ios/track-screens/#when-to-send-your-first-screenview) for implementation examples.

#### Screen name handling

It is necessary to provide a name for each screen when calling the screenview API.

As a general rule, keep distinct screen names under 100. As they are used to map your app in Contentsquare, you will want something comprehensive.
The screen name length is not limited on the SDK side. However, the limit is 2083 characters on the server side.

More on [screen name handling](/en/ios/track-screens/#how-to-name-screens).

:::tip[Tracking plan]
To get the most out of your data, it’s best to follow a tracking plan. This way, you’ll capture every step of the user’s journey without missing important interactions, giving you a complete picture of how your app is used.
:::

## Test your setup

<Render file="en/mobile/getting-started-test-setup" params={{
  tools: "Xcode, macOS Console App, or Log Visualizer",
}}/>

### Visualize events in Contentsquare

<Render file="en/mobile/getting-started-visualize-events"
params={{
  platform: frontmatter.category
}}/>

### Visualize data in Contentsquare

<Render file="en/mobile/getting-started-visualize-data"/>

## Sample app

To explore some of these features in context, check our iOS sample app.

<RepoCard
  repo="ContentSquare/ios-sample-app"
/>

## Next Steps

<Render file="en/mobile/getting-started-next-steps"/>

<CardGrid>
  <LinkCard
    title="Custom Variables"
    description="Collect additional details about the screen or the user."
    href="/en/ios/track-custom-variables/"
  />
  <LinkCard
    title="Dynamic Variables"
    description="Collect additional information about the session."
    href="/en/ios/track-dynamic-variables/"
  />
  <LinkCard
    title="Transactions tracking"
    description="Associate user’s session with their potential purchases and corresponding revenue."
    href="/en/ios/track-transactions/"
  />
  <LinkCard
    title="WebViews"
    description="For native apps which embark web applications or pages."
    href="/en/ios/track-webviews/"
  />
  <LinkCard
    title="Session Replay"
    description="Collect data for Session Replay in compliance personal data masking."
    href="/en/ios/session-replay/"
  />
  <LinkCard
    title="Error Analysis"
    description="Track API errors and application crashes with automated collection and privacy-safe debugging tools."
    href="/en/ios/error-analysis/"
  />
</CardGrid>

---

# Security

URL: https://docs.contentsquare.com/en/ios/4-41-0/security/

## Transmission and hosting
Our servers use HTTPS to make sure that data is encrypted in transport.

---

# Third-party libraries license

URL: https://docs.contentsquare.com/en/ios/4-41-0/third-party-libraries-license/

## Core SDK
| Libraries      | License            | Copyright                                                    | 
| -------------- | ------------------ | ------------------------------------------------------------ |
| SwiftProtobuf  | Apache-2.0 license | Copyright (c) 2014 - 2017 Apple Inc. and the project authors |

## Error Analysis SDK

| Libraries       | License | Copyright                                                    | 
| --------------- | ------- | ------------------------------------------------------------ |
| PLCrashReporter | MIT     | Copyright (c) Microsoft Corporation. and the project authors |

---

# Session Replay

URL: https://docs.contentsquare.com/en/ios/4-41-0/session-replay/

import iossrenable from '~/assets/sdk-images/img-sr/ios-enable-sr-2.gif'
import level from '~/assets/sdk-images/img-sr/ios-quality-level.gif'
:::note
Session Replay is a feature available as an add-on to **Experience Analytics Mobile**. For more information, reach out to your Contentsquare contact.
:::

## Prerequisites

### Screen tracking implemented

As **session collection will start at the 1st screenview event**, it is required to have screen tracking implemented. Make sure to follow the [Track screens](/en/ios/track-screens/) section.

### Updating to latest SDK version

In order to enable Session Replay in your app and get the most stable version, it is required to upgrade the SDK to its latest version.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time (or choose to take this update as an opportunity to review your Privacy related implementation), make sure to follow the [Privacy](/en/ios/privacy/) section.

## WebView

WebView events can be collected as part Session Replay under the following conditions:
 - The WebView is injected
 - The web page implements the **Tag in WebView mode**

For the full guide to implementation of WebView Tracking, see 📚 [Mobile Apps Webview Tracking](/en/webview-tracking-web-tag/).

WebView personal data masking is entirely handled on the web side — see 📚 [Personal Data handling in WebView](/en/webview-tracking-web-tag/session-replay/#personal-data-handling).

## Testing and Debugging

### Enable Session Replay on your device

Since not all sessions are collected (depending on the percentage set in the Contentsquare back office), we have implemented an option to force replay collection on your device for testing and debugging purposes.
This option can be enabled from the in-app features settings:

1. [Enable in-app features](/en/ios/in-app-features/)
1. Open in-app features settings with a long press on the snapshot button
1. Under "Session Replay", toggle "Enable Session Replay" on
1. Kill the app
1. Start app, a new session is starting with Session Replay enabled

<img src={iossrenable.src}/>

#### How do I know if Session Replay is enabled?

There are 2 places where you can check if Session Replay is enabled:

**In the logs:** The log `Session Recording is starting` will confirm that Session Replay is enabled.

**In in-app features settings:** Below the "Enable "will start at next app start" *(see below [Access the replay](#access-the-replay))*, you will either see:
- `No replay link available` which means Session Replay is not running for the current session
- `Get Replay link` which means Session Replay is running for the current session

### Access the Replay

The session can be accessed by tapping on `Get replay link` button from the in-app features settings:

![](~/assets/sdk-images/img-sr/ios-get-replay-link.gif)

The replay will be **available within 5 minutes**. Only the "ended screen views" are processed *(we know a screenview is ended when we start receiving data for the next screenview)*. This means that you will be able to replay your session up to the previous screenview if the session is still running.

## Provide custom fonts

Since texts are collected as data for UIKit elements, it is required to get the custom fonts you use in your app so the player can properly render the texts as displayed in your app.

Upload the fonts in `otf`, `ttf`, `woff` or `woff2` format directly from the player as described in [Managing iOS Fonts In The Player](https://support.contentsquare.com/hc/en-gb/articles/7810298018844) on the Help Center.

## Personal Data Masking

The Session Replay feature replays every interaction of your users with your app. In order to respect the user’s right to privacy, the Contentsquare SDK:
- Masks everything by default
- Allows you to control which part of the user interface is collected via our masking and un-masking APIs.

:::warning
**Note about Privacy Manifest:** If you decide to use un-mask elements leading to collection of new data or use already collected data but for a different purpose, it is up to you to update the privacy practices described in your app manifest accordingly.
Here are some common examples of data collected via un-masked session Replay: Search history, Purchase history, Advertising data, etc.
See [Types of data and purpose](/en/ios/privacy/#types-of-data-and-purpose) already described in the Contentsquare iOS SDK Privacy Manifest.
:::

### Masking mechanisms

Masking depends on the type of element:
 - `UIKit.UIImage` and `SwiftUI.Image`: image isn't collected, a placeholder is sent instead of the content; the "IMG" placeholder will be displayed in the frame of the element.
 - `UIKit.UILabel` and `UIKit.UITextView`: text is replaced by "la" repeated as many times as needed to equal the original character count. White characters are preserved. For instance `the lazy fox` is collected as `lal lala ala`. All other visual properties are collected (text color, background color, alignment, etc.).
 - `UIKit.UITextField`: same as `UIKit.UILabel` or `UIKit.UITextView` unless `isSecureTextEntry` is set to `true`. In this case all characters, including whitespaces are replaced with "•".
 - `SwiftUI.Text`: element is replaced by a black rectangle.
 - For all other types: no specific data is collected but all visual properties are collected: size, background color, corner radius, etc.

If you think a specific element can reveal personal data from one of these properties you have to mask it using one of the methods presented below.
A good way to check how a view is rendered in the Session Replay is to navigate to the desired view with the CS SDK running then use the [quick replay link](#access-the-replay).

#### Original VS Replay fully masked

<Tabs syncKey="ios-ui-framework">
<TabItem label="UIKit">

![](~/assets/sdk-images/img-sr/uikit-sr-masked.png)

</TabItem>
<TabItem label="SwiftUI">

![](~/assets/sdk-images/img-sr/swiftui-sr-masked.png)

</TabItem>
</Tabs>

### Masking rules priority

<Render file="en/mobile/ios/masking-rules-priority"/>

### Masking rules

The masking rules can be applied in two ways:
- Through [remote masking configuration in the CSQ Console](#remote-masking-configuration-in-the-csq-console)
- Using the SDK [public masking APIs](#public-masking-apis)

#### Remote masking configuration in the CSQ Console

##### Full masking

In the event of a personal data leak, the full masking configuration in the Console enables a swift and comprehensive masking of the specified application version(s). This ensures that all elements across all screens of these version(s) are completely masked.

This configuration can be accessed through the "Data Masking" tab in the Console and is supported only on iOS SDK version 4.40.0 and later.

It provides three configuration capabilities:

- A toggle to "Mask all eligible versions," enabling the masking of all app versions embedding the CS iOS SDK 4.40.0 or later.
- An "App version" field to mask specific app version(s)
- A "CS SDK version" field to mask the app version(s) embedding the specified SDK version(s)

#### Public masking APIs

##### Default masking

All iOS views and subclasses of `UIView` are fully masked by default.
The SDK provides an API to change the default masking state:

```swift
/// Change the masking state of all types of views.
/// - Parameter mask: true restores the default masking state.
///                   false unmasks every type of views.
static func setDefaultMasking(_ mask: Bool)
```
 :::note
If you change the default masking state to `false`, `UITextField`, `SwiftUI.TextField` & `WKWebView` will stay masked by default.
:::

##### Masking/Un-masking by instance

<Tabs syncKey="ios-ui-framework">
<TabItem label="UIKit">
Use `mask(view:)` and `unmask(view:)` methods to deal with a specific instance. Masking is applied recursively to all subviews unless specified otherwise (cf. [Masking and Unmasking behaviors on a parent view](#masking-and-unmasking-behaviors-on-a-parent-view)).

**Following the previous example on un-masking UIButtons:** you are in default masking, the `UIButton` are unmasked but a screen shows a button, `myButton`, that contains sensitive information. You will be able to mask it with `mask(view: myButton)`.
</TabItem>
<TabItem label="SwiftUI">
You can mask or unmask a SwiftUI `View` instance by using the following view modifier. Masking is applied recursively to all subviews unless specified otherwise (cf. [Masking and Unmasking behaviors on a parent view](#masking-and-unmasking-behaviors-on-a-parent-view)).

```swift
@ViewBuilder
func csMasking(_ shouldMask: Bool) -> some View
```
</TabItem>
</Tabs>

##### Masking/Un-masking by type

The Contentsquare SDK allows masking elements by type for convenience but it isn't the recommended masking mechanism because it will impact all screens of your application. For instance, use this when you have a specific class for presenting user information or for displaying the user profile picture to make sure it always stays mask.
<Tabs syncKey="ios-ui-framework">
<TabItem label="UIKit">
Use `mask(viewsOfType:)` and `unmask(viewsOfType:)` methods if you want to handle a specific type (whether being a system element or a custom element).

**Example: un-masking UIButtons**
If you are in default masking but you don’t want any button to be masked, you will only need to call `unmask(viewsOfType: UIButton.self):` to specify that all instances of UIButton and its subclasses should not be masked.
</TabItem>
<TabItem label="SwiftUI">
Masking/unmasking by type can be achieved using 1 or more of the 3 following methods.

```swift
/// Masks or unmasks all text elements.
///
/// The text elements are `Text` for SwiftUI and `UILabel` for UIKit 
static func maskTexts(_ mask: Bool)
```

```swift
/// Masks or unmasks all image elements.
///
/// The image elements are `Image` for SwiftUI and `UIImageView` for UIKit.
static func maskImages(_ mask: Bool)
```

```swift
/// Masks or unmasks all text input elements.
///
/// The text input elements are `TextField`, `SecureField`, `TextEditor` for SwiftUI 
/// and `UITextField`, `UITextView` for UIKit.
/// 
static func maskTextInputs(_ mask: Bool)
```
</TabItem>
</Tabs>

:::note
Beware, using **these APIs will also affect UIKit masking**. If you wish, you can use only these APIs and mask/unmask both UIKit and SwiftUI elements.
:::

##### Masking and Unmasking behaviors on a parent view

###### UIKit

Masking is applied recursively to all children unless a specific rule has been applied to 1 of them. In this case the rule will again be applied recursively.

**Examples**

Let's say we have the following structure:

```
   (parent view)
   ------------------------
   |    "Parent Label"    |
   |                      |
   | (child view)         |
   | -------------------- |
   | |   "Child Label"  | |
   | |                  | |
   | -------------------- |
   |                      |
   ------------------------
```

 - If no rule is applied: everything is masked including "Parent Label" and "Child Label"
 - If parent view is unmasked and no other rule is applied: both "Parent Label" and "Child Label" are unmasked
 - If parent view is unmasked and child view is masked: "Parent Label" is unmasked and "Child Label" is masked
 - If default masking is set to false and no other rule is applied: "Parent Label" and "Child Label" are unmasked
 - If default masking is set to false and parent view is masked: both "Parent Label" and "Child Label" are masked

And so on as explained in the [Masking rules priority](#masking-rules-priority).

**Unmask an instance when its type is masked**
If you've masked `UILabel` **types** specifically or are in default masking, and you call `unmask(view: myLabel)`, all `UILabel` **instances** will be masked except `myLabel`.

**Mask an instance when its type is unmasked**
If you've unmasked `UILabel` type specifically or are using the default masking, and you call `mask(view: myLabel)`, no `UILabel` will be masked except `myLabel`.

### Implementation recommendations

<Tabs syncKey="ios-ui-framework">
<TabItem label="UIKit">
**Masking operations should always be performed before the target view is added to the window to avoid any Personal Data leak**. For instance, you can set up masking in the `didFinishLaunching` callback of your app or if you need to change masking behavior while your app is launched, it can be done in `loadView`, `viewDidLoad` or `viewWillAppear` if you use a `ViewController`.
</TabItem>
<TabItem label="SwiftUI">
Masking operations should be done as early as possible, in the setup of your app for masking by types for instance.
For masking by instance, you can do it in the body of your `View` by calling the modifier `csMasking`.
</TabItem>
</Tabs>

### Keeping track of what is masked

The SDK doesn't provide a list of what is currently masked, if you need to keep track, you probably will have to write your specific wrapper.

### Masking operations performance impact

Repeating the same operation has little to no impact. For example, you can call `unmask(viewsOfType: UIButton.self)` multiple times without impacting the SDK or your app performance.

## Advanced features for Digital Experience Monitoring (DEM)

:::note
These features are only available for Experience Monitoring Mobile customers. Reach out to your Contentsquare contact for more details.
:::

### Send user identifier

Contentsquare provides the ability to search for session(s) associated with a specific visitor, based on an identifier: email, phone number, customer ID…
As these values are typically personal data, from the moment the SDK is collecting the User Identifier, we immediately encode the value using a hashing algorithm so that the information is hidden and can never be accessed.

:::warning
**Note about Privacy Manifest:** If you decide to use User Identifier to collect new data or use already collected data but for a different purpose, it is up to you to update the privacy practices described in your app manifest accordingly.
Here are some common examples of data collected via User Identifier: Email, Other user contact info, etc.
See [Types of data and purpose](/en/ios/privacy/#types-of-data-and-purpose) already described in the Contentsquare iOS SDK Privacy Manifest.
:::

Use the following code to send a user identifier:

```swift
Contentsquare.sendUserIdentifier("any_identifier")
```

When called, the SDK will log:

```
CSLIB ℹ️ Info: User identifier hashed sent {value}
```

### Sending a user identifier for each session

You may want to send the user identifier for each session. While triggering the user identifier at app launch will cover most cases, it will not be enough. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See Session definition section for more information.

That is why we also recommend sending the user identifier every time the app enters foreground.

You can use [`didBecomeActiveNotification` notification](https://developer.apple.com/documentation/uikit/uiapplication/1622953-didbecomeactivenotification) and [`sceneDidBecomeActive(_:)` callback](https://developer.apple.com/documentation/uikit/uiscenedelegate/3197915-scenedidbecomeactive) to detect foreground and trigger a `sendUserIdentifier()`.

### Limitations

- User identifier max length is 100 characters (if the limit is exceeded, the user identifier will not be handled and you will see an error message in the Console/Logcat)
- Only the first 15 user identifiers per view will be processed on server side
- The SDK will trim and lowercase user identifier
- User identifier event are not visible in Log visualizer

## Integrations

Contentsquare provides the ability to retrieve the link of the replay to be attached to other vendors such as Voice of Customer or Crash reporting tools.

### Get current replay Link

Generate a link to the replay of the current session. This link can be pushed to any internal or 3rd-party tool as a custom property/variable. For instance, you can add the replay link to:

- Each user request sent to your customer service tool
- Each user voting in your Voice of Customer tool
- Each user session in your App Performance, Observability tool
- ...

:::note
The replay link can also be accessed from the in-app features settings. See [Access the Replay](#access-the-replay)
:::

You can register to replay link creation and updates using the following API:

```swift
Contentsquare.onSessionReplayLinkChange { link in
    self.currentCSReplayLink = link
}
```

When you call this API, the SDK logs:
```
CSLIB ℹ️ Info: Callback for SessionReplay link update is registered.
```

:::warning
You can only have one callback at a time. Calling this API twice will override the previous callback.
:::

To unregister the current callback, pass `nil` as the argument:

```swift
Contentsquare.onSessionReplayLinkChange(nil)
```

When you call this API, the SDK logs:
```
CSLIB ℹ️ Info: Callback for SessionReplay link update is unregistered.
```

When a new link is available, the SDK logs:

```
CSLIB ℹ️ Info: SessionReplay link updated: https://app.contentsquare.com/quick-playback/index.html?pid={projectId}&uu={userId}&sn={sessionNumber}&recordingType=cs
```

:::warning
For the callback to be called, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event must have been sent, since Session Replay only starts after the first screenview event.
:::

If you have a Contentsquare account, you can use this link to directly watch your current Session Replay on the Contentsquare Platform.

The replay will be **available within 5 minutes**. Only the "ended screen views" are processed *(we know a screenview is ended when we start receiving data for the next screenview)*. This means that you will be able to replay the session up to the previous screenview if the session is still running.

## How Session Replay works

### Initialization

Sessions can be collected for Session Replay if the Session Replay feature has been enabled for your project and the session matches the collection criteria.

The following conditions will have an impact on which sessions will be collected:

- **User consent**: The users have given their **consent** (if required)
- **Collection rate**: The session is being **drawn for collection** (see Collection Rate below)
- **Compatibility**: The **OS version** is supported.
- **App version**: The **app version** is not part of the block list (see App version block list below)

Note that, when Session Replay is turned off, no content specific to Session Replay is collected whatsoever. Also note that the standard Contentsquare analytics tracking remains unaffected by this.

#### Collection rate

Session Replay collection is based on a percentage of the total sessions. By default Session Replay collection is disabled.

During the early access phase, the percentage or collected sessions will be set to 1% at the beginning. It will then be adjusted according to:
- The traffic on your app
- The volume of collected sessions set in the contract

#### Compatibility

See [Compatibility](/en/ios/compatibility/).

#### App version block list

Contentsquare team can add versions of your app in the block list to make sure Session Replay does not start on these versions. This is done when a problem is discovered on a specific version of your app, such as a Personal Data for which the masking was forgotten. This allows to keep Session Replay to work on the other app versions (especially the new ones with the fix).

### Data Collection

The SDK monitors the application lifecycle events and the view hierarchy, and generates Session Replay data from the behavior of the app, the content of the screen and the interaction of the user.
These events are then locally stored, and eventually sent to our servers in batches. We then aggregate that data to create usable visual information into our Web Application, which you use to gather insights.

:::tip
Session collection will start at the 1st screenview event.
:::

### Quality levels

Session Replay has three quality levels available: High, Medium, Low. Quality level is defined by the frame rate and the image quality.
The quality level is defined independently for **Wi-Fi** and **Cellular Network**.
The default level for both is **Medium**.
For more information on network data consumption see: [Performance Impact section](#performance-impact).

:::note
If you require a particular setting, reach out to your Contentsquare contact that will make the adjustment in the project configuration.
:::

#### Quality level examples

Select the image to open it in full size and GIF format.
<a href={level.src}>![](~/assets/sdk-images/img-sr/sr-quality-ios-static.png)</a>

### Network and Storage

By default, Session Replay data can be sent over **cellular network**. If the particular context of your app or users requires a very limited impact on cellular data consumption, **sending data over cellular network can be completely disabled**. Once disabled, data will be sent when the device is using Wi-Fi.

Reach out to your Contentsquare contact that will make the adjustment in the project configuration.

#### Storage

Before being sent, data is stored in local files on disk up to 30MB on iOS and 20MB on Android.
If the limit is reached, Session Replay is stopped. It will restart at the next app launch once the SDK is able to send the data.

### Requests

The maximum request size is 1Mbyte.

Requests are sent:
- Every 10 seconds
- At app hide
- When [Replay Link API](#get-current-replay-link) is called

## Performance impact

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well. These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.

### Performance impact mitigation

Most operations related to Session Collection are performed on background threads, for the impact on the main thread to be minimal. To make sure of this, we run performance tests on testing applications, using XCTMetric and Hitch Time Ratio measures.

We also set up mechanisms that stop the Session Collection if we detect the feature is using too much memory.

We defined our network strategy to have the lesser impact on CPU and battery of the users devices. We measure these impacts, using Apple Dev Tools, for each release of our SDK.

Session Collection will also stop if we use up to 30Mbytes of local storage.

You can reduce the quality level if you want to favor performance impact over quality.

### Performance test results

The following performance results were obtained under the following conditions:

| Condition                                   | Value     |
| --------------------------------------------| --------- |
| Device model                                | iPhone 7  |
| iOS version                                 | 15.7.8    |
| Test App built using Xcode version          | 14.3.1    |
| Test App built with Swift version           | 5.8       |
| Quality level                               | High      |
| Default Masking State                       | Disabled  |

We conducted the tests using a default `Master-Detail` app built using AdHoc distribution with no app thinning and with Swift symbols stripped. In the app, the SDK was making calls to the Public APIs, running and collection data in its default state.

:::note
The numbers provided below will vary depending on the user's device, iOS version, SDK version, as well as if you use Swift or not, which Swift version you use if you do, if you enabled bitcode or not and which options you used when building your IPA for App Store distribution.
:::

:::note
Screens built with SwiftUI produce, on average, 120% of the SR data produced by similar screens built with UIKit.  
:::

| Property                                                                    | Value          |
| --------------------------------------------------------------------------- | -------------- |
| Max CPU overhead                                                            | &lt;10%        |
| Max RAM usage                                                               | &lt;5MB        |
| Session Replay data transmitted over network during 1 minute of use         |                |
|  - with "High quality" level                                                | &lt;2Mbytes    |
|  - with "Medium quality" level                                              | &lt;1Mbytes    |
|  - with "Low quality" level                                                 | &lt;900Kbytes  |

## Known limitations

### Color

[Init `UIColor` with Color](https://developer.apple.com/documentation/uikit/uicolor/3550899-init) doesn't work in dark mode.

**Workaround:** Use [`UIColor.init(named:)`](https://developer.apple.com/documentation/uikit/uicolor/2877380-init).

### Maps

Maps can potentially contain Personal Data and are therefore replaced by a placeholder with no ability to un-mask them currently.

### NSAttributedString handling

The extracted text doesn’t support the `expansion`, `obliqueness`, `paragraphStyle` and `textEffect` attributes.

### Multiline labels

UIKit labels configured for multiple lines may overflow their bounding box, depending on the font and text length.
A longer text increases the risks of causing an overlap with elements below (e.g.: other text, or image).

### Multiple windows

Multi-window is not supported.

### System elements capture

System elements are not collected. For instance, we do not collect:

 - `UIImagePickerController`
 - `SKStoreReviewController`
 - All `AVFoundation` components such as:
   - `AVPlayerViewController` for videos
   - `AVCaptureVideoPreviewLayer` for camera

### System elements masking

Bottom line is that masking/unmasking any element is possible only if you have a reference or you know the type of the element that you want to mask.

Since the access to the instance/type of Alert and Menu components is not documented in [Apple documentation](https://developer.apple.com/documentation/uikit/uialertcontroller#overview), developers cannot directly mask/unmask these components or parts of them with CS public masking APIs.
However, there are workarounds to mask/unmask them, as described below.

#### Alerts

##### UIKit

A possible workaround to fully mask a UIKit Alert is to pass the `UIAlertController` `view` property to the `mask(view:)` and `unmask(view:)` APIs.

##### SwiftUI

SwiftUI Alerts cannot be specifically masked or unmasked.

If the [default masking](#default-masking) is `false` and you want to mask an alert, a possible workaround is to mask all the app by changing the default masking to `true` when the alert appears and back to `false` when it disappears.

:::warning
There is no workaround to unmask only an alert if the default masking is `true`.
:::

#### Menus

Menus cannot be specifically masked or unmasked.

If the [default masking](#default-masking) is `false` and you want to mask a menu, a possible workaround is to mask all the app by changing the default masking to `true` when the menu appears and back to `false` when it disappears.

:::warning
There is no workaround to unmask only a menu if the default masking is `true`.
:::

### System images

```swift
Image(systemName: "pencil")
```

On iOS 17.0 and later, system images are considered as text within the masking rules. Any system-provided images used in your app's UI is subject to the same privacy and masking regulations as text content.

### Animations

Animations lasting longer than 0.35 ms may be partially rendered in the replay, potentially resulting in a broken or incomplete layout for the rest of the animation. This does not affect the rest of the session, and the app will render correctly again on the next user interaction or detected animation.

## Troubleshooting

### Requests are not sent from an iOS simulator

If you struggle to watch a replay collected on an emulator/simulator, it may be due to some network constraints applied on your computer (VPN, company network restrictions, etc.). Check your configuration or use a real device.

See [Requests are failing](/en/ios/troubleshooting/#requests-are-failing) for more information about our endpoints and requests.

### Very long session on an iOS simulator

If you leave the simulator/emulator running with the app in foreground, the session will not end, even if you are inactive. 
This can lead to artificially long sessions (several hours). To better emulate actual user behavior, put the app in background or kill it.

:::note
An app kill **does not end a session**.  
See [Session definition](/en/ios/how-the-sdk-works/#session-definition).
:::

### Unmasking with CS InApp features is broken

When activating the toggle in CS InApp to unmask elements in Session Replay,it can sometimes give a strange result with some elements still masked, it's **especially true for SwiftUI**.
This is due to the fact that unmasking with InApp features acts differently than when done in the code by the app developer.
To ensure a session is fully unmasked as it would be if it was done in the code of the app, follow these steps:
 - Toggle the "Unmask ..." switch
 - Navigate to a different screen
 - Go back to the previous screen
 - Put the app in background
 - Wait for the session timeout
 - Re-open the app
From this point on, you will have a fully unmasked session.

### Uncaught exception due to NSAttributedString

If the following exception is encountered: `NSInvalidArgumentException: -[__NSCFType CGColor]: unrecognized selector sent to instance`,

It is probably due to an Objective-C bridging issue in `Foundation`, which makes it possible to pass `CGColor` instances as values for the `foregroundColor` and `strikeThroughColor` attributes of a `NSAttributedString`.

While a `UILabel` with such an attributed string will be displayed correctly, its `textColor` attribute will have the wrong type, and the SDK won't be able to handle it, causing a crash in Session Replay.

Because of this, it is important to ensure that actual `UIColor` instances are passed as values, as per the [official documentation](https://developer.apple.com/documentation/foundation/nsattributedstring/key/1533563-foregroundcolor).

---

# Track custom variables

URL: https://docs.contentsquare.com/en/ios/4-41-0/track-custom-variables/

## General principles
### Usage

Custom variables are additional information on the page, the user or the session, sent along with screenviews.

For example, they can include information on the current layout of a screen, like day/night mode.

:::warning
**Note about Privacy Manifest:** If you decide to use Custom Variables to collect new data or use already collected data but for a different purpose, it is up to you to update the privacy practices described in your app manifest accordingly.
See [Types of data and purpose](/en/ios/privacy/#types-of-data-and-purpose) already described in the Contentsquare iOS SDK Privacy Manifest.
:::

### Limits

#### On the server side

- It is possible to save up to 20 distinct custom variable per screenview. If more are received, only the first 20 custom variables, based on their `index` value, will be kept.
- The `index` value of the custom variable is used to determine which custom variables to be kept. Only `index` value between 1 and 20 will be taken into account.

#### On the SDK side

- Every custom variable is composed of `index`, `name` and `value`. 
- If you are using the same `index` twice in the same screen, only the first (`name`, `value`) pair associated with the `index` will be kept.
- In case `name`(max. 512 characters) or `value`(max. 255 characters) maximum character length is reached, the SDK will automatically trim the exceeding characters.
- If `name` or `value` are empty, the SDK will instead send the literal string `"cs-empty"`.
- Use a consistent index for a given custom var within an application — for instance, if the "screen layout" is collected with an `index` of 3, use the slot 3 for this information on every screen of the application.

## Defining custom variables

To define and send custom variables, follow this:

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
    ```swift
    import ContentsquareModule

    let cvar1 = CustomVar(index: 1, name: "CustomVarName1", value: "CustomVarValue1")
    let cvar2 = CustomVar(index: 2, name: "CustomVarName2", value: "CustomVarValue2")

    Contentsquare.send(screenViewWithName: "ScreenName", cvars: [cvar1, cvar2])
    ```

    <Aside type="warning">
    For consistent analytics, use the same index/name pair values across your application:

    ```swift "carousel" title="Screen A"
    let cvar4 = CustomVar(index: 1, name: "hero_banner_type", value: "carousel")
    Contentsquare.send(screenViewWithName: "ScreenA", cvars: [cvar4])
    ```

    ```swift "slider" title="Screen B"
    let cvar4 = CustomVar(index: 1, name: "hero_banner_type", value: "slider")
    Contentsquare.send(screenViewWithName: "ScreenB", cvars: [cvar4])
    ```
    </Aside>
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c
    @import ContentsquareModule;

    CustomVar *cvar1 = [[CustomVar alloc] initWithIndex:1
                                            stringName:@"CustomVarName1"
                                            stringValue:@"CustomVarValue1"];
    CustomVar *cvar2 = [[CustomVar alloc] initWithIndex:2
                                            stringName:@"CustomVarName2"
                                            stringValue:@"CustomVarValue2"];

    [Contentsquare sendWithScreenViewWithName:@"ScreenName" cvars:@[cvar1, cvar2]];
    ```

    <Aside type="warning">
    For consistent analytics, use the same index/name pair values across your application:

    ```objective-c "carousel" title="Screen A"
    CustomVar *cvar4 = [[CustomVar alloc] initWithIndex:4
                                        stringName:@"hero_banner_type"
                                        stringValue:@"carousel"];

    [Contentsquare sendWithScreenViewWithName:@"ScreenA" cvars:@[cvar4]];
    ```

    ```objective-c "slider" title="Screen B"
    CustomVar *cvar4 = [[CustomVar alloc] initWithIndex:4
                                    stringName:@"hero_banner_type"
                                    stringValue:@"slider"];

    [Contentsquare sendWithScreenViewWithName:@"ScreenB" cvars:@[cvar4]];
    ```
    </Aside>
  </TabItem>
</Tabs>

---

# Track dynamic variables

URL: https://docs.contentsquare.com/en/ios/4-41-0/track-dynamic-variables/

## Usage
Dynamic variables are additional information on the session that can be used to segment sessions.
For example, they can include information on the A/B Test variations displayed to the current user.

:::warning
**Note about Privacy Manifest:** If you decide to use Dynamic Variables to collect new data or use already collected data but for a different purpose, it is up to you to update the privacy practices described in your app manifest accordingly.
Here are some common examples of data collected via dynamic variables: Contact info, Financial info, Location (country...), etc.
See [Types of data and purpose](/en/ios/privacy/#types-of-data-and-purpose) already described in the Contentsquare iOS SDK Privacy Manifest.
:::

## Limits

### On the server side
- It is possible to save up to 40 distinct dynamic variable keys per screenview. If more are received, only the first 40 keys will be kept.
- If you are using the same key twice on the same screenview, the last value associated with the key will be collected.

#### On the SDK side
- Every dynamic variable is composed of a pair of key (max. 50 characters) and value (max. 255 characters string or number of type `UInt32` between 0 and 2<sup>32</sup> - 1). In case these maximums length are reached, the SDK will automatically trim the exceeding characters.
- If key or value are empty, the SDK will instead send the literal string "cs-empty".

## Defining dynamic variables

To define and send a dynamic variable, you just need to use the following API:

<Tabs>
<TabItem label="Swift">
```swift
// string value
Contentsquare.send(dynamicVar: DynamicVar(key: String, value: String))

// int value
Contentsquare.send(dynamicVar: DynamicVar(key: String, value: UInt32))
```
</TabItem>
<TabItem label="Objective-C">
```objective-c
// string value
DynamicVar *dynamicVarString = [[DynamicVar alloc] initWithKey:(NSString * _Nonnull)
                                                   stringValue:(NSString * _Nonnull)
                                                   error:(NSError * _Nullable __autoreleasing * _Nullable)];
[Contentsquare sendWithDynamicVar:dynamicVarString];

// int value
DynamicVar *dynamicVarInt = [[DynamicVar alloc] initWithKey:(NSString * _Nonnull)
                                                intValue:(uint32_t)
                                                error:(NSError * _Nullable __autoreleasing * _Nullable)];
[Contentsquare sendWithDynamicVar: dynamicVarInt];
```
</TabItem>
</Tabs>

To define and send a dynamic variable, directly use the key and String/UInt32 value:

**Type of the value** — The value can be either a **whole number** or a **string**. For each case, available features won't be the same in the Contentsquare app:
- For **whole numbers**, you will be able to do some algebra. Example: _sessions with dynamic variable key = "numberOfFriends" and value >= 10_
- For **strings**, auto-completion and Regular Expression will be available. Example: _sessions with dynamic variable key = "accountType" and value = "Premium"_

## Sending a dynamic variable for each session

You may want to send a dynamic variable for each session (like the user's country or store). While **triggering the dynamic variable at app launch will cover most cases, it will not be enough**. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See [Session definition](/en/ios/how-the-sdk-works/#session-definition) section for more information.

That is why we also recommend **sending such dynamic variable every time the app enters foreground**.

You can use [`didBecomeActiveNotification` notification](https://developer.apple.com/documentation/uikit/uiapplication/1622953-didbecomeactivenotification) and [`sceneDidBecomeActive(_:)` callback](https://developer.apple.com/documentation/uikit/uiscenedelegate/3197915-scenedidbecomeactive) to detect foreground and trigger a dynamic variable.

---

# Track screens

URL: https://docs.contentsquare.com/en/ios/4-41-0/track-screens/

Contentsquare aggregates user behavior and engagement at the screen level. To do so, it is required to track screen transitions by calling a dedicated API. When the API is called, the SDK logs a `screen_view` event that identifies the new screen with the screen name provided.
:::warning
Sessions without at least one screenview will be discarded.
:::

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
  ```swift
  import ContentsquareModule

  Contentsquare.send(screenViewWithName: String, cvars: [CustomVar] = [])
  ```
  </TabItem>
  <TabItem label="Objective-C">
  ```objective-c
  @import ContentsquareModule;

  [Contentsquare sendWithScreenViewWithName:(NSString * _Nonnull)];
  // or
  [Contentsquare sendWithScreenViewWithName:(NSString * _Nonnull) cvars:(NSArray<CustomVar *> * _Nonnull)]; // To add custom variables to screen tracking
  ```
  </TabItem>
</Tabs>

## Screen name handling
The screen name is limited to 2083 characters. However, this limit is not enforced by the SDK, but rather by the Contentsquare servers.

:::note
If the Track screen API is called without passing a screen name, the event will still be processed with default value: `missing screenName ([ViewController className])`
:::

:::warning
**Note about Privacy Manifest:** If you decide to use Screen names to collect new data or use already collected data but for a different purpose, it is up to you to update the privacy practices described in your app manifest accordingly.
See [Types of data and purpose](/en/ios/privacy/#types-of-data-and-purpose) already described in the Contentsquare iOS SDK Privacy Manifest.
:::

## Screenview after app in background
The SDK triggers a screenview automatically after the app is put in background and foreground, as long as a screenview with a screen name has been triggered previously. It will use the last screen name set.

## Implementation recommendations

From a functional standpoint, we expect a screenview to be sent:
- Right after the SDK has started
- When the screen appears
- When a modal/pop-up is closed and the user is back on the screen
- When the app is put in the foreground (after an app hide)

We advise you to take a look at our reference implementations of screenviews in [our sample app](https://github.com/ContentSquare/iOS-sample-app). Learning from them is the best way to make sure your implementations are correct. Regardless, here is some general advice.

### When to send your first screenview

Most events collected by the SDK require a screenview event to be sent first so they can be associated with that screen; otherwise, they will be discarded. If you need to collect events from the moment the app launches, you should trigger a screenview event immediately after the SDK has started.

#### Automatic start

If the SDK is started automatically, you should send your first screenview when your app's life cycle begins. For instance, you can send it in `application:didFinishLaunchingWithOptions:` of your  `UIApplicationDelegate` if you are using UIKit, or in the `init()` of your `App` struct if you are using SwiftUI:

<Tabs syncKey="ios-ui-framework">
<TabItem label="UIKit">
```swift
func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    // ...
    Contentsquare.send(screenViewWithName: "Launch screen")
    // ...
    return true
}
```
</TabItem>
<TabItem label="SwiftUI">
```swift
@main
struct MyApp: App {

    init() {
        // ...
        Contentsquare.send(screenViewWithName: "Launch screen")
        // ...
    }

}
```
</TabItem>
</Tabs>
#### Manual start

If the SDK is started manually, you should send your first screenview right after calling `start()`:

```swift
Contentsquare.start()
Contentsquare.send(screenViewWithName: "Launch screen")
```

### General rules

From a functional standpoint, we expect a screenview to be sent:

- When the screen appears on the device
- When a modal or pop-up is displayed
- When a modal or pop-up is closed, returning the user to the screen
- When the app is brought back to the foreground (after being minimized)

<Tabs syncKey="ios-ui-framework">
  <TabItem label="UIKit">
  As a general rule of thumb, you should send your screenviews in `viewWillAppear(_ animate: Bool)`. Be aware that only doing this might not cover all your cases though, and you might need to send screenview events in other parts of your code.
  </TabItem>
  <TabItem label="SwiftUI">
  If you are using SwiftUI to build your application, you should send your screenview in `.onAppear()`. Be aware that only doing this might not cover all your cases though, and you might need to send screenview events in other parts of your code.
  
  ```swift {6-8}
  import ContentsquareModule
 
  var body: some View {
      Text("My first screen")
          .foregroundColor(Color.blue)
      .onAppear() {
          Contentsquare.send(screenViewWithName: "First screenView")
      }
  }
  ```
  </TabItem>
</Tabs>

### ScrollViews with paging
Be careful when tagging screens with paged ScrollViews: if you want to create a screenview event whenever the user changes the page, do so in UIScrollViewDelegate's `scrollViewDidEndDecelerating(_ scrollView: UIScrollView)` function. Make sure that you do not trigger a double tag when the screen appears, or when you come back to the screen after the app being hidden. Also make sure not to send a screenview when the user slightly interacts with a page, but without really changing pages.

### Popups and modals
When dealing with popups and modals, if you are having issues triggering a screenview event for the underlying view when the modal closes we have the following advice. You could overcome this issue by using a delegate pattern, and setting the underlying screen as the modal's delegate. The modal would call some delegate method when it is dismissed. The underlying screen would implement that method, where it would make the screenview.

:::warning[iOS 13 and later]
On iOS 13 and more, modals can be dismissed by swiping down.  
In that case, `unwindFromSegue` won't be triggered.

The new `presentationControllerDidDismiss(_ presentationController:)` function of `UIAdaptivePresentationControllerDelegate` will be triggered instead.

Implement this function and call `Contentsquare.send(screenViewWithName:)` there for the tracking to be correct on all iOS versions.

[Check out our sample app](https://github.com/ContentSquare/iOS-sample-app/blob/master/Shared/Showcases/Screen%20Views/Modals/ModalPresentingViewController.swift) for more details about the implementation.
:::

### Back navigation and navigation between screens
Make sure that screenview events will be triggered when a user will go to the previous screen (example: Home → Profile → Home), it is expected to have a screenview event for the Home screen that might be reached with the back navigation button. Normally, if you send your screenviews in `viewWillAppear`, this should work fine.

### Redirecting the user to another screen (authentication, home) when closing the app/re-opening the app
For some apps, you might want to redirect users whenever they hide your app, for example for security purposes (bank apps, password managers, etc...). If that is the case, pay specific attention to the way screenview events are sent, in order not to track a screen which is not actually shown users.

### Application life cycle
When your application returns from the background to the foreground, the SDK automatically logs a screenview with the title of the last logged screenview, so you don't have to handle this transition yourself.

## How to name screens
As a general rule, keep the number of distinct screen names under 100. Since these names are used to map your app in Contentsquare, choose names that are clear and comprehensive.

### Separate words with spaces, dashes or underscores
When generating screen names with multiple words, separate them using spaces, dashes, or underscores.

For instance, use `Home & Living - Home Furnishings` instead of ~~`homeLivingHomeFurnishings`~~ for a sub-category in a retail app.

:::warning[Casing sensitivity]
  Screen names are not case sensitive and will appear in lowercase on the Contentsquare platform.

  ```swift frame="code"
  Contentsquare.send(screenViewWithName: "ScreenName") // screenname
  Contentsquare.send(screenViewWithName: "Screen Name") // screen name
  Contentsquare.send(screenViewWithName: "screen_name") // screen_name
  Contentsquare.send(screenViewWithName: "screenname") // screenname
  ```
:::

### Use screen template/layout names
As a general recommendation, use names referring to the screen template/layout rather than referring to the specific content (data). This will help:
- To keep the number of distinct screen names low and therefore make Contentsquare easier to use
- Remove the risk of sending Personal Data to Contentsquare

List of screen types falling into that category: _Product detail, Event detail, Conversation/Chat, User profile..._

### Screens with multiple states/layouts

<Render file="en/mobile/multiple-layout-screens"/>

---

# Track transactions

URL: https://docs.contentsquare.com/en/ios/4-41-0/track-transactions/

To associate a user's session with their potential purchases (and corresponding revenue), you must send the transaction via a dedicated API.
For each transaction, we send:
- Price (mandatory)
- Currency (mandatory)
- Transaction ID (optional)
<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
  ```swift
  // numeric currency
  // CustomerTransaction(id: String?, value: Float, currency: Currency)
  let transaction = CustomerTransaction(id: "transaction_id", value: 430.99, currency: Currency.eur)
  Contentsquare.send(transaction: transaction)

  // alphanumeric currency
  // CustomerTransaction(id: String?, value: Float, currency: String)
  let transaction = CustomerTransaction(id: "transaction_id", value: 430.99, currency: "EUR")
  Contentsquare.send(transaction: transaction)
  ```
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c
    // numeric currency
    CustomerTransaction *transaction = [[CustomerTransaction alloc] initWithId:@"transaction_id"
                                                                        value:430.99
                                                                      currency:CurrencyEur];
    [Contentsquare sendWithTransaction:transaction];

    // alphanumeric currency
    CustomerTransaction *transaction = [[CustomerTransaction alloc] initWithId:@"transaction_id"
                                                                        value:430.99
                                                                stringCurrency:"EUR"];
    [Contentsquare sendWithTransaction:transaction];
    ```
  </TabItem>
</Tabs>

:::warning
**Each transaction must only be sent once**. A common mistake is to trigger the sending when the confirmation screen is displayed. This leads to triggering the transaction each time the user puts the app in background and then in foreground on the confirmation screen.
:::

## Currency

The currency is conforming to the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) standard. The currency can be passed either as "alphanumeric code" or "numeric code".

If the currency passed doesn't match the supported currencies, the SDK will send a currency value of `-1`. It will be processed as the default currency of the project.

---

# Track Webviews

URL: https://docs.contentsquare.com/en/ios/4-41-0/track-webviews/

:::note[iOS compatibility]
    Contentsquare **only** allows to track instances of `WKWebView`.  
    `SFSafariViewController` is **not** supported: The Contentsquare SDK **cannot** track what is happening within its context, and its content will **not** be visible in Session Replay.
:::
##  Enable tracking in WebViews

### Where to inject your WebViews?

It is **essential** that you inject your WebViews in `viewWillAppear()`.

Additionally, when setting a delegate on your WebView, ensure that it is implemented and set **before** calling `Contentsquare.register(webView: WKWebView)`. If this order is not respected, your delegate will **not** receive any callbacks.

### Inject a variable to detect when you load your page from a WebView

If your page can be loaded both in a WebView and in a browser, you need to differentiate both in order to inject the proper CS Tag first.

If you don't already have a system in place, you can rely on `window.CS_isWebView`. This global variable is injected in your page by Contentsquare when the content is loaded from a WebView.

### Inject the Bridge between the CS Tag in WebView mode and the SDK 

Use the following API:
<Tabs>
    <TabItem label="Swift">
    ```swift
    // Start tracking the given WKWebView
    Contentsquare.register(webView: WKWebView)
    ```
    </TabItem>
    <TabItem label="Objective-C">
    ```objective-c
    // Start tracking the given WKWebView
    [Contentsquare registerWithWebView:(WKWebView * _Nonnull)];
    ```
    </TabItem>
</Tabs>

This step is threefold:
1. It will inject our **JavaScript Bridge** in order to connect the **CS Tag in WebView mode** and our SDK.
1. It will inject your **CS Tag in WebView mode** if it was not already injected, allowing us to gather data on all your webviews, even when the user is offline, on pages showing local HTML.
1. It will inject a `window.CS_isWebView` variable for you to use in order to detect if the page is loaded from a WebView. 

### Inject the CS Tag in WebView mode into your HTML page

After doing all the above, in order for the implementation to be completed, you will need to make sure our **CS Tag in WebView mode** is injected on your pages. To do so, refer to 📚 [Mobile Apps WebView Tracking Documentation](/en/webview-tracking-web-tag/).

## Let's sum it up

Let's illustrate our implementation with a `UIViewController`. In your `viewWillAppear()` method, add the following:

<Tabs>
    <TabItem label="Swift">
        ```swift
        override func viewWillAppear(_ animated: Bool) {
            super.viewWillAppear(animated)
            
            // Inject the variable to detect that you are in a WebView context
            let userScript = WKUserScript(
                source: "window.isWebView = true;",
                injectionTime: .atDocumentEnd,
                forMainFrameOnly: false
            )
            webView.configuration.userContentController.addUserScript(userScript)

            // Inject the Bridge between the CS Tag in WebView mode and the SDK 
            Contentsquare.register(webView: webView)
            }
        ```
      </TabItem>
      <TabItem label="Objective-C">
        ```objective-c
        - (void)viewWillAppear:(BOOL)animated {
            [super viewWillAppear:animated];
            
            // Inject the variable to detect that you are in a WebView context
            NSString *source = @"window.isWebView = true;";
            WKUserScript *userScript = [[WKUserScript alloc] initWithSource:source
                                                                injectionTime:WKUserScriptInjectionTimeAtDocumentEnd
                                                                forMainFrameOnly:NO];
            [webView.configuration.userContentController addUserScript:userScript];

            // Inject the Bridge between the CS Tag in WebView mode and the SDK 
            [Contentsquare registerWithWebView:self.webView];
            }
        ```
    </TabItem>
</Tabs>

### Automatic tag injection

As of version 4.35.0, the SDK will automatically inject the CS Tag in WebView mode if it was not already injected. This will allow us to gather data on all your webviews, even when the user is offline, on pages showing local HTML. 

## Validate WebView tracking

### On the native side

Once you open the screen with the tracked WebView in your app, you should see the following log:

```
CSLIB ℹ️ Info: WebView tracking enabled on native side for page: [URL]. Waiting for Web Tracking Tag messages…
```
Once the web page is loaded in the WebView, you should see the following log:

```
CSLIB ℹ️ Info: WebView navigated to new page: [URL]. Waiting for Web Tracking Tag messages…
```

### On the Web side

Once the Web Tracking tag is detected in the web page, you should see the following log:

```
CSLIB ℹ️ Info: Web Tracking Tag is detected on page: [URL]
```

#### Validating Pageview and Gestures tracking

Page views sent through the Web Tracking Tag are displayed the same way as native screen views:

    ```
    CSLIB ℹ️ Info: Screenview - Screen name: "{{page name given}}" - Screen number: 11
    ```

Taps and swipes detected by the Web Tracking Tag are also displayed the same way as taps and swipe on native elements, but the end of the target contains HTML DOM elements:

    ```
    CSLIB ℹ️ Info: Tap - Target: ...>UIViewControllerWrapperView:eq(0)>UIView:eq(0)>WKWebView:eq(0)|webview|img#picture-holder
    ```

---

# Troubleshooting

URL: https://docs.contentsquare.com/en/ios/4-41-0/troubleshooting/

## Requests are failing
<Render file="en/mobile/troubleshooting/endpoints-to-allow"/>

## Error message "Contentsquare SDK cannot execute operation"

If the following message appears in the logs:
```
CSLIB ℹ️ Info:⚠️ Contentsquare SDK cannot execute operation because it hasn't been started.
````
It means SDK API calls were done incorrectly.

In this case: **gestures and lifecycle events won't be tracked by the SDK.**

Two possible explanations exist for this issue:
- The SDK is manually started and API calls were made before call to `start`.
- The SDK is automatically started and API calls were made before the `AppDelegate.willFinishLaunchingWithOptions`. Ensure that it doesn’t happen or contact our support team if you have a specific need.

## Providing a debug build for investigation

1. Build your app for iOS device (not simulator) 
1. Open the product folder for your app
    ![](~/assets/ios/open-the-product-folder.png "Open the product folder")
1. Copy the .app from Debug-iphoneos and send it to the Contentsquare team
    ![](~/assets/ios/copy-the-app-from-debug-iphoneos.png "Copy the .app from Debug-iphoneos")

---

# Unified SDK versions mapping

URL: https://docs.contentsquare.com/en/ios/4-41-0/unified-sdk/

With our Unified SDK, you gain access to the entire Contentsquare Mobile Platform with a single installation, including [Experience Analytics](/en/ios/session-replay/), [Experience Monitoring](/en/ios/error-analysis/) and [Product Analytics](https://developers.heap.io/docs/ios).
The Unified SDK integrates all our solution-specific SDKs. Here is the version mapping between SDKs:
| Unified SDK version | Experience Analytics / Monitoring SDK version    | Product Analytics SDK Version |
|---------------------|--------------------------------------------------|-------------------------------|
| 0.6.0               | [4.41.0](/en/ios/changelog/#4410---20250402) | [Core 0.8.1](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.5.2               | [4.40.2](/en/ios/changelog/#4402---20250220) | [Core 0.8.1](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.5.1               | [4.40.1](/en/ios/changelog/#4401---20250218) | [Core 0.8.0](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.5.0               | [4.40.0](/en/ios/changelog/#4400---20250212) | [Core 0.8.0](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.8.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.4.0               | [4.39.0](/en/ios/changelog/#4390---20250109) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.3.1               | [4.38.2](/en/ios/changelog/#4382---20241128) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.3.0               | [4.38.0](/en/ios/changelog/#4380---20241025) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.2.3               | [4.37.3](/en/ios/changelog/#4373---20241022) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.2.2               | [4.37.2](/en/ios/changelog/#4372---20241015) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.2.1               | [4.37.1](/en/ios/changelog/#4371---20241001) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.2.0               | [4.37.0](/en/ios/changelog/#4370---20240927) | [Core 0.7.2](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.1.1               | [4.36.1](/en/ios/changelog/#4361---20240920) | [Core 0.7.1](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |
| 0.1.0               | [4.36.0](/en/ios/changelog/#4360---20240906) | [Core 0.7.1](https://developers.heap.io/docs/ios-changelog#swift-core-changelog) - [Autocapture 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog) - [Autocapture Notification 0.7.0](https://developers.heap.io/docs/ios-changelog#ios-autocapture-changelog)       |

---

# Use Adobe Analytics

URL: https://docs.contentsquare.com/en/ios/4-41-0/use-adobe-analytics/

<Render file="en/mobile/adobe-analytics/use-adobe-analytics"/>
## Prerequisites

<Render file="en/mobile/adobe-analytics/ios/prerequisites"/>

## Code implementation

:::note
  **Adobe SDK code requirements**
  - Make sure you register at least `AEPIdentity` and `AEPAnalytics` extensions before starting `AEPCore`.  
Check the [Adobe iOS AEPAnalytics SDK](https://github.com/adobe/aepsdk-analytics-ios) repository for that.
  
  <Render file="en/mobile/adobe-analytics/csmatchingkey-sending-rule"/>
:::

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
    ```swift title="AppDelegate.swift"

    var canSendCSMatchingKey = false

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // ... your existing code ..
        MobileCore.registerExtensions([Identity.self, Analytics.self, ....], {
            // ... your existing code ..

            self.canSendCSMatchingKey = true
            self.sendCSMatchingKeyIfNeeded()
        })

        // When going back to foreground, more than 30 minutes may have elapsed.
        // In this situation Contentsquare SDK may create a new session
        // This is why `sendCSMatchingKeyIfNeeded` must be called in this situation
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(sendCSMatchingKeyIfNeeded),
                                               name: UIApplication.didBecomeActiveNotification,
                                               object: nil)

        // ... your existing code ..
    }

    @objc
    func sendCSMatchingKeyIfNeeded() {
      guard canSendCSMatchingKey else { return }

      let csMatchingKeyTimestampKey = "csMatchingKey_ts"
      let csMatchingKeyValidityMs = 1_800_000 // 30 minutes

      let currentTimestamp = Int(Date().timeIntervalSince1970 * 1000)
      let csMatchingKeyIsPreviousTimestamp = UserDefaults.standard.integer(forKey: csMatchingKeyTimestampKey)
            
      guard (currentTimestamp - csMatchingKeyIsPreviousTimestamp) > csMatchingKeyValidityMs else {
        return
      }

      UserDefaults.standard.set(currentTimestamp, forKey: csMatchingKeyTimestampKey)
            
      let csMatchingKey = "csMatchingKey"
      let csMatchingKeyValue = "\(Double.random(in: 0..<1))_\(currentTimestamp)"
            
      Contentsquare.send(dynamicVar: DynamicVar(key: csMatchingKey, value: csMatchingKeyValue))
      MobileCore.track(state: "csMatchingKey_state", data: [csMatchingKey: csMatchingKeyValue])
    }
    ```
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c title="AppDelegate.m"
    @interface AppDelegate ()

    @property (nonatomic, assign) BOOL canSendCSMatchingKey;

    @end

    @implementation AppDelegate

    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
        self.canSendCSMatchingKey = NO;

        // ... your existing code ..
        [AEPMobileCore registerExtensions:@[AEPMobileEdgeIdentity.class, AEPMobileAnalytics.class] completion:^{
            // ... your existing code ..

            self.canSendCSMatchingKey = YES;
            [self sendCSMatchingKeyIfNeeded];
        }];

        // When going back to foreground, more than 30 minutes may have elapsed.
        // In this situation Contentsquare SDK may create a new session
        // This is why `sendCSMatchingKeyIfNeeded` must be called in this situation
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                selector:@selector(sendKeyIfNeeded)
                                                    name:UIApplicationDidBecomeActiveNotification
                                                  object:nil];

        // ... your existing code ..
        return YES;
    }

    - (void)sendCSMatchingKeyIfNeeded {
        if (!self.canSendCSMatchingKey) {
          return;
        }

        NSString *csMatchingKeyTimestampKey = @"csMatchingKey_ts";
        NSInteger csMatchingKeyValidityMs = 1800000; // 30 minutes
        
        NSInteger currentTimestamp = (NSInteger)([[NSDate date] timeIntervalSince1970] * 1000);
        NSInteger csMatchingKeyIsPreviousTimestamp = [[NSUserDefaults standardUserDefaults] integerForKey:csMatchingKeyTimestampKey];
        
        if ((currentTimestamp - csMatchingKeyIsPreviousTimestamp) <= csMatchingKeyValidityMs) {
            return;
        }
        
        [[NSUserDefaults standardUserDefaults] setInteger:currentTimestamp forKey:csMatchingKeyTimestampKey];
        
        NSString *csMatchingKey = @"csMatchingKey";
        NSString *csMatchingKeyValue = [NSString stringWithFormat:@"%f_%f", (double)arc4random() / UINT32_MAX, currentTimestamp];
        
        DynamicVar *csMatchingKeyDynamicVar = [[DynamicVar alloc] initWithKey:csMatchingKey
                                                          stringValue:csMatchingKeyValue
                                                                error:(NSError * _Nullable __autoreleasing * _Nullable)];
        [Contentsquare sendWithDynamicVar:csMatchingKeyDynamicVar];
        [AEPMobileCore trackState:@"csMatchingKey_state" data:@{csMatchingKey:csMatchingKeyValue}];
    }

    @end
    ```  
  </TabItem>
</Tabs>

---

# Use Google Tag Manager

URL: https://docs.contentsquare.com/en/ios/4-41-0/use-google-tag-manager/

If you are using Firebase to track events such as screenviews or transactions, you can trigger these events for Contentsquare with minimal effort, thanks to Google Tag Manager.
## Prerequisite

If you are following this Google Tag Manager integration process, you should already have followed the Google Tag Manager + Firebase setup as described in [Google's Tag Manager + Firebase: Getting Started](https://developers.google.com/tag-manager/ios/)

You also need to integrate the Contentsquare SDK [see section: Add Contentsquare to your app](/en/ios/#install-the-sdk).

## Screenview events

This section covers how to trigger a Contentsquare screenview event for every Firebase screenview event.
Firebase allows you to [log screenviews automatically or manually](https://firebase.google.com/docs/analytics/screenviews) for an exhaustive coverage of your app screens. 

### Variables

Contentsquare screenview events require a `name` parameter.

Firebase has 2 ways to track screens:

#### 1. Variable for automatically tracked screens

Firebase’s `screen_view` events have an `_sc` parameter (for screen class) which we can use as parameter for screens that are **automatically tracked**.

We will create a variable called **Automatic Screenview Name** with:

- The **Variable Type** set to **Event Parameter**
- The **Event Type** set to **Custom Parameter**
- The **Event Parameter Key** set manually to `_sc`

![](~/assets/ios/gtm-screenview-variable-auto.png)
 
#### 2. Variable for manually tracked screens

Firebase’s `screen_view` events have a `_sn` parameter (for screen name) which we can use as parameter for screens that are **manually tracked**.

We will create a variable called **Manual Screenview Name** with:

- The **Variable Type** set to **Event Parameter**
- The **Event Type** set to **Custom Parameter**
- The **Event Parameter Key** set manually to `_sn`

![](~/assets/ios/gtm-screenview-variable-manual.png)

We can also create variables for our own custom parameters, for example, we can send a `screen_view` event like this:

```swift
Analytics.logEvent(AnalyticsEventScreenView, parameters: [
    AnalyticsParameterScreenName: "MyScreenName",
    "is_user_logged_in": "true"
])
```

and create a variable called **Is User Logged In** with:

- The **Variable Type** set to **Event Parameter**
- The **Event Type** set to **Custom Parameter**
- The **Event Parameter Key** set manually to `is_user_logged_in`

Check out [Configure variables in Tag Manager](https://developers.google.com/tag-platform/tag-manager/ios/v5#configure_variables_in_tag_manager) for more information.

### Screenview trigger

We will need to tell Google Tag Manager when to send a Contentsquare screenview, and for that we need to create a **Trigger**. Firebase sends screenviews as events of name `screen_view`, so we need to create a trigger for that event.

- Name your trigger `Screenview Trigger`
- **Trigger Type** should be set to **Custom**
- Trigger should fire on **Some Events**
- For the Event, the **Event Name** should be **equal** to `screen_view`

![](~/assets/ios/gtm-screenview-trigger.png)

### Create the custom function Tag

In Google Tag Manager, a **Tag** is what configures what happens when some trigger is activated. It will be automatically linked to a custom class which we will create in a later step.

The **Tag Type** should be a **Function Call**. You will also need to fill in the **Class Name** field with a class name of your liking, typically related to what the tag is about (here we chose `ContentsquareScreenviewTag`), which you will re-use later.

![](~/assets/ios/gtm-screenview-tag.png)

### Adding the trigger and the variables to the Tag

Edit the `ContentsquareScreenviewTag` Tag:

:::tip
Type `{{` or click `+` to make sure you are referencing existing GTM variables.
:::

- Add an argument with the key `auto_screen_name` and the variable **`{{Automatic Screenview Name}}`** as the value
- Add an argument with the key `manual_screen_name` and the variables **`{{Manual Screenview Name}} | {{Is User Logged In}}`** or **`{{Manual Screenview Name}}`** as the value
- Add **Contentsquare Screenview Trigger** as the Tag's trigger

It should look like this now:

![](~/assets/ios/gtm-screenview-tag-final.png)

### Create the custom function Tag class

In your app code, create a class of the same name as the `Class Name` you configured in the GTM interface, for example `ContentsquareScreenviewTag`. This is how GTM connects the configuration and the actual class to trigger. This class is used to call the Contentsquare screenview tracking function as follows:

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
  ```swift
  @objc(ContentsquareScreenviewTag)
  final class ContentsquareScreenviewTag: NSObject, TAGCustomFunction {
      @objc func execute(withParameters parameters: [AnyHashable : Any]!) -> NSObject! {
          let autoScreenName = parameters[AnyHashable("auto_screen_name")] as? String
          let manualScreenName = parameters[AnyHashable("manual_screen_name")] as? String
          let screenName = manualScreenName ?? autoScreenName ?? "No screen name!"
          Contentsquare.send(screenViewWithName: screenName)
          return nil
    }
  }
  ```
  </TabItem>
  <TabItem label="Objective-C">
  ```objective-c
  @implementation ContentsquareScreenviewTag <TAGCustomFunction>
  
  - (NSObject*)executeWithParameters:(NSDictionary*)parameters {
      NSString *autoScreenName = [parameters objectForKey:@"auto_screen_name"];
      NSString *manualScreenName = [parameters objectForKey:@"manual_screen_name"];
      NSString *screenName = manualScreenName ? : (autoScreenName ? : @"No screen name!");
      [Contentsquare sendWithScreenViewWithName:screenName];
      return nil;
      }
  
  @end
  ```  
  </TabItem>
</Tabs>

Now, every time Firebase sends a screenview event, Contentsquare will send one as well.

## Screenview events with Custom Variables

:::tip[Custom Variables]
Custom variables are additional information on the page, the user or the session, sent with screenviews.  
For more information about custom variables, see [Track Custom Variables](/en/ios/track-custom-variables/).
:::

It is possible to send custom variables along with the screenview events.  
To do so:
1. Follow **Use Google Tag Manager** > [Screenview events](#screenview-events)
1. Add extra arguments to the `ContentsquareScreenviewTag` Tag as follows:

    - *Key:*  the index of the custom variable
    - *Value:*  a string that will contain the custom variable name and value such as `CVAR_NAME : {{Event Name}}`

:::note
The value of the custom variable is composed of a name and a value: `NAME : VALUE` concatenated into a single string and separated by `:`.
:::

It should look like this:
![](~/assets/ios/gtm-custom-variables-function-call.png)

:::note[For Custom Variables]
 You are free to implement your own logic for filling key and value in GTM, but the application side must be able to receive and extract for each custom variable:
    1. An index
    1. A name
    1. A value
 :::

In the code of your application, edit the code of your class to handle the added custom variables:
 
<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
 ```swift
 @objc(ContentsquareScreenviewTag)
 final class ContentsquareScreenviewTag: NSObject, TAGCustomFunction {
   @objc func execute(withParameters parameters: [AnyHashable : Any]!) -> NSObject! {
     let autoScreenName = parameters[AnyHashable("auto_screen_name")] as? String
     let manualScreenName = parameters[AnyHashable("manual_screen_name")] as? String
     let screenName = manualScreenName ?? autoScreenName ?? "No screen name!"
     var cvars = [CustomVar]()
     for (gTagKey, gTagValue) in parameters {
         
         guard let gTagKey = gTagKey as? String,
                 let cvarIndex = UInt32(gTagKey),
                 let gTagValue = gTagValue as? String else { continue }
         
         let cvarKeyValue = gTagValue.components(separatedBy: ":")
         if cvarKeyValue.count == 2 {
             let name = cvarKeyValue[0].trimmingCharacters(in: .whitespaces)
             let value = cvarKeyValue[1].trimmingCharacters(in: .whitespaces)
             let cvar = CustomVar(index: cvarIndex, name: name, value: value)
             cvars.append(cvar)
         }
     }
     Contentsquare.send(screenViewWithName: screenName, cvars: [cvars])
     return nil
   }
 }
 ```

  </TabItem>
  <TabItem label="Objective-C">

 ```objective-c
 @implementation ContentsquareScreenviewTag<TAGCustomFunction>

 - (NSObject*)executeWithParameters:(NSDictionary*)parameters {
     NSString *autoScreenName = parameters[@"auto_screen_name"];
     NSString *manualScreenName = parameters[@"manual_screen_name"];
     NSString *screenName = manualScreenName ?: autoScreenName ?: @"No screen name!";

     NSMutableArray *cvars = [NSMutableArray array];
     for (NSString *gTagKey in parameters) {

         NSUInteger cvarIndex = [gTagKey integerValue];
         NSString *gTagValue = parameters[gTagKey];
         NSArray *cvarKeyValue = [gTagValue componentsSeparatedByString:@":"];

         if (cvarKeyValue.count == 2) {
             NSString *name = [cvarKeyValue[0] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
             NSString *value = [cvarKeyValue[1] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
             CustomVar *cvar = [[CustomVar alloc] initWithIndex:cvarIndex name:name value:value];
             [cvars addObject:cvar];
         }
     }

     [Contentsquare sendScreenViewWithName:screenName cvars:cvars];
     return nil;
 }
 @end
 ```
  </TabItem>
</Tabs>
 
 With this code, the custom variables will be sent by Contentsquare automatically along with the screenview.

## Transaction events

A Contentsquare transaction event can also be triggered for every Firebase `ecommerce_purchase` event (See Firebase [Objective-C](https://firebase.google.com/docs/reference/ios/firebaseanalytics/api/reference/Constants#/c:FIREventNames.h@kFIREventPurchase)/[Swift](https://firebase.google.com/docs/reference/swift/firebaseanalytics/api/reference/Constants#analyticseventpurchase) documentation).
To do so, you will need to follow the setup described below.

### Variables

We have to create at least two variables in order to be able to build a transaction event: Value and Currency. Optionally, it is also possible to pass a transaction identifier, meaning you would need to create an additional variable in order to be able to use it.

#### Value (mandatory)

![](~/assets/ios/gtm-transaction-variable-value.png)

#### Currency (mandatory)

![](~/assets/ios/gtm-transaction-variable-currency.png)

#### Transaction ID (optional)

![](~/assets/ios/gtm-transaction-variable-transactionid.png)

### Trigger

Create the following custom trigger.

![](~/assets/ios/gtm-transaction-trigger.png)

### Tag

Create a **Function call** Tag called `ContentsquareTransactionTag`, pass the two to three variables created earlier as arguments (skip the `id` line if you do not want to use it) and set its trigger to the one you just created.

![](~/assets/ios/gtm-transaction-tag.png)

### Implementing the function call

We need to create a `ContentsquareTransactionTag` class, and have it adhere to the `TAGCustomFunction` protocol to link it to the Google Tag Manager custom Tag of the same name.

Take good note that in order to be able to create and send a Contentsquare Transaction successfully, when you create a Firebase purchase event you will have to at least pass values for `kFIRParameterValue` and `kFIRParameterCurrency`, and can optionally pass a value for `kFIRParameterTransactionID`, when you create a Firebase purchase event.

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
    ```swift
    @objc(ContentsquareTransactionTag)
    final class ContentsquareTransactionTag: NSObject, TAGCustomFunction {

        @objc func execute(withParameters parameters: [AnyHashable : Any]!) -> NSObject! {
            if let currency = parameters[AnyHashable("currency")] as? String,
                let value = parameters[AnyHashable("value")] as? Float {
                let identifier = parameters[AnyHashable("id")] as? String
                Contentsquare.send(transaction: CustomerTransaction.init(id: identifier, value: value, currency: currency))
            }
            return nil
        }
    }
    ```
  </TabItem>
  <TabItem label="Objective-C">
    ```objective-c
    @implementation ContentsquareTransactionTag <TAGCustomFunction>
    
    - (NSObject*)executeWithParameters:(NSDictionary*)parameters {
        NSString *identifier = [parameters objectForKey:@"transaction_id"];
        NSNumber *value = [parameters objectForKey:@"value"];
        NSString * currency = [parameters objectForKey:@"currency"];
        if (currency && value) {
            [Contentsquare sendWithTransaction:[[CustomerTransaction alloc]     initWithId:identifier value:[value floatValue] stringCurrency:currency]];
        }
        return nil;
    }
    
    @end
    ```
  </TabItem>
</Tabs>

Now, every time Firebase sends an `ecommerce_purchase` event, Contentsquare will send one as well.

## Dynamic variable events

We can send values from any Firebase event as a Contentsquare dynamic variable:

```swift
Analytics.logEvent("addToCart", parameters: [
    "product_count": 12,
    "product_name": "ProductA"
])
```

### Variables

The `addToCart` event has parameters `product_count`, `product_name`, we will create variables called **Product Count** and **Product Name** with:

- The **Variable Type** set to **Event Parameter**
- The **Event Type** set to **Custom Parameter**
- The **Event Parameter Key** set manually to `product_count`/`product_name`

Check out [Configure variables in Tag Manager](https://developers.google.com/tag-platform/tag-manager/ios/v5#configure_variables_in_tag_manager) for more information.

### Triggers

We need to create a **Trigger** to tell Google Tag Manager when to send a Contentsquare dynamic variable, so we will create one for the event `addToCart`.

- Name your trigger `AddToCartTrigger`
- **Trigger Type** should be set to **Custom**
- Trigger should fire on **Some Events**
- For the Event, the **Event Name** should be **equal** to `addToCart`

### Create the custom function Tag

We need to create a function tag **AddToCartDynamicVar**

- The **Tag Type** set to **Function Call**
- The **Class Name** set to **DynamicVarTag** (we'll create this class later)
- Add two arguments, `Key: cs_dynamic_var_key, Value: Product`, `Key: cs_dynamic_var_value, Value: {{Product Name}}: {{Product Count}}`
- The **Triggering** set to **AddToCartTrigger**

It should look like this now:

![](~/assets/ios/gtm-dynamic-var-tag.png)

### Create the custom function Tag class

In your app code, create a class named `DynamicVarTag`, assuming you used the name we suggested when creating the Tag in the GTM interface. If you named it otherwise, make sure to use the same name here, as it is how GTM connects the configuration and the actual class to trigger. We will use this class to call the Contentsquare dynamic variable function as follows.

```swift
import GoogleTagManager
import ContentsquareModule

@objc(DynamicVarTag)
final class DynamicVarTag: NSObject, TAGCustomFunction {
    @objc func execute(withParameters parameters: [AnyHashable : Any]!) -> NSObject! {
        guard let dynamicVarKey = parameters["cs_dynamic_var_key"] as? String else {
            return nil
        }
        let dynamicVarValue = parameters["cs_dynamic_var_value"]
        
        if let dynamicVarStringValue = dynamicVarValue as? String {
            let dynamicVarString = DynamicVar(key: dynamicVarKey, value: dynamicVarStringValue)
            Contentsquare.send(dynamicVar: dynamicVarString)
        } else if let dynamicVarIntValue = dynamicVarValue as? UInt32 {
            let dynamicVarInt = DynamicVar(key: dynamicVarKey, value: dynamicVarIntValue)
            Contentsquare.send(dynamicVar: dynamicVarInt)
        }
        return nil
    }
}
```

Now, every time Firebase sends an `addToCart` event, Contentsquare will send a dynamic variable `DynamicVar(key: "Product", value: "ProductA: 12")`.

:::note
To create another tag for a dynamic variable, you can use the `DynamicVarTag` class again.
:::

---

# Changelog

URL: https://docs.contentsquare.com/en/react-native/4-15-0/changelog/

import { EmailForm } from '~/components';
<EmailForm />

## 4.15.0 - 2025.04.15

- **Native SDKs:**
  - **[Android native SDK 4.37.0](/en/android/changelog/#4370---20250402)**

## 4.14.0 - 2025.04.02

- **Bug fix:** Prevented a crash when the new architecture is enabled. Learn more about [compatibility](/en/react-native/compatibility/) with the new architecture in React Native.

## 4.13.1 - 2025.03.24

- **Native SDKs:**

  - **[Android native SDK 4.36.2](/en/android/changelog/#4362---20250321)**

## 4.13.0 - 2025.02.26

- **Native SDKs:**

  - **[Android native SDK 4.36.0](/en/android/changelog/#4360---20250210)**
  - **[iOS native SDK 4.40.2](/en/ios/changelog//#4402---20250220)**

- **Bug fix:** Removed conflicted dependencies
- Official support for React Native up to 0.78.x

**Session Replay**

- [Full masking configuration by App/SDK version in the CSQ Console](/en/react-native/session-replay/#remote-masking-configuration-in-the-csq-console)

## 4.12.0 - 2025.02.10

- **Native SDKs:**

  - **[Android native SDK 4.35.0](/en/android/changelog/#4350---20250102)**
  - **[iOS native SDK 4.39.0](/en/ios/changelog//#4390---20250109)**

- **Bug fix:** iOS - Resolve crashes caused by unnecessary React import

## 4.11.2 - 2024.12.10

- **Native SDKs:**

  - **[iOS native SDK 4.38.3](/en/ios/changelog/#4383---20241210)**

- **Bug fix:** iOS - Resolve missing webview screens in Session Replay

## 4.11.1 - 2024.12.04

- **Bug fix:** iOS - Fix a crash in the Error Analysis module occurring on React Native 0.76.x

## 4.11.0 - 2024.11.21

- **Native SDKs:**

  - **[Android native SDK 4.34.0](/en/android/changelog/#4340---20241025)**
  - **[iOS native SDK 4.38.1](/en/ios/changelog/#4380---20241025)**

- Official support for React Native up to 0.76.x
- Simpler implementation method for CSWebView

- **Bug fix:** iOS - Prevents text duplication in Session Replay when using `react-native-linear-gradient` and `@react-native-masked-view/masked-view` packages.

## 4.10.1 - 2024.10.14

- **Native SDKs:**

  - **[Android native SDK 4.33.1](/en/android/changelog/#4331---20241007)**

- **Android**
  - Improved `CSMask` component

## 4.10.0 - 2024.10.08

- **Native SDKs:**

  - **[Android native SDK 4.33.0](/en/android/changelog/#4330---20241002)**
  - **[iOS native SDK 4.37.1](/en/ios/changelog/#4371---20241001)**

- **iOS**

  - Added support for the `react-native-linear-gradient` library

- **Track transactions**

  - Enhancements to the `sendTransaction` method
  - ⛔️ DEPRECATED `sendTransactionWithStringCurrency`: use `sendTransaction` instead

- **Error Analysis**
  - Collect information for crashes in React Native

## 4.9.0 - 2024.09.13

- **Native SDKs:**

  - **[Android native SDK 4.32.1](/en/android/changelog/#4321---20240910)**
  - **[iOS native SDK 4.36.0](/en/ios/changelog/#4360---20240906)**

- **iOS**

  - Added support for the `@react-native-masked-view` library

- **Bug fix:** CSWebView injection

## 4.8.0 - 2024.08.21

- **Native SDKs:**

  - **[Android native SDK 4.31.0](/en/android/changelog/#4310---20240802)**
  - **[iOS native SDK 4.35.1](/en/ios/changelog/#4351---20240814)**

- Official support for React Native up to 0.75.x
- **Bug fix:** Android - Resolved an issue where navigating back in the webview history would result in a white screen
- **Bug fix:** Android - Fixed a crash issue when manually initializing the SDK

## 4.7.0 - 2024.07.15

- **Native SDKs:**

  - **[Android native SDK 4.30.0](/en/android/changelog/#4300---20240701)**
  - **[iOS native SDK 4.34.0](/en/ios/changelog/#4340---20240702)**

- Improved SDK thread safety
- Improved SDK ProGuard rules

## 4.6.1 - 2024.07.02

- **Bug fix:** Fixing an issue with source and URL prop changes in CSWebView

## 4.6.0 - 2024.06.19

- **Native SDKs:**

  - **[Android native SDK 4.29.1](/en/android/changelog/#4291---20240611)**
  - **[iOS native SDK 4.33.1](/en/ios/changelog/#4331---20240613)**

- Improved `CSMask` component.

## 4.5.1 - 2024.06.17

- **Native SDK:**

  - **[Android native SDK 4.27.1](/en/android/changelog/#4271---20240329)**

## 4.5.0 - 2024.05.17

- **Native SDK:**

  - **[iOS native SDK 4.32.0](/en/ios/changelog/#4320---20240423)**

- Official support for React Native up to 0.74.x

## 4.4.0 - 2024.04.08

- **Native SDKs:**

  - **[Android native SDK 4.27.0](/en/android/changelog/#4270---20240327)**
  - **[iOS native SDK 4.31.2](/en/ios/changelog/#4312---20240325)**

- **Bug fix:** Fixing an issue in Expo involving a missing library import.
- **Bug fix:** Fixing an issue on Android related to the use of nested `CSMask` components.

## 4.3.1 - 2024.02.29

- **Native SDKs:**

  - **[iOS native SDK 4.30.2](/en/ios/changelog/#4302---20240229)**

- **Bug fix:** Fixing an issue where occasionally closing a WebView freezes the view.

## 4.3.0 - 2024.02.28

- **Native SDKs:**

  - **[Android native SDK 4.26.0](/en/android/changelog/#4260---20240220)**
  - **[iOS native SDK 4.30.1](/en/ios/changelog/#4301---20240227)**

- **Session Replay**
  - New method to subscribe to Session Replay Link changes
  - ⛔️ DEPRECATED `getCurrentSessionReplayLink`: use `onSessionReplayLinkChange` instead

## 4.2.0 - 2024.01.30

- **Native SDKs:**

  - **[iOS native SDK 4.29.1](/en/ios/changelog/#4291---20240126)**

- CSWebView support for webview source object

## 4.1.0 - 2024.01.17 [⛔️ DEPRECATED]

- **Native SDKs:**

  - **[Android native SDK 4.24.0](/en/android/changelog/#4240---20231215)**
  - **[iOS native SDK 4.28.0](/en/ios/changelog/#4280---20231219)**

- **Bug fix:** Remove style on `CSMask`

## 4.0.1 - 2024.01.05

- **Bug fix:** URL injection method in WebView

## 4.0.0 - 2024.01.03

- Official support for React Native up to 0.73.x
- **BREAKING CHANGE:** New WebView injection method. Refer to new documentation to check implementation [Track WebViews](/en/react-native/track-webviews/)

## 3.10.0 - 2023.12.21 [⛔️ DEPRECATED]

## 3.9.0 - 2023.11.28

- **Native SDKs:**

  - **[Android native SDK 4.23.1](/en/android/changelog/#4231---20231124)**
  - **[iOS native SDK 4.27.0](/en/ios/changelog/#4270---20231116)**

- **Custom variables** feature is now available on Android
- Improved **WebView injection** for Android
- **Bug fix:** Prevent a potential error on Android `CSMask`

## 3.8.0 - 2023.11.06

- **Native SDKs:**

  - **[Reverted to Android native SDK 4.20.0](/en/android/changelog/#4200---20230713)**
    - **The Custom variables** feature is NOT available on Android
  - **[iOS native SDK 4.25.2](/en/ios/changelog/#4252---20230922)**

- **Session Replay**
  - Added a new method `setUserIdentifier`
- **Bug fix:** Fixed a bug on Android when using the `start` method
- **Bug fix:** Fixed a bug on Android when using the `CSMask`

## 3.7.1 - 2023.10.04 [⛔️ DEPRECATED]

- **Bug fix:** Fixed a crash that occurred when manually starting the application while InApp features were active

## 3.7.0 - 2023.09.19 [⛔️ DEPRECATED]

- **Native SDKs:**

  - **[Android native SDK 4.21.0](/en/android/changelog/#4210---20230829)**
  - **[iOS native SDK 4.25.1](/en/ios/changelog/#4251---20230913)**

- **Session Replay**
  - Added a new method `setDefaultMasking`
- **Custom variables** feature is now available on Android
- **Bug fix:** Fix a crash caused by `CSMask`

## 3.6.1 - 2023.08.25

- Support `use_frameworks!` in Podfile

## 3.6.0 - 2023.08.02

- **Native SDKs:**

  - **[Android native SDK 4.20.0](/en/android/changelog/#4200---20230713)**
  - **[iOS native SDK 4.24.0](/en/ios/changelog/#4240---20230714)**

- Official support for React Native up to 0.72.x
- **Bug fix:** Fixed WebView Injection on Android - there was an issue with WebView injection failing during the initial visit of a WebView
- **Bug fix:** Fixed `CSMask` - there was an issue with `CSMask` impacting the screen layout
- Zoning analysis: Reliable targets feature is now available on iOS
- Session Replay: Collecting gesture events is now available on iOS

- **Error Analysis**:
  - Enabled collection of failed network requests (API Errors)
  - Enabled collection of API Error troubleshooting details (Available in the Session Replay)
  - Added a method to mask API errors using template URL `ErrorAnalysis.setUrlMaskingPatterns`

## 3.5.0 - 2023.06.22

- **Native SDKs:**

  - **[Android native SDK 4.19.0](/en/android/changelog/#4190---20230614)**
  - **[iOS native SDK 4.23.0](/en/ios/changelog/#4230---20230609)**

- **Session Replay:**
  - Fixed an animation glitch.
  - Added a method to programmatically retrieve the Session Replay link.
  - Different quality settings are available.

## 3.4.1 - 2023.06.07

- Fix a bug where React Native project with version below 0.70 couldn't find `CSMask` import.

## 3.4.0 - 2023.05.19

:::warning
If your **RN version is below 0.70.0**, Make sure to follow **[this configuration](/en/react-native/compatibility/#for-react-native-project-below-0700)** when implementing this Bridge version.
:::

- The Bridge uses **[Android native SDK 4.18.1](/en/android/changelog/#4181---20230516)** and **[iOS native SDK 4.22.1](/en/ios/changelog/#4221---20230505)**
- [Session Replay](/en/react-native/session-replay/) feature is available for iOS and Android. For more information, reach out to your Contentsquare contact.

## 3.3.1 - 2023.05.02

:::warning
If your **RN version is below 0.70.0**, Make sure to follow **[this configuration](/en/react-native/compatibility/#for-react-native-project-below-0700)** when implementing this Bridge version.
:::

- Fix of an Xcode 14 issue

## 3.3.0 - 2023.04.03

:::warning
If your **RN version is below 0.70.0**, Make sure to follow **[this configuration](/en/react-native/compatibility/#for-react-native-project-below-0700)** when implementing this Bridge version.
:::

- **Custom Variables:** The [Custom Variables feature](/en/react-native/track-custom-variables/) is now supported by the bridge (for iOS only, beta version).
- Adding masking component for future Session Replay feature (WIP)

## 3.2.0 - 2023.03.08

- The Bridge uses **[iOS native SDK 4.20.0](/en/ios/changelog/#4200---20230224)**
- Official support for React Native up to 0.71.x
- Add error callback to dynamic variables method

## 3.1.0 - 2023.01.12

- The Bridge uses **[Android native SDK 4.15.0](/en/android/changelog/#4150---20221220)** and **[iOS native SDK 4.18.0](/en/ios/changelog/#4180---20221216)**

## 3.0.0 - 2022.12.12

- Upgrade maximum React Native version compatibility to 0.70.x
- **BREAKING CHANGE:** New WebView injection method

## 2.8.0 - 2022.12.01

- The Bridge uses **[Android native SDK 4.14.0](/en/android/changelog/#4140---20221103)** and **[iOS native SDK 4.16.0](/en/ios/changelog/#4160---20220912)**
- Add Expo compatibility

## 2.7.0 - 2022.08.03

- The Bridge uses **[Android native SDK 4.11.0](/en/android/changelog/#4110---20220707)** and **[iOS native SDK 4.15.1](/en/ios/changelog/#4151---20220726)**

## 2.6.0 - 2022.05.10

- The Bridge uses **[Android native SDK 4.9.0](/en/android/changelog/#490---20220415)** and **[iOS native SDK 4.13.0](/en/ios/changelog/#4130---20220505)**
- Official support for React Native up to 0.68.x
- Fix a snapshot issue with some ReactNative UI components (RNSVGSvgView)

## 2.5.3 - 2022.04.19

- Fix unreliable WebView injection.
- Official support for React Native up to 0.67.x

## 2.5.2 - 2022.2.16

- Fixing a crash caused by WebViews in some specific cases.

## 2.5.1 - 2022.1.21

- The Bridge uses **[Android native SDK 4.7.0](/en/android/changelog/#470---20220114)** and **[iOS native SDK 4.10.1](/en/ios/changelog/#4101---20220114)**

## 2.5.0 - 2022.1.18

- Official support for React Native up to 0.66.x
- The Bridge uses **[Android native SDK 4.6.0](/en/android/changelog/#460---20211215)** and **[iOS native SDK 4.10.0](/en/ios/changelog/#4100---20211213)**

## 2.4.0 - 2021.11.18

- **WebView tracking:** WebView tracking is now available. See [Track WebViews section](/en/react-native/track-custom-variables/)
- **Implementing deeplink support for in-app features (iOS):** You can now handle the deeplink URL directly from your JavaScript code, in addition to being able to handle it the native way
- The Bridge uses **[Android native SDK 4.4.0](/en/android/changelog/#440---20211018)** and **[iOS native SDK 4.9.0](/en/ios/changelog/#490---20211104)**
- **Drop support for iOS 10.** Minimum supported version is now iOS 11. [See Compatibility section](/en/ios/compatibility/)

## 2.3.0 - 2021.09.02

- **Disable auto-start:** Option to start the SDK in a manual method instead of starting automatically.
- The Bridge uses **[Android native SDK 4.3.0](/en/android/changelog/#430---20210810)** and **[iOS native SDK 4.6.0](/en/ios/changelog/#460---20210810)**

## 2.2.1 - 2021.07.08

- The Bridge uses **[Android native SDK 4.2.1](/en/android/changelog/#421---20210707)** and **[iOS native SDK 4.4.0](/en/ios/changelog/#440---20210623)**

## 2.2.0 - 2021.06.28

- The Bridge uses **[Android native SDK 4.2.0](/en/android/changelog/#420---20210614)** and **[iOS native SDK 4.4.0](/en/ios/changelog/#440---20210623)**
- Official support for React Native 0.64.x
- Fixed issue that caused some apps to freeze

## 2.1.0 - 2021.03.11

- The Bridge uses **[Android native SDK 4.1.0](/en/android/changelog/#410---20210216)** and **[iOS native SDK 4.1.0](/en/ios/changelog/#410---20210121)**

## 2.0.0 - 2020.11.03

- The Bridge uses **[Android native SDK 4.0.0](/en/android/changelog/#400---20201029)** and **[iOS native SDK 4.0.0](/en/ios/changelog/#400---20201028)**

## 1.1.1 - 2020.08.26

- The Bridge uses **[iOS native SDK 3.2.1](/en/ios/changelog/#321---20200826)**

## 1.1.0 - 2020.08.21

- The Bridge uses **[Android native SDK 3.2](/en/android/changelog/#320---20200730)** and **[iOS native SDK 3.2](/en/ios/changelog/#320---20200727)**
- Official support for React Native 0.63.x

## 1.0.0 - 2020.04.23

- The bridge is now available at `@contentsquare/react-native-bridge`.
- The Bridge uses **Android native SDK 3.1.0** and **iOS native SDK 3.1.1**
- Bridge only supports React Native >=0.60
- Dynamic Variables are supported

---

# Collected data points

URL: https://docs.contentsquare.com/en/react-native/4-15-0/collected-data-points/

- The events are in JSON format, which lists the properties and their description in comment.
- Events are sent to the server in batches.
- A batch is a subset of events originating from one session. A session can send events in more than one batch.
- The batch size is defined in a run configuration file specific to each app (50 events by default).
## Requests meta data

Each batch has a common header, a set of device specific, and repeatable information and an array of events, which is immutable.
The header is composed at the moment of sending, so it has to be constant info ONLY. The array in the payload is data stored at the moment of collection.

The structure of the batches of events will have the following format:

```javascript
{
  pid:8, // int - ProjectId - represented in the mobile config format
  uid:"ac1529a7-59f6-49d9-b254-6f0a22f57284", // String - uuid Unique user ID
  dt:4, // int - device type (loosely enforced enum - [SDK-phone : 4, SDK-tablet :5])
  dma:"Samsung", // String - device manufacturer. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  dmo:"SG", // String - device model. This property is optional and if by any chance the device model cannot be determined it will be dropped from the Json object.
  os:"7.0", // String - os version (Android version name 6.0, 7.0, 8.0)
  l:"en_US", // String - Language in iso-639 format https://www.ibabbleon.com/iOS-Language-Codes-ISO-639.html
  tz:"Europe/Paris", // String - timezone https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  now:1522159618000, // long - timestamp when the batch was sent
  to:{ // object - type origin of the event
    an:"appname" // String - application name
    st:"SDK-android", // String - type of SDK
    sf:"release", // string - SDK flavor/variant [release/debug/god]
  },
  r:{ // Device - resolution.
    w:1080, // int - width
    h:1920 // int - height
    d: 1.5 // The device density as float. Its values can vary between (0.75 and 10)
  },
  pl:[] // JSON array payload - list of event objects, see below
}
```

## Events

### Events meta data

All events have a common first part (don't confuse it with the header explained above). This common section is data which is common for all events by type but is gathered at the moment the event occurred. This common section is a part of the actual event payload.

```javascript
{
  upt:1522, // long - system update in milliseconds
  euid:"euid", // String - event UUID
  url:"app-and://identifier/mainPath/secondaryPath?title=screeName", // String - screenName is passed in the title query Parameter
  scn:4, // int - the number of screens already shown in the session
  c:3, // int - connectivity type [-1 - offline, 0 - error, 1 - wifi, 2 - 2g, 3 - 3g, 4 - 4g]
  ci:"verizon", // String - carrier_id when user is on mobile network
  o:1, // int - orientation [0 = portrait, 1 = landscape]
  vo:{ // object - version origin of the event
    sv:"2.1", // string version of the SDK
    sb:4, // int - SDK build number
    av:"appVersion", // String - application version
    af:"appFlavor" // String - application string - [release/debug/god]
    ab:1 // int - application build number
  },
  sn:1, // int - session id (positive int)
  t:12894726459435 // long - timestamp of the event (in milliseconds)
}
```

All event specific properties are appended to this JSON object.

### App Start

This event describes the absolute start of the app.

The trigger for this event is the absolute start of the app.

This is the first event sent when the SDK is invoked.

```javascript
ea:0 // int - event action - defined above
```

### App Show

This event is sent when the user brings the app in the foreground (switching from another app, exiting lock screen, etc.). This event means the app is focused.

```javascript
ea:1 // int - event action - defined above
```

### App Hide

This event is sent when the user exits (minimizes) the app, or switches to something else. This event means the app is not focused and the session might end, but we have not completely ended the session yet, as the user might return.

```javascript
ea:2 // int - event action - defined above
```

### Screenview

Everything starts with a View event. This is an event which describes the equivalent of a "page view" on the web. This event is sent when the Track Screen API is called.

```javascript
ea:4 // int - event action - defined above
st:"title", // String - screen title
sl:34543 // int - (load time) screen load time (diff between last action and this event)
```

### Tap

Single Finger gesture event, when the user is interacting with a loaded screen. This is an event which describes the equivalent of a "click" in the web.
This event is defined by the following sequence of touch events:

- Touch Down -> N x Touch Move -> Touch Up

```javascript
ea:6 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
ur: true, // boolean - was this a "responsive" touch event (the target view had a handler)
```

### Long press

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Duration: > 500ms
- Distance: < 24 dp

```javascript
ea:8 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
```

### Drag (Slow Swipe)

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Distance: > 48 dp
- Finger Velocity < 100 dp/s

```javascript
ea:9 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view path
tvid:"btn_ok", // String - target view id
fd: 3, // int - finger direction - [1,2,3,4,5] -> [up, down, left, right, complex_pattern]
tvd:100, // int - target view distance dragged
tvv:100 // int - target view velocity while dragging dp/s
```

### Flick (Fast Swipe)

Single Finger gesture event, when the user is interacting with a loaded screen.

This event is defined by the following sequence of touch events:

- Touch Down → N x Touch Move → Touch Up
- Distance: > 48 dp
- Finger Velocity > 100 dp/s

```javascript
ea:10 // int - event action - defined above
tvp:"[root]>view#id>view2>", // String - target view graph path
tvid:"btn_ok", // String - target view id
fd: 3, // int - finger direction - [1,2,3,4,5] -> [up, down, left, right, complex_pattern]
tvd:100, // int - target view distance scrolled
tvv:100 // int - target view velocity while scrolling dp/s
```

### Transaction

To track transactions, we provide a public API which can send a transaction object (see section [Track Transactions](/en/react-native/track-transactions/)). This object must contain the following parameters:

```javascript
ea:16, // int - event action - defined above
tr:{ // a json object with different properties defining the transaction made
  vl: 20.0, // mandatory - float - the value of the transaction
  cu: 978, // mandatory - int - the ISO 4217 code of the currency of the transaction
  id: "32akjkljklJ575775" // optional - string - an id for the transaction
}
```

## Dynamic variables

To track dynamic variables we provide a public API which can send a custom event object (see section [Dynamic variables](/en/react-native/track-dynamic-variables/)).

```javascript
// Dynamic variable event with a string value
ea:18, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v:"value" // String - Custom value assigned by client.
```

```javascript
// Dynamic variable event with a number value
ea:19, // int - event action - defined above
k:"key", // String - Custom key assigned by client.
v: 2344 // Integer - Custom value assigned by client.
```

## Reliable targets (iOS only)

:::warning[Beta Version]
The purpose of this beta is to test the feature with a selected group of users in order to gather feedback and identify any areas for improvement before its official release. 
Contentsquare is committed to using this feedback to enhance the feature and make it as user-friendly as possible.
If you encounter any issues or have any questions during the implementation of the Reliable targets,
do not hesitate to reach out to your Implementation Manager for support.
:::

The identifier associated with each view in your app is the concatenation of the list of its ancestors in the React Native tree view.

This means that if you have the following component:

```javascript title="basicComponent.js"
const basicComponent = () => {
  return (
    <View>
      <Text>Hello world!</Text>
      <TextInput placeholder="Enter your name" />
    </View>
  );
};
```

You may always want to use the same id for this component, even if you publish a new version of the app in which it has been moved in the tree view.

Having a reliable target for a view or a container of views enables the analysis of data across various Snapshots from different dates and versions, including layouts or different A/B testing variations.

Here are examples of how the reliable targets feature can be used:

- Tracking elements that can dynamically move on a page (example: Customizable profile page).
- Tracking elements that you want to monitor from one version to another, even if their position changes (example: Moving carousel position from top to bottom).
- Tracking elements during A/B testing (example: Testing new and old Product page on the same version).
- Tracking elements that can be used on multiple pages (example: Search bar).
- Ensuring that a call to action has a unique identifier wherever it appears on a screen (example: AddtoCart button).

The Contentsquare React Native SDK provides a `CSReliableTarget` component that can be used to wrap the component you want to track reliably.

`CSReliableTarget` accepts a mandatory `name` prop that allows the identification of the component to track.

```javascript title="componentWithReliableTarget.js"
const componentWithReliableTarget = () => {
  return (
    <CSReliableTarget name="MyComponentTracked">
      <View>
        <Text>Hello world!</Text>
        <TextInput placeholder="Enter your name" />
      </View>
    <CSReliableTarget>
  );
};
```

:::note
Each target name must be unique to effectively use the feature.
:::

---

# Disabling Automatic SDK Initialization

URL: https://docs.contentsquare.com/en/react-native/4-15-0/disable-autostart/

If you prefer to control when the SDK starts, you can disable the autostart feature and programmatically start the SDK when needed.
## Disabling autostart on iOS

You need to edit the `Info.plist`, usually located in `ios/{project_name}/`, add the following key:

```xml title="Info.plist"
<dict>
    ...
    <key>CSDisableAutostart</key>
    <true/>
    ...
</dict>
```

## Disabling autostart on Android

You need to edit the `AndroidManifest.xml`, usually located in `android/app/src/main/`, add the following flag:

```xml title="AndroidManifest.xml" {5}
<application>
  ...
    <meta-data
      android:name="com.contentsquare.android.autostart"
      android:value="false"
    />
  ...
</application>
```

## Programmatically start the SDK

Then, you can start the Contentsquare SDK by calling the `start()` method of the `Contentsquare` class.
This function should be called as early as possible in the app process. Call this function in the `useEffect` of your App element:

```javascript
const App = (): JSX.Element => {
    ...

    useEffect(() => {
        Contentsquare.start()
        ...
    });
    ...
}
```

---

# How the SDK works

URL: https://docs.contentsquare.com/en/react-native/4-15-0/how-the-sdk-works/

## Initialization
The way our SDK works is by auto-starting with the application launch and attaching to the current process in order to intercept the events and gestures we are interested in.

## Configuration

Once started, our SDK fetches its config from our servers, and then depending on the segmentation size (defined by our team when you sign a contract) it will start collecting data from system and user events it detects from the runtime.

## Tracking

The SDK monitors the application lifecycle events and the view hierarchy, and generates analytics data from the behavior of the app, the content of the screen and the interaction of the user.
These events are then locally stored, and eventually sent to our servers in batches. We then aggregate that data to create usable visual information into our Web Application, which you use to gather insights.

## Sending data

📚 [Native Android SDK documentation for Sending data](/en/android/how-the-sdk-works/#sending-data)  
📚 [Native iOS SDK documentation for Sending data](/en/ios/how-the-sdk-works/#sending-data)

## Session definition
<Render file="en/mobile/how-the-sdk-works/session-definition"/>

---

# Compatibility

URL: https://docs.contentsquare.com/en/react-native/4-15-0/compatibility/

Each version of the Contentsquare bridge will be linked to specific, fixed versions of each native SDK. In order to make that clear, here is a compatibility table to consider when choosing your version of the bridge. Refer to the [React Native Bridge Changelog](/en/react-native/changelog/) to know what the changes are for each version.
:::warning[Compatibility Notice - React Native New Architecture]
  Contentsquare React Native SDK does not currently support React Native’s New Architecture. Enabling the New Architecture may lead to unexpected issues. We recommend continuing to use the legacy architecture for stable integration.

  **Known Issues**
    - React Native v0.76.x
      - The Session Replay feature does not function properly on iOS.
    - React Native v0.77.x and v0.78.x
      - Session Replay continues to experience issues on iOS.
      - WebView support is impacted on both iOS and Android due to issues in the `react-native-webview` library:
          - WebViews will render as blank screens on Android.
          - On iOS WebView is not working. A community patch has been [suggested](https://github.com/react-native-webview/react-native-webview/issues/3697#issuecomment-2697390751), which may resolve the problem.
            - **Note**: Contentsquare is not responsible for this workaround and does not officially support this patch.
    - Zoning Analysis
      - To ensure seamless functionality, customers must retake Snapshots when transitioning to the New Architecture. Note that data from the old architecture will not be carried over to the new one.
:::

| Bridge Version | iOS SDK Version | Android SDK Version | Min React Native Version | Max React Native Version |
| :------------: | :-------------: | :-----------------: | :----------------------: | :----------------------: |
|     4.15.0     |     4.40.2      |       4.37.0        |       0.70.0\*\*\*       |          0.78.x          |
|     4.14.0     |     4.40.2      |       4.36.2        |       0.70.0\*\*\*       |          0.78.x          |
|     4.13.1     |     4.40.2      |       4.36.2        |       0.70.0\*\*\*       |          0.78.x          |
|     4.13.0     |     4.40.2      |       4.36.0        |       0.70.0\*\*\*       |          0.78.x          |
|     4.12.0     |     4.39.0      |       4.35.0        |       0.70.0\*\*\*       |          0.76.x          |
|     4.11.2     |     4.38.3      |       4.34.0        |       0.70.0\*\*\*       |          0.76.x          |
|     4.11.1     |     4.38.1      |       4.34.0        |       0.70.0\*\*\*       |          0.76.x          |
|     4.11.0     |     4.38.1      |       4.34.0        |       0.70.0\*\*\*       |          0.76.x          |
|     4.10.1     |     4.37.1      |       4.33.1        |       0.70.0\*\*\*       |          0.75.x          |
|     4.10.0     |     4.37.1      |       4.33.0        |       0.70.0\*\*\*       |          0.75.x          |
|     4.9.0      |     4.36.0      |       4.32.1        |       0.70.0\*\*\*       |          0.75.x          |
|     4.8.0      |     4.35.1      |       4.31.0        |       0.70.0\*\*\*       |          0.75.x          |
|     4.7.0      |     4.34.0      |       4.30.0        |       0.70.0\*\*\*       |          0.74.x          |
|     4.6.1      |     4.33.1      |       4.29.1        |       0.70.0\*\*\*       |          0.74.x          |
|     4.6.0      |     4.33.1      |       4.29.1        |       0.70.0\*\*\*       |          0.74.x          |
|     4.5.1      |     4.32.0      |       4.27.1        |       0.70.0\*\*\*       |          0.74.x          |
|     4.5.0      |     4.32.0      |       4.27.0        |       0.70.0\*\*\*       |          0.74.x          |
|     4.4.0      |     4.31.2      |       4.27.0        |       0.70.0\*\*\*       |          0.73.x          |
|     4.3.1      |     4.30.2      |       4.26.0        |        0.65.0\*\*        |          0.73.x          |
|     4.2.0      |     4.29.1      |       4.24.0        |        0.65.0\*\*        |          0.73.x          |

\*make sure to add [this configuration](#for-react-native-project-below-0700) if your RN version is below 0.70.0

\*\*make sure to add [this configuration](#for-react-native-project-between-069---070) to the Android app if your RN version is between 0.69.0 and 0.70.0, and [this configuration](#for-react-native-project-between-065---068) to the Android app if your RN version is between 0.65.0 and 0.68.0.

\*\*\*we support all React Native versions that are currently maintained and listed on the official [React Native documentation](https://reactnative.dev/versions).

## Important note about React Native apps with native code

Depending on if you created your app as a React Native first app, or if you gradually added some React Native code to your Native first app, you might be using some non JavaScript elements in your app, as well as a mix of native screens and JavaScript screens. If that is the case, it is your responsibility to track all of the screens, either by calling our native SDKs directly in the first case, or the bridge in the second. The same remark applies for other functionalities of the SDK - for example, you might need to send a Transaction Event via the native SDK or via the bridge, depending on the technology used to create your buying page.

Have a look at the [Android](/en/android/) and [iOS](/en/ios/) SDKs to find out how to call them in native parts of your app.

Also, note that we specifically cover the use of the JavaScript bridge in this documentation. You should never call the Bridge's NativeModule directly yourself. If for any reason you do so, know that we cannot certify that your implementation will work as expected. Only call our SDKs through the JavaScript Contentsquare module we provide in you JavaScript code (as explained in this document), or directly in your native code.

## Note about using Contentsquare along with Expo

To use the SDK on an Expo app, you need to have an Expo project with EAS (Expo Application Services).
The SDK compatibility with Expo projects requires the extra steps described below.

### Configuration

Add the plugin and your Contentsquare bundle identifier to your app configuration file:

```jsx title="app.json"
{
  "expo": {
    ...,
    "ios": {
      "bundleIdentifier": "com.cs.expo.app", // replace with your bundle id
      ...
    },
    "android": {
      "package": "com.cs.expo.app", // replace with your bundle id
      ...
    },
    "plugins": [
      "@contentsquare/react-native-bridge",
    ],
}
```

### Run

To run your Expo app with the Contentsquare SDK, you can't use Expo Go since it needs native files and features.
To run your app, use `expo run:ios` or `expo run:android`.

Or, you can replace the scripts to your app in your project's `package.json`:

```javascript title="package.json"
"scripts": {
  ...
  "android": "expo run:android",
  "ios": "expo run:ios",
},
```

## Known limitations and recommendations

### For React Native project below 0.70.0

:::warning
If you have a **React Native version below 0.70.0**, you must add this specific configuration inside your `metro.config.js` file

```javascript title="metro.config.js"
module.exports = {
  // ...your current configuration
  // add the code below
  resolver: {
    sourceExts: ["js", "jsx", "json", "ts", "tsx"],
  },
};
```

:::

### For React Native project between 0.69 - 0.70

:::warning
If you have a **React Native version between 0.69 - 0.70**, make these changes inside your Android app

- Update compileSdkVersion to 33

:::

### For React Native project between 0.65 - 0.68

:::warning
If you have a **React Native version between 0.65 - 0.68**, make these changes inside your Android app

- Update compileSdkVersion to 33
- Update Gradle Plugin Version to a minimum of v7.1.1
- Update Gradle Wrapper to a minimum of v7.3.3

:::

### Use of PanResponder

If you are using PanResponders in your app, a bug might appear on the element implementing it where it will only move for about a second and then freeze. This bug is caused by a conflict between the React Native SDK and our Bridge related to tracking swipe events. May you encounter this bug, the current workaround is to stop the Contentsquare tracking when the pan gesture starts, and resume it as the gesture ends, as follows:

```javascript
const panResponder = useRef(
  PanResponder.create({
    [...]
    onPanResponderGrant: (evt, gestureState) => {
 Contentsquare.stopTracking();
 [...]
    },
    onPanResponderRelease: (evt, gestureState) => {
 Contentsquare.resumeTracking();
 [...]
    },
    [...]
  })
).current;
```

Note that, although this workaround fixes the bug, applying it means that swipes on view using the PanResponder won't be tracked by Contentsquare.

---

# Impact on performance

URL: https://docs.contentsquare.com/en/react-native/4-15-0/impact-on-performance/

We always strive to be non-intrusive, and transparent to the developers of the client app.
We apply this rule on the performance as well.

📚 [Native Android SDK Impact on Performance](/en/android/impact-on-performance/)  
📚 [Native iOS SDK Impact on Performance](/en/ios/impact-on-performance/)

---

# Error Analysis

URL: https://docs.contentsquare.com/en/react-native/4-15-0/error-analysis/

<Render file="en/plans/dem"/>
Error Analysis is automatically included in the [Contentsquare Bridge](/en/react-native/#include-the-sdk).

It is available for both Android and iOS. In Android apps, the following log message displays even if the Error Analysis is not enabled on the CS dashboard.

<Tabs syncKey="native">
  <TabItem label="Android">
    ```text
    I/CSLIB: Contentsquare Error Analysis v[SDKVersionNumber] starting in app: [your.application.package]
    ```

  </TabItem>

  <TabItem label="iOS">
    ```text
    CSLIB ℹ️ Info: Contentsquare Error Analysis v[SDKVersionNumber] starting in app: [your.app.packageName]
    ```

  </TabItem>
</Tabs>

## Prerequisites

### Screen tracking implemented

Tracking will start at the 1st screenview event, it is required to have screen tracking implemented. Make sure to follow the [React Native Track screens](/en/react-native/track-screens/) sections.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time (or choose to take this update as an opportunity to review your Privacy related implementation), make sure to follow the [React Native Privacy](/en/react-native/privacy/) section and use the [Opt-in API](/en/react-native/privacy/#opt-in) to get the user consent, otherwise no data will be collected.

## Get Started

### Add Contentsquare Error Analysis to your app

If you have already integrated the Contentsquare Bridge and enabled Error Analysis on Experience Analytics Mobile, the Error Analysis SDK should seamlessly function. However, note that additional configuration is required specifically for Android apps.

#### Add Gradle plugin on Android

With the use of a Gradle plugin, an instrumentation of your code will be performed to collect the data about network errors.

<Tabs syncKey="gradle-lang">
  <TabItem label="Groovy">
   Using the plugins DSL:

```groovy title="app/build.gradle"
plugins {
   id "com.contentsquare.error.analysis.network"  version "1.1.0"
}
```

Using legacy plugin application:

```groovy title="build.gradle"
buildscript {
   repositories {
      maven {
         url "https://plugins.gradle.org/m2"
      }
   }
   dependencies {
      classpath "com.contentsquare.gradle:error-analysis-network:1.2.0"
   }
}
```

```groovy title="app/build.gradle"
apply plugin: "com.contentsquare.error.analysis.network"
```

  </TabItem>
  <TabItem label="Kotlin">
      
   Using the plugins DSL:

```kotlin title="app/build.gradle.kts"
plugins {
   id("com.contentsquare.error.analysis.network")  version "1.2.0"
}
```

Using legacy plugin application:

```kotlin title="build.gradle.kts"
buildscript {
   repositories {
      maven {
         url = uri("https://plugins.gradle.org/m2")
      }
   }
   dependencies {
      classpath("com.contentsquare.gradle:error-analysis-network:1.2.0")
   }
}
```

```kotlin title="app/build.gradle.kts"
apply(plugin = "com.contentsquare.error.analysis.network")
```

  </TabItem>
</Tabs>

### Start the SDK

You do not need to do anything to start the Error Analysis SDK, it will start itself with Contentsquare SDK.

### Validate SDK integration

Look at the native SDK docs for validation on each platform.

📚 [Validate Android SDK integration](/en/android/#validate-sdk-integration)<br/>
📚 [Validate iOS SDK integration](/en/ios/#validate-sdk-integration)

## Sample App

For best implementation practices of our library, explore the [Contentsquare for React Native sample app](https://github.com/ContentSquare/react-native-sample-app).

## API Errors

### Automatic network inspection

API Errors automatically collects failed network requests.

### Removing Personal Data in request URL path

By default, the API Errors feature collects the URL path of the failed API requests. To prevent the collection of Personal Data in the URL path, you can rewrite the request URL path with the `ErrorAnalysis.setUrlMaskingPatterns` SDK API.

Replace a step of the path - meaning between two slashes (/) - containing Personal Data with a variable:

- :user_id becomes CS_ANONYMIZED_USER_ID
- :address becomes CS_ANONYMIZED_ADDRESS

#### Example

```javascript
import { ErrorAnalysis } from '@contentsquare/react-native-bridge';

ErrorAnalysis.setURLMaskingPatterns([
  'https://www.contentsquare.com/users/:user_id/address/:address',
]);
```

##### Result

| URL before masking                                             | URL after masking                                                                         |
| -------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `https://www.contentsquare.com/users/123/address/castle+black` | `https://www.contentsquare.com/users/CS_ANONYMIZED_USER_ID/address/CS_ANONYMIZED_ADDRESS` |

### Debugging and Logging

If in-app features are enabled, a info log should appear with the details of the event (see [React Native Debugging and Logging](/en/react-native/in-app-features/#debugging-and-logging) section):

<Tabs syncKey="native">
  <TabItem label="Android">
    ```text
    I/CSLIB: API Error - GET 401 https://api.client.com
    ```

  </TabItem>

  <TabItem label="iOS">
    ```text
    CSLIB ℹ️ Info: API Error - GET 401 https://api.client.com
    ```

  </TabItem>
</Tabs>

### How API Errors works

#### Initialization

The way our SDK works is by auto-starting with the application launch and automatically collects failed network requests.

#### Configuration

Once started, our SDK fetches its config from our servers.
It will start collecting data from network events if the API Errors setting is enabled in the config (this is handled by the Contentsquare team).

#### Tracking

The SDK monitors only the API Errors with response code above 400, and generates analytics data.
These events are then locally stored, and eventually sent to our servers in batches.

:::warning
To make sure API Errors occurring at app launch are correctly tracked, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

#### Sending data

For each network error, a new event will be sent in analytics and Session Replay data. Check the following sections to learn more about how data is processed and sent:

- [Analytics requests](/en/react-native/how-the-sdk-works/#sending-data)
- [Session Replay requests](/en/react-native/session-replay/#requests)

### API Troubleshooting Details

API Errors troubleshooting details enables you to collect more information about API errors so you can troubleshoot errors faster.

With this feature you will be able to see three types of additional API error details in the Event Stream of Session Replay.

- The HTTP headers of the request and the response.
- The body (the data sent by the request or received in the response).
- The query parameters of the request endpoint (of the URL of the information you request for).

<Render file="en/plans/dem"/>

See [API Troubleshooting Details](https://support.contentsquare.com/hc/en-gb/articles/6553281476124) for more details.

#### Mask API Error By Template URL

This method will mask URLs of failing API calls to URLs that match the template URL.

Use colon (`:`) to indicate a dynamic parameter.

```javascript
import { ErrorAnalysis } from '@contentsquare/react-native-bridge';

ErrorAnalysis.setURLMaskingPatterns([
  'https://<domain>/:status_code/person/:person_id/store/:store_id',
]);
```

### Collected data points

Only network calls in error (response code above 400) will be collected.  
Here the exhaustive list of data collected:

- URL (without query strings)
- HTTP method
- Response code
- Timestamp of the request
- Timestamp of the response
- HTTP headers of the request
- HTTP headers of the response
- HTTP body of the request
- HTTP body of the response
- Query parameters of the request endpoint

### Known limitations and recommendations

#### Conflict with Firebase Performance Monitoring

##### Android

Contentsquare Error Analysis is not compatible with Firebase Performance Monitoring auto-collection. Only one of the two will log events, and usually, the events will be automatically logged by the Contentsquare Error Analysis.
To log events to Firebase Performance Monitoring, we suggest [logging it manually](https://rnfirebase.io/perf/usage#http-request-tracing).

##### iOS

Contentsquare Error Analysis is compatible with Firebase Performance auto-collection, but the HTTP body from the response won't be collected by the Error Analysis SDK.

**Workaround**: Disable Firebase automatic monitoring:

```javascript
// <project-root>/firebase.json
{
  "react-native": {
    "perf_auto_collection_enabled": false
  }
}
```

Contentsquare Error Analysis may not be compatible with other network auto-collection tools.

## Crash Reporter

### Native crashes

To enable crash collection and symbolication for native crashes, follow the steps for your platform:

📚 [Contentsquare iOS SDK crash reporter](/en/ios/error-analysis/#crash-reporter)<br/>
📚 [Contentsquare Android SDK crash reporter](/en/android/error-analysis/#crash-reporter)

### JavaScript crashes

#### Validate JavaScript crashes integration

##### Validate JavaScript error handler is activated

If the JavaScript Crash reporter has been successfully initialized an info log should appear in React Native logs:

```text
CSLIB ℹ️ Info: CSErrorHandler is set as javascript global error handler.
```

##### Validate JavaScript crash reporting

To test that the JavaScript Crash Reporter is working properly, you can throw unhandled JavaScript error. The next time you start your application, the JavaScript crash will be sent to our servers. If you have logging enabled, you will see the upload reflected in the logs for iOS or Android.

<Tabs syncKey="native">
  <TabItem label="Android">
    ```text
    I/CSLIB: React Native Crash event detected and sent for userID: <user-id>, session: <session-number> on screen: <screen-number> crashID: <crash-id>
    ```

  </TabItem>

  <TabItem label="iOS">
    ```text
    CSLIB ℹ️ Info: React Native Crash event detected and sent for userID: <user-id>, session: <session-number> on screen: <screen-number> crashID: <crash-id>
    ```

  </TabItem>
</Tabs>

#### Source Maps

Check the [React Native documentation](https://reactnative.dev/docs/debugging-release-builds?platform=ios#enabling-source-maps) on how to enable source maps generation for JavaScript, and make sure to adjust the following settings in your project for automatic source map upload:

<Tabs syncKey="native">
  <TabItem label="Android">
    ```groovy title="android/app/build.gradle" ins={3, 8, 11-13}
    ...
    apply plugin: "com.contentsquare.error.analysis.crash"
    apply from: "../../node_modules/@contentsquare/cli/scripts/contentsquare.gradle"
    ...

    react {
      // Ensure the following hermesFlags are present
      (hermesFlags = ['-O', '-output-source-map'])
    }

    ext {
      contentsquareConfigPath = "../contentsquare-cli.json" // default
    }
    ```

    Use the `index.android.bundle.map` path in the `sourcemapPath` configuration for android. Example for default path:

    ```text
    ./android/app/build/generated/sourcemaps/react/release/index.android.bundle.map
    ```

  </TabItem>

  <TabItem label="iOS">
    ```shell title="Bundle React Native code and images" del={4, 8} ins={2, 5-6, 9}
      ...
      export SOURCEMAP_FILE="$SRCROOT/main.jsbundle.map"
      WITH_ENVIRONMENT="$REACT_NATIVE_PATH/scripts/xcode/with-environment.sh"
      REACT_NATIVE_XCODE="$REACT_NATIVE_PATH/scripts/react-native-xcode.sh";
      export CONTENTSQUARE_CONFIG_PATH="$SRCROOT/../contentsquare-cli.json"
      CONTENTSQUARE_XCODE="$SRCROOT/../node_modules/@contentsquare/cli/scripts/contentsquare-xcode.sh"

      /bin/sh -c "$WITH_ENVIRONMENT $REACT_NATIVE_XCODE"
      /bin/sh -c "$WITH_ENVIRONMENT $CONTENTSQUARE_XCODE"
      ...
    ```

    Use the `main.jsbundle.map` path in the `sourcemapPath` configuration for ios. Example for default path:

    ```text
    ./ios/main.jsbundle.map
    ```

  </TabItem>
</Tabs>

:::note
The added script calls will trigger the Contentsquare CLI with the `update-sourcemap-id` command from the root of your project. This command creates or updates the `contentsquare-sourcemap-info.json` file, which contains the source map ID for both platforms.
Add `contentsquare-sourcemap-info.json` to your `.gitignore` to prevent it from being committed to the repository:

```shell
echo "contentsquare-sourcemap-info.json" >> .gitignore
```
:::

#### CLI configuration

Download the [`contentsquare-cli-v0.1.1.tgz`](/contentsquare-cli-v0.1.1.tgz) package and install it as a dev dependency to your project. The following information is required for the CLI to successfully upload the source maps:

- **The targeted platform**

  `ios` or `android`

- **The project ID**

1. Log on the Contentsquare platform on https://app.contentsquare.com
1. Make sure to be on the right project
1. The project ID can be found in the URL query parameter `project`: `https://app.contentsquare.com/#/{MODULE_NAME}?project={PROJECT_ID}&hash={HASH}`

- **Valid API credentials**

  Follow the dedicated documentation from the Help Center to get the client ID and client Secret: [How to create API credentials](https://support.contentsquare.com/hc/en-gb/articles/9292880837660-How-to-create-API-credentials).

- **The source map path**

  The path to the source map file in the project. The path should be relative to the project root.

To provide this information to the CLI script, either use a JSON configuration file or pass the required information as command line arguments. For automatic source map upload, the preferred way is to use the JSON configuration file.

##### Using JSON configuration file

Provide the required information by adding a `contentsquare-cli.json` file at the root of your project.

```json title="contentsquare-cli.json"
{
  "android": {
    "clientId": "ANDROID_CLIENT_ID",
    "clientSecret": "ANDROID_CLIENT_SECRET",
    "projectId": "ANDROID_PROJECT_ID",
    "sourcemapPath": "ANDROID_PROJECT_SOURCEMAP_PATH"
  },
  "ios": {
    "clientId": "IOS_CLIENT_ID",
    "clientSecret": "IOS_CLIENT_SECRET",
    "projectId": "IOS_PROJECT_ID",
    "sourcemapPath": "IOS_PROJECT_SOURCEMAP_PATH"
  }
}
```

##### Using command line arguments

Alternatively, the required information can be added as arguments directly on the command line.

| Option             | Description                                                                                                                             |
| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------- |
| `--client-id`      | The client ID of [API credentials](https://support.contentsquare.com/hc/en-gb/articles/9292880837660-How-to-create-API-credentials)     |
| `--client-secret`  | The client secret of [API credentials](https://support.contentsquare.com/hc/en-gb/articles/9292880837660-How-to-create-API-credentials) |
| `--config`         | The path to the configuration file relative to project root.<br/>Default value: `contentsquare-cli.json`                                |
| `--help`           | Display the help message                                                                                                                |
| `--platform`       | The platform to target: `ios` or `android`                                                                                              |
| `--project-id`     | The project ID                                                                                                                          |
| `--sourcemap-path` | The path to the source map file                                                                                                         |
| `--uploadUrl`      | The URL of the Contentsquare platform.<br/>Default value: https://api.csq.io                                                            |
| `--verbose`        | Display verbose output                                                                                                                  |

:::note
These two solutions can be mixed if, for example, you want to use the multiple JSON files to store different configurations for different environments and pass the path to the file as a `config` argument.

If same argument is used in both methods, the command line arguments will prevail over the same argument in the JSON file.
:::

<details>
  <summary>How to use <code>@contentsquare/cli</code> to manually upload source maps</summary>

Following exact steps is crucial to ensure the correct deobfuscation of the stack traces:

1. Invoke the Contentsquare CLI with the `update-sourcemap-id` command from the root of your project to create/update `contentsquare-sourcemap-info.json`, that contains the source map ID for both platforms.

   ```shell
   npx contentsquare-cli update-sourcemap-id
   ```

1. Build a release version of your app.

1. Upload the source maps to the Contentsquare platform by invoking the `upload-sourcemaps` command from the root of your project.

   ```shell
   npx contentsquare-cli upload-sourcemaps
   ```
</details>

---

# In-app features

URL: https://docs.contentsquare.com/en/react-native/4-15-0/in-app-features/

Alongside its tracking capabilities, the SDKs embed some features aimed at Contentsquare users such as [Snapshot Capture](#snapshot-capture) and [SDK Logs](#debugging-and-logging).
## Implement in-app features

This implementation phase is required on the **iOS side only** (on Android, there is nothing to do). You will have to do a few changes on the **native side of your app**:

### 1. Add the custom URL scheme to `Info.plist`

In order for your application to open when you scan the QR code or enter the URL we provide in a web browser, you have to add the custom URL scheme to your app's `Info.plist` file. For more info about how to do it, check the [iOS documentation](/en/ios/in-app-features/#1-add-the-custom-url-scheme-in-your-app-info).
 
### 2. Call the SDK when your app is opened with the custom URL

Then, you will need to link your app with our SDK. When your application is started via a deeplink, a specific delegate function is called in your AppDelegate file. In order for us to be able to handle it, you will need to call a function of our API that will handle it.

Call either the React Native or the iOS native API:

#### Call the React Native API

Follow this [guide](https://reactnative.dev/docs/linking) to call the React Native API.

<Tabs>
  <TabItem label="JavaScript">
  ```javascript
  Linking.addEventListener('url', (event: { url: string }) => {
    Contentsquare.handleUrl(event.url);
  });
  ```
  </TabItem>
  <TabItem label="TypeScript">
  ```typescript
  Linking.addEventListener('url', (event: { url: string }) => {
    Contentsquare.handleUrl(event.url);
  });
  ```
  </TabItem>
</Tabs>

#### Call the iOS native API

You will need to update your iOS application's AppDelegate, located in the `ios` folder of your React Native app (AppDelegate.m if you have a project set up in Objective-C, AppDelegate.swift if it is set up in Swift).

Import ContentsquareModule in order to be able to call the Contentsquare API from the AppDelegate.

⚠️ If you are using Flipper, make sure you do not write the import after the `FB_SONARKIT_ENABLED` macro - to be sure, you can write your import at the topmost of the file. In general, make sure you do not import the SDK in the scope of an `#ifdef` macro.

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
  ```swift
  import ContentsquareModule
  ```
  </TabItem>
  <TabItem label="Objective-C">
  ```objective-c
  #import <ContentsquareModule/Contentsquare-Swift.h>
  ```
  </TabItem>
</Tabs>

Implement the openURL delegate method as following.

<Tabs syncKey="ios-lang">
  <TabItem label="Swift">
  ```swift
  func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
      Contentsquare.handle(url: url)
      return true
    }
  ```
  </TabItem>
  <TabItem label="Objective-C">
  ```objective-c
  - (BOOL)application:(UIApplication *)app
              openURL:(NSURL *)url
              options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options {
      [Contentsquare handleWithUrl:url];
      return YES;
  }
  ```
  </TabItem>
</Tabs>

Check the full section in the [Native iOS SDK documentation](/en/ios/in-app-features/)

## Enable in-app features

In-app features can be enabled in different ways:

### Scan the QR Code

If you have access to the Contentsquare platform, you can open the in-app features modal from the menu and scan the QR code displayed with your phone. 

Take a look at the native documentation for further information.

### Alternative methods

We provide alternative methods to enable in-app features especially for iOS Simulator and Android Emulator.

📚 [Native Android SDK documentation for Enable in-app features](/en/android/in-app-features/)  
📚 [Native iOS SDK documentation for Enable in-app features](/en/ios/in-app-features/)

## Debugging and Logging

Contentsquare provides Logging capabilities that allow you to see the raw event data logged by your app. Use this for validation purposes during the instrumentation phase of development and can help you discover errors and mistakes in your analytics implementation and confirm that all events are being logged correctly.

📚 [Native Android SDK documentation for Debugging and Logging](/en/android/in-app-features/#debugging-and-logging)  
📚 [Native iOS SDK documentation for Debugging and Logging](/en/ios/in-app-features/#debugging-and-logging)

## Snapshot Capture

In order to unlock the full data-visualization capabilities of Contentsquare, the SDK provides a way to capture snapshots of your app screens. These snapshots can only be taken by Contentsquare's users on their device. They are not captured from your end-users device. It means your Personal Data is safe, as long as you use a test user account.

:::warning
For snapshot capture to work, the session has to be tracked (included in tracked users and not opted-out) and a first screenview event has to be sent before.
:::

📚 [Native Android SDK documentation for Snapshot Capture](/en/android/in-app-features/#snapshot-capture)  
📚 [Native iOS SDK documentation for Snapshot Capture](/en/ios/in-app-features/#snapshot-capture)

---

# Getting Started

URL: https://docs.contentsquare.com/en/react-native/4-15-0/

import { CardGrid, LinkCard, RepoCard } from '~/components';
<Render file="en/mobile/getting-started-intro"/>

:::warning[React Native new architecture]
If your app enables React Native's New Architecture, make sure to check our [compatibility](compatibility/) page for more details.
:::

## Install the SDK

The Contentsquare Bridge for React Native integrates the Contentsquare SDKs for both iOS and Android with your React Native JavaScript code.

See [Compatibility](compatibility/) for more information.

### Include the SDK

The Contentsquare Bridge is available as an [NPM package](https://www.npmjs.com/package/@contentsquare/react-native-bridge), which includes the bridge and the necessary dependencies for specific versions of the SDKs.

To install the bridge, open a terminal and run the following commands from your application’s root directory:

```shell
npm install @contentsquare/react-native-bridge
cd ios && pod install
```

:::tip[iOS Specific Note]
Since React Native projects for iOS are in Objective-C and our SDK is in Swift, you need to embed the Swift standard libraries. In your project’s target Build Settings, set **Embedded Content Contains Swift Code** to YES.

Ensure CocoaPods version 1.10.0 or later is installed (`pod --version`). If not, update with `[sudo] gem install cocoapods`. This is required to link the SDK and bridge, as CocoaPods only added support for XCFrameworks in late 2020.
:::

### Importing the Bridge

The Contentsquare module is the main module and the default export of our bridge.  
The Currency module is only used to send Transactions, and contains all supported currencies.

```javascript
import Contentsquare, { Currency } from '@contentsquare/react-native-bridge';
```

You do not need to do anything to start the SDK. Now that the SDK is a dependency of your app, it will autostart itself when your application starts.

### Validate SDK integration

<Render file="en/mobile/getting-started-validate-sdk-integration" params={{
  version: frontmatter.version,
  platform: frontmatter.category
}}/>

## Check the logs

<Render file="en/mobile/getting-started-check-the-logs"
  params={{tools: "Android Studio, Xcode"}}
/>

### Viewing local logs in IDE

<Tabs syncKey="native">
  <TabItem label="Android">
    To view SDK logs:

    1. Plug your Android phone into your computer (or use an emulator)
    1. Open Android Studio and start your app
    1. Open the `Logcat` view and select your phone or emulator
    1. Filter logs by `CSLIB`

    ![](~/assets/android/logs-android.png)
    </TabItem>
  <TabItem label="iOS">
    1. Unless you are using a simulator, ensure the device you are using is connected to your Mac or is on the same Wi-Fi network.
    1. Open the macOS Console app or Xcode.  

        For the macOS Console app, make sure info messages are included at [Choose Action > Include Info Messages](https://support.apple.com/guide/console/customize-the-log-window-cnsl35710/mac).
    1. Filter logs by `CSLIB`.

    ![](~/assets/ios/logs-ios.png)
    </TabItem>
</Tabs>

### Enable in-app features

<Render file="en/mobile/getting-started-in-app-features"/>

To enable in-app features within your app, you have to **first make sure your app is launched in the background**. Then, follow the appropriate method described as follows.

#### On a device: scan the QR code

<Render file="en/mobile/getting-started-scan-qr-code" params={{
  platform: frontmatter.category
}}/>

#### On an emulator/simulator

<Tabs syncKey="native">
  <TabItem label="Android">

    In Contentsquare, select the Mobile icon in the menu top bar then select your application ID, and "Copy this ADB command".

    ![](~/assets/android/log-visualizer-access-adb.png)
  </TabItem>
  <TabItem label="iOS">

    In Contentsquare, select the Mobile icon in the menu top bar then select your Bundle ID, and select "Copy this link". Paste it in Safari on your simulator to trigger the in-app features.

    ![](~/assets/ios/log-visualizer-access-custom-link.png)
  </TabItem>
</Tabs>

### Contentsquare Log Visualizer

<Render file="en/mobile/getting-started-log-visualizer" params={{
  platform: frontmatter.category
}}/>

## Get user consent

<Render file="en/mobile/getting-started-get-user-consent"/>

### User opt-in

The SDK treats users as **opted-out by default.**

To start tracking, forward user consent with optIn(). Calling this method generates a user ID and initiates tracking.

For example, you can call `optIn()` when the user accepts your app's privacy policy or tracking terms.

```javascript {10}
import React, { useState } from "react";
import { View, Text, Button } from "react-native";
import Contentsquare from "@contentsquare/react-native-bridge";

const PolicyConsentScreen = () => {
  const [isTrackingAccepted, setIsTrackingAccepted] = useState(false);

  const handleAcceptPolicy = () => {
    setIsTrackingAccepted(true);
    Contentsquare.optIn();
  };

  return (
    <View>
      <Text>Please accept our privacy policy to proceed.</Text>
      <Button title="Accept Policy" onPress={handleAcceptPolicy} />
    </View>
  );
};

export default PolicyConsentScreen;
```

:::note[Going further]
For advanced configuration regarding user consent or personal data handling, see [Privacy](/en/android/privacy/).
:::

## Track your first screens

<Render file="en/mobile/getting-started-track-first-screens"/>

### Sending screenview events

Screen tracking is achieved by sending a `screenview` event each time a new screen is displayed on the user's device.

#### Sending Screenview Events using the React Navigation Library

The sending of screenview events can be handled within the `NavigationContainer` in [React Navigation](https://reactnavigation.org/docs/navigation-container/), which centralizes the logic and helps avoid unnecessary calls.

```javascript wrap
// This associates the screen name sent to Contentsquare to the screen name defined in the code
const screenEventByScreenName: Record<string, string> = {
  Home: 'Home',
  ProductList: 'Product List',
  ProductDetails: 'Product #1',
};

export const Navigation = () => {
  const navigationRef = useNavigationContainerRef<RootStackParamList>();
  const routeNameRef = useRef<string>();

  return (
    <NavigationContainer
      ref={navigationRef}
      onReady={() => {
        // Getting initial route name from navigation and sending a screen view event with Contentsquare SDK
        const currentRouteName = navigationRef.getCurrentRoute()?.name;
        if (currentRouteName && screenEventByScreenName[currentRouteName]) {
          Contentsquare.send(screenEventByScreenName[currentRouteName]);
        }
      }}
      onStateChange={() => {
        // Getting route name from navigation and sending a screen view event with Contentsquare SDK
        const currentRouteName = navigationRef.getCurrentRoute()?.name;
        routeNameRef.current = currentRouteName;
        if (currentRouteName && screenEventByScreenName[currentRouteName]) {
          Contentsquare.send(screenEventByScreenName[currentRouteName]);
        }
      }}
    >
      <RootNavigator />
      <PrivacyManager />
    </NavigationContainer>
  );
};
```

### Implementation recommendations

From a functional perspective, a screenview should be triggered in the following cases:

- When the screen appears on the device
- When a modal or pop-up is displayed
- When a modal or pop-up is closed, returning the user to the screen
- When the app is brought back to the foreground (after being minimized)

#### Tracking app launch

Most events collected by the SDK require a screenview event to be sent first in order to associate the events with the correct screen. If a screenview event is not sent, the events will be discarded. To ensure proper tracking from the moment the app launches, trigger a screenview event immediately after the SDK has started.

#### Screen name handling

It is necessary to provide a name for each screen when calling the screenview API.

As a general rule, keep distinct screen names under 100. As they are used to map your app in Contentsquare, you will want something comprehensive.
The screen name length is not limited on the SDK side. However, the limit is 2083 characters on the server side.

More on [screen name handling](/en/react-native/track-screens/#how-to-name-screens).

:::tip[Tracking plan]
To get the most out of your data, though, it’s best to follow a tracking plan. This way, you’ll capture every step of the user’s journey without missing important interactions, giving you a complete picture of how your app is used.
:::

## Test your setup

<Render file="en/mobile/getting-started-test-setup" params={{
  tools: "Android Studio, Xcode, or Log Visualizer",
}}/>

### Visualize events in Contentsquare

<Render file="en/mobile/getting-started-visualize-events"
params={{
  platform: frontmatter.category
}}/>

### Visualize data in Contentsquare

<Render file="en/mobile/getting-started-visualize-data"/>

## Sample app

To explore some of these features in context, check our React Native sample apps.

<RepoCard
  repo="ContentSquare/react-native-sample-app"
/>

## Next Steps

While screen tracking gives an overview of user navigation, capturing session, screen, or user metadata provides a deeper understanding of the context behind user behavior.

Our SDK offers a wide range of features to enhance your implementation, including Session Replay, Error Monitoring, extended tracking capabilities, and personal data masking.

Proceed with these how-to’s to refine your implementation.

<CardGrid>
  <LinkCard
    title="Custom Variables"
    description="Collect additional details about the screen or the user."
    href="/en/react-native/track-custom-variables/"
  />
  <LinkCard
    title="Dynamic Variables"
    description="Collect additional information about the session."
    href="/en/react-native/track-dynamic-variables/"
  />
  <LinkCard
    title="Transactions tracking"
    description="Associate user’s session with their potential purchases and corresponding revenue."
    href="/en/react-native/track-transactions/"
  />
  <LinkCard
    title="WebViews"
    description="For native apps which embark web applications or pages."
    href="/en/react-native/track-webviews/"
  />
  <LinkCard
    title="Session Replay"
    description="Collect data for Session Replay in compliance personal data masking."
    href="/en/react-native/session-replay/"
  />
  <LinkCard
    title="Error Analysis"
    description="Track API errors and application crashes with automated collection and privacy-safe debugging tools."
    href="/en/react-native/error-analysis/"
  />
</CardGrid>

---

# Privacy

URL: https://docs.contentsquare.com/en/react-native/4-15-0/privacy/

The Contentsquare React Native Bridge and SDKs are compliant with the **Play Store and App Store Privacy guidelines** as well as with the **EU General Data Protection Regulation (GDPR)**.
Consult our [Privacy Center](https://contentsquare.com/privacy-center/) and [Privacy Policy](https://contentsquare.com/privacy-center/privacy-policy/).

## Handling User Consent

Even though Contentsquare only collects usage data on your app, we will consider every new user to be opted-out. To start tracking, the Opt-in API must be called.

:::note
If for some reason you think that securing user consent is not required for your app, discuss it during the Implementation process with your main contact.
:::

## Opt-in

Use the Opt-in API to get user consent. Calling this API will generate a user ID and initiate tracking.

```javascript
import Contentsquare from '@contentsquare/react-native-bridge';

Contentsquare.optIn();
```

## Opt-Out

**Permanently breaking the link and stopping all data collection.**

When this API is called, tracking stops immediately, all settings are reset (session number, page number, user ID...) and all files related to Contentsquare tracking are deleted. Contentsquare will never track and collect any data from the user's phone unless the Opt-in API is called again.

```javascript
import Contentsquare from '@contentsquare/react-native-bridge';

Contentsquare.optOut();
```

## Forget me

**Permanently breaking the link between the collected data and actual user.**

This resets all settings (session number, page number, user ID...) and deletes all files related to Contentsquare tracking from the user's device. If the user is opted in, next time the user starts the app, the SDK will re-start its collection mechanisms as if this was the first ever run for a new user, under a new user ID. Configurations will be fetched from the server and application tracking will be on.

:::note
'Forget me' only works when user is opted in.
:::

```javascript
import Contentsquare from '@contentsquare/react-native-bridge';

Contentsquare.forgetMe();
```

## Give me my data

**We allow the client to provide to their users their Contentsquare user ID.**

This ID is a non binding identifier which can be used to make a data request to Contentsquare.
You are able to get an ID only if the user is not Opted-out. To do so, pass a callback as a parameter to the function.  

```javascript
import Contentsquare from '@contentsquare/react-native-bridge';

const [userId, setUserId] = useState('not retrieved yet');

// Contentsquare.getUserId(string => {})
Contentsquare.getUserId(newUserId => {
    console.log(`Your Contentsquare UserID is ${newUserId}`);
    setUserId(newUserId);
  }
);
```

## Stop / Resume Tracking

Although we do not gather any humanly readable text from the user's screens, we understand that there may be some areas that you want to completely exclude from tracking.
For this reason, we also support stopping and resuming the complete tracking mechanism.

```javascript
import Contentsquare from '@contentsquare/react-native-bridge';

// Stop tracking
Contentsquare.stopTracking();

// Resume tracking
Contentsquare.resumeTracking();
```

:::note
As this mechanism stops the tracking, make sure that you call resume once your user exits the sensitive screen. Best practice would be to link these method calls to lifecycle events.
:::

---

# Reliable Targets (iOS only)

URL: https://docs.contentsquare.com/en/react-native/4-15-0/reliable-targets/

The identifier associated with each view in your app is the concatenation of the list of its ancestors in the React Native tree view.
This means that if you have the following component:

```javascript title="basicComponent.js"
const basicComponent = () => {
  return (
    <View>
      <Text>Hello world!</Text>
      <TextInput placeholder="Enter your name" />
    </View>
  );
};
```

You may always want to use the same id for this component, even if you publish a new version of the app in which it has been moved in the tree view.

Having a reliable target for a view or a container of views enables the analysis of data across various Snapshots from different dates and versions, including layouts or different A/B testing variations.

Here are examples of how the reliable targets feature can be used:

- Tracking elements that can dynamically move on a page (example: Customizable profile page).
- Tracking elements that you want to monitor from one version to another, even if their position changes (example: Moving carousel position from top to bottom).
- Tracking elements during A/B testing (example: Testing new and old Product page on the same version).
- Tracking elements that can be used on multiple pages (example: Search bar).
- Ensuring that a call to action has a unique identifier wherever it appears on a screen (example: AddtoCart button).

The Contentsquare React Native SDK provides a `CSReliableTarget` component that can be used to wrap the component you want to track reliably.

`CSReliableTarget` accepts a mandatory `name` prop that allows the identification of the component to track.

```javascript title="componentWithReliableTarget.js"
const componentWithReliableTarget = () => {
  return (
    <CSReliableTarget name="MyComponentTracked">
      <View>
        <Text>Hello world!</Text>
        <TextInput placeholder="Enter your name" />
      </View>
    <CSReliableTarget>
  );
};
```

:::note
Each target name must be unique to effectively use the feature.
:::

---

# Security

URL: https://docs.contentsquare.com/en/react-native/4-15-0/security/

## Transmission and hosting
Our server side uses HTTPS to make sure that data is encrypted in transport.

Our hosting solution is a PCI DSS Level 1 Service Provider.

## What is not collected

- Passwords from password fields
- Geo location information
- Information from contacts, emails, or any other user identifiable information.
- Text from labels, buttons, and any other widget which contains text
- Accessibility information from any widget which the user interacts with
- Labels printed on the screen of any kind.

---

# Session Replay

URL: https://docs.contentsquare.com/en/react-native/4-15-0/session-replay/

import iossrenable from '~/assets/sdk-images/img-sr/ios-enable-sr-2.gif';
## Prerequisites

### Screen tracking implemented

As **session data collection will start at the 1st screenview event**, it is required to have screen tracking implemented. Make sure to follow the [React Native Track screens](/en/react-native/track-screens/) sections.

### Updating to latest SDK version

In order to enable Session Replay in your app and get the most stable version, it is required to upgrade the SDK to its latest version.

### Reminder about User consent

If you are in the process of implementing the SDK for the 1st time (or choose to take this update as an opportunity to review your Privacy related implementation), make sure to follow the [React Native Privacy](/en/react-native/privacy/) sections.

## WebView

WebView events can be collected as part Session Replay under the following conditions:
 - The app is a React Native app
 - The WebView is registered to the SDK
 - The web page implements the Web Tracking Tag

For the full guide to implementation of Webview Tracking, see 📚 [Mobile Apps Webview Tracking](/en/webview-tracking-web-tag/).

WebView personal data masking is entirely handled on the web side — see 📚 [Personal Data handling in WebView](/en/webview-tracking-web-tag/session-replay/#personal-data-handling).

## Testing and Debugging

### Enable Session Replay on your device

Since not all sessions are collected (depending on the percentage set in the Contentsquare back office), we have implemented an option to force replay collection on your device for testing and debugging purposes.
This option can be enabled from the in-app features settings:
1. [Enable in-app features](/en/react-native/in-app-features/)
1. Open in-app features settings with a long press on the snapshot button
1. Under "Session Replay", toggle "Enable Session Replay" on
1. Kill the app
1. Start app, a new session is starting with Session Replay enabled

#### How do I know if Session Replay is enabled?

<Tabs syncKey="native">
<TabItem label="Android">
   ![](~/assets/sdk-images/img-sr/android-enable-sr.png)

   There are 2 places where you can check if Session Replay is enabled:

   **In the logs:** The log `I/CSLIB|SessionReplay: Starting Session Replay.` will confirm that Session Replay is enabled.

   **In in-app features settings:** Below the "Enable "will start at next app start" *(see below [Access the replay](#access-the-replay))*, you will either see:
   - `No replay link available` which means Session Replay is not running for the current session
   - `Get Replay link` which means Session Replay is running for the current session

</TabItem>
<TabItem label="iOS">
   <img src={iossrenable.src}/>

   There are 2 places where you can check if Session Replay is enabled:

   **In the logs:** The log `Session Recording is starting.` will confirm that Session Replay is enabled.

   **In in-app features settings:** Below the "Enable "will start at next app start" *(see below [Access the replay](#access-the-replay))*, you will either see:
   - `No replay link available` which means Session Replay is not running for the current session
   - `Get Replay link` which means Session Replay is running for the current session
</TabItem>
</Tabs>

### Access the replay

<Tabs syncKey="native">
<TabItem label="Android">
   The replay can be accessed by tapping on `Get replay link` button from the in-app features settings:

   ![](~/assets/sdk-images/img-sr/android-get-replay-link.gif)

   The replay will be **available within 5 minutes**. Only the "ended screen views" are processed *(we know a screenview is ended when we start receiving data for the next screenview)*. This means that you will be able to replay your session up to the previous screenview if the session is still running.
</TabItem>
<TabItem label="iOS">
   The session can be accessed by tapping on `Get replay link` button from the in-app features settings:

   ![](~/assets/sdk-images/img-sr/ios-get-replay-link.gif)

   The replay will be **available within 5 minutes**. Only the "ended screen views" are processed *(we know a screenview is ended when we start receiving data for the next screenview)*. This means that you will be able to replay your session up to the previous screenview if the session is still running.
</TabItem>
</Tabs>

## Provide custom fonts (iOS only)

It is required to send us the custom fonts you use in your app so we can use them to render text properly.

Upload the fonts in `otf`, `ttf`, `woff` or `woff2` format directly from the player as described in [Managing iOS Fonts In The Player](https://support.contentsquare.com/hc/en-gb/articles/7810298018844) on the Help Center.

## Personal Data Masking

The Session Replay feature collects every user interaction within your app. In order to respect the user’s right to privacy, the Contentsquare SDK:
- Masks everything by default
- Allows you to control which part of the user interface is collected via our masking and un-masking component.

### Masking mechanisms

Although the implementation is done once for both iOS and Android on React Native, the visual appearance of the masking itself will be different for each platform:

<Tabs syncKey="native">
<TabItem label="Android">
   Every single UI element is converted into a highly pixelated image to reach a very low resolution. Text and images will appear very blurry so that the content cannot be identified.

   #### Original VS Replay fully masked

   ![](~/assets/sdk-images/img-sr/android-sr-masked.png)

</TabItem>
<TabItem label="iOS">
   - Images are not collected, a placeholder is sent instead of the content; the "IMG" placeholder will be displayed in the frame of the element.
   - Text: text is replaced by "la" repeated as many times as needed to equal the original character count. White characters are preserved. For instance `the lazy fox` is collected as `lal lala ala`. All other visual properties are collected (text color, background color, alignment, etc.).
   - TextFields: same as Text
   - For all other types: no specific data is collected but visual properties are collected.
   If you think a specific element can reveal personal data from one of these properties you have to mask it using one of the methods presented below.
   A good way to check how a view is rendered in replays is to navigate to the desired view with the CS SDK running then use the [quick replay link](#access-the-replay).

   #### Original VS Replay fully masked

   ![](~/assets/sdk-images/img-sr/uikit-sr-masked.png)
</TabItem>
</Tabs>

### Masking rules priority

#### General case

The SDK determines whether a view is masked by evaluating the rules in the order specified below. Once a rule is triggered, the state is set, and subsequent rules are not applied:

| Priority | Rule | Configured via |
| -------- | -------- | -------- |
| 1 | The app or SDK version is [fully masked](#full-masking) | CSQ Console
| 2 | A [component](#maskingunmasking-specific-component) is specifically masked or unmasked | API
| 3 | A [parent](#masking-and-unmasking-behaviors-on-a-parent-view) is specifically masked or unmasked | API
| 4 | Otherwise the [default masking state](#default-masking) is applied | API


### Masking rules

The masking rules can be applied in two ways:
- Through [remote masking configuration in the CSQ Console](#remote-masking-configuration-in-the-csq-console)
- Using the SDK [public masking APIs](#public-masking-apis)

#### Remote masking configuration in the CSQ Console

##### Full masking

In the event of a personal data leak, the full masking configuration in the Console enables a swift and comprehensive masking of the specified application version(s). This ensures that all elements across all screens of these version(s) are completely masked.

This configuration can be accessed through the "Data Masking" tab in the Console and is supported only on Contentsquare React Native Bridge 4.13.0 and later.

It provides three configuration capabilities:

- A toggle to "Mask all eligible versions," enabling the masking of all app versions embedding the Contentsquare React Native Bridge 4.13.0 or later.
- An "App version" field to mask specific app version(s)
- A "CS SDK version" field to mask the app version(s) embedding the specified SDK versions for iOS and Android projects, respectively. This means that instead of providing the Contentsquare React Native Bridge version, one should specify the iOS or Android SDK version(s) listed in the [changelog](/en/react-native/changelog/).

#### Public masking APIs

##### Default masking

All components are initially masked by default. To modify this default masking state, utilize the `setDefaultMasking` API, preferably within a `useEffect` in the root file (such as `App.js`). This ensures proper initialization and handling when the component mounts.

If you choose to unmask the entire app using the `setDefaultMasking` API, be aware that you will need to individually mask all personal data within the app. Additionally, ensure that you consistently mask personal data on new screens in the future, if necessary.

```javascript
/**
* Set the default masking of all the views.
* @param isMasking true mask all views by default.
*               false unmask all views by default.
*               The default value is true.
*/
setDefaultMasking(boolean isMasking)
```
:::note
Even if you change the default masking state to `false`, the `TextInput` component will stay masked by default.
:::

##### Masking/Unmasking Specific Component

To mask or unmask specific views or components you can use the `<CSMask isMasking={boolean}>` component. Control masking by setting the `isMasking` prop:

- `isMasking={true}` (default, can be omitted): Masks all children components.
- `isMasking={false}`: Unmasks all children components.

In this example below, all children views inside `<CSMask>` will follow the rule of the closest parent prop `isMasking`.

```jsx
// Masks or unmasks all child components based on isMasking prop
<CSMask isMasking={true | false}>
  <View>
    <Text style={styles.title}>Buy my amazing merch!</Text>
    <Text>
      Hurry up! This offer won't be available tomorrow. Only
      $99.98 to get your hands on a wonderful, brand-new, life-changing
      item.
    </Text>
  </View>
</CSMask>
```

##### Masking and Unmasking behaviors on a parent view

The masking state of a parent view propagates to all nested views unless explicitly overridden by a nested `<CSMask>` component. This enables flexible masking and unmasking behaviors within complex component structures.

```jsx
// Masks or unmasks all child components based on isMasking prop
<CSMask isMasking={true}>
  <View>
    <Text>This content is masked.</Text>

    <CSMask isMasking={false}>
      <Text>This specific content is unmasked, despite the parent mask.</Text>
    </CSMask>
  </View>
</CSMask>
```

In this example, the inner `<CSMask>` explicitly overrides the parent view's masking behavior.

### Implementation recommendations

#### Avoid wrapping the Root Navigator

`<CSMask>` should not wrap the Root Navigator it could cause unwanted results. If you want to set the default masking behavior for the whole application you should use `setDefaultMasking(boolean isMasking)`. `<CSMask>` should be used at component level.

#### Avoid dynamically changing `isMasking` prop

While `<CSMask>` supports toggling masking at the instance level, we do not recommend changing the `isMasking` prop dynamically based on conditions like this:

```jsx
<CSMask isMasking={someCondition ? true : false}>...</CSMask>
```

This approach may lead to unexpected behavior, such as personal data leaks. Instead, structure your layout in a way that ensures predictable masking behavior without frequently modifying the `isMasking` prop dynamically.

#### Keeping track of what is masked

The SDK doesn't provide a list of what is currently masked. If you need to keep track of it, you probably will have to write your specific wrapper.

## Advanced features for Experience Monitoring

<Render file="en/plans/dem"/>

### Send user identifier

Contentsquare provides the ability to search for session(s) associated with a specific visitor, based on an identifier: email, phone number, customer ID…
As these values are typically personal data, from the moment the SDK is collecting the User Identifier, we immediately encode the value using a hashing algorithm so that the information is hidden and can never be accessed.

Use the following code to send a user identifier:
```javascript
import Contentsquare from '@contentsquare/react-native-bridge';
Contentsquare.sendUserIdentifier("any_identifier");
```

When called, the SDK will log:

<Tabs syncKey="native">
  <TabItem label="Android">
   ```
   I/CSLIB: User identifier hashed sent {value}
   ```
  </TabItem>
  <TabItem label="iOS">
  ```
   CSLIB ℹ️ Info: User identifier hashed sent {value}
   ```
  </TabItem>
</Tabs>

#### Sending a user identifier for each session
You may want to send the user identifier for each session. While triggering the user identifier at app launch will cover most cases, it will not be enough. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See Session definition section for more information.
That is why we also recommend sending the user identifier every time the app enters foreground.
You can use [`AppState` API](https://reactnative.dev/docs/appstate) to detect foreground and trigger a `sendUserIdentifier()`.

#### Limitations
- User identifier max length is 100 characters (if the limit is exceeded, the user identifier will not be handled and you will see an error message in the Console/Logcat)
- Only the first 15 user identifiers per view will be processed on server side
- The SDK will trim and lowercase user identifier
- User identifier event are not visible in Log visualizer

## Integrations

Contentsquare provides the ability to retrieve the link of the replay to be attached to other vendors such as Voice of Customer or Crash reporting tools.

### Subscribe to Session Replay Link changes

Use `onSessionReplayLinkChange` to subscribe to Session Replay link updates (1). Then use the returned subscriber to remove the subscription when is not needed anymore. (2)

```jsx
useEffect(() => {
    const subscriber = Contentsquare.onSessionReplayLinkChange(link => { // 1
      currentSessionReplaylink = link
    });

    return () => {
      if (subscriber) { // 2
        subscriber.remove();
      }
    };
  }, []);
```

```
I/CSLIB: SessionReplay link: https://app.contentsquare.com/quick-playback/index.html?pid={projectId}&uu={userId}&sn={sessionNumber}&recordingType=cs
```

When the callback is called, the SDK will log:

If you have a Contentsquare account, you can use this link to directly watch your current Session Replay on the Contentsquare Platform.

The replay will be **available within 5 minutes**. Only the "ended screen views" are processed _(we know a screenview is ended when we start receiving data for the next screenview)_. This means that you will be able to replay the session up to the previous screenview if the session is still running.

### Get current replay Link

:::warning[Deprecated]
`getCurrentSessionReplayLink` API is deprecated as of SDK version 4.3.0. Use `onSessionReplayLinkChange` instead.
:::

```jsx
const link = await Contentsquare.getCurrentSessionReplayLink();
```

## How Session Replay works

### Initialization

Sessions can be collected for Session Replay if the Session Replay feature has been enabled for your project and the session matches the collection criteria.

The following conditions will have an impact on which sessions will be collected:

- **User consent**: The users have given their **consent** (if required)
- **Collection rate**: The session is being **drawn for collection** (see Collection Rate below)
- **Compatibility**: The **OS version** is supported.
- **App version**: The **app version** is not part of the block list (see App version block list below)

Note that, when Session Replay is turned off, no content specific to Session Replay is collected whatsoever. Also note that the standard Contentsquare analytics tracking remains unaffected by this.

#### Collecting rate

Session Replay collection is based on a percentage of the total sessions. By default Session Replay collection is disabled.

During the early access phase, the percentage of collected sessions will be set to 1% at the beginning. It will then be adjusted according to:
- The traffic on your app
- The volume of collected sessions set in the contract

#### Compatibility

See [compatibility](/en/react-native/compatibility/).

#### App version block list

The Contentsquare team can add versions of your app in the block list to make sure Session Replay does not start on these versions. This is done when a problem is discovered on a specific version of your app, such as a Personal Data for which the masking was forgotten. This allows to keep Session Replay to work on the other app versions (especially the new ones with the fix).

### Collection

The SDK monitors the application lifecycle events and the view hierarchy, and generates Session Replay data from the behavior of the app, the content of the screen and the interaction of the user.
These events are then locally stored, and eventually sent to our servers in batches. We then aggregate that data to create usable visual information into our Web Application, which you use to gather insights.

:::tip
Session collection will start at the 1st screenview event.
:::

### Network and Storage

By default, Session Replay data can be sent over **cellular network**. If the particular context of your app or users requires a very limited impact on cellular data consumption, **sending data over cellular network can be completely disabled**. Once disabled, data will be sent when the device is using Wi-Fi.

Reach out to your Contentsquare contact that will make the adjustment in your project's configuration.

#### Storage

Before being sent, data is stored in local files on disk up to 30MB on iOS and 20MB on Android.
If the limit is reached, Session Replay is stopped. It will restart at the next app launch, once the SDK has been able to send the data.

### Requests

The maximum request size is 1Mbyte.

<h4>Android</h4>

Requests are sent:
- Every 5 seconds
- On screen change
- When [Replay Link API](#access-the-replay) is called

<h4>iOS</h4>

Requests are sent:
- Every 10 seconds
- At app hide
- When [Replay Link API](#access-the-replay) is called

## Performance impact

### Android

#### Performance impact mitigation

Most operations related to Session Replay are performed on dedicated background threads, for a minimal impact on the main thread. If CPU usage is too high for background tasks, some expensive calculations will be discarded. To make sure of this, we run performance tests on testing applications, along with the Android profiler.

If too much time is spent on the main thread, the quality level will decrease automatically: from high to medium to low to a complete stop if required. Once conditions are back to normal, quality level will be changed back to the default value set in the configuration.

We defined our network strategy to have the lesser impact on CPU, memory and data consumption of the users devices. We measure these impacts, using the Android profiler and dedicated logging system, for each release of our SDK.

You can reduce the quality level if you want to favor performance impact over quality.

#### Performance test results

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well. These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.

The performance results were obtained under the following conditions:

| Condition                                   | Value            |
| --------------------------------------------| ---------------- |
| Device model                                | Pixel 5          |
| Android version                             | 33 (Android 13)  |
| Quality level                               | High             |
| Default Masking State                       | Disabled         |

:::note
That the numbers provided below will vary depending on the user's device and Android version.
:::

| Property                                                                    | Value    |
| --------------------------------------------------------------------------- | ---------|
| Total % on main thread (CPU Profiling)                                      | < 10 %   |
| Memory overhead                                                             | 10 MB    |
| Session Replay data transmitted over network during 1 minute of use:        |          |
|  - with "High quality" level                                                | < 300 kB |
|  - with "Medium quality" level                                              | < 200 kB |
|  - with "Low quality" level                                                 | < 100 kB |

##### Additional info on performance test procedure

**CPU Usage Test**
We are profiling our Demo app with and without the SDK dependency by following the same use case.
We are measuring the CPU peak for both versions of the app and we are computing the difference.

**RAM Usage Test**
We are profiling our Demo app with and without the SDK dependency by following the same use case.
We are measuring the RAM usage peak for both versions of the app and we are computing the difference.

**Memory Leak Test**
We are profiling our demo app and we are using the ADB Monkey tool to create random user input events.
During this time we are monitoring the RAM behavior for any anomaly.
We are using the Memory Profiler to identify leaks.

**Data consumption**
We replay a predefined, repeatable and automated user scenario on our demo app and all data sent is measured in kB/min.

**JankStats**
If you use the alpha library from Google to monitor the jank frames and you already have some jank frames in your application (main thread overwhelmed), you can expect an increase of 1% or 2% with Session Replay activated.
Session Replay requires to perform tasks on the main thread (screen capture and view hierarchy inspection).

### iOS

We always strive to be non-intrusive, and transparent to the developers of the client app. We apply this rule on the performance as well. These are the technical specifics we can share on performance, if you have any questions feel free to reach out to us.

#### Performance impact mitigation

Most operations related to Session Replay are performed on background threads, for the impact on the main thread to be minimal. To make sure of this, we run performance tests on testing applications, using XCTMetric and Hitch Time Ratio measures.

We also set up mechanisms that stop Session Replay if we detect the feature is using too much memory.

We defined our network strategy to have the lesser impact on CPU and battery of the users devices. We measure these impacts, using Apple Dev Tools, for each release of our SDK.

Session Replay will also stop if we use up to 30Mbytes of local storage.

You can reduce the quality level if you want to favor performance impact over quality.

#### Performance test results

The following performance results were obtained under the following conditions:

| Condition                                   | Value     |
| --------------------------------------------| --------- |
| Device model                                | iPhone 7  |
| iOS version                                 | 15.7.8    |
| Test App built using Xcode version          | 14.3.1    |
| Test App built with Swift version           | 5.8       |
| Quality level                               | High      |
| Default Masking State                       | Disabled  |

We conducted the tests using a default `Master-Detail` app built using AdHoc distribution with no app thinning and with Swift symbols stripped. In the app, the SDK was making calls to the Public APIs, running and collecting data in its default state.

:::note
The numbers provided below will vary depending on the user's device, iOS version, SDK version, as well as if you use Swift or not, which Swift version you use if you do, if you enabled bitcode or not and which options you used when building your IPA for App Store distribution.
:::

:::note
Screens built with SwiftUI produce, on average, 120% of the SR data produced by similar screens built with UIKit.
:::

| Property                                                                    | Value          |
| --------------------------------------------------------------------------- | -------------- |
| Max CPU overhead                                                            | &lt;10%        |
| Max RAM usage                                                               | &lt;5MB        |
| Session Replay data transmitted over network during 1 minute of use         |                |
|  - with "High quality" level                                                | &lt;2Mbytes    |
|  - with "Medium quality" level                                              | &lt;1Mbytes    |
|  - with "Low quality" level                                                 | &lt;900Kbytes  |

## Known limitations

### Discrepancy of the default iOS Font
There is a discrepancy of the default iOS Font between devices and Session Replay.

## Troubleshooting

### Requests are not sent from an Android emulator / iOS simulator

If you struggle to watch a replay collection on an emulator/simulator, it may be due to some network constraints applied on your computer (VPN, company network restrictions, etc.). Check your configuration or use a real device.

See following sections for more information about our endpoints and requests:
- [Android - Requests are failing](/en/android/troubleshooting/#requests-are-failing)
- [iOS - Requests are failing](/en/ios/troubleshooting/#requests-are-failing)

### Very long session on an Android emulator / iOS simulator

It is important to remember that **an app kill does not end a session**. See [Session definition](/en/react-native/how-the-sdk-works/#session-definition) for more information.
If you leave the simulator/emulator running with the app in foreground, the session will not end, even if you are inactive.
To better reflect actual end user behavior and avoid unusually long sessions (last hours), put the app in background or kill it.

### Elements being unmasked when scrolling on Android

If you encounter an issue where elements positioned above a ScrollView appear unmasked when scrolling, it may be due to the ScrollView clipping behavior. To resolve this, add the `removeClippedSubviews={true}` property to the ScrollView. This will ensure that only the visible subviews are rendered, helping prevent masking issues.

```javascript
<View>
  <Image source={{ uri: image }} />
  <ScrollView removeClippedSubviews={true}>
    {items.map(item => (
      <ListItem key={item.id} item={item} />
    ))}
  </ScrollView>
<View>
```

---

# Track dynamic variables

URL: https://docs.contentsquare.com/en/react-native/4-15-0/track-dynamic-variables/

## General principles
### Usage

Dynamic variables are additional information on the session that can be used to segment sessions.

For example, they can include information on the A/B Test variations displayed to the current user.

### Limits

#### On the server side

- It is possible to save up to 40 distinct dynamic variable keys per screen view. If more are received, only the first 40 keys will be kept.
- If you are using the same key twice, the last value associated with the key will be collected.

#### On the SDK side

- Every dynamic variable is composed of a pair of key (max. 512 characters) and value (max. 255 characters string or number of type Long between 0 and 2<sup>32</sup> - 1). In case these maximums length are reached, the SDK will automatically trim the exceeding characters.
- If key or value are empty, the SDK will instead send the literal string "cs-empty".

## Defining dynamic variables

To define and send a dynamic variable, you just need to use the following API. For each dynamic variable, we send:
- Key (string, mandatory)
- Value (string or integer, mandatory)

Note that if you send an integer as a value, it has indeed to be an integer. A null or a float will not be accepted as a valid parameter, and will result in an error.

Also, in order for you to be able to handle such errors happening when we try to send the dynamic variable (see the constraints on keys and values in the [Limits](#limits) section above), you can also add, as a last parameter, a function that we will call so you can handle it gracefully. Note that if you do not add that callback, we will log the error's message on the console whenever it happens.

```javascript
import Contentsquare from '@contentsquare/react-native-bridge';

// alphanumeric value: Contentsquare.sendDynamicVar(string, string, ({ name, message, stack }: { name: string, message: string, stack: string }) => {} ?)
Contentsquare.sendDynamicVar("my key", "my value 1");
Contentsquare.sendDynamicVar("my key", "my value 2", ({ message }) => {
  Toast.show(message, 0.3);
});

// numeric value: Contentsquare.sendDynamicVar(string, number, ({ name, message, stack }: { name: string, message: string, stack: string }) => {} ?)
Contentsquare.sendDynamicVar("my key", 10);
Contentsquare.sendDynamicVar("my key", 5000, (errorObject) => {
   Console.log(errorObject.toString());
});
```

**Type of the value** — The value can be either a `number` or a `string`. For each case, available features won't be the same in the Contentsquare app:
- For **number**, you will be able to do some algebra. Example: _sessions with dynamic variable key = "numberOfFriends" and value >= 10_
- For **string**, auto-completion and Regular Expression will be available. Example: _sessions with dynamic variable key = "accountType" and value is "Premium"_

## Sending a dynamic variable for each session

You may want to send a dynamic variable for each session (like the user's country or store). While **triggering the dynamic variable at app launch will cover most cases, it will not be enough**. A session can start when the app is put in foreground, after staying in background for more than 30 minutes. See [Session definition](/en/react-native/how-the-sdk-works/#session-definition) section for more information.

That is why we also recommend **sending such dynamic variable every time the app enters foreground**.

You can use the [`AppState` API](https://reactnative.dev/docs/appstate) to detect foreground and trigger a dynamic variable.

---

# Track custom variables

URL: https://docs.contentsquare.com/en/react-native/4-15-0/track-custom-variables/

## General principles
### Usage

Custom variables are additional information on the page, the user or the session, sent along with screenviews.

For example, they can include information on the current layout of a screen, like day/night mode.

### Limits

#### On the server side

- It is possible to save up to 20 distinct custom variable per screenview. If more are received, only the first 20 custom variables, based on their `index` value, will be kept.
- The `index` value of the custom variable is used to determine which custom variables to be kept. Only `index` value between 1 and 20 will be taken into account.

#### On the SDK side

- Every custom variable is composed of `index`, `name` and `value`.
- If you are using the same `index` twice in the same screen, only the first (`name`, `value`) pair associated with the `index` will be kept.
- It is possible to save up to 20 custom vars on the same screenview.
- In case `name`(max. 512 characters) or `value`(max. 255 characters) maximum character length is reached, the SDK will automatically trim the exceeding characters.
- If `name` or `value` are empty, the SDK will instead send the literal string `"cs-empty"`.
- Use a consistent index for a given custom var within an application — for instance, if the "screen layout" is collected with an `index` of 3, use the slot 3 for this information on every screen of the application.

## Defining custom variables

To define and send custom variables, follow this example:

```javascript
import Contentsquare, { CustomVar } from '@contentsquare/react-native-bridge';

const cVar1: CustomVar = {
  index: 1,
  key: 'CustomVarName1',
  value: 'CustomVarValue1',
};
const cVar2: CustomVar = {
  index: 2,
  key: 'CustomVarName2',
  value: 'CustomVarValue2',
};

Contentsquare.send('ScreenName', [cVar1, cVar2]);
```

:::warning
The same (index, name) pair values should be used across the application in order to have consistent analytics results

**Screen A** with CVAR:

- `index` = 4
- `name` = `hero_banner_type`
- `value` = "carousel"

**Screen B** with CVAR:

- `index` = 4
- `name` = `hero_banner_type`
- `value` = `slider`
  :::

---

# Track screens

URL: https://docs.contentsquare.com/en/react-native/4-15-0/track-screens/

Contentsquare aggregates user behavior and engagement at the screen level. To do so, it is required to track screen transitions by calling a dedicated API. When the API is called, the SDK logs a screenview event that identifies the new screen with the screen name provided.
:::warning
Sessions without at least one screenview will be discarded.
:::

```javascript
import Contentsquare from '@contentsquare/react-native-bridge';

// Contentsquare.send(string);
Contentsquare.send("ScreenName");
```

## Screen name handling

The screen name length is not limited on the SDK side. However, the limit is 2083 characters on the server side.

## Screenview after app in background

The SDK triggers a screenview automatically after the app is put in background and foreground, as long as a screenview with a screen name has been triggered previously. It will use the last screen name set.

## Implementation recommendations

From a functional standpoint, we expect a screenview to be sent:
- When the screen appears
- When a modal/pop-up is closed and the user is back on the screen
- When the app is put in the foreground (after an app hide)

## How to name screens

As a general rule, keep distinct screen names under 100. As they are used to map your app in Contentsquare, you will want something comprehensive.

### Separate words with space, dash or underscore characters

If you want to generate screen names including more than one word, it is best to separate them and to do so using space, dash or underscore characters. Contentsquare handles automatically the formatting for them.

**Example:** For a sub-category list of a retail app, use `Home & Living - Home Furnishings` instead of ~~`homeLivingHomeFurnishings`~~.

### Use screen template/layout names

As a general recommendation, use names referring to the screen template/layout rather than referring to the specific content (data). This will help:
- To keep the number of distinct screen names low and therefore make Contentsquare easier to use
- Remove the risk of sending Personal Data to Contentsquare

List of screen types falling into that category: _Product detail, Event detail, Conversation/Chat, User profile..._

### Screens with multiple states/layouts

<Render file="en/mobile/multiple-layout-screens"/>

---

# Track transactions

URL: https://docs.contentsquare.com/en/react-native/4-15-0/track-transactions/

To associate a user's session with their potential purchases (and corresponding revenue), you must send the transaction via a dedicated API.
For each transaction, we send:
- Price (number, mandatory)
- Currency (Currency or string, mandatory)
- Transaction ID (string, optional)
```javascript
import Contentsquare, { Currency } from '@contentsquare/react-native-bridge';

// numeric currency: Contentsquare.sendTransaction(number, Currency, string?)
Contentsquare.sendTransaction(10.99, Currency.USD);
Contentsquare.sendTransaction(200.99, Currency.EUR, "my_transaction_1");

// alphanumeric currency: Contentsquare.sendTransaction(number, string, string?)
Contentsquare.sendTransaction(10.99, "USD");
Contentsquare.sendTransaction(200.99, "eur", "my_transaction_2");
```

:::warning
**Each transaction must only be sent once**. A common mistake is to trigger the sending when the confirmation screen is displayed. This leads to triggering the transaction each time the user puts the app in background and then in foreground on the confirmation screen.
:::

## Currency

The currency is conforming to the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) standard. Although the currency can be passed either as "alphanumeric code" or "numeric code", you should always prefer using the bridge's Currency object values. If you have to pass the ISO code as a string, note that capitalization is not a factor (`Currency.USD`, `"USD"`, `"Usd"` or `"usd"` will all be treated as the US Dollar).

If the currency passed doesn't match our supported currencies, the SDK will send a currency value of "-1". It will be processed as the default currency of the project.

---

# Track WebViews

URL: https://docs.contentsquare.com/en/react-native/4-15-0/track-webviews/

:::note[React Native compatibility]
    Contentsquare only supports the [`react-native-webview`](https://github.com/react-native-webview/react-native-webview) library for tracking WebView components in React Native apps.
    
    Contentsquare’s implementation relies on `react-native-webview` internals and is not compatible with other WebView implementations.
:::
##  Enable tracking in WebViews

### Inject the Bridge between the CS Tag in WebView mode and the SDK 

This step is threefold:
1. It will inject our **JavaScript Bridge** in order to connect the **CS Tag in WebView mode** and our SDK.
1. It will inject your **CS Tag in WebView mode** if it was not already injected, allowing us to gather data on all your webviews, even when the user is offline, on pages showing local HTML.
1. It will inject a `window.CS_isWebView` variable for you to use in order to detect if the page is loaded from a WebView. 

In order to inject this JavaScript, you will use our `CSWebView` component to render your WebView, as detailed bellow.

Here is a screen with a `react-native-webview` WebView component.

```jsx
import { WebView } from 'react-native-webview';
const WebviewWithTagScreen = () => {
  return (
    <>
      <WebView
        source={{ uri: "https://www.mywebpage.com" }}
      />
    </>
  );
};
export default WebviewWithTagScreen;
```

Let’s walk through how we can inject it with a custom JavaScript interface. There are two ways to implement this:

#### 1. Wrap your WebView with CSWebView component

In order to inject your WebView with the Contentsquare JavaScript WebView interface you will need to wrap your original WebView with `CSWebView` component. `CSWebView` component will handle all.

```jsx
import { WebView } from 'react-native-webview';
const WebviewWithTagScreen = () => {
  return (
    <>
      <CSWebView>
        <WebView
          source={{ uri: "https://www.mywebpage.com" }}
        />
      </CSWebView>
    </>
  );
};
export default WebviewWithTagScreen;
```

#### 2. Legacy CSWebView implementation

:::note[CSWebView implementation]
    The preferred way of implementing `CSWebView` component is to wrap your WebView with `CSWebView` component as detailed before.
:::

Follow this steps to use the legacy implementation:

##### 1. Use the CSWebView component to render your WebView

Our `CSWebView` component will perform all the needed task to inject the WebView. 
Import the `CSWebView` component (1) and move your current WebView implementation to the `renderWebView` prop (2) in `CSWebView`. The `renderWebView` prop's callBack exposes an `onLayout` parameter, which will be used to extract the WebView tag needed for the injection.
Pass the `onLayout` parameter to the WebView's `onLayout` callBack (3).

```jsx
import React from 'react';
import { WebView } from 'react-native-webview';
import { CSWebView } from '@contentsquare/react-native-bridge'; // (1)

const WebviewWithTagScreen = () => {
  return (
      <CSWebView // (1)
        renderWebView={(onLayout, webViewUrl) => { // (2)
          return (
            <WebView
              onLayout={onLayout} // (3)
              source={{ uri: "https://www.mywebpage.com" }}
            />
          );
        }}
      />
  );
};

export default WebviewWithTagScreen;
```

##### 2. Setting the CSWebView URL 

`CSWebView` handles internally setting the URL state. For this, pass the URL to `CSWebView` (1), then the `renderWebView` callBack will expose a URL (2) to be set on your webview (3)

```jsx
import React, { useState } from 'react';
import { WebView } from 'react-native-webview';
import { CSWebView } from '@contentsquare/react-native-bridge';

const WebviewWithTagScreen = () => {
  return (
      <CSWebView
        url="https://www.mywebpage.com" // (1)
        renderWebView={(onLayout, webViewUrl) => { // (2)
          return (
            <WebView
              onLayout={onLayout}
              source={{ uri: webViewUrl }} // (3)
            />
          );
        }}
      />
  );
};

export default WebviewWithTagScreen;
```

If you have a more complex use for your webviews such as static HTML, you can use our `CSWebView` Component with the `source` prop (1). Then, the `renderWebView` callBack will expose a new `source` object (2) to be passed on to your webview (3) 

```jsx
import { CSWebView } from '@contentsquare/react-native-bridge';
import React from 'react';
import WebView from 'react-native-webview';

const htmlPage = `<html lang="en">
    ...
  </html>`;

const WebViewWithTagHTML = () => {
  return (
    <CSWebView
      source={{ // (1)
        html: htmlPage,
      }}
      renderWebView={(onLayout, source) => { // (2)
        return <WebView onLayout={onLayout} source={source} />; // (3)
      }}
    />
  );
};

export default WebViewWithTagHTML;
```

### Inject the CS Tag in WebView mode into your HTML page

After doing all the above, in order for the implementation to be completed, you will need to make sure our **CS Tag in WebView mode** is injected on your pages. To do so, refer to 📚 [Mobile Apps WebView Tracking Documentation](/en/webview-tracking-web-tag/).

---

# Troubleshooting

URL: https://docs.contentsquare.com/en/react-native/4-15-0/troubleshooting/

## Requests are failing
<Render file="en/mobile/troubleshooting/endpoints-to-allow"/>

---

# Use Adobe Analytics

URL: https://docs.contentsquare.com/en/react-native/4-15-0/use-adobe-analytics/

<Render file="en/mobile/adobe-analytics/use-adobe-analytics" />
## Prerequisites

<Render file="en/mobile/adobe-analytics/react-native/prerequisites" />

## Code implementation

:::note
**Adobe SDK code requirements**

On the native Android and iOS parts of your React Native project, make sure you have registered at least `Edge Network` and `Edge Identity` extension before starting `MobileCore`.
Check [React Native AEP repository](https://github.com/adobe/aepsdk-react-native) for the code to put in the Android and iOS native parts.

<Render file="en/mobile/adobe-analytics/csmatchingkey-sending-rule" />

:::

Add the following code snippet in your application code.

```javascript title="adobe-analytics.js"
import { Edge, ExperienceEvent } from '@adobe/react-native-aepedge';
import Contentsquare from '@contentsquare/react-native-bridge';
// TODO: Use local storage you prefer here
import AsyncStorage from '@react-native-async-storage/async-storage';

export async function sendCSMatchingKeyIfNeeded() {
  const csMatchingKeyRecord = await AsyncStorage.getItem(
    'csMatchingKey_creation_ts'
  );
  if (!csMatchingKeyRecord) {
    await submitNewCsMatchingKey();
    return;
  }

  const { timestamp } = JSON.parse(csMatchingKeyRecord);
  if (Date.now() - timestamp > 30 * 60 * 1000) {
    // if the key is not valid anymore, submit a new one
    await submitNewCsMatchingKey();
  }
  // if the key is still valid, do nothing
}

async function submitNewCsMatchingKey() {
  // Generate the matching key and store it in the local storage
  const csMatchingKeyValue = `${Math.random()}_${Date.now()}`;
  const newCsMatchingKeyRecord = {
    csMatchingKey: csMatchingKeyValue,
    timestamp: Date.now(),
  };
  await AsyncStorage.setItem(
    'csMatchingKey_creation_ts',
    JSON.stringify(newCsMatchingKeyRecord)
  );

  // Submit the matching key to Contentsquare and Adobe
  Contentsquare.sendDynamicVar('csMatchingKey', csMatchingKeyValue);

  const xdmData = { eventType: 'csMatchingKey_state' };
  const data = { csMatchingKey: csMatchingKeyValue };
  const experienceEvent = new ExperienceEvent(xdmData, data);
  Edge.sendEvent(experienceEvent);
}
```

Add a call to the `sendCSMatchingKeyIfNeeded()` from within the `index.js` file of your project root folder when app state changes to 'active'.

```javascript title="index.js"
import { AppState } from 'react-native';
import { sendCSMatchingKeyIfNeeded } from './adobe-analytics.js';

// Listen for app state changes to foreground
AppState.addEventListener('change', (nextAppState) => {
  if (nextAppState === 'active') {
    sendCSMatchingKeyIfNeeded();
  }
});
```

<details>
  <summary>How to use deprecated React Native AEP Analytics Extension</summary>

:::danger[Deprecated]
For [React Native AEP Analytics Extension](https://github.com/adobe/react-native-acpanalytics), on the native Android and iOS parts of your React Native project, make sure you have registered at least `ACPIdentity` and `ACPAnalytics` before starting `ACPCore`.
Check [React Native AEP Analytics Extension repository](https://github.com/adobe/react-native-acpanalytics/tree/main/sample/ACPAnalyticsSampleApp) for the code to put in the Android and iOS native parts.
:::

Add the following code snippet in your application code. Add a call to the `updateCsMatchingKey()` from within the `index.js` file of your project root folder.

```javascript title="adobe-analytics.js"
import { ACPCore } from '@adobe/react-native-acpcore';
import Contentsquare from '@contentsquare/react-native-bridge';
// TODO: Use local storage you prefer here
import AsyncStorage from '@react-native-community/async-storage';

export async function updateCsMatchingKey() {
  const csMatchingKeyRecord = await AsyncStorage.getItem(
    'csMatchingKey_creation_ts'
  );
  if (!csMatchingKeyRecord) {
    await submitNewCsMatchingKey();
    return;
  }

  const { timestamp } = JSON.parse(csMatchingKeyRecord);
  if (Date.now() - timestamp > 30 * 60 * 1000) {
    // if the key is not valid anymore, submit a new one
    await submitNewCsMatchingKey();
  }
  // if the key is still valid, do nothing
}

async function submitNewCsMatchingKey() {
  // Generate the matching key and store it in the local storage
  const csMatchingKeyValue = `${Math.random()}_${Date.now()}`;
  const newCsMatchingKeyRecord = {
    csMatchingKey: csMatchingKeyValue,
    timestamp: Date.now(),
  };
  await AsyncStorage.setItem(
    'csMatchingKey_creation_ts',
    JSON.stringify(newCsMatchingKeyRecord)
  );

  // Submit the matching key to Contentsquare and Adobe
  Contentsquare.sendDynamicVar('csMatchingKey', csMatchingKeyValue);
  ACPCore.trackState('csMatchingKey_state', {
    csMatchingKey: csMatchingKeyValue,
  });
}
```

</details>

---

# Use Google Tag Manager

URL: https://docs.contentsquare.com/en/react-native/4-15-0/use-google-tag-manager/

## Prerequisite
If you are following this Google Tag Manager integration process, you should already have followed the React Native Firebase setup. We will assume that you are using [the officially supported Firebase bridge](https://rnfirebase.io/) the officially supported Firebase bridge. We will also assume that you have added the native GTM library to your iOS and Android project (following the [iOS documentation](https://developers.google.com/tag-manager/ios/v5) and the [Android documentation](https://developers.google.com/tag-manager/android/v5#add-gtm-to-project)).

Before anything, you also need to integrate the Contentsquare Bridge ([see section: Add Contentsquare to your app](/en/react-native/#install-the-sdk)).

## Integration

The whole integration will happen in the native part of your app, as well as in the GTM interface. Here is how it will work (note that you need to do these steps twice, once for iOS and once for Android):

- You will first setup custom tag, trigger and variables in your GTM interface.
- Then, you will have to add a custom Tag class in your native project.
- In your JavaScript/TypeScript code, or in your native code, you will use the Firebase Analytics library to send events, as explained thereafter.
- As you have created a trigger for that specific type of event, it will trigger the code in your native custom Tag class, where you will be calling the native SDK function corresponding to that event, thus allowing Contentsquare to collect those events.

### Screenview events

Screenview events will be triggered in the Firebase React Native bridge [by calling setCurrentScreen](https://rnfirebase.io/analytics/screen-tracking).

As the integration is exactly the same as the native ones, you can refer directly to the SDKs' explanation of the [iOS integration](/en/ios/use-google-tag-manager/#screenview-events) and [Android integration](/en/android/use-google-tag-manager/#screenview-events). You will have to do both in order to have a similar behavior across both platforms.

### Transaction events

Transaction events will be triggered in the Firebase React Native bridge [by calling logEcommercePurchase](https://rnfirebase.io/reference/analytics#logEcommercePurchase).

As the integration is exactly the same as the native ones, you can refer directly to the SDKs' explanation of the [iOS integration](/en/ios/use-google-tag-manager/#screenview-events) and the [Android integration](/en/android/use-google-tag-manager/#screenview-events). You will have to do both in order to have a similar behavior across both platforms.

### Dynamic variable events

Dynamic variables are generally custom, and as such can be used with any type of event that can be boiled down to a key/value pair with value types that are valid for the Contentsquare SDK (a string or an unsigned integer). The most common event in that case will thus be a custom event, sent [by calling `logEvent`](https://rnfirebase.io/reference/analytics#logEvent).

As the integration is exactly the same as the native ones, you can refer directly to the SDKs' explanation of the [iOS integration](/en/ios/use-google-tag-manager/#dynamic-variable-events)/[Android integration](/en/android/use-google-tag-manager/#dynamic-variable-events). You will have to do both in order to have a similar behavior across both platforms.

---