# Developer Hub

## Docs

- [Get Address History](https://cobo.com/developers/v1/api-references/custody-wallet/address_history.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of addresses associated with a custody wallet for a given coin, with pagination support. The response is a JSON array of objects, each containing a 'coin' field and an 'address' field.
- [Get Address Info](https://cobo.com/developers/v1/api-references/custody-wallet/address_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a given address for a specific coin. It checks if the address belongs to the custody wallet and raises an exception if it doesn't. The response is a JSON object containing the coin and address fields.
- [Get Addresses Info](https://cobo.com/developers/v1/api-references/custody-wallet/addresses_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a list of addresses for a specific coin. The endpoint accepts GET and POST requests with parameters 'coin' and 'address'. The 'coin' parameter specifies the coin type, and the 'address' parameter is a comma-separated list of addresses. The response contains the coin type and a comma-separated list of addresses that belong to the custody wallet of the authenticated user.
- [Get Coin Details](https://cobo.com/developers/v1/api-references/custody-wallet/coin_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the currency rate and unit for a given coin code. The endpoint requires authentication and takes a 'coin_code' parameter in the GET request.
- [Get Gas Station Balance](https://cobo.com/developers/v1/api-references/custody-wallet/get_gas_station_balance.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of assets of gas station. The response includes asset details such as coin, address, and balance.
- [Get Supported Coins](https://cobo.com/developers/v1/api-references/custody-wallet/get_supported_coins.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of supported coins for the WaaS API.
- [Get Internal Address Info](https://cobo.com/developers/v1/api-references/custody-wallet/internal_address_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about whether a given address is an internal address or not. If the address is internal, it also returns the name of the organization and wallet associated with the address. The endpoint takes three parameters: `coin`, `address`, and `memo` (optional). If the address contains a `|` character, the address is split into two parts: the address itself and the memo. Otherwise, the memo parameter is used. The endpoint requires authentication.
- [Get Internal Addresses Info](https://cobo.com/developers/v1/api-references/custody-wallet/internal_address_info_batch.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about the given addresses for a specific coin. It takes a GET or POST request with parameters 'coin' and 'address', where 'coin' is the cryptocurrency symbol and 'address' is a comma-separated list of addresses. The response is a list of dictionaries, where each dictionary contains information about the corresponding address, including whether it is an internal address or wallet address.
- [Verify Valid Address](https://cobo.com/developers/v1/api-references/custody-wallet/is_valid_address.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint checks whether a given cryptocurrency address is valid and returns a boolean value. It also supports memo for certain coins. Authentication is required to access this endpoint.
- [Loop Transaction Explorer](https://cobo.com/developers/v1/api-references/custody-wallet/loop-explorer.md)
- [Get New Deposit Address](https://cobo.com/developers/v1/api-references/custody-wallet/new_address.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint generates a new cryptocurrency address for a given coin and returns it in a JSON response. The endpoint requires authentication and takes in two parameters: `coin` and `native_segwit`. The `coin` parameter specifies the cryptocurrency for which the address needs to be generated, and the `native_segwit` parameter is a boolean flag indicating whether the address should be generated using native segwit format. The endpoint checks for permission and address count limits before generating the new address.
- [Get New Deposit Addresses](https://cobo.com/developers/v1/api-references/custody-wallet/new_addresses.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint generates new addresses for a given coin and returns a list of the generated addresses. The number of addresses to generate is specified in the 'count' parameter of the POST request.The maximum number of addresses that can be generated in one request is 200. The endpoint also checks if the organization has permission to add addresses and if the number of addresses being added exceeds the minutely limit.
- [null](https://cobo.com/developers/v1/api-references/custody-wallet/new_withdraw_request.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to create a new withdraw request for a specified coin. The request requires authentication and the necessary parameters include the coin, request ID, withdraw address, and amount. Optional parameters include a memo, force_external, and force_internal. The response will contain information about the newly created withdraw request.
- [Get Account Details](https://cobo.com/developers/v1/api-references/custody-wallet/org_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with detailed information about the organization associated with the authenticated user's custody wallet.
- [null](https://cobo.com/developers/v1/api-references/custody-wallet/pending_transaction.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the details of a pending transaction specified by its ID.
- [null](https://cobo.com/developers/v1/api-references/custody-wallet/pending_transactions.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of pending transactions filtered by coin, side, max_id, min_id, and limit parameters. The response includes transaction details such as transaction ID, coin type, amount, and timestamp.
- [Get All Staking History](https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_history.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of staking activities for a given coin, with optional filters for activity type, maximum ID, limit, and product ID. The response includes the activity ID, coin, amount, type, raw type, time, and product information.
- [Get Staking Product Details](https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_product.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a staking product with the given product ID. The response is a JSON object containing details about the product, such as its name, description, and rewards. The language parameter can be used to specify the language of the response (default is English).
- [Get All Staking Product List](https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_products.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of staking products available for a given coin and language. The response is a JSON array containing objects with information about each staking product, such as the name, annual yield, and minimum staking amount.
- [Stake](https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_stake.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to stake a certain amount of cryptocurrency on a particular product. The user must provide the product ID and the amount they wish to stake. The endpoint will then attempt to stake the specified amount on the specified product. If the product ID is invalid, an error will be returned.
- [Unstake](https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_unstake.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to stake or unstake a certain amount of a specified product in their custody wallet. The product_id and amount parameters are required in the POST request body. The endpoint first checks if the specified product exists, and then calls the pos_unstake method of the CustodyPosService to perform the staking or unstaking operation.
- [Get Staking Data](https://cobo.com/developers/v1/api-references/custody-wallet/staking/stakings.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of staking information for a given coin and language. The response includes staking ID, coin, decimal, amount, reward coin, reward coin decimal, reward amount, and product information. The product information is parsed based on the language parameter.
- [Get Unstaking Data](https://cobo.com/developers/v1/api-references/custody-wallet/staking/unstakings.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of unstaking and liquidating positions for the specified coin.
- [Deposit to Exchange Account (Investor Only)](https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_deposit.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to deposit funds into their trading account. The user must provide their exchange account token, the coin they wish to deposit, the amount they wish to deposit, and a unique request ID. The endpoint returns a JSON response with information about the deposit, including the request ID, the coin, the absolute amount deposited, the estimated amount received, the status of the deposit, the absolute fee charged, and the fee in the same coin as the deposit.
- [Get Trading Deposit Information (Investor Only)](https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_deposit_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a trading deposit. It requires a valid request ID and authentication with operation permission. The response contains details about the deposit, including the coin code, amount, estimated amount received, status, and fee.
- [Transfer Among Exchange Account](https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_transfer.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows authenticated traders to transfer funds between their exchange accounts. The request must include the 'from_exchange_account_token', 'to_exchange_account_token', 'coin', 'amount', and 'request_id' parameters. The response includes information about the transfer, such as the requested and estimated amounts, fees, and status.
- [Get Trading Transfer Information](https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_transfer_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a trading transfer request. It requires a 'request_id' parameter in the query string. The response contains details such as the coin, amount, fee, and status of the transfer request.
- [Withdraw to Investor's Wallet](https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_withdraw.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to withdraw funds from their exchange account. The user must provide their exchange account token, the coin they wish to withdraw, the amount they wish to withdraw, and a unique request ID. The endpoint returns a JSON response with information about the withdraw, including the request ID, the coin, the absolute amount withdrawn, the estimated amount received, the withdraw status, the absolute fee, and the fee.
- [Get Trading Withdraw Information](https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_withdraw_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a trading withdraw request. It requires a valid request ID and returns details such as the coin code, amount, fee, and status of the request. The response also includes the estimated amount received after deducting the fee.
- [Get Transaction Details](https://cobo.com/developers/v1/api-references/custody-wallet/transaction.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint retrieves a transaction by its ID from the WaaS API. The endpoint requires authentication and takes a single query parameter, 'id', which is the ID of the transaction to retrieve.
- [Get Transaction By Txid](https://cobo.com/developers/v1/api-references/custody-wallet/transaction_by_txid.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint retrieves transaction details by transaction ID. It requires authentication and takes a single query parameter 'txid' which is the transaction ID to retrieve details for. The response is a JSON object containing transaction details.
- [null](https://cobo.com/developers/v1/api-references/custody-wallet/transaction_history.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing the transaction history for a given coin and address. The response can be filtered by various parameters such as side, max_id, min_id, begin_time, end_time, and include_financial. The maximum number of transactions returned is 50.
- [Get Transactions By ID](https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_id.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by various parameters such as coin, address, side, and transaction ID range. The response includes transaction details such as transaction ID, coin type, amount, and timestamp.
- [Get Transactions By Request IDs](https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_request_ids.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing transaction information for the given request IDs. The request IDs should be provided as a comma-separated string in the 'request_ids' parameter of the GET request. The maximum number of request IDs that can be provided is 50.
- [Get Transactions By Time](https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_time.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by time range, coin type, transaction side (deposit/withdraw), and address. The response includes transaction details such as transaction hash, amount, and timestamp.
- [Get Transactions By time and offset](https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_time_ex.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by time range, transaction status, coins, transaction side (deposit/withdraw) and address. As the extension of ***[Get Transactions By Time](https://www.cobo.com/developers/v1/api-references/custody-wallet/transactions_by_time)***, this endpoint introduced a new 'offset' parameter used for performing pagination query of transactions. The response includes transaction details such as transaction hash, amount, and timestamp.
- [null](https://cobo.com/developers/v1/api-references/custody-wallet/withdraw_info_by_request_id.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a withdraw transaction given a request ID. The response is a JSON object containing details about the transaction such as the transaction hash, amount, and status.
- [Address Encodings](https://cobo.com/developers/v1/api-references/development/address-encoding.md)
- [Cobo Callback Signature](https://cobo.com/developers/v1/api-references/development/callback-signature.md)
- [Changelog](https://cobo.com/developers/v1/api-references/development/changelog.md): Keep track of every change to the WaaS API
- [Error Codes](https://cobo.com/developers/v1/api-references/development/error-codes.md)
- [Get Testnet Coins](https://cobo.com/developers/v1/api-references/development/testing.md)
- [Transaction Notification](https://cobo.com/developers/v1/api-references/development/transaction-notification.md)
- [Withdrawal Confirmation](https://cobo.com/developers/v1/api-references/development/withdrawal-confirmation.md)
- [Bind Addresses](https://cobo.com/developers/v1/api-references/mpc-wallet/auth_bind_addresses.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows a prime broker to bind a list of chain addresses to a user account. The endpoint requires a POST request with a JSON payload containing the user ID and a list of chain addresses. If the payload is valid, the endpoint returns a JSON response with the result of the binding operation.
- [Change Binding](https://cobo.com/developers/v1/api-references/mpc-wallet/auth_change_binding.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows authenticated users to change their binding to a new Prime Broker. The user's `broker_user_id` is passed in the request body, and the new `binder_id` is returned in the JSON response.
- [Create Binding](https://cobo.com/developers/v1/api-references/mpc-wallet/auth_create_binding.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint creates a binding between a user in the prime broker system and a user in the custody system. It requires a POST request with a 'user_id' field in the request body, and the user must have all necessary permissions. The response is a JSON object with a 'binder_id' field containing the ID of the newly created binding.
- [Query Binding](https://cobo.com/developers/v1/api-references/mpc-wallet/auth_query_binding.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the binding information for a given binder ID. The endpoint requires authentication and the user must have query permission. The binder ID is passed as a parameter in the GET request.
- [Query Statement By ID](https://cobo.com/developers/v1/api-references/mpc-wallet/auth_query_statement.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows authenticated users to query a statement by providing a statement ID. The response is a JSON object containing information about the statement, including its ID, creation time, and a list of transactions. The endpoint requires the user to have query permission.
- [Query User Auth](https://cobo.com/developers/v1/api-references/mpc-wallet/auth_query_user_auth.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is a GET request that requires a 'user_id' parameter. It returns a JSON response containing the user's authentication information queried from PrimeBrokerManager. Authentication is required to access this endpoint.
- [Unbind Binding](https://cobo.com/developers/v1/api-references/mpc-wallet/auth_unbind_binding.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to unbind their broker account from their MPC Wallet account. It requires a POST request with a 'user_id' field in the request body. The response is a JSON object containing a 'statement_id' field which can be used to query the status of the unbinding process.
- [Babylon Batch Broadcast Staking Transaction](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_batch_broadcast_staking_transaction.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to batch broadcast the specified pre-signed staking transactions based on the provided parameter `request_ids`
- [Babylon Broadcast Staking Transaction](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_broadcast_staking_transaction.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to broadcast the specified pre-signed staking transaction based on the provided parameter `request_id`
- [Babylon Drop Staking](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_drop_staking.md): This endpoint specify the pre-signed staking transaction, create a new transaction to drop the corresponding transaction, accepting parameters such as `request_id`, `related_request_id`, `fee_rate`, and `max_staking_fee`.
- [Babylon Get Staking Info](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_get_staking_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to query the specified pre-signed staking transaction information based on the provided parameter `request_id`
- [Babylon List Transactions By Status](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_list_transactions_by_status.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to query all staking transactions based on the provided parameter `status`, `address`, `min_cobo_id` and `limit`.
- [Babylon List Waiting Broadcast Transactions](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_list_waiting_broadcast_transactions.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to query all unbroadcasted pre-signed staking transactions based on the provided parameter `asset_coin` and `address`
- [Babylon Prepare Staking](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_prepare_staking.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to create a pre-signed staking transaction, accepting parameters such as `request_id`, `stake_info`, `fee_rate`, and `max_staking_fee`. Please note that a successfully created staking transaction will not be broadcast automatically; you need to call the [Babylon Broadcast Staking Transaction](/developers/api-references/mpc-wallet/babylon_broadcast_staking_transaction) endpoint to broadcast it.
- [Babylon Replace Staking Fee](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_replace_staking_fee.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint specify the pre-signed staking transaction, create a new transaction to replace the corresponding transaction, accepting parameters such as `request_id`, `related_request_id`, `fee_rate`, and `max_staking_fee`.
- [Babylon Unbonding](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_unbonding.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint performs the unbond operation for a given staking transaction.
- [Babylon Withdraw](https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_withdraw.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint performs the withdraw operation for a given staking transaction.
- [Get Coin Details](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_coin_info.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the currency rate and unit for a given coin code. The endpoint requires authentication and takes a 'coin_code' parameter in the GET request.
- [Create Transaction](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_create_transaction.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint creates a transaction for a given coin and request ID. The request must include the amount, from_address, and to_address. Optional parameters include fee, gas_price, gas_limit, max_fee, max_priority_fee, operation, and extra_parameters. The endpoint returns a JSON response with a 'cobo_id' field containing the ID of the created transaction.
- [Drop Transaction](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_drop_transaction.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint accepts parameters 'cobo_id' and 'request_id' as required fields, and 'fee', 'gas_price', 'gas_limit', and 'fee_amount' as optional fields. The endpoint returns a JSON response containing information about the transaction request.
- [Get Estimate Fee](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_estimate_fee.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint will simulate a transaction based on the parameters, and obtain the transaction fee from the blockchain. It takes in various parameters such as the coin code, amount, address, gas price, gas limit, fee, and extra parameters. The response includes the fee amount in different levels such as slow, average, fast, and custom. The custom fee corresponds to the fee or gas_price parameter.
- [Generate Address Memos](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_generate_address_memo.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint generates new memos for a given address and returns a list of the generated memos. The number of memos to generate is specified in the 'count' parameter of the POST request. The response contains a list of the generated memos in the form of address|memo.
- [Generate Addresses](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_generate_addresses.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint generates new addresses for a given chain code and returns a list of the generated addresses. The number of addresses to generate is specified in the 'count' parameter of the POST request. The maximum number of addresses that can be generated in one request is 200. The endpoint also checks if the organization has permission to add addresses and if the number of addresses being added exceeds the minutely limit. The response contains a list of the generated addresses along with their IDs, HD paths, and encodings.
- [Get Approval Details](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_approval_details.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the transaction approval process data for a given transaction request ID. The endpoint requires authentication and takes a 'request_id' parameter in the GET request.
- [Get Balance](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_balance.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns the balance of a given address in a MPC wallet. The response contains information about the coins and NFTs held by the address, including their balance, decimal, and description.
- [Get Max Sendable Amount](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_max_send_amount.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns the maximum sendable amount and the corresponding transaction fee for a given address. It takes in various parameters such as the coin code, fee rate, to_address, and from_address. The response includes the coin decimal, fee coin, the maximum sendable amount, and the corresponding transaction fee.
- [Get Supported Chains](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_supported_chains.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a 'chain_codes' field containing a list of supported chain codes for the MPC custody wallet associated with the authenticated user.
- [Get Supported Coins](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_supported_coins.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of supported coins for a given chain. The response includes the coin code, display code, description, decimal, deposit and withdraw availability, and confirming threshold.
- [Get Supported NFT Collections](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_supported_nft_collections.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of supported NFT collections on the specified chain. The response includes the NFT code, chain code, contract address, description, display code, and standard for each supported collection.
- [Get Wallet Supported Coins](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_wallet_supported_coins.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of supported coins for a specific MPC wallet. The response includes the coin code, chain code, display code, description, decimal, and other relevant information such as whether the coin can be deposited or withdrawn, and the confirming threshold.
- [Is Valid Address](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_is_valid_address.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint checks if a given address is valid for a specified coin. It also supports memos for certain coins. The response is a boolean indicating whether the address is valid or not.
- [Get Addresses List](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_addresses.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of wallet addresses and their associated information. The endpoint takes in a chain code and optional parameters for pagination and sorting. The response includes the total count of addresses and a list of addresses with their respective ID, address, encoding, and HD path.
- [Get Balances List](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_balances.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of token assets and their balances for a given MPC wallet. The response includes the total count of token assets, as well as information about each asset, such as the coin code, chain code, display code, and balance. Additionally, if any of the token assets are NFTs, the response will include information about the NFT, such as the NFT code, token ID, and contract address.
- [Get Spendable List](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_spendable.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of spendable unspent transaction outputs (UTXOs) for a given asset coin and address. The response includes the transaction hash, output index, address, amount, and confirmation status of each UTXO.
- [Get Transactions List](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_transactions.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by various parameters such as start and end time, transaction status, transaction type, coins, and addresses. The response is a JSON object containing a list of transactions.
- [Get Tss Node List](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_tss_node.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of TSS Nodes that configured on the Custody MPC Setting page. The response includes node id, node type and if the node is online.
- [Get Tss Node Requests List](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_tss_node_requests.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of TSS (Threshold Signature Scheme) requests with their metadata. The requests can be filtered by request type and status. The metadata includes the COBO ID, request type, status, failed reason (if any), and additional information specific to the request type (e.g., threshold and node IDs for key generation requests).
- [Retry Double Check](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_retry_double_check.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint retries a double check for a withdraw request with the given request_id. The request must be a POST request and the user must have all permissions. The endpoint retrieves the withdraw request with the given request_id and checks if it exists and has a status of 'STATUS_WAITING_DOUBLE_CHECK'. If the request is valid, the endpoint locks the record and processes the withdraw request with the 'process_waiting_double_check_withdraw_request' method from the CustodyService class.
- [Speedup Transaction](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_speedup_transaction.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to speed up a previously submitted transaction by replacing it with a new transaction with higher transation fee. The endpoint accepts a POST request with parameters including cobo_id, request_id, fee, gas_price, gas_limit, and fee_amount. The response is a JSON object containing the updated transaction information.
- [Get Transactions By Cobo ID](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_transactions_by_cobo_ids.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transaction requests based on the provided cobo_ids and status. The cobo_ids parameter is a comma-separated list of cobo ids. The status parameter is an optional integer representing the status of the transaction request. The response is a JSON object containing an array of transaction request objects.
- [Get Transactions By Request ID](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_transactions_by_request_ids.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing transaction information for a list of transaction request IDs. The response includes the transaction ID, request ID, status, and other relevant information. The endpoint requires authentication and accepts optional query parameters to filter the results by transaction status.
- [Get Transactions By Tx Hash](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_transactions_by_tx_hash.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns transaction details for a given transaction hash. The response is a JSON object containing transaction details such as transaction hash, block number, sender address, recipient address, value, and gas used. The endpoint also accepts an optional parameter 'transaction_type' to filter the transaction details based on the type of transaction.
- [Update Address Description](https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_update_address_description.md): <Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint updates the address description. The response contains the updated address along with their IDs, HD paths, encodings and description.
- [Authentication](https://cobo.com/developers/v1/api-references/overview/authentication.md): WaaS API Authentication
- [API Playground](https://cobo.com/developers/v1/api-references/overview/playground.md): Explore API endpoints directly in your browser with our API Playground
- [Address Management](https://cobo.com/developers/v1/faqs/address-management.md): Frequently Asked Questions about Address Management 
- [API Callback](https://cobo.com/developers/v1/faqs/api-callback.md): Frequently Asked Questions about API Callback
- [API Key](https://cobo.com/developers/v1/faqs/api-key.md): Frequently Asked Questions about API Key
- [Coin Management](https://cobo.com/developers/v1/faqs/coin-management.md): Frequently Asked Questions about Coin Management
- [Transaction Management](https://cobo.com/developers/v1/faqs/transaction-management.md): Frequently Asked Questions about Transaction Management
- [Build your first wallet application with Cobo in 10 minutes](https://cobo.com/developers/v1/get-started/overview/first-wallet-tutorial.md)
- [Full Custody](https://cobo.com/developers/v1/get-started/overview/full-custody-quick-start.md)
- [MPC Lite](https://cobo.com/developers/v1/get-started/overview/mpc-lite-quick-start.md)
- [MPC Co-managed Custody](https://cobo.com/developers/v1/get-started/overview/mpc-quick-start.md)
- [Quickstart](https://cobo.com/developers/v1/get-started/overview/quickstart.md)
- [Best Security Practices for API Configuration](https://cobo.com/developers/v1/guides/howtos/api-configuration-best-practices.md)
- [API Error Handling and Reporting ](https://cobo.com/developers/v1/guides/howtos/api-error-handling-and-reporting.md)
- [Safeguarding API Security Key](https://cobo.com/developers/v1/guides/howtos/api-security-key.md)
- [Setting Up Token Sweeping](https://cobo.com/developers/v1/guides/howtos/auto-token-sweeping-for-mpc-wallets.md)
- [How to Configure API Callback ](https://cobo.com/developers/v1/guides/howtos/configure-api-callback.md)
- [Creating and Managing Deposit Addresses](https://cobo.com/developers/v1/guides/howtos/create-manage-deposit-addresses.md)
- [How to Create a Transaction on UTXO-based Blockchains](https://cobo.com/developers/v1/guides/howtos/creating-utxo-transactions.md)
- [How to Create Web3 Transactions in MPC Wallets](https://cobo.com/developers/v1/guides/howtos/creating-web3-transactions.md)
- [How to Create a Withdraw Transaction via APIs](https://cobo.com/developers/v1/guides/howtos/creating-withdrawal-transactions.md)
- [Deposit and Withdraw Processes](https://cobo.com/developers/v1/guides/howtos/deposit-and-withdrawal-transaction-status.md)
- [How to Estimate and Optimize Transaction Fees for MPC Wallets](https://cobo.com/developers/v1/guides/howtos/estimate-transaction-fees.md)
- [Managing Wallet Balances](https://cobo.com/developers/v1/guides/howtos/manage-balance-and-transactions.md)
- [Querying Deposit Transactions ](https://cobo.com/developers/v1/guides/howtos/querying-deposit-transactions.md)
- [Replace-By-Fee (RBF) in MPC Wallets](https://cobo.com/developers/v1/guides/howtos/rbf.md)
- [Discord](https://cobo.com/developers/v1/overview/community/discord.md)
- [Github](https://cobo.com/developers/v1/overview/community/github.md)
- [LinkedIn](https://cobo.com/developers/v1/overview/community/linkedln.md)
- [News](https://cobo.com/developers/v1/overview/community/news.md)
- [Telegram](https://cobo.com/developers/v1/overview/community/telegram.md)
- [Twitter](https://cobo.com/developers/v1/overview/community/twitter.md)
- [Introduction](https://cobo.com/developers/v1/overview/custodial-wallet.md): Custodial Wallet Solution based on HSM/SGX
- [Introduction](https://cobo.com/developers/v1/overview/introduction.md)
- [Callback Server Configuration](https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-configuration.md)
- [Callback API](https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/callback-api.md)
- [Callback Server Examples](https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/callback-server-examples.md)
- [KeyGen Request Description](https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/keygen-request.md)
- [Reshare Request Description](https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/reshare-request.md)
- [Sign Request Description](https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/sign-request.md)
- [TSS Node Callback Mechanism](https://cobo.com/developers/v1/overview/mpc-wallet/callback/tss-node-callback-mechanism.md)
- [TSS Node Configuration & Callback Server Startup](https://cobo.com/developers/v1/overview/mpc-wallet/callback/tss-node-configuration-and-callback-server-startup.md)
- [Introduction](https://cobo.com/developers/v1/overview/mpc-wallet/mpc-introduction.md): MPC-TSS based Wallet
- [Introduction](https://cobo.com/developers/v1/overview/smart-contract-wallet/coboargus.md): Institution's Gateway to DeFi
- [Introduction](https://cobo.com/developers/v1/overview/smart-contract-wallet/cobosafe.md): Access Control Framework for Smart Contract Wallets
- [Introduction](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/1_overview.md)
- [Overview](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/2_1_account.md)
- [Cobo Safe Account](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/2_2_cobosafe.md)
- [Cobo Smart Account](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/2_3_cobosmart.md)
- [Send Transactions](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/2_4_send_tx.md)
- [Role Manager](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/3_rolemanager.md)
- [Overview](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_1_authorizer.md)
- [Authorizer Example](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_2_sample.md)
- [BaseACL](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_3_ACL.md)
- [Hint](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_4_hint.md)
- [Other Authorizers](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_5_others.md)
- [Argus Integration](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/5_argus.md)
- [Security Audit](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/6_audit.md)
- [Deployed Addresses](https://cobo.com/developers/v1/overview/smart-contract-wallet/en/7_deployment.md)
- [Wallet as a Service](https://cobo.com/developers/v1/overview/waas-introduction.md)
- [JavaScript](https://cobo.com/developers/v1/sdks-and-tools/sdks/cobo-safe/js.md)
- [Python](https://cobo.com/developers/v1/sdks-and-tools/sdks/cobo-safe/python.md)
- [Go](https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/go.md)
- [Java](https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/java.md)
- [JavaScript](https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/javascript.md)
- [PHP](https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/php.md)
- [Python](https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/python.md)
- [Cobo Safe Python Kit](https://cobo.com/developers/v1/sdks-and-tools/tools/pycobosafe.md)
- [MPC Recovery Kits](https://cobo.com/developers/v1/sdks-and-tools/tools/recovery-kit.md)
