# extractMarkdownFromFile
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/functions/extractMarkdownFromFile



```typescript
function extractMarkdownFromFile(file, options): Promise<string>
```

converts a file to markdown (ImageFile or PdfFile).

## Examples

<CodeGroup>
  ```typescript extractMarkdownFromFile
  import { extractMarkdownFromFile } from "@intuned/sdk/ai-extractors";

  const markdown = await extractMarkdownFromFile({
    source: {
      type: "url",
      data: "<file url>"
    },
    type: "pdf",
    // pages array is optional, do not pass it if you want to include all pages in the process
    pages: [1, 2]
  }, {
    label: "extract_markdown"
  });

  console.log(markdown);
  ```
</CodeGroup>

## Parameters

• **file**: [`ImageFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageFile) | [`PdfFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/PdfFile) | [`SpreadsheetFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/SpreadsheetFile)

The file you want to extract the markdown content from.

• **options**

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

## Returns

`Promise`\<`string`>

A promise that resolves to the extracted markdown content as a string.


# extractMarkdownFromLocator
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/functions/extractMarkdownFromLocator



```typescript
function extractMarkdownFromLocator(locator): Promise<string>
```

Extracts markdown content from a specific locator within a web page.

## Examples

<CodeGroup>
  ```typescript extractMarkdownFromLocator
  import { extractMarkdownFromLocator } from "@intuned/sdk/ai-extractors";

  await page.goto('https://example.com');
  const locator = page.locator('.article');
  const markdown = await extractMarkdownFromLocator(locator);
  console.log(markdown);

  ```
</CodeGroup>

## Parameters

• **locator**: `Locator`

The Playwright Locator object from which to extract the markdown content.

## Returns

`Promise`\<`string`>

A promise that resolves to the extracted markdown content.


# extractMarkdownFromPage
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/functions/extractMarkdownFromPage



```typescript
function extractMarkdownFromPage(page): Promise<string>
```

Extracts markdown content from a web page.

## Examples

<CodeGroup>
  ```typescript extractMarkdownFromPage
  import { extractMarkdownFromPage } from "@intuned/sdk/ai-extractors";

  await page.goto('https://example.com');
  const markdown = await extractMarkdownFromPage(page);
  console.log(markdown);

  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page object from which to extract the markdown content.

## Returns

`Promise`\<`string`>

A promise that resolves to the extracted markdown content.


# extractStructuredDataFromContent
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromContent



```typescript
function extractStructuredDataFromContent(content, options): Promise<any>
```

Extracts structured data from content items (text or images).

## Examples

<CodeGroup>
  ```typescript extractStructuredDataFromContent
  import { extractStructuredDataFromContent } from "@intuned/sdk/ai-extractors";

  const content = [
    { type: "text", data: "Sample text data" },
    {
      type: "image-url",
      image_type: "jpeg",
      data: "https://example.com/image.jpg"
    }
  ];

  const options = {
    label: "extract_contact_info",
    dataSchema: {
      type: "object",
      properties: {
        name: { type: "string", description: "contact name" },
        phone: { type: "string", description: "contact info" }
      }
    },
    model: "gpt4-turbo"
  };

  const data = await extractStructuredDataFromContent(content, options);
  console.log(data);
  ```
</CodeGroup>

## Parameters

• **content**: [`TextContentItem`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/TextContentItem) | [`ImageBufferContentItem`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageBufferContentItem) | [`ImageUrlContentItem`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageUrlContentItem) | ([`TextContentItem`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/TextContentItem) | [`ImageBufferContentItem`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageBufferContentItem) | [`ImageUrlContentItem`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageUrlContentItem))\[]

The content items from which to extract the structured data.

• **options**

• **options.dataSchema**: `ObjectSchema`

The JSON schema of the data you're trying to extract.

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

• **options.model**:
\| `"claude-3-opus"`
\| `"claude-3-sonnet"`
\| `"claude-3.5-sonnet"`
\| `"claude-3-haiku"`
\| `"gpt4-turbo"`
\| `"gpt-4o"`
\| `"gpt3.5-turbo"`

The model to use for extraction.

• **options.prompt?**: `string`

Optional. A prompt to guide the extraction process.

## Returns

`Promise`\<`any`>

A promise that resolves to the extracted structured data.


# extractStructuredDataFromFile
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromFile



```typescript
function extractStructuredDataFromFile(file, options): Promise<any>
```

## Examples

<CodeGroup>
  ```typescript extractStructuredDataFromFile
  import { extractStructuredDataFromFile } from "@intuned/sdk/ai-extractors";

  const movie = await extractStructuredDataFromFile({
    source: {
      type: "url",
      data: "<file url>"
    },
    type: "pdf",
    // pages array is optional, do not pass it if you want to include all pages in the process
    pages: [1, 2]
  }, {
    label: "extract_movie",
    dataSchema: {
      type: "object",
      properties: {
        "name": {
          type: "string",
          description: "movie name"
        },
        revenue: {
          type: "string",
          description: "movie revenue"
        }
      }
    }
  })

  ```
</CodeGroup>

## Parameters

• **file**: [`ImageFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageFile) | [`PdfFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/PdfFile) | [`SpreadsheetFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/SpreadsheetFile)

the file you want to extract the data from,

• **options**

• **options.dataSchema**: `JsonSchema`

the json schema of the data you're trying to extract.

• **options.label**: `string`

a label for this extraction process, used for billing and monitoring

• **options.prompt?**: `string`

optional, a prompt to guide the extraction process and provide more context.

• **options.strategy?**: [`MarkdownFileStrategy`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/MarkdownFileStrategy) | [`ImageFileStrategy`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageFileStrategy)

optional, the strategy to use for extraction. use `IMAGE` if the info you're trying to extract is visual and cannot be converted to markdown. Defaults to `MARKDOWN` strategy with `gpt4-turbo` model.

## Returns

`Promise`\<`any`>


# extractStructuredDataFromLocator
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromLocator



```typescript
function extractStructuredDataFromLocator(locator, options): Promise<any>
```

Extracts structured data from a web page.

## Examples

<CodeGroup>
  ```typescript extractStructuredDataFromLocator
  import { extractStructuredDataFromLocator } from "@intuned/sdk/ai-extractors";

  await page.goto('https://example.com');

  const options = {
    label: "extract_locator_data",
    dataSchema: {
      type: "object",
      properties: {
        title: { type: "string", description: "The title of the page" },
        date: { type: "string", description: "The date of the content" }
      }
    },
  };

  const data = await extractStructuredDataFromLocator(page.locator(".section"), options);
  console.log(data);

  ```
</CodeGroup>

## Parameters

• **locator**: `Locator`

The Playwright locator from which to extract the structured data.

• **options**

• **options.dataSchema**: `JsonSchema`

The JSON schema of the data you're trying to extract.

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

• **options.prompt?**: `string`

Optional. A prompt to guide the extraction process and provide more context.

• **options.strategy?**: [`ImageStrategy`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageStrategy) | [`HtmlStrategy`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/HtmlStrategy)

Optional. The strategy to use for extraction, use the `IMAGE` strategy if the info you're trying to extract is visual and does not exist on the html of the page,

## Returns

`Promise`\<`any`>

A promise that resolves to the extracted structured data.


# extractStructuredDataFromPage
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromPage



```typescript
function extractStructuredDataFromPage(page, options): Promise<any>
```

Extracts structured data from a web page.

## Examples

<CodeGroup>
  ```typescript extractStructuredDataFromPage
  import { extractStructuredDataFromPage } from "@intuned/sdk/ai-extractors";

  await page.goto('https://example.com');

  const options = {
    label: "extract_page_data",
    dataSchema: {
      type: "object",
      properties: {
        title: { type: "string", description: "The title of the page" },
        date: { type: "string", description: "The date of the content" }
      }
    },
  };

  const data = await extractStructuredDataFromPage(page, options);
  console.log(data);

  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page from which to extract the structured data.

• **options**

• **options.dataSchema**: `JsonSchema`

The JSON schema of the data you're trying to extract.

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

• **options.prompt?**: `string`

Optional. A prompt to guide the extraction process and provide more context.

• **options.strategy?**: [`ImageStrategy`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageStrategy) | [`HtmlStrategy`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/HtmlStrategy)

Optional. The strategy to use for extraction, use the `IMAGE` strategy if the info you're trying to extract is visual and does not exist on the html of the page,

## Returns

`Promise`\<`any`>

A promise that resolves to the extracted structured data.


# extractTablesFromFile
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/functions/extractTablesFromFile



```typescript
function extractTablesFromFile(file, options): Promise<ExtractedTable[]>
```

Extracts tables from a file (ImageFile or PdfFile).

## Examples

<CodeGroup>
  ```typescript extractTablesFromFile
  import { extractTablesFromFile } from "@intuned/sdk/ai-extractors";

  const tables = await extractTablesFromFile({
    source: {
      type: "url",
      data: "<file url>"
    },
    type: "pdf",
    // pages array is optional, do not pass it if you want to include all pages in the process
    pages: [1, 2]
  }, {
    label: "extract_tables"
  });

  console.log(tables);
  ```
</CodeGroup>

## Parameters

• **file**: [`ImageFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageFile) | [`PdfFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/PdfFile) | [`SpreadsheetFile`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/SpreadsheetFile)

The file you want to extract the tables from.

• **options**

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

## Returns

`Promise`\<[`ExtractedTable`](/automation-sdks/intuned-sdk/ai-extractors/interfaces/ExtractedTable)\[]>

A promise that resolves to an array of extracted tables.


# ExtractedTable
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/interfaces/ExtractedTable



Represents a table extracted from a pdf file.

## Properties

### content

```typescript
content: (null | string)[][];
```

a 2 dimensional array contains the table values.

***

### title

```typescript
title: null | string;
```

the title of the table if found


# FileBase64Source
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/interfaces/FileBase64Source



Represents a file source from a base64 string.

## Properties

### data

```typescript
data: string;
```

The base64 string of the file data.

***

### type

```typescript
type: "base64";
```

The type of the file source, which is always "base64".


# FileBufferSource
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/interfaces/FileBufferSource



Represents a file source from a buffer.

## Properties

### data

```typescript
data: Buffer;
```

The buffer data of the file.

***

### type

```typescript
type: "buffer";
```

The type of the file source, which is always "buffer".


# FileUrlSource
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/interfaces/FileUrlSource



Represents a file source from a URL.

## Properties

### data

```typescript
data: string;
```

The URL of the file.

***

### type

```typescript
type: "url";
```

The type of the file source, which is always "url".


# HtmlStrategy
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/interfaces/HtmlStrategy



this strategy will use the html of the page/locator to extract the needed data. we filter out some of the attributes to reduce context.
the attributes included are only: `aria-label` `data-name` `name` `type` `placeholder` `value` `role` `title` `href` `id` `alt`,

## Properties

### model

```typescript
model: 
  | "claude-3-opus"
  | "claude-3-sonnet"
  | "claude-3.5-sonnet"
  | "claude-3-haiku"
  | "gpt4-turbo"
  | "gpt-4o"
  | "gpt3.5-turbo";
```

the model to use in the extraction process

***

### type

```typescript
type: "HTML";
```

the type of the strategy


# ImageFile
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageFile



Represents an image file source.

## Properties

### source

```typescript
source: FileBufferSource | FileUrlSource | FileBase64Source;
```

The source of the file data.

***

### type

```typescript
type: "image";
```

The type of the file, which is always "image".


# ImageStrategy
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/interfaces/ImageStrategy



this strategy will use a screenshot of the page/locator with some processing to extract the needed data.
should be used when the information you're trying to extract is not present in the dom as a text but can be identified visually.

## Properties

### model

```typescript
model: 
  | "claude-3-opus"
  | "claude-3-sonnet"
  | "claude-3.5-sonnet"
  | "claude-3-haiku"
  | "gpt4-turbo"
  | "gpt-4o";
```

the model to use in the extraction process.

***

### type

```typescript
type: "IMAGE";
```

the type of the strategy


# PdfFile
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/ai-extractors/interfaces/PdfFile



Represents a PDF file source.

## Properties

### pages?

```typescript
optional pages: number[];
```

Optional. The specific pages of the PDF to extract data from, if not provided, all page will be included.

***

### source

```typescript
source: FileBufferSource | FileUrlSource | FileBase64Source;
```

The source of the file data.

***

### type

```typescript
type: "pdf";
```

The type of the file, which is always "pdf".


# ExcelFile
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/classes/ExcelFile



Represents an Excel file and provides methods to interact with it.

## Examples

<CodeGroup>
  ```typescript ExcelFile
  import { ExcelFile }from "@intuned/sdk/files"

  const excelFile = new ExcelFile(excelBuffer);
  ...
  ```
</CodeGroup>

## Constructors

### new ExcelFile()

```typescript
new ExcelFile(data): ExcelFile
```

Creates an instance of ExcelFile.

#### Parameters

• **data**: `Buffer`

The binary data of the Excel file.

#### Returns

[`ExcelFile`](/automation-sdks/intuned-sdk/files/classes/ExcelFile)

## Methods

### getContent()

```typescript
getContent(sheetNames?): Promise<ExcelFileSheet[]>
```

Gets the content of specified sheets in the Excel file.

#### Parameters

• **sheetNames?**: `string`\[]

Optional. An array of sheet names to get content from.

#### Returns

`Promise`\<[`ExcelFileSheet`](/automation-sdks/intuned-sdk/files/interfaces/ExcelFileSheet)\[]>

A promise that resolves to the content of the specified sheets.

#### Examples

<CodeGroup>
  ```typescript getContent
  import { ExcelFile }from "@intuned/sdk/files"

  const content = await excel.getContent(['Sheet1', 'Sheet2']);
  console.log(content);
  ```
</CodeGroup>

***

### fromUrl()

```typescript
static fromUrl(url): Promise<ExcelFile>
```

Creates an ExcelFile instance from a URL.

#### Parameters

• **url**: `string`

The URL of the Excel file.

#### Returns

`Promise`\<[`ExcelFile`](/automation-sdks/intuned-sdk/files/classes/ExcelFile)>

A promise that resolves to an ExcelFile instance.

#### Examples

<CodeGroup>
  ```typescript fromUrl
  import { ExcelFile }from "@intuned/sdk/files"

  const excel = await ExcelFile.fromUrl('https://example.com/file.xlsx');
  console.log(excel);
  ```
</CodeGroup>


# PdfFile
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/classes/PdfFile



Represents a PDF file and provides methods to interact with it.

## Examples

<CodeGroup>
  ```typescript PdfFile
  import { PdfFile } from "@intuned/sdk/files"

  const pdf = new PdfFile(pdfBuffer);

  ```
</CodeGroup>

## Constructors

### new PdfFile()

```typescript
new PdfFile(data): PdfFile
```

Creates an instance of PdfFile.

#### Parameters

• **data**: `Buffer`

The binary data of the PDF file.

#### Returns

[`PdfFile`](/automation-sdks/intuned-sdk/files/classes/PdfFile)

## Methods

### getContent()

```typescript
getContent(pageNumbers?): Promise<PdfFileContentItem[]>
```

Gets the text content of specified pages in the PDF file. Does not support links.

#### Parameters

• **pageNumbers?**: `number`\[]

Optional. An array of page numbers to get content from.

#### Returns

`Promise`\<[`PdfFileContentItem`](/automation-sdks/intuned-sdk/files/interfaces/PdfFileContentItem)\[]>

A promise that resolves to the content of the specified pages.

#### Examples

<CodeGroup>
  ```typescript getContent
  import { PdfFile } from "@intuned/sdk/files"

  const pdf = await PdfFile.fromUrl('https://example.com/file.pdf');
  const content = await pdf.getContent([1, 2, 3]);
  console.log(content);
  ```
</CodeGroup>

***

### pagesCount()

```typescript
pagesCount(): Promise<number>
```

Gets the total number of pages in the PDF file.

#### Returns

`Promise`\<`number`>

A promise that resolves to the number of pages.

#### Examples

<CodeGroup>
  ```typescript pagesCount
  import { PdfFile } from "@intuned/sdk/files"

  const pdf = await PdfFile.fromUrl('https://example.com/file.pdf');
  const pageCount = await pdf.pagesCount();
  console.log(pageCount);
  ```
</CodeGroup>

***

### search()

```typescript
search(search, options?): Promise<SearchPdfResult[]>
```

Searches for a string within the PDF file.

#### Parameters

• **search**: `string`

The string to search for.

• **options?**: [`SearchPdfConfigs`](/automation-sdks/intuned-sdk/files/interfaces/SearchPdfConfigs)

Optional. Search configuration options.

#### Returns

`Promise`\<[`SearchPdfResult`](/automation-sdks/intuned-sdk/files/interfaces/SearchPdfResult)\[]>

A promise that resolves to an array of search results.

#### Examples

<CodeGroup>
  ```typescript Without options
  import { PdfFile } from "@intuned/sdk/files"

  const pdf = await PdfFile.fromUrl('https://example.com/file.pdf');
  const results = await pdf.search('keyword');

  console.log(results);
  ```

  ```typescript With options
  import { PdfFile } from "@intuned/sdk/files"

  const pdf = await PdfFile.fromUrl('https://example.com/file.pdf');
  const results = await pdf.search('keyword', { matchCase: true });

  console.log(results);
  ```
</CodeGroup>

***

### fromUrl()

```typescript
static fromUrl(url): Promise<PdfFile>
```

Creates a PdfFile instance from a URL.

#### Parameters

• **url**: `string`

The URL of the PDF file.

#### Returns

`Promise`\<[`PdfFile`](/automation-sdks/intuned-sdk/files/classes/PdfFile)>

A promise that resolves to a PdfFile instance.

#### Examples

<CodeGroup>
  ```typescript fromUrl
  import { PdfFile } from "@intuned/sdk/files"

  const pdf = await PdfFile.fromUrl('https://example.com/file.pdf');

  ```
</CodeGroup>


# downloadFile
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/functions/downloadFile



```typescript
function downloadFile(page, strategy): Promise<Download>
```

Downloads a file using the specified strategy.

## Examples

<CodeGroup>
  ```typescript DirectLink
  import { downloadFile } from "@intuned/sdk/files";

  // use DirectLink strategy when you have the url of the pdf.
  const download = await downloadFile(page, { type:"DirectLink", link:"https://www.gemini.com/documents/credit/Test_PDF.pdf" });
  console.log(await download.path()); // Outputs the file path
  ```

  ```typescript DownloadByOpeningNewTab
  import { downloadFile } from "@intuned/sdk/files";

  await page.goto("https://sandbox.intuned.dev/pdfs")

  // use DownloadByOpeningNewTab strategy when you have to click on a button to open the pdf in a new tab in the browser viewer.
  const downloadedFile = await downloadFile(page, {
    type: "DownloadByOpeningNewTab",
    downloadTrigger: (page) => page.locator("table > tbody > tr:nth-child(1) > td:nth-child(4) > a").click()
  })

  console.log(await download.path()); // Outputs the file path
  ```

  ```typescript DownloadFromDirectLink
  import { downloadFile } from "@intuned/sdk/files";

  await page.goto("https://freetestdata.com/document-files/pdf/")

  // use DownloadFromDirectLink strategy when the file gets downloaded immediately after you trigger an action on the page.
  const downloadedFile = await downloadFile(page, {
    type: "DownloadFromDirectLink",
    downloadTrigger: page.locator('.elementor-button').first()
  })

  console.log(await downloadedFile.path());
  ```

  ```typescript NavigateAndDownloadFromThirdPartyFileViewer
   import { downloadFile } from "@intuned/sdk/files";

   // use NavigateAndDownloadFromThirdPartyFileViewer strategy when the file is viewed in a custom(non standard) viewer.
   const downloadedFile = await downloadFile(page, {
     type: "NavigateAndDownloadFromThirdPartyFileViewer",
     linkToGoTo: "https://txdir.widen.net/view/pdf/ki9p5mluhv/DIR-CPO-4582-RFO-DIR-CPO-TMP-445.pdf?t.download=true&u=tmwul0",
     downloadActionOnFileViewerPage: (page) => page.locator("#download").click()
   })

   console.log(await downloadedFile.path());
  ```

  ```typescript PrintPageAsPdf
  import { downloadFile } from "@intuned/sdk/files";

  await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html")

  // use PrintPageAsPdf strategy when you download a pdf version of the open webpage.
  const downloadedFile = await downloadFile(page, {
    type: "PrintPageAsPdf",
  })

  console.log(await downloadedFile.path());
  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page object.

• **strategy**: [`PersistFileStrategy`](/automation-sdks/intuned-sdk/files/type-aliases/PersistFileStrategy)

The strategy to use for downloading the file.

## Returns

`Promise`\<[`Download`](/automation-sdks/intuned-sdk/files/interfaces/Download)>

A promise that resolves to a Download object.


# uploadFileToS3
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/functions/uploadFileToS3



```typescript
function uploadFileToS3(file, options): Promise<File>
```

Uploads a file to S3 bucket.

## Examples

<CodeGroup>
  ```typescript Download
  import { downloadFile, PersistFileStrategy, uploadFileToS3 } from "@intuned/sdk/files";

  const download = await downloadFile(page, {
    type: "DownloadByOpeningNewTab",
    downloadTrigger: (page) => page.locator(".download_button").click(),
  });

  const s3Configs: S3Configs = {
    bucket: 'my-bucket',
    region: 'us-west-1',
    accessKeyId: '....',
    secretAccessKey: '....'
  };

  const uploadedFile = await uploadFileToS3(download, { s3Configs });
  console.log(uploadedFile.urlDescriptor());
  ```

  ```typescript ReadStream
  import { uploadFileToS3, S3Configs } from "@intuned/sdk/files";
  import { ReadStream } from "node:fs";

  const file: ReadStream = ...; // Assume ReadStream is initialized
  const s3Configs: S3Configs = {
    bucket: 'my-bucket',
    region: 'us-west-1',
    accessKeyId: '....',
    secretAccessKey: '....'
  };

  const uploadedFile = await uploadFileToS3(file, { s3Configs });
  console.log(uploadedFile.urlDescriptor());
  ```
</CodeGroup>

## Parameters

• **file**:
\| `string`
\| `Uint8Array`
\| `Buffer`
\| `ReadStream`
\| [`Download`](/automation-sdks/intuned-sdk/files/interfaces/Download)

The file to upload, it can be a downloaded file by the downloadFile function or another content, the file can be  `Download | string | Uint8Array | Buffer | ReadStream`

• **options**

The options for uploading the file.

• **options.fileNameOverride?**: `string`

Optional. Override for the file name.

• **options.s3Configs?**: [`S3Configs`](/automation-sdks/intuned-sdk/files/interfaces/S3Configs)

Optional. S3 configuration options.

## Returns

`Promise`\<[`File`](/automation-sdks/intuned-sdk/files/interfaces/File)>

A promise that resolves to a File object.


# Download
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/interfaces/Download



Represents a downloaded file.

## Properties

### delete()

```typescript
delete: () => Promise<void>;
```

Deletes the downloaded file.

#### Returns

`Promise`\<`void`>

***

### path()

```typescript
path: () => Promise<null | string>;
```

Gets the path of the downloaded file.

#### Returns

`Promise`\<`null` | `string`>

***

### suggestedFilename()

```typescript
suggestedFilename: () => undefined | string;
```

Returns suggested filename for this download. It is typically computed by the browser from the `Content-Disposition` response header or the download attribute. See the spec on [whatwg](https://html.spec.whatwg.org/#downloading-resources). Different browsers can use different logic for computing it. when the file is downloaded using  `DirectLink` or `PrintPageAsPdf` this will always return undefined,

#### Returns

`undefined` | `string`


# ExcelFileSheet
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/interfaces/ExcelFileSheet



Represents the content of a sheet in an Excel file.

## Properties

### content

```typescript
content: (undefined | string | number | Date)[][];
```

The content of the sheet.

***

### name

```typescript
name: undefined | string;
```

The name of the sheet.


# File
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/interfaces/File



Represents an s3 file, and provides some functions to operate over it

## Methods

### generateSignedUrl()

```typescript
generateSignedUrl(options?): Promise<string>
```

Generates a signed URL for the file.

#### Examples

<CodeGroup>
  ```typescript generateSignedUrl
  import { File } from "@intuned/sdk/files";

  const signedUrl = await file.generateSignedUrl({ expiresIn: 1000 });
  console.log(signedUrl);
  ```
</CodeGroup>

## Parameters

• **options?**

Optional. Options for generating the signed URL.

• **options.expiresIn?**: `number`

The expiration time for the signed URL in seconds.

#### Returns

`Promise`\<`string`>

A promise that resolves to the signed URL.

##

***

### urlDescriptor()

```typescript
urlDescriptor(): string
```

Gets S3 URL descriptor of the file.

#### Returns

`string`

The URL descriptor of the file.


# PdfFileContentItem
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/interfaces/PdfFileContentItem



Represents the content of a PDF file.

## Properties

### content

```typescript
content: string;
```

The content of the page.

***

### pageNumber

```typescript
pageNumber: number;
```

The page number of the content.


# S3Configs
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/interfaces/S3Configs



Configuration to connect to S3 bucket

## Properties

### accessKeyId

```typescript
accessKeyId: string;
```

The AWS access key ID.

***

### bucket

```typescript
bucket: string;
```

The S3 bucket name.

***

### region

```typescript
region: string;
```

The AWS region.

***

### secretAccessKey

```typescript
secretAccessKey: string;
```

The AWS secret access key.


# SearchPdfConfigs
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/interfaces/SearchPdfConfigs



Configuration options for searching within a PDF file.

## Properties

### contextWindow?

```typescript
optional contextWindow: number;
```

Optional. Number of context letters around the search term to return.

***

### matchCase?

```typescript
optional matchCase: boolean;
```

Optional. Whether to match case during the search.

***

### wholeWord?

```typescript
optional wholeWord: boolean;
```

Optional. Whether to match whole words only.


# SearchPdfResult
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/interfaces/SearchPdfResult



Represents a search result within a PDF file.

## Properties

### context

```typescript
context: string;
```

The context around the search term.

***

### page

```typescript
page: number;
```

The page number where the search term was found.


# PersistFileStrategy
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/files/type-aliases/PersistFileStrategy



```typescript
type PersistFileStrategy: 
  | object
  | object
  | object
  | object
  | object;
```

## Strategies:

* `DownloadByOpeningNewTab`: use this strategy when the file you want to download get open in a new tab after doing some action on the page.
* `DownloadFromDirectLink`:  use this strategy when there's a button or action you do in the page, and the file gets downloaded automatically in the same tab.
* `NavigateAndDownloadFromThirdPartyFileViewer`: use this strategy when the file is viewed in a custom(non standard) viewer
* `DirectLink`: use this strategy when you have the file url.
* `PrintPageAsPdf`: use this action when you download a pdf version of the open webpage.


# extractArrayFromLocator
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/optimized-extractors/functions/extractArrayFromLocator



```typescript
function extractArrayFromLocator(locator, options): Promise<Record<string, string>[]>
```

Extracts an array of structured data from a locator.

## Examples

<CodeGroup>
  ```typescript extractArrayFromLocator
   import { extractArrayFromLocator } from "@intuned/sdk/optimized-extractors";

   await page.goto("https://books.toscrape.com/")
   const books = await extractArrayFromLocator(page.locator("section"),
     {
       itemEntityName: "book",
       label: "books-extraction",
       itemEntitySchema: {
         type: "object",
         required: ["name"],
         properties: {
           name: {
             type: "string",
             description: "book name",
             primary: true
           }
         }
       }
     },
   )

   console.log(books)

   // output:
   // [
   // ...
   // { name: 'Olio' },
   // { name: 'Mesaerion: The Best Science Fiction Stories 1800-1849' },
   // { name: 'Libertarianism for Beginners' },
   // { name: "It's Only the Himalayas" }
   // ...
   // ]

  ```
</CodeGroup>

## Parameters

• **locator**: `Locator`

The Playwright Locator object from which to extract the data.

• **options**

• **options.itemEntityName**: `string`

The name of the entity items being extracted. it must be between 1 and 50 characters long and can only contain letters, digits, periods, underscores, and hyphens.

• **options.itemEntitySchema**: [`SimpleArrayItemSchema`](/automation-sdks/intuned-sdk/optimized-extractors/interfaces/SimpleArrayItemSchema)

The schema of the entity items being extracted.

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

• **options.optionalPropertiesInvalidator?**

Optional. A function to invalidate optional properties.

• **options.prompt?**: `string`

Optional. A prompt to guide the extraction process.

• **options.strategy?**: `ImageStrategy` | `HtmlStrategy`

Optional. The strategy to use for extraction, if not provided, the html strategy with claude haiku will be used.

• **options.variantKey?**: `string`

Optional. A variant key for the extraction process.

## Returns

`Promise`\<`Record`\<`string`, `string`>\[]>

A promise that resolves to a list of extracted data.


# extractArrayFromPage
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/optimized-extractors/functions/extractArrayFromPage



```typescript
function extractArrayFromPage(page, options): Promise<Record<string, string>[]>
```

Extracts an array of structured data from a web page in an optimized way, this function will use ai for the first n times, until it collects multiple examples
then it will build reliable selectors in the background to make the process more efficient

## Examples

<CodeGroup>
  ```typescript extractArrayFromPage
   import { extractArrayFromPage } from "@intuned/sdk/optimized-extractors";

   await page.goto("https://books.toscrape.com/")
   const books = await extractArrayFromPage(page,
     {
       strategy: {
         model: "gpt4-turbo",
         type: "HTML"
       },
       itemEntityName: "book",
       label: "books-extraction",
       itemEntitySchema: {
         type: "object",
         required: ["name"],
         properties: {
           name: {
             type: "string",
             description: "book name",
             primary: true
           }
         }
       }
     },
   )

   console.log(books)

   // output:
   // [
   // ...
   // { name: 'Olio' },
   // { name: 'Mesaerion: The Best Science Fiction Stories 1800-1849' },
   // { name: 'Libertarianism for Beginners' },
   // { name: "It's Only the Himalayas" }
   // ...
   // ]

  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page object from which to extract the data.

• **options**

• **options.itemEntityName**: `string`

The name of the entity items being extracted, it must be between 1 and 50 characters long and can only contain letters, digits, periods, underscores, and hyphens.

• **options.itemEntitySchema**: [`SimpleArrayItemSchema`](/automation-sdks/intuned-sdk/optimized-extractors/interfaces/SimpleArrayItemSchema)

The schema of the entity items being extracted.

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

• **options.optionalPropertiesInvalidator?**

Optional. A function to invalidate optional properties.

• **options.prompt?**: `string`

Optional. A prompt to guide the extraction process.

• **options.strategy?**: `ImageStrategy` | `HtmlStrategy`

Optional. The strategy to use for extraction, if not provided, the html strategy with claude haiku will be used.

• **options.variantKey?**: `string`

Optional. A variant key for the extraction process, use this when the page has multiple variants/shapes.

## Returns

`Promise`\<`Record`\<`string`, `string`>\[]>

A promise that resolves to a list of extracted data.


# extractObjectFromLocator
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/optimized-extractors/functions/extractObjectFromLocator



```typescript
function extractObjectFromLocator(locator, options): Promise<Record<string, string | null> | null>
```

Extracts a structured object from a locator.

## Examples

<CodeGroup>
  ```typescript extractObjectFromLocator
   import { extractObjectFromLocator } from "@intuned/sdk/optimized-extractors";

   await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html")
   const book = await extractObjectFromLocator(page.locator(".page_inner"),
     {
       entityName: "book",
       label: "book-extraction",
       entitySchema: {
         type: "object",
         required: ["name","price","reviews"],
         properties: {
           name: {
             type: "string",
             description: "book name",
           },
           price: {
             type: "string",
             description: "book price"
           },
           reviews: {
             type: "string",
             description: "Number of reviews"
           }

         }
       }
     },
   )

   console.log(book)

   // output:
   // { name: 'A Light in the Attic', price: '£51.77', reviews: '0' }

  ```
</CodeGroup>

## Parameters

• **locator**: `Locator`

The Playwright Locator object from which to extract the data.

• **options**

• **options.entityName**: `string`

The name of the entity being extracted. it must be between 1 and 50 characters long and can only contain letters, digits, periods, underscores, and hyphens.

• **options.entitySchema**: [`SimpleObjectSchema`](/automation-sdks/intuned-sdk/optimized-extractors/interfaces/SimpleObjectSchema)

The schema of the entity being extracted.

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

• **options.optionalPropertiesInvalidator?**

Optional. A function to invalidate optional properties.

• **options.prompt?**: `string`

Optional. A prompt to guide the extraction process.

• **options.strategy?**: `ImageStrategy` | `HtmlStrategy`

Optional. The strategy to use for extraction, if not provided, the html strategy with claude haiku will be used.

• **options.variantKey?**: `string`

Optional. A variant key for the extraction process.

## Returns

`Promise`\<`Record`\<`string`, `string` | `null`> | `null`>

A promise that resolves to the extracted object.


# extractObjectFromPage
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/optimized-extractors/functions/extractObjectFromPage



```typescript
function extractObjectFromPage(page, options): Promise<Record<string, string | null> | null>
```

Extracts a structured object from a web page.

## Examples

<CodeGroup>
  ```typescript extractObjectFromPage
   import { extractObjectFromPage } from "@intuned/sdk/optimized-extractors";

   await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html")
   const book = await extractObjectFromPage(page,
     {
       entityName: "book",
       label: "book-extraction",
       entitySchema: {
         type: "object",
         required: ["name","price","reviews"],
         properties: {
           name: {
             type: "string",
             description: "book name",
           },
           price: {
             type: "string",
             description: "book price"
           },
           reviews: {
             type: "string",
             description: "Number of reviews"
           }

         }
       }
     },
   )

   console.log(book)

   // output:
   // { name: 'A Light in the Attic', price: '£51.77', reviews: '0' }

  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page object from which to extract the data.

• **options**

• **options.entityName**: `string`

The name of the entity being extracted. it must be between 1 and 50 characters long and can only contain letters, digits, periods, underscores, and hyphens.

• **options.entitySchema**: [`SimpleObjectSchema`](/automation-sdks/intuned-sdk/optimized-extractors/interfaces/SimpleObjectSchema)

The schema of the entity being extracted.

• **options.label**: `string`

A label for this extraction process, used for billing and monitoring.

• **options.optionalPropertiesInvalidator?**

Optional. A function to invalidate optional properties.

• **options.prompt?**: `string`

Optional. A prompt to guide the extraction process.

• **options.strategy?**: `ImageStrategy` | `HtmlStrategy`

Optional. The strategy to use for extraction, if not provided, the html strategy with claude haiku will be used.

• **options.variantKey?**: `string`

Optional. A variant key for the extraction process.

## Returns

`Promise`\<`Record`\<`string`, `string` | `null`> | `null`>

A promise that resolves to the extracted object.


# SimpleArrayItemSchema
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/optimized-extractors/interfaces/SimpleArrayItemSchema



A simple array item schema with properties.
SimpleArrayItemSchema

## Extends

* `BasicSchema`

## Properties

### description?

```typescript
optional description: string;
```

#### Inherited from

`BasicSchema.description`

***

### properties

```typescript
properties: Record<string, SimpleArrayStringSchema>;
```

The properties of the array item.

***

### required

```typescript
required: string[];
```

The required properties of the array item.

***

### type

```typescript
type: "object";
```

The type of the schema, which is always "object".

#### Overrides

`BasicSchema.type`


# SimpleArrayStringSchema
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/optimized-extractors/interfaces/SimpleArrayStringSchema



A simple array schema with string properties.
SimpleArrayStringSchema

## Extends

* `BasicSchema`

## Properties

### description?

```typescript
optional description: string;
```

#### Inherited from

`BasicSchema.description`

***

### primary?

```typescript
optional primary: boolean;
```

Optional. Indicates whether this is a primary property.

***

### type

```typescript
type: "string";
```

The type of the schema, which is always "string".

#### Overrides

`BasicSchema.type`


# SimpleObjectSchema
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/optimized-extractors/interfaces/SimpleObjectSchema



A simple object schema with properties.
SimpleObjectSchema

## Extends

* `BasicSchema`

## Properties

### description?

```typescript
optional description: string;
```

#### Inherited from

`BasicSchema.description`

***

### properties

```typescript
properties: Record<string, SimpleObjectStringSchema>;
```

The properties of the object.

***

### required

```typescript
required: string[];
```

The required properties of the object.

***

### type

```typescript
type: "object";
```

The type of the schema, which is always "object".

#### Overrides

`BasicSchema.type`


# SimpleObjectStringSchema
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/optimized-extractors/interfaces/SimpleObjectStringSchema



A simple object schema with string properties.
SimpleObjectStringSchema

## Extends

* `BasicSchema`

## Properties

### description?

```typescript
optional description: string;
```

#### Inherited from

`BasicSchema.description`

***

### type

```typescript
type: "string";
```

The type of the schema, which is always "string".

#### Overrides

`BasicSchema.type`


# Overview
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/overview



## Introduction

The @intuned/sdk is automatically installed in each new Intuned project, providing a robust set of tools to facilitate browser automation.

## Namespaces and Functions

The library is organized into various namespaces, each exposing a specific set of functions designed to address different aspects of browser automation:

* `@intuned/sdk/ai-extractors`: Utilities for data and markdown extractions using AI.
* `@intuned/sdk/optimized-extractors`: Tools for building and running web extractors reliably at scale.
* `@intuned/sdk/playwright`: Additional helpers built on top of Playwright for simplifying common automation patterns.
* `@intuned/sdk/runtime`: Functions related to the Intuned runtime environment.
* `@intuned/sdk/files`: Utilities to facilitate file handling within automation projects.

## AI Credits Usage

Some functions within the @intuned/sdk consume AI credits. This usage is expected, and users should plan accordingly. To manage and limit credit expenditure, you can use labels to control and monitor the usage effectively.

## Use outside Intuned

The @intuned/sdk is designed to be used within the Intuned platform. [Let us know](/docs/support/contact-us) if you have a use case to use it outside of Intuned.


# extendPlaywrightPage
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/functions/extendPlaywrightPage



```typescript
function extendPlaywrightPage(page): ExtendedPlaywrightPage
```

Extends a Playwright Page with additional functionalities from intuned, like ai powered data extraction and and actions helpers like fillform.

## Examples

<CodeGroup>
  ```typescript extendPlaywrightPage
  import { BrowserContext, Page } from "@intuned/playwright-core";
  import { extendPlaywrightPage } from "@intuned/sdk/playwright";

  interface Params {
      // Add your params here
  }

  export default async function handler(
      params: Params,
      _playwrightPage: Page,
      context: BrowserContext
  ) {
      const page = extendPlaywrightPage(_playwrightPage);
      const pageMarkdown = await page.extractMarkdown()

      return pageMarkdown
  }
  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page to extend.

## Returns

[`ExtendedPlaywrightPage`](/automation-sdks/intuned-sdk/playwright/interfaces/ExtendedPlaywrightPage)

An extended Page with additional functionalities.


# extractArrayFromPageUsingSelectors
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/functions/extractArrayFromPageUsingSelectors



```typescript
function extractArrayFromPageUsingSelectors<T>(page, listExtractor): Promise<ExtractListObjectsUsingStaticSelectorsReturnType<T>>
```

Extracts a list of objects from a web page using the specified static selectors.

## Type parameters

• **T** *extends* [`ListStaticExtractor`](/automation-sdks/intuned-sdk/playwright/interfaces/ListStaticExtractor)

## Examples

<CodeGroup>
  ```typescript extractArrayFromPageUsingSelectors
   import { extractArrayFromPageUsingSelectors, goto } from "@intuned/sdk/playwright";

   await goto(page, 'https://books.toscrape.com/index.html');
   const books = await extractArrayFromPageUsingSelectors(page, {
     containerSelector: {
       selector: '//*[@id="default"]/div/div/div/div/section/div[2]/ol',
       type: "xpath"
     },
     propertySelectors: {
       name: {
         selector: "h3",
       },
       inStock: {
         selector: ".price_color",
       },
       imgUrl: {
         selector: "article > div.image_container > a > img",
         selectionMethod: {
           propertyName: "src"
         }
       }
     }
   })

   console.log(books)

   // output:
   // [
   //   {
   //   name: 'A Light in the ...',
   //   inStock: '£51.77',
   //   imgUrl: 'media/cache/2c/da/2cdad67c44b002e7ead0cc35693c0e8b.jpg'
   // },
   // {
   //   name: 'Tipping the Velvet',
   //   inStock: '£53.74',
   //   imgUrl: 'media/cache/26/0c/260c6ae16bce31c8f8c95daddd9f4a1c.jpg'
   // },
   // {
   //   name: 'Soumission',
   //   inStock: '£50.10',
   //   imgUrl: 'media/cache/3e/ef/3eef99c9d9adef34639f510662022830.jpg'
   // },
   //   {
   //     name: 'Sharp Objects',
   //     inStock: '£47.82',
   //     imgUrl: 'media/cache/32/51/3251cf3a3412f53f339e42cac2134093.jpg'
   //   },
   //   ...
   // ]

  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page object from which to extract the data.

• **listExtractor**: `T`

The list static extractor with the selectors to use.

## Returns

`Promise`\<[`ExtractListObjectsUsingStaticSelectorsReturnType`](/automation-sdks/intuned-sdk/playwright/type-aliases/ExtractListObjectsUsingStaticSelectorsReturnType)\<`T`>>

A promise that resolves to the extracted list of objects.


# extractObjectFromPageUsingSelectors
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/functions/extractObjectFromPageUsingSelectors



```typescript
function extractObjectFromPageUsingSelectors<T>(page, extractor): Promise<ExtractObjectFromPageUsingSelectorsReturnType<T>>
```

Extracts an object from a web page using the specified selectors.

## Type parameters

• **T** *extends* [`ObjectExtractor`](/automation-sdks/intuned-sdk/playwright/type-aliases/ObjectExtractor)

## Examples

<CodeGroup>
  ```typescript extractObjectFromPageUsingSelectors
   import { extractObjectFromPageUsingSelectors, goto } from "@intuned/sdk/playwright";

   await goto(page, 'https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html');
   const book = await extractObjectFromPageUsingSelectors(page, {
     name: {
       selector: "h1",
       selectionMethod: "all-text"
     },
     inStock: {
       selector: ".price_color",
     },
     imgUrl: {
       selector: "#product_gallery > div > div > div > img",
       selectionMethod: {
         propertyName: "src"
       }
     }
   })

   console.log(book)

   // output:
   // {
   //   name: 'A Light in the Attic',
   //   inStock: '£51.77',
   //   imgUrl: '../../media/cache/fe/72/fe72f0532301ec28892ae79a629a293c.jpg'
   // }

  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page object from which to extract the data.

• **extractor**: `T`

The object extractor with the selectors to use.

## Returns

`Promise`\<[`ExtractObjectFromPageUsingSelectorsReturnType`](/automation-sdks/intuned-sdk/playwright/type-aliases/ExtractObjectFromPageUsingSelectorsReturnType)\<`T`>>

A promise that resolves to the extracted object.


# fillForm
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/functions/fillForm



```typescript
function fillForm(page, options): Promise<boolean>
```

Fills a form on a web page with specified inputs and submits the form. the function handles static data, and can derive data using ai using your input.
the function has the ability to detect form submission errors and use ai to recover from these errors.

## Examples

<CodeGroup>
  ```typescript fillForm
  import { BrowserContext, Locator, Page } from "@intuned/playwright-core";
  import { FormInputItem, extendPlaywrightPage } from "@intuned/sdk/playwright";

  export interface Input {
      firstName: string;
      lastName: string;
      address1: string;
      address2: string;
      city: string;
      state: string;
      zip: string;
      country: string;
      nameOnCard: string;
      cardNumber: string;
      expiration: string;
      cvv: string;
      saveAddress: boolean;
  }

  export default async function handler(
      params: Input,
      _playwrightPage: Page,
      context: BrowserContext
  ) {

      const page = extendPlaywrightPage(_playwrightPage);
      await page.goto("https://demo-site-eta.vercel.app/steps-form/ShippingAddress");

      const fields: FormInputItem[] = [
          {
              fieldSelector: {
                  selector: "[name='firstName']",
                  type: "css",
              },
              value: { type: "static", value: params.firstName },
              fieldType: "text-input",
          },
          {
              fieldSelector: {
                  selector: "[name='lastName']",
                  type: "css",
              },
              value: { type: "static", value: params.lastName },
              fieldType: "text-input",
          },
          {
              fieldSelector: {
                  selector: "[name='addressLine1']",
                  type: "css",
              },
              value: { type: "static", value: params.address1 },
              fieldType: "text-input",
          },
          {
              fieldSelector: {
                  selector: "[name='addressLine2']",
                  type: "css",
              },
              value: { type: "static", value: params.address2 },
              fieldType: "text-input",
          },
          {
              fieldSelector: {
                  selector: "[name='city']",
                  type: "css",
              },
              value: { type: "static", value: params.city },
              fieldType: "text-input",
          },
          {
              fieldSelector: {
                  selector: "[name='state']",
                  type: "css",
              },
              value: { type: "static", value: params.state },
              fieldType: "text-input",
          },
          {
              fieldSelector: {
                  selector: "[name='zipCode']",
                  type: "css",
              },
              value: { type: "static", value: params.zip },
              fieldType: "text-input",
          },
          {
              fieldSelector: {
                  selector: "[name='country']",
                  type: "css",
              },
              value: { type: "dynamic", source: { country: params.country } },
              fieldType: "select",
          },
          {
              fieldSelector: {
                  selector: "[name='futurePurchase']",
                  type: "css",
              },
              fieldType: "checkbox",
              value: { type: "static", value: true },
          },
      ];

      const didFormSucceed = async (locator: Locator): Promise<boolean> => {
          return (await locator.page().locator(".error-message").count()) === 0
      };

      async function formSubmit(locator: Locator) {
          const nextButtonLocator = locator.page().getByRole("button", { name: "Next" });
          await nextButtonLocator.waitFor({ state: "visible" });
          await nextButtonLocator.click();
      }

      await page.fillForm({
          formLocator: page.locator("main"),
          formInput: fields,
          isSubmitSuccessful: didFormSucceed,
          submitForm: formSubmit,
          autoRecoveryOptions: {
              enabled: true,
              recoveryData: params
          }
      });

      return {};
  }
  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright Page where the form is located.

• **options**

• **options.autoRecoveryOptions?**

Optional. Options for auto-recovery in case of form submission failure.

• **options.autoRecoveryOptions.enabled**: `boolean`

Whether auto-recovery is enabled

• **options.autoRecoveryOptions.fieldsToMask?**: [`ElementSelector`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector)\[]

Fields to mask during auto-recovery, use this if you do not want to send your form values to ai.

• **options.autoRecoveryOptions.generateDataToUnblockForm?**

• **options.autoRecoveryOptions.generateDataToUnblockForm.enabled**: `boolean`

Whether generating data to unblock the form is enabled.

• **options.autoRecoveryOptions.generateDataToUnblockForm.prompt**: `string`

The prompt to use for generating data.

• **options.autoRecoveryOptions.maxRetries?**: `number`

Maximum number of retries for auto-recovery

• **options.autoRecoveryOptions.recoveryData**: `object`

Data to use for auto-recovery

• **options.fillFieldTimeout?**: `number`

Optional. Timeout for filling each individual field.

• **options.formInput**: ([`DynamicFormInputItem`](/automation-sdks/intuned-sdk/playwright/interfaces/DynamicFormInputItem) | [`StaticFormInputItem`](/automation-sdks/intuned-sdk/playwright/interfaces/StaticFormInputItem))\[]

An array of form input items (dynamic or static).

• **options.formLocator**: `Locator` | [`ElementSelector`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector)

The locator for the form element.

• **options.isSubmitSuccessful**

A function to check if the form submission was successful.

• **options.submitForm**

A function to submit the form.

• **options.timeout?**: `number`

Optional. Timeout for the entire form filling process.

• **options.waitTimeBetweenFill?**: `number`

Optional. Wait time between filling each field.

## Returns

`Promise`\<`boolean`>

A promise that resolves to a boolean indicating whether the form submission was successful.


# goto
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/functions/goto



```typescript
function goto(
   page, 
   url, 
options?): ReturnType<Page["goto"]>
```

Navigates to a specified URL on the provided playwright page.

## Examples

<CodeGroup>
  ```typescript without options
  import { goto } from "@intuned/sdk/playwright";

  await goto(page, 'https://example.com');

  ```

  ```typescript with options
   import { goto } from "@intuned/sdk/playwright";

   await goto(page, 'https://example.com', {
     waitUntil: "load",
     throwOnTimeout: true,
     timeout: 10_000
   });
  ```
</CodeGroup>

## Parameters

• **page**: `Page`

The Playwright page object to navigate.

• **url**: `string`

The URL to navigate to.

• **options?**

• **options.referer?**: `string`

Referer header value. If provided, it will take preference over the referer header value set by `page.setExtraHTTPHeaders(headers)`.

• **options.throwOnTimeout?**: `boolean`

Whether to throw if the `page.goto` times out. By default, it ignores the error.

• **options.timeout?**: `number`

Maximum operation time in milliseconds. Defaults to `0` (no timeout). This can be configured via various timeout settings on the page or browser context.

• **options.waitUntil?**: `"load"` | `"domcontentloaded"` | `"networkidle"` | `"commit"`

When to consider the operation succeeded. Defaults to `networkidle` (playwright default to `load`).

## Returns

`ReturnType`\<`Page`\[`"goto"`]>

* A promise that resolves to the response of the navigation, or null if no response was received.


# DynamicFormInputItem
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/interfaces/DynamicFormInputItem



\--

## Properties

### fieldSelector

```typescript
fieldSelector: ElementSelector;
```

The selector for the form field.

***

### fieldType

```typescript
fieldType: InputFieldType;
```

The type of the input field, supported types are: `text-input` `select` `checkbox` `radiogroup` `submit-button` `auto-complete`

***

### value

```typescript
value: object;
```

#### source

```typescript
source: string | object;
```

#### type

```typescript
type: "dynamic";
```


# ElementSelector
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector



\--

## Extended by

* [`ValueSelector`](/automation-sdks/intuned-sdk/playwright/interfaces/ValueSelector)

## Properties

### selector

```typescript
selector: string;
```

The selector string for the element.

***

### type?

```typescript
optional type: "css" | "xpath";
```

Optional. The type of the selector (xpath or css) default is `css`


# ExtendedPlaywrightPage
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/interfaces/ExtendedPlaywrightPage



## Extends

* `Page`

## Properties

### extractArrayOptimized()

```typescript
extractArrayOptimized: (options) => Promise<Record<string, string>[]>;
```

an alias for [extractArrayFromPage](/automation-sdks/runtime-sdk/optimized-extractors/functions/extractArrayFromPage) function

#### Parameters

• **options**

• **options.itemEntityName**: `string`

• **options.itemEntitySchema**: `SimpleArrayItemSchema`

• **options.label**: `string`

• **options.optionalPropertiesInvalidator?**

• **options.prompt?**: `string`

• **options.strategy?**: `ImageStrategy` | `HtmlStrategy`

• **options.variantKey?**: `string`

#### Returns

`Promise`\<`Record`\<`string`, `string`>\[]>

***

### extractArrayUsingSelectors()

```typescript
extractArrayUsingSelectors: <T>(extractor) => Promise<ExtractListObjectsUsingStaticSelectorsReturnType<T>>;
```

an alias for [extractArrayFromPageUsingSelectors](/automation-sdks/runtime-sdk/playwright/functions/extractArrayFromPageUsingSelectors) function

#### Type parameters

• **T** *extends* [`ListStaticExtractor`](/automation-sdks/intuned-sdk/playwright/interfaces/ListStaticExtractor)

#### Parameters

• **extractor**: `T`

#### Returns

`Promise`\<[`ExtractListObjectsUsingStaticSelectorsReturnType`](/automation-sdks/intuned-sdk/playwright/type-aliases/ExtractListObjectsUsingStaticSelectorsReturnType)\<`T`>>

***

### extractMarkdown()

```typescript
extractMarkdown: () => Promise<string>;
```

an alias for [extractMarkdownFromPage](/automation-sdks/runtime-sdk/ai-extractors/functions/extractMarkdownFromPage) function

#### Returns

`Promise`\<`string`>

***

### extractObjectOptimized()

```typescript
extractObjectOptimized: (options) => Promise<null | Record<string, null | string>>;
```

an alias for [extractObjectFromPage](/automation-sdks/runtime-sdk/optimized-extractors/functions/extractObjectFromPage) function

#### Parameters

• **options**

• **options.entityName**: `string`

• **options.entitySchema**: `SimpleObjectSchema`

• **options.label**: `string`

• **options.optionalPropertiesInvalidator?**

• **options.prompt?**: `string`

• **options.strategy?**: `ImageStrategy` | `HtmlStrategy`

• **options.variantKey?**: `string`

#### Returns

`Promise`\<`null` | `Record`\<`string`, `null` | `string`>>

***

### extractObjectUsingSelectors()

```typescript
extractObjectUsingSelectors: <T>(extractor) => Promise<ExtractObjectFromPageUsingSelectorsReturnType<T>>;
```

an alias for [extractObjectFromPageUsingSelectors](/automation-sdks/runtime-sdk/playwright/functions/extractObjectFromPageUsingSelectors) function

#### Type parameters

• **T** *extends* [`ObjectExtractor`](/automation-sdks/intuned-sdk/playwright/type-aliases/ObjectExtractor)

#### Parameters

• **extractor**: `T`

#### Returns

`Promise`\<[`ExtractObjectFromPageUsingSelectorsReturnType`](/automation-sdks/intuned-sdk/playwright/type-aliases/ExtractObjectFromPageUsingSelectorsReturnType)\<`T`>>

***

### extractStructuredData()

```typescript
extractStructuredData: (options) => Promise<any>;
```

an alias for [extractStructuredDataFromPage](/automation-sdks/runtime-sdk/ai-extractors/functions/extractStructuredDataFromPage) function

#### Parameters

• **options**

• **options.dataSchema**: `JsonSchema`

• **options.label**: `string`

• **options.prompt?**: `string`

• **options.strategy?**: `ImageStrategy` | `HtmlStrategy`

#### Returns

`Promise`\<`any`>

***

### fillForm()

```typescript
fillForm: (options) => Promise<boolean>;
```

an alias for [fillForm](/automation-sdks/runtime-sdk/playwright/functions/fillForm) function

#### Parameters

• **options**

• **options.autoRecoveryOptions?**

• **options.autoRecoveryOptions.enabled**: `boolean`

Whether auto-recovery is enabled

• **options.autoRecoveryOptions.fieldsToMask?**: [`ElementSelector`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector)\[]

Fields to mask during auto-recovery, use this if you do not want to send your form values to ai.

• **options.autoRecoveryOptions.generateDataToUnblockForm?**

• **options.autoRecoveryOptions.generateDataToUnblockForm.enabled**: `boolean`

Whether generating data to unblock the form is enabled.

• **options.autoRecoveryOptions.generateDataToUnblockForm.prompt**: `string`

The prompt to use for generating data.

• **options.autoRecoveryOptions.maxRetries?**: `number`

Maximum number of retries for auto-recovery

• **options.autoRecoveryOptions.recoveryData**: `object`

Data to use for auto-recovery

• **options.fillFieldTimeout?**: `number`

• **options.formInput**: ([`DynamicFormInputItem`](/automation-sdks/intuned-sdk/playwright/interfaces/DynamicFormInputItem) | [`StaticFormInputItem`](/automation-sdks/intuned-sdk/playwright/interfaces/StaticFormInputItem))\[]

• **options.formLocator**: `Locator` | [`ElementSelector`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector)

• **options.isSubmitSuccessful**

• **options.submitForm**

• **options.timeout?**: `number`

• **options.waitTimeBetweenFill?**: `number`

#### Returns

`Promise`\<`boolean`>

***

### goto()

```typescript
goto: (url, options?) => Promise<null | Response>;
```

an alias for [extractStructuredDataFromPage](/automation-sdks/runtime-sdk/ai-extractors/functions/extractStructuredDataFromPage) function

#### Parameters

• **url**: `string`

• **options?**

• **options.referer?**: `string`

• **options.throwOnTimeout?**: `boolean`

• **options.timeout?**: `number`

• **options.waitUntil?**: `"load"` | `"domcontentloaded"` | `"networkidle"` | `"commit"`

#### Returns

`Promise`\<`null` | `Response`>

#### Overrides

`Page.goto`


# ListStaticExtractor
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/interfaces/ListStaticExtractor



\--

## Properties

### containerSelector

```typescript
containerSelector: ElementSelector | ElementSelector[];
```

The selector(s) for the container elements of the list, all list items should be direct children of this container.

***

### propertySelectors

```typescript
propertySelectors: Record<string, ValueSelector | ValueSelector[]>;
```

The selectors for the properties to extract. the values of the selector should be relative to the list item.

**example:** if the list was:

```html
<ul>
<li>
 <div class="title">title 1</div>
 <div class="price">price 1</div>
</li>
<li>
 <div class="title">title 2</div>
 <div class="price">price 2</div>
</li>
</ul>
```

the css relative selectors should be:

title -> `.title`

price -> `.price`


# StaticFormInputItem
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/interfaces/StaticFormInputItem



\--

## Properties

### fieldSelector

```typescript
fieldSelector: ElementSelector;
```

The selector for the form field.

***

### fieldType

```typescript
fieldType: InputFieldType;
```

The type of the input field, supported types are: `text-input` `select` `checkbox` `radiogroup` `submit-button` `auto-complete`

***

### value

```typescript
value: object;
```

#### type

```typescript
type: "static";
```

#### value

```typescript
value: string | number | boolean;
```


# ValueSelector
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/interfaces/ValueSelector



represents a dom element selector and the method to extract the value from the element.

## Extends

* [`ElementSelector`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector)

## Properties

### multiValue?

```typescript
optional multiValue: boolean;
```

Optional. Whether the selector extracts multiple values, if set to true the returned value will be array of strings

***

### regex?

```typescript
optional regex: object;
```

Optional. A regex pattern and match index for extracting the value.

#### matchIndex?

```typescript
optional matchIndex: number;
```

#### pattern

```typescript
pattern: string;
```

***

### selectionMethod?

```typescript
optional selectionMethod: object | "direct-text" | "all-text";
```

Optional. The method for selecting the value. `all-text` selects all text content, `direct-text` selects the direct text content(does not include the text inside nested elements), and `propertyName` selects the value of a property.

***

### selector

```typescript
selector: string;
```

The selector string for the element.

#### Inherited from

[`ElementSelector`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector).[`selector`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector#selector)

***

### type?

```typescript
optional type: "css" | "xpath";
```

Optional. The type of the selector (xpath or css) default is `css`

#### Inherited from

[`ElementSelector`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector).[`type`](/automation-sdks/intuned-sdk/playwright/interfaces/ElementSelector#type)


# ExtractListObjectsUsingStaticSelectorsReturnType
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/type-aliases/ExtractListObjectsUsingStaticSelectorsReturnType



```typescript
type ExtractListObjectsUsingStaticSelectorsReturnType<T>: { [K in keyof T["propertySelectors"]]: T["propertySelectors"][K] extends Object ? string[] | null : string | null }[];
```

## Type parameters

• **T** *extends* [`ListStaticExtractor`](/automation-sdks/intuned-sdk/playwright/interfaces/ListStaticExtractor)


# ExtractObjectFromPageUsingSelectorsReturnType
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/type-aliases/ExtractObjectFromPageUsingSelectorsReturnType



```typescript
type ExtractObjectFromPageUsingSelectorsReturnType<T>: { [K in keyof T]: T[K] extends Object ? string[] | null : string | null };
```

## Type parameters

• **T** *extends* [`ObjectExtractor`](/automation-sdks/intuned-sdk/playwright/type-aliases/ObjectExtractor)


# InputFieldType
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/type-aliases/InputFieldType



```typescript
type InputFieldType: 
  | "text-input"
  | "select"
  | "checkbox"
  | "radiogroup"
  | "submit-button"
  | "auto-complete";
```


# ObjectExtractor
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/playwright/type-aliases/ObjectExtractor



```typescript
type ObjectExtractor: Record<string, ValueSelector | ValueSelector[]>;
```

a record or property name and the value selector to extract the value from the page.
you can provide a list of `ValueSelector` to provide a backup selector in case the first one fails.
the primary selector is the first one in the list.


# RunError
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/runtime/classes/RunError



Represents an error that occurs during a run.

## Param

The error message.

## Param

Optional. Additional options for the error.

## Examples

<CodeGroup>
  ```typescript RunError
  import { RunError } from "@intuned/sdk/runtime"

  throw new RunError('An error occurred', {
    retryable: true,
    status_code: 500,
    error_code: 'SERVER_ERROR'
  });

  ```
</CodeGroup>

## Extends

* `Error`

## Constructors

### new RunError()

```typescript
new RunError(message, options?): RunError
```

#### Parameters

• **message**: `string`

• **options?**: [`RunErrorOptions`](/automation-sdks/intuned-sdk/runtime/interfaces/RunErrorOptions)

#### Returns

[`RunError`](/automation-sdks/intuned-sdk/runtime/classes/RunError)

#### Overrides

`Error.constructor`

## Properties

### options

```typescript
options: RunErrorOptions;
```

The options associated with the error.


# extendPayload
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/runtime/functions/extendPayload



```typescript
function extendPayload(payload): void
```

## Description

In the context of a job or queue execution, extendPayload appends new payloads to the end of the queue of job.

## Examples

<CodeGroup>
  ```typescript Single payload
  import { extendPayload } from "@intuned/sdk/runtime"

  // this function will append the exampleApi to the end of the queue or job it's executing in.
  extendPayload({ api: 'exampleApi', parameters: { key: 'value' } });
  ```

  ```typescript Array of payloads
  import { extendPayload } from "@intuned/sdk/runtime"

  const payloadArray: Payload[] = [
    { api: 'exampleApi1', parameters: { key1: 'value1' } },
    { api: 'exampleApi2', parameters: { key2: 'value2' } }
  ];

  // this function will append 2 apis to the end of the queue or job it's executing in.
  extendPayload(payloadArray);
  ```
</CodeGroup>

## Parameters

• **payload**: [`Payload`](/automation-sdks/intuned-sdk/runtime/interfaces/Payload) | [`Payload`](/automation-sdks/intuned-sdk/runtime/interfaces/Payload)\[]

The payload or array of payloads to extend. you can specify the api name and what parameters you want to pass it, the new added apis will use the same proxy and auth-session settings as the api that extended them

## Returns

`void`


# requestMultipleChoice
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/runtime/functions/requestMultipleChoice



```typescript
function requestMultipleChoice(message, choices): unknown
```

in the create auth session flow, you might to need a multiple choice answer from the user, requestMultipleChoice prompts the user with the question and possible options and returns their selection.

**Note:** This function is currently in beta and may be subject to changes.

## Examples

<CodeGroup>
  ```typescript requestMultipleChoice
  // in auth-sessions/create.ts

  import { requestMultipleChoice } from "@intuned/sdk/runtime"

  const message = "What is your favorite color?";
  const choices = ["Red", "Blue", "Green", "Yellow"];

  const selectedChoice = yield requestMultipleChoice(message, choices);

  console.log(selectedChoice);
  ```
</CodeGroup>

## Parameters

• **message**: `string`

The message to display to the user.

• **choices**: `string`\[]

An array of choices to present to the user.

## Returns

`unknown`


# requestOTP
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/runtime/functions/requestOTP



```typescript
function requestOTP(message): unknown
```

**Note:** This function is currently in beta and may be subject to changes.

requestOTP help you to ask the user for an otp in the create auth-session flow.

## Examples

<CodeGroup>
  ```typescript requestOTP
  // in auth-sessions/create.ts

  import { requestOTP } from "@intuned/sdk/runtime"

  const message = "please submit and OTP from your authenticator app";

  const otp = yield requestOTP(message);

  console.log(otp);
  ```
</CodeGroup>

## Parameters

• **message**: `string`

The message to display to the user.

## Returns

`unknown`


# runInfo
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/runtime/functions/runInfo



```typescript
function runInfo(): RunInfo
```

Retrieves information about the current run environment.

## Examples

<CodeGroup>
  ```typescript runInfo
  import { runInfo } from "@intuned/sdk/runtime"

  const info = runInfo();
  console.log(info.runEnvironment); // Outputs the run environment, IDE or DEPLOYED
  console.log(info.runId); // Outputs the run ID, if available, in IDE run id will be undefined
  ```
</CodeGroup>

## Returns

[`RunInfo`](/automation-sdks/intuned-sdk/runtime/interfaces/RunInfo)

An object containing details about the run environment and the run ID.


# Payload
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/runtime/interfaces/Payload



Payload

## Examples

<CodeGroup>
  ```typescript payload
  import { Payload } from "@intuned/sdk/runtime"

  const payload: Payload = {
    api: 'exampleApi',
    parameters: {
      key1: 'value1',
      key2: 'value2'
    }
  };
  ```
</CodeGroup>

## Properties

### api

```typescript
api: string;
```

The API path you want to extend.

***

### parameters

```typescript
parameters: Record<string, any>;
```

A record of key-value pairs representing the parameters to be sent to the API


# RunErrorOptions
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/runtime/interfaces/RunErrorOptions



RunErrorOptions

## Examples

<CodeGroup>
  ```typescript RunErrorOptions
  import { RunErrorOptions } from "@intuned/sdk/runtime"

  const options: RunErrorOptions = {
    retryable: true,
    status_code: 500,
    error_code: 'SERVER_ERROR'
  };
  ```
</CodeGroup>

## Properties

### error\_code?

```typescript
optional error_code: string;
```

Optional. A specific error code to identify the type of error.

***

### retryable?

```typescript
optional retryable: boolean;
```

Optional. Indicates whether the error is retryable.

***

### status\_code?

```typescript
optional status_code: number;
```

Optional. The HTTP status code associated with the error.


# RunInfo
Source: https://docs.intunedhq.com/automation-sdks/intuned-sdk/runtime/interfaces/RunInfo



Represents information about the current run.

RunInfo

## Properties

### runEnvironment

```typescript
runEnvironment: RunEnvironment;
```

the run environment `IDE` or `DEPLOYED`

***

### runId?

```typescript
optional runId: string;
```

Optional. The ID of the current run, in IDE environment, run id will be undefined


# Overview
Source: https://docs.intunedhq.com/automation-sdks/overview



## Introduction

Intuned's browser automations are code-based, utilizing the [Playwright](https://playwright.dev/) framework as the underlying technology. Playwright is a Node.js library that enables browser automation through a single API. If you are looking to perform browser automation using Playwright, Intuned is an excellent platform to facilitate that.

## `@intuned/sdk`

Intuned also provides the @intuned/sdk, a library built on top of Playwright, extending its capabilities by offering powerful helpers designed for common browser automation tasks. The @intuned/sdk enhances Playwright by making automation tasks more reliable and easier to implement.

### Namespaces of `@intuned/sdk`

The [@intuned/sdk](./intuned-sdk) is organized into several namespaces, each tailored for specific functionalities:

* `@intuned/sdk/ai-extractors`: Provides powerful utilities for data and markdown extractions using AI.

* `@intuned/sdk/optimized-extractors`: Enables the creation and execution of web extractors that are reliable and scalable.

* `@intuned/sdk/playwright`: Offers additional helpers on top of Playwright to simplify common automation patterns.

* `@intuned/sdk/runtime`: Includes helpers related to the Intuned runtime environment.

* `@intuned/sdk/files`: Contains utilities to facilitate working with files.

### Leveraging AI for Enhanced Reliability

The Intuned SDK heavily utilizes AI, with many functions aimed at improving the reliability of browser automation tasks. This focus on AI helps make automation processes more robust and easier to develop.

## Learning Resources

### Using Playwright

If you are new to Playwright or want to deepen your understanding of how to use it for browser automation, we provide an overview in the [Playwright section](./playwright/overview).

### Detailed Documentation for @intuned/sdk

For comprehensive information on using the @intuned/sdk, including detailed documentation on the various namespaces and their helpers, refer to the section [@intuned/sdk](./intuned-sdk). This section covers everything you need to know about the SDK and how to leverage it for your automation tasks.


# Playwright Overview
Source: https://docs.intunedhq.com/automation-sdks/playwright/overview

Learn about using playwright for browser automation

<Info> We are improving our docs! This document will be updated soon.</Info>

Here are some resources to help you get started with Playwright:

* Learn about Input API: [Playwright Input](https://playwright.dev/docs/input)
* Learn about Locators: [Playwright Locators](https://playwright.dev/docs/locators) and  [Playwright Other Locators](https://playwright.dev/docs/other-locators)
* Learn about AutoWaiting: [Playwright AutoWaiting](https://playwright.dev/docs/actionability)
* Learn about Evaluating JavaScript: [Playwright Evaluating](https://playwright.dev/docs/evaluating)


# Auth Sessions Overview
Source: https://docs.intunedhq.com/client-apis/api-reference/auth-sessions-overview

Learn how to create and manage auth sessions for your projects.

## Introduction

To learn more about auth sessions, checkout the in depth explanation on [Authentication Sessions](/docs/auth-sessions/overview).

### API reference

* [Create cred based auth session](./projectauthsessionscreate/create-auth-session--start.mdx)
* [Record auth session](./projectauthsessionsrecorder/start-recorder-session-for-an-auth-session.mdx)
* [Update auth session](./projectauthsessionsupdate/update-auth-session--start.mdx)
* [Get auth session](./projectauthsessions/get-auth-session.mdx)
* [Get auth sessions](./projectauthsessions/get-auth-sessions.mdx)
* [Delete auth session](./projectauthsessions/delete-auth-session.mdx)


# Standalone File API Overview
Source: https://docs.intunedhq.com/client-apis/api-reference/files-overview

Learn how to use the Standalone File API to process files without a project.

## Introduction

The standalone APIs allow you to process PDF and image files without consuming a project. We currently provide 3 operations:

1. **Extract structured data**: Extract strucutred data from the file following a [JSONSchema](https://json-schema.org/).
2. **Extract markdown**: Extract markdown from the file, including headers, paragraphs, lists and tables.
3. **Extract tables**: Extract tables from the file in JSON format.

There are two ways to consume these APIs: synchronously and asynchronously. In synchronous calls, the result is returned in the same call. In asynchronous calls, the result is returned in a separate call using an `operationId` obtained in the initial call.

## Sync vs Async APIs

Each of the operations listed above is available via a Sync API and an Async API. In Sync APIs, you make a single call which triggers the operation and returns the result. In Async APIs, you make two calls: the first call triggers the operation and returns an `operationId`, and the second call uses the `operationId` to check the status and get the result.

<Note>
  Depending on the input, the call might take a long time to complete, especially if the file is large or the operation is complex. If the API is taking too long, the request might time out before the file processing is finished. For this reason, we recommend using the Asynchronous API for most use cases.
</Note>

<Note>
  The Sync API is limited to 10 requests per minute per operation. If you need a higher rate limit, [contact us](/docs/support/contact-us).
</Note>

## Supported file formats

We currently support pdf files and image files. We will be working on supporting other formats soon. [Contact us](/docs/support/contact-us) if you have any specific requirements.

In PDF files, you can specify the page numbers to run processing on. If no page numbers are specified, the operation will run on all pages. [Check out the API reference](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--sync) for more information.

## Extract structured data API

This API allows you to extract data from a file following a JSONSchema. This is useful when you have a document with a known data structure that you want to extract, such as a contract document.

### API reference

* [Sync API](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--sync)
* [Async Start API](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--async-start)
* [Async Result API](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--async-result)

## Extract markdown API

This API allows you to extract markdown from the file, including headers, paragraphs, lists, tables and links. The output is human-readable and can be used for further processing or display.

### API reference

* [Sync API](/client-apis/api-reference/filesextractstructureddata/extract-markdown--sync)
* [Async Start API](/client-apis/api-reference/filesextractstructureddata/extract-markdown--async-start)
* [Async Result API](/client-apis/api-reference/filesextractstructureddata/extract-markdown--async-result)

## Extract tables API

This API allows you to extract tables from the file in JSON format. This is useful when you have a document with tabular data that you want to extract and process further. The result is an array of tables, each table including the page number, title (if any), and the table data.

### API reference

* [Sync API](/client-apis/api-reference/filesextractstructureddata/extract-tables--sync)
* [Async Start API](/client-apis/api-reference/filesextractstructureddata/extract-tables--async-start)
* [Async Result API](/client-apis/api-reference/filesextractstructureddata/extract-tables--async-result)


# Extract Markdown - Async Result
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextractmarkdown/extract-markdown--async-result

get /{workspaceId}/files/extract/markdown/{operationId}/result
Gets the result of the markdown extraction operation using the operation ID.



# Extract Markdown - Async Start
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextractmarkdown/extract-markdown--async-start

post /{workspaceId}/files/extract/markdown/start
Starts an asynchronous operation to extract markdown from a file. Supported file types are image, pdf (more coming soon!). 
This methods accepts the file.
The API responds with an ID to track the operation status and retrieve the result.



# Extract Markdown - Sync
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextractmarkdown/extract-markdown--sync

post /{workspaceId}/files/extract/markdown
Extracts markdown from a file. Supported file types are image, pdf (more coming soon!). 
It accepts the file.



# Extract Structured Data - Async Result
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextractstructureddata/extract-structured-data--async-result

get /{workspaceId}/files/extract/structuredData/{operationId}/result
Gets the result of the structured data extraction operation using the operation ID.



# Extract Structured Data - Async Start
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextractstructureddata/extract-structured-data--async-start

post /{workspaceId}/files/extract/structuredData/start
Starts an asynchronous operation to extract structured data from a file. Supported file types are image, pdf (more coming soon!). 
It accepts the file and requested schema for the data to be extracted.
It responds with an ID to track the operation status and retrieve the result.



# Extract Structured Data - Sync
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextractstructureddata/extract-structured-data--sync

post /{workspaceId}/files/extract/structuredData
Extracts structured data from a file. Supported file types are image, pdf (more coming soon!). 
It accepts the file and requested schema for the data to be extracted.



# Extract Tables - Async Result
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextracttables/extract-tables--async-result

get /{workspaceId}/files/extract/tables/{operationId}/result
Gets the result of the tables extraction operation using the operation ID.



# Extract Tables - Async Start
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextracttables/extract-tables--async-start

post /{workspaceId}/files/extract/tables/start
Starts an asynchronous operation to extract tables from a file. Supported file types are image, pdf (more coming soon!). 
This methods accepts the file.
The API responds with an ID to track the operation status and retrieve the result.



# Extract Tables - Sync
Source: https://docs.intunedhq.com/client-apis/api-reference/filesextracttables/extract-tables--sync

post /{workspaceId}/files/extract/tables
Extracts tables from a file. Supported file types are image, pdf (more coming soon!). 
It accepts the file.



# Project Consumption APIs Overview
Source: https://docs.intunedhq.com/client-apis/api-reference/project-consumption-overview



## Introduction

To use the browser automations, scrapers and integrations that are created on the Intuned Platform, we expose a set of APIs that allow you to consume your projects in different ways.

## Run API

The Run API is the simplest way to consume your projects. It allows you to trigger single APIs in your projects and get the result back. There are two ways to use the run API:

1. Synchronously: Call the API and wait for the result in the same request.
2. Asynchronously: Start the API call and receive a run ID which you can use to check the status of the run and get the result.

More information on the Run API can be found [here](./run-overview).

## Job API

The Job API is a more advanced way to consume your projects. It allows you to create jobs that can run multiple APIs in your project.
Jobs allow you to:

* Configure advanced retry strategies such as exponential backoff.
* Run APIs concurrently.
* Sink the results of the APIs to a destination such as a webhook or an S3 bucket.
* Extend the API payloads to dynamically run other APIs.
* Schedule the job to run periodically.
* Pause and resume job execution and schedule.

More information on the Job API can be found [here](./projectjobs).

## Queue API

The Queue API allows you to consume your projects in an order-based manner. It allows you to queue up APIs to run on demand.
Queues allow you to:

* Queue up APIs to run on demand with guaranteed order.
* Configure APIs to queue up periodically.
* Sink the results of the APIs to a destination such as a webhook.
* Extend the API payloads to dynamically queue up other APIs.
* Impose rate limits for the queued up API runs.
* Configure periods which the queue can pause execution.
* Add random delays between API runs.

More information on the Queue API can be found [here](./queues-overview).


# Delete Auth Session
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessions/delete-auth-session

delete /{workspaceId}/projects/{projectName}/auth-sessions/{authSessionId}
Deletes an authentication session by ID.



# Get Auth Session
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessions/get-auth-session

get /{workspaceId}/projects/{projectName}/auth-sessions/{authSessionId}
Gets authentication session of project by ID



# Get Auth Sessions
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessions/get-auth-sessions

get /{workspaceId}/projects/{projectName}/auth-sessions
Gets all authentication sessions of project



# Create Auth Session - Result
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessionscreate/create-auth-session--result

get /{workspaceId}/projects/{projectName}/auth-sessions/create/{operationId}/result
Gets authentication session creation operation result.



# Create Auth Session -  Resume
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessionscreate/create-auth-session--resume

post /{workspaceId}/projects/{projectName}/auth-sessions/create/{operationId}/resume
Resume authentication session creation operation. This is needed if the operation requests more info.



# Create Auth Session - Start
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessionscreate/create-auth-session--start

post /{workspaceId}/projects/{projectName}/auth-sessions/create
Starts creation process of an authentication session for a project with the authentication session creation setting enabled.



# Start recorder session for an auth session
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessionsrecorder/start-recorder-session-for-an-auth-session

post /{workspaceId}/projects/{projectName}/auth-sessions/recorder/start
create a recording session for a specific auth session



# Update Auth Session - Result
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessionsupdate/update-auth-session--result

get /{workspaceId}/projects/{projectName}/auth-sessions/{authSessionId}/update/{operationId}/result
Gets authentication session creation operation result.



# Update Auth Session -  Resume
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessionsupdate/update-auth-session--resume

post /{workspaceId}/projects/{projectName}/auth-sessions/{authSessionId}/update/{operationId}/resume
Resume authentication session creation operation. This is needed if the operation requests more info.



# Update Auth Session - Start
Source: https://docs.intunedhq.com/client-apis/api-reference/projectauthsessionsupdate/update-auth-session--start

post /{workspaceId}/projects/{projectName}/auth-sessions/{authSessionId}/update
Starts updating process of an authentication session.



# Create Job
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobs/create-job

post /{workspaceId}/projects/{projectName}/jobs
Creates a new job for a project.



# Delete Job
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobs/delete-job

delete /{workspaceId}/projects/{projectName}/jobs/{jobId}
Deletes a job by ID.



# Get Job
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobs/get-job

get /{workspaceId}/projects/{projectName}/jobs/{jobId}
Gets a job in a project by ID.



# Get Jobs
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobs/get-jobs

get /{workspaceId}/projects/{projectName}/jobs
Gets all jobs in a project.



# Jobs API Overview
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobs/jobs-overview



## Overview

To learn more about jobs, checkout the in depth explanation on [Jobs](/docs/platform/consume/jobs).

## API reference

* [Create job](./create-job).
* [Get jobs](./get-jobs).
* [Get job](./get-job).
* [Delete job](./delete-job).
* [Pause job](./pause-job).
* [Resume job](./resume-job).
* [Trigger job](./trigger-job).


# Pause Job
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobs/pause-job

post /{workspaceId}/projects/{projectName}/jobs/{jobId}/pause
Pauses a job. Will pause any job runs and the job schedule if applicable.



# Resume Job
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobs/resume-job

post /{workspaceId}/projects/{projectName}/jobs/{jobId}/resume
Resumes a paused job. Will resume any paused job runs and the job schedule if applicable.



# Trigger Job
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobs/trigger-job

post /{workspaceId}/projects/{projectName}/jobs/{jobId}/trigger
Manually triggers a job run for a job. If the job is paused, the trigger fails.



# Get Job Run
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobsruns/get-job-run

get /{workspaceId}/projects/{projectName}/jobs/{jobId}/runs/{jobRunId}
Get information and results for a specific job run.



# Get Job Runs
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobsruns/get-job-runs

get /{workspaceId}/projects/{projectName}/jobs/{jobId}/runs
Get all job runs of a job.



# Terminate Job Run
Source: https://docs.intunedhq.com/client-apis/api-reference/projectjobsruns/terminate-job-run

post /{workspaceId}/projects/{projectName}/jobs/{jobId}/runs/{jobRunId}/terminate
Terminate a job run by ID.



# Create Queue
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueues/create-queue

post /{workspaceId}/projects/{projectName}/queues
Creates a new queue.



# Delete Queue
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueues/delete-queue

delete /{workspaceId}/projects/{projectName}/queues/{queueId}
Deletes a queue by ID.



# Get Queue
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueues/get-queue

get /{workspaceId}/projects/{projectName}/queues/{queueId}
Gets a queue in a project by ID.



# Get Queues
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueues/get-queues

get /{workspaceId}/projects/{projectName}/queues
Gets all queues in a project.



# Append Queue Item
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueuesitems/append-queue-item

post /{workspaceId}/projects/{projectName}/queues/{queueId}/items
Appends an item to the queue.



# Delete Queue item
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueuesitems/delete-queue-item

delete /{workspaceId}/projects/{projectName}/queues/{queueId}/items/{itemRunId}
Delete queued item. If the item is currently processing, the delete will fail.



# Get Queue Item result
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueuesitems/get-queue-item-result

get /{workspaceId}/projects/{projectName}/queues/{queueId}/items/{itemRunId}
Get queue item result.



# Append Queue Repeat Item
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueuesrepeatitems/append-queue-repeat-item

post /{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems
Creates and appends a repeatable item to the queue. Repeatable items will automatically re-append to the queue according to the repeat settings.



# Delete Queue Repeat Item
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueuesrepeatitems/delete-queue-repeat-item

delete /{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems/{itemId}
Deletes a repeatable item by ID. The item will no longer be re-appended to the queue.



# Get Queue Repeat Item
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueuesrepeatitems/get-queue-repeat-item

get /{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems/{itemId}
Gets a repeatable item from a queue by ID. The last execution result of the item is also returned.



# Get Queue Repeat Items
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueuesrepeatitems/get-queue-repeat-items

get /{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems
Gets all repeatable items of a queue.



# Update Queue Repeat Item
Source: https://docs.intunedhq.com/client-apis/api-reference/projectqueuesrepeatitems/update-queue-repeat-item

put /{workspaceId}/projects/{projectName}/queues/{queueId}/repeatItems/{itemId}
Updates the configurations of a repeatable item by ID.



# Run API - Async Result
Source: https://docs.intunedhq.com/client-apis/api-reference/projectrun/run-api--async-result

get /{workspaceId}/projects/{projectName}/run/{runId}/result
Retrieves the result of a started project API run operation.



# Run API - Async Start
Source: https://docs.intunedhq.com/client-apis/api-reference/projectrun/run-api--async-start

post /{workspaceId}/projects/{projectName}/run/start
Starts a project API run operation



# Run API - Sync
Source: https://docs.intunedhq.com/client-apis/api-reference/projectrun/run-api--sync

post /{workspaceId}/projects/{projectName}/run
Runs a project API synchronously.



# Queues API Overview
Source: https://docs.intunedhq.com/client-apis/api-reference/queues-overview



## Overview

To learn more about queues, checkout the in depth explanation on [Queues](/docs/platform/consume/queues).

### API reference

* [Create queue](./projectqueues/create-queue).
* [Get queues](./projectqueues/get-queues).
* [Get queue](./projectqueues/get-queue).
* [Delete queue](./projectqueues/delete-queue).
* [Append item](./projectqueuesitems/append-queue-item).
* [Delete item](./projectqueuesitems/delete-queue-item).
* [Get item result](./projectqueuesitems/get-queue-item-result).
* [Create repeatable item](./projectqueuesrepeatitems/append-queue-repeat-item).
* [Get repeatable items](./projectqueuesrepeatitems/get-queue-repeat-items).
* [Get repeatable item](./projectqueuesrepeatitems/get-queue-repeat-item).
* [Update repeatable item](./projectqueuesrepeatitems/update-queue-repeat-item).
* [Delete repeatable item](./projectqueuesrepeatitems/delete-queue-repeat-item).


# Run API
Source: https://docs.intunedhq.com/client-apis/api-reference/run-overview



## Introduction

The Run API is simplest way to consume your project APIs. You trigger a single API from your project, and then retrieve the results directly.

There are two ways to consume these APIs: synchronously and asynchronously. In synchronous calls, the result is returned in the same call. In asynchronous calls, the result is returned in a separate call using a `runId` obtained in the initial call.

## Synchronous API

The synchronous API (Sync API) is the simplest way to consume your project APIs. It allows you to trigger single APIs in your projects and get the result back in the same call.

In order to consume it, just call [**sync**](./projectrun/run-api--sync) with the API name, parameters and any other configurations.

<Note>
  Keep in mind that the project API run can take a long time to complete, especially (but not necessarily) if the implementation is complex and involves many steps. If the API is taking too long, the request might time out before the project API finishes running. For this reason, we recommend using the [Asynchronous API](#asynchronous-api) for most use cases.
</Note>

<Note>
  The synchronous API is limited to 10 requests per minute per project. If you need a higher rate limit, [contact us](/docs/support/contact-us).
</Note>

### API reference

* [Run API - Sync](./projectrun/run-api--sync).

## Asynchronous API

The asynchronous API (Async API) allows you to start the API call and receive a `runId` which you can use to check the status of the run and get the result.

In more detail, consuming the Async API involves the following steps:

1. **Start the API run**: Start the API run by calling [**start**](./projectrun/run-api--async-start) with the API name, parameters and any other configurations.
2. **Get the `runId`**: The **start** response will include a `runId`, it will be used to get the result. For example:

```json
{
  "runId": "abcdegf"
}
```

3. **Check the result**: Use the `runId` to check the result of the run by calling [**result**](./projectrun/run-api--async-result).

* The response will include a `status` field to indicate the status of the run. `pending` means the run is still in progress, `completed` or `failed` means the run finished, with success and failure respectively.

<Note>The `runId` can also be used to monitor your runs in the **Runs** tab of your project.</Note>

### API reference

* [Run API - Async start](./projectrun/run-api--async-start).
* [Run API - Result](./projectrun/run-api--async-result).


# Sink Body
Source: https://docs.intunedhq.com/client-apis/api-reference/sinks/body



## Introduction

When a sink is configured, the output of the job or queue is written to the sink. The output is a JSON object that contains the result of the API run with additional information. The structure of the output is mostly similar between jobs and queues with some minor differences.

## Format

<Tabs>
  <Tab title="Job">
    <ParamField body="apiInfo" type="object" required>
      Info about the API that was run. Includes the API name and result of run.

      <Expandable>
        <ParamField body="name" type="string" required>
          The API name.
        </ParamField>

        <ParamField body="parameters" type="object | array<any>">
          The parameters to passed to the API for this run.
        </ParamField>

        <ParamField body="result" type="object">
          <Tabs>
            <Tab title="Completed">
              <Expandable>
                <ParamField body="status" type="enum<string>" required>
                  The status of the API run.

                  Available options: `completed`
                </ParamField>

                <ParamField body="result" type="any">
                  The result of the API run.
                </ParamField>

                <ParamField body="statusCode" type="number" required>
                  The status code of the API run.
                </ParamField>
              </Expandable>
            </Tab>

            <Tab title="Failed">
              <Expandable>
                <ParamField body="status" type="enum<string>" required>
                  The status of the API run.

                  Available options: `failed`
                </ParamField>

                <ParamField body="error" type="string" required>
                  Error code.
                </ParamField>

                <ParamField body="message" type="string" required>
                  Error message.
                </ParamField>

                <ParamField body="statusCode" type="number" required>
                  The status code of the API run.
                </ParamField>
              </Expandable>
            </Tab>
          </Tabs>
        </ParamField>

        <ParamField body="runId" type="string" required>
          The run ID for the API run.
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="workspaceId" type="string" required>
      The workspace ID of the project that the run belongs to.
    </ParamField>

    <ParamField body="project" type="object" required>
      Details of the project that the run belongs to.

      <Expandable>
        <ParamField body="id" type="string" required>
          The project UUID.
        </ParamField>

        <ParamField body="name" type="string" required>
          The project name.
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="authSession" type="object">
      Details of the auth   used in this run.

      <Expandable>
        <ParamField body="id" type="string" required>
          The auth session ID.
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="projectJob" type="object" required>
      <Expandable>
        <ParamField body="id" type="string" required>
          Job ID.
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="projectJobRun" type="projectJobRun" required>
      <Expandable>
        <ParamField body="id" type="string" required>
          Job run ID.
        </ParamField>
      </Expandable>
    </ParamField>
  </Tab>

  <Tab title="Queue">
    <ParamField body="apiInfo" type="object" required>
      Info about the API that was run. Includes the API name and result of run.

      <Expandable>
        <ParamField body="name" type="string" required>
          The API name.
        </ParamField>

        <ParamField body="parameters" type="object | array<any>">
          The parameters to passed to the API for this run.
        </ParamField>

        <ParamField body="result" type="object">
          <Tabs>
            <Tab title="Completed">
              <Expandable>
                <ParamField body="status" type="enum<string>" required>
                  The status of the API run.

                  Available options: `completed`
                </ParamField>

                <ParamField body="result" type="any">
                  The result of the API run.
                </ParamField>

                <ParamField body="statusCode" type="number" required>
                  The status code of the API run.
                </ParamField>
              </Expandable>
            </Tab>

            <Tab title="Failed">
              <Expandable>
                <ParamField body="status" type="enum<string>" required>
                  The status of the API run.

                  Available options: `failed`
                </ParamField>

                <ParamField body="error" type="string" required>
                  Error code.
                </ParamField>

                <ParamField body="message" type="string" required>
                  Error message.
                </ParamField>

                <ParamField body="statusCode" type="number" required>
                  The status code of the API run.
                </ParamField>
              </Expandable>
            </Tab>
          </Tabs>
        </ParamField>

        <ParamField body="runId" type="string" required>
          The run ID for the API run.
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="workspaceId" type="string" required>
      The workspace ID of the project that the run belongs to.
    </ParamField>

    <ParamField body="project" type="object" required>
      Details of the project that the run belongs to.

      <Expandable>
        <ParamField body="id" type="string" required>
          The project UUID.
        </ParamField>

        <ParamField body="name" type="string" required>
          The project name.
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="authSession" type="object">
      Details of the auth   used in this run.

      <Expandable>
        <ParamField body="id" type="string" required>
          The auth session ID.
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="projectQueue" type="object" required>
      <Expandable>
        <ParamField body="id" type="string" required>
          Queue ID.
        </ParamField>
      </Expandable>
    </ParamField>
  </Tab>
</Tabs>

## Typescript SDK

Our Typescript SDK supports the sink body by providing the `SinkResult` type. You can read the sink results and cast them to this type to access the properties in a type-safe manner.

```typescript
import { SinkResult } from "./src/models/components/sinkresult"

const sinkResult: SinkResult = JSON.parse(sinkBody);
console.log(sinkResult.apiInfo.result);
```


# null
Source: https://docs.intunedhq.com/client-apis/api-reference/sinks/overview

Learn how sinks function within Intuned

## Introduction

If you are using the job or queue APIs to consume your project APIs, you have the option to sink the output of the job or queue. This allows you to manage the results of your project API runs in a more flexible way.

At Intuned, we currently support 2 types of sinks:

* **Webhook**: Send the output of the job or queue to a webhook URL.
* **AWS S3**: Store the output of the job or queue in an AWS S3 bucket.

## Webhook

The Webhook sink allows you to send the output of the job or queue to a webhook URL. This is useful if you want to send the output to a third-party service or to your own service.

<Info>
  Both jobs and queues support the Webhook sink.
</Info>

For more information on how to configure the Webhook sink, see the [Webhook sink documentation](./webhook).

## AWS S3

The AWS S3 sink allows you to store the output of the job or queue in an AWS S3 bucket as a file. This is useful if you want to easily persist the output of your project API runs and easily access them later.

<Info>
  Only jobs support the AWS S3 sink.
</Info>

For more information on how to configure the AWS S3 sink, see the [AWS S3 sink documentation](./s3).


# AWS S3 Sink
Source: https://docs.intunedhq.com/client-apis/api-reference/sinks/s3



## Introduction

The S3 sink allows you to write the output of the job to an AWS S3 bucket. This is useful if you want to easily persist the output of your project API runs and easily access them later.

<Info>
  Only jobs support the AWS S3 sink.
</Info>

## Configuration

The S3 sink requires the following configurations:

* **Region**: The S3 bucket region.
* **Bucket**: The S3 bucket name.
* **Access Key ID**: Access key ID for the IAM user to use the bucket. The IAM user has to have write permissions to the bucket.
* **Secret Access Key**: Secret access key of the IAM user to use the bucket.
* **Prefix**: A prefix added to the key of the file to be written. This can be used to define a folder where all results are stored.
* **Skip On Fail**: If enabled, failed payload runs will ***not*** be written to the bucket.
* **APIs to Send**: Specify which API results should be sent to the sink. If not specified, results from all APIs will be sent.

## Output File Content

The output file is a `.json` file that contains the result of the API run with additional information. Check out the [sink body page](./body) for more information on the output file content of the S3 sink.


# Webhook Sink
Source: https://docs.intunedhq.com/client-apis/api-reference/sinks/webhook



## Introduction

The Webhook sink allows you to send the output of the job or queue to a webhook URL. This is useful if you want to send the output to a third-party service or to your own service.

<Info>
  Jobs and queues support the Webhook sink.
</Info>

## Configuration

The Webhook sink requires configuring the URL to send the output to. This URL must be accessible from the Intuned platform. you can optionally add additional headers to be sent with the webhook request.

```json
{
  "type": "webhook",
  "url": "https://example.com/webhook",
  "headers": {
    "Authorization": "Bearer <token>"
  }
}
```

## API

### Request

The Webhook sink will send a POST request to the configured URL with a JSON payload containing the API run result and additional data. Check out the [sink body page](./body) for more information on the body of the Webhook sink request.

### Response

The webhook call will be considered successful if the response status code is [an ok response](https://developer.mozilla.org/en-US/docs/Web/API/Response/ok). If the response status code is not an ok response, the webhook call will be considered a failure.


# Overview
Source: https://docs.intunedhq.com/client-apis/overview

Learn how to consume the Intuned Client APIs.

## Introduction

At Intuned, we provide different kinds of APIs. Project consumption APIs allows you to consume the browser automations, scrapers and integrations that are created on the Intuned Platform. Auth Session APIs allow you to create and manage auth sessions for your projects. Standalone file APIs allow you to process files without the need of creating a project. We offer both REST APIs that you can call directly and a TypeScript SDK ([`@intuned/client`](https://www.npmjs.com/package/@intuned/client)) that you can use in your project.

<a href="https://god.gw.postman.com/run-collection/29801645-128bd4f7-8e8e-41f7-8c40-6bc19ddd661c?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29801645-128bd4f7-8e8e-41f7-8c40-6bc19ddd661c%26entityType%3Dcollection%26workspaceId%3Ddecbdbda-ef81-4971-81d8-211ca01b9dfa" target="_blank">
  <img height="32" width="128" noZoom src="https://run.pstmn.io/button.svg" />
</a>

<Tip>
  Intuned APIs are consumed using an API key in the context of your workspace. [How to generate an API key](/docs/getting-started/quick-start#create-an-api-key). [How to get your workspace Id](/docs/getting-started/quick-start#get-your-workspace-id).
</Tip>

## Project Consumption

To use the browser automations, scrapers and integrations that are created on the Intuned Platform, we expose a set of APIs that allow you to consume your projects in different ways.

More information on the Project Consumption APIs can be found [here](./api-reference/project-consumption-overview/).

## Auth Session Management

If your projects require you to authenticate to a website, you can use the Auth Session APIs to create and manage auth sessions. Auth sessions allow you to authenticate to a website and maintain the session for project API runs.

More information on the Auth Session APIs can be found [here](./api-reference/auth-sessions-overview/).

## Standalone File Processing

The standalone APIs allow you to process PDF and image files without consuming a project. We currently provide 3 operations:

1. **Extract structured data from file**: Extract strucutred data from the file following a [JSONSchema](https://json-schema.org/).
2. **Extract markdown from file**: Extract markdown from the file, including headers, paragraphs, lists and tables.
3. **Extract tables from file**: Extract tables from the file in JSON format.

More information on the Standalone File APIs can be found [here](./api-reference/files-overview/).

## Rate Limits

Intuned APIs are rated limited to 20 requests per minute per URI path. Some specific types of APIs are more strictly limited:

* Sync project consumption APIs are limited to 10 requests per minute per project.
* Sync standalone file APIs are limited to 10 requests per minute per operation.

<Tip>
  If you need a higher rate limit, [contact us](/docs/support/contact-us).
</Tip>

## Typescript SDK

### Installation

<Tabs>
  <Tab title="NPM">
    ```bash
    npm install @intuned/client
    ```
  </Tab>

  <Tab title="Yarn">
    ```bash
    yarn add @intuned/client
    ```
  </Tab>
</Tabs>

### Example Usage

```typescript
import { IntunedClient } from "@intuned/client";

const intunedClient = new IntunedClient({
  apiKey: "<YOUR_API_KEY_HERE>",
  workspaceId: "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee",
});

async function run() {
  const result = await intunedClient.project.run.sync("my-project", {
    api: "get-contracts",
    parameters: {
      "page": 1,
      "isLastPage": false,
    },
    retry: {
      maximumAttempts: 3,
    },
  });

  // Handle the result
  console.log(result)
}

run();
```

## Other SDKs

[Contact Us](/docs/support/contact-us) if you would like to request an SDK for a different language.

## Postman Collection

For feedback on the Postman collection, [contact us](/docs/support/contact-us).


# Actions in Intuned
Source: https://docs.intunedhq.com/docs/actions/overview



`@intuned/sdk` provides utilities to help execute common browser automation tasks.

## File download

The [`downloadFile` utility](/automation-sdks/intuned-sdk/files/functions/downloadFile) helps with downloading file tasks. Checkout the reference for example usage and more info.

## Upload file to S3

The [`uploadFileToS3` utility](/automation-sdks/intuned-sdk/files/functions/uploadFileToS3) helps with uploading files to S3. Checkout the reference for example usage and more info.

## FillForm

The [`fillForm` utility](/automation-sdks/intuned-sdk/playwright/functions/fillForm) helps with filling standard forms on webpages. Checkout the reference for example usage and more info.


# Consume APIs with auth sessions
Source: https://docs.intunedhq.com/docs/auth-sessions/consume-auth-sessions



## Introduction

Learn how to authenticate your users and take actions on their behalf.

Before you start this document, the following is recommended:

* Understand [core Intuned concepts](/docs/getting-started/concepts)
* Understand [Auth session types](/docs/auth-sessions/overview#auth-session-types). Specifically, understand the difference between credentials-based auth sessions and recorder-based auth sessions and when to use each.
* Understand the [development of an project with auth session enabled](/docs/auth-sessions/develop-auth-sessions)

## Creating/managing auth sessions

To create an auth session, you must have the following:

* \[Required] Access to user credentials, ether it is stored or the user is present
* \[Optional] Proxy to the location you wish to have the user authenticate from

Auth sessions can be managed via the Intuned UI or via the API.

* The API provides a way to manage auth sessions programmatically. This is typically used when you are building an integration that has no APIs and you want to automate actions on behalf of your users (you need to provide credentials). Building a LinkedIn integration is a good example here. For API docs, you can look at the [Auth Sessions API reference](/client-apis/api-reference/auth-sessions-overview).
* The UI provides a simple way to create, update, and delete auth sessions. This is typically used when you are building an authenticated scraper or doing back-office automation with a limited set of auth sessions.

![Auth Session UI Management](https://intuned-docs-public-images.s3.amazonaws.com/auth/auth-sessions-ui-management.png)

To learn more and dig deeper:

* [How to create Credentials-based auth session](/docs/guides/platform/how-to-manage-auth-sessions#create-credentials-based-auth-session-for-deployed-projects)
* [How to create Recorder-based auth session](/docs/guides/platform/how-to-manage-auth-sessions#create-recorder-based-auth-session-for-deployed-projects)

## Utilizing auth Sessions

Calling an API in an project with auth sessions enabled requires an auth session to be present. Prior to executing any APIs, Intuned will check if the auth session is valid by attempting to call the `auth-sessions/check` API that is defined in the project.

After creating an auth session, it must be included in input payload of the direct API calls. If jobs or queues are being configured on an project with auth sessions enabled then the configuration must include auth session as well.

To learn more and dig deeper:

* [Use authSession in the body to make an async call](/client-apis/api-reference/projectrun/run-api--async-start)
* [How to use auth sessions in job](/docs/guides/auth/how-to-automate-linkedin#4-create-a-job-to-be-updated-of-all-pending-requests-weekly)
* [How to use auth sessions in a queue](/docs/guides/auth/how-to-authenticate-with-credentials#5-create-a-queue-to-add-new-users)

## Other aspects of auth session

### Proxies

An auth session can be configured with a proxy to ensure all actions and traffic from the browser are showing up from the same IP address. Proxies are not required to use auth sessions but are commonly used depending on the target service.

Once an auth session is configured with a proxy, all API calls with this auth session will be routed via the proxy so if the proxy fails the API calls will fail as well. If there are failures in the proxy, you can [update the proxy configured on an auth session](/docs/auth-sessions/consume-auth-sessions#updating-auth-sessions).

### Updating auth sessions

Once an auth session has been created, it should serve as the only auth session instance for that user/service pairing. For example is Sam created an auth session for Service A with the id `sam-serviceA-session`then this auth session should be maintained and updated by you. This means that you must update and maintain the auth session for the duration you need it.

[Learn how to update auth sessions](/docs/guides/platform/how-to-manage-auth-sessions#update-an-expired-auth-session)


# Develop projects with auth sessions
Source: https://docs.intunedhq.com/docs/auth-sessions/develop-auth-sessions



## Introduction

Learn how to develop projects that use auth sessions.

Before you start this document, the following is recommended:

* Understand [core Intuned concepts](/docs/getting-started/concepts)
* Understand [Auth session types](/docs/auth-sessions/overview#auth-session-types). Specifically, understand the difference between credentials-based auth sessions and recorder-based auth sessions and when to use each.

## Using auth sessions in Intuned projects

Intuned projects can either be developed with or without auth sessions. If auth sessions are enabled, then all the project APIs will require a valid auth session to be passed in the request for the API to be executed. We do not support projects that have only some APIs that require auth sessions and some that do not.

### Enabling auth sessions in a project

* To enable auth sessions in a project that was created without auth sessions, you can enable it in the project settings. In the `Intuned.json` settings you will find auth session configuration pane.
  ![ide-settings](https://intuned-docs-public-images.s3.amazonaws.com/auth/ide-settings-pane.png)

* Once auth sessions are enabled, you need to pick up the auth session type to use from the dropdown that will appear. This is set to Credentials-based auth session by default.

![auth-session-type-dropdown](https://intuned-docs-public-images.s3.amazonaws.com/auth/auth-session-type-dropdown.png)

### After enabling auth sessions

Upon enabling auth sessions and selecting the strategy new capabilities will be enabled in the IDE.
![ide-auth-session-settings](https://intuned-docs-public-images.s3.amazonaws.com/auth/ide-auth-sessions-controls.gif)

1. Folder named 'auth-sessions' defines the auth workflow. The strategy will determine how much of the auth workflow will need to be defined.
2. Auth sessions dropdown manages auth sessions in IDE, and is only made available when running APIs defined in the `api` folder.
3. Run settings contains new controls to define auth session behavior when running APIs in the IDE
   * `Check/Refresh as part of the API - match deployed behavior`:\
     This option allows you to emulate production behavior and ensure that the auth session check is made before executing the API, and if the check fails it will attempt to refresh as well. It is recommended to use this to test failures caught in production.
   * `Load auth-session and run API - skip check/refresh`:\
     This option skips the check and refresh behavior that is standard in production. It is recommended to use this as you are developing the project.
   * `Reuse session if open`:\
     This option should be selected if you've already authenticated in the browser session and just want to continue from where the browser is currently.

#### Credentials-based auth session

If Credentials-based auth is selected, then `auth-sessions` folder will following APIs that need to be defined:

* `create.ts` - needs to contain the end to end automation workflow that can navigate to the target service, enter user's credentials, resolve any challenges, and complete authentication.
* `check.ts` - needs to contain a simple workflow that is able to validate that the auth session is valid.
* `refresh.ts` - needs to contain the workflow required to update or refresh the auth session.

[Learn how to create an Credentials-based auth session in the IDE](/docs/guides/platform/how-to-manage-auth-sessions#create-credentials-based-auth-session-in-the-ide).

#### Recorder-based auth session

If Credentials-based auth is selected, then `auth-sessions` folder will only contain the following API that need to be defined:

* `check.ts` - needs to contain a simple workflow that is able to validate that the auth session is valid.

* The `create.ts` API **doesn't** need to be defined because the recording experience will prompt the end user to enter their credentials on a streaming browser. Upon completion of the sign in flow the auth session will be captured and the pop up browser will be closed.

* The `refresh.ts` API **doesn't** need to be defined because Recorder-based auth sessions do not support refreshing expired auth sessions.

[Learn how to create a Recorder-based auth session in the IDE](/docs/guides/platform/how-to-manage-auth-sessions#create-recorder-based-auth-session-in-the-ide).

## Running APIs in project with auth sessions

Before deploying the project, you must validate the auth sessions and APIs in the IDE. Follow the steps below:

1. Create [cred based](/docs/guides/platform/how-to-manage-auth-sessions#create-recorder-based-auth-session-in-the-ide) or [recorder](/docs/guides/platform/how-to-manage-auth-sessions#create-recorder-based-auth-session-in-the-ide) auth session in the IDE.
2. Run the APIs in the IDE and validate the output in the IDE

## Deploying and validating auth sessions

Upon validating the auth session in the IDE you can [deploy the project](/docs/guides/platform/how-to-deploy-a-project). Then when the project is deployed, it is recommended to create an auth session in production and validate the APIs. Follow the steps below:

1. [Create auth session for deployed project](/docs/guides/platform/how-to-manage-auth-sessions#create-auth-session-for-deployed-projects)
2. Run an [async API](/client-apis/api-reference/projectrun/run-api--async-start) to validate the authenticated APIs.


# Auth Sessions
Source: https://docs.intunedhq.com/docs/auth-sessions/overview



## Introduction

Auth sessions in Intuned allow you to add authentication to any browser automation task. This includes creating authenticated scrapers, automated RPA processes, or building authenticated integrations when APIs are not available.

Intuned's auth sessions come with features that handle common authentication challenges, such as: securing credentials, solving challenges, proxy support, and more!

### Use cases

<CardGroup cols={2}>
  <Card title="Scrapers" icon="handshake">
    Build authenticated scrapers that capture data from authenticated websites.
  </Card>

  <Card title="Social media" icon="linkedin-in">
    Build LinkedIn integration to automate GTM tasks on behalf of your users.
  </Card>

  <Card title="E-commerce" icon="shop">
    Automate back-office workflows like order fulfillment, adjustments, and tracking.
  </Card>

  <Card title="Travel and accommodations" icon="plane">
    Automate reservation processes for flights, hotels, restaurants, and more.
  </Card>
</CardGroup>

## Auth session types

Intuned offers two types of auth sessions. Its important to understand the differences between the two types to pick the right one for your use case.

### Credentials-based auth Sessions

These auth sessions are created when users provide credentials to run a browser automation code that completes the authentication workflow. The credentials are also stored and when the session expires Intuned will attempt to re-authenticate with the saved credentials. From a developer point of view, the developer needs to write the authentication code but everything else is handled by Intuned. The auth session will continue to be active as long as the credentials are valid. This should be the default choice for using auth sessions in Intuned.

**Unique characteristics:**

* Requires providing credentials to create the auth session
* Requires Intuned to persist the credentials
* Allows for longer-lasting sessions, as they can be refreshed programmatically
* Developer needs to write the authentication code

### Recorder-based auth sessions

Recorder-based auth sessions are created by asking the user to authenticate on a browser and then capturing the authenticated session (cookies, sessions, local storage). Recorder-based auth session allows sharing access without providing credentials. The developer has to provide some info about how the authentication works on the targeted website and Intuned will handle the rest. Creating an auth session here requires the user to be present and to authenticate to a browser session. The auth session will expire when the user's session on the targeted website expires. When the session expires, the user must be present to re-authenticate. This type should be used when the user is not comfortable sharing their credentials or with services that have a long session time - a typical example here is LinkedIn auth.

**Unique characteristics:**

* Does not require users to share their credentials
* Does not require Intuned to persist the credentials
* Has a session lifetime that is dependent on the target service and typically bound to the user's original session duration
* Developer needs to provide some info about how the authentication works on the targeted website (start url, auth final url)

### Common features

Credentials-based and recorder-based auth sessions share the common key features including:

* lifecycle management via API or UI
* proxy support: ensure actions are coming from the same IP
* monitoring support
* Jobs and Queues support

### Picking the right auth session type to use

Prior to starting with auth sessions, you must decide on which type you want to use for your use case, some useful questions to ask yourself:

* Are you authenticating into a target services to complete actions on behalf of your users?
* Are you authenticating into a target service on behalf of your own company to automate back-office tasks?
* Are your users comfortable sharing their credentials to access the target service?
* How frequently would your users require actions to be completed on their behalf on the target service? Are they daily/weekly scheduled tasks or on demand tasks?
* How long can you stay signed in to the target service before being prompted to enter your credentials again?
* Does the target service prompt for two factor authentication when requests are coming from a new device or new location or new browser? Do you need to use proxies with Auth Sessions?

To determine which auth session to use you can refer to the flow chart below:

```mermaid
flowchart TD
    A{Need to build an integration 
      to act onbehalf of a user?} 
    A --> |No| B([Auth session not required])
    A --> |Yes| C{User require actions to be 
                  completed on their behalf 
                  very frequently?
                  i.e pull data daily}
    C -->|Yes| D{Can user remain signed in 
                 for a long time on the 
                 same device/browser once 
                 signed in? i.e like LinkedIn}
    C -->|No| E{Is user comfortable 
                sharing credentials?}
    E -->|Yes| F([Utilize API auth session])
    E -->|No| G([Utilize Recorder auth session])
    D --> |Yes| E
    D --> |No| F
```

## Auth session lifecycle

One of the important aspects of dealing with auth sessions is understanding the session lifecycle: when the session has expired and recovering from that. Intuned asks developers to implement a `check` function (inside a `check.ts` file) this function should return a boolean (true/false) that indicates if the session is still valid or not. This function is called before executing any authenticated action (API). If the function returns false, Intuned will attempt to re-authenticate the session using the saved credentials (for Credentials-based auth sessions) or mark the session as expired (for Recorder-based auth sessions).

### Credentials-based auth sessions lifecycle

* When created, the session is marked as active.
* Before executing any API call, the `check.ts` function is called. If the function returns false, Intuned will attempt to re-authenticate the session using the saved credentials. This is done by calling the `refresh.ts` API using the saved credentials.
* If the `refresh.ts` API fails, the session is marked as expired. Any further APIs that use this session will fail with 401 status code.
* The session state can be checked using the [get session API](/client-apis/api-reference/projectauthsessions/get-auth-session.mdx).
* The session can be updated using the update session API - this API requires the credentials to be passed in the body - for more info check: [update auth session - Start](/client-apis/api-reference/projectauthsessionsupdate/update-auth-session--start), [update auth session - resume](/client-apis/api-reference/projectauthsessionsupdate/update-auth-session--resume) and [update auth session - result](/client-apis/api-reference/projectauthsessionsupdate/update-auth-session--result).
* Any Job or Queue that uses the auth session will be paused when the auth session is marked as expired.

### Recorder-based auth sessions lifecycle

* When created, the session is marked as active.
* Before executing any API call, the `check.ts` function is called. If the function returns false, the session is marked as expired.
* The session state can be checked using the [get session API](/client-apis/api-reference/projectauthsessions/get-auth-session.mdx).
* The session can be updated - however, this process requires the user to be present to re-authenticate.
* Any Job or Queue that uses the auth session will be paused when the auth session is marked as expired.

## Managing auth sessions

Auth sessions can be managed via the Intuned UI or via the API.

* The UI provides a simple way to create, update, and delete auth sessions. This is typically used when you are building an authenticated scraper or doing back-office automation with a limited set of auth sessions.

![Auth Session UI Management](https://intuned-docs-public-images.s3.amazonaws.com/auth/auth-sessions-ui-management.png)

* The API provides a way to manage auth sessions programmatically. This is typically used when you are building an integration that has no APIs and you want to automate actions on behalf of your users (you need to provide credentials). Building a LinkedIn integration is a good example here. For API docs, you can look at the [Auth Sessions API reference](/client-apis/api-reference/auth-sessions-overview).

## Learn more

<CardGroup cols={3}>
  <Card title="Developing with auth sessions" icon="code" href="./develop-auth-sessions">
    Learn how to develop auth sessions
  </Card>

  <Card title="Consuming with auth sessions" icon="globe" href="./consume-auth-sessions">
    Learn how to consume auth sessions at scale
  </Card>
</CardGroup>


# File data extraction
Source: https://docs.intunedhq.com/docs/data-extraction/file-data-extraction



<Note>You can also use file data extraction as a standalone API. Checkout [Standalone File APIs](./standalone-file-apis) for more info. </Note>

Extracting data from files is a common operation when writing scrapers or building browser automations in general. Normally, this involves writing custom rules and regex to parse and extract data. This process can be error-prone and time-consuming.

At Intuned, we simplify this process by providing a utility that allow you to extract structured data from files. [Here](/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromFile) is the function reference for more info.

## Examples

<CodeGroup>
  ```typescript AI Extraction From Page
  const specPdfs = [
      "https://intuned-docs-public-images.s3.amazonaws.com/27UP600_27UP650_ENG_US.pdf", 
      "https://intuned-docs-public-images.s3.amazonaws.com/32UP83A_ENG_US.pdf"
  ];
  for (const url of specPdfs) {
    const specs = await extractStructuredDataFromFile({
      type: "pdf",
      source: {
        type: "url",
        "data": url,
      },
    }, {
      label: "spec files",
      dataSchema: {
        type: "object",
        properties: {
          "models": {
            description: "models number included in this spec sheet",
            type: "array",
            items: {
                type: "string"
            }
          },
          "color_depth": {
            type: "string",
            description: "color depth of the monitor"
          },
          "max_resolution": {
            type: "string",
            description: "max rolustion of the screen and at what hz"
          },
        },
        required: ["models", "color_depth", "max_resolution"],
      }
    })
  }

  // {
  //  models: [ '27UP600', '27UP650' ],
  //  color_depth: '8-bit / 10-bit color is supported.',
  //  max_resolution: '3840 x 2160 @ 60 Hz'
  // }
  // {
  //  models: [ '32UP83A' ],
  //  color_depth: '8-bit / 10-bit color is supported.',
  //  max_resolution: '3840 x 2160 @ 60 Hz'
  // }
  ```
</CodeGroup>

For more details, see [extractStructuredDataFromFile](/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromFile).

## How does this work?

In summary, we do the following:

* Convert the file (selected pages) to markdown.
* Extract structured data from the markdown using the provided schema.

## How is the cost for Data Extraction calculated?

* Cost for converting the file to markdown is calculated based on the number of pages in the file.
* Cost for extracting structured data from the markdown is calculated based on the size of input data and the schema used.

{/**
  ## What is the Strategy option and what does it do?
  For now, in the strategy, you can control the model that is used to extract the data. By default we use Gpt-4. We will be adding more strategies in the future.
  */}


# Markdown and tables
Source: https://docs.intunedhq.com/docs/data-extraction/markdown-and-tables



## Converting web pages/html to markdown.

Intuned provides utilities to convert web pages to markdown. Markdown is a particularly good format for working with LLMs. For more info checkout: [extractMarkdownFromPage reference](/automation-sdks/intuned-sdk/ai-extractors/functions/extractMarkdownFromPage) and [extractMarkdownFromLocator reference](/automation-sdks/intuned-sdk/ai-extractors/functions/extractMarkdownFromLocator).

<CodeGroup>
  ```typescript Convert web page to markdown
  await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html");
  const siteMarkdown = extractMarkdownFromPage(page);

  // [Books to Scrape](../../index.html) We love being scraped!
  // - [Home](../../index.html)
  // - [Books](../category/books_1/index.html)
  // - [Poetry](../category/books/poetry_23/index.html)
  // - A Light in the Attic
  // ![A Light in the Attic](../../media/cache/fe/72/fe72f0532301ec28892ae79a629a293c.jpg)
  // # A Light in the Attic
  // £51.77
  // \_\_ In stock (22 available)
  ```

  ```typescript Convert web page to markdown using locator
  await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html");
  const siteMarkdown = extractMarkdownFromLocator(page.locator("#content_inner > article > div.row > div.col-sm-6.product_main"));

  // # A Light in the Attic
  //
  // £51.77
  //
  // \_\_ In stock (22 available)
  ```
</CodeGroup>

## Converting files to markdown

<Note>You can also use File Markdown Conversion as a standalone API. Checkout [Standalone File APIs](./standalone-file-apis) for more info. </Note>

Intuned provides utilities to convert files to markdown. Markdown is a particularly good format for working with LLMs. For more info checkout: [extractMarkdownFromFile reference](/automation-sdks/intuned-sdk/ai-extractors/functions/extractMarkdownFromFile).

<CodeGroup>
  ```typescript Convert file to markdown
  const specMarkdown = await extractMarkdownFromFile({
    type: "pdf",
    source: {
      type: "url",
      data: "https://intuned-docs-public-images.s3.amazonaws.com/27UP600_27UP650_ENG_US.pdf"
    },
  }, { label: "pdf_markdown" });

  // LG
  // Life's Good
  // # OWNER'S MANUAL
  // LED LCD MONITOR
  // \(LED Monitor\*\)
  // \* LG LED Monitor applies LCD screen with LED backlights. Please read this manual carefully before operating your set and retain it for future reference.
  // 27UP600
  // 27UP650
  // ....
  ```
</CodeGroup>

## Extracting tables from files

<Note>You can also use Table Extraction as a standalone API. Checkout [Standalone File APIs](./standalone-file-apis) for more info. </Note>

Intuned provides utilities to extract tables from files. Tables are some of the common elements in data-rich files. For more info on how to use this, checkout [extractTablesFromFile reference](/automation-sdks/intuned-sdk/ai-extractors/functions/extractTablesFromFile).

<CodeGroup>
  ```typescript Extract tables from file
  const fileTables = await extractTablesFromFile({
    type: "pdf",
    source: {
      type: "url",
      data: "https://intuned-docs-public-images.s3.amazonaws.com/27UP600_27UP650_ENG_US.pdf"
    },
  }, { label: "pdf_markdown" })

  // [
  //  {
  //    pageNumber: 2,
  //    title: 'PRODUCT SPECIFICATION 27UP600',
  //    content: [
  //      [Array], [Array], [Array],
  //      [Array], [Array], [Array],
  //      [Array], [Array], [Array],
  //      [Array], [Array], [Array],
  //      [Array], [Array], [Array]
  //    ]
  //  }
  // ]
  ```
</CodeGroup>


# Data extraction in Intuned
Source: https://docs.intunedhq.com/docs/data-extraction/overview



Data extraction is a fundamental task in browser automation and web scraping. In some cases, data also lives in files of different formats.

Traditionally, data extraction is unreliable and error-prone, requiring custom code to parse, clean, and transform data into a usable format. This process is labor-intensive, error-prone and time-consuming.

At Intuned, we streamline data extraction to be easy and reliable by leveraging LLMs. We offer a suite of utilities that simplify the extraction of data from both websites and files.

This section focuses on these capabilities. The following is a summary of the available utilities:

## Intuned Automation Projects

The Intuned SDK includes several helper methods designed for data extraction, available under the following namespaces:

### `@intuned/sdk/ai-extractors`

* [**Web Data Extraction**](./web-data-extraction): Utilities to extract structured data from webpages. Use of these methods will include cost, costs depend on the webpage size and the requested data schema.

* [**File Data Extraction**](./file-data-extraction): Utilities for extracting structured data from files. Use of these methods will include cost, costs will vary based on the number of pages, file contents and the requested data schema.

* [**Web Markdown Conversion**](./markdown-and-tables): Convert webpages to markdown.

* [**File to Markdown Conversion**](./markdown-and-tables): Convert files to markdown. This uses our file processing pipeline, with costs based on the number of file pages processed.

* [**Table Extraction from Files**](./markdown-and-tables): Extract tables from files. This uses our file processing pipeline, with costs based on the number of file pages processed.

### `@intuned/sdk/optimized-extractors`

Utilities for optimized data extraction from web pages, focusing on cost-efficiency. These utilities aim to minimize the reliance on LLMs. These utilities support a limited set of schemas and are restricted in the type of data they can extract. Further details on these utilities will be discussed [here](./web-data-extraction#optimized-extractors).

### `@intuned/sdk/playwright`

**Static Extraction Utilities** to extract data from webpages with selectors. These utilities require manual configuration of selectors and incur no cost when used. Checkout [extractArrayFromPageUsingSelectors](/automation-sdks/intuned-sdk/playwright/functions/extractArrayFromPageUsingSelectors) and [extractObjectFromPageUsingSelectors](/automation-sdks/intuned-sdk/playwright/functions/extractObjectFromPageUsingSelectors) for more info.

### `playwright`

[playwright](/automation-sdks/playwright/overview) can directly be used to interact with webpages and extract data.

## Standalone file APIs

In addition to the `@intuned/sdk` utilities, we offer standalone APIs for file data extraction. These APIs can be utilized without creating projects or writing any browser automation logic, with costs varying based on the operation used and file size. More details are available [here](./standalone-file-apis).


# Standalone file APIs
Source: https://docs.intunedhq.com/docs/data-extraction/standalone-file-apis



In addition to the `@intuned/sdk` utilities, we offer standalone APIs for file related operations (extract structured data, extract/convert-to markdown, extract tables). These APIs can be utilized without creating projects or writing any browser automation logic, with costs varying based on the operation used and file size.

## Sync vs. Async APIs

Each of the operations listed above is available via a Sync API and an Async API. In Sync APIs, the result is returned in the same HTTP call that was made to invoke API. In Async APIs, the result is returned in a separate HTTP call (Async Result call), using an operationId that is returned in the first call (Async Start call).

## Extract structured data from files

For more info, checkout the reference for the [Sync API](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--sync) and Async APIs: [Async Start](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--async-start) and [Async Result](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--async-result).

## Convert files to markdown

For more info, checkout the reference for the [Sync API](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--sync) and Async APIs: [Async Start](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--async-start) and [Async Result](/client-apis/api-reference/filesextractstructureddata/extract-structured-data--async-result).

## Extract tables from files

For more info, checkout the reference for the [Sync API](/client-apis/api-reference/filesextractmarkdown/extract-markdown--sync) and Async APIs: [Async Start](/client-apis/api-reference/filesextractmarkdown/extract-markdown--async-start) and [Async Result](/client-apis/api-reference/filesextractmarkdown/extract-markdown--async-result).

## Supported file formats

We currently support pdf files and image files. We will be working on supporting other formats soon. [Contact us](/docs/support/contact-us) if you have any specific requirements.

## How are costs calculated?

* For Markdown conversion and Table extraction APIs, cost is based on number of pages in the files processes.
* For Structured data extraction APIs, cost is based on number of pages in the files processes and the size of the input data and the schema used. This is because structured data extraction is a two step process: convert to markdown + run extraction.


# Web data extraction
Source: https://docs.intunedhq.com/docs/data-extraction/web-data-extraction



Extracting data from webpages is core operation when writing scrapers. Normally, this involves writing custom code to parse and extract data from the HTML. This process is error-prone and time-consuming.

At Intuned, we streamline data extraction to be easy and reliable by leveraging LLMs. Our utilities, available in `@intuned/sdk`, allow you to extract data by providing a schema that describes the desired output.

## AI extractors

`extractStructuredDataFromPage` and `extractStructuredDataFromLocator` extract structured data from a full page or a specific section (using locator) of a page. These methods retrieve the content, pass it to the LLM for extraction, and incur costs based on the input size, schema complexity, and selected strategy.

<CodeGroup>
  ```typescript AI extraction from page
  await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html");
  const result = await extractStructuredDataFromPage(page, {
      label: "books_to_scrape",
      dataSchema: {
          type: "object",
          properties: {
              title: {
                  type: "string",
                  description: "title of the book",
              },
              in_stock: {
                  type: "boolean"
              },
              UPC: {
                  type: "string"
              },
              product_type: {
                  type: "string"
              },
              availableBooks: {
                  type: "number",
                  description: "number of avaible books"
              },
              price: {
                  type: "object",
                  properties: {
                      price_include_tax: {
                          type: "number",
                      },
                      price_execluding_tax: {
                          type: "number"
                      },
                      tax_amount: {
                          type: "number"
                      },
                      currency: {
                          type: "string",
                          enum: ["pound", "dollar"],
                      },
                  }
              }
          },
          required: ["title"],
      },
  });
  // {
  //  UPC: 'a897fe39b1053632',
  //  availableBooks: 22,
  //  in_stock: true,
  //  price: {
  //    currency: 'pound',
  //    price_execluding_tax: 51.77,
  //    price_include_tax: 51.77,
  //    tax_amount: 0
  //  },
  //  product_type: 'Books',
  //  title: 'A Light in the Attic'
  // }
  ```

  ```typescript AI extraction from locator (page section)
  await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html");
  const result = await extractStructuredDataFromLocator(page.locator("#content_inner > article > table"), {
      label: "price",
      dataSchema: {
          type: "object",
          properties: {
              price_include_tax: {
                  type: "number",
              },
              price_execluding_tax: {
                  type: "number"
              },
              tax_amount: {
                  type: "number"
              },
              currency: {
                  type: "string",
                  enum: ["pound", "dollar"],
              },
          },
          required: ["price_include_tax"],
      },
  });

  // {
  //  price_include_tax: 51.77,
  //  price_execluding_tax: 51.77,
  //  tax_amount: 0,
  //  currency: 'pound'
  // },
  ```
</CodeGroup>

For complete function reference, see [extractStructuredDataFromPage](/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromPage) and [extractStructuredDataFromLocator](/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromLocator).

## Optimized extractors

Optimized extractors deliver the benefits, reliability and convenience of AI extractors in a cost optimized manner. This is done by only using AI extraction in limited scenarios and creating/using selectors otherwise (More on this later).

There are four optimized extractor methods:

* `extractArrayFromPage`
* `extractArrayFromLocator`
* `extractObjectFromPage`
* `extractObjectFromLocator`

Here are these can be used in your Intuned project APIs:

<CodeGroup>
  ```typescript Optimized extraction - Object
  await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html");
  const result = await extractObjectFromPage(page, {
      label: "books_to_scrape",
      entityName: "book_info",
      entitySchema: {
          type: "object",
          properties: {
              title: {
                  type: "string",
                  description: "title of the book",
              },
              price: {
                  type: "string",
              },
              in_stock: {
                  type: "string"
              },
              UPC: {
                  type: "string"
              },
              product_type: {
                  type: "string"
              },
          },
          required: ["title", "price", "in_stock", "UPC", "product_type"],
      },
  });

  // {
  //   UPC: 'a897fe39b1053632',
  //   price: '£51.77',
  //   title: 'A Light in the Attic',
  //   in_stock: 'In stock (22 available)',
  //   product_type: 'Books'
  // }
  ```

  ```typescript Optimized extraction - Locator
  await page.goto("https://books.toscrape.com/catalogue/a-light-in-the-attic_1000/index.html");
  const result = await extractObjectFromLocator(page.locator("#content_inner > article > div.row > div.col-sm-6.product_main"), {
      label: "books_to_scrape",
      entityName: "book_info",
      entitySchema: {
          type: "object",
          properties: {
              title: {
                  type: "string",
                  description: "title of the book",
              },
              price: {
                  type: "string",
              },
              in_stock: {
                  type: "string"
              },
          },
          required: ["title", "price", "in_stock"],
      },
  });

  // {
  //   title: 'A Light in the Attic',
  //   price: '£51.77',
  //   in_stock: 'In stock (22 available)'
  // }
  ```

  ```typescript Optimized extraction - Array
  await page.goto("https://books.toscrape.com/")
  const books = await extractArrayFromPage(page, {
      label: "books_list",
      itemEntityName: "book",
      prompt: "scrape the books list from the page.",
      strategy: {
          model: "claude-3-opus",
          type: "HTML",
      },
      itemEntitySchema: {
          type: "object",
          properties: {
              title: {
                  type: "string",
                  primary: true,
                  description: "book title"
              },
              price: {
                  type: "string",
                  description: "book price"
              },
              in_stock: {
                  type: "string",
                  description: "book in stock or out of stock"
              }
          },
          required: ["title", "price", "in_stock"],
      }
  });

  // [
  //  {
  //    title: 'A Light in the ...',
  //    price: '£51.77',
  //    in_stock: 'In stock'
  //  },
  //  {
  //    title: 'Tipping the Velvet',
  //    price: '£53.74',
  //    in_stock: 'In stock'
  //  },
  //  ...
  // ]
  ```

  ```typescript Optimized extraction - Array from locator
  await page.goto("https://books.toscrape.com/")
  const books = await extractArrayFromLocator(page.locator("#default > div > div > div > div > section"), {
      label: "books_list",
      itemEntityName: "book",
      prompt: "scrape the books list from the page.",
      strategy: {
          model: "claude-3-opus",
          type: "HTML",
      },
      itemEntitySchema: {
          type: "object",
          properties: {
              title: {
                  type: "string",
                  primary: true,
                  description: "book title"
              },
              price: {
                  type: "string",
                  description: "book price"
              },
              in_stock: {
                  type: "string",
                  description: "book in stock or out of stock"
              }
          },
          required: ["title", "price", "in_stock"],
      }
  });

  // [
  //  {
  //    title: 'A Light in the ...',
  //    price: '£51.77',
  //    in_stock: 'In stock'
  //  },
  //  {
  //    title: 'Tipping the Velvet',
  //    price: '£53.74',
  //    in_stock: 'In stock'
  //  },
  //  ...
  // ]
  ```
</CodeGroup>

### How do they work? How are they saving cost?

Optimized extractors operate in two modes: AI Extraction and Static Extraction.

* **AI extraction**: In this mode, the extractor leverages LLMs to extract data directly from the webpage. This is the initial mode used when the extractor is first invoked.

* **Static extraction**: After collecting a sufficient number of examples via AI Extraction, the Intuned platform runs background workflows to automatically generate selectors. Once the selectors are correctly generated, the optimized extractors switch to Static Extraction mode, using these cached/auto-generated selectors to extract data from the page. This saves cost by avoiding the need for LLM calls on every extraction.

The platform handles scenarios where invalid data is not returned by the static extractors. This is taken as a signal that the static extractors may have become invalid or the page structure has changed. In such cases, the extractor automatically falls back to AI Extraction mode.
After collecting new examples via AI Extraction, the platform recreates the static extractors and returns to the optimized state.
It's important to note that this entire process is managed seamlessly by the Intuned platform. As a user, you simply need to provide the necessary extractor parameters, and the platform takes care of optimizing the extraction process to save costs while maintaining accuracy.

### What are the scenarios where optimized extractors perform AI extraction and incur cost?

Optimized extractors perform AI extraction in the following scenarios:

* **Initial extraction**: When used for the first time on a new page or locator.
* **Insufficient examples**: When collected examples are insufficient to generate reliable selectors.
* **Page Structure Changes/Invalid Extracted Data**: When the page structure changes or expected data is not returned by static selectors.

### What are the limitations of optimized extractors?

While optimized extractors offer a cost-effective solution for extracting structured data from webpages, they do have certain limitations:

1. Limited JSONSchema Support\*\*: Currently, optimized extractors have limited support for complex JSONSchema structures. They can handle basic objects (objects with string properties) using `extractObjectFromPage` and `extractObjectFromLocator`, and arrays of basic objects using `extractArrayFromPage` and `extractArrayFromLocator`. More complex schemas with nested objects or arrays, or properties with non-string types, are not yet supported.

2. Exact String Extraction: optimized extractors rely on the ability to create static selectors for optimization. To achieve this, the data being extracted must be exact strings that exist in the webpage.

3. In rare cases, the platform may not be able to generate reliable static selectors, even after collecting multiple examples. In such scenarios, the optimized Extractor will continue to operate in AI Extraction mode, incurring costs for on extraction. To avoid incurring unexpected costs, you can set limits on AI spend using labels. Its also worth mentioning that the Intuned team closely monitors these cases and works on continuously improving the selector generation algorithms.

### What is a `variantKey` and how to use it?

In advanced scenarios, you may want to apply the same optimized extraction logic to different websites with varying page structures. To enable the Intuned platform to group examples effectively and create static extractors per group, we use the concept of variants.

By default, the variant is determined by the origin of the webpage on which the extraction is performed. This means that examples collected from pages with the same origin will be grouped together to generate static extractors specific to that website.

However, there may be cases where you need more fine-grained control over example grouping to make static extraction creation feasible. For instance, consider a situation where you want to extract data from two different pages that have the same origin but different structures. In such cases, you can manually provide a `variantKey` to differentiate between the two pages and ensure accurate example grouping.

Here's how you can use the `variantKey`:

1. Identify the webpages or sections that require different example grouping, even though they have the same origin.
2. Assign a unique `variantKey` to each distinct webpage or section. The `variantKey` should be a string that meaningfully identifies the specific variation of the page structure.
3. When calling the optimized Extractor functions (`extractObjectFromPage`, `extractObjectFromLocator`, `extractArrayFromPage`, or `extractArrayFromLocator`), pass the corresponding `variantKey` as an optional parameter.
4. The Intuned platform will use the provided `variantKey` to group examples separately for each variant, enabling the creation of static extractors tailored to each specific page structure.

By utilizing the `variantKey`, you can effectively handle situations where the same optimized extraction logic needs to be applied to pages with different structures, even if they share the same origin. This allows for more precise example grouping and enables the generation of static extractors that are specific to each variant of the page structure.

It's important to note that the `variantKey` should be used only when necessary. In most cases, the default behavior of grouping examples by the page origin is sufficient. However, when dealing with complex websites or when you require more granular control over example grouping, the `variantKey` provides a powerful mechanism to optimize the extraction process and ensure accurate results.

## When to use optimized extractors vs AI extractors

* Use AI extractors when:
  * Extracting non-exact strings (e.g., booleans, summaries).
  * Dealing with complex schemas.
  * Expecting a small number of executions.

* Use optimized extractors when:
  * Cost is a significant factor.
  * Expecting a high number of runs.
  * Page structure is very similar across executions.

Choose the appropriate extractor based on your specific requirements, considering factors such as data complexity, execution frequency, and cost optimization.

## What are labels and how to use them?

Labels are used to identify and differentiate extractors for billing and monitoring purposes. Assign a unique label to each extractor to track its usage and costs effectively.

You can also use labels to set limits on AI spend per extractor. More on this later.

## What is `strategy` and how should it be used?

The `strategy` parameter in the extractor functions allows you to control two key aspects of the extraction process:

1. **Web extraction method:** It determines how data is extracted from the webpage before passing it to the LLM. Currently supported strategies are:

* `"HTML"`: *This is the default option*. Uses the HTML source of the page or locator for extraction. This strategy is suitable when the desired data is present within the HTML elements and is best extracted based on the DOM structure.
* `"IMAGE"`: Uses screenshots of the page or locator for extraction. This strategy is useful when the information you want to extract is primarily visual and not easily identifiable in the HTML structure.

2. **LLM selection:** The strategy also influences the choice of the LLM to use for extraction, which directly impacts the cost. The `model` property within the strategy allows you to specify the desired model. Options are: `"claude-3-opus"`, `"claude-3-sonnet"`, `"claude-3-haiku"`, `"gpt4-turbo"`, or `"gpt3.5-turbo"`. By default, the `"claude-3-haiku"` model is used.

When deciding on the strategy to use, consider the following factors:

* Nature of the page: If the information you want to extract is mainly visual or not easily accessible through the HTML structure, use the `"IMAGE"` strategy. If the data is well-structured within the HTML elements, the `"HTML"` strategy is more suitable.

* Cost considerations: The AI model used for extraction directly affects the cost incurred.

Overall, we suggest that you start with the default strategy (method and model) and iterate based on the results.

For more details, see [extractArrayFromPage](/automation-sdks/intuned-sdk/optimized-extractors/functions/extractArrayFromPage), [extractArrayFromLocator](/automation-sdks/intuned-sdk/optimized-extractors/functions/extractArrayFromLocator), [extractObjectFromPage](/automation-sdks/intuned-sdk/optimized-extractors/functions/extractObjectFromPage), and [extractObjectFromLocator](/automation-sdks/intuned-sdk/optimized-extractors/functions/extractObjectFromLocator).

## extractStructuredDataFromContent

`extractStructuredDataFromContent` enables extracting data from arbitrary content, useful when you want to extract structured data from some text or an image.

<CodeGroup>
  ```typescript extractStructuredDataFromContent - Text
  const result = extractStructuredDataFromContent({ 
    type: "text", 
    data: `"To Kill a Mockingbird" is a fiction novel written by Harper Lee. Published in 1960, this classic book delves into the themes of racial injustice and moral growth. The story is set in the American South during the 1930s. The book's ISBN is 978-0-06-112008-4.` 
  }, 
  {
    label: "book",
    model: "claude-3-haiku",
    dataSchema: {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the book"
        },
        "author": {
          "type": "string",
          "description": "The author of the book"
        },
        "published_year": {
          "type": "integer",
          "description": "The year the book was published"
        },
        "genre": {
          "type": "string",
          "description": "The genre of the book"
        },
        "ISBN": {
          "type": "string",
          "description": "The International Standard Book Number of the book"
        }
      },
      "required": ["title", "author", "published_year", "genre", "ISBN"]
    }
  })

  // {
  //  title: 'To Kill a Mockingbird',
  //  author: 'Harper Lee',
  //  published_year: 1960,
  //  genre: 'fiction',
  //  ISBN: '978-0-06-112008-4'
  // }
  ```

  ```typescript extractStructuredDataFromContent - Image
  const result2 = extractStructuredDataFromContent({
    type: "image-url",
    image_type: "png",
    data: "https://intuned-docs-public-images.s3.amazonaws.com/guides/book-details.png"
    },
    {
      label: "image",
      model: "claude-3-haiku",
      dataSchema: {
        "type": "object",
        properties: {
          title: {
            type: "string",
          },
          in_stock: {
            type: "boolean"
          }
        },
        "required": ["title", "in_stock"]
      }
  });

  // { title: 'A Light in the Attic', in_stock: true }
  ```
</CodeGroup>

For more details, see [extractStructuredDataFromContent](/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromContent).


# Concepts and terminology
Source: https://docs.intunedhq.com/docs/getting-started/concepts



## What is Intuned?

Intuned is the browser automation platform for developers and product teams. Our mission is to bridge the API gap when official APIs are not available. Developers use Intuned to develop, deploy, and monitor reliable browser automations.

## Projects in Intuned

### What is an Intuned project?

A Project is a set of APIs and settings that are encapsulated as a single entity. A project can be created, edited, and deployed.

* Projects have names, and each project's name should be unique within the workspace.
* Projects need to be deployed to be consumed and used.

### What is an API in Intuned?

Intuned projects consist of a set of APIs. An API is a function that can be called to execute a specific action or extract specific data. You define APIs within Intuned projects as code.

## Authenticated projects in Intuned

To extract data or take actions on behalf of a user, APIs needs to work in the context of a user.
To obtain user context, you must be authorized to log into the target service with the user's identity (Auth Session).
Intuned streamlines creating and maintaining authenticated integrations.

### Can an project have Authenticated and Non-Authenticated APIs?

Authentication adds overhead to API executions. For this reason, we recommend that a project's APIs are all authenticated or all unauthenticated.

## Workspace in Intuned

A workspace is the top-level logical entity that allows you to govern access control over your Intuned resources. Each workspace can have more than one project, and multiple users can be in the same workspace. In general, we recommend that a single company or team share a workspace.

### Can a user have access to more than one workspace?

Yes, users have access to more than one workspace. Once logged in, you can switch between the workspaces they are a member of.

## Consuming a project

Once a project is deployed, it can be consumed by directly calling the APIs within the project or using Jobs and Queues as a way to orchestrator calling these APIs.

### Sync API

HTTP API that can be called synchronously. A synchronous API will return the result of the run in the same HTTP call that triggered the run.

### Async API

HTTP API that can be called asynchronously. This means that the API will return a run id that can be used to check the status/result of the run.

### Jobs API

Jobs are a higher-level abstraction on top of the APIs. One of the main use cases for it is scrapers that need to run regularly. Jobs can be created, deleted, and triggered via the Jobs API or Intuned's UX.

Each job has a schedule (when to run), a sink (where to send data to), a configuration (how to run), and a payload (what to run).

## Monitoring in Intuned

Intuned provides a monitoring functionality that allows you to monitor the usage and reliability of your projects.


# Welcome to Intuned
Source: https://docs.intunedhq.com/docs/getting-started/introduction

The browser automation platform for developers and product teams.

<CardGroup>
  <Card title="Quick start" icon="circle-play" href="/docs/getting-started/quick-start">
    Build your first automation project!
  </Card>

  <Card title="Demo" icon="bullseye-pointer" href="https://cal.com/team/intuned/get-started">
    See Intuned in action
  </Card>

  <Card title="Talk to us" icon="phone" href="https://cal.com/team/intuned/get-started">
    Let us help
  </Card>

  <Card title="Community" icon={<svg enable-background="new 0 0 2447.6 2452.5" viewBox="0 0 2447.6 2452.5" xmlns="http://www.w3.org/2000/svg"><g clip-rule="evenodd" fill-rule="evenodd"><path d="m897.4 0c-135.3.1-244.8 109.9-244.7 245.2-.1 135.3 109.5 245.1 244.8 245.2h244.8v-245.1c.1-135.3-109.5-245.1-244.9-245.3.1 0 .1 0 0 0m0 654h-652.6c-135.3.1-244.9 109.9-244.8 245.2-.2 135.3 109.4 245.1 244.7 245.3h652.7c135.3-.1 244.9-109.9 244.8-245.2.1-135.4-109.5-245.2-244.8-245.3z" fill="#36c5f0"/><path d="m2447.6 899.2c.1-135.3-109.5-245.1-244.8-245.2-135.3.1-244.9 109.9-244.8 245.2v245.3h244.8c135.3-.1 244.9-109.9 244.8-245.3zm-652.7 0v-654c.1-135.2-109.4-245-244.7-245.2-135.3.1-244.9 109.9-244.8 245.2v654c-.2 135.3 109.4 245.1 244.7 245.3 135.3-.1 244.9-109.9 244.8-245.3z" fill="#2eb67d"/><path d="m1550.1 2452.5c135.3-.1 244.9-109.9 244.8-245.2.1-135.3-109.5-245.1-244.8-245.2h-244.8v245.2c-.1 135.2 109.5 245 244.8 245.2zm0-654.1h652.7c135.3-.1 244.9-109.9 244.8-245.2.2-135.3-109.4-245.1-244.7-245.3h-652.7c-135.3.1-244.9 109.9-244.8 245.2-.1 135.4 109.4 245.2 244.7 245.3z" fill="#ecb22e"/><path d="m0 1553.2c-.1 135.3 109.5 245.1 244.8 245.2 135.3-.1 244.9-109.9 244.8-245.2v-245.2h-244.8c-135.3.1-244.9 109.9-244.8 245.2zm652.7 0v654c-.2 135.3 109.4 245.1 244.7 245.3 135.3-.1 244.9-109.9 244.8-245.2v-653.9c.2-135.3-109.4-245.1-244.7-245.3-135.4 0-244.9 109.8-244.8 245.1 0 0 0 .1 0 0" fill="#e01e5a"/></g></svg>} href="https://join.slack.com/t/intuned-users/shared_invite/zt-2k6bjpzyo-~6ez73_z8cR8I87H~qYDTQ">
    Join us!
  </Card>
</CardGroup>

## Introduction

Building integrations and scrapers when official APIs are not available is not easy..

<b>Intuned</b> is a platform to develop, deploy, and monitor reliable browser automation when official APIs are not available - *Reliability Powered by AI.*

Intuned's automation projects are code-based functions, written in typescript and work by interacting with a browser via a powerful runtime ([playwright](/automation-sdks/playwright/overview) + [@intuned/sdk](/automation-sdks/intuned-sdk/overview)). We have an [automation IDE](/docs/platform/develop/ide) to make the development of those projects easier, we also handle (deploying)\[/docs/platform/deploy] them and exposing them as APIs for [easy consumption](/docs/platform/consume). You also get [monitoring](/docs/platform/monitor) out of the box! Last but not least, we have a deep focus on reliability and we use AI to do that.

<Card title="Ready to get started?" icon="circle-play" href="./quick-start">
  Build your first automation project!
</Card>

## How does it work

The steps below describe how the Intuned platform works at a high level.

<Steps titleSize="h2">
  <Step title="Develop" icon="code">
    Intuned platform has an IDE built to speed up the process of building browser automations.
    Intuned IDE comes with custom features like action recording, selector creator and more! To learn more checkout [Develop](/docs/platform/develop/overview).

    <p align="center">
      <img src="https://intuned-docs-public-images.s3.amazonaws.com/website/develop.png" />
    </p>
  </Step>

  <Step title="Deploy" icon="rocket">
    Intuned's projects can be deployed to with a single click and within a minute. To learn more checkout [Deploy](/docs/platform/deploy).

    <p align="center">
      <img src="https://intuned-docs-public-images.s3.amazonaws.com/website/deploy.png" />
    </p>
  </Step>

  <Step title="Consume" icon="globe">
    Start consuming your projects by making API calls directly or scheduling jobs for scraping tasks. To learn more checkout [Consume](/docs/platform/consume)

    <p align="center">
      <img src="https://intuned-docs-public-images.s3.amazonaws.com/website/consume.png" />
    </p>
  </Step>

  <Step title="Monitor" icon="monitor-waveform">
    Get proactive alerts on failures - with access to previous runs' traces, recordings, and results. To learn more checkout [Monitor](/docs/platform/monitor)

    <p align="center">
      <img src="https://intuned-docs-public-images.s3.amazonaws.com/website/monitor.png" />
    </p>
  </Step>
</Steps>

## Why Intuned?

<CardGroup cols={3}>
  <Card title="Reliability powered by AI" icon="microchip-ai" />

  <Card title="Scalable and turnkey infrastructure" icon="cloud-binary" />

  <Card title="Out-of-the-box monitoring" icon="sensor-cloud" />

  <Card title="Powerful SDK for browser automation" icon="codepen" />

  <Card title="Built in authentication infrastructure" icon="fingerprint" />
</CardGroup>

<Note>Ready to get started? checkout our [Quick start](./quick-start) guide</Note>


# Quick start
Source: https://docs.intunedhq.com/docs/getting-started/quick-start



Intuned is the browser automation platform for developers and product teams. Follow this step by step tutorial to build, deploy, and call your first browser automaton project on Intuned.

### 1. Create a workspace

[Contact us](https://cal.com/forms/d01e34f3-5ef7-4057-8a3c-701dfa2d4f28) to create a workspace. Its free to try!
A workspace is the top level logical entity allows you to govern access control over your Intuned resources. To read more, checkout [Workspace](/docs/platform/manage).

### 2. Create a project

Projects are the core building block in Intuned. Each workspace can have one or more projects. Use a project to build a scraper or, an automation or an integration with website that lacks APIs.

Open your workspace and create a new project with name `new-project`.
![New Project](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/new-project-full.gif)

### 3. Create Books API

APIs are the building blocks of your project. They are the functions that you will call to interact with the browser.

<AccordionGroup>
  <Accordion title="Create an API file">
    Create new API (`api/books.ts`).
    ![New API](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/new-api-full.gif)
  </Accordion>

  <Accordion title="Create API logic">
    Copy the following code into the newly created `api/books.ts` file.

    ```typescript
    import { BrowserContext, Page } from "@intuned/playwright-core";
    import { extendPlaywrightPage } from "@intuned/sdk/playwright";

    interface Params {
      // Add your params here
      category: string;
    }

    export default async function handler(
      params: Params,
      _playwrightPage: Page,
      context: BrowserContext
    ) {
      const page = extendPlaywrightPage(_playwrightPage);

      await page.goto("https://books.toscrape.com/");

      // playwright logic
      await page.getByRole("link", { name: params.category }).click();

      // @intuned/sdk helper!
      const result = await page.extractArrayOptimized({
        itemEntityName: "book",
        label: "books-scraper",
        itemEntitySchema: {
          type: "object",
          properties: {
            name: {
              type: "string",
              description: "name of the book",
              primary: true,
            },
            price: {
              type: "string",
              description: "price of the book. An example is £26.80",
            },
          },
          required: ["name", "price"],
        },
      });

      return result;
    }
    ```
  </Accordion>
</AccordionGroup>

### 4. Run the API

Test your API in the Intuned IDE.

<AccordionGroup>
  <Accordion title="Pick `books` api">
    Pick the `books` api from dropdown.

    ![Pick api](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/pick-api.gif)
  </Accordion>

  <Accordion title="Click Run">
    Click the Run Button.

    ![Run Button](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/run-button-full.png)
  </Accordion>

  <Accordion title="Create Parameters set">
    Create a new parameters set for the API you just created. Intuned enables you to create multiple parameter sets for the same API. This helps you to test and iterate on API. Create param set "Novels" and copy the following:

    ```json
    {
      "category": "Novels"
    }
    ```

    ![New Parameters](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/new-params-full.png)
  </Accordion>

  <Accordion title="Click run again!">
    Click the Run Button again that the first param set is created.
    ![Run Button](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/run-button-full.png)
  </Accordion>

  <Accordion title="View run results">
    After the API run is complete. You can look at the returned result in the terminal.
    ![Result](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/api-results-full.png)
  </Accordion>
</AccordionGroup>

### 5. Deploy it

Intuned enabled you to deploy your project with a click of a button. Lets do it!
![Deploy](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/deployment-full.gif)

To learn more about deployments, checkout [Deployments](/docs/platform/deploy).

### 6. Call your API

Now that your project API is deployed you have [multiple ways](/docs/platform/consume) to call it. You can call the API directly or schedule a job to run it at a specific time. For now, we will call the API directly.

<AccordionGroup>
  <Accordion title="Create an API key">
    You can create an API key by going to [https://app.intuned.io/api-keys](https://app.intuned.io/api-keys)
    ![API Key](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/create-api-key.gif)
  </Accordion>

  <Accordion title="Get your workspace Id">
    You can find it by going to [https://app.intuned.io/settings/workspace](https://app.intuned.io/settings/workspace)

    ![Workspace Id](https://intuned-docs-public-images.s3.amazonaws.com/quick-start/create-workspace-id.gif)
  </Accordion>

  <Accordion title="Call the API">
    Now that you have your API key and your workspace Id, you are ready to call the API. Intuned exposes a REST API that you can call either call directly or use the [`@intuned/client`](/client-apis) to call.

    <CodeGroup>
      ```bash REST API
      # Replace <WORKSPACE_ID> and <API_KEY> with your workspace id and api key from step above.

      curl --request POST \
        --url https://app.intuned.io/api/v1/workspace/<WORKSPACE_ID>/projects/new-project/run \
        --header 'Content-Type: application/json' \
        --header 'x-api-key: <API_KEY>' \
        --data '{
        "api": "books",
        "parameters": {
          "category": "Novels"
        }
      }'
      ```

      ```typescript Typescript Client SDK
      // Replace <WORKSPACE_ID> and <API_KEY> with your workspace id and api key from step above.

      // you can install the client sdk by running `npm install @intuned/client` or `yarn add @intuned/client`

      import { IntunedClient } from "@intuned/client";

      const intunedClient = new IntunedClient({
        apiKey: "<API_KEY>",
        workspaceId: "<WORKSPACE_ID>",
      });

      async function run() {
        const result = await intunedClient.project.run.sync("new-project", {
          api: "books",
          parameters: {
            "category": "Novels"
          },
        });

        // Handle the result
        console.log(result)
      }

      run();
      ```
    </CodeGroup>
  </Accordion>
</AccordionGroup>


# How to use Credentials-based auth sessions
Source: https://docs.intunedhq.com/docs/guides/auth/how-to-authenticate-with-credentials



## Goal

In this how to guide, we will go over how to use Credentials-based auth sessions. For this example, we will use [OrangeHRM (demo site)](https://opensource-demo.orangehrmlive.com/web/index.php/auth/login) as the target service.

Follow this guide step by step or you can use the `Credentials based auth sessions` project template to get a jump start. You can also watch a walkthrough of this guide below:

<iframe width="560" height="315" src="https://www.loom.com/embed/df53a15788504c86a06e4c0f3b37e5f6?sid=067d392c-d877-4de5-a365-0356bd40a041" title="How to automate back office tasks" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />

## Step by step

### 1. Create a project and enable auth-sessions

In this guide, we will use Credentials-based auth sessions. In this type of auth sessions, the user credentials are used to run a browser automation code that creates a session in the target service. We also persist the credentials to use when the session expires.

1. Navigate to [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Click `New` to create a new project
3. Navigate to `Intuned.json`, which serves as the IDE settings
4. Select `Auth Session` tab and set the following configurations
   * Toggle `Enable auth sessions` on
   * Set `Auth session type` to `API created`

To learn more about credentials-based auth sessions, check out [Credentials-based auth sessions](/docs/auth-sessions/overview#credentials-based-auth-sessions).

### 2. implement the `check`, `create` and `refresh` functions

Credentials-based auth sessions require the following functions to be implemented:

* `check` function: This function is called before executing any authenticated action (API). If the function returns false, this signals that the auth session is expired/invalid and the auth session will be marked as expired for Recorder-based auth sessions. The API that was called will return 401 in this case.

* `create` function: this function is used when a new auth session needs to be created/updated. This function takes the user provides credentials and performs browser automation that logs the user into the target service.

* `refresh` function: this function is used to auto refresh the auth session when it expires. In most cases, the logic of the `create` and `refresh` functions are identical.

1. Navigate to `auth-sessions` folder and define the scripts needed to sign into the target service.

* `create.ts` should be defined to log the user into the target service.

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

export interface CreateParams {
  username: string;
  password: string;
}

export default async function* create(
  params: CreateParams,
  _playwrightPage: Page,
  context: BrowserContext,
  refresh: boolean
): AsyncGenerator<unknown, any, string> {
  const page = extendPlaywrightPage(_playwrightPage);
  await page.goto("https://opensource-demo.orangehrmlive.com/");
  await page.getByPlaceholder("Username").fill(params.username);
  await page.getByPlaceholder("Password").fill(params.password);
  await page.getByRole("button", { name: "Login" }).click();
  await page.waitForURL(
    "https://opensource-demo.orangehrmlive.com/web/index.php/dashboard/index"
  );
}

```

* `check.ts` should be defined to verify that the auth session is valid.

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

export default async function check(
  _playwrightPage: Page,
  context: BrowserContext
): Promise<boolean> {
  const page = extendPlaywrightPage(_playwrightPage);

  await page.goto(
    "https://opensource-demo.orangehrmlive.com/web/index.php/dashboard/index"
  );
  const redirectedToLogin =
    page.url() ===
    "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login";

  return !redirectedToLogin;
}
```

* in this example, the `refresh` function default implementation will call the `create` function. This is will work fine here - no need to change it.

### 3. Create the authenticated APIs

Create APIs for all actions you would like to automate.

1. Create an API named `add-new-user.ts` and write the script to add a new user to the HR portal.

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

interface Params {
  employeeName: string
  username: string
  password: string
}

export default async function handler(
  params: Params,
  _playwrightPage: Page,
  context: BrowserContext
) {
  const page = extendPlaywrightPage(_playwrightPage);
  await page.goto("https://opensource-demo.orangehrmlive.com/web/index.php/admin/viewSystemUsers")

  await page.getByRole('button', { name: 'Add' }).click();

  await page.locator(".oxd-select-text-input").nth(0).click();
  await page.getByRole('option', { name: 'Admin' }).click();

  await page.getByPlaceholder('Type for hints...').fill(params.employeeName);
  await page.getByRole('option', { name: params.employeeName }).click();

  await page.locator(".oxd-select-text-input").nth(1).click();
  await page.getByRole('option', { name: 'Enabled' }).click();

  await page.getByRole('textbox').nth(2).fill(params.username);

  await page.locator('[type="password"]').nth(0).fill(params.password)
  await page.locator('[type="password"]').nth(1).fill(params.password)

  await page.getByRole('button', { name: 'Save' }).click();

  await page.waitForTimeout(2_000);

  const errorsLocators = await page.locator(".oxd-input-group__message").all()
  const messages = await Promise.all(errorsLocators.map(i => i.textContent()))

  if (messages.length > 0) {
    return {
      success: false,
    }
  }

  return {
    success: true
  }

}
```

2. Create an API named `get-claims.ts` and write the script to get the employee claims

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

interface Params {}

export default async function handler(
  params: Params,
  _playwrightPage: Page,
  context: BrowserContext
) {
  const page = extendPlaywrightPage(_playwrightPage);
  await page.goto(
    "https://opensource-demo.orangehrmlive.com/web/index.php/claim/viewAssignClaim"
  );

  const claims = await page.extractStructuredData({
    label: "claims",
    dataSchema: {
      type: "object",
      properties: {
        claims: {
          type: "array",
          items: {
            type: "object",
            properties: {
              referenceId: {
                type: "string",
                description: "claim reference id",
              },
              employeeName: {
                type: "string",
                description: "claim employee name",
              },
              eventName: {
                type: "string",
                description: "event nam",
              },
              currency: {
                type: "string",
                description: "claim currency",
              },
              submittedDate: {
                type: "string",
                description: "when the claim was submitted",
              },
              status: {
                type: "string",
                description: "claim status",
              },
              amount: {
                type: "string",
                description: "claim amount",
              },
            },
            required: [
              "amount",
              "status",
              "submittedDate",
              "currency",
              "eventName",
              "employeeName",
              "referenceId",
            ],
          },
        },
      },
      required: ["claims"],
    },
  });

  return claims;
}
```

### 4. Validate the APIs in the IDE and Deploy

1. [Create an auth session in the IDE](/docs/guides/platform/how-to-manage-auth-sessions#create-credentials-based-auth-session-in-the-ide)
2. Validate `add-new-user` and `get-claims` APIs with the auth session you created in the previous step.

### 5. Deploy and validate the deployed APIs

1. [deploy the project](/docs/guides/platform/how-to-deploy-a-project)

2. [Create auth session for the deployed project](/docs/guides/platform/how-to-manage-auth-sessions#create-auth-session-for-deployed-projects)

3. Validate `add-new-user` and `get-claims` APIs with an simple [async request](/client-apis/api-reference/projectrun/run-api--async-start)

## (Optional) How to build UX to allow users to "connect to OrangeHRM"

One main use case of auth session is building integration with services that require user authentication and has no APIs. For example, lets assume that you are building a EHR/automation platform and you to automate the process of pulling claims. To do this on behalf of your users, you would need to build a UX that allows users to connect their OrangeHRM accounts to your EHR/automation platform. To see an example of this, please checkout the following project and use it as a guide:

## (Optional) Build an authenticated scraper using service accounts

Lets assume that we have the above project and APIs created and that we want to use them to build an authenticated scraper that will retrieve all claims from a cretin account on a daily basis. Lets also assume that this account access will be done via a static set of credentials that we will have.

You can watch a walk through of this guide below:

<iframe width="560" height="315" src="https://www.loom.com/embed/3488fb24bda04278ae88d5b018d22fd3?sid=367ed5d8-6832-4d22-9f06-70c71a4613d9" title="How to automate back office tasks" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />

### 1. Create an auth session using the Intuned UI

1. Navigate to the project that you have created in the previous steps
2. Click on the `Auth Sessions` tab
3. Click on `New Auth Session`
4. Provide an auth session name. For example, `orange-hrm-service-account`
5. Paste new credentials for the target service

```
{
    "employeeName": "Service Account",
    "username": "test-123",
    "password": "test-123"
}
```

![Create Auth Session](https://intuned-docs-public-images.s3.amazonaws.com/auth/hmr-service-account.png)

### 2. Create a job to retrieve all claims daily

Jobs are a way to schedule recurring or batched/grouped executions. For more info about Jobs, checkout [Jobs](/docs/platform/consume/jobs).

In this example, we know that we need to call the `get-claims` API and send the result to a webhook. We will create a job that does this weekly.

Creating jobs can be done via UI or API. For this example, we will use the UI. Checkout [Jobs API overview](/client-apis/api-reference/projectjobs) for more info.

1. Get a webhook url, for testing, you can use `https://webhook.site/` to get a temp url. In a real scenario, you will use your own webhook url and persist the data to store.

2. Go to the Jobs tab in the UX and create a new job with the following config. Don't forget to replace `<YOUR_WEBHOOK_URL>` with your webhook url.

```json
{
  "id": "orange-hrm-claims-webhook",
  "configuration": {
    "retry": {
      "initialInterval": 60000,
      "maximumAttempts": 5,
      "backoffCoefficient": 2
    },
    "runMode": "Order-Irrelevant",
    "version": "v1",
    "maxConcurrentRequests": 3
  },
  "sink": {
    "type": "webhook",
    "url": "<YOUR_WEBHOOK_URL>"
  },
  "schedule": {
    "intervals": [
      {
        "every": "1d"
      }
    ]
  },
  "authSession": {
    "id": "orange-hrm-service-account",
  }
  "payload": [
    {
      "apiName": "get-claims",
      "parameters": { }
    }
  ]
}
```

3. Now, what will happen is that every day, the job will run, get the data from the API and send the result to the webhook url you provided.

## Related

<CardGroup cols={2}>
  <Card href="/docs/auth-sessions/overview" title="Auth sessions">
    For more info on auth sessions.
  </Card>

  <Card href="/client-apis/api-reference/auth-sessions-overview" title="Auth sessions API">
    Auth sessions API reference
  </Card>

  <Card href="/docs/platform/consume/jobs" title="Jobs">
    For more info on Jobs and how to use them.
  </Card>

  <Card href="/client-apis/api-reference/projectjobs" title="Jobs API">
    Jobs API reference
  </Card>

  <Card href="/docs/platform/consume/queues" title="Queues">
    For more info on Queues and how to use them.
  </Card>

  <Card href="/client-apis/api-reference/queues-overview" title="Queues API">
    Queues API reference
  </Card>
</CardGroup>


# How to automate LinkedIn (Recorder-based auth sessions)
Source: https://docs.intunedhq.com/docs/guides/auth/how-to-automate-linkedin



## Goal

In this how to guide, we will go over how to build a LinkedIn integration! We will use the recorder-based auth session feature in Intuned to create a browser automation project that exposes an API to allow us to manage LinkedIn requests on a LinedIn account. The guide is meant to show how to use the recorder-based auth session in Intuned and is also meant to show how to build a LinkedIn integration - we will create APIs related to managing connections but this can be expanded to any automation on LinkedIn or other services with similar authentication workflow.

Follow this guide step by step or you can use the `Recorder based auth sessions` project template to get a jump start. You can also watch a walkthrough of this guide below:

<iframe width="560" height="315" src="https://www.loom.com/embed/fc56861199874850bee8a6dd33fd2aef?sid=13fe11b3-72e9-426e-9c38-28096dfd2a17" title="How to automate LinkedIn" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen />

## Step by step

### 1. Create a project and enable auth-sessions

In this guide, we will use Recorder-based auth sessions. This feature works by creating a new browser session (streamed to user machine) and enabling the user to authenticate on the target service. The auth session is then captured and stored in Intuned to be used when authenticated APIs are used.

1. Navigate to [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Click `New` to create a new project
3. Navigate to `Intuned.json`, which serves as the IDE settings
4. Select `Auth Session` tab and set the following configurations
   * Toggle `Enable auth sessions` on
   * Set `Auth session type` to `Recorder`
   * Set `Start URL` to `https://www.linkedin.com/login`. `Start URL` is the URL where we initialize the recorder session to.
   * Set `Finish URL` to `https://www.linkedin.com/feed`. After the user finishes authentication, the browser will navigate to this URL, when we detect that, we will capture the auth session and close the browser.

To learn more about recorder-based auth sessions, check out [Recorder-based auth sessions](/docs/auth-sessions/overview#recorder-based-auth-sessions).

### 2. implement the `check` function

Auth sessions require a `check` function to be implemented. This function is called before executing any authenticated action (API). If the function returns false, this signals that the auth session is expired/invalid and the auth session will be marked as expired for Recorder-based auth sessions. The API that was called will return 401 in this case.

1. Navigate to `auth-sessions/check.ts` file and write the script to verify that the auth session is valid.

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";

async function check(page: Page, context: BrowserContext): Promise<boolean> {
  await page.goto("https://www.linkedin.com", { waitUntil: "load" });
  return page.url().includes("feed");
}

export default check;
```

### 3. Create the authenticated LinkedIn APIs

1. Create APIs for all actions you would like to automate on LinkedIn.
   * Create an API named `get-connection-requests.ts` and write the script to retrieve connection requests.

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

interface Params {}

export default async function handler(
  params: Params,
  _playwrightPage: Page,
  context: BrowserContext
) {
  const page = extendPlaywrightPage(_playwrightPage);

  await page.goto("https://www.linkedin.com/mynetwork/invitation-manager/");
  await page.getByText("Manage invitations").waitFor({
    state: "visible",
  });

  const connectionRequests = await page.extractArrayOptimized({
    label: "connection-requests",
    itemEntityName: "connection-request",
    itemEntitySchema: {
      type: "object",
      properties: {
        name: {
          type: "string",
          description: "inviter name",
          primary: true,
        },
        title: {
          type: "string",
          description: "inviter title",
        },
        profileUrl: {
          type: "string",
          description: "inviter profile url",
        },
      },
      required: ["name", "title", "profileUrl"],
    },
  });

  return connectionRequests;
}
```

* Create an API named `accept-connection-request.ts` and write the script to accept connection request.

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

interface Params {
  inviterName: string;
}

export default async function handler(
  params: Params,
  _playwrightPage: Page,
  context: BrowserContext
) {
  const page = extendPlaywrightPage(_playwrightPage);

  await page.goto("https://www.linkedin.com/mynetwork/invitation-manager/");
  await page.getByText("Manage invitations").waitFor({
    state: "visible",
  });

  const invitationLocator = page.locator(".invitation-card", {
    hasText: params.inviterName,
  });

  const isInvitationVisible = await invitationLocator.isVisible();
  if (!isInvitationVisible) {
    return {
      success: false,
      message: "invitation not found",
    };
  }

  await invitationLocator.getByRole("button", { name: "Accept" }).click();

  return {
    success: true,
  };
}
```

### 4. Validate the APIs in the IDE and Deploy

1. [Create an auth session in the IDE](/docs/guides/platform/how-to-manage-auth-sessions#create-recorder-based-auth-session-in-the-ide)
2. Validate `get-connection-requests` and `accept-connection-request` APIs with the auth session you created in the previous step.

### 5. Deploy and validate the deployed APIs

1. [deploy the project](/docs/guides/platform/how-to-deploy-a-project)

2. [Create auth session for the deployed project](/docs/guides/platform/how-to-manage-auth-sessions#create-auth-session-for-deployed-projects)

3. Validate `get-connection-requests` and `accept-connection-request` APIs with an simple [async request](/client-apis/api-reference/projectrun/run-api--async-start)

## (Optional) How to build UX to allow users to "connect to LinkedIn"

One main use case of auth session is building integration with services that require user authentication and has no APIs. For example, lets assume that you are building a sales platform and you to automate the process of liking posts or sending connection requests on LinkedIn. To do this on behalf of your users, you would need to build a UX that allows users to connect their LinkedIn accounts to your sales platform. To see an example of this, please checkout the following project and use it as a guide:

## (Optional) How to use Jobs API with auth sessions

This section is an optional section that talks about how you can create authenticated jobs in Intuned. Jobs are a way to schedule recurring or batched/grouped executions. For more info about Jobs, checkout [Jobs](/docs/platform/consume/jobs).

In this example, we want to call the `get-connection-requests` API and send the result to a webhook on a regular based (1 week). We will create a job that does this.

Creating jobs can be done via UI or API. For this example, we will use the UI. Checkout [Jobs API overview](/client-apis/api-reference/projectjobs) for more info.

* Get a webhook url, for testing, you can use `https://webhook.site/` to get a temp url. In a real scenario, you will use your own webhook url and persist the data to store.

* Go to the Jobs tab in the UX and create a new job with the following config. Don't forget to replace `<YOUR_WEBHOOK_URL>` with your webhook url and `<AUTH_SESSION_ID>` with the auth session id you want to run this job with.

```json
{
  "id": "li-connect-requests-webhook",
  "configuration": {
    "retry": {
      "initialInterval": 60000,
      "maximumAttempts": 5,
      "backoffCoefficient": 2
    },
    "runMode": "Order-Irrelevant",
    "version": "v1",
    "maxConcurrentRequests": 3
  },
  "sink": {
    "type": "webhook",
    "url": "<YOUR_WEBHOOK_URL>"
  },
  "schedule": {
    "intervals": [
      {
        "every": "7d"
      }
    ]
  },
  "authSession": {
    "id": "<AUTH_SESSION_ID>",
  },
  "payload": [
    {
      "apiName": "get-connection-requests",
      "parameters": { }
    }
  ]
}
```

## (Optional) How to use Queue API with auth sessions

This section is an optional section that talks about how you can use the rate limited queue feature in Intuned with auth sessions. Queues are a way to control sequential tasks and setup rate limits on them. For more info about Queues, check out [Queues](/docs/platform/consume/queues).

The main use case for queues is to control the execution and set strict rate limits on it. In this example, we want to make sure all pending requests are accepted in time, however, we want to stick to strict rate limits for executing those APIs (`accept-connection-request` - to accept connections).

Creating queues can be done via API. Check out [Queue API overview](/client-apis/api-reference/queues-overview) for more info.

* Get a webhook url
* Below is an example payload to [create this queue](/client-apis/api-reference/projectqueues/create-queue).

Notes:

* don't forget to replace `<YOUR_WEBHOOK_URL>` with your webhook url and `<YOUR_AUTH_SESSION_ID>` with the auth session id you want to run this queue with.
* this queue will at most execute 3 actions at with in 1 hour.

```json
{
    id: "li-accept-request-queue",
    configuration: {
      runMode: "Default",
      retry: {
        maximumAttempts: 3,
      },
      rateLimits: [
        {
          limit: 3,
          duration: "1h",
        },
      ],
    },
    sink: {
      type: "webhook",
      url: "<YOUR_WEBHOOK_URL>",
    },
    authSession: {
      id: "<YOUR_AUTH_SESSION_ID>"
    }
  }
```

* As you are made aware of pending requests, you can seamlessly [append to the queue](/client-apis/api-reference/projectqueuesitems/append-queue-item) using the following input payload

```json
{
  apiName: "add-new-user",
  parameters: {
    "inviterName": "Faisal Ilaiwi"
  }
}
```

## Related

<CardGroup cols={2}>
  <Card href="/docs/auth-sessions/overview" title="Auth sessions">
    For more info on auth sessions.
  </Card>

  <Card href="/client-apis/api-reference/auth-sessions-overview" title="Auth sessions API">
    Auth sessions API reference
  </Card>

  <Card href="/docs/platform/consume/jobs" title="Jobs">
    For more info on Jobs and how to use them.
  </Card>

  <Card href="/client-apis/api-reference/projectjobs" title="Jobs API">
    Jobs API reference
  </Card>

  <Card href="/docs/platform/consume/queues" title="Queues">
    For more info on Queues and how to use them.
  </Card>

  <Card href="/client-apis/api-reference/queues-overview" title="Queues API">
    Queues API reference
  </Card>
</CardGroup>


# Guides
Source: https://docs.intunedhq.com/docs/guides/overview



## How to - scrapers

<CardGroup cols={2}>
  <Card href="/docs/guides/scrapers/how-to-scrape-to-webhook" title="How to scrape data and integrate with webhooks" />

  <Card href="/docs/guides/scrapers/how-to-scrape-to-s3" title="How to scrape data and integrate with S3" />

  <Card href="/docs/guides/scrapers/how-to-scrape-big-list" title="How to scrape a big list - nested scheduling" />

  <Card href="/docs/guides/scrapers/how-to-scrape-files" title="How to scrape files - persist and extract data" />
</CardGroup>

## How to - general

<CardGroup cols={2}>
  <Card href="/docs/guides/platform/how-to-get-project-name" title="How to get a project name?" />

  <Card href="/docs/guides/platform/how-to-view-all-projects" title="How to view all projects?" />

  <Card href="/docs/guides/platform/how-to-rename-project" title="How to rename a project?" />
</CardGroup>


# How to create a workspace?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-create-a-workspace



If you're new to Intuned simply sign up for a new account, by following the steps below

1. Navigate to [https://app.intuned.io](https://app.intuned.io)
2. Create an Intuned account with Google or GitHub

If you wish to create multiple workspaces [contact us](/docs/support/contact-us) for more info.


# How to create API keys?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-create-api-keys



1. Navigate to API Keys: [https://app.intuned.io/api-keys](https://app.intuned.io/api-keys)
2. Select Create New.
3. Provide your API Key a unique name
4. Then save the API Key in a secure location, this key will no longer be viewable by anyone.


# How to create environment variables?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-create-environment-variables



1. Navigate to the project you wish to add an environment variable to: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Environment variables` tab within the project
3. Select `+ New` to create a new environment variable
4. Define the key, value, and environment values as desired.


# How to delete workspace?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-delete-a-workspace



Contact [support](mailto:support@intunedhq.com) to delete your workspace.


# How to delete API keys?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-delete-api-keys



1. Navigate to API Keys: [https://app.intuned.io/api-keys](https://app.intuned.io/api-keys)
2. Filter to the API Key you want to delete
3. Select the `...` and select Revoke


# How to delete environment variables?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-delete-environment-variables



1. Navigate to the project you wish to delete an environment variable: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Environment variables` tab within the project
3. Find the environment variable you want to remove and select the `...` and then select `Delete`


# How to deploy a project?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-deploy-a-project



1. Navigate to the project: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Click `Open IDE`
3. Navigate to 'Deployment' tab on the right panel
4. Click 'Deploy' button


# How to edit environment variables?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-edit-environment-variables



1. Navigate to the project you wish to delete an environment variable: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Environment variables` tab within the project
3. Find the environment variable you want to edit and select the `...` and then select `Edit`


# How to get a workspace ID?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-get-a-workspace-id



1. Navigate to your workspace settings: [https://app.intuned.io/settings/workspace](https://app.intuned.io/settings/workspace)


# How to get a project name?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-get-project-name



1. Open the project from the projects list.
2. The project name is displayed at the top of the page.
   ![Project name](https://intuned-docs-public-images.s3.amazonaws.com/platform/project-name.png)


# How to invite users?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-invite-users



1. Navigate to the Members tab: [https://app.intuned.io/settings/members](https://app.intuned.io/settings/members).
2. Enter a email address in the Invite Member section
3. Select Invite


# How to manage auth sessions?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-manage-auth-sessions



## View all auth session

1. Navigate to the project you monitor auth session state on: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Auth Sessions` tab within the project

## Create Credentials-based auth session in the IDE

1. Navigate to the project of your choice: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Open IDE`
3. Set the run control to `create.ts`
4. Create parameter selecting `New parameters` in the `Parameters` dropdown setting the test credentials in the parameters
5. Set the parameters control to the parameter with the test credentials
6. Run the `create.ts` API
7. Upon completion, set the run control to an API in the `api` folder and you should see `new-session-...` set in the `Auth Sessions` dropdown.

![ide-cred-based-auth-session](https://intuned-docs-public-images.s3.amazonaws.com/auth/ide-cred-based-auth-session.gif)

## Create Recorder-based auth session in the IDE

1. Navigate to the project of your choice: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Open IDE`
3. Set the run control to an API in the `api` folder
4. Select the `Auth Session` dropdown and click `Record new session`
5. Navigate to the `Browser` tab and complete the authentication flow
6. Upon completion the browser session will complete and a new `recorder-session-...` will be set in the `Auth Sesssions` dropdown.

![ide-recorder-based-auth-session](https://intuned-docs-public-images.s3.amazonaws.com/auth/ide-recroder-based-auth-session.gif)

## Create auth session for deployed projects

<Note>If you wish to create via API, please refer to references for [Credentials-based auth](/client-apis/api-reference/projectauthsessionscreate/create-auth-session--start) and [Recorder-based auth](/client-apis/api-reference/projectauthsessionsrecorder/start-recorder-session-for-an-auth-session)</Note>

1. Navigate to the project of your choice: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Auth Sessions` tab within the project
3. Select `Create auth session` button and complete the flow

![create-auth-session-from-portal](https://intuned-docs-public-images.s3.amazonaws.com/auth/create-auth-session-from-portal.gif)

## Update an expired auth session

<Note>If you wish to update via API, please refer to references for [Credentials-based auth](/client-apis/api-reference/projectauthsessionscreate/create-auth-session--start) and [Recorder-based auth](/client-apis/api-reference/projectauthsessionsrecorder/start-recorder-session-for-an-auth-session)</Note>

1. Navigate to the project of your choice: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Auth Sessions` tab within the project
3. Find the expired auth session you are interested in updating
4. Select more options `...` button
5. Select `Update` button
6. Enter the necessary input, note the Id and proxy Url are optional, and click "Create"
   * For **Credentials-based auth session** you will be prompted to enter the user credentials into the input payload as defined in the `auth-sessions/create.ts` API.
   * For **Recorder-based auth session** a browser will pop-up on the target site you need to authenticate to at which point you can sign in and complete the creation.

![update-auth-session](https://intuned-docs-public-images.s3.amazonaws.com/auth/update-auth-session.gif)

## Delete auth sessions

1. Navigate to the project of your choice: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Auth Sessions` tab within the project
3. Find the auth session you are interested deleting
4. Select more options `...` button
5. Select `Delete` button


# How to manage user roles?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-manage-user-roles



<Note>Currently Intuned only has the admin role. Editor and viewer roles are coming soon.</Note>


# How to monitor runs?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-monitor-runs



## View all runs in a project

1. Navigate to the project you monitor runs on: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Runs` tab within the project

## View results and metadata of a specific run

1. Navigate to the project you monitor runs on: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Runs` tab within the project
3. Find the run you are interested in using filters
4. Select the run to view detailed run view

## View traces of a specific run

1. Navigate to the project you monitor runs on: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Select `Runs` tab within the project
3. Find the run you are interested in using filters
4. Select the run to view detailed run view
5. Select `Actions` menu
6. Select `View Traces`


# How to remove users?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-remove-users



1. Navigate to the Members tab: [https://app.intuned.io/settings/members](https://app.intuned.io/settings/members).
2. Find the member you want to remove and select the delete button.
3. Confirm that you want to delete selected user by selecting delete.


# How to rename a workspace?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-rename-a-workspace



1. Navigate to your workspace settings: [https://app.intuned.io/settings/workspace](https://app.intuned.io/settings/workspace)
2. Find the name of the workspace and select the edit button next to it
3. Update the name and hit enter to save. Note only alphanumeric names are supported


# How to rename a project?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-rename-project



<Warning> renaming a project will change the urls that are used to call the project. This means that any code that calls the project will need to be updated.</Warning>

1. Navigate to projects: [https://app.intuned.io/projects](https://app.intuned.io/projects)
2. Click the project you want to view details for.
3. On the General tab, update the name and click 'Rename'.


# How to use environment variables?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-use-environment-variables



1. [Create an environment variable](docs/guides/platform/how-to-create-environment-variables) and copy the environment variable key name
2. Utilize the process environment variable `process.env.<KEYNAME>`, as shown below

In the code sample, S3\_BUCKET, S3\_REGION, S3\_ACCESS\_KEY\_ID, and S3\_SECRET\_ACCESS\_KEY are all environment variables.

```typescript
import { uploadFileToS3 } from "@intuned/sdk/files";

export async function uploadFile(file: Parameters<typeof uploadFileToS3>[0], fileName?: string) {
    return await uploadFileToS3(file, {
        fileNameOverride: fileName, s3Configs: {
            bucket: process.env.S3_BUCKET,
            region: process.env.S3_REGION,
            accessKeyId: process.env.S3_ACCESS_KEY_ID,
            secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,
        }
    });
}
```


# How to view all projects?
Source: https://docs.intunedhq.com/docs/guides/platform/how-to-view-all-projects



1. Navigate to projects: [https://app.intuned.io/projects](https://app.intuned.io/projects)


# How to scrape a big list - nested scheduling
Source: https://docs.intunedhq.com/docs/guides/scrapers/how-to-scrape-big-list



## Goal

Lets assume that we want to scrape the books data from [https://books.toscrape.com/](https://books.toscrape.com/), however, we are interested in more than the book name and we want to get the book name, UPC and the number of reviews on each book. If you go to the [website](https://books.toscrape.com/), you will see that the info on the main page doesn't contain this extra info (UPC as an example) and that we would need to navigate to each book details page to get this info.

![Books list](https://intuned-docs-public-images.s3.amazonaws.com/guides/books-main.png)
![Books details](https://intuned-docs-public-images.s3.amazonaws.com/guides/book-details.png)

To scrape this data, we need to build a job that will go to the main list, get list to items to scrape and then scrape them one by one. Given that its a scraper, we want to show how to run this process every day and send the data to a webhook.

This guide will explain how to do the above in Intuned. We will use [Nested scheduling](/docs/platform/consume/nested-scheduling) that can be done within a [Job](/docs/platform/consume/jobs).

## Step by step

### 1. Create a project and required APIs

* Create new project.

* Create `book-details.ts` API. This API take a param `bookFullUrl` and then navigates to this url, scrapes the needed data (name, upc, numberOfReviews) from that page and returns it.

<Accordion title="`book-details.ts` code">
  Run it and make sure everything is working well.

  ```typescript book-details.ts
  import { BrowserContext, Page } from "@intuned/playwright-core";
  import { extendPlaywrightPage } from "@intuned/sdk/playwright";

  interface Params {
    bookFullUrl: string;
  }

  export default async function handler(
    params: Params,
    _playwrightPage: Page,
    context: BrowserContext
  ) {
    const page = extendPlaywrightPage(_playwrightPage);

    // go to the url that is passed in the params
    await page.goto(params.bookFullUrl);

    // optimized extractor!
    // for more info checkout 
    // https://docs.intunedhq.com/docs/data-extraction/web-data-extraction
    const result = await page.extractObjectOptimized({
      label: "book-deatils",
      entityName: "book_info",
      entitySchema: {
        type: "object",
        properties: {
          name: {
            type: "string",
            description: "book name",
          },
          upc: {
            type: "string",
            description: "upc of the book"
          },
          numberOfReviews: {
            type: "string",
            description: "Number of reviews on the book"
          }
        },
        required: ["name", "upc"]
      }
    });

    return result;
  }
  ```

  ```typescript Testing parameters
  {
      "bookFullUrl": "https://books.toscrape.com/catalogue/little-women-little-women-1_331/index.html"
  }
  ```
</Accordion>

* Create `books-all.ts` API. This API scrapes the name and url for all the books on [https://books.toscrape.com/](https://books.toscrape.com/). For each url, it calls the [`extendPayload`](/automation-sdks/intuned-sdk/runtime/functions/extendPayload) function. This function extends the payload of job run and add a new payload item to it. This new payload item will run as part of the same job run.

<Accordion title="`books-all.ts` code">
  The API doesn't take any parameters and gets the data on the first page. Run it and make sure everything is working well.

  ```typescript
  import { BrowserContext, Page } from "@intuned/playwright-core";
  import { extendPlaywrightPage } from "@intuned/sdk/playwright";
  import { extendPayload } from "@intuned/sdk/runtime";

  interface Params {
    // Add your params here
  }

  export default async function handler(
    params: Params,
    _playwrightPage: Page,
    context: BrowserContext
  ) {
    // extends playwright page with Intuned helpers.
    const page = extendPlaywrightPage(_playwrightPage);

    await page.goto("https://books.toscrape.com/");

    // optimized extractor!
    // for more info checkout 
    // https://docs.intunedhq.com/docs/data-extraction/web-data-extraction
    const result = await page.extractArrayOptimized({
      itemEntityName: "book",
      label: "books-scraper",
      itemEntitySchema: {
        type: "object",
        properties: {
          name: {
            type: "string",
            description: "name of the book",
            primary: true,
          },
          bookUrl: {
            type: "string",
            description: "url of the book"
          }
        },
        required: ["name", "bookUrl"],
      },
      // you can change the model and strategy type, 
      // for links, HTML is the right strategy to use
      strategy: {
        type: "HTML",
        model: "claude-3-sonnet"
      }
    });

    // for each book on the main page, schedule api to get details
    result.forEach(book => {
      // Extend job payload so it runs API `book-details` with provided params
      extendPayload({
        api: "book-details",
        parameters: {
          bookFullUrl: `${page.url()}${book.bookUrl}`,
        }
      })
    });
  }
  ```
</Accordion>

* Deploy the project.

### 2. Create a job

Jobs are a way to schedule recurring or batched/grouped executions. For more info about Jobs, checkout [Jobs](/docs/platform/consume/jobs).

In this scenario, we will schedule a job that runs daily with one payload item (api: `books-all`). When this API run, it will extend the job run payload and include 1 payload item (api: `book-details`) for each book on the main page.

Creating jobs can be done via UI or API. For this example, we will use the UI. Checkout [Jobs API overview](/client-apis/api-reference/projectjobs) for more info.

* Get a webhook url, for testing, you can use `https://webhook.site/` to get a temp url. In a real scenario, you will use your own webhook url and persist the data to store.

* Go to the Jobs tab in the UX and create a new job with the following config. Don't forget to replace `<YOUR_WEBHOOK_URL>` with your webhook url.

```json
{
  "id": "books-nested-scheduling",
  "configuration": {
    "runMode": "Order-Irrelevant",
    "maxConcurrentRequests": 5,
    "retry": {
      "maximumAttempts": 5
    }
  },
  "schedule": {
    "intervals": [
      {
        "every": "1d"
      }
    ]
  },
  "sink": {
    "type": "webhook",
    "url": "<YOUR_WEBHOOK_URL>"
  },
  "payload": [
    {
      "apiName": "books-all",
      "parameters": {
      }
    }
  ]
}
```

![Nested Scheduling Job](https://intuned-docs-public-images.s3.amazonaws.com/guides/nested-scheduling-job.gif)

### 3. Trigger the job

* Now that you have created a job, you can trigger it manually. This will run the job immediately and send the result APIs data to the webhook.

* You will have 1 webhook call for each API in the payload. In this case, even though you have 1 payload item in the job payload config, you will see that the job run had 20 more - one for each payload item that was added by the `books-all` API.

* You can look at the webhook payload below. It includes API name, parameters, runId, result and more.

![Webhook Job](https://intuned-docs-public-images.s3.amazonaws.com/guides/nested-scheduling-trigger.gif)

<Accordion title="Webhook payload">
  ![Webhook payload](https://intuned-docs-public-images.s3.amazonaws.com/guides/webhook-result-nested.png)
</Accordion>

## Summary

In this guide, we went over how to scrape a big list of items by using nested scheduling. We created a job that runs daily and scrapes the main page to get the list of items to scrape. For each item, we extended the job payload and added a new payload item to it. This new payload item is executed part of the same run and all the results are sent to the sink - webhook in this case.

## Related

<CardGroup cols={2}>
  <Card href="/docs/platform/consume/nested-scheduling" title="Nested scheduling">
    For more info on Nested scheduling and why its recommended.
  </Card>

  <Card href="/docs/platform/consume/jobs" title="Jobs">
    For more info on Jobs and how to use them.
  </Card>

  <Card href="/client-apis/api-reference/projectjobs" title="Jobs API">
    Jobs API reference
  </Card>
</CardGroup>


# How to scrape files - persist and extract data
Source: https://docs.intunedhq.com/docs/guides/scrapers/how-to-scrape-files



## Goal

Its very common in scraping workloads to need to scrape data from files. Think contracts, financial statements, product specs, etc.
In this guide, we will show you how you can use Intuned to extract data from webpages and files in a reliable and scalable way.

To do that, we will use the following page [https://sandbox.intuned.dev/pdfs](https://sandbox.intuned.dev/pdfs) as an example. The page contains a list of products along with a specs file for each of them. Our goal is to build an API that will extract data about each product and return them.

This guide will not go into details related to setting up a job or sending the result data to a webhook - we cover those in a different guides. The focus will be the API logic to extract the data using the [`@intuned/sdk`](/automation-sdks/intuned-sdk/overview) helpers.

![https://sandbox.intuned.dev/pdfs](https://intuned-docs-public-images.s3.amazonaws.com/guides/files-list.png)

### 1. Extract list of products from table

* In a new or existing project, create a new API. Call it `products.ts`.
* Within the created API, add the following code:

```typescript

// new logic to add to the newly created API.
await page.goto("https://sandbox.intuned.dev/pdfs");

// 
const monitors = await page.extractArrayOptimized({
    label: "pdf demo site",
    itemEntityName: "monitor",
    itemEntitySchema: {
        type: "object",
        properties: {
            "name": {
                type: "string",
                primary: true,
            },
            "manufacturer": {
                type: "string",
            },
            "model": {
                type: "string",
            },
            "spec_href": {
                type: "string",
                "description": "href value of the spec for the monitor"
            }
        },
        required: ["name", "spec_href", "manufacturer", "model"],
    },
});

console.log(monitors);
```

This logic uses the [`extractArrayOptimized`](/automation-sdks/intuned-sdk/optimized-extractors/functions/extractArrayFromPage) helper to extract the monitors info from the table into a `monitors` object.

Run the API and make sure the extractor is reading the right data and working as expected. Create empty parameters when asked.

![Run monitors API - part 1](https://intuned-docs-public-images.s3.amazonaws.com/guides/run-api-monitors-part1.gif)

### 2. Extract data from the specs file

* Add the following code to the `products.ts` API. Intuned has helpers  (`extractStructuredDataFromFile`) that extracts data from files. The [`extractStructuredDataFromFile`](/automation-sdks/intuned-sdk/ai-extractors/functions/extractStructuredDataFromFile) helper takes a file url and a json schema for data you are trying to extract and returns it as a json object. To learn more about file data extraction, checkout [File data extraction](/docs/data-extraction/file-data-extraction).

```typescript
    for (const monitor of monitors) {
        const specs = await extractStructuredDataFromFile({
            type: "pdf",
            source: {
                type: "url",
                "data": monitor.spec_href,
            },
        }, {
            label: "spec files",
            dataSchema: {
                type: "object",
                properties: {
                    "models": {
                        description: "models number included in this spec sheet",
                        type: "array",
                        items: {
                            type: "string"
                        }
                    },
                    "color_depth": {
                        type: "string",
                        description: "color depth of the monitor"
                    },
                    "max_resolution": {
                        type: "string",
                        description: "max rolustion of the screen and at what hz"
                    },
                    "power_source": {
                        type: "object",
                        properties: {
                            "power_rating": {
                                type: "string",
                            },
                            "prowser_consumption": {
                                type: "string",
                            }
                        }
                    },
                    "adpator": {
                        type: "string",
                        "description": "AC AD adaptor specs"
                    },
                    "dimensions": {
                        type: "object",
                        properties: {
                            "with_stand": {
                                type: "string"
                            },
                            "without_stand": {
                                type: "string"
                            }
                        },
                    },
                    "weight": {
                        type: "object",
                        properties: {
                            "with_stand": {
                                type: "string"
                            },
                            "without_stand": {
                                type: "string"
                            }
                        },
                    }
                },
                required: ["models", "color_depth", "max_resolution", "power_source", "adpator", "dimensions", "weight"],
            }
        });

        monitor.specs = specs;
    }

    return monitors;
```

## Summary

In this guide, we went over how to extract data from a list of items and then extract data from files. We used the `extractArrayOptimized` helper to extract the list of items and `extractStructuredDataFromFile` to extract data from files.

## Related

<CardGroup cols={2}>
  <Card href="./how-to-scrape-to-webhook" title="How to scrape data and integrate with webhooks">
    For more info on Jobs and how to use them.
  </Card>

  <Card href="/docs/platform/consume/jobs" title="Jobs">
    For more info on Jobs and how to use them.
  </Card>
</CardGroup>


# How to scrape data and save to S3
Source: https://docs.intunedhq.com/docs/guides/scrapers/how-to-scrape-to-s3



## Goal

In this how to guide, we will go over how to scrape data from a website and send it to your S3 bucket. For this example, we will use [https://books.toscrape.com/](https://books.toscrape.com/) as the data source. The goal is to scrape data from categories `Poetry` and `Travel` and send them to a S3 bucket. We want to be able to do this on demand or on a schedule.

## Step by step

### 1. Create a project and API

* Create new project.

* Create new API (books) with the following code. This API receives a param `category` and scrapes the books in this category. Notice that we are using [Optimized extractors](/docs/data-extraction/web-data-extraction#optimized-extractors) here. Notice also that the API returns an array of of the scraped books data.

* Run it and make sure everything is working well.

* Deploy the project.

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

interface Params {
  // Add your params here
  category: string;
}

export default async function handler(
  params: Params,
  _playwrightPage: Page,
  context: BrowserContext
) {
  const page = extendPlaywrightPage(_playwrightPage);

  await page.goto("https://books.toscrape.com/");

  // playwright logic
  await page.getByRole("link", { name: params.category }).click();

  // @intuned/sdk helper!
  const result = await page.extractArrayOptimized({
    itemEntityName: "book",
    label: "books-scraper",
    itemEntitySchema: {
      type: "object",
      properties: {
        name: {
          type: "string",
          description: "name of the book",
          primary: true,
        },
        price: {
          type: "string",
          description: "price of the book. An example is £26.80",
        },
      },
      required: ["name", "price"],
    },
  });

  return result;
}
```

### 2. Create a job with S3 sink

![S3 Job](https://intuned-docs-public-images.s3.amazonaws.com/guides/s3-job.gif)

Jobs are a way to schedule recurring or batched/grouped executions. For more info about Jobs, checkout [Jobs](/docs/platform/consume/jobs).

In this example, we know that we need to call the `books` api twice (one with category `Poetry` and another with category `Travel`) and send the result to a S3 bucket. We will create a job that does this on demand.

Creating jobs can be done via UI or API. For this example, we will use the UI. Checkout [Jobs API overview](/client-apis/api-reference/projectjobs) for more info.

* Get a S3 bucket configuration including the bucket name, region, and the [AWS access keys](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html) with write access to the bucket.

* Go to the Jobs tab in the UX and create a new job with the following config. Don't forget to replace `<YOUR_ACCESS_KEY_ID>` and `<YOUR_SECRET_ACCESS_KEY>` with your AWS access keys. Checkout [create job reference](/client-apis/api-reference/projectjobs/create-job) for more info.

```json
{
  "id": "books-s3",
  "configuration": {
    "runMode": "Order-Irrelevant",
    "maxConcurrentRequests": 5,
    "retry": {
      "maximumAttempts": 5
    }
  },
  "sink": {
    "type": "s3",
    "bucket": "intuned-sink",
    "prefix": "books",
    "region": "us-west-2",
    "skipOnFail": true,
    "accessKeyId": "<YOUR_ACCESS_KEY_ID>",
    "secretAccessKey": "<YOUR_SECRET_ACCESS_KEY>"
  },
  "payload": [
    {
      "apiName": "books",
      "parameters": {
        "category": "Poetry" 
      }
    },
    {
      "apiName": "books",
      "parameters": {
        "category": "Travel"
      }
    }
  ]
}
```

### 3. Trigger the job

![S3 Job](https://intuned-docs-public-images.s3.amazonaws.com/guides/trigger-s3-job.gif)

* Now that you have created a job, you can trigger it manually. This will run the job immediately and send the result API data to the S3 bucket.

* You will have S3 record for each API in the payload.

* You can look at the S3 payload below. It includes API name, parameters, runId, result and more.

<Accordion title="S3 payload">
  ```json
  {
      "apiInfo": {
          "name": "books",
          "parameters": {
              "category": "Travel"
          },
          "runId": "-cCPG1rLxQV-3Dl",
          "result": {
              "status": "completed",
              "result": [
                  {
                      "name": "It's Only the Himalayas",
                      "price": "£45.17"
                  },
                  {
                      "name": "Full Moon over Noah's Ark: An Odyssey to Mount Ararat and Beyond",
                      "price": "£49.43"
                  },
                  {
                      "name": "See America: A Celebration of Our National Parks & Treasured Sites",
                      "price": "£48.87"
                  },
                  {
                      "name": "Vagabonding: An Uncommon Guide to the Art of Long-Term World Travel",
                      "price": "£36.94"
                  },
                  {
                      "name": "Under the Tuscan Sun",
                      "price": "£37.33"
                  },
                  {
                      "name": "A Summer In Europe",
                      "price": "£44.34"
                  },
                  {
                      "name": "The Great Railway Bazaar",
                      "price": "£30.54"
                  },
                  {
                      "name": "A Year in Provence (Provence #1)",
                      "price": "£56.88"
                  },
                  {
                      "name": "The Road to Little Dribbling: Adventures of an American in Britain (Notes From a Small Island #2)",
                      "price": "£23.21"
                  },
                  {
                      "name": "Neither Here nor There: Travels in Europe",
                      "price": "£38.95"
                  },
                  {
                      "name": "1,000 Places to See Before You Die",
                      "price": "£26.08"
                  }
              ],
              "statusCode": 200
          }
      },
      "workspaceId": "8ee20714-1d06-4a49-9d2d-d033aaed8031",
      "project": {
          "name": "new-project",
          "id": "6b4930d6-90aa-4f9f-8d0c-3914d432ba45"
      },
      "projectJob": {
          "id": "books-s3"
      },
      "projectJobRun": {
          "id": "2cc04948-c913-4623-a520-6b44702f3599"
      }
  }
  ```
</Accordion>

### 4. Create a scheduled job

Lets assume that you need a job to be ran every day so you can keep your internal store updated with the latest books in some categories.

To do this, you will need to create a new job with a schedule configuration. Here is an example job config:

```json
{
  "id": "books-s3",
  "configuration": {
    "runMode": "Order-Irrelevant",
    "maxConcurrentRequests": 5,
    "retry": {
      "maximumAttempts": 5
    }
  },
  "schedule": {
    "intervals": [
      {
        "every": "1d"
      }
    ]
  },
  "sink": {
    "type": "s3",
    "bucket": "intuned-sink",
    "prefix": "books",
    "region": "us-west-2",
    "skipOnFail": true,
    "accessKeyId": "<YOUR_ACCESS_KEY_ID>",
    "secretAccessKey": "<YOUR_SECRET_ACCESS_KEY>"
  },
  "payload": [
    {
      "apiName": "books",
      "parameters": {
        "category": "Poetry" 
      }
    },
    {
      "apiName": "books",
      "parameters": {
        "category": "Travel"
      }
    }
  ]
}
```

## Related

<CardGroup cols={2}>
  <Card href="/docs/platform/consume/jobs" title="Jobs">
    For more info on Jobs and how to use them.
  </Card>

  <Card href="/client-apis/api-reference/projectjobs" title="Jobs API">
    Jobs API reference
  </Card>
</CardGroup>


# How to scrape data and send to a webhook
Source: https://docs.intunedhq.com/docs/guides/scrapers/how-to-scrape-to-webhook



## Goal

In this how to guide, we will go over how to scrape data from a website and send it to a webhook. For this example, we will use [https://books.toscrape.com/](https://books.toscrape.com/) as the data source. The goal is to scrape data from categories `Poetry` and `Travel` and send them to a webhook. We want to be able to do this on demand or on a schedule.

## Step by step

### 1. Create a project and API

* Create new project.

* Create new API (books) with the following code. This API receives a param `category` and scrapes the books in this category. Notice that we are using [Optimized extractors](/docs/data-extraction/web-data-extraction#optimized-extractors) here. Notice also that the API returns an array of of the scraped books data.

* Run it and make sure everything is working well. If you need a test param.

```json
{
  "category": "Novels"
}
```

* Deploy the project.

```typescript
import { BrowserContext, Page } from "@intuned/playwright-core";
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

interface Params {
  // Add your params here
  category: string;
}

export default async function handler(
  params: Params,
  _playwrightPage: Page,
  context: BrowserContext
) {
  const page = extendPlaywrightPage(_playwrightPage);

  await page.goto("https://books.toscrape.com/");

  // playwright logic
  await page.getByRole("link", { name: params.category }).click();

  // @intuned/sdk helper!
  const result = await page.extractArrayOptimized({
    itemEntityName: "book",
    label: "books-scraper",
    itemEntitySchema: {
      type: "object",
      properties: {
        name: {
          type: "string",
          description: "name of the book",
          primary: true,
        },
        price: {
          type: "string",
          description: "price of the book. An example is £26.80",
        },
      },
      required: ["name", "price"],
    },
  });

  return result;
}
```

### 2. Create a job with webhook sink

Jobs are a way to schedule recurring or batched/grouped executions. For more info about Jobs, checkout [Jobs](/docs/platform/consume/jobs).

In this example, we know that we need to call the `books` api twice (one with category `Poetry` and another with category `Travel`) and send the result to a webhook. We will create a job that does this on demand.

Creating jobs can be done via UI or API. For this example, we will use the UI. Checkout [Jobs API overview](/client-apis/api-reference/projectjobs) for more info.

* Get a webhook url, for testing, you can use `https://webhook.site/` to get a temp url. In a real scenario, you will use your own webhook url and persist the data to store.

* Go to the Jobs tab in the UX and create a new job with the following config. Don't forget to replace `<YOUR_WEBHOOK_URL>` with your webhook url.

```json
{
  "id": "books-webhook",
  "configuration": {
    "runMode": "Order-Irrelevant",
    "maxConcurrentRequests": 5,
    "retry": {
      "maximumAttempts": 5
    }
  },
  "sink": {
    "type": "webhook",
    "url": "<YOUR_WEBHOOK_URL>"
  },
  "payload": [
    {
      "apiName": "books",
      "parameters": {
        "category": "Poetry" 
      }
    },
    {
      "apiName": "books",
      "parameters": {
        "category": "Travel"
      }
    }
  ]
}
```

![Webhook Job](https://intuned-docs-public-images.s3.amazonaws.com/guides/webhook-job.gif)

### 3. Trigger the job

* Now that you have created a job, you can trigger it manually. This will run the job immediately and send the result API data to the webhook.

* You will have 1 webhook call for each API in the payload.

* You can look at the webhook payload below. It includes API name, parameters, runId, result and more.

![Webhook Job](https://intuned-docs-public-images.s3.amazonaws.com/guides/trigger-job.gif)

<Accordion title="Webhook payload">
  ```json
  {
    "apiInfo": {
      "name": "books",
      "parameters": { "category": "Poetry" },
      "runId": "vLCJ-j5ymLoi4DM",
      "result": {
        "status": "completed",
        "result": [
          { "name": "A Light in the Attic", "price": "£51.77" },
          { "name": "The Black Maria", "price": "£52.15" },
          { "name": "Shakespeare's Sonnets", "price": "£20.66" },
          { "name": "Olio", "price": "£23.88" },
          { "name": "You can't bury them all: Poems", "price": "£33.63" },
          { "name": "Slow States of Collapse: Poems", "price": "£57.31" },
          {
            "name": "Untitled Collection: Sabbath Poems 2014",
            "price": "£14.27"
          },
          { "name": "Poems That Make Grown Women Cry", "price": "£14.19" },
          { "name": "Night Sky with Exit Wounds", "price": "£41.05" },
          { "name": "salt.", "price": "£46.78" },
          {
            "name": "Quarter Life Poetry: Poems for the Young, Broke and Hangry",
            "price": "£50.89"
          },
          {
            "name": "Out of Print: City Lights Spotlight No. 14",
            "price": "£53.64"
          },
          { "name": "Les Fleurs du Mal", "price": "£29.04" },
          { "name": "Howl and Other Poems", "price": "£40.45" },
          {
            "name": "Leave This Song Behind: Teen Poetry at Its Best",
            "price": "£51.17"
          },
          {
            "name": "The Collected Poems of W.B. Yeats (The Collected Works of W.B. Yeats #1)",
            "price": "£15.42"
          },
          { "name": "The Crossover", "price": "£38.77" },
          { "name": "Booked", "price": "£17.49" },
          { "name": "Twenty Love Poems and a Song of Despair", "price": "£30.95" }
        ],
        "statusCode": 200
      }
    },
    "workspaceId": "9c67b0f1-6698-480d-9eca-0dd26ccd93f2",
    "project": {
      "name": "new-project",
      "id": "ea4d13e8-c434-4bf8-9723-3b97f03a1c8b"
    },
    "projectJob": { "id": "books-webhook" },
    "projectJobRun": { "id": "f3b3eef1-c201-4bad-9f32-8eb8b04fbae9" }
  }
  ```
</Accordion>

### 4. Create a scheduled job

Lets assume that you need a job to be ran every day so you can keep your internal store updated with the latest books in some categories.

To do this, you will need to create a new job with a schedule configuration. Here is an example job config:

```json
{
  "id": "books-webhook",
  "configuration": {
    "runMode": "Order-Irrelevant",
    "maxConcurrentRequests": 5,
    "retry": {
      "maximumAttempts": 5
    }
  },
  "schedule": {
    "intervals": [
      {
        "every": "1d"
      }
    ]
  },
  "sink": {
    "type": "webhook",
    "url": "<YOUR_WEBHOOK_URL>"
  },
  "payload": [
    {
      "apiName": "books",
      "parameters": {
        "category": "Poetry" 
      }
    },
    {
      "apiName": "books",
      "parameters": {
        "category": "Travel"
      }
    }
  ]
}
```

## Related

<CardGroup cols={2}>
  <Card href="/docs/platform/consume/jobs" title="Jobs">
    For more info on Jobs and how to use them.
  </Card>

  <Card href="/client-apis/api-reference/projectjobs" title="Jobs API">
    Jobs API reference
  </Card>
</CardGroup>


# Overview
Source: https://docs.intunedhq.com/docs/platform/consume/consume-overview

Learn how to consume your browser automations/projects

## Introduction

Before consuming a project, it must be deployed. Checkout [How to deploy a project](/docs/guides) to learn more.

To use a project functions and APIs, you can call them directly (HTTP APIs) or use Jobs and Queues to orchestrate them.

## Run API: Sync vs. Async

You can use the run APIs to execute a specific API function within a project. There are two ways to call it: Sync and Async.  Depending on how much time the API takes, you can choose to call it synchronously or asynchronously. Synchronous calls mean that the result is returned in the same HTTP call that was made to invoke API. Asynchronous calls mean that the result is returned in a separate HTTP call, using a `runId` that is returned in the first call.

### Sync API run

<Info> Syn Run API should be used with care - most browser automation APIs take time and using the Sync method is not advised in that case.</Info>

For sync run, you are making 1 call to the [Run Endpoint](/client-apis/api-reference/projectrun/run-api--sync), this call will contain the api, parameters and any other configs. The API result will contain the response of the API.

### Async API run

For async run, to execute an API and get the result, You are making 2 calls:

* A call to the [Run Start Endpoint](/client-apis/api-reference/projectrun/run-api--async-start), this call will contain the api, parameters and any other configs. The result for this call will contain the `runId` which can be used to get the result of the API.
* A call to the [Run Result Endpoint](/client-apis/api-reference/projectrun/run-api--async-result), this call will contain the `runId` and will return the result of the API.

## What is a runId?

When you execute any API on Intuned (directly or via jobs or queues), we will create and assign a unique `runId` to that execution. This `runId` can be used to check the status (and get result) of the execution and can be used for monitoring purposes.

## Jobs

Jobs are a way to schedule recurring or batched executions. Checkout [Jobs overview](./jobs) for more info.

## Queues

Queues are a way to orchestrate execution in a queue with controlled rate limits. They are useful when you have a large number of runs to execute and you want to control the rate at which they are executed or when dealing with web services that have strict rate limits. For more info about Queues, please refer to the [Queues API reference](/client-apis/api-reference/projectqueues).


# Jobs
Source: https://docs.intunedhq.com/docs/platform/consume/jobs



Jobs are a way to schedule recurring or batched/grouped executions. Some common use cases:

* Periodic scraping jobs. Lets assume that you have a scraper that needs to run every hour to get the latest data. In this case, you can build a set of APIs that do the scraping and return the data, and then setup a job to run every hour and send the data to a webhook or store it in S3.

* Lets say that you are trying to automate a set of tasks that need to be completed on demand. In this case, you can build a set of APIs that will do those tasks and setup a job without a schedule that you can trigger whenever you need to run those tasks. The payload can be one or more APIs each with the parameters to run it.

You can think of jobs as a higher level abstraction on top of the direct run API. Lets assume that you don't want to use Jobs, what you would do is directly call the run api periodically or when needed.

Each job has payload (what to run), configuration (how to run it), sink (where to send the result, optional), schedule (when to run - optional). More on this later.

## Job runs

Think of the job as a template/plan of execution, whenever an execution happen, it is called a job run.

Whenever a job is triggered, a job run is created. The job run contains information about the status of that specific run and the number of pending and completed payloads. Any API runs resulting from the job runs are also associated with that job run, so you can track the input and results of specific APIs in the job run.

## Jobs management and operations

Jobs management and operations can be done via UI or API. So for anything mentioned here, you can either do it in the UX (by going to the jobs tab as shown below) or via [APIs](/client-apis/api-reference/projectjobs).

![Jobs UI](https://intuned-docs-public-images.s3.amazonaws.com/platform/jobs-tab.png)

## Jobs operations

* **Pause jobs**: This will pause all in-progress job runs, stopping them for executing new payloads (running payloads will continue to run, but won't be retried). It will also pause the schedule of the job, so no new job runs will be created.
* **Resume jobs**: This will resume all paused job runs and the schedule of the job.
* **Trigger jobs**: This will manually trigger the job to run immediately, regardless of the schedule. Jobs cannot be triggered if they are paused.
* **Terminate job run**: terminates a specific job run.

## Job properties

### Job payload (what to run)

The payload configures what APIs to run as part of the job run. It is an array of payload objects. Each payload object has api to run and parameters to run it with.

<Info>
  During a job run, the payload of the job can be extended to include new APIs
  (with new params). Checkout [Nested scheduling](./nested-scheduling) for more
  info.
</Info>

### Configuration (how to run)

The configuration of a job configures the retry policy and the maximum amount of requests to run concurrently.

#### Retry policy

The retry policy consists of the following properties:

* `maximumAttempts`: The job-level maximum number of attempts to run a payload. This value can be overridden by the payload.
* `initialInterval`: The initial interval between retries, as milliseconds or an [ms-formatted string](https://github.com/vercel/ms).
* `maximumInterval`: The maximum interval between retries, as milliseconds or an [ms-formatted string](https://github.com/vercel/ms).
* `backoffCoefficient`: The exponential backoff coefficient to calculate the next retry interval.
  The total time to wait between retries is calculated as follows (`i` is the current attempt number, starting from 0):

```
calculatedInterval = initialInterval * (backoffCoefficient ^ [i])
timeToWait = min(calculatedInterval, maximumInterval)
```

<Info>
  If no retry policy is provided, it will default to 3 maximum attempts with no
  delay.
</Info>

<Note>
  The retries in jobs are not guaranteed to be executed in order. The job run
  will continue to process other payloads while the retries are pending.
</Note>

#### Maximum concurrent requests

The maximum concurrent requests configuration controls at most how many payloads can run at the same time. This does not guarantee that the payloads will start running at the same time.

<Info>
  If this is not configured, the job will default to running 5 payloads
  concurrently.
</Info>

### Schedule (when to run)

The schedule is an optional property to configures job runs to happen periodically.

<Info>If it is not provided, the job will only run on triggers.</Info>

It can be configured using two methods:

* **Intervals**: A simple way to configure the job to run every X period. The period can be specified as milliseconds or an [ms-formatted string](https://github.com/vercel/ms). All intervals are relative to the [Unix epoch time](https://en.wikipedia.org/wiki/Unix_time).
* **Calendars**: A granular way to control when a job is scheduled to run. Calendars are objects that define the days and times when a job should run (similar to a cron string, but more verbose). They can be configured to run on specific years, months, days of month, days of week, hours, minutes, and seconds, and can be set to be a single value, a range, or a list of ranges. An example of a calendar configuration is:

```json
{
  "year": "*",
  "month": "*",
  "dayOfMonth": "*",
  "dayOfWeek": {
    "start": "MONDAY",
    "end": "FRIDAY"
  },
  "hour": {
    "start": 9,
    "end": 17
  },
  "minute": "0",
  "comment": "Run every weekday from 9am to 5pm at the start of every hour"
}
```

<Info>
  The job will be scheduled based on the union on the intervals and calendars
  provided. For example, if it is configured to run every 7 days and at the
  first day of every month, the job will trigger when either one is reached.
</Info>

### Job sink (where to send the results)

You can optionally sink the results of the job to a destination, it can be:

* **Webhook**: The configuration includes the URL to send the results to. The results will be sent as a POST request.
* **S3**: The configuration includes the bucket name, region, credentials, and the key to store the results. The credentials must have write access to the bucket.

Check out the [API reference for sinks](/client-apis/api-reference/sinks/overview) for more information about the configuration and output format of the sinks.

## Related

<CardGroup cols={2}>
  <Card href="/client-apis/api-reference/projectjobs" title="Jobs API overview" />

  <Card href="./nested-scheduling" title="Nested scheduling" />
</CardGroup>


# Nested scheduling
Source: https://docs.intunedhq.com/docs/platform/consume/nested-scheduling



A best practice with Intuned APIs is to keep them as small as possible. This approach ensures more efficient retries and results in increased reliability and flexibility.

However, there are scenarios where this practice has limitations. Consider the case of scraping information about all new books added to `https://books.toscrape.com/`. For each book, you might need details such as `UPC`, `Price`, `Availability`, `Description`, `Image`, and `Category`. Since this information is not available on the main page, scraping each book's page individually is necessary.

If you were to write a single API to perform all these tasks — going to the list, and for every book, going to the subpage to retrieve information — the execution time would be lengthy, and any failure would require restarting the entire process.

This is where nested scheduling becomes important. Nested scheduling allows you to schedule one API that can append more APIs to the job/queue payload. In the example mentioned, you can schedule a job with one API to scrape the list of books, and for each book, append another API to scrape the specific book page. In the event of an API failure, you only need to restart the failed APIs, not the entire job. To implement this, a helper function is provided, facilitating the appending of more APIs to the job/queue payload.

Here is an example:

```typescript
import { extendPayload } from "@intuned/sdk/runtime";

export default async function handler(
    ....
) {
    //
    extendPayload({
        api: "api-to-extned",
        parameters: {
            param1: "val1"
        }
    });
}
```

This way a Job/Queue's payload that contains one API, can result in executing multiple APIs.


# Queues
Source: https://docs.intunedhq.com/docs/platform/consume/queues



The queues API serves as a high-level abstraction on top of the run APIs. It simplifies the process of running APIs in an order-based, rate limited manner by handling rate limits and concurrent execution limits.

Suitable use cases for queues is when trying to emulate a user's interaction with a website, where you may want to queue up multiple payloads that represent sequental actions to run.

Queues allow you to:

* Queue up APIs to run on demand with guaranteed order.
* Configure APIs to queue up periodically.
* Sink the results of the APIs to a destination such as a webhook.
* Extend the API payloads to dynamically queue up other APIs.
* Impose rate limits for the queued up API runs.
* Configure periods which the queue can pause execution.
* Add random delays between API runs.

## Properties

Each queue requires to be configured upon creation, which will control various aspects of the queue, such as the rate limits and the destination of the results.

This section will be a brief overview of the properties that can be configured for a queue. For detailed information about the types and shapes of the properties, please refer to the [create queue API reference](/client-apis/api-reference/projectqueues/create-queue).

### Configuration

The configuration of a queue configures the retry policy, rate limits, schedule and random delays between API runs.

#### Retry policy

The retry policy configures the queue-level maximum number of attempts to run a payload. This value can be overridden by the payload.

<Note>
  The retries in queues are guaranteed to be executed in order. Before moving on to the next payload, the queue will keep retrying the same payload until it succeeds or the maximum attempts are reached.
</Note>

#### Rate limits

The rate limits configuration controls the maximum number of payloads that can be queued up in a given time period. It consists of an array of rate limits, each with a `limit` and a `duration`. The `limit` is the maximum number of payloads that can be executed in the `duration` time frame. The duration is an [ms-formatted string](https://github.com/vercel/ms).

<Info>The union of the rate limits of the queue and the payload will be used. For example, if you have a limit of 10 items per hour and 2 items per minute, 2 items will be executed in the first minute and 2 more in the following minute until the 10 per hour limit is reached (assuming there are sufficent queued-up payloads).</Info>

#### Schedule

The schedule is an optional property to configure the queue to pause and resume execution periodically. This is useful if you want the queue to stop executing at specific time periods, lets say outside of business hours. It consists of two cron expressions, one for the start of the pause period (`pause`) and one for the end of the pause period (`resume`).

#### Random wait

The random wait configuration allows you to add a random delay between API runs. This is useful if you want to emulate a user's interaction with a website, where the time between actions is not constant. It consists of a range of either milliseconds or [ms-formatted strings](https://github.com/vercel/ms).

### Sink

The sink configuration controls where the results of the API runs will be sent. Currently, the only supported sink for queues is a webhook. The webhook will receive a POST request with the results of the API run.

Check out the [API reference for sinks](/client-apis/api-reference/sinks/overview) for more information about the configuration and output format of the sinks.

## Queue items

Queue items are the payloads that are queued up to be executed. They can override the queue's retry policy.

<Info>
  While the queue is running, payloads can be dynamically appended to the queue from the APIs it is running. This allows for running payloads conditionally based on the output of other APIs.
</Info>

More details on queue items configurations can be found [here](/client-apis/api-reference/projectqueuesitems/append-queue-item).

## Repeatable items

Repeatable items are items that are queued up periodically. They are configured with an [ms-formmated period](https://github.com/vercel/ms) that determines when the item should be queued up.

More details on repeatable items configurations can be found [here](/client-apis/api-reference/projectqueuesrepeatitems/append-queue-repeat-item).

## Using queues

The queue API allows you to create, get and delete queues. You can also append payloads to the queue, check their results or de-queue them if they have not executed. It also allows you create repeatable items, update them, retrieve their results and delete them.


# Deploy
Source: https://docs.intunedhq.com/docs/platform/deploy

Learn about the how to deploy integrations in Intuned

# Introduction

Intuned projects can be deployed with a click of a button! We deploy intuned projects to microVMs that we run on fly.io. This allows us to run your projects in a secure and isolated environments.

As part of the Intuned.json settings, you can control the number of replicas and the size of the VMs to deploy. You can also control the soft and hard rate limits per machine.

<Info> Some of these settings might be limited based on the plan you are on. [Contact us](/docs/support/contact-us) for more info</Info>

## Updating the project settings

1. Open the project in the IDE.
2. Click on the Intuned.json file to update the settings.
3. Change the replication settings as you need.

## Deploying the project

1. Open the project in the IDE.

2. Click on the Deploy <Icon icon="rocket" iconType="solid" />  icon in the top right corner.

## Usage/Billing

* With Intuned, you only pay for machines uptime.
* price/min is controlled by the size of the machine you pick.
* by default, machines startup on new requests and stop after 5 mins post last request.


# API Functions
Source: https://docs.intunedhq.com/docs/platform/develop/api-functions



## API functions

Each API function is an async function written in typescript. As an input, it user-passed and runtime params and returns a json object. Here is it what you get when you create a new API file:

```typescript
// Standard playwright BrowserContext and Page
import { BrowserContext, Page } from "@intuned/playwright-core";

// a Utility function to extend the playwright page with the Intuned Helpers
import { extendPlaywrightPage } from "@intuned/sdk/playwright";

interface Params {
  // Add your params here
}

export default async function handler(
  params: Params,
  _playwrightPage: Page,
  context: BrowserContext
) {
  const page = extendPlaywrightPage(_playwrightPage);

  // Add your code here

  return {};
}
```

<ParamField path="params" type="object">
  The input of the API request sent to the API as json.
</ParamField>

<ParamField path="_playwrightPage" type="Page (Playwright)">
  A standard playwright page object.
</ParamField>

<ParamField path="context" type="BrowserContext (Playwright)">
  A standard Playwright browser context object.
</ParamField>

### extendPlaywrightPage

The `extendPlaywrightPage` method extends the playwright page with helpers from \`@intuned/sdk.  These helpers facilitate faster and more reliable browser automation. For more information, please refer to the [Automation SDKs reference](/automation-sdks).

### Result

The result can be any serializable JSON object, and will be returned to the API consumer. If the result is not serializable, the function will throw an error.


# Environment variables
Source: https://docs.intunedhq.com/docs/platform/develop/environment-variables



## Introduction

Environment variables allows you to grant the project to access sensitive information.

An environment variable is composed of a key and value pair stored in the project, and it can be configured to be accessible in the IDE or when the project is deployed.

Once environment variable is created it is accessable in the IDE using the process environment variable `process.env.<KEYNAME>`. If an environment variable is updated for deployed projects the changes will be available upon the next deployment.

<CardGroup cols={2}>
  <Card href="/docs/guides/platform/how-to-create-environment-variables" title="How to create an environment variable?" />

  <Card href="/docs/guides/platform/how-to-delete-environment-variables" title="How to delete an environment variable?" />

  <Card href="/docs/guides/platform/how-to-edit-environment-variables" title="How to edit an environment variable?" />

  <Card href="/docs/guides/platform/how-to-use-environment-variables" title="How to use environment variables?" />
</CardGroup>


# Intuned's IDE
Source: https://docs.intunedhq.com/docs/platform/develop/ide



## Introduction

The Intuned IDE is built using vs-code based components, if you are a developer, you will find it natural to use. We will only call out some aspects of it that are specific to Intuned.

### Run button and parameters

The API functions you create in Intuned will be exposed as APIs that you can call with any set of parameters, the Intuned IDE helps you create a different set of parameter of every case you run.

### Browser

Since all our API functions deal with browser, as part of the Intuned IDE, we show the browser on the right pane.


# Develop
Source: https://docs.intunedhq.com/docs/platform/develop/overview

How to build browser automations in Intuned

## Introduction

Intuned's projects are code-based functions written in TypeScript, designed to interact with a browser through [Playwright](https://playwright.dev/) and [@intuned/sdk](/automation-sdks/intuned-sdk). To streamline the implementation and maintenance, we built the Intuned IDE. The IDE enables you to write, iterate, and test your integrations with speed.

<CardGroup>
  <Card title="IDE" icon="code" href="./ide">
    Learn about the Intuned IDE
  </Card>

  <Card title="Data Extractors" icon="database" href="/docs/data-extraction">
    Learn how to use Intuned Data Extraction Helpers
  </Card>

  <Card title="Actions" icon="robot" href="/docs/actions">
    Learn how to use Intuned Actions Helpers
  </Card>

  <Card title="Automation SDKs" icon="code" href="/automation-sdks">
    Learn about the Automation SDKs
  </Card>
</CardGroup>


# Manage
Source: https://docs.intunedhq.com/docs/platform/manage



## Introduction

Intuned allows you to govern access to your resources by creating a workspace dedicated for you and your team upon sign up.

### Workspace

A workspace is the top level logical entity allows you to govern access control over your Intuned resources. Each workspace can have multiple users collaborating on multiple projects. In general, we recommend that a single company or team share a workspace.
Intuned generates an unique ID for your workspace, and this ID will be needed to call any API.

<CardGroup cols={2}>
  <Card href="/docs/guides/platform/how-to-create-a-workspace" title="How create a workspace?" />

  <Card href="/docs/guides/platform/how-to-get-a-workspace-id" title="How get a workspace ID?" />

  <Card href="/docs/guides/platform/how-to-rename-a-workspace" title="How to rename a workspace?" />

  <Card href="/docs/guides/platform/how-to-delete-a-workspace" title="How to delete a workspace?" />
</CardGroup>

### Roles

For now, we only have one user role in Intuned (Admin). Very soon, we are rolling out the new roles - Editor and Viewer. [Contact us](/docs/support/contact-us) for more info.

<CardGroup cols={2}>
  <Card href="/docs/guides/platform/how-to-invite-users" title="How to invite users?" />

  <Card href="/docs/guides/platform/how-to-remove-users" title="How to manage access?" />

  <Card href="/docs/guides/platform/how-to-manage-user-roles" title="How to manage user roles?" />
</CardGroup>

### API access

To obtain API access you will need to generate an API key. API Keys are secret tokens used to authenticate your requests. They are unique to your workspace and should be kept confidential.

An API key will grant access to all resources within the Intuned Workspace. So anyone with access to an API key will be able to call the exposed APIs.

If an API Key is not been used it is recommended that you delete the key keep your accounts secure.

<CardGroup cols={2}>
  <Card href="/docs/guides/platform/how-to-create-api-keys" title="How to create API keys?" />

  <Card href="/docs/guides/platform/how-to-delete-api-keys" title="How to delete API keys?" />
</CardGroup>


# Monitor
Source: https://docs.intunedhq.com/docs/platform/monitor



## View Runs

When you run a project API, directly or via a job or queue, a run is created and captured. We capture the run details and a run trace to allow you to debug it if something fails.
To view those runs:

1. Navigate to projects: [Projects](https://app.intuned.io/projects).
2. Click to the project you are interested in.
3. Click on the "Runs" tab to see all the runs that have happened for this project.

### Viewing the trace

For each run, we save the trace for it (console logs, network, and more). To view the trace:

1. Select a run from the "Runs" tab.
2. Click on the "Actions:" menu.
3. Click on "View Traces".


# Projects
Source: https://docs.intunedhq.com/docs/platform/projects



Projects are the core building block in Intuned. Each workspace can have one or more projects.

## Projects management

### Project details

Project details include information about the project, such as the name and state, it also includes sections for Auth Sessions, Runs, Jobs, Usage and Environment variables.

### Renaming a project

Renaming a project will change the urls that are used to call the project. This means that any code that calls the project will need to be updated.

## How-to guides

<CardGroup cols={2}>
  <Card href="/docs/guides/platform/how-to-get-project-name" title="How to get a project name?" />

  <Card href="/docs/guides/platform/how-to-view-all-projects" title="How to view all projects?" />

  <Card href="/docs/guides/platform/how-to-rename-project" title="How to rename a project?" />
</CardGroup>


# Contact Us
Source: https://docs.intunedhq.com/docs/support/contact-us



## Email

Email us [here](mailto:founders@intunedhq.com)

## Meeting

[Schedule a meeting](https://cal.com/team/intuned/get-started) with us to discuss your use case and how we can help you. Its free to try!

## Support

Email us about any issues [here](mailto:support@intunedhq.com)

## Community

Join our [community](https://join.slack.com/t/intuned-users/shared_invite/zt-2k6bjpzyo-~6ez73_z8cR8I87H~qYDTQ) to ask questions, share your projects, and get help from the Intuned team and other users.


# Frequently Asked Questions
Source: https://docs.intunedhq.com/docs/support/faqs

Here are some frequently asked questions about Intuned and our answer.

<AccordionGroup>
  <Accordion title="What is Intuned?">
    Intuned is a platform to develop, deploy, consume and monitor reliable browser automations.
  </Accordion>

  <Accordion title="Who is the ideal user for this tool?">
    Developers and product teams that are trying to build scrapers and integrations with other web applications when there are no official APIs.
  </Accordion>

  <Accordion title="I want you to build scrapers or integrations for me. Can you help?">
    Yes! We do whatever is needed to make our customers successful. [Contact us](./contact-us) to discuss your use case.
  </Accordion>
</AccordionGroup>


# Plans and Pricing
Source: https://docs.intunedhq.com/docs/support/pricing



<Note>Pricing is one of the most challenging aspects in building a product, we are always looking to iterate on and improve our pricing. If you think any part of our current pricing doesn't work for you, [contact us](/docs/support) and we would love to figure it out.</Note>

Intuned is the browser automation platform for developers and product teams. Developers use Intuned to develop, deploy, and monitor reliable browser automations.

Our pricing model is designed to offer flexibility and scalability to meet the needs of different users, from early-stage startups to growing teams and enterprises. We offer a hybrid pricing model that combines a base subscription fee with a pay-as-you-go component.

This page introduces the elements of Intuned pricing and gives you the information you need to estimate costs for your implementation.

## Pricing elements

### Compute cost

Intuned projects are deployed to microVMs that run on fly.io. Compute cost will be accrued based on the time a deployed machine is up and running in your workspace.

Every project has configurable settings to control the number of replicas and the size of the machine you wish to deploy. The price changes based off of the machine you select, see the table below to understand the different machines available for you.

| Machine       | CPU      | RAM | Price |
| ------------- | -------- | --- | ----- |
| shared-cpu-2x | 2 shared | 1GB | Price |
| shared-cpu-4x | 4 shared | 2GB | Price |
| shared-cpu-8x | 8 shared | 4GB | Price |

Learn more about [how projects are deployed in Intuned](/docs/platform/deploy).

### AI spend

Leveraging AI building blocks is an integral part of our offering. Today, we end up managing the cost of the AI models you may be leveraging. However in the future, we plan on allowing you to bring your own keys. So in the mean time, we will only charge your utilization to cover our costs.

Here is a quick summary of models we support, and their current costs.

| Model                    | Input /1k tokens | Output /1k tokens |
| ------------------------ | ---------------- | ----------------- |
| gpt-4-0125-preview       | \$0.01           | \$0.03            |
| gpt-4-vision-preview     | \$0.01           | \$0.03            |
| gpt-3.5-turbo-16k-0613   | \$0.003          | \$0.004           |
| gpt4-turbo               | \$0.01           | \$0.03            |
| gpt-4-turbo-2024-04-09   | \$0.01           | \$0.03            |
| gpt-3.5-turbo-1106       | \$0.001          | \$0.002           |
| gpt-3.5-turbo-0125       | \$0.001          | \$0.002           |
| gpt3.5-turbo             | \$0.01           | \$0.03            |
| claude-3-haiku-20240307  | \$0.00025        | \$0.00125         |
| claude-3-opus-20240229   | \$0.015          | \$0.75            |
| claude-3-sonnet-20240229 | \$0.003          | \$0.015           |
| gpt-4o-2024-05-13        | \$0.005          | \$0.015           |

### File data processing

The process of converting a file to a consumable data format (markdown, json, text) will cost \$0.03 per page within that file.

<Note> Any AI utilization to extract data from the processed file will accrue towards AI spend. </Note>

### Deployed machines

Intuned projects are deployed to microVMs that run on fly.io. Additionally, every project has configurable settings to control the number of replicas and the size of the machine you wish to deploy. Each plan will have a cap in terms of the number of deployed machine you can have.

Learn more about [how many deployed machines are available in each plan](#pricing-plans).

### Auth sessions

Intuned allows you to create and manage an [authenticated session](/docs/auth-sessions/overview) to take actions on behalf of the user.

Every instance of a user you impersonate on a site should be 1 authenticated session. Learn more about [how many auth sessions are available in each plan](#pricing-plans).

### Orchestration units

Intuned allows you to create [jobs](/docs/platform/consume/consume-overview#jobs) and [queues](/docs/platform/consume/consume-overview#queues) to help you orchestrate all of your browser automations.

Every active job or queue counts as an orchestration unit. Learn more about [how many orchestration units are available in each plan](#pricing-plans).

### Flexible credit

Every plan includes flexible credit in USD, that can be directly utilized for compute, AI, and file processing spend.

Learn more about monitoring usage and credit utilization. INSERT LINK HERE

## Pricing Plans

Each plan has a base subscription fee which comes with flexible credits and some feature limitations. Given that we're early on, this tiered based approach will allow us to grow with you.

### Starter Plan

Great for early-stage startups attempting to discover PMF.

Plan includes:

* \$50 of flexible credit, then pay as you go
* Up to 20 deployed machines
* Up to 50 orchestration units
* Up to 50 auth sessions

Plan costs: \$150/month

### Business Plan

Perfect for teams scaling their browser automation. Flexible credits can be added.

Plan includes:

* \$300 of flexible credit, then pay as you go
* Up to 100 deployed machines
* Up to 300 orchestration units
* Up to 200 auth sessions

Plan costs: Custom/month, and given custom pricing the included functionality is negotiable

### Incubator discount

[Contact us](/docs/support/contact-us) and get a friendly startup discount.

## FAQ

<Accordion title="Do I get charged for downloading files?">
  We offer file APIs that allow you to convert files to markdown or directly extract data from it. Downloading and uploading files to a sink only impact compute and is not considered file processing.
</Accordion>


# Privacy policy
Source: https://docs.intunedhq.com/docs/support/privacy-policy



Effective date: 05/03/2024

1. Introduction

Welcome to The Metrics Shop Inc.

The Metrics Shop Inc. (“us”, “we", or “our”) operates [https://www.intuned.io/](https://www.intuned.io/) (hereinafter referred to as “Service”).

Our Privacy Policy governs your visit to [https://www.intuned.io/](https://www.intuned.io/) and [https://www.intunedhq.com/](https://www.intunedhq.com/), and explains how we collect, safeguard and disclose information that results from your use of our Service.

We use your data to provide and improve Service. By using Service, you agree to the collection and use of information in accordance with this policy. Unless otherwise defined in this Privacy Policy, the terms used in this Privacy Policy have the same meanings as in our Terms and Conditions.

Our Terms and Conditions (“Terms”) govern all use of our Service and together with the Privacy Policy constitutes your agreement with us (“agreement”).

2. Definitions

SERVICE means the [https://www.app.intuned.io/](https://www.app.intuned.io/) website operated by The Metrics Shop Inc.

PERSONAL DATA means data about a living individual who can be identified from those data (or from those and other information either in our possession or likely to come into our possession).

USAGE DATA is data collected automatically either generated by the use of Service or from Service infrastructure itself (for example, the duration of a page visit).

COOKIES are small files stored on your device (computer or mobile device).

DATA CONTROLLER means a natural or legal person who (either alone or jointly or in common with other persons) determines the purposes for which and the manner in which any personal data are, or are to be, processed. For the purpose of this Privacy Policy, we are a Data Controller of your data.

DATA PROCESSORS (OR SERVICE PROVIDERS) means any natural or legal person who processes the data on behalf of the Data Controller. We may use the services of various Service Providers in order to process your data more effectively.

DATA SUBJECT is any living individual who is the subject of Personal Data.

THE USER is the individual using our Service. The User corresponds to the Data Subject, who is the subject of Personal Data.‍

3. Information Collection and Use

We collect several different types of information for various purposes to provide and improve our Service to you.

4. Types of Data Collected

Personal Data

While using our Service, we may ask you to provide us with certain personally identifiable information that can be used to contact or identify you (“Personal Data”). Personally identifiable information may include, but is not limited to:

(a)  Email address

(b)  First name and last name

(c)  Cookie sand Usage Data

We may use your Personal Data to contact you with newsletters, marketing or promotional materials and other information that may be of interest to you. You may opt out of receiving any, or all, of these communications from us by emailing at [info@intuned.io](mailto:info@intuned.io).

Usage Data

We may also collect information that your browser sends whenever you visit our Service or when you access Service by or through a mobile device (“Usage Data”).

This Usage Data may include information such as your computer's Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that you visit, the time and date of your visit, the time spent on those pages, unique device identifiers and other diagnostic data.

When you access Service with a mobile device, this Usage Data may include information such as the type of mobile device you use, your mobile device unique ID, the IP address of your mobile device, your mobile operating system, the type of mobile Internet browser you use, unique device identifiers and other diagnostic data.

Tracking Cookies Data

We use cookies and similar tracking technologies to track the activity on our Service and we hold certain information.

Cookies are files with a small amount of data which may include an anonymous unique identifier. Cookies are sent to your browser from a website and stored on your device. Other tracking technologies are also used such as beacons, tags and scripts to collect and track information and to improve and analyze our Service.

You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our Service.

Examples of Cookies we use:

(a)  Session Cookies: We use Session Cookies to operate our Service.

(b)  Preference Cookies: We use Preference Cookies to remember your preferences and various settings.

(c)  Security Cookies: We use Security Cookies for security purposes.

(d)  Advertising Cookies: Advertising Cookies are used to serve you with advertisements that may be relevant to you and your interests.

5. Use of Data

The Metrics Shop Inc. uses the collected data for various purposes:

(a)  to provide and maintain our Service;

(b)  to notify you about changes to our Service;

(c)  to allow you to participate in interactive features of our Service when you choose to do so;

(d)  to provide customer support;

(e)  to gather analysis or valuable information so that we can improve our Service;

(f)   to monitor the usage of our Service;

(g)  to detect, prevent and address technical issues;

(h)  to fulfill any other purpose for which you provide it;

(i)    to carry out our obligations and enforce our rights arising from any contracts entered into between you and us, including for billing and collection;

(j)    to provide you with notices about your account and/or subscription, including expiration and renewal notices, email-instructions, etc.;

(k)  to provide you with news, special offers and general information about other goods, services and events which we offer that are similar to those that you have already purchased or enquired about unless you have opted not to receive such information;

(l)    in any other way we may describe when you provide the information;

(m) for any other purpose with your consent.

6. Retention of Data

We will retain your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes, and enforce our legal agreements and policies.

We will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period, except when this data is used to strengthen the security or to improve the functionality of our Service, or we are legally obligated to retain this data for longer time periods.

7. Transfer of Data

Your information, including Personal Data, may be transferred to – and maintained on – computers located outside of your state, province, country or other governmental jurisdiction where the data protection laws may differ from those of your jurisdiction.

If you are located outside United States and choose to provide information to us, please note that we transfer the data, including Personal Data, to United States and process it there.

Your consent to this Privacy Policy followed by your submission of such information represents your agreement to that transfer.

The Metrics Shop Inc. will take all the steps reasonably necessary to ensure that your data is treated securely and in accordance with this Privacy Policy and no transfer of your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of your data and other personal information.

8. Disclosure of Data

We may disclose personal information that we collect, or you provide:

(a)  Disclosure for Law Enforcement.

Under certain circumstances, we may be required to disclose your Personal Data if required to do so by law or in response to valid requests by public authorities.

(b)  Business Transaction.

If we or our subsidiaries are involved in a merger, acquisition or asset sale, your Personal Data may be transferred.

(c)  Other cases. We may disclose your information also:

(i)   to our subsidiaries and affiliates;

(ii)  to contractors, service providers, and other third parties we use to support our business;

(iii)  to fulfill the purpose for which you provide it;

(iv)  for the purpose of including your company’s logo on our website;

(v)  foray other purpose disclosed by us when you provide the information;

(vi)  with your consent in any other cases;

(vii) if we believe disclosure is necessary or appropriate to protect the rights, property, or safety of the Company, our customers, or others.

9. Security of Data

The security of your data is important to us but remember that no method of transmission over the Internet or method of electronic storage is 100% secure. While we strive to use commercially acceptable means to protect your Personal Data, we cannot guarantee its absolute security.

10. Your Data Protection Rights Under General Data Protection Regulation (GDPR)

If you are a resident of the European Union (EU) and European Economic Area (EEA), you have certain data protection rights, covered by GDPR. – See more at [https://eur-lex.europa.eu/eli/reg/2016/679/oj](https://eur-lex.europa.eu/eli/reg/2016/679/oj)

We aim to take reasonable steps to allow you to correct, amend, delete, or limit the use of your Personal Data.

If you wish to be informed what Personal Data we hold about you and if you want it to be removed from our systems, please email us at [info@intuned.io](mailto:info@intuned.io).

In certain circumstances, you have the following data protection rights:

(a)  the right to access, update or to delete the information we have on you;

(b)  the right of rectification. You have the right to have your information rectified if that information is inaccurate or incomplete;

(c)  the right to object. You have the right to object to our processing of your Personal Data;

(d)  the right of restriction. You have the right to request that we restrict the processing of your personal information;

(e)  the right to data portability. You have the right to be provided with a copy of your Personal Data in a structured, machine-readable and commonly used format;

(f)   the right to withdraw consent. You also have the right to withdraw your consent at any time where we rely on your consent to process your personal information;

Please note that we may ask you to verify your identity before responding to such requests. Please note, we may not able to provide Service without some necessary data.

You have the right to complain to a Data Protection Authority about our collection and use of your Personal Data. For more information, please contact your local data protection authority in the European Economic Area (EEA).

11. Your Data Protection Rights under the California Privacy Protection Act (CalOPPA)

CalOPPA is the first state law in the nation to require commercial websites and online services to post a privacy policy. The law’s reach stretches well beyond California to require a person or company in the United States (and conceivable the world) that operates websites collecting personally identifiable information from California consumers to post a conspicuous privacy policy on its website stating exactly the information being collected and those individuals with whom it is being shared, and to comply with this policy. – See more at: [https://consumercal.org/about-cfc/cfc-education-foundation/california-online-privacy-protection-act-caloppa-3/](https://consumercal.org/about-cfc/cfc-education-foundation/california-online-privacy-protection-act-caloppa-3/)

According to CalOPPA we agree to the following:

(a)   users can visit our site anonymously;

(b)   our Privacy Policy link includes the word “Privacy”, and can easily be found on the page specified above on the homepage of our website;

(c)    users will be notified of any privacy policy changes on our Privacy Policy Page;

(d)   users are able to change their personal information by emailing us at [info@intunedhq.com](mailto:info@intunedhq.com).

Our Policy on “Do Not Track” Signals:

We honor Do Not Track signals and do not track, plant cookies, or use advertising when a Do Not Track browser mechanism is in place. Do Not Track is a preference you can set in your web browser to inform websites that you do not want to be tracked.

You can enable or disable Do Not Track by visiting the Preferences or Settings page of your web browser.

12. Service Providers

We may employ third party companies and individuals to facilitate our Service (“Service Providers”), provide Service on our behalf, perform Service-related services or assist us in analyzing how our Service is used.

These third parties have access to your Personal Data only to perform these tasks on our behalf and are obligated not to disclose or use it for any other purpose.

13. Analytics

We may use third-party Service Providers to monitor and analyze the use of our Service.

Google Analytics

Google Analytics is a web analytics service offered by Google that tracks and reports website traffic. Google uses the data collected to track and monitor the use of our Service. This data is shared with other Google services. Google may use the collected data to contextualize and personalize the ads of its own advertising network.

For more information on the privacy practices of Google, please visit the Google Privacy Terms web page: [https://policies.google.com/privacy?hl=en](https://policies.google.com/privacy?hl=en)

We also encourage you to review the Google's policy for safeguarding your data: [https://support.google.com/analytics/answer/6004245](https://support.google.com/analytics/answer/6004245).

PostHog

PostHog is a web analytics service offered by PostHog that tracks and reports website traffic. PostHog uses the data collected to track and monitor the use of our Service. This data is shared with other PostHog services.

For more information on the privacy practices of PostHog, please visit the PostHog Privacy Terms web page: [https://posthog.com/privacy](https://posthog.com/privacy)

14. CI/CD tools

We may use third-party Service Providers to automate the development process of our Service.

GitHub

GitHub is provided by GitHub, Inc.

GitHub is a development platform to host and review code, manage projects, and build software.

For more information on what data GitHub collects for what purpose and how the protection of the data is ensured, please visit GitHub Privacy Policy page: [https://help.github.com/en/articles/github-privacy-statement](https://help.github.com/en/articles/github-privacy-statement).

15. Behavioral Remarketing

The Metrics Shop Inc. uses remarketing services to advertise on third party websites to you after you visited our Service. We and our third-party vendors use cookies to inform, optimize and serve ads based on your past visits to our Service.

Google Ads (AdWords)

Google Ads (AdWords) remarketing service is provided by Google Inc.

You can opt-out of Google Analytics for Display Advertising and customize the Google Display Network ads by visiting the Google Ads Settings page: [http://www.google.com/settings/ads](http://www.google.com/settings/ads)

Google also recommends installing the Google Analytics Opt-out Browser Add-on – [https://tools.google.com/dlpage/gaoptout](https://tools.google.com/dlpage/gaoptout) – for your web browser. Google Analytics Opt-out Browser Add-on provides visitors with the ability to prevent their data from being collected and used by Google Analytics.

For more information on the privacy practices of Google, please visit the Google Privacy Terms web page: [https://policies.google.com/privacy?hl=en](https://policies.google.com/privacy?hl=en)

16. Payments

We may provide paid products and/or services within Service. In that case, we use third-party services for payment processing (e.g. payment processors).

We will not store or collect your payment card details. That information is provided directly to our third-party payment processors whose use of your personal information is governed by their Privacy Policy. These payment processors adhere to the standards set by PCI-DSS as managed by the PCI Security Standards Council, which is a joint effort of brands like Visa, Mastercard, American Express and Discover. PCI-DSS requirements help ensure the secure handling of payment information.

The payment processors we work with are:

PayPal or Braintree:

Their Privacy Policy can be viewed at [https://www.paypal.com/webapps/mpp/ua/privacy-full](https://www.paypal.com/webapps/mpp/ua/privacy-full)

Stripe:

‍Their Privacy Policy can be viewed at: [https://stripe.com/us/privacy](https://stripe.com/us/privacy)

17. Links to Other Sites

Our Service may contain links to other sites that are not operated by us. If you click a third party link, you will be directed to that third party's site. We strongly advise you to review the Privacy Policy of every site you visit.

We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.

18. Children's Privacy

Our Services are not intended for use by children under the age of 13 (“Children”).

We do not knowingly collect personally identifiable information from Children under 13. If you become aware that a Child has provided us with Personal Data, please contact us. If we become aware that we have collected Personal Data from Children without verification of parental consent, we take steps to remove that information from our servers.

19. Changes to This Privacy Policy

We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.

We will let you know via email and/or a prominent notice on our Service, prior to the change becoming effective and update “effective date” at the top of this Privacy Policy.

You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.

20. Contact Us

If you have any questions about this Privacy Policy, please contact us:

By email: [info@intunedhq.com](mailto:info@intunedhq.com).


# Releases
Source: https://docs.intunedhq.com/docs/support/releases



## 06/01/2024 Release

Our public preview release is scheduled for June 1st. Stay tuned for more details.


# Terms of service
Source: https://docs.intunedhq.com/docs/support/terms-of-use



Last updated: 05/03/2024

1. Introduction

Welcome to The Metrics Shop Inc. As you have just clicked our Terms of Service, please pause, grab a cup of coffee and carefully read the following pages. It will take you approximately 20 minutes.

These Terms of Service (“Terms”, “Terms of Service”) govern your use of our web pages located at [https://www.intuned.io/](https://www.intuned.io/) and [https://www.intunedhq.com/](https://www.intunedhq.com/)  operated by The Metrics Shop Inc. This defines the agreement between The Metrics Shop Inc.  (“Company”, “Metrics Shop”, “we”, “our”, “us”) with address of 13641 NE 129TH St., Kirkland, WA, 98034, USA, and you or the entity you represent (”Client”, “you”, “your”). This agreement takes effect when you sign up to The Metrics Shop Inc. services (”the Services”, “Service”). If you are using the Services on behalf of an entity you represent to us that you are lawfully able to enter this Agreement on behalf of the client.

Our [Privacy Policy](docs/support/privacy-policy) also governs your use of our Service and explains how we collect, safeguard and disclose information that results from your use of our web pages. Please read it here [https://www.intunedhq.com/privacy](https://www.intunedhq.com/privacy).

Your agreement with us includes these Terms and our Privacy Policy (“Agreements”). You acknowledge that you have read and understood Agreements, and agree to be bound of them.

If you do not agree with (or cannot comply with) Agreements, then you may not use the Service, but please let us know by emailing at [info@intunedhq.com](mailto:info@intunedhq.com) so we can try to find a solution. These Terms apply to all visitors, users and others who wish to access or use Service.

Thank you for being responsible.

2. Communications

By creating an Account on our Service, you agree to subscribe to newsletters, marketing or promotional materials and other information we may send. However, you may opt out of receiving any, or all, of these communications from us by following the unsubscribe link or by emailing at [info@intunedhq.com](mailto:info@intunedhq.com).

3. Purchases

If you wish to purchase any product or service made available through our Service (“Purchase”), you may be asked to supply certain information relevant to your Purchase including, without limitation, your credit card number, the expiration date of your credit card, your billing address, and your shipping information.

You represent and warrant that: (i) you have the legal right to use any credit card(s) or other payment method(s) in connection with any Purchase; and that (ii) the information you supply to us is true, correct and complete.

We may employ the use of third party services for the purpose of facilitating payment and the completion of Purchases. By submitting your information, you grant us the right to provide the information to these third parties subject to our Privacy Policy.

Certain Services will be made available subject to our completion of a successful compliance review process. Such a review may require you to complete a Know Your Customer process, video calls with the Client and any measures that we decide, at our sole discretion, is necessary to approve your use of the Service. You will cooperate with us and provide us with any information reasonably required as a part of the compliance review process.

We reserve the right to refuse or cancel your order at any time for reasons including but not limited to: product or service availability, errors in the description or price of the product or service, error in your order or other reasons.

4. Subscriptions

Some parts of Service are billed on a subscription basis (“Subscription(s)”). You will be billed in advance on a recurring and periodic basis (“Billing Cycle”). Billing cycles are set either on a monthly or annual basis, depending on the type of subscription plan you select when purchasing a Subscription.

At the end of each Billing Cycle, your Subscription will automatically renew under the exact same conditions unless you cancel it or The Metrics Shop Inc. cancels it. You may cancel your Subscription renewal either through your online account management page or by contacting The Metrics Shop Inc. customer support team.

A valid payment method, including credit card or ACH, is required to process the payment for your subscription. You shall provide The Metrics Shop Inc. with accurate and complete billing information including full name, address, state, zip code, telephone number, and a valid payment method information. By submitting such payment information, you automatically authorize The Metrics Shop Inc. to charge all Subscription fees incurred through your account to any such payment instruments.

Should automatic billing fail to occur for any reason, The Metrics Shop Inc. will issue an electronic invoice indicating that you must proceed manually, within a certain deadline date, with the full payment corresponding to the billing period as indicated on the invoice.

5. Free Trial

The Metrics Shop Inc. may, at its sole discretion, offer a Subscription with a free trial for a limited period of time (“Free Trial”).

You may be required to enter your billing information in order to sign up for Free Trial.

If you do enter your billing information when signing up for Free Trial, you will not be charged by The Metrics Shop Inc. until Free Trial has expired. On the last day of Free Trial period, unless you cancelled your Subscription, you will be automatically charged the applicable Subscription fees for the type of Subscription you have selected.

At any time and without notice, The Metrics Shop Inc. reserves the right to (i) modify Terms of Service of Free Trial offer, or (ii) cancel such Free Trial offer.

6. Fee Changes

The Metrics Shop Inc., in its sole discretion and at any time, may modify Subscription fees for the Subscriptions. Any Subscription fee change will become effective at the end of the then-current Billing Cycle.

The Metrics Shop Inc. will provide you with a reasonable prior notice of any change in Subscription fees to give you an opportunity to terminate your Subscription before such change becomes effective.

Your continued use of Service after Subscription fee change comes into effect constitutes your agreement to pay the modified Subscription fee amount.

7. Refunds

Except when required by law, paid Subscription fees are non-refundable.

8. Prohibited Uses

You may use Service only for lawful purposes and in accordance with Terms.

You agree not to use Service: In any way that violates any applicable national or international law or regulation. For the purpose of exploiting, harming, or attempting to exploit or harm minors in any way by exposing them to inappropriate content or otherwise.To transmit, or procure the sending of, any advertising or promotional material, including any “junk mail”, “chain letter,” “spam,” or any other similar solicitation. To impersonate or attempt to impersonate Company, a Company employee, another user, or any other person or entity without their consent. In any way that infringes upon the rights of others, or in any way is illegal, threatening, fraudulent, or harmful, or in connection with any unlawful, illegal, fraudulent, or harmful purpose or activity. To engage in any other conduct that restricts or inhibits anyone’s use or enjoyment of Service or third partys, or which, as determined by us, may harm or offend Company or users of Service or expose them to liability.

Additionally, you agree not to: Use Service in any manner that could disable, overburden, damage, or impair Service or interfere with any other party’s use of Service or any third party, including their ability to engage in real time activities through Service. Use any manual process to monitor or copy any of the material on Service or for any other unauthorized purpose without our prior written consent. Use any device, software, or routine that interferes with the proper working of Service. Introduce any viruses, trojan horses, worms, logic bombs, or other material which is malicious or technologically harmful. Distribute any unlawful content or encourage any unlawful activity. Cause any damage or service disruption to any third party computers or service; Attempt to gain unauthorized access to, interfere with, damage, or disrupt any parts of Service, the server on which Service is stored, or any server, computer, or database connected to Service. Attack Service via a denial-of-service attack or a distributed denial-of-service attack. Take any action that may damage or falsify Company rating. Otherwise attempt to interfere with the proper working of Service.

Finally, it is our sole discretion to suspend your access to use our services immediately upon notice if we determine that:Your use of or registration to the Service: poses a security risk to us or our Service or any third party, may adversely impact us or any of our clients, including by way of causing a user to be blocked from certain websites, networks or services, may subject us, our affiliates, or any third party to liability, or is in breach under any applicable laws or regulations, may be fraudulent, or may disparage or devalue our reputation or goodwill; or you are in breach of this Agreement, including if you are delinquent on payment obligations; or You have violated any of its representations and warranties under this Agreement or any other representation and warranties provided to us associated with your use of the Service.

9. Analytics

We may use third-party Service Providers to monitor and analyze the use of our Service.

Google Analytics

Google Analytics is a web analytics service offered by Google that tracks and reports website traffic. Google uses the data collected to track and monitor the use of our Service. This data is shared with other Google services. Google may use the collected data to contextualise and personalise the ads of its own advertising network.

For more information on the privacy practices of Google, please visit the Google Privacy Terms web page: [https://policies.google.com/privacy?hl=en](https://policies.google.com/privacy?hl=en)

We also encourage you to review the Google's policy for safeguarding your data: [https://support.google.com/analytics/answer/6004245](https://support.google.com/analytics/answer/6004245).

PostHog

PostHog is a web analytics service offered by PostHog that tracks and reports website traffic. PostHog uses the data collected to track and monitor the use of our Service. This data is shared with other PostHog services.

For more information on the privacy practices of PostHog, please visit the PostHog Privacy Terms web page: [https://posthog.com/privacy](https://posthog.com/privacy)

10. No Use By Minors

Service is intended only for access and use by individuals at least eighteen (18) years old. By accessing or using any of Company, you warrant and represent that you are at least eighteen (18) years of age and with the full authority, right, and capacity to enter into this agreement and abide by all of the terms and conditions of Terms. If you are not at least eighteen (18) years old, you are prohibited from both the access and usage of Service.

11. Accounts

When you create an account with us, you guarantee that you are above the age of 18, and that the information you provide us is accurate, complete, and current at all times. Inaccurate, incomplete, or obsolete information may result in the immediate termination of your account on Service.

You are responsible for maintaining the confidentiality of your account and password, including but not limited to the restriction of access to your computer and/or account. You agree to accept responsibility for any and all activities or actions that occur under your account and/or password, whether your password is with our Service or a third-party service. You must notify us immediately upon becoming aware of any breach of security or unauthorized use of your account.

You may not use as a username the name of another person or entity or that is not lawfully available for use, a name or trademark that is subject to any rights of another person or entity other than you, without appropriate authorization. You may not use as a username any name that is offensive, vulgar or obscene.

Each user is allowed to create and use only one user account. Creating or using multiple personal accounts, even with different email addresses, without our written consent, will be considered a breach of this section.

When you contact our support team for assistance with our Platform or Services, you acknowledge that the support team members may access your account to help resolve your issue. The support team will limit their actions on your account to only those necessary to provide the requested support.

We reserve the right to refuse service, terminate accounts, or cancel orders in our sole discretion.

12. Intellectual Property

Service and its original content (excluding Content provided by users), features and functionality are and will remain the exclusive property of The Metrics Shop Inc. and its licensors. Service is protected by copyright, trademark, and other laws of the United States. Our trademarks and trade dress may not be used in connection with any product or service without the prior written consent of The Metrics Shop Inc..

13. Copyright Policy

We respect the intellectual property rights of others. It is our policy to respond to any claim that Content posted on Service infringes on the copyright or other intellectual property rights (“Infringement”) of any person or entity.

If you are a copyright owner, or authorized on behalf of one, and you believe that the copyrighted work has been copied in a way that constitutes copyright infringement, please submit your claim via email to [dmca@intunedhq.com](mailto:dmca@intunedhq.com), with the subject line: “Copyright Infringement” and include in your claim a detailed description of the alleged Infringement as detailed below, under “DMCA Notice and Procedure for Copyright Infringement Claims”

You may be held accountable for damages (including costs and attorneys' fees) for misrepresentation or bad-faith claims on the infringement of any Content found on and/or through Service on your copyright.

14. DMCA Notice and Procedure for Copyright Infringement Claims

You may submit a notification pursuant to the Digital Millennium Copyright Act (DMCA) by providing our Copyright Agent with the following information in writing (see 17 U.S.C 512(c)(3) for further detail):

an electronic or physical signature of the person authorized to act on behalf of the owner of the copyright's interest;

a description of the copyrighted work that you claim has been infringed, including the URL (i.e., web page address) of the location where the copyrighted work exists or a copy of the copyrighted work;

identification of the URL or other specific location on Service where the material that you claim is infringing is located;

your address, telephone number, and email address;

a statement by you that you have a good faith belief that the disputed use is not authorized by the copyright owner, its agent, or the law;

a statement by you, made under penalty of perjury, that the above information in your notice is accurate and that you are the copyright owner or authorized to act on the copyright owner's behalf.

You can contact our Copyright Agent via email at [dmca@intunedhq.com](mailto:dmca@intunedhq.com)

15. Error Reporting and Feedback

You may provide us directly at [info@intunedhq.com](mailto:info@intunedhq.com) with information and feedback concerning errors, suggestions for improvements, ideas, problems, complaints, and other matters related to our Service (“Feedback”). You acknowledge and agree that: (i) you shall not retain, acquire or assert any intellectual property right or other right, title or interest in or to the Feedback; (ii) Company may have development ideas similar to the Feedback; (iii) Feedback does not contain confidential information or proprietary information from you or any third party; and (iv) Company is not under any obligation of confidentiality with respect to the Feedback. In the event the transfer of the ownership to the Feedback is not possible due to applicable mandatory laws, you grant Company and its affiliates an exclusive, transferable, irrevocable, free-of-charge, sub-licensable, unlimited and perpetual right to use (including copy, modify, create derivative works, publish, distribute and commercialize) Feedback in any manner and for any purpose.

16. Links To Other Web Sites

Our Service may contain links to third party web sites or services that are not owned or controlled by The Metrics Shop Inc.

The Metrics Shop Inc. has no control over, and assumes no responsibility for the content, privacy policies, or practices of any third party web sites or services. We do not warrant the offerings of any of these entities/individuals or their websites.

YOU ACKNOWLEDGE AND AGREE THAT THE METRICS SHOP INC. SHALL NOT BE RESPONSIBLE OR LIABLE, DIRECTLY OR INDIRECTLY, FOR ANY DAMAGE OR LOSS CAUSED OR ALLEGED TO BE CAUSED BY OR IN CONNECTION WITH USE OF OR RELIANCE ON ANY SUCH CONTENT, GOODS OR SERVICES AVAILABLE ON OR THROUGH ANY SUCH THIRD PARTY WEB SITES OR SERVICES.

WE STRONGLY ADVISE YOU TO READ THE TERMS OF SERVICE AND PRIVACY POLICIES OF ANY THIRD PARTY WEB SITES OR SERVICES THAT YOU VISIT.

17. Liability and indemnity
    We are not responsible for any illegal actions you might undertake in relation to the use of our Website, Platform, Configuration, or Services that affect third parties (e.g., violation of intellectual property rights, rights to a name or company name, engaging in unfair competition, or breaching terms of third-party websites, applications, and programs).

It is presumed that your usage of these resources is lawful and ethical, and that you have secured all necessary permissions for their use on targeted websites and/or data sources.

We bear no responsibility for the results of the activities conducted using our Website, Platform, Configuration, or Services. Additionally, we are not liable for any third-party services or products that are incorporated into the Platform or any of its functionalities, nor for their operation, or the outcomes of their use.

We do not provide assurances or accept liability for the availability of the Website, Platform, or Services, nor for their performance, reliability, responsiveness, or other performance metrics. We also do not assume responsibility for the functionality or availability of services from other providers that we facilitate for you. We are also not liable for any breaches you commit regarding the terms of use of such services.

You agree to indemnify, defend and hold us, our agents, affiliates, subsidiaries, directors, officers, employees, and applicable third parties harmless from and against any third-party claim, liability, loss, and expense (including damage awards, settlement amounts, and reasonable legal fees), brought against any Indemnified Person(s), arising out of your use of the Website, Platform, Configurations or Services and/or your breach of any of these terms. You acknowledge and agree that each Indemnified Person has the right to assert and enforce its rights under this section directly on its own behalf as a third-party beneficiary.

18. Limitation Of Liability

EXCEPT AS PROHIBITED BY LAW, YOU WILL HOLD US AND OUR OFFICERS, DIRECTORS, EMPLOYEES, AND AGENTS HARMLESS FOR ANY INDIRECT, PUNITIVE, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGE, HOWEVER IT ARISES (INCLUDING ATTORNEYS' FEES AND ALL RELATED COSTS AND EXPENSES OF LITIGATION AND ARBITRATION, OR AT TRIAL OR ON APPEAL, IF ANY, WHETHER OR NOT LITIGATION OR ARBITRATION IS INSTITUTED), WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE, OR OTHER TORTIOUS ACTION, OR ARISING OUT OF OR IN CONNECTION WITH THIS AGREEMENT, INCLUDING WITHOUT LIMITATION ANY CLAIM FOR PERSONAL INJURY OR PROPERTY DAMAGE, ARISING FROM THIS AGREEMENT AND ANY VIOLATION BY YOU OF ANY FEDERAL, STATE, OR LOCAL LAWS, STATUTES, RULES, OR REGULATIONS, EVEN IF COMPANY HAS BEEN PREVIOUSLY ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. EXCEPT AS PROHIBITED BY LAW, IF THERE IS LIABILITY FOUND ON THE PART OF COMPANY, IT WILL BE LIMITED TO THE AMOUNT PAID FOR THE PRODUCTS AND/OR SERVICES, AND UNDER NO CIRCUMSTANCES WILL THERE BE CONSEQUENTIAL OR PUNITIVE DAMAGES. SOME STATES DO NOT ALLOW THE EXCLUSION OR LIMITATION OF PUNITIVE, INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THE PRIOR LIMITATION OR EXCLUSION MAY NOT APPLY TO YOU.

19. Termination

We may terminate or suspend your account and bar access to Service immediately, without prior notice or liability, under our sole discretion, for any reason whatsoever and without limitation, including but not limited to a breach of Terms.

If you wish to terminate your account, you may simply discontinue using Service.

All provisions of Terms which by their nature should survive termination shall survive termination, including, without limitation, ownership provisions, warranty disclaimers, indemnity and limitations of liability.

20. Governing Law

These Terms shall be governed and construed in accordance with the laws of State of Delaware without regard to its conflict of law provisions.

Our failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service and supersede and replace any prior agreements we might have had between us regarding Service.

21. Changes To Service

We reserve the right to withdraw or amend our Service, and any service or material we provide via Service, in our sole discretion without notice. We will not be liable if for any reason all or any part of Service is unavailable at any time or for any period. From time to time, we may restrict access to some parts of Service, or the entire Service, to users, including registered users.

22. Amendments To Terms

We may amend Terms at any time by posting the amended terms on this site. It is your responsibility to review these Terms periodically.

Your continued use of the Platform following the posting of revised Terms means that you accept and agree to the changes. You are expected to check this page frequently so you are aware of any changes, as they are binding on you.

By continuing to access or use our Service after any revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, you are no longer authorized to use Service.

23. Waiver And Severability

No waiver by Company of any term or condition set forth in Terms shall be deemed a further or continuing waiver of such term or condition or a waiver of any other term or condition, and any failure of Company to assert a right or provision under Terms shall not constitute a waiver of such right or provision.

If any provision of Terms is held by a court or other tribunal of competent jurisdiction to be invalid, illegal or unenforceable for any reason, such provision shall be eliminated or limited to the minimum extent such that the remaining provisions of Terms will continue in full force and effect.

24. Acknowledgement

BY USING SERVICE OR OTHER SERVICES PROVIDED BY US, YOU ACKNOWLEDGE THAT YOU HAVE READ THESE TERMS OF SERVICE AND AGREE TO BE BOUND BY THEM.

25. Contact Us

Please send your feedback, comments, requests for technical support:

By email: [info@intunedhq.com](mailto:info@intunedhq.com).


