# ZenML - Bridging the gap between ML & Ops

## Documentation

- [Welcome to ZenML](https://docs.zenml.io/getting-started/introduction): Discover resources to build, deploy, and scale your ML pipelines with ZenML.
- [Installation](https://docs.zenml.io/getting-started/installation): Installing ZenML and getting started.
- [Hello World](https://docs.zenml.io/getting-started/hello-world): Your first ML pipeline with ZenML - from local development to cloud deployment in minutes.
- [Core Concepts](https://docs.zenml.io/getting-started/core-concepts): Discovering the core concepts behind ZenML.
- [System Architecture](https://docs.zenml.io/getting-started/system-architectures): Different variations of the ZenML architecture depending on your needs.
- [Deploy](https://docs.zenml.io/deploying-zenml/deploying-zenml): Why do we need to deploy ZenML?
- [Deploy with Docker](https://docs.zenml.io/deploying-zenml/deploying-zenml/deploy-with-docker): Deploying ZenML in a Docker container.
- [Deploy with Helm](https://docs.zenml.io/deploying-zenml/deploying-zenml/deploy-with-helm): Deploying ZenML in a Kubernetes cluster with Helm.
- [Deploy using HuggingFace Spaces](https://docs.zenml.io/deploying-zenml/deploying-zenml/deploy-using-huggingface-spaces): Deploying ZenML to Huggingface Spaces.
- [Deploy with custom images](https://docs.zenml.io/deploying-zenml/deploying-zenml/deploy-with-custom-image): Deploying ZenML with custom Docker images.
- [Secret management](https://docs.zenml.io/deploying-zenml/deploying-zenml/secret-management): Configuring the secrets store.
- [Custom secret stores](https://docs.zenml.io/deploying-zenml/deploying-zenml/custom-secret-stores): Learning how to develop a custom secret store.
- [Connect](https://docs.zenml.io/deploying-zenml/connecting-to-zenml): Various means of connecting to ZenML.
- [with your User (interactive)](https://docs.zenml.io/deploying-zenml/connecting-to-zenml/connect-in-with-your-user-interactive): Connect to the ZenML server using the ZenML CLI and the web based login.
- [with an API Token](https://docs.zenml.io/deploying-zenml/connecting-to-zenml/connect-with-an-api-token): Connect to the ZenML server using a temporary API token.
- [with a Service Account](https://docs.zenml.io/deploying-zenml/connecting-to-zenml/connect-with-a-service-account): Connect to the ZenML server using a service account and an API key.
- [Manage](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server): Learn how to upgrade your server to a new version of ZenML for the different deployment options.
- [Best practices for upgrading](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server/best-practices-upgrading-zenml): Learn about best practices for upgrading your ZenML server and your code.
- [Using ZenML server in production](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server/using-zenml-server-in-prod): Learn about best practices for using ZenML server in production environments.
- [Troubleshoot your ZenML server](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server/troubleshoot-your-deployed-server): Troubleshooting tips for your ZenML deployment
- [Migration guide](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server/migration-guide): How to migrate your ZenML code to the newest version.
- [Migration guide 0.13.2 → 0.20.0](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server/migration-guide/migration-zero-twenty): How to migrate from ZenML <=0.13.2 to 0.20.0.
- [Migration guide 0.23.0 → 0.30.0](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server/migration-guide/migration-zero-thirty): How to migrate from ZenML 0.20.0-0.23.0 to 0.30.0-0.39.1.
- [Migration guide 0.39.1 → 0.41.0](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server/migration-guide/migration-zero-forty): How to migrate your ZenML pipelines and steps from version <=0.39.1 to 0.41.0.
- [Migration guide 0.58.2 → 0.60.0](https://docs.zenml.io/deploying-zenml/upgrade-zenml-server/migration-guide/migration-zero-sixty): How to migrate from ZenML 0.58.2 to 0.60.0 (Pydantic 2 edition).
- [Steps & Pipelines](https://docs.zenml.io/concepts/steps_and_pipelines): Steps and Pipelines are the core building blocks of ZenML
- [Configuration](https://docs.zenml.io/concepts/steps_and_pipelines/configuration): Configuring and customizing your pipeline runs.
- [Scheduling](https://docs.zenml.io/concepts/steps_and_pipelines/scheduling): Learn how to set, pause and stop a schedule for pipelines.
- [Logging](https://docs.zenml.io/concepts/steps_and_pipelines/logging): Learn how to control and customize logging behavior in ZenML pipelines.
- [Advanced Features](https://docs.zenml.io/concepts/steps_and_pipelines/advanced_features): Advanced features and capabilities of ZenML pipelines and steps
- [YAML Configuration](https://docs.zenml.io/concepts/steps_and_pipelines/yaml_configuration): Learn how to configure ZenML pipelines using YAML configuration files.
- [Artifacts](https://docs.zenml.io/concepts/artifacts): Learn how ZenML manages data artifacts, tracks versioning and lineage, and enables effective data flow between steps.
- [Materializers](https://docs.zenml.io/concepts/artifacts/materializers): Understanding and creating materializers to handle custom data types in ZenML pipelines
- [Visualizations](https://docs.zenml.io/concepts/artifacts/visualizations): Learn how to visualize the data artifacts produced by your ZenML pipelines.
- [Stack & Components](https://docs.zenml.io/concepts/stack_components): Understanding and working with ZenML Stacks and Stack Components
- [Service Connectors](https://docs.zenml.io/concepts/service_connectors): Managing authentication to cloud services and resources with Service Connectors
- [Containerization](https://docs.zenml.io/concepts/containerization): Customize Docker builds to run your pipelines in isolated, well-defined environments.
- [Code Repositories](https://docs.zenml.io/concepts/code-repositories): Tracking your code and avoiding unnecessary Docker builds by connecting your git repo.
- [Secrets](https://docs.zenml.io/concepts/secrets): Registering and using secrets.
- [Tags](https://docs.zenml.io/concepts/tags): Use tags to organize tags in ZenML.
- [Metadata](https://docs.zenml.io/concepts/metadata): Enrich your ML workflow with contextual information using ZenML metadata.
- [Models](https://docs.zenml.io/concepts/models): Managing ML models throughout their lifecycle with ZenML
- [Templates](https://docs.zenml.io/concepts/templates): Create and run pipeline templates in ZenML to standardize execution.
- [Community & content](https://docs.zenml.io/reference/community-and-content): All possible ways for our community to get in touch with ZenML.
- [Environment Variables](https://docs.zenml.io/reference/environment-variables): How to control ZenML behavior with environmental variables.
- [llms.txt](https://docs.zenml.io/reference/llms-txt): The llms.txt file(s) for ZenML
- [FAQ](https://docs.zenml.io/reference/faq): Find answers to the most frequently asked questions about ZenML.
- [Global settings](https://docs.zenml.io/reference/global-settings): Understanding the global settings of your ZenML installation.
- [Legacy docs](https://docs.zenml.io/reference/legacy-docs): All legacy docs of ZenML

## Learn

- [Learn ZenML](https://docs.zenml.io/user-guides/readme): Guides, examples and projects
- [Starter guide](https://docs.zenml.io/user-guides/starter-guide): Kickstart your journey into MLOps with the essentials of ZenML.
- [Create an ML pipeline](https://docs.zenml.io/user-guides/starter-guide/create-an-ml-pipeline): Start with the basics of steps and pipelines.
- [Cache previous executions](https://docs.zenml.io/user-guides/starter-guide/cache-previous-executions): Iterating quickly with ZenML through caching.
- [Manage artifacts](https://docs.zenml.io/user-guides/starter-guide/manage-artifacts): Understand and adjust how ZenML versions your data.
- [Track ML models](https://docs.zenml.io/user-guides/starter-guide/track-ml-models): Creating a full picture of a ML model using the Model Control Plane
- [A starter project](https://docs.zenml.io/user-guides/starter-guide/starter-project): Put your new knowledge into action with a simple starter project
- [Production guide](https://docs.zenml.io/user-guides/production-guide): Level up your skills in a production setting.
- [Deploying ZenML](https://docs.zenml.io/user-guides/production-guide/deploying-zenml): Deploying ZenML is the first step to production.
- [Understanding stacks](https://docs.zenml.io/user-guides/production-guide/understand-stacks): Learning how to switch the infrastructure backend of your code.
- [Connecting remote storage](https://docs.zenml.io/user-guides/production-guide/remote-storage): Transitioning to remote artifact storage.
- [Orchestrate on the cloud](https://docs.zenml.io/user-guides/production-guide/cloud-orchestration): Orchestrate using cloud resources.
- [Configure your pipeline to add compute](https://docs.zenml.io/user-guides/production-guide/configure-pipeline): Add more resources to your pipeline configuration.
- [Configure a code repository](https://docs.zenml.io/user-guides/production-guide/connect-code-repository): Connect a Git repository to ZenML to track code changes and collaborate on MLOps projects.
- [Set up CI/CD](https://docs.zenml.io/user-guides/production-guide/ci-cd): Managing the lifecycle of a ZenML pipeline with Continuous Integration and Delivery
- [An end-to-end project](https://docs.zenml.io/user-guides/production-guide/end-to-end): Put your new knowledge in action with an end-to-end project
- [LLMOps guide](https://docs.zenml.io/user-guides/llmops-guide): Leverage the power of LLMs in your MLOps workflows with ZenML.
- [RAG with ZenML](https://docs.zenml.io/user-guides/llmops-guide/rag-with-zenml): RAG is a sensible way to get started with LLMs.
- [RAG in 85 lines of code](https://docs.zenml.io/user-guides/llmops-guide/rag-with-zenml/rag-85-loc): Learn how to implement a RAG pipeline in just 85 lines of code.
- [Understanding Retrieval-Augmented Generation (RAG)](https://docs.zenml.io/user-guides/llmops-guide/rag-with-zenml/understanding-rag): Understand the Retrieval-Augmented Generation (RAG) technique and its benefits.
- [Data ingestion and preprocessing](https://docs.zenml.io/user-guides/llmops-guide/rag-with-zenml/data-ingestion): Understand how to ingest and preprocess data for RAG pipelines with ZenML.
- [Embeddings generation](https://docs.zenml.io/user-guides/llmops-guide/rag-with-zenml/embeddings-generation): Generate embeddings to improve retrieval performance.
- [Storing embeddings in a vector database](https://docs.zenml.io/user-guides/llmops-guide/rag-with-zenml/storing-embeddings-in-a-vector-database): Store embeddings in a vector database for efficient retrieval.
- [Basic RAG inference pipeline](https://docs.zenml.io/user-guides/llmops-guide/rag-with-zenml/basic-rag-inference-pipeline): Use your RAG components to generate responses to prompts.
- [Evaluation and metrics](https://docs.zenml.io/user-guides/llmops-guide/evaluation): Track how your RAG pipeline improves using evaluation and metrics.
- [Evaluation in 65 lines of code](https://docs.zenml.io/user-guides/llmops-guide/evaluation/evaluation-in-65-loc): Learn how to implement evaluation for RAG in just 65 lines of code.
- [Retrieval evaluation](https://docs.zenml.io/user-guides/llmops-guide/evaluation/retrieval): See how the retrieval component responds to changes in the pipeline.
- [Generation evaluation](https://docs.zenml.io/user-guides/llmops-guide/evaluation/generation): Evaluate the generation component of your RAG pipeline.
- [Evaluation in practice](https://docs.zenml.io/user-guides/llmops-guide/evaluation/evaluation-in-practice): Learn how to evaluate the performance of your RAG system in practice.
- [Reranking for better retrieval](https://docs.zenml.io/user-guides/llmops-guide/reranking): Add reranking to your RAG inference for better retrieval performance.
- [Understanding reranking](https://docs.zenml.io/user-guides/llmops-guide/reranking/understanding-reranking): Understand how reranking works.
- [Implementing reranking in ZenML](https://docs.zenml.io/user-guides/llmops-guide/reranking/implementing-reranking): Learn how to implement reranking in ZenML.
- [Evaluating reranking performance](https://docs.zenml.io/user-guides/llmops-guide/reranking/evaluating-reranking-performance): Evaluate the performance of your reranking model.
- [Improve retrieval by finetuning embeddings](https://docs.zenml.io/user-guides/llmops-guide/finetuning-embeddings): Finetune embeddings on custom synthetic data to improve retrieval performance.
- [Synthetic data generation](https://docs.zenml.io/user-guides/llmops-guide/finetuning-embeddings/synthetic-data-generation): Generate synthetic data with distilabel to finetune embeddings.
- [Finetuning embeddings with Sentence Transformers](https://docs.zenml.io/user-guides/llmops-guide/finetuning-embeddings/finetuning-embeddings-with-sentence-transformers): Finetune embeddings with Sentence Transformers.
- [Evaluating finetuned embeddings](https://docs.zenml.io/user-guides/llmops-guide/finetuning-embeddings/evaluating-finetuned-embeddings): Evaluate finetuned embeddings and compare to original base embeddings.
- [Finetuning LLMs with ZenML](https://docs.zenml.io/user-guides/llmops-guide/finetuning-llms): Finetune LLMs for specific tasks or to improve performance and cost.
- [Finetuning in 100 lines of code](https://docs.zenml.io/user-guides/llmops-guide/finetuning-llms/finetuning-100-loc): Learn how to implement an LLM fine-tuning pipeline in just 100 lines of code.
- [Why and when to finetune LLMs](https://docs.zenml.io/user-guides/llmops-guide/finetuning-llms/why-and-when-to-finetune-llms): Deciding when is the right time to finetune LLMs.
- [Starter choices with finetuning](https://docs.zenml.io/user-guides/llmops-guide/finetuning-llms/starter-choices-for-finetuning-llms): Get started with finetuning LLMs by picking a use case and data.
- [Finetuning with 🤗 Accelerate](https://docs.zenml.io/user-guides/llmops-guide/finetuning-llms/finetuning-with-accelerate): Finetuning an LLM with Accelerate and PEFT
- [Evaluation for finetuning](https://docs.zenml.io/user-guides/llmops-guide/finetuning-llms/evaluation-for-finetuning)
- [Deploying finetuned models](https://docs.zenml.io/user-guides/llmops-guide/finetuning-llms/deploying-finetuned-models)
- [Next steps](https://docs.zenml.io/user-guides/llmops-guide/finetuning-llms/next-steps)
- [Managing scheduled pipelines](https://docs.zenml.io/user-guides/tutorial/managing-scheduled-pipelines): A step-by-step tutorial on how to create, update, and delete scheduled   pipelines in ZenML
- [Trigger pipelines from external systems](https://docs.zenml.io/user-guides/tutorial/trigger-pipelines-from-external-systems): A step-by-step tutorial on effectively triggering your ZenML pipelines from external systems
- [Hyper-parameter tuning](https://docs.zenml.io/user-guides/tutorial/hyper-parameter-tuning): Running a hyperparameter tuning trial with ZenML.
- [Inspecting past pipeline runs](https://docs.zenml.io/user-guides/tutorial/fetching-pipelines): Inspecting a finished pipeline run and its outputs.
- [Train with GPUs](https://docs.zenml.io/user-guides/tutorial/distributed-training): Train ZenML pipelines on GPUs and scale out with 🤗 Accelerate.
- [Running notebooks remotely](https://docs.zenml.io/user-guides/tutorial/run-remote-notebooks)
- [Managing machine learning datasets](https://docs.zenml.io/user-guides/tutorial/datasets): Model datasets using simple abstractions.
- [Handling big data](https://docs.zenml.io/user-guides/tutorial/manage-big-data): Learn about how to manage big data with ZenML.
- [Keep Your Dashboard Clean](https://docs.zenml.io/user-guides/best-practices/keep-your-dashboard-server-clean): Learn how to keep your pipeline runs clean during development.
- [Shared Components for Teams](https://docs.zenml.io/user-guides/best-practices/shared-components-for-teams): Sharing code and libraries within teams.
- [Organizing Stacks Pipelines Models](https://docs.zenml.io/user-guides/best-practices/organizing-pipelines-and-models): A step-by-step tutorial on effectively organizing your ML assets in ZenML using tags and projects
- [Access Management](https://docs.zenml.io/user-guides/best-practices/access-management): A guide on managing user roles and responsibilities in ZenML.
- [Setting up a Project Repository](https://docs.zenml.io/user-guides/best-practices/set-up-your-repository): Setting your team up for success with a well-architected ZenML project.
- [Creating Templates for ML Platform](https://docs.zenml.io/user-guides/best-practices/project-templates): Setting your team up for success with a well-architected ZenML project.
- [Using VS Code extension](https://docs.zenml.io/user-guides/best-practices/vscode-extension): Use the ZenML VSCode extension to manage your ZenML server
- [Leveraging MCP](https://docs.zenml.io/user-guides/best-practices/mcp-chat-with-server): Chat with your ZenML server
- [Debugging and Solving Issues](https://docs.zenml.io/user-guides/best-practices/debug-and-solve-issues): A guide to debug common issues and get help.

## ZenML Pro

- [Introduction](https://docs.zenml.io/pro/readme): Learn about the ZenML Pro features and deployment scenarios.
- [Self-hosted deployment](https://docs.zenml.io/pro/deployments/self-hosted): Guide for installing ZenML Pro self-hosted in a Kubernetes cluster.
- [Hierarchy](https://docs.zenml.io/pro/core-concepts/hierarchy): Understanding ZenML's hierarchical structure
- [Organizations](https://docs.zenml.io/pro/core-concepts/organization): Manage organizations in ZenML
- [Workspaces](https://docs.zenml.io/pro/core-concepts/workspaces): Learn how to use workspaces in ZenML Pro.
- [Projects](https://docs.zenml.io/pro/core-concepts/projects): Managing projects in ZenML
- [Teams](https://docs.zenml.io/pro/core-concepts/teams): Learn about Teams in ZenML Pro and how they can be used to manage groups of users across your organization and workspaces.
- [Roles & Permissions](https://docs.zenml.io/pro/core-concepts/roles): Learn about the different roles and permissions you can assign to your team members in ZenML Pro.

## Stacks

- [Overview](https://docs.zenml.io/stacks/component-guide): Overview of categories of MLOps components and third-party integrations.
- [Integrations](https://docs.zenml.io/stacks/integrations)
- [Orchestrators](https://docs.zenml.io/stacks/stack-components/orchestrators): Orchestrating the execution of ML pipelines.
- [Local Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/local): Orchestrating your pipelines to run locally.
- [Local Docker Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/local-docker): Orchestrating your pipelines to run in Docker.
- [Kubeflow Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/kubeflow): Orchestrating your pipelines to run on Kubeflow.
- [Kubernetes Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/kubernetes): Orchestrating your pipelines to run on Kubernetes clusters.
- [Google Cloud VertexAI Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/vertex): Orchestrating your pipelines to run on Vertex AI.
- [AWS Sagemaker Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/sagemaker): Orchestrating your pipelines to run on Amazon Sagemaker.
- [AzureML Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/azureml): Orchestrating your pipelines to run on AzureML.
- [Databricks Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/databricks): Orchestrating your pipelines to run on Databricks.
- [Tekton Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/tekton): Orchestrating your pipelines to run on Tekton.
- [Airflow Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/airflow): Orchestrating your pipelines to run on Airflow.
- [Skypilot VM Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/skypilot-vm): Orchestrating your pipelines to run on VMs using SkyPilot.
- [HyperAI Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/hyperai): Orchestrating your pipelines to run on HyperAI.ai instances.
- [Lightning AI Orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/lightning): Orchestrating your pipelines to run on Lightning AI.
- [Develop a custom orchestrator](https://docs.zenml.io/stacks/stack-components/orchestrators/custom): Learning how to develop a custom orchestrator.
- [Artifact Stores](https://docs.zenml.io/stacks/stack-components/artifact-stores): Setting up a persistent storage for your artifacts.
- [Local Artifact Store](https://docs.zenml.io/stacks/stack-components/artifact-stores/local): Storing artifacts on your local filesystem.
- [Amazon Simple Cloud Storage (S3)](https://docs.zenml.io/stacks/stack-components/artifact-stores/s3): Storing artifacts in an AWS S3 bucket.
- [Google Cloud Storage (GCS)](https://docs.zenml.io/stacks/stack-components/artifact-stores/gcp): Storing artifacts using GCP Cloud Storage.
- [Azure Blob Storage](https://docs.zenml.io/stacks/stack-components/artifact-stores/azure): Storing artifacts using Azure Blob Storage
- [Develop a custom artifact store](https://docs.zenml.io/stacks/stack-components/artifact-stores/custom): Learning how to develop a custom artifact store.
- [Container Registries](https://docs.zenml.io/stacks/stack-components/container-registries): Setting up a storage for Docker images.
- [Default Container Registry](https://docs.zenml.io/stacks/stack-components/container-registries/default): Storing container images locally.
- [DockerHub](https://docs.zenml.io/stacks/stack-components/container-registries/dockerhub): Storing container images in DockerHub.
- [Amazon Elastic Container Registry (ECR)](https://docs.zenml.io/stacks/stack-components/container-registries/aws): Storing container images in Amazon ECR.
- [Google Cloud Container Registry](https://docs.zenml.io/stacks/stack-components/container-registries/gcp): Storing container images in GCP.
- [Azure Container Registry](https://docs.zenml.io/stacks/stack-components/container-registries/azure): Storing container images in Azure.
- [GitHub Container Registry](https://docs.zenml.io/stacks/stack-components/container-registries/github): Storing container images in GitHub.
- [Develop a custom container registry](https://docs.zenml.io/stacks/stack-components/container-registries/custom): Learning how to develop a custom container registry.
- [Step Operators](https://docs.zenml.io/stacks/stack-components/step-operators): Executing individual steps in specialized environments.
- [Amazon SageMaker](https://docs.zenml.io/stacks/stack-components/step-operators/sagemaker): Executing individual steps in SageMaker.
- [AzureML](https://docs.zenml.io/stacks/stack-components/step-operators/azureml): Executing individual steps in AzureML.
- [Google Cloud VertexAI](https://docs.zenml.io/stacks/stack-components/step-operators/vertex): Executing individual steps in Vertex AI.
- [Kubernetes](https://docs.zenml.io/stacks/stack-components/step-operators/kubernetes): Executing individual steps in Kubernetes Pods.
- [Modal](https://docs.zenml.io/stacks/stack-components/step-operators/modal): Executing individual steps in Modal.
- [Spark](https://docs.zenml.io/stacks/stack-components/step-operators/spark-kubernetes): Executing individual steps on Spark
- [Develop a Custom Step Operator](https://docs.zenml.io/stacks/stack-components/step-operators/custom): Learning how to develop a custom step operator.
- [Experiment Trackers](https://docs.zenml.io/stacks/stack-components/experiment-trackers): Logging and visualizing ML experiments.
- [Comet](https://docs.zenml.io/stacks/stack-components/experiment-trackers/comet): Logging and visualizing experiments with Comet.
- [MLflow](https://docs.zenml.io/stacks/stack-components/experiment-trackers/mlflow): Logging and visualizing experiments with MLflow.
- [Neptune](https://docs.zenml.io/stacks/stack-components/experiment-trackers/neptune): Logging and visualizing experiments with neptune.ai
- [Weights & Biases](https://docs.zenml.io/stacks/stack-components/experiment-trackers/wandb): Logging and visualizing experiments with Weights & Biases.
- [Google Cloud VertexAI Experiment Tracker](https://docs.zenml.io/stacks/stack-components/experiment-trackers/vertexai): Logging and visualizing experiments with Vertex AI Experiment Tracker.
- [Develop a custom experiment tracker](https://docs.zenml.io/stacks/stack-components/experiment-trackers/custom): Learning how to develop a custom experiment tracker.
- [Image Builders](https://docs.zenml.io/stacks/stack-components/image-builders): Building container images for your ML workflow.
- [Local Image Builder](https://docs.zenml.io/stacks/stack-components/image-builders/local): Building container images locally.
- [Kaniko Image Builder](https://docs.zenml.io/stacks/stack-components/image-builders/kaniko): Building container images with Kaniko.
- [AWS Image Builder](https://docs.zenml.io/stacks/stack-components/image-builders/aws): Building container images with AWS CodeBuild
- [Google Cloud Image Builder](https://docs.zenml.io/stacks/stack-components/image-builders/gcp): Building container images with Google Cloud Build
- [Develop a Custom Image Builder](https://docs.zenml.io/stacks/stack-components/image-builders/custom): Learning how to develop a custom image builder.
- [Alerters](https://docs.zenml.io/stacks/stack-components/alerters): Sending automated alerts to chat services.
- [Discord Alerter](https://docs.zenml.io/stacks/stack-components/alerters/discord): Sending automated alerts to a Discord channel.
- [Slack Alerter](https://docs.zenml.io/stacks/stack-components/alerters/slack): Sending automated alerts to a Slack channel.
- [Develop a Custom Alerter](https://docs.zenml.io/stacks/stack-components/alerters/custom): Learning how to develop a custom alerter.
- [Annotators](https://docs.zenml.io/stacks/stack-components/annotators): Annotating the data in your workflow.
- [Argilla](https://docs.zenml.io/stacks/stack-components/annotators/argilla): Annotating data using Argilla.
- [Label Studio](https://docs.zenml.io/stacks/stack-components/annotators/label-studio): Annotating data using Label Studio.
- [Pigeon](https://docs.zenml.io/stacks/stack-components/annotators/pigeon): Annotating data using Pigeon.
- [Prodigy](https://docs.zenml.io/stacks/stack-components/annotators/prodigy): Annotating data using Prodigy.
- [Develop a Custom Annotator](https://docs.zenml.io/stacks/stack-components/annotators/custom): Learning how to develop a custom annotator.
- [Data Validators](https://docs.zenml.io/stacks/stack-components/data-validators): How to enhance and maintain the quality of your data and the performance of your models with data profiling and validation
- [Great Expectations](https://docs.zenml.io/stacks/stack-components/data-validators/great-expectations): How to use Great Expectations to run data quality checks in your pipelines and document the results
- [Deepchecks](https://docs.zenml.io/stacks/stack-components/data-validators/deepchecks): How to test the data and models used in your pipelines with Deepchecks test suites
- [Evidently](https://docs.zenml.io/stacks/stack-components/data-validators/evidently): How to keep your data quality in check and guard against data and model drift with Evidently profiling
- [Whylogs](https://docs.zenml.io/stacks/stack-components/data-validators/whylogs): How to collect and visualize statistics to track changes in your pipelines' data with whylogs/WhyLabs profiling.
- [Develop a custom data validator](https://docs.zenml.io/stacks/stack-components/data-validators/custom): How to develop a custom data validator
- [Feature Stores](https://docs.zenml.io/stacks/stack-components/feature-stores): Managing data in feature stores.
- [Feast](https://docs.zenml.io/stacks/stack-components/feature-stores/feast): Managing data in Feast feature stores.
- [Develop a Custom Feature Store](https://docs.zenml.io/stacks/stack-components/feature-stores/custom): Learning how to develop a custom feature store.
- [Model Deployers](https://docs.zenml.io/stacks/stack-components/model-deployers): Deploying your models and serve real-time predictions.
- [MLflow](https://docs.zenml.io/stacks/stack-components/model-deployers/mlflow): Deploying your models locally with MLflow.
- [Seldon](https://docs.zenml.io/stacks/stack-components/model-deployers/seldon): Deploying models to Kubernetes with Seldon Core.
- [BentoML](https://docs.zenml.io/stacks/stack-components/model-deployers/bentoml): Deploying your models locally with BentoML.
- [Hugging Face](https://docs.zenml.io/stacks/stack-components/model-deployers/huggingface): Deploying models to Huggingface Inference Endpoints with Hugging Face :hugging\_face:.
- [Databricks](https://docs.zenml.io/stacks/stack-components/model-deployers/databricks): Deploying models to Databricks Inference Endpoints with Databricks
- [vLLM](https://docs.zenml.io/stacks/stack-components/model-deployers/vllm): Deploying your LLM locally with vLLM.
- [Develop a Custom Model Deployer](https://docs.zenml.io/stacks/stack-components/model-deployers/custom): Learning how to develop a custom model deployer.
- [Model Registries](https://docs.zenml.io/stacks/stack-components/model-registries): Tracking and managing ML models.
- [MLflow Model Registry](https://docs.zenml.io/stacks/stack-components/model-registries/mlflow): Managing MLFlow logged models and artifacts
- [Develop a Custom Model Registry](https://docs.zenml.io/stacks/stack-components/model-registries/custom): Learning how to develop a custom model registry.
- [Introduction](https://docs.zenml.io/stacks/service-connectors/auth-management): Connect your ZenML deployment to a cloud provider and other infrastructure services and resources.
- [Complete guide](https://docs.zenml.io/stacks/service-connectors/service-connectors-guide): The complete guide to managing Service Connectors and connecting ZenML to external resources.
- [Best practices](https://docs.zenml.io/stacks/service-connectors/best-security-practices): Best practices concerning the various authentication methods implemented by Service Connectors.
- [Connector Types](https://docs.zenml.io/stacks/service-connectors/connector-types)
- [Docker Service Connector](https://docs.zenml.io/stacks/service-connectors/connector-types/docker-service-connector): Configuring Docker Service Connectors to connect ZenML to Docker container registries.
- [Kubernetes Service Connector](https://docs.zenml.io/stacks/service-connectors/connector-types/kubernetes-service-connector): Configuring Kubernetes Service Connectors to connect ZenML to Kubernetes clusters.
- [AWS Service Connector](https://docs.zenml.io/stacks/service-connectors/connector-types/aws-service-connector): Configuring AWS Service Connectors to connect ZenML to AWS resources like S3 buckets, EKS Kubernetes clusters and ECR container registries.
- [GCP Service Connector](https://docs.zenml.io/stacks/service-connectors/connector-types/gcp-service-connector): Configuring GCP Service Connectors to connect ZenML to GCP resources such as GCS buckets, GKE Kubernetes clusters, and GCR container registries.
- [Azure Service Connector](https://docs.zenml.io/stacks/service-connectors/connector-types/azure-service-connector): Configuring Azure Service Connectors to connect ZenML to Azure resources such as Blob storage buckets, AKS Kubernetes clusters, and ACR container registries.
- [HyperAI Service Connector](https://docs.zenml.io/stacks/service-connectors/connector-types/hyperai-service-connector): Configuring HyperAI Connectors to connect ZenML to HyperAI instances.
- [AWS](https://docs.zenml.io/stacks/popular-stacks/aws-guide): A simple guide to create an AWS stack to run your ZenML pipelines
- [Azure](https://docs.zenml.io/stacks/popular-stacks/azure-guide): A simple guide to create an Azure stack to run your ZenML pipelines
- [GCP](https://docs.zenml.io/stacks/popular-stacks/gcp-guide): A simple guide to quickly set up a minimal stack on GCP.
- [Kubernetes](https://docs.zenml.io/stacks/popular-stacks/kubernetes): Learn how to deploy ZenML pipelines on a Kubernetes cluster.
- [1-click Deployment](https://docs.zenml.io/stacks/deployment/deploy-a-cloud-stack): Deploy a cloud stack from scratch with a single click
- [Terraform Modules](https://docs.zenml.io/stacks/deployment/deploy-a-cloud-stack-with-terraform): Deploy a cloud stack using Terraform
- [Register a cloud stack](https://docs.zenml.io/stacks/deployment/register-a-cloud-stack): Seamlessly register a cloud stack by using existing infrastructure
- [Infrastructure as code](https://docs.zenml.io/stacks/deployment/infrastructure-as-code): Leverage Infrastructure as Code to manage your ZenML stacks and components.
- [Manage your stacks with Terraform](https://docs.zenml.io/stacks/deployment/infrastructure-as-code/terraform-stack-management): Registering Existing Infrastructure with ZenML - A Guide for Terraform Users
- [ZenML & Terraform Best Practices](https://docs.zenml.io/stacks/deployment/infrastructure-as-code/best-practices): Best practices for using IaC with ZenML
- [Custom Stack Component](https://docs.zenml.io/stacks/contribute/custom-stack-component): How to write a custom stack component flavor
- [Custom Integration](https://docs.zenml.io/stacks/contribute/implement-a-custom-integration): Creating an external integration and contributing to ZenML

## API Reference

- [Overview](https://docs.zenml.io/api-reference/readme): The ZenML API provides programmatic access to ZenML services beyond what's available in the Python SDK.
- [Getting Started](https://docs.zenml.io/api-reference/oss-api/getting-started)
- [OSS API](https://docs.zenml.io/api-reference/oss-api/oss-api)
- [Artifacts](https://docs.zenml.io/api-reference/oss-api/oss-api/artifacts)
- [Artifact versions](https://docs.zenml.io/api-reference/oss-api/oss-api/artifact-versions)
- [Batch](https://docs.zenml.io/api-reference/oss-api/oss-api/artifact-versions/batch)
- [Visualize](https://docs.zenml.io/api-reference/oss-api/oss-api/artifact-versions/visualize)
- [Login](https://docs.zenml.io/api-reference/oss-api/oss-api/login)
- [Logout](https://docs.zenml.io/api-reference/oss-api/oss-api/logout)
- [Device authorization](https://docs.zenml.io/api-reference/oss-api/oss-api/device-authorization)
- [Api token](https://docs.zenml.io/api-reference/oss-api/oss-api/api-token)
- [Code repositories](https://docs.zenml.io/api-reference/oss-api/oss-api/code-repositories)
- [Logs](https://docs.zenml.io/api-reference/oss-api/oss-api/logs)
- [Models](https://docs.zenml.io/api-reference/oss-api/oss-api/models)
- [Model versions](https://docs.zenml.io/api-reference/oss-api/oss-api/models/model-versions)
- [Model versions](https://docs.zenml.io/api-reference/oss-api/oss-api/model-versions)
- [Artifacts](https://docs.zenml.io/api-reference/oss-api/oss-api/model-versions/artifacts)
- [Runs](https://docs.zenml.io/api-reference/oss-api/oss-api/model-versions/runs)
- [Pipelines](https://docs.zenml.io/api-reference/oss-api/oss-api/pipelines)
- [Runs](https://docs.zenml.io/api-reference/oss-api/oss-api/pipelines/runs)
- [Runs](https://docs.zenml.io/api-reference/oss-api/oss-api/runs)
- [Steps](https://docs.zenml.io/api-reference/oss-api/oss-api/runs/steps)
- [Pipeline configuration](https://docs.zenml.io/api-reference/oss-api/oss-api/runs/pipeline-configuration)
- [Status](https://docs.zenml.io/api-reference/oss-api/oss-api/runs/status)
- [Refresh](https://docs.zenml.io/api-reference/oss-api/oss-api/runs/refresh)
- [Run templates](https://docs.zenml.io/api-reference/oss-api/oss-api/run-templates)
- [Runs](https://docs.zenml.io/api-reference/oss-api/oss-api/run-templates/runs)
- [Schedules](https://docs.zenml.io/api-reference/oss-api/oss-api/schedules)
- [Secrets](https://docs.zenml.io/api-reference/oss-api/oss-api/secrets)
- [Info](https://docs.zenml.io/api-reference/oss-api/oss-api/info)
- [Service accounts](https://docs.zenml.io/api-reference/oss-api/oss-api/service-accounts)
- [Api keys](https://docs.zenml.io/api-reference/oss-api/oss-api/service-accounts/api-keys)
- [Rotate](https://docs.zenml.io/api-reference/oss-api/oss-api/service-accounts/rotate)
- [Service connectors](https://docs.zenml.io/api-reference/oss-api/oss-api/service-connectors)
- [Verify](https://docs.zenml.io/api-reference/oss-api/oss-api/service-connectors/verify)
- [Client](https://docs.zenml.io/api-reference/oss-api/oss-api/service-connectors/client)
- [Full stack resources](https://docs.zenml.io/api-reference/oss-api/oss-api/service-connectors/full-stack-resources)
- [Services](https://docs.zenml.io/api-reference/oss-api/oss-api/services)
- [Stacks](https://docs.zenml.io/api-reference/oss-api/oss-api/stacks)
- [Components](https://docs.zenml.io/api-reference/oss-api/oss-api/components)
- [Component types](https://docs.zenml.io/api-reference/oss-api/oss-api/component-types)
- [Steps](https://docs.zenml.io/api-reference/oss-api/oss-api/steps)
- [Step configuration](https://docs.zenml.io/api-reference/oss-api/oss-api/steps/step-configuration)
- [Status](https://docs.zenml.io/api-reference/oss-api/oss-api/steps/status)
- [Logs](https://docs.zenml.io/api-reference/oss-api/oss-api/steps/logs)
- [Tags](https://docs.zenml.io/api-reference/oss-api/oss-api/tags)
- [Users](https://docs.zenml.io/api-reference/oss-api/oss-api/users)
- [Resource membership](https://docs.zenml.io/api-reference/oss-api/oss-api/users/resource-membership)
- [Current user](https://docs.zenml.io/api-reference/oss-api/oss-api/current-user)
- [Getting Started](https://docs.zenml.io/api-reference/pro-api/getting-started)
- [Pro API](https://docs.zenml.io/api-reference/pro-api/pro-api)
- [Tenants](https://docs.zenml.io/api-reference/pro-api/pro-api/tenants)
- [Deploy](https://docs.zenml.io/api-reference/pro-api/pro-api/tenants/deploy)
- [Deactivate](https://docs.zenml.io/api-reference/pro-api/pro-api/tenants/deactivate)
- [Members](https://docs.zenml.io/api-reference/pro-api/pro-api/tenants/members)
- [Tenant status](https://docs.zenml.io/api-reference/pro-api/pro-api/tenant-status)
- [Users](https://docs.zenml.io/api-reference/pro-api/pro-api/users)
- [Authorize server](https://docs.zenml.io/api-reference/pro-api/pro-api/users/authorize-server)
- [Me](https://docs.zenml.io/api-reference/pro-api/pro-api/users/me)
- [Invitations](https://docs.zenml.io/api-reference/pro-api/pro-api/invitations)
- [Releases](https://docs.zenml.io/api-reference/pro-api/pro-api/releases)
- [Devices](https://docs.zenml.io/api-reference/pro-api/pro-api/devices)
- [Verify](https://docs.zenml.io/api-reference/pro-api/pro-api/devices/verify)
- [Roles](https://docs.zenml.io/api-reference/pro-api/pro-api/roles)
- [Assignments](https://docs.zenml.io/api-reference/pro-api/pro-api/roles/assignments)
- [Permissions](https://docs.zenml.io/api-reference/pro-api/pro-api/permissions)
- [Teams](https://docs.zenml.io/api-reference/pro-api/pro-api/teams)
- [Members](https://docs.zenml.io/api-reference/pro-api/pro-api/teams/members)
- [Organizations](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations)
- [Trial](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/trial)
- [Invitations](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/invitations)
- [Members](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/members)
- [Roles](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/roles)
- [Teams](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/teams)
- [Tenants](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/tenants)
- [Tenant](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/tenant)
- [Entitlement](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/entitlement)
- [Validation](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/validation)
- [Name](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/validation/name)
- [Tenant name](https://docs.zenml.io/api-reference/pro-api/pro-api/organizations/validation/tenant-name)
- [Health](https://docs.zenml.io/api-reference/pro-api/pro-api/health)
- [Usage event](https://docs.zenml.io/api-reference/pro-api/pro-api/usage-event)
- [Usage batch](https://docs.zenml.io/api-reference/pro-api/pro-api/usage-batch)
- [Stigg webhook](https://docs.zenml.io/api-reference/pro-api/pro-api/stigg-webhook)
- [Auth](https://docs.zenml.io/api-reference/pro-api/pro-api/auth)
- [Login](https://docs.zenml.io/api-reference/pro-api/pro-api/auth/login)
- [Connections](https://docs.zenml.io/api-reference/pro-api/pro-api/auth/connections)
- [Authorize](https://docs.zenml.io/api-reference/pro-api/pro-api/auth/authorize)
- [Callback](https://docs.zenml.io/api-reference/pro-api/pro-api/auth/callback)
- [Logout](https://docs.zenml.io/api-reference/pro-api/pro-api/auth/logout)
- [Device authorization](https://docs.zenml.io/api-reference/pro-api/pro-api/auth/device-authorization)
- [Api token](https://docs.zenml.io/api-reference/pro-api/pro-api/auth/api-token)
- [Tenant authorization](https://docs.zenml.io/api-reference/pro-api/pro-api/auth/tenant-authorization)
- [Rbac](https://docs.zenml.io/api-reference/pro-api/pro-api/rbac)
- [Check permissions](https://docs.zenml.io/api-reference/pro-api/pro-api/rbac/check-permissions)
- [Allowed resource ids](https://docs.zenml.io/api-reference/pro-api/pro-api/rbac/allowed-resource-ids)
- [Resource members](https://docs.zenml.io/api-reference/pro-api/pro-api/rbac/resource-members)
- [Server](https://docs.zenml.io/api-reference/pro-api/pro-api/server)
- [Info](https://docs.zenml.io/api-reference/pro-api/pro-api/server/info)

## SDK Reference

- [Overview](https://docs.zenml.io/sdk-reference/readme): See docstrings for ZenML Code
- [Client](https://docs.zenml.io/sdk-reference/client)
- [Example usages](https://docs.zenml.io/sdk-reference/example-usages): Interacting with your ZenML instance through the ZenML Client.
