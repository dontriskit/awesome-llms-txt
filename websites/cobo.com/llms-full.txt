# Get Address History
Source: https://cobo.com/developers/v1/api-references/custody-wallet/address_history

GET /v1/custody/address_history/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of addresses associated with a custody wallet for a given coin, with pagination support. The response is a JSON array of objects, each containing a 'coin' field and an 'address' field.

#### Request

<ParamField query="coin" type="String" required>The coin symbol.</ParamField>
<ParamField query="page_index" type="Int">The page index, starting from 0.</ParamField>
<ParamField query="page_length" type="Int">The number of items per page.</ParamField>
<ParamField query="sort_flag" type="Int">The sort flag, 0 for ascending and 1 for descending.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="coin" type="String" required>The coin symbol.</ResponseField>
    <ResponseField name="address" type="String" required>The address associated with the custody wallet.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/address_history/",
    {
      "coin": "ETH",
      "page_index": 0,
      "page_length": 20,
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/address_history/',
          {
            "coin": "ETH",
            "page_index": 0,
            "page_length": 20,
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/address_history/", map[string]string{
      "coin": "ETH",
      "page_index": 0,
      "page_length": 20,
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
        "coin": "ETH",
        "address": "0x544094588811118b7701cf4a9dea056e775b4b4e"
      },
      {
        "coin": "ETH",
        "address": "0x644094588811118b7701cf4a9dea056e775b4b4e"
      },
      {
        "coin": "ETH",
        "address": "0x574094588811118b7701cf4a9dea056e775b4b4e"
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Address Info
Source: https://cobo.com/developers/v1/api-references/custody-wallet/address_info

GET /v1/custody/address_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a given address for a specific coin. It checks if the address belongs to the custody wallet and raises an exception if it doesn't. The response is a JSON object containing the coin and address fields.

#### Request

<ParamField query="coin" type="String" required>The coin symbol.</ParamField>
<ParamField query="address" type="String" required>The address to retrieve information for.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">The coin symbol.</ResponseField>
    <ResponseField name="address" type="String">The address to retrieve information for.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/address_info/",
    {
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/address_info/',
          {
              "coin": "ETH",
              "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/address_info/", map[string]string{
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e"
    }
  }
  ----
  {
    "success": false,
    "error_code": 12015,
    "error_description": "0x544094588811118b7701cf4a9dea056e775b4b4e is not Cobo Address of Coin ETH"
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Addresses Info
Source: https://cobo.com/developers/v1/api-references/custody-wallet/addresses_info

GET /v1/custody/addresses_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a list of addresses for a specific coin. The endpoint accepts GET and POST requests with parameters 'coin' and 'address'. The 'coin' parameter specifies the coin type, and the 'address' parameter is a comma-separated list of addresses. The response contains the coin type and a comma-separated list of addresses that belong to the custody wallet of the authenticated user.

#### Request

<ParamField query="coin" type="String" required>The coin type.</ParamField>
<ParamField query="address" type="String" required>A comma-separated list of addresses.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">The coin type.</ResponseField>
    <ResponseField name="addresses" type="String">A comma-separated list of addresses that belong to the custody wallet of the authenticated user.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
   "GET",
   "/v1/custody/addresses_info/",
   {
     "coin": "ETH",
     "address": "0x544094588811118b7701cf4a9dea056e775b4b4e,0x33bb80427711adc881b56a209a374b00388f8a99,0x70099565fe19464b544ccb6ad8080891863eb080,0xafe68A8F8B339D7bbb30A9e486c0c06c3964Cd7B",
   },
   api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/addresses_info/',
          {
              "coin": "ETH",
              "address": "0x544094588811118b7701cf4a9dea056e775b4b4e,0x33bb80427711adc881b56a209a374b00388f8a99,0x70099565fe19464b544ccb6ad8080891863eb080,0xafe68A8F8B339D7bbb30A9e486c0c06c3964Cd7B",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/addresses_info/", map[string]string{
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e,0x33bb80427711adc881b56a209a374b00388f8a99,0x70099565fe19464b544ccb6ad8080891863eb080,0xafe68A8F8B339D7bbb30A9e486c0c06c3964Cd7B",
  })
  ```
</RequestExample>

And here is an example response from the API endpoint:

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "coin": "ETH",
      "addresses": "0x544094588811118b7701cf4a9dea056e775b4b4e,0x33bb80427711adc881b56a209a374b00388f8a99,0x70099565fe19464b544ccb6ad8080891863eb080"
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Coin Details
Source: https://cobo.com/developers/v1/api-references/custody-wallet/coin_info

GET /v1/custody/coin_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the currency rate and unit for a given coin code. The endpoint requires authentication and takes a 'coin_code' parameter in the GET request.

<Tip> FAQ：[How do I query the withdraw fees?](/v1/faqs/coin-management#how-do-i-query-the-withdrawal-fees)</Tip>

#### Request

<ParamField query="coin" type="String" required>Coin code</ParamField>
<ParamField query="amount" type="Int">the amount you wish to send</ParamField>
<Tip>To accurately estimate handling fees, it is required to include the amount parameter. Otherwise, this endpoint will return the default transaction fee. Please note that the default transaction fee might not be very accurate.</Tip>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">Coin code</ResponseField>
    <ResponseField name="display_code" type="String">Coin ticker symbol  (not unique, changeable, for reference only )</ResponseField>
    <ResponseField name="description" type="String">Coin code</ResponseField>
    <ResponseField name="decimal" type="Int">Coin balance decimal places</ResponseField>
    <ResponseField name="can_deposit" type="bool">Deposit accessibility</ResponseField>
    <ResponseField name="can_withdraw" type="bool">Withdraw accessibility</ResponseField>
    <ResponseField name="balance" type="String">Current balance</ResponseField>
    <ResponseField name="abs_balance" type="String">Absolute value of balance</ResponseField>
    <ResponseField name="fee_coin" type="String">Coin used for fee</ResponseField>
    <ResponseField name="abs_estimate_fee" type="String">Estimated fee</ResponseField>
    <ResponseField name="abs_estimate_fee_usd" type="String">Estimated fee(Convert to USD calculation) </ResponseField>
    <ResponseField name="confirming_threshold" type="Int">Confirmation threshold required for the coin</ResponseField>
    <ResponseField name="dust_threshold" type="Int">Coin minimum withdraw threshold</ResponseField>
    <ResponseField name="minimum_deposit_threshold" type="String">Coin minimum deposit threshold</ResponseField>
    <ResponseField name="token_address" type="String">Smart contract address for token (null for main-chain token)</ResponseField>
    <ResponseField name="require_memo" type="String">Memo for specified coins(EOS,XLM,XRP,IOST)</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/coin_info/",
    {
      "coin": "ETH",
      "amount": 1000000000000000000
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/coin_info/', {
      "coin": "ETH",
      "amount": 1000000000000000000
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/coin_info/", map[string]string{
      "coin": "ETH",
      "amount": 1000000000000000000
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "coin": "ETH",
      "display_code": "ETH",
      "description": "Ethereum",
      "decimal": 18,
      "can_deposit": true,
      "can_withdraw": true,
      "require_memo": false,
      "balance": "0",
      "abs_balance": "0",
      "fee_coin": "ETH",
      "abs_estimate_fee": "0.0003648",
      "abs_estimate_fee_usd": "5.67",
      "confirming_threshold": 12,
      "dust_threshold": 0,
      "token_address": ""
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Gas Station Balance
Source: https://cobo.com/developers/v1/api-references/custody-wallet/get_gas_station_balance

GET /v1/custody/get_gas_station_balance/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of assets of gas station. The response includes asset details such as coin, address, and balance.

#### Request

None

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="assets" type="object[]">
      <Expandable title="object">
        <ResponseField name="coin" type="String">The coin symbol</ResponseField>
        <ResponseField name="description" type="String">Full name of coin (not unique, changeable, for reference only)</ResponseField>
        <ResponseField name="decimal" type="String">Coin balance decimal places</ResponseField>
        <ResponseField name="balance" type="String">Current balance</ResponseField>
        <ResponseField name="abs_balance" type="String">Absolute value of balance</ResponseField>
        <ResponseField name="address" type="String">Address</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/get_gas_station_balance/',
    {},
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/get_gas_station_balance/', {}, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/get_gas_station_balance/", map[string]string{})
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "assets": [
        {
          "coin": "ETH",
          "description": "Ethereum",
          "decimal": 18,
          "balance": "446826793400000000",
          "abs_balance": "0.4468267934",
          "address": "0xb59c5dd6d35318937367391767a00dbdc4249041"
        },
        {
          "coin": "BSC_BNB",
          "description": "Binance Smart Chain",
          "decimal": 18,
          "balance": "0",
          "abs_balance": "0",
          "address": "0xb59c5dd6d35318937367391767a00dbdc4249041"
        }
      ]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Supported Coins
Source: https://cobo.com/developers/v1/api-references/custody-wallet/get_supported_coins

GET /v1/custody/get_supported_coins/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of supported coins for the WaaS API.

<Tip> FAQ：[How do I query the minimum deposit amount for a specific coin?](/v1/faqs/coin-management#how-do-i-query-the-minimum-deposit-amount-for-a-specific-coin)</Tip>

#### Request

None

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="coin" type="String">The coin symbol.</ResponseField>
    <ResponseField name="display_code" type="String">Coin ticker symbol (not unique, changeable, for reference only )</ResponseField>
    <ResponseField name="description" type="Int">Full name of coin (not unique, changeable, for reference only )</ResponseField>
    <ResponseField name="decimal" type="Int">Coin balance decimal places</ResponseField>
    <ResponseField name="can_deposit" type="Bool">Deposit accessibility</ResponseField>
    <ResponseField name="can_withdraw" type="Bool">Withdraw accessibility</ResponseField>
    <ResponseField name="require_memo" type="Bool">Memo for specified coins(EOS,XLM,XRP,IOST)</ResponseField>
    <ResponseField name="minimum_deposit_threshold" type="String">Coin minimum deposit threshold</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/get_supported_coins/",{},
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch(
    "GET",
    "/v1/custody/mpc/get_supported_chains/",
    {},
    api_key,
    api_secret,
    host
  )
    .then((res) => {
      res.json().then((data) => {
        console.log(JSON.stringify(data, null, 4));
      });
    })
    .catch((err) => {
      console.log(err);
    });
  ```

  ```go Go
  Request("GET", "/v1/custody/get_supported_coins/", map[string]string{})
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
        "coin": "ETH",
        "display_code": "ETH",
        "description": "Ethereum",
        "decimal": 18,
        "can_deposit": true,
        "can_withdraw": true,
        "require_memo": false,
        "minimum_deposit_threshold": "0"

      },
      {
        "coin": "BTC",
        "display_code": "BTC",
        "description": "Bitcoin",
        "decimal": 8,
        "can_deposit": true,
        "can_withdraw": true,
        "require_memo": false,
        "minimum_deposit_threshold": "0"
      }

  ]
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Internal Address Info
Source: https://cobo.com/developers/v1/api-references/custody-wallet/internal_address_info

GET /v1/custody/internal_address_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about whether a given address is an internal address or not. If the address is internal, it also returns the name of the organization and wallet associated with the address. The endpoint takes three parameters: `coin`, `address`, and `memo` (optional). If the address contains a `|` character, the address is split into two parts: the address itself and the memo. Otherwise, the memo parameter is used. The endpoint requires authentication.

<Note>To check if the address available for Loop transaction.
More info about Loop: [https://loop.top/](https://loop.top/)</Note>

#### Request

<ParamField query="coin" type="String" required>The coin type of the address.</ParamField>
<ParamField query="address" type="String" required>The address to check.</ParamField>
<ParamField query="memo" type="String">The memo associated with the address (if any).</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">The coin type of the address.</ResponseField>
    <ResponseField name="address" type="String">The address being checked.</ResponseField>
    <ResponseField name="is_internal_address" type="Bool">Whether the address is an internal address or not.</ResponseField>
    <ResponseField name="internal_org" type="String">The name of the organization associated with the address (if it is an internal address).</ResponseField>
    <ResponseField name="internal_wallet" type="String">The name of the wallet associated with the address (if it is an internal address).</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/internal_address_info/",
    {
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/internal_address_info/',
          {
              "coin": "ETH",
              "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/internal_address_info/", map[string]string{
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
      "is_internal_address": true,
      "internal_org": "CoboWalletProduction",
      "internal_wallet": "CoboWalletProduction"
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Internal Addresses Info
Source: https://cobo.com/developers/v1/api-references/custody-wallet/internal_address_info_batch

GET /v1/custody/internal_address_info_batch/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about the given addresses for a specific coin. It takes a GET or POST request with parameters 'coin' and 'address', where 'coin' is the cryptocurrency symbol and 'address' is a comma-separated list of addresses. The response is a list of dictionaries, where each dictionary contains information about the corresponding address, including whether it is an internal address or wallet address.

<Note>To check if the address available for Loop transaction.
More info about Loop: [https://loop.top/](https://loop.top/)</Note>

#### Request

<ParamField query="coin" type="String" required>The coin symbol.</ParamField>
<ParamField query="address" type="String" required>A comma-separated list of addresses.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="coin" type="String">The coin type of the address.</ResponseField>
    <ResponseField name="address" type="String">The address being checked.</ResponseField>
    <ResponseField name="is_internal_address" type="Bool">Whether the address is an internal address or not.</ResponseField>
    <ResponseField name="internal_org" type="String">The name of the organization associated with the address (if it is an internal address).</ResponseField>
    <ResponseField name="internal_wallet" type="String">The name of the wallet associated with the address (if it is an internal address).</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/internal_address_info_batch/",
    {
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e,0x777094588811118b7701cf4a9dea056e775b4b4e",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/internal_address_info_batch/',
          {
              "coin": "ETH",
              "address": "0x544094588811118b7701cf4a9dea056e775b4b4e,0x777094588811118b7701cf4a9dea056e775b4b4e",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/internal_address_info_batch/", map[string]string{
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e,0x777094588811118b7701cf4a9dea056e775b4b4e",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
        "coin": "ETH",
        "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
        "is_internal_address": true
      },
      {
        "coin": "ETH",
        "address": "0x777094588811118b7701cf4a9dea056e775b4b4e",
        "is_internal_address": false
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Verify Valid Address
Source: https://cobo.com/developers/v1/api-references/custody-wallet/is_valid_address

GET /v1/custody/is_valid_address/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint checks whether a given cryptocurrency address is valid and returns a boolean value. It also supports memo for certain coins. Authentication is required to access this endpoint.

<Tip> FAQ：[How to verify whether a withdraw address is legitimate?](/v1/faqs/address-management#how-to-verify-whether-a-withdrawal-address-is-legitimate)</Tip>

#### Request

<ParamField query="coin" type="String" required>The cryptocurrency symbol.</ParamField>
<ParamField query="address" type="String" required>The cryptocurrency address.(Address|Memo)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="bool">Whether the address is valid or not.</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/is_valid_address/",
    {
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/is_valid_address/',
          {
              "coin": "ETH",
              "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/is_valid_address/", map[string]string{
      "coin": "ETH",
      "address": "0x544094588811118b7701cf4a9dea056e775b4b4e",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": true
  }
  ----
  {
    "success": true,
    "result": false
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Loop Transaction Explorer
Source: https://cobo.com/developers/v1/api-references/custody-wallet/loop-explorer



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
To help your user to check the Loop transaction, we offer you an explorer, you may insert the following URL in your
platform：[https://loop.top/tx/\[Loop\_ID](https://loop.top/tx/\[Loop_ID)]

e.g. [https://loop.top/tx/L456e5cb652dcfe557a43fd9d8e48627](https://loop.top/tx/L456e5cb652dcfe557a43fd9d8e48627)

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get New Deposit Address
Source: https://cobo.com/developers/v1/api-references/custody-wallet/new_address

POST /v1/custody/new_address/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint generates a new cryptocurrency address for a given coin and returns it in a JSON response. The endpoint requires authentication and takes in two parameters: `coin` and `native_segwit`. The `coin` parameter specifies the cryptocurrency for which the address needs to be generated, and the `native_segwit` parameter is a boolean flag indicating whether the address should be generated using native segwit format. The endpoint checks for permission and address count limits before generating the new address.

<Note>For BTC address, it supports generating segwit (3 address) and native\_ Segwit (bc1 address), see below for details. (\*
Cobo supports withdraw to any BTC address type)</Note>

#### Request

<ParamField body="coin" type="String" required>Cryptocurrency for which the address needs to be generated.</ParamField>
<ParamField body="native_segwit" type="Bool">Flag indicating whether the address should be generated using native segwit format.</ParamField>
<ParamField body="encoding" type="Int">The address encoding formats. This property only applies to coin of ADA. Available options:9、10.For more information, please [refer to](/v1/api-references/development/address-encoding) the enum value corresponding to each encoding</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">Cryptocurrency for which the address was generated.</ResponseField>
    <ResponseField name="address" type="String">Newly generated cryptocurrency address.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "POST",
    "/v1/custody/new_address/",
    {
      "coin": "BTC"
              "native_segwit": 1
  },
  api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/new_address/',
          {
              "coin": "BTC"
              "native_segwit": 1
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/new_address/", map[string]string{
      "coin": "BTC",
      "native_segwit": 1,

  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
      "success": true,
      "result": {
          "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq",
          "coin": "BTC"
      }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get New Deposit Addresses
Source: https://cobo.com/developers/v1/api-references/custody-wallet/new_addresses

POST /v1/custody/new_addresses/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint generates new addresses for a given coin and returns a list of the generated addresses. The number of addresses to generate is specified in the 'count' parameter of the POST request.The maximum number of addresses that can be generated in one request is 200. The endpoint also checks if the organization has permission to add addresses and if the number of addresses being added exceeds the minutely limit.

<Tip> FAQ：[How to batch-generate addresses?](/v1/faqs/address-management#how-to-batch-generate-addresses)</Tip>

<Note>For BTC address, it supports generating segwit (3 address) and native\_ Segwit (bc1 address), see below for details. (\*
Cobo supports withdraw to any BTC address type)</Note>

#### Request

<ParamField body="coin" type="String" required>The coin to generate addresses for.</ParamField>
<ParamField body="count" type="Int" required>The number of addresses to generate.</ParamField>
<ParamField body="native_segwit" type="Bool">Whether to generate native segwit addresses.</ParamField>
<ParamField body="encoding" type="Int">The addresses encoding formats. This property only applies to coin of ADA. Available options:9、10.For more information, please [refer to](/v1/api-references/development/address-encoding) the enum value corresponding to each encoding</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">The coin for which addresses were generated.</ResponseField>
    <ResponseField name="addresses" type="String[]">List of generated addresses.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "POST",
    "/v1/custody/new_addresses/",
    {
      "coin": "ETH"
              "count": 4

  },
  api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/new_addresses/',
          {
              "coin": "ETH"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/new_addresses/", map[string]string{
      "coin": "ETH",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "coin": "ETH",
      "addresses": [
        "0x544094588811118b7701cf4a9dea056e775b4b4e",
        "0x580f33154fddf59ede21b95cd6c615df138ef160",
        "0xcec381336e22643bd0b4d779bc26a6c7a1fee23d",
        "0xa4a98b46507bb768b75c23ea3dc1a34fb150e3bd"
      ]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# null
Source: https://cobo.com/developers/v1/api-references/custody-wallet/new_withdraw_request

POST /v1/custody/new_withdraw_request/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to create a new withdraw request for a specified coin. The request requires authentication and the necessary parameters include the coin, request ID, withdraw address, and amount. Optional parameters include a memo, force_external, and force_internal. The response will contain information about the newly created withdraw request.

#### Request

<ParamField body="coin" type="String" required>The coin to withdraw.</ParamField>
<ParamField body="request_id" type="String" required>A unique ID for the withdraw request.</ParamField>
<ParamField body="address" type="String" required>The address to withdraw to.</ParamField>
<ParamField body="amount" type="Int" required>The amount to withdraw.</ParamField>
<ParamField body="memo" type="String">Needed when you withdraw EOS, XRP, IOST</ParamField>
<ParamField body="remark" type="String">The remark to withdraw.</ParamField>
<ParamField body="force_external" type="String">Non-empty means: force the transaction on-chain even if it's a Loop Tx</ParamField>
<ParamField body="force_internal" type="String">Non-empty means: force the transaction off-chain even if it's not a Loop Tx, if it cannot be handled as a Loop tx, it will be rejected</ParamField>

#### Response

<ResponseField name="success" type="bool">true or false</ResponseField>
<ResponseField name="result" type="String">Success is "", failed is null.</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/new_withdraw_request/",
      {
          "coin": "ETH",
          "address": "0x8e2782aabdf80fbb69399ce3d9bd5ae69a60462c",
          "amount": 100000000000000,
          "request_id": "unique_123456",
          "remark": "hello test"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/new_withdraw_request/',
          {
              "coin": "ETH",
              "address": "0x8e2782aabdf80fbb69399ce3d9bd5ae69a60462c",
              "amount": 100000000000000,
              "request_id": "unique_123456",
              "remark": "hello test"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/new_withdraw_request/", map[string]string{
      "coin": "ETH",
      "address": "0x8e2782aabdf80fbb69399ce3d9bd5ae69a60462c",
      "amount": 100000000000000,
      "request_id": "unique_123456",
      "remark": "hello test",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json success
  {
    "success": true,
    "result": ""
  }
  ```

  ```json failed
  {
      "success": false,
      "result": null,
      "errorCode":"12009",
      "errorMessage":"Request id api_request_id_123458 is duplicated",
      "errorId":"0400ccb7ad3f4ada8430f08b8f83a30d",
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Account Details
Source: https://cobo.com/developers/v1/api-references/custody-wallet/org_info

GET /v1/custody/org_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with detailed information about the organization associated with the authenticated user's custody wallet.

#### Request

None

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="name" type="String">org name</ResponseField>

    <ResponseField name="assets" type="object[]">
      <Expandable title="object">
        <ResponseField name="coin" type="String">The coin symbol.</ResponseField>
        <ResponseField name="display_code" type="String">Coin ticker symbol (not unique, changeable, for reference only)</ResponseField>
        <ResponseField name="description" type="String">Full name of coin (not unique, changeable, for reference only)</ResponseField>
        <ResponseField name="decimal" type="String">Coin balance decimal places</ResponseField>
        <ResponseField name="can_deposit" type="Boolean">Deposit accessibility</ResponseField>
        <ResponseField name="can_withdraw" type="Boolean">Withdraw accessibility</ResponseField>
        <ResponseField name="balance" type="String">Current balance</ResponseField>
        <ResponseField name="abs_balance" type="String">Absolute value of balance</ResponseField>
        <ResponseField name="fee_coin" type="String">Coin used for fee</ResponseField>
        <ResponseField name="abs_estimate_fee" type="String">Estimated fee</ResponseField>
        <ResponseField name="abs_estimate_fee_usd" type="String">Estimated fee usd</ResponseField>
        <ResponseField name="confirming_threshold" type="Int">Confirmation threshold required for the coin</ResponseField>
        <ResponseField name="dust_threshold" type="Int">Coin minimum withdraw threshold</ResponseField>
        <ResponseField name="minimum_deposit_threshold" type="String">Coin minimum withdraw threshold</ResponseField>
        <ResponseField name="token_address" type="String">Smart contract address for token (null for main-chain token)</ResponseField>
        <ResponseField name="require_memo" type="String">Memo for specified coins(EOS,XLM,XRP,IOST</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/org_info/",
    {},
    api_key,
    api_secret,
    host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/org_info/', {}, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/org_info/", map[string]string{})
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "name": "test",
      "assets": [
        {
          "coin": "ETH",
          "display_code": "ETH",
          "description": "Ethereum",
          "decimal": 18,
          "can_deposit": true,
          "can_withdraw": true,
          "balance": "0",
          "abs_balance": "0",
          "fee_coin": "ETH",
          "abs_estimate_fee": "0.0003648",
          "confirming_threshold": 12,
          "dust_threshold": 1,
          "token_address": "",
          "require_memo": false
        },
        {
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "can_deposit": true,
          "can_withdraw": true,
          "balance": "740145525",
          "abs_balance": "7.40145525",
          "fee_coin": "BTC",
          "abs_estimate_fee": "0.00015044",
          "confirming_threshold": 3,
          "dust_threshold": 1,
          "token_address": "31",
          "require_memo": false
        },
        {
          "coin": "BTC",
          "display_code": "BTC",
          "description": "Bitcoin",
          "decimal": 8,
          "can_deposit": true,
          "can_withdraw": true,
          "balance": "102730",
          "abs_balance": "0.0010273",
          "fee_coin": "BTC",
          "abs_estimate_fee": "0.00013513",
          "confirming_threshold": 3,
          "dust_threshold": 546,
          "token_address": "",
          "require_memo": false
        }
      ]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# null
Source: https://cobo.com/developers/v1/api-references/custody-wallet/pending_transaction

GET /v1/custody/pending_transaction/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the details of a pending transaction specified by its ID.

<Note>it's possible that there may be no pending transactions for various reasons.
Firstly, it depends on whether the customer has selected the option to receive callbacks for pending transactions.
Additionally, it's possible that the blockchain processing speed for this particular cryptocurrency is fast,so transactions are confirmed without going through a pending state.</Note>

#### Request

<ParamField query="id" type="String" required>ID of the pending transaction.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/pending_transaction/",
      {
          "id": "20181114112147059335000000359061"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/pending_transaction/',
          {
              "id": "20181114112147059335000000359061"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/pending_transaction/", map[string]string{
      "id": "20181114112147059335000000359061"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
          "id": "20181114112147059335000000359061",
          "coin": "XRP",
          "display_code": "XRP",
          "description": "Ripple",
          "address": "rfKyCMyoV6Ln2GZ7YDbrBrnXCbAyBbxRqB|1175609358",
          "source_address": "rfsEqW6MTpfsedoCNZ6DfDy8r8yFENvtjE",
          "side": "withdraw",
          "amount": "1",
          "decimal": 6,
          "abs_amount": "0.000001",
          "txid": "AB50566D8463CB11CE8CABC976D5A338EC5D86BE63FFC85E81CDA8B6B9918905",
          "vout_n": 0,
          "request_id": "IntegrationTest-575171218722709682",
          "status": "pending",
          "created_time": 1637333969545,
          "last_time": 1637333969545,
          "confirming_threshold": 1,
          "confirmed_num": 0,
          "waiting_audit": false,
          "remark": "",
          "tx_detail": {
              "txid": "AB50566D8463CB11CE8CABC976D5A338EC5D86BE63FFC85E81CDA8B6B9918905",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "rfsEqW6MTpfsedoCNZ6DfDy8r8yFENvtjE",
          "memo": "1175609358",
          "type": "external"
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# null
Source: https://cobo.com/developers/v1/api-references/custody-wallet/pending_transactions

GET /v1/custody/pending_transactions/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of pending transactions filtered by coin, side, max_id, min_id, and limit parameters. The response includes transaction details such as transaction ID, coin type, amount, and timestamp.

<Tip> FAQ：[How do I query the details of a pending transaction?](/v1/faqs/transaction-management#how-do-i-query-the-details-of-a-pending-transaction)</Tip>

<Note>it's possible that there may be no pending transactions for various reasons.
Firstly, it depends on whether the customer has selected the option to receive callbacks for pending transactions.
Additionally, it's possible that the blockchain processing speed for this particular cryptocurrency is fast,so transactions are confirmed without going through a pending state.</Note>

#### Request

<ParamField query="coin" type="String">Coin code (Does not return all currencies)</ParamField>
<ParamField query="side" type="enum(deposit / withdraw)">Deposit/withdraw</ParamField>
<ParamField query="max_id" type="String">The transaction history ID limit is optional. If not included, will by default return the most recent records.(cannot be used with min\_id)</ParamField>
<ParamField query="min_id" type="String">Optional. If included, the sequence will be changed to time ASC. If not included, will by default return the most recent records, time DESC.(cannot be used with max\_id)</ParamField>
<ParamField query="limit" type="Integer">Page size is optional. If not included, the default size will be 50, and the maximum size will also be 50.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      'GET',
      '/v1/custody/pending_transactions/',
      {
          "coin": "XRP",
          "side": "withdraw"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/pending_transactions/',
          {
              "coin": "XRP",
              "side": "withdraw"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/pending_transactions/", map[string]string{
      "coin": "XRP",
      "side": "withdraw",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
          "id": "20211119225929000317830000006164",
          "coin": "XRP",
          "display_code": "XRP",
          "description": "Ripple",
          "address": "rfKyCMyoV6Ln2GZ7YDbrBrnXCbAyBbxRqB|1175609358",
          "source_address": "rfsEqW6MTpfsedoCNZ6DfDy8r8yFENvtjE",
          "side": "withdraw",
          "amount": "1",
          "decimal": 6,
          "abs_amount": "0.000001",
          "txid": "924D917E537D449408E7CBD9F6F849116EBBDA2E08509818718F1989CE78C9A3",
          "vout_n": 0,
          "request_id": "IntegrationTest-575195389281796588",
          "status": "pending",
          "created_time": 1637333969867,
          "last_time": 1637333969867,
          "confirming_threshold": 1,
          "confirmed_num": 0,
          "waiting_audit": false,
          "remark": "",
          "tx_detail": {
              "txid": "924D917E537D449408E7CBD9F6F849116EBBDA2E08509818718F1989CE78C9A3",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "rfsEqW6MTpfsedoCNZ6DfDy8r8yFENvtjE",
          "memo": "1175609358",
          "type": "external"
      },
      {
          "id": "20211119225929000317830000006163",
          "coin": "XRP",
          "display_code": "XRP",
          "description": "Ripple",
          "address": "rfKyCMyoV6Ln2GZ7YDbrBrnXCbAyBbxRqB|1175609358",
          "source_address": "rfsEqW6MTpfsedoCNZ6DfDy8r8yFENvtjE",
          "side": "withdraw",
          "amount": "1",
          "decimal": 6,
          "abs_amount": "0.000001",
          "txid": "AB50566D8463CB11CE8CABC976D5A338EC5D86BE63FFC85E81CDA8B6B9918905",
          "vout_n": 0,
          "request_id": "IntegrationTest-575171218722709682",
          "status": "pending",
          "created_time": 1637333969545,
          "last_time": 1637333969545,
          "confirming_threshold": 1,
          "confirmed_num": 0,
          "waiting_audit": false,
          "remark": "",
          "tx_detail": {
              "txid": "AB50566D8463CB11CE8CABC976D5A338EC5D86BE63FFC85E81CDA8B6B9918905",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "rfsEqW6MTpfsedoCNZ6DfDy8r8yFENvtjE",
          "memo": "1175609358",
          "type": "external"
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get All Staking History
Source: https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_history

GET /v1/custody/staking_history/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of staking activities for a given coin, with optional filters for activity type, maximum ID, limit, and product ID. The response includes the activity ID, coin, amount, type, raw type, time, and product information.

#### Request

<ParamField query="coin" type="String">The coin to filter by.</ParamField>
<ParamField query="type" type="String">The activity type to filter by.</ParamField>
<ParamField query="max_id" type="String">The maximum activity ID to return.</ParamField>
<ParamField query="limit" type="String">The maximum number of activities to return.</ParamField>
<ParamField query="product_id" type="Int">The product ID to filter by.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="activity_id" type="String">Activity ID</ResponseField>
    <ResponseField name="coin" type="String">The coin of the activity.</ResponseField>
    <ResponseField name="amount" type="String">The absolute amount of the activity.</ResponseField>
    <ResponseField name="type" type="String">Action type(stake unstake reward fee).</ResponseField>
    <ResponseField name="raw_type" type="Int">1:fixed rate 2:estimated rate</ResponseField>
    <ResponseField name="time" type="Int">The time of the activity.</ResponseField>

    <ResponseField name="product" type="object">
      <Expandable title="object">
        <ResponseField name="name" type="String">Product name</ResponseField>
        <ResponseField name="description" type="String">Product description</ResponseField>
        <ResponseField name="doc_src" type="String">Product detailed description doc</ResponseField>
        <ResponseField name="coin" type="String">Coin code</ResponseField>
        <ResponseField name="coin_decimal" type="Int">Coin decimal</ResponseField>
        <ResponseField name="reward_coin" type="String">Reward coin</ResponseField>
        <ResponseField name="reward_coin_decimal" type="Int">Reward coin decimal</ResponseField>
        <ResponseField name="unstake_fee" type="String">Unstake fee</ResponseField>
        <ResponseField name="min_amount" type="String">Min. amount to stake</ResponseField>
        <ResponseField name="rate" type="String">Yearly ROI</ResponseField>
        <ResponseField name="rate_type" type="Int">1:fixed rate 2:estimated rate</ResponseField>
        <ResponseField name="days" type="Int">Reward period</ResponseField>
        <ResponseField name="stake_type" type="String">Staking type（Masternode, DPoS, etc）</ResponseField>
        <ResponseField name="lockup" type="Bool">If there's a lockup period</ResponseField>
        <ResponseField name="start_stake_time" type="Int">Start stake time(mileseconds timestamp)</ResponseField>
        <ResponseField name="stop_stake_time" type="Int">Stop stake time(mileseconds timestamp)</ResponseField>
        <ResponseField name="start_staking_time" type="Int">Start staking time(mileseconds timestamp)</ResponseField>
        <ResponseField name="stop_staking_time" type="Int">Stop staking time(mileseconds timestamp)</ResponseField>
        <ResponseField name="liquidate_time" type="Int">Liquidate time(mileseconds timestamp)</ResponseField>
        <ResponseField name="reward_liquidate_time" type="Int">Reward liquidate time(mileseconds timestamp)</ResponseField>
        <ResponseField name="product_id" type="Int">Product id(unique)</ResponseField>
        <ResponseField name="product_group" type="String">product of group </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/staking_history/",
      {
          "coin": "ZEL",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/staking_history/',
          {
              "coin": "ZEL",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/staking_history/", map[string]string{
      "coin": "ZEL",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result":[
    {
      "activity_id": "20230807160006000354399000008312",
      "coin": "TETH",
      "amount": "1176999339169",
      "type": "stake",
      "raw_type": 0,
      "time": 1691395206207,
      "product": {
        "name": " TETH PoS\u6d4b\u8bd5",
        "description": "TETH PoS test",
        "doc_src": "https://www.cobo.com",
        "coin": "TETH",
        "coin_decimal": 18,
        "reward_coin": "TETH",
        "reward_coin_decimal": 18,
        "unstake_fee": "0",
        "min_amount": "1000000",
        "rate": "0.2000000000",
        "rate_type": 1,
        "days": 0,
        "stake_type": "pos",
        "lockup": false,
        "start_stake_time": 1691390700000,
        "stop_stake_time": 1691393400000,
        "start_staking_time": 1691393400000,
        "stop_staking_time": 1691400600000,
        "liquidate_time": 1691400660000,
        "reward_liquidate_time": 1691400720000,
        "product_id": 236088,
        "product_group": " TETHPPSW"
      }
    },
    {
      "activity_id": "20230807160005000354399000003540",
      "coin": "TETH",
      "amount": "53741808",
      "type": "unstake",
      "raw_type": -3,
      "time": 1691395205779,
      "product": {
        "name": " TETH PoS\u6d4b\u8bd5",
        "description": "TETH PoS test",
        "doc_src": "https://www.cobo.com",
        "coin": "TETH",
        "coin_decimal": 18,
        "reward_coin": "TETH",
        "reward_coin_decimal": 18,
        "unstake_fee": "0",
        "min_amount": "1000000",
        "rate": "0.2000000000",
        "rate_type": 1,
        "days": 0,
        "stake_type": "pos",
        "lockup": false,
        "start_stake_time": 1691385300000,
        "stop_stake_time": 1691388000000,
        "start_staking_time": 1691388000000,
        "stop_staking_time": 1691395200000,
        "liquidate_time": 1691395260000,
        "reward_liquidate_time": 1691395320000,
        "product_id": 236078,
        "product_group": " TETHPPSW"
      }
    }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Staking Product Details
Source: https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_product

GET /v1/custody/staking_product/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a staking product with the given product ID. The response is a JSON object containing details about the product, such as its name, description, and rewards. The language parameter can be used to specify the language of the response (default is English).

#### Request

<ParamField query="product_id" type="String" required>Unique ID for staking product</ParamField>
<ParamField query="language" type="String">Language of product description(zh,en(default))</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="name" type="String">Product name</ResponseField>
    <ResponseField name="description" type="String">Product description</ResponseField>
    <ResponseField name="doc_src" type="String">Product detailed description doc</ResponseField>
    <ResponseField name="coin" type="String">Coin code</ResponseField>
    <ResponseField name="coin_decimal" type="Int">Coin decimal</ResponseField>
    <ResponseField name="reward_coin" type="String">Reward coin</ResponseField>
    <ResponseField name="reward_coin_decimal" type="Int">Reward coin decimal</ResponseField>
    <ResponseField name="unstake_fee" type="String">Unstake fee</ResponseField>
    <ResponseField name="min_amount" type="String">Min. amount to stake</ResponseField>
    <ResponseField name="rate" type="String">Yearly ROI</ResponseField>
    <ResponseField name="rate_type" type="Int">1:fixed rate 2:estimated rate</ResponseField>
    <ResponseField name="days" type="Int">Reward period</ResponseField>
    <ResponseField name="stake_type" type="String">Staking type（Masternode, DPoS, etc）</ResponseField>
    <ResponseField name="lockup" type="Bool">If there's a lockup period</ResponseField>
    <ResponseField name="start_stake_time" type="Int">Start stake time(mileseconds timestamp)</ResponseField>
    <ResponseField name="stop_stake_time" type="Int">Stop stake time(mileseconds timestamp)</ResponseField>
    <ResponseField name="start_staking_time" type="Int">Start staking time(mileseconds timestamp)</ResponseField>
    <ResponseField name="stop_staking_time" type="Int">Stop staking time(mileseconds timestamp)</ResponseField>
    <ResponseField name="liquidate_time" type="Int">Liquidate time(mileseconds timestamp)</ResponseField>
    <ResponseField name="reward_liquidate_time" type="Int">Reward liquidate time(mileseconds timestamp)</ResponseField>
    <ResponseField name="product_id" type="Int">Product id(unique)</ResponseField>
    <ResponseField name="product_group" type="String">product of group </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/staking_product/",
      {
          "product_id": 2751,
          "language": "zh",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/staking_product/',
          {
              "product_id": 2751,
              "language": "zh",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/staking_product/", map[string]string{
      "product_id": 2751,
      "language": "zh",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "product_id": 2751,
      "name": "ZEL PPS",
      "description": "30 ZEL\u8d77\u6295\uff0c\u9636\u68af\u6536\u76ca\u7387\uff0c\u8d28\u62bc\u8d8a\u591a\uff0c\u6536\u76ca\u7387\u8d8a\u9ad8\n\u8d28\u62bc\u540e\u7b2c\u4e8c\u5929\u5f00\u59cb\u4ea7\u751f\u6536\u76ca\uff0c\u6bcf\u5929\u6839\u636e\u5168\u7f51\u6536\u76ca\u60c5\u51b5\u53d1\u653e\u6536\u76ca\uff0c\u9009\u62e9\u3010\u5230\u671f\u540e\u81ea\u52a8\u7eed\u671f\u3011\uff0c\u65e0\u7f1d\u8854\u63a5\u4e0b\u4e00\u671f\u6536\u76ca\n\u968f\u65f6\u53ef\u5212\u51fa\uff0cT+1\u5230\u8d26\uff0c\u6536\u76ca\u5468\u671f\u5185\u53d6\u51fa\u635f\u5931\u5f53\u671f\u6536\u76ca\n\u6bcf\u6b21\u53d6\u51fa\u8d4e\u56de\u8d39: 10 ZEL",
      "doc_src": "https://support.cobo.com/hc/zh-cn/articles/360025623074",
      "coin": "ZEL",
      "coin_decimal": 8,
      "reward_coin": "ZEL",
      "reward_coin_decimal": 8,
      "unstake_fee": "1000000000",
      "min_amount": "3000000000",
      "rate": "0.1351459495",
      "rate_type": 2,
      "days": 20,
      "stake_type": "masternode",
      "lockup": false,
      "start_stake_time": 1573455600000,
      "stop_stake_time": 1573542000000,
      "start_staking_time": 1573574400000,
      "stop_staking_time": 1575302400000,
      "liquidate_time": 1575388800000,
      "reward_liquidate_time": 1575388800000
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get All Staking Product List
Source: https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_products

GET /v1/custody/staking_products/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of staking products available for a given coin and language. The response is a JSON array containing objects with information about each staking product, such as the name, annual yield, and minimum staking amount.

#### Request

<ParamField query="coin" type="String">The coin to filter staking products by.</ParamField>
<ParamField query="language" type="String">The language to use for staking product names and descriptions.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="name" type="String">Product name</ResponseField>
    <ResponseField name="description" type="String">Product description</ResponseField>
    <ResponseField name="doc_src" type="String">Product detailed description doc</ResponseField>
    <ResponseField name="coin" type="String">Coin code</ResponseField>
    <ResponseField name="coin_decimal" type="Int">Coin decimal</ResponseField>
    <ResponseField name="reward_coin" type="String">Reward coin</ResponseField>
    <ResponseField name="reward_coin_decimal" type="Int">Reward coin decimal</ResponseField>
    <ResponseField name="unstake_fee" type="String">Unstake fee</ResponseField>
    <ResponseField name="min_amount" type="String">Min. amount to stake</ResponseField>
    <ResponseField name="rate" type="String">Yearly ROI</ResponseField>
    <ResponseField name="rate_type" type="Int">1:fixed rate 2:estimated rate</ResponseField>
    <ResponseField name="days" type="Int">Reward period</ResponseField>
    <ResponseField name="stake_type" type="String">Staking type（Masternode, DPoS, etc）</ResponseField>
    <ResponseField name="lockup" type="Bool">If there's a lockup period</ResponseField>
    <ResponseField name="start_stake_time" type="Int">Start stake time(mileseconds timestamp)</ResponseField>
    <ResponseField name="stop_stake_time" type="Int">Stop stake time(mileseconds timestamp)</ResponseField>
    <ResponseField name="start_staking_time" type="Int">Start staking time(mileseconds timestamp)</ResponseField>
    <ResponseField name="stop_staking_time" type="Int">Stop staking time(mileseconds timestamp)</ResponseField>
    <ResponseField name="liquidate_time" type="Int">Liquidate time(mileseconds timestamp)</ResponseField>
    <ResponseField name="reward_liquidate_time" type="Int">Reward liquidate time(mileseconds timestamp)</ResponseField>
    <ResponseField name="product_id" type="Int">Product id(unique)</ResponseField>
    <ResponseField name="product_group" type="String">product of group </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/staking_products/",
      {
          "coin": "ZEL",
          "language": "zh",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/staking_products/',
          {
              "coin": "ZEL",
              "language": "zh",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/staking_products/", map[string]string{
      "coin": "ZEL",
      "language": "zh",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
        "name": " TETH PoS\u6d4b\u8bd5",
        "description": "TETH PoS test",
        "doc_src": "https://www.cobo.com",
        "coin": "TETH",
        "coin_decimal": 18,
        "reward_coin": "TETH",
        "reward_coin_decimal": 18,
        "unstake_fee": "0",
        "min_amount": "1000000",
        "rate": "0.2000000000",
        "rate_type": 1,
        "days": 0,
        "stake_type": "pos",
        "lockup": false,
        "start_stake_time": 1691388900000,
        "stop_stake_time": 1691391600000,
        "start_staking_time": 1691391600000,
        "stop_staking_time": 1691398800000,
        "liquidate_time": 1691398860000,
        "reward_liquidate_time": 1691398920000,
        "product_id": 236082,
        "product_group": " TETHPPSW"
      },
      {
        "name": "TETH PoS \u6d4b\u8bd51",
        "description": "TETH PoS \u6d4b\u8bd51",
        "doc_src": "https://www.cobo.com",
        "coin": "TETH",
        "coin_decimal": 18,
        "reward_coin": "TETH",
        "reward_coin_decimal": 18,
        "unstake_fee": "0",
        "min_amount": "1000000",
        "rate": "0.1200000000",
        "rate_type": 1,
        "days": 0,
        "stake_type": "pos",
        "lockup": false,
        "start_stake_time": 1691386800000,
        "stop_stake_time": 1691391600000,
        "start_staking_time": 1691391660000,
        "stop_staking_time": 1691398860000,
        "liquidate_time": 1691398920000,
        "reward_liquidate_time": 1691362980000,
        "product_id": 236081,
        "product_group": " TETHPPSW_1"
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Stake
Source: https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_stake

POST /v1/custody/staking_stake/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to stake a certain amount of cryptocurrency on a particular product. The user must provide the product ID and the amount they wish to stake. The endpoint will then attempt to stake the specified amount on the specified product. If the product ID is invalid, an error will be returned.

#### Request

<ParamField body="product_id" type="Int" required>The ID of the product to stake on.</ParamField>
<ParamField body="amount" type="Int" required>The amount of cryptocurrency to stake.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="String">Success is "", failed is null.</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/staking_stake/",
      {
          "product_id": 2751
          "amount": 4000000000
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/staking_stake/',
          {
              "product_id": 2751
              "amount": 4000000000
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/staking_stake/", map[string]string{
      "product_id": 2751
      "amount": 4000000000
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": true
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Unstake
Source: https://cobo.com/developers/v1/api-references/custody-wallet/staking/staking_unstake

POST /v1/custody/staking_unstake/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to stake or unstake a certain amount of a specified product in their custody wallet. The product_id and amount parameters are required in the POST request body. The endpoint first checks if the specified product exists, and then calls the pos_unstake method of the CustodyPosService to perform the staking or unstaking operation.

#### Request

<ParamField body="product_id" type="Int" required>The ID of the product to unstake.</ParamField>
<ParamField body="amount" type="Int" required>The amount of the product to unstake.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="String">Success is "", failed is null.</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/staking_unstake/",
      {
          "product_id": 2751
          "amount": 4000000000
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/staking_unstake/',
          {
              "product_id": 2751
              "amount": 4000000000
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/staking_unstake/", map[string]string{
      "product_id": 2751
      "amount": 4000000000
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": true
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Staking Data
Source: https://cobo.com/developers/v1/api-references/custody-wallet/staking/stakings

GET /v1/custody/stakings/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of staking information for a given coin and language. The response includes staking ID, coin, decimal, amount, reward coin, reward coin decimal, reward amount, and product information. The product information is parsed based on the language parameter.

#### Request

<ParamField query="coin" type="String">The coin to query staking information for.</ParamField>
<ParamField query="language" type="String">The language to parse product information in.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="staking_id" type="Int">The ID of the staking.</ResponseField>
    <ResponseField name="coin" type="String">The code of the staked coin.</ResponseField>
    <ResponseField name="coin_decimal" type="Int">The decimal of the staked coin.</ResponseField>
    <ResponseField name="amount" type="Int">The amount of the staked coin.</ResponseField>
    <ResponseField name="reward_coin" type="String">The code of the reward coin.</ResponseField>
    <ResponseField name="reward_coin_decimal" type="Int">The decimal of the reward coin.</ResponseField>
    <ResponseField name="reward_amount" type="String">The amount of the reward coin.</ResponseField>

    <ResponseField name="product" type="object">
      <Expandable title="object">
        <ResponseField name="name" type="String">Product name</ResponseField>
        <ResponseField name="description" type="String">Product description</ResponseField>
        <ResponseField name="doc_src" type="String">Product detailed description doc</ResponseField>
        <ResponseField name="coin" type="String">Coin code</ResponseField>
        <ResponseField name="coin_decimal" type="Int">Coin decimal</ResponseField>
        <ResponseField name="reward_coin" type="String">Reward coin</ResponseField>
        <ResponseField name="reward_coin_decimal" type="Int">Reward coin decimal</ResponseField>
        <ResponseField name="unstake_fee" type="String">Unstake fee</ResponseField>
        <ResponseField name="min_amount" type="String">Min. amount to stake</ResponseField>
        <ResponseField name="rate" type="String">Yearly ROI</ResponseField>
        <ResponseField name="rate_type" type="Int">1:fixed rate 2:estimated rate</ResponseField>
        <ResponseField name="days" type="Int">Reward period</ResponseField>
        <ResponseField name="stake_type" type="String">Staking type（Masternode, DPoS, etc）</ResponseField>
        <ResponseField name="lockup" type="Bool">If there's a lockup period</ResponseField>
        <ResponseField name="start_stake_time" type="Int">Start stake time(mileseconds timestamp)</ResponseField>
        <ResponseField name="stop_stake_time" type="Int">Stop stake time(mileseconds timestamp)</ResponseField>
        <ResponseField name="start_staking_time" type="Int">Start staking time(mileseconds timestamp)</ResponseField>
        <ResponseField name="stop_staking_time" type="Int">Stop staking time(mileseconds timestamp)</ResponseField>
        <ResponseField name="liquidate_time" type="Int">Liquidate time(mileseconds timestamp)</ResponseField>
        <ResponseField name="reward_liquidate_time" type="Int">Reward liquidate time(mileseconds timestamp)</ResponseField>
        <ResponseField name="product_id" type="Int">Product id(unique)</ResponseField>
        <ResponseField name="product_group" type="String">product of group </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/stakings/",
      {
          "coin": "ZEL",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/stakings/',
          {
              "coin": "ZEL",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/stakings/", map[string]string{
      "coin": "ZEL",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
    {
      "staking_id": 57520,
      "coin": "TETH",
      "coin_decimal": 18,
      "amount": "23391613625225404",
      "reward_coin": "TETH",
      "reward_coin_decimal": 18,
      "reward_amount": 873919022232,
      "product": {
        "name": " TETH PoS\u6d4b\u8bd5",
        "description": "TETH PoS test",
        "doc_src": "https://www.cobo.com",
        "coin": "TETH",
        "coin_decimal": 18,
        "reward_coin": "TETH",
        "reward_coin_decimal": 18,
        "unstake_fee": "0",
        "min_amount": "1000000",
        "rate": "0.2000000000",
        "rate_type": 1,
        "days": 0,
        "stake_type": "pos",
        "lockup": false,
        "start_stake_time": 1691387100000,
        "stop_stake_time": 1691389800000,
        "start_staking_time": 1691389800000,
        "stop_staking_time": 1691397000000,
        "liquidate_time": 1691397060000,
        "reward_liquidate_time": 1691397120000,
        "product_id": 236080,
        "product_group": " TETHPPSW"
      }
    },
    {
      "staking_id": 57523,
      "coin": "TETH",
      "coin_decimal": 18,
      "amount": "1063172",
      "reward_coin": "TETH",
      "reward_coin_decimal": 18,
      "reward_amount": 28,
      "product": {
        "name": " TETH PoS\u6d4b\u8bd5",
        "description": "TETH PoS test",
        "doc_src": "https://www.cobo.com",
        "coin": "TETH",
        "coin_decimal": 18,
        "reward_coin": "TETH",
        "reward_coin_decimal": 18,
        "unstake_fee": "0",
        "min_amount": "1000000",
        "rate": "0.2000000000",
        "rate_type": 1,
        "days": 0,
        "stake_type": "pos",
        "lockup": false,
        "start_stake_time": 1691388900000,
        "stop_stake_time": 1691391600000,
        "start_staking_time": 1691391600000,
        "stop_staking_time": 1691398800000,
        "liquidate_time": 1691398860000,
        "reward_liquidate_time": 1691398920000,
        "product_id": 236082,
        "product_group": " TETHPPSW"
      }
    }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Unstaking Data
Source: https://cobo.com/developers/v1/api-references/custody-wallet/staking/unstakings

GET /v1/custody/unstakings/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of unstaking and liquidating positions for the specified coin.

#### Request

<ParamField query="coin" type="String">The coin to filter the positions by.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="coin" type="String">The coin of the position.</ResponseField>
    <ResponseField name="coin_decimal" type="Int">Coin decimal</ResponseField>
    <ResponseField name="amount" type="Int">The amount of the position.</ResponseField>
    <ResponseField name="unstake_time" type="Int">Unstake time(mileseconds timestamp)</ResponseField>
    <ResponseField name="liquidate_time" type="Int">Liquidate time(mileseconds timestamp)</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/unstakings/",
      {
          "coin": "ZEL",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/unstakings/',
          {
              "coin": "ZEL",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/unstakings/", map[string]string{
      "coin": "ZEL",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
        "coin": "ZEL",
        "coin_decimal": 8,
        "amount": 4000000000,
        "unstake_time": 1575388800000,
        "liquidate_time": 1575388800000
      },
      {},
      {}
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Deposit to Exchange Account (Investor Only)
Source: https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_deposit

POST /v1/custody/trading_deposit/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to deposit funds into their trading account. The user must provide their exchange account token, the coin they wish to deposit, the amount they wish to deposit, and a unique request ID. The endpoint returns a JSON response with information about the deposit, including the request ID, the coin, the absolute amount deposited, the estimated amount received, the status of the deposit, the absolute fee charged, and the fee in the same coin as the deposit.

#### Request

<ParamField body="exchange_account_token" type="String" required>to exchange account token (aquire from Web)</ParamField>
<ParamField body="coin" type="String" required>Coin code</ParamField>
<ParamField body="amount" type="Int" required>Int amount (e.g. if 1 BTC is to be withdrawn, the amount should be multiplied by 100,000,000 (Satoshis))</ParamField>
<ParamField body="request_id" type="String" required>Request ID (Universally unique ID for each request)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="request_id" type="String">Request ID (Universally unique ID for each request)</ResponseField>
    <ResponseField name="coin" type="String">Coin code</ResponseField>
    <ResponseField name="amount" type="Int">Int amount contains decimals (e.g. if 1 BTC is to be deposited, the amount should be multiplied by 100,000,000 (Satoshis))</ResponseField>
    <ResponseField name="abs_amount" type="String">Absolute amount. If you trade 1.5 BTC, then the abs\_amount is 1.5</ResponseField>
    <ResponseField name="status" type="String">Status: ok, pending, failed, human\_check</ResponseField>
    <ResponseField name="fee" type="Int">Fee amount (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
    <ResponseField name="abs_fee" type="String">Absolute fee value. For examle, abs\_cobo\_fee 0.00005 means exactly 0.00005BTC</ResponseField>
    <ResponseField name="estimated_amount_received" type="Int">Estimated amount received (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/trading_deposit/",
      {
          "exchange_account_token": "token",
          "coin": "BTC",
          "amount": "100000000",
          "request_id": "UNIQUE_ID_FOR_DEPOSIT"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/trading_deposit/',
          {
              "exchange_account_token": "token",
              "coin": "BTC",
              "amount": "100000000",
              "request_id": "UNIQUE_ID_FOR_DEPOSIT"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/trading_deposit/", map[string]string{
      "exchange_account_token": "token",
      "coin": "BTC",
      "amount": "100000000",
      "request_id": "UNIQUE_ID_FOR_DEPOSIT"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "request_id": "UNIQUE_ID_FOR_DEPOSIT",
      "coin": "BTC",
      "amount": 100000000,
      "abs_amount": "1",
      "status": "ok",
      "fee": 500000,
      "abs_fee": "0.0005",
      "estimated_amount_received": "99950000"
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Trading Deposit Information (Investor Only)
Source: https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_deposit_info

GET /v1/custody/trading_deposit_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a trading deposit. It requires a valid request ID and authentication with operation permission. The response contains details about the deposit, including the coin code, amount, estimated amount received, status, and fee.

#### Request

<ParamField query="request_id" type="String" required>Request ID (Universally unique ID for each request)</ParamField>

#### Response

<ResponseField name="request_id" type="String">Request ID (Universally unique ID for each request)</ResponseField>
<ResponseField name="coin" type="String">Coin code</ResponseField>
<ResponseField name="amount" type="Int">Int amount contains decimals (e.g. if 1 BTC is to be deposited, the amount should be multiplied by 100,000,000 (Satoshis))</ResponseField>
<ResponseField name="abs_amount" type="String">Absolute amount. If you trade 1.5 BTC, then the abs\_amount is 1.5</ResponseField>
<ResponseField name="status" type="String">Status: ok, pending, failed, human\_check</ResponseField>
<ResponseField name="fee" type="Int">Fee amount (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
<ResponseField name="abs_fee" type="String">Absolute fee value. For examle, abs\_cobo\_fee 0.00005 means exactly 0.00005BTC</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/trading_deposit_info/",
      {
          "request_id": "UNIQUE_ID_FOR_DEPOSIT"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/trading_deposit_info/',
          {
              "request_id": "UNIQUE_ID_FOR_DEPOSIT"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/trading_deposit_info/", map[string]string{
      "request_id": "UNIQUE_ID_FOR_DEPOSIT"
  })
  ```
</RequestExample>

<ResponseExample />

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Transfer Among Exchange Account
Source: https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_transfer

POST /v1/custody/trading_transfer/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows authenticated traders to transfer funds between their exchange accounts. The request must include the 'from_exchange_account_token', 'to_exchange_account_token', 'coin', 'amount', and 'request_id' parameters. The response includes information about the transfer, such as the requested and estimated amounts, fees, and status.

#### Request

<ParamField body="from_exchange_account_token" type="String" required>from exchange account token (aquire from Web)</ParamField>
<ParamField body="to_exchange_account_token" type="String" required>to exchange account token (aquire from Web)</ParamField>
<ParamField body="coin" type="String" required>Coin code</ParamField>
<ParamField body="amount" type="Int" required>Int amount (e.g. if 1 BTC is to be withdrawn, the amount should be multiplied by 100,000,000 (Satoshis))</ParamField>
<ParamField body="request_id" type="String" required>Request ID (Universally unique ID for each request)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="request_id" type="String">Request ID (Universally unique ID for each request)</ResponseField>
    <ResponseField name="coin" type="String">Coin code</ResponseField>
    <ResponseField name="amount" type="Int">Int amount contains decimals (e.g. if 1 BTC is to be deposited, the amount should be multiplied by 100,000,000 (Satoshis))</ResponseField>
    <ResponseField name="abs_amount" type="String">Absolute amount. If you trade 1.5 BTC, then the abs\_amount is 1.5</ResponseField>
    <ResponseField name="status" type="String">Status: ok, pending, failed, human\_check</ResponseField>
    <ResponseField name="fee" type="Int">Fee amount (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
    <ResponseField name="abs_fee" type="String">Absolute fee value. For examle, abs\_cobo\_fee 0.00005 means exactly 0.00005BTC</ResponseField>
    <ResponseField name="estimated_amount_received" type="Int">Estimated amount received (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/trading_transfer/",
      {
          "from_exchange_account_token": "from_token",
          "to_exchange_account_token": "to_token",
          "coin": "BTC",
          "amount": "100000000",
          "request_id": "UNIQUE_ID_FOR_TRANSFER"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/trading_transfer/',
          {
              "from_exchange_account_token": "from_token",
              "to_exchange_account_token": "to_token",
              "coin": "BTC",
              "amount": "100000000",
              "request_id": "UNIQUE_ID_FOR_TRANSFER"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/trading_transfer/", map[string]string{
      "from_exchange_account_token": "from_token",
      "to_exchange_account_token": "to_token",
      "coin": "BTC",
      "amount": "100000000",
      "request_id": "UNIQUE_ID_FOR_TRANSFER"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "request_id": "UNIQUE_ID_FOR_TRANSFER",
      "coin": "BTC",
      "amount": 100000000,
      "abs_amount": "1",
      "status": "ok",
      "fee": 500000,
      "abs_fee": "0.0005",
      "estimated_amount_received": "99950000"
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Trading Transfer Information
Source: https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_transfer_info

GET /v1/custody/trading_transfer_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a trading transfer request. It requires a 'request_id' parameter in the query string. The response contains details such as the coin, amount, fee, and status of the transfer request.

#### Request

<ParamField query="request_id" type="String" required>Request ID (Universally unique ID for each request)</ParamField>

#### Response

<ResponseField name="request_id" type="String">Request ID (Universally unique ID for each request)</ResponseField>
<ResponseField name="coin" type="String">Coin code</ResponseField>
<ResponseField name="amount" type="Int">Int amount contains decimals (e.g. if 1 BTC is to be deposited, the amount should be multiplied by 100,000,000 (Satoshis))</ResponseField>
<ResponseField name="abs_amount" type="String">Absolute amount. If you trade 1.5 BTC, then the abs\_amount is 1.5</ResponseField>
<ResponseField name="status" type="String">Status: ok, pending, failed, human\_check</ResponseField>
<ResponseField name="fee" type="Int">Fee amount (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
<ResponseField name="abs_fee" type="String">Absolute fee value. For examle, abs\_cobo\_fee 0.00005 means exactly 0.00005BTC</ResponseField>
<ResponseField name="estimated_amount_received" type="Int">Estimated amount received (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/trading_transfer_info/",
      {
          "request_id": "UNIQUE_ID_FOR_TRANSFER"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/trading_transfer_info/',
          {
              "request_id": "UNIQUE_ID_FOR_TRANSFER"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/trading_transfer_info/", map[string]string{
      "request_id": "UNIQUE_ID_FOR_TRANSFER"
  })
  ```
</RequestExample>

<ResponseExample />

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Withdraw to Investor's Wallet
Source: https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_withdraw

POST /v1/custody/trading_withdraw/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to withdraw funds from their exchange account. The user must provide their exchange account token, the coin they wish to withdraw, the amount they wish to withdraw, and a unique request ID. The endpoint returns a JSON response with information about the withdraw, including the request ID, the coin, the absolute amount withdrawn, the estimated amount received, the withdraw status, the absolute fee, and the fee.

#### Request

<ParamField body="exchange_account_token" type="String" required>from exchange account token (aquire from Web)</ParamField>
<ParamField body="coin" type="String" required>Coin code</ParamField>
<ParamField body="amount" type="Int" required>Int amount (e.g. if 1 BTC is to be withdrawn, the amount should be multiplied by 100,000,000 (Satoshis))</ParamField>
<ParamField body="request_id" type="String" required>Request ID (Universally unique ID for each request)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="request_id" type="String">Request ID (Universally unique ID for each request)</ResponseField>
    <ResponseField name="coin" type="String">Coin code</ResponseField>
    <ResponseField name="amount" type="Int">Int amount contains decimals (e.g. if 1 BTC is to be withdrawn, the amount should be multiplied by 100,000,000 (Satoshis))</ResponseField>
    <ResponseField name="abs_amount" type="String">Absolute amount. If you trade 1.5 BTC, then the abs\_amount is 1.5</ResponseField>
    <ResponseField name="status" type="String">Status: ok, pending, failed, human\_check</ResponseField>
    <ResponseField name="fee" type="Int">Fee amount (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
    <ResponseField name="abs_fee" type="String">Absolute fee value. For examle, abs\_cobo\_fee 0.00005 means exactly 0.00005BTC</ResponseField>
    <ResponseField name="estimated_amount_received" type="Int">Estimated amount received (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/trading_withdraw/",
      {
          "exchange_account_token": "token",
          "coin": "BTC",
          "amount": "100000000",
          "request_id": "UNIQUE_ID_FOR_WITHDRAW"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/trading_withdraw/',
          {
              "exchange_account_token": "token",
              "coin": "BTC",
              "amount": "100000000",
              "request_id": "UNIQUE_ID_FOR_WITHDRAW"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/trading_withdraw/", map[string]string{
      "exchange_account_token": "token",
      "coin": "BTC",
      "amount": "100000000",
      "request_id": "UNIQUE_ID_FOR_WITHDRAW"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "request_id": "UNIQUE_ID_FOR_WITHDRAW",
      "coin": "BTC",
      "amount": 100000000,
      "abs_amount": "1",
      "status": "ok",
      "fee": 500000,
      "abs_fee": "0.0005",
      "estimated_amount_received": "99950000"
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Trading Withdraw Information
Source: https://cobo.com/developers/v1/api-references/custody-wallet/trading/trading_withdraw_info

GET /v1/custody/trading_withdraw_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a trading withdraw request. It requires a valid request ID and returns details such as the coin code, amount, fee, and status of the request. The response also includes the estimated amount received after deducting the fee.

#### Request

<ParamField query="request_id" type="String" required>Request ID (Universally unique ID for each request)</ParamField>

#### Response

<ResponseField name="request_id" type="String">Request ID (Universally unique ID for each request)</ResponseField>
<ResponseField name="coin" type="String">Coin code</ResponseField>
<ResponseField name="amount" type="Int">Int amount contains decimals (e.g. if 1 BTC is to be withdrawn, the amount should be multiplied by 100,000,000 (Satoshis))</ResponseField>
<ResponseField name="abs_amount" type="String">Absolute amount. If you trade 1.5 BTC, then the abs\_amount is 1.5</ResponseField>
<ResponseField name="status" type="String">Status: ok, pending, failed, human\_check</ResponseField>
<ResponseField name="fee" type="Int">Fee amount (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
<ResponseField name="abs_fee" type="String">Absolute fee value. For examle, abs\_cobo\_fee 0.00005 means exactly 0.00005BTC</ResponseField>
<ResponseField name="estimated_amount_received" type="Int">Estimated amount received (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/trading_withdraw_info/",
      {
          "request_id": "UNIQUE_ID_FOR_WITHDRAW"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/trading_withdraw_info/',
          {
              "request_id": "UNIQUE_ID_FOR_WITHDRAW"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/trading_withdraw_info/", map[string]string{
      "request_id": "UNIQUE_ID_FOR_WITHDRAW"
  })
  ```
</RequestExample>

<ResponseExample />

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transaction Details
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transaction

GET /v1/custody/transaction/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint retrieves a transaction by its ID from the WaaS API. The endpoint requires authentication and takes a single query parameter, 'id', which is the ID of the transaction to retrieve.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="id" type="String" required>Cobo Unique Transaction ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET" " /v1/custody/transaction/ ",
    {
      "id": "20210112173820000166329000003582",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch(
      "GET"
      " /v1/custody/transaction/ "
      {
          "id": "20210112173820000166329000003582",

      },
      api_key, api_secret, host
  ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  request(
      "GET"
      " /v1/custody/transaction/ "
      {
          "id": "20210112173820000166329000003582",

      })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "id": "20210112173820000166329000003582",
      "coin": "BTC",
      "display_code": "BTC",
      "description": "Bitcoin",
      "decimal": 8,
      "address": "19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku",
      "source_address": "bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v",
      "side": "withdraw",
      "amount": "80000",
      "abs_amount": "0.0008",
      "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
      "vout_n": 0,
      "request_id": "web_send_by_user_327_1610444045047",
      "status": "success",
      "abs_cobo_fee": "0",
      "request_created_time": 1610444045158,
      "created_time": 1610445878970,
      "last_time": 1610445878970,
      "confirmed_num": 3,
      "remark":"hello test",
      "tx_detail": {
        "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
        "blocknum": 665711,
        "blockhash": "00000000000000000007137dde44472364eb80126b7d98c12ffb8d37ba11ad33",
        "fee": 0,
        "actualgas": 17812,
        "gasprice": 1,
        "hexstr": ""
      },
      "source_address_detail": "bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v",
      "memo": "",
      "confirming_threshold": 3,
      "fee_coin": "BTC",
      "fee_amount": 50000,
      "fee_decimal": 8,
      "type": "external",
      "tx_request_type": ""
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transaction By Txid
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transaction_by_txid

GET /v1/custody/transaction_by_txid/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint retrieves transaction details by transaction ID. It requires authentication and takes a single query parameter 'txid' which is the transaction ID to retrieve details for. The response is a JSON object containing transaction details.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="txid" type="String" required>Transaction ID, which can be found on the corresponding public chain</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/transaction_by_txid/',
    {
      "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/transaction_by_txid/',
          {
           "txid":"239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transaction_by_txid/", map[string]string{
           "txid":"239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "id": "20210112173820000166329000003582",
      "coin": "BTC",
      "display_code": "BTC",
      "description": "Bitcoin",
      "decimal": 8,
      "address": "19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku",
      "source_address": "bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v",
      "side": "withdraw",
      "amount": "80000",
      "abs_amount": "0.0008",
      "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
      "vout_n": 0,
      "request_id": "web_send_by_user_327_1610444045047",
      "status": "success",
      "abs_cobo_fee": "0",
      "request_created_time": 1610444045158,
      "created_time": 1610445878970,
      "last_time": 1610445878970,
      "confirmed_num": 3,
      "remark":"hello test",
      "tx_detail": {
        "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
        "blocknum": 665711,
        "blockhash": "00000000000000000007137dde44472364eb80126b7d98c12ffb8d37ba11ad33",
        "fee": 0,
        "actualgas": 17812,
        "gasprice": 1,
        "hexstr": ""
      },
      "source_address_detail": "bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v",
      "memo": "",
      "confirming_threshold": 3,
      "fee_coin": "BTC",
      "fee_amount": 50000,
      "fee_decimal": 8,
      "type": "external",
      "tx_request_type": ""
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# null
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transaction_history

GET /v1/custody/transaction_history/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing the transaction history for a given coin and address. The response can be filtered by various parameters such as side, max_id, min_id, begin_time, end_time, and include_financial. The maximum number of transactions returned is 50.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="coin" type="String">Coin code (Does not return all currencies)</ParamField>
<ParamField query="side" type="enum(deposit / withdraw)">Deposit/withdraw</ParamField>
<ParamField query="address" type="String">Deposit/withdraw address is optional. If not included, all address history will be returned.</ParamField>
<ParamField query="max_id" type="String">The transaction history ID limit is optional. If not included, will by default return the most recent records.(cannot be used with min\_id)</ParamField>
<ParamField query="min_id" type="String">Optional. If included, the sequence will be changed to time ASC. If not included, will by default return the most recent records, time DESC.(cannot be used with max\_id)</ParamField>
<ParamField query="limit" type="Integer">Page size is optional. If not included, the default size will be 50, and the maximum size will also be 50.</ParamField>
<ParamField query="begin_time" type="Long">Begin timestamp(milliseconds). If set, transactions whose confirmation times are shorter than this value will not be returned. (cannot be used with end\_time)</ParamField>
<ParamField query="end_time" type="Long">End time stamp (milliseconds). If it is passed in, the transactions whose transaction confirmation time is greater than or equal to this will not be returned.(cannot be used with begin\_time)</ParamField>
<ParamField query="include_financial" type="String">Request all transactions, if they are, return all transactions (including Staking, Trading)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      'GET',
      '/v1/custody/transaction_history/',
      {
          "coin": "BTC_USDT",
          "side": "deposit"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/transaction_history/',
          {
              "coin": "BTC_USDT",
              "side": "deposit"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transaction_history/", map[string]string{
      "coin": "BTC_USDT",
      "side": "deposit",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
          "id": "20221013214833000312228000005846",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "6000000",
          "abs_amount": "0.06",
          "txid": "L65954e38419b55abb10b37fc6fca54f",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668913144,
          "last_time": 1665668913144,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L65954e38419b55abb10b37fc6fca54f",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      },
      {
          "id": "20221013213858000312228000007739",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "23000000",
          "abs_amount": "0.23",
          "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668338625,
          "last_time": 1665668338625,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By ID
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_id

GET /v1/custody/transactions_by_id/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by various parameters such as coin, address, side, and transaction ID range. The response includes transaction details such as transaction ID, coin type, amount, and timestamp.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="coin" type="String">Coin code (Does not return all currencies)</ParamField>
<ParamField query="side" type="enum(deposit / withdraw)">Deposit/withdraw </ParamField>
<ParamField query="address" type="String">Deposit/withdraw address is optional. If not included, all address history will be returned. </ParamField>
<ParamField query="max_id" type="String">The transaction history ID limit is optional. If not included, will by default return the most recent records.(cannot be used with min\_id) </ParamField>
<ParamField query="min_id" type="String"> Optional. If included, the sequence will be changed to time ASC. If not included, will by default return the most recent records, time DESC.(cannot be used with max\_id) </ParamField>
<ParamField query="limit" type="Integer">Page size is optional. If not included, the default size will be 50, and the maximum size will also be 50.</ParamField>
<ParamField query="include_financial" type="String">Request all transactions. If it is passed in, return all transactions(Including stacking, trading)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/transactions_by_id/',
    {
      "coin": "BTC_USDT",
      "side": "deposit",
      "max_id": 20181114183534062065000000483656
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/transactions_by_id/',
          {
              "coin": "BTC_USDT",
              "side": "deposit",
              "max_id": 20181114183534062065000000483656

          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transactions_by_id/", map[string]string{
      "coin": "BTC_USDT",
      "side": "deposit",
      "max_id": 20181114183534062065000000483656
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
          "id": "20221013214833000312228000005846",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "6000000",
          "abs_amount": "0.06",
          "txid": "L65954e38419b55abb10b37fc6fca54f",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668913144,
          "last_time": 1665668913144,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L65954e38419b55abb10b37fc6fca54f",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      },
      {
          "id": "20221013213858000312228000007739",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "23000000",
          "abs_amount": "0.23",
          "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668338625,
          "last_time": 1665668338625,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By Request IDs
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_request_ids

GET /v1/custody/transactions_by_request_ids/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing transaction information for the given request IDs. The request IDs should be provided as a comma-separated string in the 'request_ids' parameter of the GET request. The maximum number of request IDs that can be provided is 50.

<Tip> FAQ：[How to query the transaction details of a batch withdraw request?](/v1/faqs/transaction-management#how-to-query-the-transaction-details-of-a-batch-withdrawal-request)</Tip>

#### Request

<ParamField query="request_ids" type="String" required>Request ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/transactions_by_request_ids/",
    {
      "request_ids": "web_send_by_user_2045_1681202509548,IntegrationTest-758556063289348454"
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch("GET", "/v1/custody/transactions_by_request_ids/",
          {
              "request_ids": "web_send_by_user_2045_1681202509548,IntegrationTest-758556063289348454"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transactions_by_request_ids/", map[string]string{
      "request_ids": "web_send_by_user_2045_1681202509548,IntegrationTest-758556063289348454"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
        "id": "20230410161529000336305000000596",
        "coin": "COBO_HNS",
        "display_code": "COBO_HNS",
        "description": "",
        "decimal": 6,
        "address": "rs1qhqr75h43kxuj4qn42rn2a7kgrehmrx79z67l85",
        "source_address": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
        "side": "withdraw",
        "amount": "500",
        "abs_amount": "0.0005",
        "txid": "d9cf9cd81d8e74afd7638988fe0abe04874cf3dc0a91a92daee723a063efa648",
        "vout_n": 0,
        "request_id": "IntegrationTest-758556063289348454",
        "status": "success",
        "abs_cobo_fee": "0.000000025",
        "created_time": 1680853859732,
        "last_time": 1681114653298,
        "confirmed_num": 2,
        "remark":"hello test",
        "request_created_time": 1680853859732,
        "tx_detail": {
          "txid": "d9cf9cd81d8e74afd7638988fe0abe04874cf3dc0a91a92daee723a063efa648",
          "blocknum": 820583,
          "blockhash": "3cec854e701ae9c360f59a829f3089faaf24ce9ec4c7dad63494fcb8bc395d5c",
          "fee": 0,
          "actualgas": 250000,
          "gasprice": 1,
          "hexstr": ""
        },
        "source_address_detail": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
        "memo": "",
        "confirming_threshold": 2,
        "fee_coin": "COBO_HNS",
        "fee_amount": 550000,
        "fee_decimal": 6,
        "type": "external",
        "tx_request_type": ""
      },
      {
        "id": "20230411164409000324843000007282",
        "coin": "COBO_HNS",
        "display_code": "COBO_HNS",
        "description": "",
        "decimal": 6,
        "address": "rs1qhqr75h43kxuj4qn42rn2a7kgrehmrx79z67l85",
        "source_address": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
        "side": "withdraw",
        "amount": "50000",
        "abs_amount": "0.05",
        "txid": "f3666096ea70aa44f1766d56a5681266f7c83f6aa36130c1fc2d2cdc89b1127a",
        "vout_n": 0,
        "request_id": "web_send_by_user_2045_1681202509548",
        "status": "success",
        "abs_cobo_fee": "0.0000025",
        "created_time": 1681202509877,
        "last_time": 1681202710566,
        "confirmed_num": 2,
        "request_created_time": 1681202509877,
        "tx_detail": {
          "txid": "f3666096ea70aa44f1766d56a5681266f7c83f6aa36130c1fc2d2cdc89b1127a",
          "blocknum": 822051,
          "blockhash": "515d242200dbb049cbac9902df7a3982d05f4537790e1226b8a8b98490774f38",
          "fee": 0,
          "actualgas": 250000,
          "gasprice": 1,
          "hexstr": ""
        },
        "source_address_detail": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
        "memo": "",
        "confirming_threshold": 2,
        "fee_coin": "COBO_HNS",
        "fee_amount": 550000,
        "fee_decimal": 6,
        "type": "external",
        "tx_request_type": ""
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By Time
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_time

GET /v1/custody/transactions_by_time/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by time range, coin type, transaction side (deposit/withdraw), and address. The response includes transaction details such as transaction hash, amount, and timestamp.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="coin" type="String">Coin code (Does not return all currencies)</ParamField>
<ParamField query="side" type="enum(deposit / withdraw)">Deposit/withdraw </ParamField>
<ParamField query="address" type="String">Deposit/withdraw address is optional. If not included, all address history will be returned. </ParamField>
<ParamField query="begin_time" type="Long">Begin timestamp(milliseconds). If set, transactions whose transaction confirmation time is less than or equal to this will not be returned.(cannot be used with end\_time) </ParamField>
<ParamField query="end_time" type="Long">End timestamp (milliseconds). If it is passed in, the transactions whose transaction confirmation time is greater than or equal to this will not be returned.(cannot be used with begin\_time) </ParamField>
<ParamField query="limit" type="Integer">Page size is optional. If not included, the default size will be 50, and the maximum size will also be 50.</ParamField>
<ParamField query="include_financial" type="String">Request all transactions. If it is passed in, return all transactions(Including stacking, trading)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/transactions_by_time/',
    {
      "coin": "BTC_USDT",
      "side": "deposit",
      "begin_time": 1542191734958
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/transactions_by_time/',
          {
              "coin": "BTC_USDT",
              "side": "deposit",
              "begin_time": 1542191734958
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transactions_by_time/", map[string]string{
      "coin": "BTC_USDT",
      "side": "deposit",
      "begin_time": 1542191734958
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
          "id": "20221013214833000312228000005846",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "6000000",
          "abs_amount": "0.06",
          "txid": "L65954e38419b55abb10b37fc6fca54f",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668913144,
          "last_time": 1665668913144,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L65954e38419b55abb10b37fc6fca54f",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      },
      {
          "id": "20221013213858000312228000007739",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "23000000",
          "abs_amount": "0.23",
          "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668338625,
          "last_time": 1665668338625,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By time and offset
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_time_ex

GET /v1/custody/transactions_by_time_ex/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by time range, transaction status, coins, transaction side (deposit/withdraw) and address. As the extension of ***[Get Transactions By Time](https://www.cobo.com/developers/v1/api-references/custody-wallet/transactions_by_time)***, this endpoint introduced a new 'offset' parameter used for performing pagination query of transactions. The response includes transaction details such as transaction hash, amount, and timestamp.

#### Request

<ParamField query="coins" type="String">Coin codes. Separated by commas</ParamField>
<ParamField query="side" type="Int">1: TRANSACTION\_DEPOSIT; 2: TRANSACTION\_WITHDRAW </ParamField>

<ParamField query="status" type="Int">
  | Status Type           | Code |
  | --------------------- | ---- |
  | PENDING\_APPROVAL     | 101  |
  | SENT                  | 201  |
  | PENDING\_CONFIRMATION | 501  |
  | SUCCESS               | 900  |
  | FAILED                | 901  |
</ParamField>

<ParamField query="address" type="String">Deposit address</ParamField>
<ParamField query="begin_time" type="Long">Begin timestamp(milliseconds). If set, transactions whose transaction created time is greater than or equal to this will be returned.</ParamField>
<ParamField query="end_time" type="Long">End timestamp (milliseconds). If set, the transactions whose created time is less than this will be returned.</ParamField>
<ParamField query="limit" type="Integer">Page size. If not set, the default size will be 50, and the maximum size will also be 50.</ParamField>
<ParamField query="offset" type="Integer">Offset specifies the starting index for the current query, indicating the number of transactions to skip before fetching and returning the transactions in the result.</ParamField>
<ParamField query="order_by" type="String">Sorting method. Default: created\_time; other option: last\_time</ParamField>
<ParamField query="order" type="String">Sorting order. Options: ASC (default), DESC</ParamField>
<ParamField query="txid" type="String">Transaction ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/transactions_by_time_ex/',
    {
      "coins": "COBO_HNS",
      "side": 2,
      "status": 900,
      "begin_time": 1699249938000,
      "limit": 10,
      "offset": 0,
      "order": "DESC",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/transactions_by_time_ex/',
          {
              "coins": "COBO_HNS",
              "side": 2,
              "status": 900,
              "begin_time": 1699249938000,
              "limit": 10,
              "offset": 0,
              "order": "DESC",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transactions_by_time_ex/", map[string]string{
      "coins": "COBO_HNS",
      "side": 2,
      "status": 900,
      "begin_time": 1699249938000,
      "limit": 10,
      "offset": 0,
      "order": "DESC",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
          "id": "20231229164409000331925000008218",
          "coin": "COBO_HNS",
          "display_code": "COBO_HNS",
          "description": "",
          "decimal": 6,
          "address": "rs1qsppf0ypx5lmjepc5s55rqwdlefk9n2saglxzm6",
          "source_address": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
          "side": "withdraw",
          "amount": "500",
          "abs_amount": "0.0005",
          "txid": "7d4c49b653633f65cff08932bab41e2fe594b3d90c7f1978d9e4a0eb678b7468",
          "vout_n": 0,
          "request_id": "IntegrationTest-854963652255465838",
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1703839219000,
          "last_time": 1703839450000,
          "confirmed_num": 2,
          "remark": "",
          "tx_detail": {
              "txid": "7d4c49b653633f65cff08932bab41e2fe594b3d90c7f1978d9e4a0eb678b7468",
              "blocknum": 1199326,
              "blockhash": "7cc460715566bd2fe2a545902ec8a52ac6ae79f28331bf58d6e07256bbb550ca",
              "fee": 0,
              "actualgas": 250000,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
          "memo": "",
          "confirming_threshold": 2,
          "fee_coin": "COBO_HNS",
          "fee_amount": 550000,
          "fee_decimal": 6,
          "type": "external"
      },
      {
          "id": "20231229161638000343969000005740",
          "coin": "COBO_HNS",
          "display_code": "COBO_HNS",
          "description": "",
          "decimal": 6,
          "address": "rs1qsppf0ypx5lmjepc5s55rqwdlefk9n2saglxzm6",
          "source_address": "rs1q5gqkxzd6g02csmv9m22450p6hw5sqmrptuanjy",
          "side": "withdraw",
          "amount": "500",
          "abs_amount": "0.0005",
          "txid": "26316634afed164e24418bf2e01daf0466407ddf14de2b928a369b5184e1fba1",
          "vout_n": 0,
          "request_id": "IntegrationTest-854957104955502882",
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1703837659000,
          "last_time": 1703837798000,
          "confirmed_num": 2,
          "remark": "",
          "tx_detail": {
              "txid": "26316634afed164e24418bf2e01daf0466407ddf14de2b928a369b5184e1fba1",
              "blocknum": 1199299,
              "blockhash": "1a280b2d298ed217c8a4f9dbe42ae93e70c286bbe25350d9d70009a66779deb1",
              "fee": 0,
              "actualgas": 250000,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "rs1q5gqkxzd6g02csmv9m22450p6hw5sqmrptuanjy",
          "memo": "",
          "confirming_threshold": 2,
          "fee_coin": "COBO_HNS",
          "fee_amount": 550000,
          "fee_decimal": 6,
          "type": "external"
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# null
Source: https://cobo.com/developers/v1/api-references/custody-wallet/withdraw_info_by_request_id

GET /v1/custody/withdraw_info_by_request_id/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns information about a withdraw transaction given a request ID. The response is a JSON object containing details about the transaction such as the transaction hash, amount, and status.

#### Request

<ParamField query="request_id" type="String" required>Withdraw Request ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="id" type="String">Cobo Unique Transaction ID</ResponseField>
    <ResponseField name="coin" type="String">Coin code (Cobo has internal symbols for each coin to ensure they are all unique)</ResponseField>
    <ResponseField name="display_code" type="String">Coin ticker symbol (not unique, changeable, for reference only)</ResponseField>
    <ResponseField name="description" type="String">Full name of coin (not unique, changeable, for reference only)</ResponseField>
    <ResponseField name="address" type="String">Deposit address</ResponseField>
    <ResponseField name="memo" type="String">Memo for specified coins(EOS,XLM,XRP,IOST)</ResponseField>
    <ResponseField name="source_address" type="String">Source address</ResponseField>
    <ResponseField name="source_address_detail" type="String">Separate by comma if more than one source address</ResponseField>
    <ResponseField name="side" type="enum(deposit / withdraw)">Transaction type</ResponseField>
    <ResponseField name="amount" type="String">Transaction value (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
    <ResponseField name="decimal" type="Int">Amount decimal</ResponseField>
    <ResponseField name="abs_amount" type="String">Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)</ResponseField>
    <ResponseField name="abs_cobo_fee" type="String">lute fee value. For examle, abs\_cobo\_fee 0.00005 means exactly 0.00005BTC</ResponseField>
    <ResponseField name="txid" type="String">Transaction ID, which can be found on the corresponding public chain</ResponseField>
    <ResponseField name="vout_n" type="String">For transactions on public blockchains that allow for multiple deposit addresses in a single transaction, this value indicates the transaction index on the corresponding public blockchain</ResponseField>
    <ResponseField name="request_id" type="String">Request ID</ResponseField>
    <ResponseField name="status" type="enum(success / failed / pending)">Transaction status. If using the 'pending\_transaction' and 'pending\_transaction' interfaces for querying, the status can only be 'pending'</ResponseField>
    <ResponseField name="request_created_time" type="Long">Withdraw request creation time</ResponseField>
    <ResponseField name="created_time" type="Long">Transaction creation time</ResponseField>
    <ResponseField name="last_time" type="Long">Transaction success/failure time</ResponseField>
    <ResponseField name="confirming_threshold" type="Int">Confirmed numbers required for a successful transaction</ResponseField>
    <ResponseField name="confirmed_num" type="Int">Confirmed numbers</ResponseField>
    <ResponseField name="remark" type="String">Transaction remark</ResponseField>
    <ResponseField name="fee_coin" type="String">Fee coin code</ResponseField>
    <ResponseField name="fee_amount" type="Int">Fee amount (Note that the value here contains decimals. For example, a BTC value of 100,000,000 here is actually 1 BTC)</ResponseField>
    <ResponseField name="fee_decimal" type="Int">Fee decimal</ResponseField>
    <ResponseField name="type" type="String">external, internal shows if it's a Loop tx or external(on-chain)</ResponseField>

    | Transaction Request Type    | Code |
    | --------------------------- | ---- |
    | REQUEST\_FROM\_WEB          | 100  |
    | REQUEST\_FROM\_API          | 200  |
    | REQUEST\_FROM\_GAS\_STATION | 1500 |
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/withdraw_info_by_request_id/",
      {
          "request_id": "unique_123456"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/withdraw_info_by_request_id/',
          {
              "request_id": "unique_123456"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/withdraw_info_by_request_id/", map[string]string{
      "request_id": "unique_123456",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "id": "",
      "coin": "XRP",
      "display_code": "XRP",
      "description": "Ripple",
      "address": "rfKyCMyoV6Ln2GZ7YDbrBrnXCbAyBbxRqB",
      "source_address": "",
      "side": "withdraw",
      "amount": "1",
      "decimal": 6,
      "abs_amount": "0.000001",
      "txid": "B209B991B3B3877F88692B45AB8D476DEE1EBD4CACF7847760D93A797465EE80",
      "vout_n": 0,
      "request_id": "IntegrationTest-575197675203117556",
      "status": "pending",
      "created_time": 1637137814143,
      "last_time": 1637137814143,
      "memo": "1175609358",
      "confirming_threshold": 1,
      "remark": "",
      "confirmed_num": 0,
      "type": "external",
      "fee_amount": 1000000,
      "fee_coin": "XRP",
      "fee_decimal": 6
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Coin Details
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_coin_info

GET /v1/custody/mpc/coin_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the currency rate and unit for a given coin code. The endpoint requires authentication and takes a 'coin_code' parameter in the GET request.

<Tip> FAQ：[How do I query the withdraw fees?](/v1/faqs/coin-management#how-do-i-query-the-withdrawal-fees)</Tip>

#### Request

<ParamField query="coin" type="String" required>Coin code</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">Coin code</ResponseField>
    <ResponseField name="display_code" type="String">Coin ticker symbol  (not unique, changeable, for reference only )</ResponseField>
    <ResponseField name="description" type="String">Coin code</ResponseField>
    <ResponseField name="decimal" type="Int">Coin balance decimal places</ResponseField>
    <ResponseField name="can_deposit" type="bool">Deposit accessibility</ResponseField>
    <ResponseField name="can_withdraw" type="bool">Withdraw accessibility</ResponseField>
    <ResponseField name="balance" type="String">Current balance</ResponseField>
    <ResponseField name="abs_balance" type="String">Absolute value of balance</ResponseField>
    <ResponseField name="fee_coin" type="String">Coin used for fee</ResponseField>
    <ResponseField name="abs_estimate_fee" type="String">Estimated fee</ResponseField>
    <ResponseField name="abs_estimate_fee_usd" type="String">Estimated fee(Convert to USD calculation) </ResponseField>
    <ResponseField name="confirming_threshold" type="Int">Confirmation threshold required for the coin</ResponseField>
    <ResponseField name="dust_threshold" type="Int">Coin minimum withdraw threshold</ResponseField>
    <ResponseField name="minimum_deposit_threshold" type="String">Coin minimum deposit threshold</ResponseField>
    <ResponseField name="token_address" type="String">Smart contract address for token (null for main-chain token)</ResponseField>
    <ResponseField name="require_memo" type="String">Memo for specified coins(EOS,XLM,XRP,IOST)</ResponseField>
    <ResponseField name="asset_model_type" type="String">Asset accounting method, 0: account model; 1: UTXO model</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/mpc/coin_info/",
    {
      "coin": "BTC",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/coin_info/', {
      "coin": "BTC",
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/coin_info/", map[string]string{
      "coin": "BTC",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
      "success": true,
      "result": {
          "coin": "BTC",
          "display_code": "BTC",
          "description": "Bitcoin",
          "decimal": 8,
          "can_deposit": true,
          "can_withdraw": true,
          "require_memo": false,
          "minimum_deposit_threshold": "10000",
          "balance": "0",
          "abs_balance": "0",
          "fee_coin": "BTC",
          "abs_estimate_fee": "0.00079252",
          "abs_estimate_fee_usd": "37.03",
          "confirming_threshold": 4,
          "dust_threshold": 546,
          "token_address": "",
          "asset_model_type": 1
      }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Estimate Fee
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_estimate_fee

POST /v1/custody/mpc/estimate_fee/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint will simulate a transaction based on the parameters, and obtain the transaction fee from the blockchain. It takes in various parameters such as the coin code, amount, address, gas price, gas limit, fee, and extra parameters. The response includes the fee amount in different levels such as slow, average, fast, and custom. The custom fee corresponds to the fee or gas_price parameter.

<Tip> FAQ：[How do I query the withdraw fees?](/v1/faqs/coin-management#how-do-i-query-the-withdrawal-fees)</Tip>

#### Request

<ParamField body="coin" type="String" required>coin code</ParamField>
<ParamField body="amount" type="Int">transaction amount in decimal places (e.g. one bitcoin is divisible to eight decimal places, and 100000000 represents 1 BTC)</ParamField>
<ParamField body="address" type="String">deposit address</ParamField>
<ParamField body="replace_cobo_id" type="String">Cobo ID of a transaction designated as RBF, this parameter is used when attempting to speed up or drop a previous transaction</ParamField>
<ParamField body="from_address" type="String">from address</ParamField>
<Tip>For UTXO model, the inputs in the transaction will be selected from the `from_address` based on either the `amount` or `to_address_details`. If this parameter is not provided, the inputs will be selected from the addresses in the current wallet. If the sending amount is greater than the balance, this endpoint will return error code 12007.<br /><br />
For Account model, if the sum of sending amount and transaction fee (`gas_price` \* `gas_limit`) is greater than the balance of the `from_address`, the blockchain may return insufficient funds error, and this endpoint will return default transaction fee, please note that the default transaction fee might not be very accurate compared to the fee obtained directly from the blockchain.</Tip>
<ParamField body="to_address_details" type="Json">list of addresses used for receiving coins associated with the UTXO model; this value must be a JSON string and has a parameter type that fits. Please note that the `to_address_details` parameter and `amount` parameter are alternative.</ParamField>

```python Sample
to_address_details: '[{"to_address": "2N4J1WajwKZKpRtzzUmaW9B5GEqkppqdVY9","amount": "547"},
                      {"to_address": "tb1qycxy8d8jgff8hql09y62smw5s5mrf3ryn2j9lk","amount": "548"}]'
```

<Tip>For UTXO model, the parameters `from_address`, `amount`, `to_address_details`, and `input_selection` will determine the number of bytes in the transaction, and the `fee_amount` is determined by the fee\_per\_byte and the number of bytes.</Tip>
<ParamField body="fee" type="Float">transaction fees per byte; applicable to UTXO model</ParamField>
<Tip>If specified, the `fee_amount` in the `custom` field of the response will be based on the `fee` parameter and the number of bytes in the transaction.</Tip>
<ParamField body="gas_price" type="Int">gas price; applicable to account model; unit: wei</ParamField>
<ParamField body="gas_limit" type="Int">gas limit, applicable to account model</ParamField>

<ParamField body="extra_parameters" type="Json">
  UTXO Model:

  1. **input\_selection:** inputs to be excluded and included in transactions associated with the UTXO model; inputs must be in correspondence with from\_address (if specified); it must be a JSON string and has a structure that fits InputSelection
  2. **inputs\_to\_spend:** UTXO you want as input. Please note that the length of the list of UTXOs should be less than or equal to 100.
     * tx\_hash: Transaction tx\_hash
     * vout\_n: UTXO index
  3. **inputs\_to\_exclude:** UTXO you don't want as input
     * tx\_hash: Transaction tx\_hash
     * vout\_n: UTXO index

  ```python Sample
  extra_parameters: '{"input_selection":
                       {"inputs_to_spend":[
                         {"tx_hash": "e7ddfa61cc2a78e1661da44b10cdc862256573d2dc0485dc989fb7045ed9032c", "vout_n": 1},
                         {"tx_hash": "eabaee1f1a196b087e78303c6eaaeb9d1166de5f8d85f4ef7872b88bfcd60914", "vout_n": 2}],
                       "inputs_to_exclude":[
                         {"tx_hash": "e7ddfa61cc2a78e1661da44b10cdc862256573d2dc0485dc989fb7045ed9032c", "vout_n": 3},
                         {"tx_hash": "eabaee1f1a196b087e78303c6eaaeb9d1166de5f8d85f4ef7872b88bfcd60914", "vout_n": 4}]
                       }
                     }'
  ```

  Web3 wallet:

  * calldata: request data associated with an EVM contract.

  ```python Sample
  extra_parameters: '{"calldata": "0xa8059cbb000000000000000000000000971948873f869e4517311b190d7eb31e30eba0ef000000000000000000000000000000000000000000000000002386f26fc10000"}'
  ```

  <Tip>If specified, the `gas_limit` in the response will be determined by the `calldata`.</Tip>
</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="fee_coin" type="String">Fee coin code</ResponseField>
    <ResponseField name="fee_decimal" type="Int">Fee decimal</ResponseField>

    <ResponseField name="slow" type="object">
      <Expandable title="object">
        <ResponseField name="fee_per_byte" type="Int">transaction fees per byte; applicable to the UTXO model</ResponseField>
        <ResponseField name="fee_amount" type="Int">transaction fee; applicable to the UTXO model</ResponseField>
        <ResponseField name="gas_price" type="Int">gas price for account model</ResponseField>
        <ResponseField name="gas_limit" type="Int">gas limit for account model</ResponseField>

        <ResponseField name="fee_reserved" type="Int">
          The amount that needs to be reserved as a fee. The meaning of this field varies depending on the blockchain:<br />

          * For certain cryptocurrencies, this field indicates the minimum balance required to be maintained on the address due to chain-specific restrictions.<br />
          * For some Layer 2 blockchains, this field represents the Layer 1 transaction fee.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="average" type="object">
      <Expandable title="object">
        <ResponseField name="fee_per_byte" type="Int">transaction fees per byte; applicable to the UTXO model</ResponseField>
        <ResponseField name="fee_amount" type="Int">transaction fee; applicable to the UTXO model</ResponseField>
        <ResponseField name="gas_price" type="Int">gas price for account model</ResponseField>
        <ResponseField name="gas_limit" type="Int">gas limit for account model</ResponseField>

        <ResponseField name="fee_reserved" type="Int">
          The amount that needs to be reserved as a fee. The meaning of this field varies depending on the blockchain:<br />

          * For certain cryptocurrencies, this field indicates the minimum balance required to be maintained on the address due to chain-specific restrictions.<br />
          * For some Layer 2 blockchains, this field represents the Layer 1 transaction fee.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="fast" type="object">
      <Expandable title="object">
        <ResponseField name="fee_per_byte" type="Int">transaction fees per byte; applicable to the UTXO model</ResponseField>
        <ResponseField name="fee_amount" type="Int">transaction fee; applicable to the UTXO model</ResponseField>
        <ResponseField name="gas_price" type="Int">gas price for account model</ResponseField>
        <ResponseField name="gas_limit" type="Int">gas limit for account model</ResponseField>

        <ResponseField name="fee_reserved" type="Int">
          The amount that needs to be reserved as a fee. The meaning of this field varies depending on the blockchain:<br />

          * For certain cryptocurrencies, this field indicates the minimum balance required to be maintained on the address due to chain-specific restrictions.<br />
          * For some Layer 2 blockchains, this field represents the Layer 1 transaction fee.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="custom" type="object">
      <Expandable title="object">
        <ResponseField name="fee_per_byte" type="Float">transaction fees per byte; applicable to the UTXO model</ResponseField>
        <ResponseField name="fee_amount" type="Int">transaction fee; applicable to the UTXO model</ResponseField>
        <ResponseField name="gas_price" type="Int">gas price for account model</ResponseField>
        <ResponseField name="gas_limit" type="Int">gas limit for account model</ResponseField>

        <ResponseField name="fee_reserved" type="Int">
          The amount that needs to be reserved as a fee. The meaning of this field varies depending on the blockchain:<br />

          * For certain cryptocurrencies, this field indicates the minimum balance required to be maintained on the address due to chain-specific restrictions.<br />
          * For some Layer 2 blockchains, this field represents the Layer 1 transaction fee.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  # EVM example:
  request(
      "POST",
      "/v1/custody/mpc/estimate_fee/",
      {
          "coin": "ETH",
          "amount": 1,
          "address": "0x8a73abedb3053b17204b887af6231a8ac35fc2cc"
      },
      api_key, api_secret, host
  )

  # UTXO example:
  request(
      "POST",
      "/v1/custody/mpc/estimate_fee/",
      {
          "coin": "XTN",
          "amount": 100000,
          "from_address": "2NB8rYHkrLc54JSpjMM4VMA4GFP8n2eWZdS",
          "address": "2MzxhujoeQZHJ9Dmma93KoWSARofFy5rjxE",
          "fee": 2.2
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  // EVM example:
  coboFetch('POST', '/v1/custody/mpc/estimate_fee/', {
      "coin": "ETH",
      "amount": 1,
      "address": "0x8a73abedb3053b17204b887af6231a8ac35fc2cc",
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });

  // UTXO example:
  coboFetch('POST', '/v1/custody/mpc/estimate_fee/', {
      "coin": "XTN",
      "amount": 100000,
      "from_address": "2NB8rYHkrLc54JSpjMM4VMA4GFP8n2eWZdS",
      "address": "2MzxhujoeQZHJ9Dmma93KoWSARofFy5rjxE",
      "fee": 2.2
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  // EVM example:
  Request("POST", "/v1/custody/mpc/estimate_fee/", map[string]string{
      "coin": "ETH",
      "amount": 1,
      "address": "0x8a73abedb3053b17204b887af6231a8ac35fc2cc"
  })

  // UTXO example:
  Request("POST", "/v1/custody/mpc/estimate_fee/", map[string]string{
      "coin": "XTN",
      "amount": 100000,
      "from_address": "2NB8rYHkrLc54JSpjMM4VMA4GFP8n2eWZdS",
      "address": "2MzxhujoeQZHJ9Dmma93KoWSARofFy5rjxE",
      "fee": 2.2
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  // EVM example:
  {
    "success": true,
    "result": {
      "fee_coin": "ETH",
      "fee_decimal": 18,
      "rbf_minimum_fee": 0,
      "slow": {
        "fee_per_byte": 0,
        "fee_amount": 0,
        "gas_price": 13349966041,
        "gas_limit": 21000,
        "fee_reserved": 0
      },
      "average": {
        "fee_per_byte": 0,
        "fee_amount": 0,
        "gas_price": 13349966041,
        "gas_limit": 21000,
        "fee_reserved": 0
      },
      "fast": {
        "fee_per_byte": 0,
        "fee_amount": 0,
        "gas_price": 26699932082,
        "gas_limit": 21000,
        "fee_reserved": 0
      },
      "custom": {
        "fee_per_byte": 0,
        "fee_amount": 0,
        "gas_price": 0,
        "gas_limit": 0,
        "fee_reserved": 0
      }
    }
  }

  // UTXO example:
  {
    "success": true,
    "result": {
      "fee_coin": "XTN",
      "fee_decimal": 8,
      "rbf_minimum_fee": 0,
      "slow": {
        "fee_per_byte": 2,
        "fee_amount": 632,
        "gas_price": 0,
        "gas_limit": 0,
        "fee_reserved": 0
      },
      "average": {
        "fee_per_byte": 5,
        "fee_amount": 1580,
        "gas_price": 0,
        "gas_limit": 0,
        "fee_reserved": 0
      },
      "fast": {
        "fee_per_byte": 50,
        "fee_amount": 1580,
        "gas_price": 0,
        "gas_limit": 0,
        "fee_reserved": 0
      },
      "custom": {
        "fee_per_byte": 2.2,
        "fee_amount": 695,
        "gas_price": 0,
        "gas_limit": 0,
        "fee_reserved": 0
      }
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Generate Address Memos
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_generate_address_memo

POST /v1/custody/mpc/generate_address_memo/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint generates new memos for a given address and returns a list of the generated memos. The number of memos to generate is specified in the 'count' parameter of the POST request. The response contains a list of the generated memos in the form of address|memo.

<Tip>This API is only intended for specific chains that support memo, such as XRP.</Tip>

#### Request

<ParamField body="chain_code" type="String" required>The chain code</ParamField>
<ParamField body="address" type="String" required>The address for which the memos are to be generated.</ParamField>
<ParamField body="count" type="Int" required>The number of memos to generate.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="addresses" type="String[ ]">List of generated memos.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/generate_address_memo/",
      {
          "chain_code": "XRP",
          "address": "rGa7DmBDvJu7Tu6BixSjBq4hXA2DTWoKbe",
          "count": 2
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/generate_address_memo/', {
      "chain_code": "XRP",
      "address": "rGa7DmBDvJu7Tu6BixSjBq4hXA2DTWoKbe",
      "count": 2
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/generate_address_memo/", map[string]string{
      "chain_code": "XRP",
      "address": "rGa7DmBDvJu7Tu6BixSjBq4hXA2DTWoKbe",
      "count": 2
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
   "success": true,
   "result": {
      "addresses": ["rGa7DmBDvJu7Tu6BixSjBq4hXA2DTWoKbe|1625824444", "rGa7DmBDvJu7Tu6BixSjBq4hXA2DTWoKbe|973899976"]
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Generate Addresses
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_generate_addresses

POST /v1/custody/mpc/generate_addresses/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint generates new addresses for a given chain code and returns a list of the generated addresses. The number of addresses to generate is specified in the 'count' parameter of the POST request. The maximum number of addresses that can be generated in one request is 200. The endpoint also checks if the organization has permission to add addresses and if the number of addresses being added exceeds the minutely limit. The response contains a list of the generated addresses along with their IDs, HD paths, and encodings.

<Tip> FAQ：[How to batch-generate addresses?](v1/faqs/address-management#how-to-batch-generate-addresses)</Tip>

#### Request

<ParamField body="chain_code" type="String" required>The chain code for which the addresses are to be generated.</ParamField>
<ParamField body="count" type="Int" required>The number of addresses to generate.</ParamField>
<ParamField body="encoding" type="Int">The encoding of addresses to generate. The default value is None, which means the default encoding type for each blockchain is used. For more information, please [refer to](/v1/api-references/development/address-encoding) the enum value corresponding to each encoding</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="addresses" type="object[]">
      <Expandable title="object">
        <ResponseField name="id" type="String">The ID of the generated address.</ResponseField>
        <ResponseField name="address" type="String">The generated address.</ResponseField>
        <ResponseField name="hd_path" type="String">The HD path of the generated address.</ResponseField>
        <ResponseField name="encoding" type="Int">The encoding of the generated address. For more information, please [refer to](/v1/api-references/development/address-encoding) the enum value corresponding to each encoding</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/generate_addresses/",
      {
          "chain_code": "ETH",
          "count": 2
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/generate_addresses/', {
      "chain_code": "ETH",
      "count": 2
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/generate_addresses/", map[string]string{
      "chain_code": "ETH",
      "count": 2
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
   "success": true,
   "result": {
        "addresses": [
          {
            "id": 721935051680543203,
            "address": "0xd80e19dddb11e9a91f7aa644306564538e4b8586",
            "hd_path": "m/44/60/1/0/82",
            "encoding": 0
          },
          {
            "id": 721935051680543204,
            "address": "0x4cc90d4cfa5765bcdcde6aaada434eba30a5c949",
            "hd_path": "m/44/60/1/0/83",
            "encoding": 0
          }
        ]
     }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Balance
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_balance

GET /v1/custody/mpc/get_balance/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns the balance of a given address in a MPC wallet. The response contains information about the coins and NFTs held by the address, including their balance, decimal, and description.

#### Request

<ParamField query="address" type="String" required>The address to get the balance of.</ParamField>
<ParamField query="chain_code" type="String">The chain code of the coin to filter by.</ParamField>
<ParamField query="coin" type="String">The asset coin of the coin to filter by.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin_data" type="object[]">
      <Expandable title="object">
        <ResponseField name="address" type="String">The address of the coin.</ResponseField>
        <ResponseField name="coin" type="String">The asset coin of the coin.</ResponseField>
        <ResponseField name="chain_code" type="String">The chain code of the coin.</ResponseField>
        <ResponseField name="display_code" type="String">Abbreviation (reference only, subject to change)</ResponseField>
        <ResponseField name="description" type="String">Full name (reference only, subject to change)</ResponseField>
        <ResponseField name="balance" type="String">The balance of the coin.</ResponseField>
        <ResponseField name="decimal" type="Int">The decimal of the coin.</ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="nft_data" type="object[]">
      <Expandable title="object">
        <ResponseField name="address" type="String">The address of the coin.</ResponseField>
        <ResponseField name="nft_code" type="String">The NFT code.</ResponseField>
        <ResponseField name="token_id" type="String">The token ID of the NFT.</ResponseField>
        <ResponseField name="contract_address" type="String">The contract address of the NFT.</ResponseField>
        <ResponseField name="balance" type="String">The balance of the NFT.</ResponseField>
        <ResponseField name="chain_code" type="String">The chain code of the coin.</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/get_balance/",
      {
          "address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
          "chain_code": "ETH",
          "coin": "ETH"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/get_balance/', {
      "address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
      "chain_code": "ETH",
      "coin": "ETH"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/get_balance/", map[string]string{
      "address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
      "chain_code": "ETH",
      "coin": "ETH"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
   "success": true,
   "result": {
        "coin_data": [
          {
            "address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
            "coin": "ETH",
            "chain_code": "ETH",
            "display_code": "ETH",
            "description": "Ethereum",
            "balance": "49999999999999999987",
            "decimal": 18
          },
          {
            "address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
            "coin": "ETH",
            "chain_code": "ETH",
            "display_code": "ETH",
            "description": "Ethereum",
            "balance": "47290549999999999988",
            "decimal": 18
          }
        ],
        "nft_data": [
          {
            "nft_code": "NFT_ETH_BLUE_CHURCH",
            "token_id": "200",
            "address": "0xcc656c94b8ec881ddd9611e8ad4a4eca9f859e7b",
            "chain_code": "ETH",
            "contract_address": "0x357fd2942e8ee435d7d21859ecae99bd597d8779",
            "balance": "1"
          }
        ]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Max Sendable Amount
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_max_send_amount

GET /v1/custody/mpc/get_max_send_amount/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns the maximum sendable amount and the corresponding transaction fee for a given address. It takes in various parameters such as the coin code, fee rate, to_address, and from_address. The response includes the coin decimal, fee coin, the maximum sendable amount, and the corresponding transaction fee.

#### Request

<ParamField query="coin" type="String" required>coin code</ParamField>
<ParamField query="fee_rate" type="Float" required>gas price (unit: wei) for account model or transaction fees per byte for UTXO model</ParamField>
<ParamField query="to_address" type="String" required>to address</ParamField>

<ParamField query="from_address" type="String">
  Account Model: this parameter is required

  UTXO Model: this parameter is optional, the input will be selected based off the current wallet if the parameter is empty or not passed
</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">coin code</ResponseField>
    <ResponseField name="coin_decimal" type="Int">coin decimal precision</ResponseField>
    <ResponseField name="fee_coin" type="String">fee coin code</ResponseField>
    <ResponseField name="fee_decimal" type="Int">fee coin decimal precision</ResponseField>
    <ResponseField name="max_send_value" type="Int">the maximum sendable amount for the given address or current wallet</ResponseField>
    <ResponseField name="fee_per_byte" type="Float">transaction fees per byte for UTXO model</ResponseField>
    <ResponseField name="fee_amount" type="Int">transaction fee for UTXO model</ResponseField>
    <ResponseField name="gas_price" type="Int">gas price for account model</ResponseField>
    <ResponseField name="gas_limit" type="Int">gas limit for account model</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/get_max_send_amount/",
      {
          "coin": "ETH",
          "fee_rate": 43638776316,
          "to_address": "0x8a73abedb3053b17204b887af6231a8ac35fc2cc",
          "from_address": "0xa09ba917934c2415fbeb785ed5dc8eaf4f694973"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/get_max_send_amount/', {
      "coin": "ETH",
      "fee_rate": 43638776316,
      "to_address": "0x8a73abedb3053b17204b887af6231a8ac35fc2cc",
      "from_address": "0xa09ba917934c2415fbeb785ed5dc8eaf4f694973"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/get_max_send_amount/", map[string]string{
      "coin": "ETH",
      "fee_rate": 43638776316,
      "to_address": "0x8a73abedb3053b17204b887af6231a8ac35fc2cc",
      "from_address": "0xa09ba917934c2415fbeb785ed5dc8eaf4f694973"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "coin": "ETH",
      "coin_decimal": 18,
      "fee_coin": "ETH",
      "fee_decimal": 18,
      "max_send_value": 841165119243622,
      "fee_per_byte": 0,
      "fee_amount": 0,
      "gas_price": 43638776316,
      "gas_limit": 21000
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Supported Chains
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_supported_chains

GET /v1/custody/mpc/get_supported_chains/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a 'chain_codes' field containing a list of supported chain codes for the MPC custody wallet associated with the authenticated user.

#### Request

None

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="wallet_name" type="String">wallet name</ResponseField>
    <ResponseField name="chain_codes" type="String[ ]">List of supported chain codes.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/get_supported_chains/", {},
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/get_supported_chains/', {}, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/get_supported_chains/", map[string]string{})
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result":{
        "wallet_name": "My MPC Wallet",
        "chain_codes": [
          "BSC_BNB",
          "ETH",
          "GETH",
          "TBSC_BNB",
          "MATIC",
          "ARBITRUM_ETH"
        ]
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Supported Coins
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_supported_coins

GET /v1/custody/mpc/get_supported_coins/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of supported coins for a given chain. The response includes the coin code, display code, description, decimal, deposit and withdraw availability, and confirming threshold.

#### Request

<ParamField query="chain_code" type="String" required>Chain code for which to retrieve supported coins.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coins" type="object[]">
      <Expandable title="object">
        <ResponseField name="coin" type="String">Coin code</ResponseField>
        <ResponseField name="display_code" type="String">Abbreviation (reference only, subject to change)</ResponseField>
        <ResponseField name="description" type="String">Full name (reference only, subject to change)</ResponseField>
        <ResponseField name="decimal" type="Int">Decimal precision</ResponseField>
        <ResponseField name="can_deposit" type="Bool">Whether deposit is supported</ResponseField>
        <ResponseField name="can_withdraw" type="Bool">Whether withdraw is supported</ResponseField>
        <ResponseField name="confirming_threshold" type="Int">Number of confirmations required</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/get_supported_coins/",
      {
          "chain_code": "ETH"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/get_supported_coins/', {
    "chain_code": "ETH"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/get_supported_coins/", map[string]string{
   "chain_code": "ETH"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
   "success": true,
   "result": {
        "coins": [
          {
            "coin": "ETH",
            "display_code": "ETH",
            "description": "Ethereum",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 12
          },
          {
            "coin": "ETH_USDT",
            "display_code": "USDT",
            "description": "",
            "decimal": 6,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 12
          }
        ]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Supported NFT Collections
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_supported_nft_collections

GET /v1/custody/mpc/get_supported_nft_collections/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of supported NFT collections on the specified chain. The response includes the NFT code, chain code, contract address, description, display code, and standard for each supported collection.

<Note>This API is only intended for MPC web3 wallets and does not support MPC send/receive wallets.</Note>

#### Request

<ParamField query="chain_code" type="String" required>chain code</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="nft_collections" type="object[]">
      <Expandable title="object">
        <ResponseField name="nft_code" type="String">NFT Token code</ResponseField>
        <ResponseField name="chain_code" type="String">chain code</ResponseField>
        <ResponseField name="contract_address" type="String">NFT contract address</ResponseField>
        <ResponseField name="description" type="String">NFT description</ResponseField>
        <ResponseField name="display_code" type="String">NFT display code</ResponseField>
        <ResponseField name="standard" type="String">NFT contract standard</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/get_supported_nft_collections/",
      {
          "chain_code": "ETH"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/get_supported_nft_collections/', {
    "chain_code": "ETH"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/get_supported_nft_collections/", map[string]string{
   "chain_code": "ETH"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "nft_collections": [
        {
          "nft_code": "NFT_ETH_MOOD",
          "chain_code": "ETH",
          "contract_address": "0xda4c9ffb9a96ef44865114be4af25004f0ee385d",
          "description": "Moodies",
          "display_code": "MOOD",
          "standard": "ERC721"
        },
        {
          "nft_code": "NFT_ETH_GOBLIN",
          "chain_code": "ETH",
          "contract_address": "0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e",
          "description": "",
          "display_code": "GOBLIN",
          "standard": "ERC721"
        }
      ]
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Wallet Supported Coins
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_wallet_supported_coins

GET /v1/custody/mpc/get_wallet_supported_coins/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of supported coins for a specific MPC wallet. The response includes the coin code, chain code, display code, description, decimal, and other relevant information such as whether the coin can be deposited or withdrawn, and the confirming threshold.

<Note>This API is only intended for MPC send/receive wallets and does not support MPC web3 wallets.</Note>

#### Request

None

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="wallet_name" type="String">MPC wallet name in Cobo Custody</ResponseField>

    <ResponseField name="coins" type="object[]">
      <Expandable title="object">
        <ResponseField name="coin" type="String">Code of the coin.</ResponseField>
        <ResponseField name="chain_code" type="String">Chain code of the coin.</ResponseField>
        <ResponseField name="display_code" type="String">Abbreviation (reference only, subject to change)</ResponseField>
        <ResponseField name="description" type="String">Description of the coin.</ResponseField>
        <ResponseField name="decimal" type="String">Decimal places of the coin.</ResponseField>
        <ResponseField name="can_deposit" type="Bool">Whether the coin can be deposited.</ResponseField>
        <ResponseField name="can_withdraw" type="Bool">Whether the coin can be withdrawn.</ResponseField>
        <ResponseField name="confirming_threshold" type="Int">Confirming threshold of the coin.</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/get_wallet_supported_coins/",
      {},
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch("GET", "/v1/custody/mpc/get_wallet_supported_coins/", {}, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/get_wallet_supported_coins/", map[string]string{})
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
   "success": true,
    "result": {
        "wallet_name": "Test_Wallet",
        "coins": [
          {
            "coin": "GETH_UNI",
            "chain_code": "GETH",
            "display_code": "UNI",
            "description": "",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 32
          },
          {
            "coin": "ETH",
            "chain_code": "ETH",
            "display_code": "ETH",
            "description": "Ethereum",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 12
          }
        ]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Is Valid Address
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_is_valid_address

GET /v1/custody/mpc/is_valid_address/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint checks if a given address is valid for a specified coin. It also supports memos for certain coins. The response is a boolean indicating whether the address is valid or not.

<Tip> FAQ：[How to verify whether a withdraw address is legitimate?](/v1/faqs/address-management#how-to-verify-whether-a-withdrawal-address-is-legitimate)</Tip>

#### Request

<ParamField query="coin" type="String" required>Coin code</ParamField>
<ParamField query="address" type="String" required>address; please use ‘｜’ to separate the addresses if there’s also a memo</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="bool">Whether the address is valid or not.</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/is_valid_address/",
      {
          "coin": "ETH",
          "address": "0x9414933Ff7777bb28cA22D15c178596A6e58d957"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/is_valid_address/', {
      "coin": "ETH",
      "address": "0x9414933Ff7777bb28cA22D15c178596A6e58d957"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/is_valid_address/", map[string]string{
      "coin": "ETH",
      "address": "0x9414933Ff7777bb28cA22D15c178596A6e58d957"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
  "success": true,
  "result": false
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Addresses List
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_addresses

GET /v1/custody/mpc/list_addresses/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of wallet addresses and their associated information. The endpoint takes in a chain code and optional parameters for pagination and sorting. The response includes the total count of addresses and a list of addresses with their respective ID, address, encoding, and HD path.

#### Request

<ParamField query="chain_code" type="String" required>Chain code of the wallet addresses.</ParamField>
<ParamField query="start_id" type="String">ID of an address to start with; the latest address information will be returned if neither the start ID nor the end ID is specified</ParamField>
<ParamField query="end_id" type="String">ID of an address to end with; the latest address information will be returned if neither the start ID nor the end ID is specified</ParamField>
<ParamField query="limit" type="Int">number of entries per page; max: 50; default: 50</ParamField>
<ParamField query="sort" type="Int">address sorting method; 1: based on creation time, from earliest to latest; other value: based on creation time, from latest to earliest (default)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="total" type="Int">Total number of addresses</ResponseField>

    <ResponseField name="addresses" type="object[]">
      <Expandable title="object">
        <ResponseField name="id" type="String">The ID of the generated address.</ResponseField>
        <ResponseField name="address" type="String">The generated address.</ResponseField>
        <ResponseField name="hd_path" type="String">The HD path of the generated address.</ResponseField>
        <ResponseField name="encoding" type="Int">The encoding of the generated address. For more information, please [refer to](/v1/api-references/development/address-encoding) the enum value corresponding to each encoding </ResponseField>
        <ResponseField name="description" type="String">The address description.</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/list_addresses/",
      {
          "chain_code": "ETH",
          "start_id": "721887227156373678",
          "end_id": "",
          "limit": 2,
          "sort": 0
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/list_addresses/', {
      "chain_code": "ETH",
      "start_id": "721887227156373678",
      "end_id": "",
      "limit": 2,
      "sort": 0
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/list_addresses/", map[string]string{
      "chain_code": "ETH",
      "start_id": "721887227156373678",
      "end_id": "",
      "limit": 2,
      "sort": 0
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
   "success": true,
   "result": {
        "total": 2,
        "addresses": [
          {
            "id": "721941011752862138",
            "address": "0x297db9241bfe5665641951bcf166feebd003870c",
            "encoding": 0,
            "hd_path": "m/44/60/1/0/85",
            "description":""
          },
          {
            "id": "721941011752862137",
            "address": "0x14cf9de0d8062ca53af5c92dcc574c8f3acb6da5",
            "encoding": 0,
            "hd_path": "m/44/60/1/0/84",
            "description":""
          }
        ]
    }
  }


  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Balances List
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_balances

GET /v1/custody/mpc/list_balances/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with a list of token assets and their balances for a given MPC wallet. The response includes the total count of token assets, as well as information about each asset, such as the coin code, chain code, display code, and balance. Additionally, if any of the token assets are NFTs, the response will include information about the NFT, such as the NFT code, token ID, and contract address.

#### Request

<ParamField query="coin" type="String">Coin code of the token asset to retrieve.</ParamField>
<ParamField query="chain_code" type="String">Chain code of the token asset to retrieve.</ParamField>
<ParamField query="page_index" type="Int" required>Index of the page to retrieve.</ParamField>
<ParamField query="page_length" type="Int" required>Number of items to retrieve per page(max:50)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin_data" type="object[]">
      <Expandable title="object">
        <ResponseField name="address" type="String">The address of the coin.</ResponseField>
        <ResponseField name="coin" type="String">The asset coin of the coin.</ResponseField>
        <ResponseField name="chain_code" type="String">The chain code of the coin.</ResponseField>
        <ResponseField name="display_code" type="String">Abbreviation (reference only, subject to change)</ResponseField>
        <ResponseField name="description" type="String">Full name (reference only, subject to change)</ResponseField>
        <ResponseField name="balance" type="String">The balance of the coin.</ResponseField>
        <ResponseField name="decimal" type="Int">The decimal of the coin.</ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="nft_data" type="object[]">
      <Expandable title="object">
        <ResponseField name="address" type="String">The address of the coin.</ResponseField>
        <ResponseField name="nft_code" type="String">The NFT code.</ResponseField>
        <ResponseField name="token_id" type="String">The token ID of the NFT.</ResponseField>
        <ResponseField name="contract_address" type="String">The contract address of the NFT.</ResponseField>
        <ResponseField name="balance" type="String">The balance of the NFT.</ResponseField>
        <ResponseField name="chain_code" type="String">The chain code of the coin.</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/list_balances/",
      {
          "coin": "ETH",
          "chain_code": "ETH",
          "page_index": 0,
          "page_length": 50
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/list_balances/', {
      "coin": "ETH",
      "chain_code": "ETH",
      "page_index": 0,
      "page_length": 50
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/list_balances/", map[string]string{
      "coin": "ETH",
      "chain_code": "ETH",
      "page_index": 0,
      "page_length": 50
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
   "success": true,
   "result": {
        "total": 2,
        "coin_data": [
          {
            "address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
            "coin": "ETH",
            "chain_code": "ETH",
            "display_code": "ETH",
            "description": "Ethereum",
            "balance": "49999999999999999986",
            "decimal": 18
          }
        ],
        "nft_data": [
          {
            "nft_code": "NFT_ETH_BLUE_CHURCH",
            "token_id": "200",
            "address": "0xcc656c94b8ec881ddd9611e8ad4a4eca9f859e7b",
            "chain_code": "ETH",
            "contract_address": "0x357fd2942e8ee435d7d21859ecae99bd597d8779",
            "balance": "1"
          }
        ]
   }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Spendable List
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_spendable

GET /v1/custody/mpc/list_spendable/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of spendable unspent transaction outputs (UTXOs) for a given asset coin and address. The response includes the transaction hash, output index, address, amount, and confirmation status of each UTXO.

<Note>This API is only intended for MPC send/receive wallets and does not support MPC web3 wallets.</Note>

#### Request

<ParamField query="coin" type="String" required>The asset coin symbol (e.g. BTC, LTC).</ParamField>
<ParamField query="address" type="String">The address to filter UTXOs by.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="tx_hash" type="String">Transaction hash of the UTXO.</ResponseField>
    <ResponseField name="vout_n" type="Int">Output index of the UTXO.</ResponseField>
    <ResponseField name="address" type="String">Address of the UTXO.</ResponseField>
    <ResponseField name="amount" type="Int">UTXO amount in decimal places (e.g. one bitcoin is divisible to eight decimal places, and 100000000 represents 1 BTC).</ResponseField>
    <ResponseField name="is_coinbase" type="Bool">Whether the UTXO is a coinbase transaction</ResponseField>
    <ResponseField name="confirmed_number" type="Int">Number of confirmations for the UTXO.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/list_spendable/",
      {
          "coin": "BTC",
          "address": ""
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/list_spendable/', {
      "coin": "BTC",
      "address": ""
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/list_spendable/", map[string]string{
      "coin": "BTC",
      "address": ""
  })
  ```
</RequestExample>

<ResponseExample>
  ```json

  {
    "success": true,
    "result": {
      'utxos': [{
        'tx_hash': 'dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83',
        'vout_n': 0,
        'address': '2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE',
        'amount': 100000,
        'is_coinbase': False,
        'confirmed_number': 66716
      }, {
        'tx_hash': 'dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83',
        'vout_n': 1,
        'address': '2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE',
        'amount': 99270,
        'is_coinbase': False,
        'confirmed_number': 66716
      }]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions List
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_transactions

GET /v1/custody/mpc/list_transactions/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by various parameters such as start and end time, transaction status, transaction type, coins, and addresses. The response is a JSON object containing a list of transactions.

#### Request

<ParamField query="start_time" type="Int">≥ start time (unit: milliseconds); details of transactions whose creation times are equal to or later than this timestamp will be returned</ParamField>
<ParamField query="end_time" type="Int">＜ end time (unit: milliseconds); details of transactions whose creation times are earlier than this timestamp will be returned</ParamField>

<ParamField query="status" type="Int">
  | Status Type           | Code |
  | --------------------- | ---- |
  | PENDING\_APPROVAL     | 101  |
  | QUEUED                | 201  |
  | PENDING\_SIGNATURE    | 301  |
  | BROADCASTING          | 401  |
  | BROADCAST\_FAILED     | 402  |
  | PENDING\_CONFIRMATION | 403  |
  | CONFIRMATION          | 501  |
  | REVERTING             | 502  |
  | SUCCESS               | 900  |
  | FAILED                | 901  |
  | REORG                 | 902  |

  <Tip>The 403 status indicates that the transaction has been successfully broadcast but not yet confirmed, while the 501 status indicates that the transaction has been successfully confirmed on the blockchain and is awaiting further confirmations.</Tip>
</ParamField>

<ParamField query="order_by" type="String">sorting method; default: created\_time; other option: modified\_time</ParamField>
<ParamField query="order" type="String">sorting order; options: ASC (default), DESC</ParamField>

<ParamField query="transaction_type" type="Int">
  **only use in non-web3 wallet:**

  | Transaction Type                       | Code |
  | -------------------------------------- | ---- |
  | TYPE\_MPC\_WEB                         | 100  |
  | TYPE\_MPC\_API                         | 102  |
  | TYPE\_RBF\_API\_SPEEDUP                | 103  |
  | TYPE\_RBF\_WEB\_SPEEDUP                | 104  |
  | TYPE\_RBF\_API\_DROP                   | 105  |
  | TYPE\_RBF\_WEB\_DROP                   | 106  |
  | TYPE\_MPC\_TRANSACTION\_FROM\_EXTERNAL | 107  |
  | TYPE\_MPC\_RESEND\_WEB                 | 108  |
  | TYPE\_MPC\_BABYLON\_STAKE              | 500  |
  | TYPE\_MPC\_BABYLON\_STAKE\_RBF         | 501  |
  | TYPE\_FROM\_DEPOSIT                    | 1000 |

  **only use in web3 wallet:**

  | Transaction Type                             | Code |
  | -------------------------------------------- | ---- |
  | TYPE\_MPC\_WEB3\_WEB                         | 300  |
  | TYPE\_MPC\_WEB3\_MMI\_TX                     | 301  |
  | TYPE\_MPC\_WEB3\_API\_TRANSACTION            | 303  |
  | TYPE\_MPC\_WEB3\_TRANSACTION\_FROM\_EXTERNAL | 307  |
  | TYPE\_MPC\_WEB3\_RBF\_API\_SPEEDUP           | 308  |
  | TYPE\_MPC\_WEB3\_RBF\_WEB\_SPEEDUP           | 309  |
  | TYPE\_MPC\_WEB3\_RBF\_API\_DROP              | 310  |
  | TYPE\_MPC\_WEB3\_RBF\_WEB\_DROP              | 311  |
  | TYPE\_FROM\_DEPOSIT                          | 1000 |
</ParamField>

<ParamField query="coins" type="String">coin codes; separated by commas</ParamField>
<ParamField query="from_address" type="String">from address</ParamField>
<ParamField query="to_address" type="String">to address</ParamField>
<ParamField query="limit" type="Int">entries per page; max: 50; default: 50</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="mpc_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/list_transactions/",
      {
          "start_time": "",
          "end_time": "",
          "status": 900,
          "order_by": "",
          "order": "",
          "transaction_type": 303,
          "coins": "",
          "from_address": "",
          "to_address": "",
          "limit": 2
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/list_transactions/', {
      "start_time": "",
      "end_time": "",
      "status": 900,
      "order_by": "",
      "order":"",
      "transaction_type": 303,
      "coins": "",
      "from_address": "",
      "to_address": "",
      "limit": 2
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/list_transactions/", map[string]string{
      "start_time": "",
      "end_time": "",
      "status": 900,
      "order_by": "",
      "order":"",
      "transaction_type": 303,
      "coins": "",
      "from_address": "",
      "to_address": "",
      "limit": 2
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "total": 28,
      "transactions": [
        {
          "cobo_id": "20221219161751000350944000003727",
          "request_id": "1671437866485",
          "status": 900,
          "coin_detail": {
            "coin": "GETH",
            "display_code": "GETH",
            "description": "Ethereum Goerli Testnet",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 32
          },
          "amount_detail": {
            "amount": "10",
            "abs_amount": "0.00000000000000001"
          },
          "fee_detail": {
            "fee_coin_detail": {
              "coin": "GETH",
              "display_code": "GETH",
              "description": "Ethereum Goerli Testnet",
              "decimal": 18,
              "can_deposit": True,
              "can_withdraw": True,
              "confirming_threshold": 32
            },
            "gas_price": 99609,
            "gas_limit": 21000,
            "fee_used": 2091789000
          },
          "source_addresses": null,
          "from_address": "0x2a7670f4e84fe06a26ea1aa6bcdd23f03b3bbfc1",
          "to_address": "0xEEACb7a5e53600c144C0b9839A834bb4b39E540c",
          "tx_hash": "0x224cd23f20a8dfbbe5418871f6a32ddee4463b31e77b5090e7efff1bd8bb6b74",
          "vout_n": 0,
          "nonce": 0,
          "confirmed_number": 32,
          "replace_cobo_id": "",
          "transaction_type": 303,
          "operation": 100,
          "block_detail": {
            "block_hash": "0x5d74fb7415f10d5308599c0ca037e622da7aea75cb5e0af20d492f9d5e8150ab",
            "block_height": 8162134,
            "block_time": 1671438048000
          },
          "tx_detail": {
            "tx_hash": "0x224cd23f20a8dfbbe5418871f6a32ddee4463b31e77b5090e7efff1bd8bb6b74"
          },
          "extra_parameters": "",
          "created_time": 1671437871175,
          "updated_time": 1671438549853,
          "failed_reason": null,
          "max_priority_fee": null,
          "max_fee": null,
          "approval_process": {"spender_result": 1, "spender_review_threshold": 1, "spender_status": [{"spender_person": "Cobo_Test_spender", "status": "approve"}], "spender_complete_time": 1681906749496, "approver_result": 1, "approver_review_threshold": 1, "approver_status": [{"approve_person": "Cobo_Test_approver", "status": "approve"}], "approver_complete_time": 1681906758619},
          "remark": "",
          "gas_station_child_id": ""
        },
        {
          "cobo_id": "20221219192126000352912000006483",
          "request_id": "test_002",
          "status": 900,
          "coin_detail": {
            "coin": "GETH",
            "display_code": "GETH",
            "description": "Ethereum Goerli Testnet",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 32
          },
          "amount_detail": {
            "amount": "1",
            "abs_amount": "0.000000000000000001"
          },
          "fee_detail": {
            "fee_coin_detail": {
              "coin": "GETH",
              "display_code": "GETH",
              "description": "Ethereum Goerli Testnet",
              "decimal": 18,
              "can_deposit": True,
              "can_withdraw": True,
              "confirming_threshold": 32
            },
            "gas_price": 4362985,
            "gas_limit": 21000,
            "fee_used": 91622685000
          },
          "source_addresses": null,
          "from_address": "0x2a7670f4e84fe06a26ea1aa6bcdd23f03b3bbfc1",
          "to_address": "0xEEACb7a5e53600c144C0b9839A834bb4b39E540c",
          "tx_hash": "0x532770380f9418849782fb01f5b62189d44b999b153767fee26ade7592b89888",
          "vout_n": 0,
          "nonce": 1,
          "confirmed_number": 33,
          "replace_cobo_id": "",
          "transaction_type": 303,
          "operation": 0,
          "block_detail": {
            "block_hash": "0x779a310c97d50d8c49e417d5518132221a7052ce3dfe7df5c2857444235b98fc",
            "block_height": 8162891,
            "block_time": 1671449160000
          },
          "tx_detail": {
            "tx_hash": "0x532770380f9418849782fb01f5b62189d44b999b153767fee26ade7592b89888"
          },
          "extra_parameters": "",
          "created_time": 1671448916625,
          "updated_time": 1671449659725,
          "failed_reason": null,
          "max_priority_fee": null,
          "max_fee": null,
          "approval_process": {"spender_result": 1, "spender_review_threshold": 1, "spender_status": [{"spender_person": "Cobo_Test_spender", "status": "approve"}], "spender_complete_time": 1681906749496, "approver_result": 1, "approver_review_threshold": 1, "approver_status": [{"approve_person": "Cobo_Test_approver", "status": "approve"}], "approver_complete_time": 1681906758619},
          "remark": "",
          "memo": "",
          "gas_station_child_id": ""
        }
      ]
    }
  }


  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Update Address Description
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_update_address_description

POST /v1/custody/mpc/update_address_description/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint updates the address description. The response contains the updated address along with their IDs, HD paths, encodings and description.

#### Request

<ParamField body="coin" type="String" required>The coin code for which the address are to be updated.</ParamField>
<ParamField body="address" type="String" required>The address to be updated.</ParamField>
<ParamField body="description" type="String" required>The address description.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="id" type="String">The ID of the generated address.</ResponseField>
    <ResponseField name="address" type="String">The generated address.</ResponseField>
    <ResponseField name="hd_path" type="String">The HD path of the generated address.</ResponseField>
    <ResponseField name="encoding" type="Int">The encoding of the generated address.For more information, please [refer to](/v1/api-references/development/address-encoding) the enum value corresponding to each encoding</ResponseField>
    <ResponseField name="description" type="String">The address description.</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/update_address_description/",
      {
          "coin": "ETH",
          "address": "0x43dbf416b77e12eef9b3b036a503638a0bb13f8f",
          "description": "TestAddress01"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/update_address_description/', {
      "coin": "ETH",
      "address": "0x43dbf416b77e12eef9b3b036a503638a0bb13f8f",
      "description": "TestAddress01"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 5));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/update_address_description/", map[string]string{
      "coin": "ETH",
      "address": "0x43dbf416b77e12eef9b3b036a503638a0bb13f8f",
      "description": "TestAddress01"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
   "success": true,
   "result": {
  	"id": 831483763545608598,
  	"address": "0x43dbf416b77e12eef9b3b036a503638a0bb13f8f",
  	"encoding": 0,
  	"hd_path": "m/44/60/0/0/0",
  	"description": "TestAddress01"
   }
  }


  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Authentication
Source: https://cobo.com/developers/v1/api-references/overview/authentication

WaaS API Authentication

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Introduction

This article explains how Cobo's WaaS Service authenticates API clients.
If you are using one of the five WaaS SDKs provided by Cobo, you can skip this
article because the SDKs already encapsulate the authentication mechanism for
you. If you don't use the SDKs, you would have to implement the authentication
by yourself, this article explains how.

Cobo API Key authentication requires each request to be signed except public API interfaces.

The data needs to be signed as the following:

```
HTTP_METHOD + |  +  HTTP_REQUEST_PATH + | + TIMESTAMP + | + PARAMS
```

The API signature should sign data with ECDSA signature after connection and sign the bytes with hex encoding.

<aside class="notice">
  Each component is defined as follows
</aside>

## HTTP HOST

* Development: [https://api.dev.cobo.com](https://api.dev.cobo.com)
* Production: [https://api.cobo.com](https://api.cobo.com)

## HTTP\_METHOD

Capitalized GET or POST. **Please note: Cobo doesn’t accept JSON payloads in HTTP POST. Please use form-data.**

## HTTP\_REQUEST\_PATH

The PATH part of the URL request. For example: /v1/test/
in [https://api.dev.cobo.com/v1/test/](https://api.dev.cobo.com/v1/test/).

## NONCE

The UNIX EPOCH timestamp when calling the API is in milliseconds.

## PARAMS

If the parameters are:

```
{
  "username": "username",
  "password": "password"
}
```

After sorting the key with alphabet:
`password=password`
`username=username`

Because "p" is sorted before "u" in the alphabet, "password" should be placed before "username" and then connected as
follows:
`password=password&username=username`

API parameters are key-value string pairs. Parameters need to be normalized before signing. The rule is as follows:

1. Sort parameters by keys alphabetically.
2. Transform each parameter to a string in the format of “key=value”.
3. Connect the strings with &.

## Example

For the following requests:

| Method | URL                                                                                    | Nonce         |
| ------ | -------------------------------------------------------------------------------------- | ------------- |
| POST   | [https://api.dev.cobo.com/v1/custody/test/](https://api.dev.cobo.com/v1/custody/test/) | 1537498830736 |

Paremeters

| Parameter | Value   |
| --------- | ------- |
| type      | limit   |
| side      | buy     |
| amount    | 100.0   |
| price     | 100.0   |
| symbol    | btcusdt |

Data to be prepared before signing are as follows:

```
POST|/v1/custody/test/|1537498830736|amount=100.0&price=100.0&side=buy&symbol=btcusdt&type=limit
```

Apply your locally generated API Secret to sign the data with ECDSA signature, and hex encode binary results to create
the final signature for API server verification. (See Cobo
examples: [https://github.com/CoboGlobal/](https://github.com/CoboGlobal/) )

HEADER FIELDS

* **BIZ-API-KEY**
  This field contains the API key.
* **BIZ-API-SIGNATURE**
  This field contains the signature.
* **BIZ-API-NONCE**
  This field contains the nonce.

Fill the Header with API Key, Nonce and signature on the right field to pass signature verification.

If you want to check Cobo pubkey to verify Cobo signature, please go to: Web management platform - Wallet - API
Callback. (NOTICE they're different in Development\&Production environment)

The following content is to use the SDK to authorize.

## Create API key

To ensure secure access to your crypto assets under Cobo Custody via APIs,
Cobo mandates the use of ECDSA signatures for authentication in all API calls.
Access to the API is denied without proper authentication.

Generate and manage API keys effortlessly using the Cobo-provided SDK ([here](https://github.com/CoboGlobal)).
Here's a sample Python SDK:

```python Python
from cobo_custody.signer.local_signer import generate_new_key
api_secret, api_key = generate_new_key()
print(api_secret)
print(api_key)
```

<Warning>
  api\_secret is your private key and should be stored securely.

  api\_key is your public key and needs to be set in your custody account.
</Warning>

## Test API Key

Once you've added your API key to your Custody account (see [How to set API key on Custody in the quickstart section](/v1/get-started/overview/full-custody-quick-start#api-integration)),
we provide two methods to test whether your API key has been configured successfully.

**Test API key by SDKs:**

```python Python
signer = LocalSigner("YOUR_API_SECRET")
client = Client(signer=signer, env=DEV_ENV, debug=True)
res = client.get_account_info()
```

<Accordion title="View Response">
  ```json
  {
    "success": true,
    "result": {
      "name": "cobo_test",
      "assets": [
        {
          "coin": "ADA",
          "display_code": "ADA",
          "description": "Cardano",
          "decimal": 6,
          "can_deposit": true,
          "can_withdraw": true,
          "require_memo": false,
          "balance": "29880892",
          "abs_balance": "29.880892",
          "fee_coin": "ADA",
          "abs_estimate_fee": "1",
          "confirming_threshold": 9,
          "dust_threshold": 1000000,
          "token_address": ""
        },
        {
          "coin": "ALGO",
          "display_code": "ALGO",
          "description": "Algorand",
          "decimal": 6,
          "can_deposit": true,
          "can_withdraw": true,
          "require_memo": false,
          "balance": "8359337",
          "abs_balance": "8.359337",
          "fee_coin": "ALGO",
          "abs_estimate_fee": "0.8",
          "confirming_threshold": 12,
          "dust_threshold": 1,
          "token_address": ""
        }
      ]
    }
  }
  ```
</Accordion>

<br />

**Test API key by Playground:**

We also provide an exciting API interaction tool called Playground,
which makes testing APIs a breeze. To learn how to use Playground, refer to the [Interactive API Playground](/v1/api-references/overview/playground) section.

<br />

## SDKS

<CardGroup cols={3}>
  <Card title="Java" icon="java" color="#ea5a0c" href="/v1/sdks-and-tools/sdks/waas/java" />

  <Card title="PHP" icon="php" color="#0285c7" href="/v1/sdks-and-tools/sdks/waas/php" />

  <Card title="Python" icon="python" color="#16a34a" href="/v1/sdks-and-tools/sdks/waas/python" />

  <Card title="JavaScript" icon="js" color="#dc2626" href="/v1/sdks-and-tools/sdks/waas/javascript" />

  <Card title="Go" icon="golang" color="#dc2626" href="/v1/sdks-and-tools/sdks/waas/go" />
</CardGroup>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# API Playground
Source: https://cobo.com/developers/v1/api-references/overview/playground

Explore API endpoints directly in your browser with our API Playground

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Introduction

The interactive API Playground is a feature designed specifically for developers who require quick understanding of API responses,
enabling them to browse and interact with the endpoints.
**To use this feature, you must first create a Cobo Custody account in the development environment and use the corresponding API Key.**
Kindly note that accounts and API Keys\* from the production environment are not compatible with the API Playground.

Once your account is set up in the development environment, you'll need to configure the corresponding API-KEY and API-SECRET.
This article provides a step-by-step guide on how to complete these setup processes.
Before you proceed, kindly make sure that you have already completed the following prerequisites:

1. Created a Cobo Custody account in the development environment
2. Successfully generated an API-KEY and an API-SECRET
3. Successfully added your API-KEY on the Cobo Custody Web platform

<Warning>For security reasons, please NEVER input your API Secret from the production environment while using the API Playground.</Warning>

## How to Use API Playground

**1. Locate the API endpoint you wish to test:**

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/playground1.png" />

**2. Enter your private key into the "API-SECRET" field:**

<Warning>API Playground only supports the development environment. For security reasons, NEVER input your API Secret from the production environment while using the API Playground.</Warning>

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/playground2.png" />

**3. Enter the API parameters:**

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/playground3.png" />

**4. Click the "Send Request" button to receive API responses directly.**

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/playground4.png" />

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Build your first wallet application with Cobo in 10 minutes
Source: https://cobo.com/developers/v1/get-started/overview/first-wallet-tutorial



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

This article provides an end-to-end demonstration of creating a crypto wallet application for your platform or exchange. Throughout the article, you will learn::

1. How to initialize RestClients with Cobo SDKs.
2. How to create your first deposit address.
3. How to retrieve transaction information.
4. How to make withdraw transactions.

#### Before you start:

Make sure you have finished your wallet setup based on [Quickstart](/v1/get-started/overview/quickstart). Before writing your first demo, make sure that the following actions have been completed:

1. You have pulled your preferred [SDK](/v1/sdks-and-tools/sdks/waas/python) for development.
2. You have completed [key pair generation](/v1/sdks-and-tools/sdks/waas/python#generate-key-pair) for API Authentication.
3. You have added your API Key to your [Custodial Wallet](/v1/get-started/overview/full-custody-quick-start#api-integration),
   [MPC Co-managed Wallet](/v1/get-started/overview/mpc-quick-start#api-integration),
   or [MPC Lite Wallet](/v1/get-started/overview/mpc-lite-quick-start#api-integration).

### Initialize

Cobo SDKs have packaged RestClients to interact with Cobo Wallet-as-a-Service APIs. To start, you need to initialize these Clients
as well as the ApiSigner for API Authentication.

**Custodial Wallet**

<CodeGroup>
  ```python Python
  from cobo_custody.client import Client
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner

  # input your API SECRET
  signer = LocalSigner("YOUR_API_SECRET")
  client = Client(signer=signer, env=DEV_ENV, debug=True)
  ```

  ```java Java
  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboApiRestClient;
  import com.cobo.custody.api.client.config.CoboApiConfig;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.impl.LocalSigner;

  CoboApiRestClient client = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEV,
                  false).newRestClient();

  ```
</CodeGroup>

<br />

**MPC Wallet**

<CodeGroup>
  ```python Python
  from cobo_custody.client import MPCClient
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner

  # input your API SECRET
  signer = LocalSigner("YOUR_API_SECRET")
  mpc_client = MPCClient(signer=signer, env=DEV_ENV, debug=True)
  ```

  ```java Java
  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.CoboApiConfig;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.impl.LocalSigner;

  CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEV,
                  false).newMPCRestClient();

  ```
</CodeGroup>

<br />

<Card title="Use the correct Client and Environment" icon="lightbulb" iconType="duotone" color="#ca8b04">
  `Client` is for custodial wallet, `MPCClient` is for MPC Co-managed and MPC Lite wallet.<br />
  `DEV_ENV` is development environment, `PROD_ENV` is for production environment.
</Card>

### Create your first deposit address

Now you are able to create your first deposit address. Let us take Goerli ETH as an example. Please make sure that you or your admin
have added `GETH` in the wallet. To verify, you can use [Get Account Details](/v1/api-references/custody-wallet/org_info)
for Custodial Wallet or [Get Wallet Supported Coins](/v1/api-references/mpc-wallet/mpc_get_wallet_supported_coins) for MPC Wallets.

**Cusotidal Wallet**

<CodeGroup>
  ```python Python
  response = client.get_account_info()
  ```

  ```java Java
  ApiResponse<OrgInfo> orgInfo = client.getOrgInfo();
  ```
</CodeGroup>

**MPC Wallet**

<CodeGroup>
  ```python Python
  response = mpc_client.get_wallet_supported_coins()
  ```

  ```java Java
  ApiResponse<MPCCoins> getSupportedCoinsResponse = mpcClient.getWalletSupportedCoins();
  ```
</CodeGroup>

<br />

<Accordion title="View Response">
  ```json
  {
    "success": true,
    "result": {
      "name": "Your Account",
      "assets": [
        {
          "coin": "GETH",
          "display_code": "GETH",
          "description": "Ethereum Goerli Testnet",
          "decimal": 18,
          "can_deposit": true,
          "can_withdraw": true,
          "require_memo": false,
          "minimum_deposit_threshold": "0",
          "balance": "8765237351068000",
          "abs_balance": "0.008765237351068",
          "fee_coin": "GETH",
          "abs_estimate_fee": "0.000000000385476",
          "abs_estimate_fee_usd": "0.00",
          "confirming_threshold": 64,
          "dust_threshold": 1,
          "token_address": ""
        },
      ]
    }
  }
  ```
</Accordion>

If `GETH` is already available, you can create your first deposit address:
**Cusotidal Wallet**

<CodeGroup>
  ```python Python
  response = client.new_deposit_address("GETH")
  ```

  ```java Java
  ApiResponse<NewAddresses> newAddresses = client.newAddresses("GETH", 1, false);
  ```
</CodeGroup>

<br />

**MPC Wallet**

<CodeGroup>
  ```python Python
  response = mpc_client.generate_addresses("GETH",1)
  ```

  ```java Java
  ApiResponse<MPCAddressList> generateAddressResponse = mpcClient.generateAddresses("GETH", 1);
  ```
</CodeGroup>

<br />

<Accordion title="View Response">
  ```json
  {
    "success": true,
    "result": {
      "coin": "GETH",
      "address": "0xec323f3743b96e020c234c216fa650f96b66fc9d"
    }
  }
  ```
</Accordion>

### Check your first deposit transaction

You can make a deposit transaction to your newly created `GETH` address from an external address.
After that, you can query the transaction by latest transaction time.

**Cusotidal Wallet**

<CodeGroup>
  ```python Python
  response = client.get_transactions_by_time(side="deposit", limit="1")
  ```

  ```java Java
  ApiResponse<List<Transaction>> getTransactionsByTime = client.getTransactionsByTime(null, Side.Deposit, null, 0, 0, 1, null);
  ```
</CodeGroup>

<br />

**MPC Wallet**

<CodeGroup>
  ```python Python
  response = mpc_client.list_transactions(transaction_type=1000, order_by="created_time", order="DESC", limit=1)
  ```

  ```java Java
  ApiResponse<MPCTransactions> listTransactionsResponse = mpcClient.listTransactions(null, null, null, "created_time", "DESC", 1000, null, null, null, 1);
  ```
</CodeGroup>

<br />

<Accordion title="View Response">
  ```json
  {
    "success": true,
    "result": [
      {
        "id": "20230720143713000129950000008444",
        "coin": "GETH",
        "display_code": "GETH",
        "description": "Ethereum Goerli Testnet",
        "decimal": 18,
        "address": "0xe41f750d651d0385896704112f22e4a645ba454e",
        "source_address": "0xda4d48e9b9492999def195ef620af17d35ce65e0",
        "side": "deposit",
        "amount": "10000000000000000",
        "abs_amount": "0.01",
        "txid": "0x27cdd4750fc9a873ae62a7d0466ceaf40946d1e1bedd7dbe521a9a72a5851020",
        "vout_n": 0,
        "request_id": null,
        "status": "success",
        "abs_cobo_fee": "0",
        "created_time": 1689835033529,
        "last_time": 1689835033529,
        "confirmed_num": 34,
        "tx_detail": {
          "txid": "0x27cdd4750fc9a873ae62a7d0466ceaf40946d1e1bedd7dbe521a9a72a5851020",
          "blocknum": 9375296,
          "blockhash": "0xd7c3562bf373d126959adb4fa376b10eb9104c1e47807d8df1ab53d34008d045",
          "hexstr": ""
        },
        "source_address_detail": "0xda4d48e9b9492999def195ef620af17d35ce65e0",
        "confirming_threshold": 64,
        "type": "external"
      }
    ]
  }
  ```
</Accordion>

You may find other different ways of transaction query in API References: [Custodial Wallet](/v1/api-references/custody-wallet/transaction). [MPC Wallet](/v1/api-references/mpc-wallet/mpc_list_transactions).

### Make your first withdraw transaction

BBefore making the withdraw, you may want to find out the transaction fees. In Custodial Wallet, `abs_estimate_fee` in [Get Coin Details](/v1/api-references/custody-wallet/coin_info)
indicates the withdraw fees in `fee_coin`. In MPC Wallets, `gas_price` in [Get Estimate Fee](/v1/api-references/mpc-wallet/mpc_estimate_fee)
indicates the on-chain real-time transaction fees.

**Cusotidal Wallet**

<CodeGroup>
  ```python Python
  response = client.get_coin_info("GETH")
  print(f"Get Estimated Fee: {response.result['abs_estimate_fee']}")
  ```

  ```java Java
  ApiResponse<CoinInfo> getCoinInfo =client.getCoinInfo("GETH");
  System.out.println("getAbsEstimateFee:" + getCoinInfo.getResult().getAbsEstimateFee());
  ```
</CodeGroup>

<br />

<Accordion title="View Response - Custodial Wallet">
  ```json
  {
    "success": true,
    "result": {
      "coin": "GETH",
      "display_code": "GETH",
      "description": "Ethereum Goerli Testnet",
      "decimal": 18,
      "can_deposit": true,
      "can_withdraw": true,
      "require_memo": false,
      "minimum_deposit_threshold": "0",
      "balance": "8765237351068000",
      "abs_balance": "0.008765237351068",
      "fee_coin": "GETH",
      "abs_estimate_fee": "0.000000000385476",
      "abs_estimate_fee_usd": "0.00",
      "confirming_threshold": 64,
      "dust_threshold": 1,
      "token_address": ""
    }
  }
  ```
</Accordion>

**MPC Wallet**

<CodeGroup>
  ```python Python
  response = mpc_client.estimate_fee("GETH",1,"To_Address")
  ```

  ```java Java
  ApiResponse<EstimateFeeDetails> estimateFeeResponse = mpcClient.estimateFee(coin, withdraw_amount, fromAddr, null,
                  null, null, null, null, null, null);
  ```
</CodeGroup>

<br />

<Accordion title="View Response - MPC Wallets">
  ```json
  {
    "success": true,
    "result": {
      "fee_coin": "GETH",
      "fee_decimal": 18,
      "slow": {
        "fee_per_byte": 0,
        "fee_amount": 0,
        "gas_price": 18354,
        "gas_limit": 21000
      },
      "average": {
        "fee_per_byte": 0,
        "fee_amount": 0,
        "gas_price": 18354,
        "gas_limit": 21000
      },
      "fast": {
        "fee_per_byte": 0,
        "fee_amount": 0,
        "gas_price": 36708,
        "gas_limit": 21000
      }
    }
  }
  ```
</Accordion>

Now you can create your first withdraw transaction, please use UUID for `request_id` to prevent any confusion in future reconcilation. From address is required in MPC wallets whereas exampted in Custodial wallet. Meanwhile, pay attention to `amount` value and `decimal` format of each coin (amount = abs\_amount\*10^decimal).
<br /> Here is an example of withdrawing 0.01 GETH to an external account:

**Cusotidal Wallet**

<CodeGroup>
  ```python Python
  request_id = f"request_id_{sha256(address.encode()).digest().hex()[:8]}_{str(int(time.time() * 1000))}"
  response = client.withdraw("GETH","To_addres","10000000000000000",request_id)
  ```

  ```java Java
  String requestId = String.valueOf(System.currentTimeMillis());
  ApiResponse<String> withdraw = client.withdraw("GETH",requestId,"toAddr","10000000000000000", null, null, null);
  ```
</CodeGroup>

<br />

**MPC Wallet**

<CodeGroup>
  ```python Python
  request_id = f"request_id_{sha256(address.encode()).digest().hex()[:8]}_{str(int(time.time() * 1000))}"
  response = mpc_client.create_transaction("GETH",request_id,"From_address","To_Address","10000000000000000")
  ```

  ```java Java
  String requestId = String.valueOf(System.currentTimeMillis());
  ApiResponse<MPCPostTransaction> createTransactionResponse = mpcClient.createTransaction("GETH", requestId, "10000000000000000", "fromAddr", "toAddr",
                  toAddressDetails, fee, gasPrice, gasLimit, operation, extraParameters, null, null, null);
  ```
</CodeGroup>

<br />

Then you may use the `request_id` to query the transaction status. Please note that the transaction will only be confirmed once the on-chain confirmation blocks reach `confirming_threshold`.
Before that, you may use the [GET /v1/custody/pending\_transactions/](/v1/api-references/custody-wallet/pending_transactions)
endpoint to query the details of a pending transaction under a Custodial Wallet. For an MPC Wallet, you may refer to the `status` field with code 501 PENDING\_CONFIRMATION in [any transactional APIs](/v1/api-references/mpc-wallet/mpc_list_transactions) to retrieve the details of a pending transaction.
Prior to using any endpoints, however, you need to first head to Cobo Custody Web and enable the ["Transaction Notification - Includes Block Confirmation Number"](/v1/api-references/development/transaction-notification) Status feature.
Failure to enable this feature will result in the inability to fetch transaction information. Do note that some transactions cannot be retrieved due to fast on-chain confirmations (e.g., TRON).

**Cusotidal Wallet**

<CodeGroup>
  ```python Python
  response = client.get_transactions_by_request_ids(request_ids="your request_id")
  ```

  ```java Java
  ApiResponse<List<Transaction>> getTransactionsByRequestIds = client.getTransactionsByRequestIds("your requestId");
  ```
</CodeGroup>

<br />

**MPC Wallet**

<CodeGroup>
  ```python Python
  response = mpc_client.transactions_by_request_ids("your request_id")
  ```

  ```java Java
  ApiResponse<MPCTransactionInfos> transactionsByRequestIdsResponse = mpcClient.transactionsByRequestIds("your requestId", null);
  ```
</CodeGroup>

<br />

Congratulations! You have successfully created your first wallet application with Cobo Wallet-as-a-Service.

### Code Samples

The sample codes are for reference only. Please use [Cobo SDKs](https://github.com/CoboGlobal/) for your development.

<Tip> Note: The code samples for Custodial Wallet and MPC Wallet are different. </Tip>

**Custodial Wallet**

<CodeGroup>
  ```python Python
  from cobo_custody.client import Client
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time

  api_secret = "your_api_secret"  # Your wallet api secret
  coin_code = "GETH"  # Your testing coin
  amount = 10000000000000000  # Withdraw amount：0.01GETH
  to_address = "your address"  # Your external address

  # Initialize Cobo Client
  client = Client(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # Check if GETH has been added in your wallet
  response = client.get_coin_info(coin=coin_code)
  print(f"Get Coin Info: {response.result}")

  # Create GETH address
  response = client.new_deposit_address(coin=coin_code)
  print(f"New Deposit Address: {response.result}")

  # Get deposit transaction
  response = client.get_transactions_by_time(side="deposit", limit="1")
  print(f"Get Transactions By Time: {response.result}")

  # Get estimated withdraw fee
  response = client.get_coin_info(coin=coin_code)
  print(f"Get Estimated Fee: {response.result['abs_estimate_fee']}")

  # Withdraw 0.01GETH
  request_id = f"ApiTransaction-{int(time.time() * 1000)}"    # Your custom request_id
  response = client.withdraw(
      coin=coin_code,
      request_id=request_id,
      amount=amount,
      address=to_address,
  )
  print(f"Withdraw: {response.result}")

  # Get transaction by request_id
  response = client.get_transactions_by_request_ids(request_ids=request_id)
  print(f"Get Transactions By Request Ids： {response.result}")

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigInteger;
  import java.util.List;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.account.CoinInfo;
  import com.cobo.custody.api.client.domain.account.NewAddresses;
  import com.cobo.custody.api.client.domain.transaction.Side;
  import com.cobo.custody.api.client.domain.transaction.Transaction;


  public class CoboApiExample {
      public static void main(String[] args) {
          String apiSecret = "your_api_secret";  // Your wallet api secret
          String coin = "GETH";  // Your testing coin
          String requestId = String.valueOf(System.currentTimeMillis());  // Your custom request_id
          String toAddr = "your_address";  // Your external address
          BigInteger withdraw_amount = new BigInteger("10000000000000000");  // Withdraw amount：0.01GETH

          // Initialize Cobo Client
          CoboApiRestClient client = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEV,
                  false).newRestClient();

          // Check if GETH has been added in your wallet
          ApiResponse<CoinInfo> response = client.getCoinInfo(coin);
          System.out.println("getCoinInfo:" + response.getResult());

          // Create GETH address
          ApiResponse<NewAddresses> newAddresses = client.newAddresses(coin, 1, false);
          System.out.println("generateAddresses:" + newAddresses.getResult());

          // Get deposit transaction
          ApiResponse<List<Transaction>> getTransactionsByTime = client.getTransactionsByTime(null, Side.Deposit, null, 0, 0, 1, null);
          System.out.println("getTransactionsByTime: " + getTransactionsByTime.getResult());

          // Get estimated withdraw fee
          ApiResponse<CoinInfo> getCoinInfo = client.getCoinInfo(coin);
          System.out.println("getAbsEstimateFee:" + getCoinInfo.getResult().getAbsEstimateFee());

          // Withdraw 0.01GETH
          ApiResponse<String> withdraw = client.withdraw(
              coin,
              requestId,
              toAddr,
              withdraw_amount,
              null,
              null,
              null
          );
          System.out.println("withdraw：" + withdraw.getResult());

          // Get transaction by request_id
          ApiResponse<List<Transaction>> getTransactionsByRequestIds = client.getTransactionsByRequestIds(requestId);
          System.out.println(getTransactionsByRequestIds.getResult());
      }
  }

  ```
</CodeGroup>

<br />

**MPC Wallet**

<CodeGroup>
  ```python Python
  from cobo_custody.client.mpc_client import MPCClient
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time


  api_secret = "your api secret"  # Your wallet api secret
  chain_code = "GETH"  # Your testing chain
  coin_code = "GETH"  # Your testing coin
  amount = "10000000000000000"  # Withdraw amount：0.01GETH
  from_address = "your mpc wallet address"  # Your MPC wallet address
  to_address = "your address"  # Your external address

  # Initialize Cobo Client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # Check if GETH has been added in your wallet
  response = mpc_client.get_wallet_supported_coins()
  geth_coin_found = any(coin['coin'] == coin_code for coin in response.result['coins'])
  is_coin_added = f"{coin_code} supports deposits and withdrawals." if geth_coin_found \
      else f"Your wallet does not have the {coin_code} coin. Please configure it on Cobo Custody Web."
  print(is_coin_added)

  # Create GETH address
  response = mpc_client.generate_addresses(chain_code=chain_code, count=1)
  print(f"New Deposit Address: {response.result}")

  # Get deposit transaction
  response = mpc_client.list_transactions(transaction_type=1000, order_by="created_time", order="DESC", limit=1)
  print(f"Get Transactions By Time: {response.result}")

  # Get estimated gas fee
  response = mpc_client.estimate_fee(coin=coin_code, amount=1, address=to_address)
  print(f"Get Estimated Gas Fee: {response.result}")

  # Withdraw 0.01GETH
  request_id = f"MPCTransaction-{int(time.time() * 1000)}"  # Your custom request_id
  response = mpc_client.create_transaction(
      coin=coin_code,
      request_id=request_id,
      amount=amount,
      from_addr=from_address,
      to_addr=to_address,
  )
  print(f"Withdraw: {response.result}")

  # Get transaction by request_id
  response = mpc_client.transactions_by_request_ids(request_id)
  print(f"Get Transactions By Request Ids： {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.account.MPCAddressList;

  import com.cobo.custody.api.client.domain.account.MPCCoins;
  import com.cobo.custody.api.client.domain.transaction.EstimateFeeDetails;
  import com.cobo.custody.api.client.domain.transaction.MPCPostTransaction;

  import com.cobo.custody.api.client.domain.transaction.MPCTransactionInfos;
  import com.cobo.custody.api.client.domain.transaction.MPCTransactions;


  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
          String apiSecret = "your_api_secret";  // Your wallet api secret
          String coin = "GETH";  // Your testing coin
          String chain_code = "GETH";  // Your testing chain
          String requestId = String.valueOf(System.currentTimeMillis());  // Your custom request_id
          String fromAddr = "your_mpc_wallet_address";  // Your MPC wallet address
          String toAddr = "your address";  // Your external address
          BigInteger withdraw_amount = new BigInteger("10000000000000000");  // Withdraw amount：0.01GETH
          String toAddressDetails = null;
          BigDecimal fee = null;
          BigInteger gasPrice = null;
          BigInteger gasLimit = null;
          Integer operation = null;
          String extraParameters = null;

          // Initialize Cobo Client
          CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEV,
                  false).newMPCRestClient();

          // Check if GETH has been added to your wallet
          ApiResponse<MPCCoins> getSupportedCoinsResponse = mpcClient.getSupportedCoins(coin);
          System.out.println("GetSupportedCoins: " + getSupportedCoinsResponse.getResult());

          // Create GETH address
          ApiResponse<MPCAddressList> generateAddressResponse = mpcClient.generateAddresses(chain_code, 1);
          System.out.println("Generated Address: " + generateAddressResponse.getResult());

          // Get deposit transaction
          ApiResponse<MPCTransactions> listTransactionsResponse = mpcClient.listTransactions(null, null, null, "created_time", "DESC", 1000, null, null, null, 1);
          System.out.println("Deposit Transactions: " + listTransactionsResponse.getResult());

          // Get estimated gas fee
          ApiResponse<EstimateFeeDetails> estimateFeeResponse = mpcClient.estimateFee(coin, withdraw_amount, fromAddr, null,
                  null, null, null, null, null, null);
          System.out.println("Estimated Gas Fee: " + estimateFeeResponse.getResult());

          // Withdraw 0.01GETH
          ApiResponse<MPCPostTransaction> createTransactionResponse = mpcClient.createTransaction(coin, requestId, withdraw_amount, fromAddr, toAddr,
                  toAddressDetails, fee, gasPrice, gasLimit, operation, extraParameters, null, null, null);
          System.out.println("Withdraw: " + createTransactionResponse.getResult());

          // Get transaction by request_id
          ApiResponse<MPCTransactionInfos> transactionsByRequestIdsResponse = mpcClient.transactionsByRequestIds(requestId, null);
          System.out.println("Transactions by Request ID: " + transactionsByRequestIdsResponse.getResult());
      }
  }
  ```
</CodeGroup>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Full Custody
Source: https://cobo.com/developers/v1/get-started/overview/full-custody-quick-start



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_001.png)

## Account Opening

To use Cobo Full Custody, you will need to create an account with Cobo first. Please [contact Cobo](mailto:sales@cobo.com) to request an invitation email if you do not have an account yet.

To improve security, you will need to download Google Authenticator (GA) on your mobile device. To complete the setup, please use your GA to scan the QR code displayed on the Cobo Custody Web.

<div className="w-full flex items-center justify-center">
  <img width="400" src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_002.png" />
</div>

You are also required to install Cobo Guard, which is a dedicated mobile application that leverages cutting-edge Trusted Execution Environment (TEE) technologies for secure authentication, risk control verification, and MPC-TSS key share management. It provides robust protection for your account, particularly during critical actions such as withdrawals and risk policy adjustments. Currently, Cobo Guard only supports the iOS system. The app is compatible with iPhone 5s and newer models, and the operating system must be iOS 13.0 or later. Prior to installation, kindly make sure that your mobile device meets the aforementioned requirements.

To download Cobo Guard (development environment) from TestFlight, [click here](https://testflight.apple.com/join/pcSF46JK?ref=cobo-institutional-digital-asset-custody-provider). Please be advised that Cobo Guard downloaded from the Apple Store will only be compatible with the production environment.

After downloading Cobo Guard, you need to click on the scan icon on the top-right corner of your Cobo Guard to scan the QR code displayed on the Cobo Custody Web.

<div className="w-full flex items-center justify-center">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_003.png" width="400" />
</div>

On the Cobo Custody Web, you can invite more team members to your org. To do so, head to Settings > Teams > Invite Users. Note that your invitees will also need to follow the aforementioned steps for setup and authentication.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_004.png" />

## Wallet Setup

You can now proceed to create a Full Custody wallet on the Cobo Custody Web. To add coins to your wallet, simply click "+Add Coins'' and then search for your preferred coin types. Currently, Cobo Custody Web supports four mainnets (BTC, ETH, TRON, XRP) and two testnets (GETH, XTN).

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_005.png" />

<Warning>
  Please make sure that you have added coins to your Full Custody wallets first before making any API calls.
</Warning>

## API Integration

If you are using APIs, please first choose an appropriate SDK from Cobo’s GitHub repository. Cobo Custody provides SDKs in five programming languages - Java, PHP, Python, JavaScript and Go.

<CardGroup cols={3}>
  <Card title="Java" icon="java" color="#ea5a0c" href="/v1/sdks-and-tools/sdks/waas/java" />

  <Card title="PHP" icon="php" color="#0285c7" href="/v1/sdks-and-tools/sdks/waas/php" />

  <Card title="Python" icon="python" color="#16a34a" href="/v1/sdks-and-tools/sdks/waas/python" />

  <Card title="JavaScript" icon="js" color="#dc2626" href="/v1/sdks-and-tools/sdks/waas/javascript" />

  <Card title="Go" icon="golang" color="#dc2626" href="/v1/sdks-and-tools/sdks/waas/go" />
</CardGroup>

Next, you will need to generate an API key and secret. The following code snippet provides an example using the Python SDK. You can locate instructions for generating API keys in the GitHub SDK README for your chosen programming language.

```python Python
from cobo_custody.signer.local_signer import generate_new_key
api_secret, api_key = generate_new_key()
print(api_secret)
print(api_key)
```

<Warning>
  api\_secret is your private key and should be stored securely.

  api\_key is your public key and needs to be set in your WaaS account via Cobo Custody web interface.
</Warning>

After successfully generating an API key and opening an account, you can head to the API dashboard on the Cobo Custody Web.

Please manually enter your key into the "API Key" field and ensure that the status of your API key is displayed as “Active”. You can now proceed to use the relevant SDKs to make API calls.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_007.png" />

## Test API by SDKs

```python Python
from cobo_custody.client import Client
from cobo_custody.config import DEV_ENV
from cobo_custody.signer.local_signer import LocalSigner

# input your API SECRET
signer = LocalSigner("YOUR_API_SECRET")
client = Client(signer=signer, env=DEV_ENV, debug=True)
res = client.get_account_info()
```

<Accordion title="View Response">
  ```json
  {
    "success": true,
    "result": {
      "name": "cobo_test",
      "assets": [
        {
          "coin": "ADA",
          "display_code": "ADA",
          "description": "Cardano",
          "decimal": 6,
          "can_deposit": true,
          "can_withdraw": true,
          "require_memo": false,
          "balance": "29880892",
          "abs_balance": "29.880892",
          "fee_coin": "ADA",
          "abs_estimate_fee": "1",
          "confirming_threshold": 9,
          "dust_threshold": 1000000,
          "token_address": ""
        },
        {
          "coin": "ALGO",
          "display_code": "ALGO",
          "description": "Algorand",
          "decimal": 6,
          "can_deposit": true,
          "can_withdraw": true,
          "require_memo": false,
          "balance": "8359337",
          "abs_balance": "8.359337",
          "fee_coin": "ALGO",
          "abs_estimate_fee": "0.8",
          "confirming_threshold": 12,
          "dust_threshold": 1,
          "token_address": ""
        }
      ]
    }
  }
  ```
</Accordion>

<br />

## Test API by Playground

To learn what is Playground, please refer to the ([Interactive API Playground](/v1/api-references/overview/playground)) section.
<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# MPC Lite
Source: https://cobo.com/developers/v1/get-started/overview/mpc-lite-quick-start



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_lite_001.png)

## Account Opening

To create an account in the development environment, please head to [https://home.develop.cobo.com/#/cobo-lite/register](https://home.develop.cobo.com/#/cobo-lite/register). For a seamless account creation process, please refer to this [user guide](https://www.cobo.com/post/open-cobo-mpc-lite-account).

<Warning>
  Note that you only need to create an account in the development environment if you fall under the following categories. Otherwise, please use the production environment instead.

  1. You require a testing environment that is entirely independent of the production environment
  2. You need to use the API Playground feature on Developer Hub
</Warning>

To improve security, you will need to download Google Authenticator (GA) on your mobile device. To complete the setup, please use your GA to scan the QR code displayed on the web interface.
You are also required to install Cobo Guard, which is a dedicated mobile application that leverages cutting-edge Trusted Execution Environment (TEE) technologies for secure authentication, risk control verification, and MPC-TSS key share management. It provides robust protection for your account, particularly during critical actions such as withdrawals and risk policy adjustments. Currently, Cobo Guard only supports the iOS system. The app is compatible with iPhone 5s and newer models, and the operating system must be iOS 13.0 or later. Prior to installation, kindly make sure that your mobile device meets the aforementioned requirements.

<Tip>
  To download Cobo Guard, whether for a production or development environment, please visit the [Apple Store](https://apps.apple.com/us/app/cobo-guard/id6450997458?ref=cobo-institutional-digital-asset-custody-provider).
</Tip>

For more information on how to set up Cobo Guard for your MPC Lite account, please refer to this [user guide](https://www.cobo.com/post/how-to-use-cobo-guard).

## MPC Setup

After successfully opening an account, you can navigate to Settings > MPC Settings > Generate Kay to complete your MPC setup. After you click on the “Generate Key" button, a message will be pushed to your Cobo Guard.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_lite_002.png" />

You can approve the key generation request on your Cobo Guard. Then, a 2-2 key generation ceremony will be automatically triggered. One MPC key-share will be generated and stored on your Cobo Guard, while the other MPC key-share will be managed by Cobo.

<div className="w-full flex items-center justify-center">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_lite_003.jpg" width="400" />
</div>

Following the key generation ceremony, you are required to back up your MPC key-share. This precautionary measure ensures that in the event of a lost mobile device or accidental uninstallation of the Cobo Guard app, you can use the backup to reconstruct your private key.

<div className="w-full flex items-center justify-center">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_lite_004.jpg" width="400" />
</div>

Upon completion of the above processes, the status of your MPC key-share will be updated to “Generated” on the web interface.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_lite_005.png" />

## MPC Wallet Setup

Once the MPC key-shares are successfully generated, you can proceed to create one or multiple types of MPC wallets on the web interface.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_lite_006.png" />

To add coins to MPC wallet, simply click "+Add Coins'' and then search for your preferred coin types. Currently, Cobo Custody Web supports four mainnets (BTC, ETH, TRON, XRP) and two testnets (GETH, XTN).

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_lite_007.png" />

<Warning>
  Please make sure that you have added coins to your MPC Custody wallets first before making any API calls.
</Warning>

## API Integration

If you are using APIs, please first choose an appropriate SDK from Cobo’s GitHub repository. Cobo Custody provides SDKs in five programming languages - Java, PHP, Python, JavaScript and Go.

<CardGroup cols={3}>
  <Card title="Java" icon="java" color="#ea5a0c" href="/v1/sdks-and-tools/sdks/waas/java" />

  <Card title="PHP" icon="php" color="#0285c7" href="/v1/sdks-and-tools/sdks/waas/php" />

  <Card title="Python" icon="python" color="#16a34a" href="/v1/sdks-and-tools/sdks/waas/python" />

  <Card title="JavaScript" icon="js" color="#dc2626" href="/v1/sdks-and-tools/sdks/waas/javascript" />

  <Card title="Go" icon="golang" color="#dc2626" href="/v1/sdks-and-tools/sdks/waas/go" />
</CardGroup>

Next, you will need to generate an API key and secret. The following code snippet provides an example using the Python SDK. You can locate instructions for generating API keys in the GitHub SDK README for your chosen programming language.

```python Python
from cobo_custody.signer.local_signer import generate_new_key
api_secret, api_key = generate_new_key()
print(api_secret)
print(api_key)
```

<Warning>
  api\_secret is your private key and should be stored securely.

  api\_key is your public key and needs to be set in your WaaS account via Cobo Custody web interface.
</Warning>

After successfully generating an API key and opening an account, you can head to the API dashboard on the Cobo Custody Web.

Please manually enter your key into the "API Key" field and ensure that the status of your API key is displayed as “Active”. You can now proceed to use the relevant SDKs to make API calls.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_lite_008.png" />

## Test API by SDKs

```python Python
from cobo_custody.client.mpc_client import MPCClient
from cobo_custody.config import DEV_ENV
from cobo_custody.signer.local_signer import LocalSigner

# input your API SECRET
signer = LocalSigner("YOUR_API_SECRET")
mpc_client = MPCClient(signer=signer, env=DEV_ENV, debug=True)
res = mpc_client.get_supported_chains()
```

<Accordion title="View Response">
  ```json
  {
    "success": true,
    "result": {'chain_codes': ['DOT', 'BTC', 'CHZ2', 'XTN', 'BSC_BNB', 'VET', 'ETHW', 'SOL', 'ETH', 'GETH', 'TRON', 'MNT']}
  }
  ```
</Accordion>

<br />

## Test API by Playground

To learn what is Playground, please refer to the ([Interactive API Playground](/v1/api-references/overview/playground)) section.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# MPC Co-managed Custody
Source: https://cobo.com/developers/v1/get-started/overview/mpc-quick-start



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_001.png)

## Account Opening

To start using Cobo MPC Co-Managed Custody, you will need to open an account in the development environment by heading to [https://home.dev.cobo.com/#/login](https://home.dev.cobo.com/#/login). Alternatively, you may [contact Cobo](https://www.cobo.com/) to request an invitation email.

To improve security, you will need to download Google Authenticator (GA) on your mobile device. To complete the setup, please use your GA to scan the QR code displayed on the Cobo Custody Web.

<div className="w-full flex items-center justify-center">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_002.png" width="400" />
</div>

You are also required to install Cobo Guard, which is a dedicated mobile application that leverages cutting-edge Trusted Execution Environment (TEE) technologies for secure authentication, risk control verification, and MPC-TSS key share management. It provides robust protection for your account, particularly during critical actions such as withdrawals and risk policy adjustments. Currently, Cobo Guard only supports the iOS system. The app is compatible with iPhone 5s and newer models, and the operating system must be iOS 13.0 or later. Prior to installation, kindly make sure that your mobile device meets the aforementioned requirements.

To download Cobo Guard (development environment) from TestFlight, [click here](https://testflight.apple.com/join/pcSF46JK?ref=cobo-institutional-digital-asset-custody-provider). Please be advised that Cobo Guard downloaded from the Apple Store will only be compatible with the production environment.

After downloading Cobo Guard, you need to click on the scan icon on the top-right corner of your Cobo Guard to scan the QR code displayed on the Cobo Custody Web.

<div className="w-full flex items-center justify-center">
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_003.png" width="400" />
</div>

On the Cobo Custody Web, you can invite more team members to your org. To do so, head to Settings > Teams > Invite Users. Note that your invitees will also need to follow the aforementioned steps for setup and authentication.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/full_custody_004.png" />

## MPC Setup

If you want to set up your own TSS Node, please prepare the [testing environment](https://docs.cobo.com/cobo-mpc-waas/cobo-mpc-waas/tss-node-user-guide/server-environment-preparation) for TSS Node deployment. Alternatively, you can contact Cobo to acquire Cobo-managed testing nodes, which will enable you to bypass the MPC Setup process for your development environment.

Currently, you can deploy TSS Nodes on an off-the-shelf server, a server that supports Intel® Software Guard Extensions (Intel® SGX), or an Apple MacBook.

Please head to Cobo's [TSS Node](https://download.tss.cobo.com/) Library to download a version of the TSS Node package that fits your server model and deployment method. For user guides on the deployment process, please [click here](https://docs.cobo.com/cobo-mpc-waas/cobo-mpc-waas/tss-node-user-guide/tss-node-deployment). The following initialization output uses the off-the-shelf server as an example.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_002.png" />

Following the initialization of each TSS Node, a TSS Node ID will be automatically generated. Please manually enter the TSS Node IDs on the Cobo Custody web.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_003.png" />

Once all TSS Node IDs have been added on the Cobo Custody Web, the key generation ceremony will automatically start. This process requires all TSS Nodes to be online in order to generate a set of MPC key-shares in an independent manner. The MPC root extended public key will also be created.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_004.png" />

## MPC Wallet Setup

Once the MPC root extended public key is successfully generated, you can proceed to create one or multiple types of MPC wallets on the Cobo Custody Web.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_005.png" />

To add coins to MPC wallet, simply click "+Add Coins'' and then search for your preferred coin types. Currently, Cobo Custody Web supports four mainnets (BTC, ETH, TRON, XRP) and two testnets (GETH, XTN).

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_006.png" />

<Warning>
  Please make sure that you have added coins to your MPC Custody wallets first before making any API calls.
</Warning>

## API Integration

If you are using APIs, please first choose an appropriate SDK from Cobo’s GitHub repository. Cobo Custody provides SDKs in five programming languages - Java, PHP, Python, JavaScript and Go.

<CardGroup cols={3}>
  <Card title="Java" icon="java" color="#ea5a0c" href="/v1/sdks-and-tools/sdks/waas/java" />

  <Card title="PHP" icon="php" color="#0285c7" href="/v1/sdks-and-tools/sdks/waas/php" />

  <Card title="Python" icon="python" color="#16a34a" href="/v1/sdks-and-tools/sdks/waas/python" />

  <Card title="JavaScript" icon="js" color="#dc2626" href="/v1/sdks-and-tools/sdks/waas/javascript" />

  <Card title="Go" icon="golang" color="#dc2626" href="/v1/sdks-and-tools/sdks/waas/go" />
</CardGroup>

Next, you will need to generate an API key and secret. The following code snippet provides an example using the Python SDK. You can locate instructions for generating API keys in the GitHub SDK README for your chosen programming language.

```python Python
from cobo_custody.signer.local_signer import generate_new_key
api_secret, api_key = generate_new_key()
print(api_secret)
print(api_key)
```

<Warning>
  api\_secret is your private key and should be stored securely.

  api\_key is your public key and needs to be set in your WaaS account via Cobo Custody web interface.
</Warning>

After successfully generating an API key and opening an account, you can head to the API dashboard on the Cobo Custody Web.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_007.png" />

Please manually enter your key into the "API Key" field and ensure that the status of your API key is displayed as “Active”. You can now proceed to use the relevant SDKs to make API calls.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/quickstart/mpc_008.png" />

## Test API by SDKs

```python Python
from cobo_custody.client.mpc_client import MPCClient
from cobo_custody.config import DEV_ENV
from cobo_custody.signer.local_signer import LocalSigner

# input your API SECRET
signer = LocalSigner("YOUR_API_SECRET")
mpc_client = MPCClient(signer=signer, env=DEV_ENV, debug=True)
res = mpc_client.get_supported_chains()
```

<Accordion title="View Response">
  ```json
  {
    "success": true,
    "result": {'chain_codes': ['DOT', 'BTC', 'CHZ2', 'XTN', 'BSC_BNB', 'VET', 'ETHW', 'SOL', 'ETH', 'GETH', 'TRON', 'MNT']}
  }
  ```
</Accordion>

<br />

## Test API by Playground

To learn what is Playground, please refer to the ([Interactive API Playground](/v1/api-references/overview/playground)) section.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Quickstart
Source: https://cobo.com/developers/v1/get-started/overview/quickstart



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
This guide demonstrates a quick start with Cobo WaaS and its accompanying SDKs. To get started, please select your Cobo Custody product from the options below:

<CardGroup cols={3}>
  <Card title="Full Custody" icon="link" href="/v1/get-started/overview/full-custody-quick-start">HSM-based custody</Card>
  <Card title="MPC Co-managed Custody" icon="link" href="/v1/get-started/overview/mpc-quick-start">MPC-based co-managed custody</Card>
  <Card title="MPC Lite Custody" icon="link" href="/v1/get-started/overview/mpc-lite-quick-start">MPC-based self custody</Card>
</CardGroup>

This guide serves as your onboarding tutorial for the Cobo WaaS [Development Environment](https://home.dev.cobo.com/). While the majority of experiences may be familiar, it is crucial to note that the associated accounts and API credentials in this environment differ from those employed in the [Production Environment](https://home.custody.cobo.com/).

To understand the differences among the custody products mentioned above, [click here](https://www.cobo.com/post/how-to-choose-cobo-custody-solutions).
<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Discord
Source: https://cobo.com/developers/v1/overview/community/discord



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

<Card title="Discord" icon="discord" href="https://discord.gg/FaZwQ9WYpj">
  Find more information on Discord
</Card>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Github
Source: https://cobo.com/developers/v1/overview/community/github



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

<Card title="Github" icon="github" href="https://github.com/CoboGlobal/">
  Find more information on Github
</Card>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# LinkedIn
Source: https://cobo.com/developers/v1/overview/community/linkedln



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

<Card title="LinkedIn" icon="linkedin" href="https://www.linkedin.com/company/cobo-global/">
  Find more information on LinkedIn
</Card>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# News
Source: https://cobo.com/developers/v1/overview/community/news



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

<Card title="News" icon="newspaper" href="https://www.cobo.com/web3/channel/news">
  Find more information on News
</Card>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Telegram
Source: https://cobo.com/developers/v1/overview/community/telegram



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

<Card title="Cobo Wallet Chinese" icon="telegram" href="https://t.me/coboglobal">
  Find more information on telegram
</Card>

<Card title="Cobo Wallet Support" icon="telegram" href="https://t.me/CoboWalletChat">
  Find more information on telegram
</Card>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Twitter
Source: https://cobo.com/developers/v1/overview/community/twitter



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

<Card title="Twitter" icon="twitter" href="https://twitter.com/Cobo_Global">
  Find more information on twitter
</Card>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Introduction
Source: https://cobo.com/developers/v1/overview/custodial-wallet

Custodial Wallet Solution based on HSM/SGX

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Cobo Custodial Wallet is built upon bank-grade security technologies such as
Hardware Security Modules (HSM) and Intel Software Guard Extensions (SGX), that
is battle tested in traditional financial industry. In comparison with [Cobo MPC
Wallet](/v1/overview/mpc-wallet/mpc-introduction) and [Smart Contract Wallet](/v1/overview/smart-contract-wallet/cobosafe),
Cobo Custodial Wallet's clients entrust their private keys to Cobo, which are
stored in HSM and SGX based secure devices, and access their custodized assets
via web interface, mobile apps or SaaS APIs.

Cobo Custodial Wallet is more tailored to insitutions from traditional finance
industry or enterprises who don't want to store and manage private keys by
themseves. It offers a wide range of features, such as all-in-one solutoin to
manage crypto assets across multiple blockchains and
[Wallet-as-a-Service](/v1/overview/waas-introduction) API access etc.

Cobo Custodial Wallet has served more than 500 institutional clients since its
launch in 2018. With a track record of zero security incident or breaches, our
solution delivers the highest level of security, advanced risk management,
and developer-friendly integration options.

## Intuitive Custody Interface

Securely store and access over 80+ chains and 2,300+ tokens all on one simple interface.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/full_custody.png" />

## Bank-Grade Security Features

Cobo Custodial Wallet employs a 3-tier (Hot-Warm-Cold) private key storage
architecture, with a majority of funds (95%) stored in cold wallets. These
wallets are fortified by offline key shards distributed across global
locations, ensuring bank-grade security. For faster transactions, hot wallets
are protected by bank-grade HSM, SGX, risk policies, and [Cobo
Auth](https://apps.apple.com/us/app/cobo-auth/id1485413078). This comprehensive
approach guarantees the highest level of security and transaction integrity.

## Comprehensive Risk Management

Cobo Custodial Wallet offers an extensive risk control framework and real-time
on-chain monitoring to effectively manage potential risks. Institutions can
implement customized risk control rules, including spending limits, whitelists,
blacklists, and IP monitoring.

## Role-based Access Control and Custom Workflows

Cobo Custodial Wallet puts you in control by offering role-based access control and
customizable workflows tailored to your institution's scale and needs. You can
define roles such as Admin, Spender, Approver, and Operator, segregating user
privileges effectively. Additionally, our customizable workflow engine and
transaction approval process enable the application of governance policies.
Each operation is secured by Cobo Auth, a mobile app that provides multi-role
and multi-level authentication for enhanced integrity.

## Wallet-as-a-Service Support

Cobo Custodial Wallet provides a comprehensive crypto wallet infrastructure service
via HTTP based SaaS APIs. Our [Wallet-as-a-Service (WaaS) ](/v1/overview/waas-introduction) allows clients
to seamlessly integrate an bank-grade wallet into their applications. With
easy-to-use APIs and plug-and-play SDKs, developers can quickly build and
deploy their applications with wallets supporting over 2,300 tokens across more
than 80 chains. Cobo Custodial Wallet handles token sweeping, reducing the effort
required for wallet development.

## Easy-to-integrate SDKs

Cobo Custodial Wallet comes with easy-to-integrate client libraries in
[Python](/v1/sdks-and-tools/sdks/waas/python), [JavaScript](v1/sdks-and-tools/sdks/waas/javascript), [Golang](/v1/sdks-and-tools/sdks/waas/go),
[Java](/v1/sdks-and-tools/sdks/waas/java), [PHP](v1/sdks-and-tools/sdks/waas/php) for third-party developers to use.
. This allows developers to quickly
learn and integrate Cobo Custody SaaS Service into their applicaitons.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Introduction
Source: https://cobo.com/developers/v1/overview/introduction



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

As the world's first crypto omni-custody provider, Cobo offers a full suite of
crypto wallet and custody technologies. This document intends to provide a
central place to help developers to learn how to leverage Cobo's SaaS based
APIs, SDKs and various tools to build their own crypto or web3 applications.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/instroduction.png" />

## Cobo's Solutions

<CardGroup cols={2}>
  <Card title="Wallet as a Service" icon="clouds" href="/v1/overview/waas-introduction" color="#ea5a0c">
    SaaS APIs to Build Your Crypto Applications.
  </Card>

  <Card title="Custodial Wallet" icon="warehouse" href="/v1/overview/custodial-wallet" color="#ea5a0c">
    HSM/SGX based centralized custody solution.
  </Card>

  <Card title="MPC Wallet" icon="people-group" href="/v1/overview/mpc-wallet/mpc-introduction" color="#ea5a0c">
    Multi-Party-Computation (MPC) based Threshold Signature Scheme (TSS) to eliminate single point of failure.
  </Card>

  <Card title="Smart Contract Wallet" icon="file-contract" href="/v1/overview/smart-contract-wallet" color="#0285c7">
    Smart Contract based access control for smart wallets.
  </Card>
</CardGroup>

## About Cobo

Cobo is a globally trusted leader in digital asset custody solutions. As the
world’s first omni-custody platform, Cobo offers the full spectrum of solutions
from full custody, co-managed MPC custody, to fully decentralized custody as
well as wallet-as-a-service, advanced DeFi investment tools and an off-exchange
settlement network. Trusted by over 500 institutions with billions in assets
under custody, Cobo inspires confidence in digital asset ownership by enabling
safe and efficient management of digital assets and interactions with Web 3.0.
Cobo is SOC2 Type 1 and Type 2-compliance-certified and licensed in 5
jurisdictions.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Callback Server Configuration
Source: https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-configuration



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

You'll need to complete the following configurations on the server where the callback server is deployed:

* Generate the callback server’s RSA private key

```
openssl genrsa -out callback-server-pri.pem 4096
```

* Export the callback server’s RSA public key

```
openssl rsa -in callback-server-pri.pem -pubout >callback-server-pub.key
```

* Copy the exported RSA public key (i.e. the callback-server-pub.key file) to the server where the TSS Node is deployed
* Copy the RSA public key of the TSS Node to the configuration files of the callback server
* If you use the callback server codes provided by Cobo Custody, please refer to the configuration instructions in the samples
* After you’ve successfully completed TSS Node initialization, execute the following command to query the RSA public key of the TSS Node:

```
sudo ./tss-node.sh info
```

Output example:

```
INFO[2022-12-14T07:09:44Z] Callback public key:
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA4ki4fHY4/oSJOYBxBUI1
GUdLCUF7wMFYlfkpI/bSf7fGvzaygtZdORG6OR4vAoKxvqK/ZbJITMR5rS7pNxOv
vpLbsdVfJZGQn6wW8wLEx9ZB18JXt99oTESaxzoxMteXBC6tgYqWhSS386LfjSxQ
a4EvPunTRdYrO9VmnDWHM06/c76UxcS038pJ4OByXx7sH0xzS4MZQhZWyfYkqBT2
Ym9g46VXQ+CVZyWYXKPMyGPVTR1979lfJ1bFpYADNU3YUSK1mq0xaH9lQORFBs6/
0kK8m27BGR7h59rFJGgeZ2SNGzcEmiAp7rjOtFpLj1OmNXtjGhTxpn8omBrdH86+
qZfKsIm+O84e9S7uPMnx9hIpJHTcPoseW0d+WBoNplJQg22LUswPwaVgSHMB2U1B
aFkEzMAkRmGIejlMG25uYaVlA0Mf9E+/JaZSGPVuq43lhHCE08pNxGrak6/vTPTv
jAM449yTHrjDCDrFk/LdHqk5Ipt0b9CeHbCsQSs4BxHlDp2GEBJn1OEiizDwScWb
YiFi3a6PAvqDO56KEUFMXpC8CzgJ8svmQoldIAWSKGpdnuxUMcD+glCsi7K7+FI+
HDepO/4ejCm9DzuTUHG4PE0Ymb3PV8cZbLlGSZD/yG1541/xlHmzlOpAa8OdZBfb
s8wADQvpbJTyPkkMyq/i5SkCAwEAAQ==
-----END PUBLIC KEY-----
```

The Callback public key will be the RSA public key of the TSS Node.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Callback API
Source: https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/callback-api



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## HTTP API

The callback server is an HTTP server that supports the following endpoints:

* Path
  * /v1/check
* Method
  * POST
* Body
  * Encoded with x-www-form-urlencoded&#x20;

## HTTP Request Parsing&#x20;

The TSS Node will follow the steps below to send the HTTP request:

* Generate CallbackRequest
* Serialize CallbackRequest to derive CallbackRequestJsonString
* Use CallbackRequestJsonString as the JWT payload and sign it using its RSA private key to create a JWT
* Submit the HTTP POST request via an HTML form with TSS\_JWT\_MSG as the key and JWT as the value

The callback server will follow the steps below once it receives the HTTP request:

* Retrieve the data in the HTTP POST request using TSS\_JWT\_MSG as the key and the JWT as the value
* Use the TSS Node’s RSA public key to validate the signed JWT
* Retrieve the payload in the JWT and deserialize it using CallbackRequest
* Deserialize the meta field to retrieve the information in the request

## Risk Control

You'll need to perform a risk control for each CallbackRequest based on your organization’s business and security requirements to further validate the request.

## HTTP Response

The callback server will send the HTTP response as follows: &#x20;

* Generate CallbackResponse
* Serialize CallbackResponse to derive CallbackResponseJsonString
* Use CallbackResponseJsonString as the JWT payload and sign it using its RSA private key to create a JWT
* Use the JWT as the HTTP response and return it to the TSS Node

## Callback API Request Description

<ParamField body="request_id" type="String" required>Unique ID of the callback request.</ParamField>
<ParamField body="request_type" type="Int" required><p>The types of callback requests, which will be an enum:</p><p /><p>TypeKeyGen = 1</p><p>TypeKeySign = 2</p><p>TypeKeyReshare = 3</p></ParamField>
<ParamField body="request_detail" type="String" required>The details of the callback request; each type of the callback requests corresponds to a different request\_detail structure; the format is a serialized JSON string.</ParamField>
<ParamField body="extra_info" type="String" required>Other information associated with the callback request; each type of the callback requests corresponds to a different extra\_info structure; the format is a serialized JSON string.</ParamField>

## Callback API Response Description

<ResponseField name="status" type="Int" required>Status; 0: callback server is normal; other values: callback server has an error</ResponseField>
<ResponseField name="request_id" type="String" required>Request ID of the callback; the value must be the same as request\_id in CallbackRequest</ResponseField>
<ResponseField name="action" type="String" required><p>Instructions for task execution, which will be an enum: \[APPROVE, REJECT]</p><p /><p>APPROVE: task should be executed; </p><p /><p>REJECT: task should be rejected, and the reason can be retrieved from the error field; </p><p /></ResponseField>
<ResponseField name="error" type="String" optional><p>Error message;</p><p /><p>If the returned status is not 0, it indicates an error within the callback server</p><p /><p>If the returned status is 0 and action returns a “REJECT”, it indicates the reason for task rejection</p><p /></ResponseField>

Note: If the TSS Node fails to receive the HTTP response, it will continue to send requests to the callback server. In such cases, when the maximum number of retries is reached, the response will be categorized as REJECT.

<RequestExample>
  ```CallbackRequest
  TSS_JWT_MSG=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYWNrYWdlX2RhdGEiOiJleUp5WlhGMVpYTjBYMmxrSWpvaWRHVnpkRjl5WlhGMVpYTjBYMmxrSWl3aWNtVnhkV1Z6ZEY5MGVYQmxJam94TENKeVpYRjFaWE4wWDJSbGRHRnBiQ0k2SW5SbGMzUmZkR0Z6YTE5a1pYUmhhV3dpTENKbGVIUnlZVjlwYm1adklqb2llMXdpWTI5aWIxd2lPaUJjSW50OVhDSXNJRndpWTNWemRHOXRaWEpjSWpvZ1hDSjdYRnhjSW10bGVWeGNYQ0k2WEZ4Y0luWmhiRnhjWENKOVhDSjlJbjA9IiwiaXNzIjoiVEVTVF9DSEVDS0VSIiwiZXhwIjoxNjg3MzIxNDEwfQ.insE89dQezZPUTAxRoGBqtjVuxSGBeGBEKsmfVpdy8Rs1DenVXj3oj-184bwvGsJncxbul-YaenxYaLt5FSAzgLf5UWHwJ9PnqzorIcPORo2VDSE1B05PS8D7GNL8HZvqd9j2v72tnuy8PuMe8zGEOzAhOzFCnuinVXbOZO3q85W05gmJnICPNRe0kCWe6VvfkiZ15wlqlEkDlRebrAb4QaL7QvQ2rZ8Q-ClNepg9E1WbtgMgfS4b64thFNhDfBM1I-3Bq2BcaClpKTo0SgMkXsEng3c9r_Gl_cizw5u_6qNKlc8MpxlfjRYWLgZ5J45CZRdcVBb_Q231FcdVZraFg
  ```
</RequestExample>

<ResponseExample>
  ```go Go
  // verify token
  tokenString := c.PostForm("TSS_JWT_MSG")
  token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
      // Make sure that the token method conform to "SigningMethodRSA"
      if _, ok := token.Method.(*jwt.SigningMethodRSA); !ok {
          return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
      }
      return CallBackPublicKey, nil
  })

  if token.Valid {
      dataClaim, err := json.Marshal(token.Claims)
      if err != nil {
          return err
      }
      var claim PackageDataClaim
      if err := json.Unmarshal(dataClaim, &claim); err != nil {
          return err
      }

      req := CallBackRequest{}
      if err := json.Unmarshal(claim.PackageData, &req); err != nil {
          return err
      }
      // got CallbackRequest
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Callback Server Examples
Source: https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/callback-server-examples



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Cobo Custody provides callback server examples in different programming languages. You can refer to these examples to quickly deploy a callback server:

[https://github.com/CoboGlobal/cobo-mpc-callback-server-examples](https://github.com/CoboGlobal/cobo-mpc-callback-server-examples)&#x20;

Alternatively, JWT code libraries also cover multiple programming languages. You can refer to this user guide and JWT’s [official website](https://jwt.io/libraries) to quickly deploy a callback server.&#x20;

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# KeyGen Request Description
Source: https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/keygen-request



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Callback API Request Description

### request\_type

TypeKeyGen = 1

### request\_detail

The format is a serialized JSON string of structure below.

<ParamField body="threshold" type="Int" required>Signature threshold.</ParamField>
<ParamField body="node_ids" type="[]String" required>Node IDs associated with the generation of all MPC key shares under the MPC wallet.</ParamField>
<ParamField body="curve" type="Int" required><p>Signature algorithm that has been used.</p><p>  0: SECP256K1 </p><p>  2: ED25519 </p></ParamField>

### extra\_info

The format is a serialized JSON string of structure below.

<ParamField body="cobo_id" type="String" required>Unique ID of the key generation (KeyGen) request.</ParamField>
<ParamField body="api_request_id" type="String" required>Request ID passed in by the user using WaaS APIs; if the request is not sent via WaaS APIs, Cobo will automatically generate a Request ID.</ParamField>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Reshare Request Description
Source: https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/reshare-request



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Callback API Request Description

### request\_type

TypeKeyReshare = 3

### request\_detail

The format is a serialized JSON string of structure below.

<ParamField body="old_group_id" type="String" required>Old Group ID.</ParamField>
<ParamField body="root_pub_key" type="String" required>MPC extended public key.</ParamField>
<ParamField body="curve" type="Int" required><p>Signature algorithm that has been used.</p><p>  0: SECP256K1 </p><p>  2: ED25519 </p></ParamField>
<ParamField body="used_node_ids" type="[]String" required>Selected Node IDs from the previous group that have been used for soft key recovery</ParamField>
<ParamField body="old_threshold" type="Int" required>Previous signature threshold.</ParamField>
<ParamField body="new_threshold" type="Int" required>New Signature Threshold.</ParamField>
<ParamField body="new_node_ids" type="[]String" required>New Node IDs associated with the generation of all MPC key shares under the MPC wallet</ParamField>

### extra\_info

The format is a serialized JSON string of structure below.

<ParamField body="cobo_id" type="String" required>Unique ID of the soft key recovery (KeyReshare) request.</ParamField>
<ParamField body="api_request_id" type="String" required>Request ID passed in by the user using WaaS APIs; if the request is not sent via WaaS APIs, Cobo will automatically generate a Request ID.</ParamField>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Sign Request Description
Source: https://cobo.com/developers/v1/overview/mpc-wallet/callback/callback-server-requirements/sign-request



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Callback API Request Description

### request\_type

TypeKeySign = 2

### request\_detail

The format is a serialized JSON string of structure below.

<ParamField body="group_id" type="String" required>Group ID used during transaction signing.</ParamField>
<ParamField body="root_pub_key" type="String" required>MPC root extended public key.</ParamField>
<ParamField body="used_node_ids" type="[]String" required>Node IDs used during transaction signing.</ParamField>
<ParamField body="bip32_path_list" type="[]String" required>Address paths (BIP32).</ParamField>
<ParamField body="msg_hash_list" type="[]String" required>Hashes to be signed.</ParamField>

### extra\_info

The format is a serialized JSON string of structure below.

<ParamField body="cobo_id" type="String" required>Unique ID of the transaction signing (KeySign) request.</ParamField>
<ParamField body="api_request_id" type="String" required><p>Request ID of the withdraw request;</p><p>If the request is initialized via API, the value should be the same as request\_id;</p><p>If the request is initialized via Cobo Custody Web, Cobo will automatically generate a Request ID.</p></ParamField>
<ParamField body="transaction_type" type="TransactionTypeEnum" required>Please refer to TransactionTypeEnum below.</ParamField>
<ParamField body="operation" type="TransactionOperationEnum" required>Please refer to TransactionOperationEnum below.</ParamField>
<ParamField body="coin" type="String" required>Asset name.</ParamField>
<ParamField body="decimal" type="Int" required>Decimal precision.</ParamField>
<ParamField body="from_address" type="String" required>Address from which assets are withdrawn.</ParamField>
<ParamField body="amount" type="String" optional>Transaction amount, which contains decimal places (e.g. one bitcoin is divisible to eight decimal places, and 100000000 represents 1 BTC).</ParamField>
<ParamField body="to_address" type="String" required>Deposit address.</ParamField>
<ParamField body="to_address_details" type="Json" optional>List of deposit addresses; applicable to the UTXO model; the value must meets the JSON structure of list\[ToAddressDetail].</ParamField>
<ParamField body="fee" type="Int" optional>For BTC transaction, this field returns the transaction fees per byte; unit: satoshi.</ParamField>
<ParamField body="gas_price" type="Int" optional>Gas fees; applicable to ETH; unit: GWei.</ParamField>
<ParamField body="gas_limit" type="Int" optional>Gas limit; applicable to ETH.</ParamField>
<ParamField body="extra_parameters" type="Json" required>Additional parameters for the transaction; for more information, please refer to the description of create\_transaction.</ParamField>
<ParamField body="replace_cobo_id" type="String" optional>ID of a Cobo transaction that has been designated as RBF.</ParamField>
<ParamField body="api_key" type="String" optional>API\_KEY of the withdraw request initialized through API.</ParamField>
<ParamField body="spender" type="String" optional>Email information of the withdrawer; applicable to Cobo Custody Web.</ParamField>
<ParamField body="raw_tx" type="List[RawTx]" required>Raw transaction data.</ParamField>
<ParamField body="note" type="String" required>Transaction remarks.</ParamField>
<ParamField body="raw_tx_info" type="Json" required>Raw information for constructing transaction to be signed.</ParamField>

#### ToAddressDetail

<ParamField body="to_address" type="String">Withdraw address.</ParamField>
<ParamField body="amount" type="String">Transaction amount, which contains decimal places (e.g. one bitcoin is divisible to eight decimal places, and 100000000 represents 1 BTC).</ParamField>

#### extra\_parameters

<ParamField body="inputs_to_spend" type="List[Input]">Unspent Transaction Output (UTXO) to spend; this only applies in UTXO type of blockchains (e.g. bitcoin).</ParamField>
<ParamField body="inputs_to_exclude" type="List[Input]">Unspent Transaction Output (UTXO) to exclude from spending; this only applies in UTXO type of blockchains (e.g bitcoin).</ParamField>

#### Input

<ParamField body="tx_hash" type="String">Transaction hash.</ParamField>
<ParamField body="vout_n" type="Int">Transaction index/no.</ParamField>

#### TransactionTypeEnum

* TYPE\_MPC\_WEB = 100
* TYPE\_MPC\_MMI = 101
* TYPE\_MPC\_API = 102
* TYPE\_RBF\_API\_SPEEDUP = 103
* TYPE\_RBF\_WEB\_SPEEDUP = 104
* TYPE\_RBF\_API\_DROP = 105
* TYPE\_RBF\_WEB\_DROP = 106
* TYPE\_MPC\_TRANSACTION\_FROM\_EXTERNAL = 107
* TYPE\_MPC\_WEB3\_WEB = 300  # mpc web3 web withdraw
* TYPE\_MPC\_WEB3\_MMI\_TX = 301  # mpc web3 mmi tx
* TYPE\_MPC\_WEB3\_MMI\_MSG = 302  # mpc web3 mmi msg
* TYPE\_MPC\_WEB3\_API\_TRANSACTION = 303
* TYPE\_MPC\_WEB3\_API\_EIP\_191 = 304
* TYPE\_MPC\_WEB3\_API\_EIP\_712 = 305
* TYPE\_MPC\_WEB3\_TRANSACTION\_FROM\_EXTERNAL = 307
* TYPE\_MPC\_WEB3\_RBF\_API\_SPEEDUP = 308
* TYPE\_MPC\_WEB3\_RBF\_WEB\_SPEEDUP = 309
* TYPE\_MPC\_WEB3\_RBF\_API\_DROP = 310
* TYPE\_MPC\_WEB3\_RBF\_WEB\_DROP = 311
* TYPE\_MPC\_BABYLON\_STAKE = 500
* TYPE\_MPC\_BABYLON\_STAKE\_RBF = 501

#### TransactionOperationEnum

* OPERATION\_TRANSFER = 100
* OPERATION\_CONTRACT\_CALL = 200
* OPERATION\_MINT = 201
* OPERATION\_BURN = 202
* OPERATION\_SIGN\_MESSAGE = 300

#### RawTx

<ParamField body="raw_tx" type="String">Hex-encoded transaction information.</ParamField>
<ParamField body="derivation_path" type="String">Derivation path to sign, for example："m/44/60/3/0/1".</ParamField>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# TSS Node Callback Mechanism
Source: https://cobo.com/developers/v1/overview/mpc-wallet/callback/tss-node-callback-mechanism



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

After the TSS Node has been successfully set up, it will automatically connect to Cobo Custody Web and listen for tasks sent by the Cobo Custody backend.&#x20;

Currently, there are three types of tasks: key generation (KeyGen), transaction signing (KeySign), and soft key recovery (KeyReshare).&#x20;

If the callback mechanism is not set up, the TSS Node will immediately execute each task upon receiving it from the Cobo Custody backend.&#x20;

If the callback mechanism is set up, the TSS Node will send an approval request to the callback server upon receiving a task from the Cobo Custody backend. The TSS Node will execute the task only if it is approved by the callback server.

The TSS Node and the callback server connect via the HTTP communication protocol. Cobo Custody has also implemented the JSON Web Token (JWT) that is signed with the RS256 algorithm. For more information on JWT, please [click here.](https://jwt.io/introduction)&#x20;

* During TSS Node initialization, the TSS Node and the callback server will each generate and configure a RSA private/public key pair&#x20;
* When the TSS Node receives a task, it will construct CallbackRequest and generate the JWT token using its RSA private key&#x20;
* The TSS Node will send a request to the callback server via the HTTP POST method&#x20;
* The callback server will validate the JWT signature using the TSS Node's RSA public key&#x20;
* The callback server will construct CallbackRequest and sign it using its RSA private key before sending the JWT back to the TSS Node
* Once the TSS Node receives the HTTP response, it will validate the JWT signature using the callback server's RSA public key&#x20;
* Once validated, the TSS Node will execute or reject the task based on the response from the callback server

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/tss_node_callback_server.png" />

To get started with the TSS Node callback mechanism, please refer to the following steps:&#x20;

1. Callback Server Requirements&#x20;
2. Callback Server Configuration&#x20;
3. TSS Node Configuration&#x20;
4. TSS Node & Callback Server Startup

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# TSS Node Configuration & Callback Server Startup
Source: https://cobo.com/developers/v1/overview/mpc-wallet/callback/tss-node-configuration-and-callback-server-startup



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## TSS Node Configuration

You’ll need to complete the following steps on the server where the TSS Node is deployed.

* Copy the callback server’s RSA public key file to the configs directory of the TSS Node

```
cobo-tss-node-generic
├── configs
│   ├── callback-server-pub.key
│   └── cobo-tss-node-config.yaml
```

* Modify the cobo-tss-node-config.yaml file
* cb\_server
* service\_address indicates the callback server address
* pubkey\_path indicates the file path of the callback server’s RSA&#x20;
* token\_expire\_minutes indicates the timeout period of the JWT (unit: minutes)&#x20;
* retry\_time indicates the number of retries if the callback request fails
* sleep\_seconds indicates the time interval between each retry (unit: minutes)

You can configure multiple callback servers. The following output uses two callback servers as an example:

```
callback:
  cb_server:
    - service_address: http://callback-server-01:8080/v1/check
      pubkey_path: configs/callback-server-pub-01.key
    - service_address: http://callback-server-02:8080/v1/check
      pubkey_path: configs/callback-server-pub-02.key
  token_expire_minutes: 2
  retry_times: 60
  sleep_seconds: 60
```

## TSS Node & Callback Server Startup

Once the aforementioned configuration has been completed, you can start up the callback server and the TSS Node.&#x20;

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Introduction
Source: https://cobo.com/developers/v1/overview/mpc-wallet/mpc-introduction

MPC-TSS based Wallet

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Cobo MPC Wallet leverages advanced Multi-Party Computation (MPC) technology to implement a Threshold Signature Scheme (TSS).

With MPC-TSS technology, private key-shares are individually generated within
separate secure environments, encrypted, and divided amongst multiple parties.
These parties will jointly sign transactions without ever exposing their
individual key-share to one another, or materializing the full private key at
any point. This ensures that the private key never exists or resides in any one
device, effectively removing the single point of failure and insulating user
assets from security attacks and human errors.

In Cobo's MPC Wallet, a typical set up is 2-out-of-3 TSS, where
Cobo stores and manages one of the three key shares. The client holds one of
the three key shares. The last key share is either stored by the client in an
offline environment or entrusted to a dedicated third party key backup/recovery
service provide, i.e. insurance or security companies. Only Cobo and the client
are required to cooperate to sign transactions, the backup key share are only
needed in extreme conditions, e.g. one of Cobo or client's key share is
damaged or lost.

# Benefits

* No Single Point of Failure

  * Key sharding achieves decentralization and ensures that no unauthorized party can unilaterally move your funds, preventing asset loss from external hacks or internal fraud and collusion.

* Lower Transaction Fees

  * MPC-TSS runs entirely off-chain, minimizing gas fees while maximizing security.

* Asset Recovery Assurance

  * If your key-share is lost or compromised, or in the event of any catastrophic event or system failure, remaining key-shares can collaborate to ensure that you can access and recover your assets.

* Comprehensive Token Support

  * MPC technology is chain- and asset-agnostic by design, enabling easy onboarding of new tokens.
  * 1,200+ tokens across 27+ chains supported currently, encompassing the majority of active public blockchains, and we are constantly expanding this list.

* Easy and Safe Access to Web3

  * Securely connect to a multitude of DApps including DeFi, NFTs, DAOs, etc, and interact directly with Web3 using Cobo Connect browser extension.

* Enhanced Operational Flexibility

  * MPC technology allows for easy ongoing modifications to access controls and approval thresholds, enabling seamless operational adjustments as your organization scales.

# Key Features

## MPC-TSS Configuration

With MPC-TSS, a flexible quorum approval scheme (“m out of n” key-shares) can be implemented. Cobo recommends a “2 out of 3” configuration, where three MPC key-shares will be generated independently by you, Cobo, and an entrusted third party disaster recovery service provider. To sign transactions, at least two key-shares (you and Cobo) are required to participate. The key-share held by the entrusted third party disaster recovery service provider is securely stored offline at all times and is solely intended for backup and recovery purposes, such as if your key-share is lost or compromised, or in the rare event that Cobo services were disrupted.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/2-MPC-TSS-Configuration.png" />

## Disaster Recovery

Cobo MPC Wallet provides comprehensive key recovery capabilities to ensure that you have control and access to your assets under all circumstances. If your key-share is lost or compromised, you can initiate ‘soft’ key recovery to generate a new set of three MPC key-shares. In the unlikely event that Cobo MPC Wallet is no longer in service, you can initiate ‘hard’ key recovery with the entrusted third party to reconstruct the MPC root extended private key and take over full control of your assets. These key recovery mechanisms are designed to ensure that you have the peace of mind that your assets are safe and protected at all times.

## Transaction Co-Management

With Cobo MPC Wallet, you can co-manage funds with your clients and/or business partners. Using Cobo's mobile SDK and Cobo’s authenticator app (external parties can seamlessly participate in transaction approval and signing. This extends the reach of custody technology beyond your organization to your entire business ecosystem.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/4-Transaction-CO-Management.png" />

## Advanced Risk Management

Cobo MPC Wallet utilizes Cobo’s superior risk management framework to effectively combat against every attack vector and cater to your compliance requirements. Through Cobo’s intuitive platform, you can effortlessly customize granular policy rules such as spending limits, whitelists, blacklists, and more, as well as implement real-time on-chain monitoring, screening rules and notification alerts.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/5-Policy.png" />

## Role-based Access Control and Custom Workflows

Cobo MPC Wallet offers role-based access controls and a highly customizable workflow engine that adapts to the specific needs and scale of institutions. You can set up roles such as Admin, Spender, Approver and Operator to segregate user privileges. You can also configure and automate authorization workflows to streamline your operations. To ensure the integrity of each operation, Cobo Auth mobile app serves as a 2FA to support multi-role and multi-level authentication.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/6-Role-based-Access-Control.png" />

## Wallet-as-a-Service Integration

Cobo MPC Co-managed Custody offers simple wallet APIs and plug-and-play SDKs, supporting wallet-as-a-service (WaaS) integration. You can easily and quickly deploy an enterprise-grade wallet infrastructure into your applications and manage thousands of tokens across the majority of active public blockchains within a single wallet interface.

Cobo WaaS allows you to generate and manage addresses on all supported chains, send and receive tokens, manage token sweep, interact with smart contracts, receive transaction notifications, view transaction history, and more. Cobo provides client libraries in five programming languages — Python, JavaScript, Golang, Java, and PHP.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/7-WaaS-API.png" />

To read our product documentation, please [click here](https://docs.cobo.com/cobo-mpc-waas/).

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Introduction
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/coboargus

Institution's Gateway to DeFi

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Introduction

Cobo Argus is built on top of [Cobo Safe](/v1/overview/smart-contract-wallet/cobosafe). It aims to be insitution's
gateway to DeFi. Cobo Safe overcomes the limitations of traditional smart
contract wallets, e.g. multi-signature wallets, by adding flexible access
control capabilities to allow teams access DeFi protocols without sacrificing
efficiency for security and providing advanced, proprietary financial
risk-management tools. Through role-based access controls, asset owners can
give specific access to operators for efficient, and controlled access and
interaction with DeFi protocols.

With Cobo Argus, asset owners are able to implement new or leverage existing
DeFi Bots for monitoring on-chain data (e.g. Pool weight change, TVL change
etc), executing automatic tasks like auto-claiming rewards, auto-transferring
or swapping tokens. Besides, the Bots will also provide risk-control
services like for auto-withdrawing, auto-deleveraging among different
protocols, etc.

To get started, please head to [https://argus.cobo.com/](https://argus.cobo.com/). Google Chrome is
recommended as the preferred web browser to use Cobo Argus.

## Cobo Argus’s Service

#### 1. Customize On-chain Access Control Services:

Customizable tiered authorization procedure and approval automation tools - Assign different roles to different team members for institution-wide collaboration

#### 2. Authorization strategies:

We provide easy-to-use authorization strategies on top DeFi protocols  with preset on-chain roles and permissions for users that don't have or have little technology background.

#### 3. Bots Services:

Bots could monitor on-chain data and send alerts according to triggers set. Bots can also  execute  automatic tasks like auto-claiming rewards, auto-transferring or swapping tokens with manual settings. Besides, the Bots will also provide risk-management services like for auto-withdrawing, auto-deleveraging among different protocols, etc.

#### 4. Services:

Alerts on price change, TVL change, collateral valuation change, smart contract upgrade can be configured with robotic tools.

#### 5. Smart Contract Based Wallet:

Argus provides the DeFi services above on top of the decentralized custody solution, smart contract based multi-sig wallet.

#### 6. Information (Coming Soon):

Security audit/rating, community news/update, security information update, update in the ecosystem and smart contract under collaboration, research report

## Cobo Argus Infrastructure

Cobo Argus consists of three layers: Base Layer, Functionality Layer, Application Layer.

* Base Layer：Also called the Wallet layer, it’s about the wallet or custody technology. Argus is built on top of the Gnosis Safe, a smart contract based multisig wallet. In future, the Argus can be also extended on the Account Abstraction wallet.
* Functionality Layer：In this layer, we aim to provide institutional-grade on-chain access control and workflow. Cobo Safe is a smart contract for on-chain access control and role delegation.
* Application Layer：In this layer, we focus on DeFi investment tools like DeFi bots, easy-to-use authorization strategies etc.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/argus_overview.png" />

## Cobo Argus Users

The typical users of Argus are mainly crypto institutions , e.g. DeFi farming teams, liquidity providers or arbitrage trading teams as well as traditional finance firms like family offices, VCs, etc.

For DeFi teams/liquidity providers, they hold large amounts of crypto and require an efficient liquidity management solution that brings good yield on the treasury while having good risk management tools such as multi-sig access, role-based delegation and automation features.

Traditional finance firms are eager to participate in the multi-billion dollar and exploding DeFi industry, however, they have no tools to reliably access DeFi protocols and the uncertainty and unknowns deter them from maximizing their DeFi potential.

## DeFi Market Analysis/Insights

With the emerging blockchains and dApps in crypto industry, for institutional DeFi participants that have large fund sizes and own a variety of different crypto assets, they typically access multiple protocols and have team members (eg: miners, traders, investment managers, accountants, and admin operator) that will require various levels of access control.

However, with the lack of collaboration tools to mitigate access control risks when interacting with DeFi protocols and the lack of custom workflow support, means that the onus of protecting and controlling the security of their crypto lies on just a few key people or a person in the organization. This person or small group will hold disproportionate amounts of responsibility and risk in ensuring the security of their crypto.

Some of the DeFi teams are acutely aware of the lack of institutional-focused solutions in the market and might have tried developing their own systems of team collaboration and risk management role delegation and automatic alert systems. However, this is technically challenging and resource-heavy.

As the industry matures, the need for dedicated blockchain DeFi solutions will grow - it will support the advanced needs of crypto native/visionary teams that require cross-chain access, role-based controls, risk management and collaboration with multiple different DeFi protocols on different blockchains.

An example of how dangerous this is, in the case of QuadrigaCX CEO’s alleged death that took with him the passcodes that locked around US\$250 million in customer assets. Another example is exchanges that lost funds due to a lack of internal risk controls due to staff misappropriation of funds, or carelessness/fraud of key persons. These problems can be mitigated through the removal of single points of failure, distributing risks through multi-sig approvals, delegated access controls, and multi-approval custom workflow engines with strict rules. We provide Argus as a solution in different environments, based on your organization’s needs.

To read our product documentation, please [click here](https://docs.cobo.com/cobo-argus/v/cobo-argus-v2-en-documentation/).

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Introduction
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/cobosafe

Access Control Framework for Smart Contract Wallets

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Introduction

Cobo's Smart Contract Wallet solution, dubbed as "Cobo Safe", is a smart
contract based access control framework on EVM compatible blockchains. It is
designed and implemented as a fully open source, transparent, permissionless,
modular smart contract framework that can be easily used with any smart
contract based wallets, such as Account Abstraction wallets, Gnosis Safe
wallet, etc. to add flexible access control, delegation, automation
capabilities.

The first version of Cobo Safe was implemented as a [Gnosis
Safe](https://safe.global/) module, which added flexible role based access
control and parameter-level access control to the de factor multi-sig wallet in
the ethereum ecosystem. Cobo Safe V2 adopted a more modular architecture and
underpins the [Cobo Argus](/v1/overview/smart-contract-wallet/coboargus), an all-in-one on-chain solution
institution's DeFi investment.

Cobo Safe is deployed on multiple EVM blockchains. Users can use dedicated
[tools](/v1/sdks-and-tools/tools/pycobosafe), [SDKs](/v1/sdks-and-tools/sdks/cobo-safe/python) or [Cobo Argus](/v1/overview/smart-contract-wallet/coboargus) web interface to
interact with Cobo Safe contracts.

## How to Use Cobo Safe

### Create Safe Roles

Owners can create customized safe roles through Cobo Safe, such as "harvesters, traders, etc.” They are then able to set up smart contracts for DeFi projects, and set specific contractual permissions so that transactions can take place within restricted limits.
Delegate permissions to Members
After creating the role, you need to assign the role to a specific Member, and the Member can complete the transaction within the transaction parameters specified in the role by means of a single signature, improving the efficiency while ensuring the security of the transaction.

### Import Authorizer contracts

If you require deep parameter-level control over the transactions that a member can execute, you can import an Authorizer contract for the target contract, whereby all interactions initiated by that member with the target contract will be restricted by the Authorizer contract.
Cobo also offers a custom Authorizer contract service, if you require it, you can contact [argussupport@cobo.com](mailto:argussupport@cobo.com)

### Setting a Whitelist for Token Transactions

You can restrict Members to only send specific Tokens to whitelist addresses.
Note that currently this feature is only available by ABI call. It’s not supported on the Argus website yet. But we will support it as soon as possible.

### Single-sig DeFi Transactions

Members can connect to the DeFi program through Wallet Connect and perform DeFi transactions within their permitted role.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Introduction
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/1_overview



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

`Cobo Safe` is an [open-source](https://github.com/CoboGlobal/cobosafe) access control framework for smart contract wallets. Developed by Cobo, this framework allows the `Owner` of a smart contract wallet to delegate certain operations (e.g., transferring tokens, interacting with specific smart contracts) to the `Delegate`. The `Delegate` can then perform authorized wallet operations on behalf of the `Owner`.

The `Cobo Safe` framework includes the following components:

* **Cobo Account:** The wrapper of a smart contract wallet in the `Cobo Safe` framework.
* **Owner:** A privileged user who owns the smart contract wallet. The `Owner` can delegate `Permissions` to other users (i.e., `Delegates`) in a `Cobo Safe` framework.
* **Delegate:** A user of least privilege in a `Cobo Safe` framework. The `Delegates` can ***only*** perform wallet operations as authorized by the `Owner`.
* **Permission:** The authority granted within a `Cobo Account`. In other words, a user's ability to initiate certain Ethereum transactions from the smart contract wallet.
* **Role:** Each `Role` is associated with a set of `Permissions`. The `Owner` can pre-configure a set of `Permissions` for each `Role`, and then delegate a `Role` to the `Delegate` with the help of a `Role Manager`.
* **Role Manager:** A module that is used to manage each `Delegate` and its `Role.`Only the `Owner` is authorized to modify the settings of a `Role Manager`. In general, each `Cobo Account` will only have one `Role Manager`.
* **Authorizer:** A module that is used to examine the `Permissions` granted to a `Delegate`. The `Authorizer` will check the transactions sent by the `Delegate` according to the configuration of the `Owner`. Unauthorized transactions will be rejected by the `Authorizer`.

`Cobo Safe` ensures an easily adaptable and modular access control framework by combining built-in and customized `Authorizers`.

By leveraging `Cobo Safe`, Cobo Argus V2 effectively implements role-based access controls (RBAC) to enhance the transparency and flexibility in DeFi investments.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Overview
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/2_1_account



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

`Cobo Account` is the smart contract wallet in a `Cobo Safe` framework. Each `Cobo Account` contract should implement the `Account` interface as follows:

```solidity
struct CallData {
    uint256 flag; // 0x1 delegate call, 0x0 call.
    address to;
    uint256 value;
    bytes data; // calldata
    bytes hint;
    bytes extra; // for future support: signatures etc.
}

struct TransactionResult {
    bool success; // Call status.
    bytes data; // Return/Revert data.
    bytes hint;
}

interface IAccount {
    function execTransaction(CallData calldata callData) external returns (TransactionResult memory result);

    function execTransactions(
        CallData[] calldata callDataList
    ) external returns (TransactionResult[] memory resultList);

    function getAccountAddress() external view returns (address account);
}
```

Developers can also derive smart contracts from the `Cobo Account` base contract to adapt to different underlying smart contract wallets (e.g., Safe).

A `Delegate` can call the `execTransaction()` function to send transactions. The `execTransaction()` function will invoke the `Authorizer` module to verify whether the `Delegate` is authorized to execute such transactions.

The `getAccountAddress()` function will return a wallet address where the funds are stored and where the transactions originated from.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Cobo Safe Account
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/2_2_cobosafe



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

`Cobo Safe Account` uses [Safe](https://safe.global/) (previously `Gnosis Safe`) as the underlying smart contract wallet. It is a multi-sig wallet where each transaction will require signatures from multiple Safe `Owners` for approval. `Cobo Safe Account` is the default account supported on `Cobo Argus`.

By leveraging the `Cobo Safe` framework, Safe `Owners` can delegate DeFi permissions to `Delegates.`The `Delegates` can then initiate transactions in the `Cobo Safe Account` and complete their authorized operations using **a single signature**.

`Cobo Safe Account` is built on top of the [Gnosis Safe Module](https://docs.safe.global/learn/safe-core/safe-core-protocol/modules-1). As such, the `Cobo Safe Account` is also referred to as the `Cobo Safe Module`.

The `Account Address` of a `Cobo Safe Account` is the underlying contract address of `Safe`.

`Cobo Safe Account` sends transactions with `execTransactionFromModuleReturnData` as follows: &#x20;

```solidity
contract CoboSafeAccount is BaseAccount {

    /// @dev Execute the transaction from the Safe.
    function _executeTransaction(
        TransactionData memory transaction
    ) internal override returns (TransactionResult memory result) {
        // execute the transaction from Gnosis Safe, note this call will bypass
        // Safe owners confirmation.
        (result.success, result.data) = IGnosisSafe(payable(safe())).execTransactionFromModuleReturnData(
            transaction.to,
            transaction.value,
            transaction.data,
            transaction.flag.isDelegateCall() ? Enum.Operation.DelegateCall : Enum.Operation.Call
        );
    }

    /// @dev The account address is the Safe address.
    function _getAccountAddress() internal view override returns (address account) {
        account = safe();
    }
}
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Cobo Smart Account
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/2_3_cobosmart



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

`Cobo Smart Account` is a simple smart contract wallet for storing digital assets and sending transactions.

The `Account Address` of a `Cobo Smart Account` will be the address of the underlying smart contract.&#x20;

`Cobo Smart Account` sends transactions using  `call` and  `delegatecall` as follows:

```solidity
contract CoboSmartAccount is BaseAccount {
    /// @dev Perform a call directly from the contract itself.
    function _executeTransaction(
        TransactionData memory transaction
    ) internal override returns (TransactionResult memory result) {
        address to = transaction.to;
        uint256 value = transaction.value;
        bytes memory data = transaction.data;
        if (transaction.flag.isDelegateCall()) {
            // Ignore value here as we are doing delegatecall.
            (result.success, result.data) = address(to).delegatecall(data);
        } else {
            (result.success, result.data) = address(to).call{value: value}(data);
        }
    }

    /// @dev The contract itself.
    function _getAccountAddress() internal view override returns (address account) {
        return (address(this));
    }
}
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Send Transactions
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/2_4_send_tx



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

`Delegate` can call either `execTransaction()` or `execTransactions()` to send transactions.&#x20;

The following uses `execTransaction()` as an example, where the `CallData` struct is passed in as a parameter.&#x20;

```solidity
struct CallData {
    uint256 flag; // 0x1 delegate call, 0x0 call.
    address to;
    uint256 value;
    bytes data; // calldata
    bytes hint;
    bytes extra; // for future support: signatures etc.
}
```

Each field in the struct is defined as follows: &#x20;

* **flag:** The call type. `0` indicates `call` and `1` indicates `delegatecall`. Note that each type of call comes with different access controls.
* **to**: The target smart contract to be called. &#x20;
* **value**: The ETH amount of the transaction when the contract is called.&#x20;
* **data**: The `calldata` of a transaction (i.e., `abi.encoded` parameters of a contract call).
* **hint**: When the `hint` field is set, the `Authorizer` will optimize the validation process by executing a fast path. This helps reduce gas consumption.

To generate a `hint`, you can execute an `eth_call` to the `execTransaction()` function with the `hint` field left unset. The `TransactionResult` returned from the call will contain the correct `hint` value.

The above process can be achieved using [Cobo Safe SDKs](/v1/sdks-and-tools/sdks/cobo-safe/js). The following uses Cobo Safe SDKs in Javascript as an example.

```js
const {CoboSafeAccount} = require("jscobosafe");
const {ethers} = require("ethers");
const ERC20_ABI = require("./ERC20.json");

require("dotenv").config();
const PRI_KEY = process.env.PRIV;
const COBO_SAFE_ADDRESS = process.env.COBOSAFE

const provider = new ethers.JsonRpcProvider("https://rpc.ankr.com/polygon")
const signer = new ethers.Wallet(PRI_KEY, provider);
const coboSafe = new CoboSafeAccount(COBO_SAFE_ADDRESS, signer)
const delegate = coboSafe.delegate;

const WMATIC_ADDRESS = "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270";

async function main(){
    console.log("CoboSafe", coboSafe.address);
    console.log("Safe", await coboSafe.safe());
    console.log("Delegate", coboSafe.delegate);

    let tx;

    // Connect with the contract as other ethers.js signers do.
    const token = new ethers.Contract(WMATIC_ADDRESS, ERC20_ABI, coboSafe);

    console.log(await token.balanceOf(await coboSafe.safe()))
    tx = await token.transfer(delegate, 1);
    await tx.wait()
    console.log(await token.balanceOf(await coboSafe.safe()))
}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});

```

`Cobo Safe` offers SDKs in [Python](https://github.com/coboglobal/pycobosafe) and [Javascript](https://github.com/coboglobal/jscobosafe).
<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Role Manager
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/3_rolemanager



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

`Cobo Safe` is designed in the [Role-Based Access Control (RBAC)](https://en.wikipedia.org/wiki/Role-based_access_control) approach.

The admins of an organization can create a `Role` and assign permissions to the `Role`. Team members, often referred to as `Delegates` in `Cobo Safe`, can only acquire permissions through their delegated roles.

`Role Manager` is a module in `Cobo Safe`. It is used to manage the `Delegate-Role` relationship.

Developer can create their own `Role Managers` by implementing the following interfaces:

```solidity
interface IRoleManager {
    function getRoles(address delegate) external view returns (bytes32[] memory);

    function hasRole(address delegate, bytes32 role) external view returns (bool);
}
```

* `getRoles()` is used to query the `Role` or `Roles` assigned to a `Delegate`
* `hasRole()` is used to check whether a specific `Role` has been assigned to the `Delegate`

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Overview
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_1_authorizer



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

`Authorizer` is the core module in `Cobo Safe` that is used to implement access controls.

All transactions sent by `Delegates` via `execTransaction()` must be approved by the `Authorizer` before execution.

An `Authorizer` has to implement the following interfaces:

```solidity
interface IAuthorizer {
    function flag() external view returns (uint256 authFlags);

    function preExecCheck(TransactionData calldata transaction) external returns (AuthorizerReturnData memory authData);

    function postExecCheck(
        TransactionData calldata transaction,
        TransactionResult calldata callResult,
        AuthorizerReturnData calldata preAuthData
    ) external returns (AuthorizerReturnData memory authData);

    function preExecProcess(TransactionData calldata transaction) external;

    function postExecProcess(TransactionData calldata transaction, TransactionResult calldata callResult) external;
}
```

* **preExecCheck**: validate the transaction before it is executed (e.g., contract address, call method, parameters, ETH amount of the transaction)
* **postExecCheck**: validate the transaction and its outcomes after it has been executed (e.g., changes in wallet balance, leverage ratio in a DeFi protocol)
* **preExecProcess**: complete certain operations before the transaction is executed (e.g., recording the transaction amount)
* **postExecProcess**: complete certain operations after the transaction has been executed
* **flag**: the above four methods are not mandatory for an `Authorizer`; the `Authorizer` can indicate the specific functions that need to be executed by configuring `flag`

The following struct shows a transaction that is yet to be executed:

```solidity
struct TransactionData {
    address from; // `msg.sender` who performs the transaction a.k.a wallet address.
    address delegate; // Delegate who calls executeTransactions().
    // Same as CallData
    uint256 flag; // 0x1 delegate call, 0x0 call.
    address to;
    uint256 value;
    bytes data; // calldata
    bytes hint;
    bytes extra;
}
```

* **from**: the `msg.sender` of the transaction (e.g. the `from` value for a `Cobo Safe Account` will be the contract address of Safe)
* **delegate**: the `Delegate` who sent the transaction; `Authorizer` will use this value to review whether the transaction is authorized
* All other fields have the same definition as that for `CallData`

`postExecCheck` has two additional parameters:

* `TransactionResult:` the status and output of a transaction after it has been executed
* `AuthorizerReturnData:`data returned by `preExecCheck`

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Authorizer Example
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_2_sample



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

In this example, the following access controls are implemented by `SampleAuthorizer`:

* (Before a transaction is executed) validate that the transaction amount is below 1,000 wei
* (After a transaction has been executed) validate that the initiator of the transaction has a wallet balance greater than 10,000 wei &#x20;

```solidity
// SPDX-License-Identifier: LGPL-3.0-only
pragma solidity ^0.8.19;

import "../base/BaseAuthorizer.sol";

contract SampleAuthorizer is BaseAuthorizer {
    bytes32 public constant NAME = "SampleAuthorizer";
    uint256 public constant VERSION = 1;
    uint256 public constant flag = AuthFlags.FULL_MODE;

    constructor(address _owner, address _caller) BaseAuthorizer(_owner, _caller) {}

    function _preExecCheck(
        TransactionData calldata transaction
    ) internal override returns (AuthorizerReturnData memory authData) {
        if(transaction.value < 1000){
            authData.result = AuthResult.SUCCESS;
        }else {
            authData.result = AuthResult.FAILED;
            authData.message = "Value over 1k not allowed";
        }
    }

    function _postExecCheck(
        TransactionData calldata transaction,
        TransactionResult calldata callResult,
        AuthorizerReturnData calldata preData
    ) internal override returns (AuthorizerReturnData memory authData) {
        if(transaction.from.balance > 10000){
            authData.result = AuthResult.SUCCESS;
        }else{
            authData.result = AuthResult.FAILED;
            authData.message = "Wallet balance dropped below 10k";
        }
    }
}
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# BaseACL
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_3_ACL



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

To implement access controls for a contract call using `BaseAuthorizer`, developers would typically need to manually write `abi.decode` codes in order to decode [complicated transaction data](https://docs.soliditylang.org/en/latest/abi-spec.html).

To simplify this process, `Cobo Safe` has introduced the `BaseACL` contract, which is based upon `BaseAuthorizer`.

Developers can use `BaseACL` to define a function declaration to be exactly the same as the function of the target contract they intend to control. By doing so, the compiler will automatically generate the decoding codes. Developers can then focus on coding the core access control logic within the function body.

`BaseACL` only implements the `preExecCheck` function, which is commonly used for access control validation. Developers can, however, extend `BaseACL` to configure customized access controls at both the address and function levels.

The process of using `BaseACL` to implement a customized `Authorizer` is as follows:

1. Configure variables such as `NAME` and `VERSION`.
2. Implement the `contracts()` function. A list of smart contract addresses controlled by the  `Authorizer` will be returned. The `Authorizer` will continue the validation process only if the `to` address of a transaction is in the whitelist. Otherwise, the `Authorizer` will directly reject the transaction.
3. Implement functions that are used to conduct access control validation for the target contract. These functions should be exactly the same as the function declarations of the target contract. However, they should not return any values and should not be decorated as `payable`. We recommend that you convert them to `external view` (i.e., modifying the smart contract state is not allowed). If you choose not to follow this approach, additional caller checks must be placed appropriately.
4. When a validation function is called, its parameters must be identical to those used in the smart contract call. This ensures that you can verify the parameters in a validation function body by directly using Solidity's `require()` statement. If the validation fails, the `Authorizer` will reject the transaction.
5. If the `Authorizer` needs to manage multiple smart contracts, a `modifier` named `onlyContract` must be used in a validation function to verify the contract address of the transaction. This prevents the `Delegate` from calling another smart contract that contains the same function.

The following example uses `BaseACL` to implement a customized `Authorizer`. The `Authorizer` allows `Delegate` to engage in yield farming activities on PancakeSwap.

* `Delegate` is allowed to call the `approve()` function of LP Token but the `spender` is restricted to `MasterChef`.
* `Delegate` is allowed to call the `deposit()` function of `MasterChef` and the `pid` parameter value is 3.
* `Delegate` is allowed to call the `withdraw()` function of `MasterChef` and the `pid` parameter value is 3.

```solidity
// SPDX-License-Identifier: LGPL-3.0-only
pragma solidity ^0.8.19;

import "../base/BaseACL.sol";

contract SampleFarmACL is BaseACL {
    bytes32 public constant NAME = "SampleFarmACL";
    uint256 public constant VERSION = 1;

    address public constant LP_TOKEN = 0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16;
    address public constant MASTER_CHEF = 0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652;

    constructor(address _owner, address _caller) BaseACL(_owner, _caller) {}

    // Configure a list of smart contracts controlled by Authorizer
    // Transaction to addressess beyond this list will be rejected
    function contracts() public view override returns (address[] memory _contracts) {
        _contracts = new address[](2);
        _contracts[0] = LP_TOKEN;
        _contracts[1] = MASTER_CHEF;
    }

    // When approve() is called for LP Token only MasterChef address
    // is a valid spender.
    function approve(address spender, uint256 amount) 
        external view 
        onlyContract(LP_TOKEN)
    {
        require(spender == MASTER_CHEF, "approve: Invalid spender");
    }

    // When deposit() function is called the pid parameter value should be 3
    function deposit(uint256 _pid, uint256 _amount) 
        external view 
        onlyContract(MASTER_CHEF)
    {
        require(_pid == 3, "deposit: Pool is not allowed");
    }

    // When withdraw() function is called the pid parameter value should be 3
    function withdraw(uint256 _pid, uint256 _amount) 
        external view 
        onlyContract(MASTER_CHEF)
    {
        require(_pid == 3, "withdraw: Pool is not allowed");
    }
}
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Hint
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_4_hint



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

You can add additional data, referred to as `hint`, during a smart contract call in order to accelerate the validation process and save on gas fees.

The `hint` field can be passed in in a `CallData` struct as follows when a transaction is sent to an `Authorizer`:

```solidity
struct CallData {
    uint256 flag; // 0x1 delegate call, 0x0 call.
    address to;
    uint256 value;
    bytes data; // calldata
    bytes hint;
    bytes extra; // for future support: signatures etc.
}
```

With `ArgusRootAuthorizer`, for instance, multiple `Roles` can be assigned to a `Delegate` and each `Role` can be associated with multiple `Authorizers`. A transaction will be approved if it successfully passes validation from any of these `Authorizers`. In this case, `Role` and `Authorizer` can be used as `hint` to determine the specific `Authorizer` whose validation the transaction will pass:

1. Execute the `execTransaction()` function by making an `eth_call` call without setting the `hint` field. The `hint` field returned in `TransactionResult` will be the `hint` of this transaction.
2. Pass in this `hint` to `CallData`.
3. Decode `hint` in `ArgusRootAuthorizer` to query the `Role` and `Authorizer`.
4. Use `Role Manager` to validate whether the `Role` obtained in step 3 corresponds to the `Delegate` of this transaction.
5. Validate whether the `Authorizer` obtained in step 3 has been registered in `ArgusRootAuthorizer`.
6. The `hint` is considered invalid if either step 4 or step 5 fails. The transaction will be directly rejected.
7. The `hint` is considered valid if both step 4 and step 5 succeed. You can use the `Authorizer` specified in the `hint` to validate the transaction.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Other Authorizers
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/4_5_others



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

`Cobo Safe` is embedded with multiple types of built-in `Authorizers`.

### FuncAuthorizer

`FuncAuthorizer` is a simple `Authorizer` that is used to validate the address and the function of a smart contract call.

Assume that an `Owner` wants to authorize a `Delegate` to transfer `USDT` via Ethereum. This can be achieved through the following configuration of `FuncAuthorizer`:

1. Validate that the `USDT` contract address is `0xdAC17F958D2ee523a2206206994597C13D831ec7.`
2. Validate that the transaction will invoke the `transfer(address,uint256)` function. Note that this function must follow the [contract ABI specification](https://docs.soliditylang.org/en/v0.8.19/abi-spec.html#function-selector).
3. Call `addContractFuncs()` or `addContractFuncsSig()` of `FuncAuthorizer` to add the above address and function.

Please note that `FuncAuthorizer` only validates the address and the function of a smart contract call. It does not validate the parameters that are passed in when the contract is called. For example, `FuncAuthorizer` cannot be used to configure the receipt or the USDT transaction amount. You will need to manually write an ACL instead to implement access controls at the granular level.

### TransferAuthorizer

`TransferAuthorizer` allows you to validate the token `type` and `receipt` of a transaction using the `addTokenReceivers` function. The `Delegate` can transfer the authorized `type` of tokens directly to the `receipt`.

Note that for ERC-20 tokens, the token `type` will be the token address. For native tokens, the token `type` will be `0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`.

### ArgusRootAuthorizer

`ArgusRootAuthorizer` is the default type of `Authorizer` on Cobo Argus. `ArgusRootAuthorizer` is not used for validation purposes. Instead, it is used to maintain a set of `Sub-Authorizers`.

`ArgusRootAuthorizer` is also designed in the [Role-Based Access Control](https://en.wikipedia.org/wiki/Role-based_access_control) (RBAC) framework. You can use `ArgusRootAuthorizer` to configure one or multiple `Sub-Authorizers` for each `Role`.

When a transaction is sent to `ArgusRootAuthorizer`:

1. `ArgusRootAuthorizer` will query the `Delegate` of the transaction and identify the `Role` assigned to the `Delegate` with the help of a `Role Manager`.
2. `ArgusRootAuthorizer` will query the `Sub-Authorizers` associated with each `Role`.
3. `ArgusRootAuthorizer` will call the `Sub-Authorizers` associated with each `Role`. If the transaction passes validation from any of these `Sub-Authorizers`, it will be approved. If the transaction fails validation from all of these `Sub-Authorizers`, it will be rejected.

If a `Sub-Authorizer` contains both `preExecCheck` and `postExecCheck`, a transaction will be approved only if it passes validation from both functions.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Argus Integration
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/5_argus



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

[`Cobo Argus`](https://argus.cobo.com/) is a smart contract-based on-chain digital asset management solution. Using `Cobo Safe` as its functionality layer, `Cobo Argus` implements role-based access controls to help you improve workflow efficiency and enhance internal risk management. The deployment structure of `Cobo Safe` in `Cobo Argus` is as follows:

![](https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/overview/smart-contract-wallet/argus.png)

In `Cobo Argus`, `Cobo Safe Account` is used to manage the access control policies of the `Safe Wallet`. `Cobo Safe Account` uses `ArgusRootAuthorizer` as its `Root Authorizer`. Users can then configure `Roles` and `Sub-Authorizers` based on their business needs:

* Each `Sub-Authorizer` indicates one type of `Permission`.
* If a `Role` is associated with multiple `Sub-Authorizers`, it indicates that this `Role` is associated with a set of `Permissions`.
* Different types of `Roles` can be combined to form an `Authorization Strategy`. This allows the`Delegate` to complete a set of pre-configured investment operations in a DeFi protocol. `Cobo Argus` has integrated a number of `Authorization Strategies` by default.

## Workflow

**When a `Safe Owner` delegates `Roles` to a `Delegate`, the workflow is as follows:** &#x20;

1. `Safe Owner` creates a `Cobo Safe Account` and enables a `Module` on Safe.
2. `Safe Owner` configures the `Root Authorizer` and `Role Manager`.
3. `Safe Owner` adds the address of the `Delegate` to the whitelist under the `Cobo Safe Account`.
4. `Safe Owner` adds `Sub-Authorizers` and `Roles` to the `Root Authorizer`. &#x20;
5. `Safe Owner` assigns `Roles` to the `Delegate`.&#x20;

**When a `Delegate` executes a transaction, the workflow is as follows:**&#x20;

1. `Delegate` sends a transaction via the  `Cobo Safe Account`.
2. `Cobo Safe Account` validates whether the address of the `Delegate` has been whitelisted. If no, the transaction will be rejected. If yes, the transaction will be sent to the `Root Authorizer`.
3. `Root Authorizer` queries the `Roles` associated with the `Delegate` with the help of a `Role Manager`.&#x20;
4. `Root Authorizer` locates one or multiple `Sub-Authorizers` associated with each `Role`.
5. If the transaction passes validation from any of these `Sub-Authorizers`, it will be approved. Otherwise, the transaction will be rejected.
6. Once the transaction is approved, `Cobo Safe Account` will call `Safe` to initiate the transaction.
7. After the transaction is executed, `Root Authorizer` will validate the transaction via `postExecCheck`.&#x20;
8. The transaction sent by the `Delegate` is completed.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Security Audit
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/6_audit



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

At Cobo, we take extensive measures to ensure the utmost security of our platform and maintain the highest levels of protection for your digital assets.

The underlying smart contracts of Cobo Safe have undergone a comprehensive review conducted by [BlockSec](https://blocksec.com/), a blockchain auditing company founded by top-notch security researchers.

You may [click here](https://github.com/CoboGlobal/cobosafe/blob/master/docs/blocksec_argus_v1.0_signed.pdf) to view the security report or check our source codes [here](https://github.com/CoboGlobal/cobosafe).

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Deployed Addresses
Source: https://cobo.com/developers/v1/overview/smart-contract-wallet/en/7_deployment



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

The majority of smart contracts in the `Cobo Safe` framework are deployed as non-upgradable [`Minimal Proxy Contracts`](https://eips.ethereum.org/EIPS/eip-1167).

The `Cobo Factory` contract, which has been deployed across six blockchains, is used to implement `Cobo Safe` smart contracts:

```
0xC0B00000e19D71fA50a9BB1fcaC2eC92fac9549C
```

You can examine the latest implementation registered in `Cobo Factory` with the `factory` command of the [`pycobosafe`](https://github.com/coboglobal/pycobosafe) tool. As of July 3, 2023, the following `Cobo Safe` smart contracts have been successfully deployed.

**Ethereum Mainnet**:

```
  ArgusAccountHelper: 0xB4d7111432C2827B58331802E1759e9c91e83282
  ArgusViewHelper: 0xF97BB9AF9FE6A68b324EdBcd0fE698E631F5113A
  CoboSafeAccount: 0xE7168444CF4c25800C2817BFDC6dcf17C261994d
  FlatRoleManager: 0x2F2FDDb984cdEC4318D8d87BC70821e9B9Ed8e7E
  ArgusRootAuthorizer: 0x7Ba3CC542b70f8F1D6282dae222235D42CFd34CD
  FuncAuthorizer: 0x92DdB2B7D17FF42078AFFf98721F6d1E38083ED6
  TransferAuthorizer: 0x2148c4F124029c3A18CFcC7A86A67A5Bf4D88658
  1inchV5Authorizer: 0xfecE55912861a401738604c52998604ba45115a1
  ParaswapBotAuthorizer: 0x47219e2f187a145De306f0ca882A0304D0AE912e
  ZeroXBotAuthorizer: 0xC97d4AA85e7F3c7553555608A83Cb973E68d48f3
  LidoWithdrawRequestAuthorizer: 0xAEadb2ac5E24a84fcEafFee9C6CDB214016cbE8d
  StargateClaimAuthorizer: 0x818ED168Ab85648EF2404Ad09AB6D28C27bE6E24
  StargateDepositAuthorizer: 0x0cfaC7992143056705B4d2710aA60528A8a69ae9
  StargateWithdrawAuthorizer: 0xfF0260Ca377183d27169CCa3BEACac82601522E9
  ConvexAuthorizer: 0xe2bc41Cd63ae7faFCacFC58f643753D571fe42EB
  ConvexFraxAuthorizer: 0xf47e86bB65b2058aE21F39016b64D4EBd7396723
  LybraMintAuthorizer: 0x7A9aBCE81C6855F33FCbA924838Ce0f3e432CCC9
  LybraWithdrawAuthorizer: 0x03b6F925841B031356F83EDCe5263e1Fd15e4b99
```

**Optimism**:

```
  ArgusAccountHelper: 0x10eD590973dbd028556528AEbA962240C47F1963
  ArgusViewHelper: 0x41e5C89Bb2207AaF9ae07441f64b0b822aB8a6ac
  CoboSafeAccount: 0x37E369301beddd49574d22A7fa034d596766004B
  FlatRoleManager: 0x3D89555e239209F6Aa708520302eD8B4eD859791
  FuncAuthorizer: 0x54815296e3b5ed59Ec50be739Fa7CcA4E8de5eC0
  TransferAuthorizer: 0x8C230beB7649b016e52E85CF50777d3253068d6a
  1inchV5Authorizer: 0x07f2AD9A6299E89019793706Ae39A780b49CDdDc
  ParaswapBotAuthorizer: 0x7Ba3CC542b70f8F1D6282dae222235D42CFd34CD
  ArgusRootAuthorizer: 0xABA1D868D89F29b46499E84C73BdE47481Af8074
  ZeroXBotAuthorizer: 0x1552C84f6f09B6117dD95996d8220B37Ca6BDC4F
  StargateClaimAuthorizer: 0xe6f35629e03E755CC2f977DaAC0E45663B66c8E2
  StargateDepositAuthorizer: 0x73a08503931Bd6763C4CD60013802025F1fCc3D2
  StargateWithdrawAuthorizer: 0x58bF21e7a425c92C4Af55928FfA9b28a38f7d2cc
```

**BNB Smart Chain**:

```
  TransferAuthorizer: 0x1dB643a720856b1406499e7046414D317A5a6d4b
  ArgusRootAuthorizer: 0x2CdDc6897BaC48Aa25AA4bF640D1dfB7495c83CA
  ZeroXBotAuthorizer: 0x014cdaFcE570d84c0EB1157564A97602dEDb1aB1
  StargateWithdrawAuthorizer: 0x9f0910e9c31cC0442A9188264630Ef9E0dC51969
  ArgusAccountHelper: 0x912f37882e573Da600EdDf083d16526A841a5474
  CoboSafeAccount: 0x16119BF35b764e6AB83DEDA11719F5a5Bb0C4dfD
  FlatRoleManager: 0x5311Cc807625F54Eb810a4a0bEa5B4d2533961F0
  FuncAuthorizer: 0x6DDe0424ae9ADaf5d305e20720Be6B9BC3f5ae8a
  1inchV5Authorizer: 0x44362a387f5243be4a0355c706200ad2ea9b3CB7
  ParaswapBotAuthorizer: 0xD566FD8BF501Cd585Ed153Db828dcf880c1fE3fd
  StargateClaimAuthorizer: 0xbd9bDfF5636709cA9ff6a1598896D50Ce9d3E4cC
  StargateDepositAuthorizer: 0x96BF0122E8212A6A5296c981c7ef062EfE4F8E7f
  ArgusViewHelper: 0x2f5F6B42678704B5A738456D1320327cea95ae09
```

**Polygon**:

```
  ArgusAccountHelper: 0x725A581c9fC882f0C66c112B1CFf2AeAF502AA36
  ArgusViewHelper: 0x20D0b245f72018c0EC105eCEDd11400124b518DB
  FlatRoleManager: 0x16119BF35b764e6AB83DEDA11719F5a5Bb0C4dfD
  FuncAuthorizer: 0x6DDe0424ae9ADaf5d305e20720Be6B9BC3f5ae8a
  TransferAuthorizer: 0x9dB7299bBDDDBd30ac35A84Ca178a7E737357892
  ArgusRootAuthorizer: 0xc53d529e5aAD94E1fb3C70572968783Daa31c803
  ZeroXBotAuthorizer: 0xFBaeaee00d7031dd3dE73828DE143Cf7526f1A42
  1inchV5Authorizer: 0xD566FD8BF501Cd585Ed153Db828dcf880c1fE3fd
  CoboSafeAccount: 0x9e9b19394cD85d2620af2689B16B0a95F69176Dc
  ParaswapBotAuthorizer: 0x652F621315903b7B30D1BD9e05D24030d69e63eE
  StargateClaimAuthorizer: 0x2d9899Be6d1e57E3ee61Ee20DFb246fF22a0fdff
  StargateDepositAuthorizer: 0x294b34Ec45429afE5b2DdC700C850032d87a3766
  StargateWithdrawAuthorizer: 0x376819712D23F3a3775C416a1Ad5E7a8a05487d4
```

**Arbitrum**:

```
  ArgusAccountHelper: 0x33Ea27dBccE4C06AC8262229FF755FdD5ef5aEfd
  ArgusViewHelper: 0x7677E361aEC4ee6e13D27806BC914Dd35c0Da0D8
  CoboSafeAccount: 0x55059108c6b7F4f6085f485863EFE3e34D493368
  FlatRoleManager: 0x37c43Df81B967d9Ee54bCcc0202bC8962bF7c3c2
  FuncAuthorizer: 0x929fEA220AeEb5e09508fc1581202FeD84DcFD56
  TransferAuthorizer: 0x1552C84f6f09B6117dD95996d8220B37Ca6BDC4F
  ArgusRootAuthorizer: 0x87F038C515f58edc5b982914dd402bb71cca9b06
  ZeroXBotAuthorizer: 0x47026eF8D0b7FD1dba7a0acd3BD33B698BEca9de
  1inchV5Authorizer: 0xE7CA78dc87B54EF3e0Ed82cC77F449772C469414
  ParaswapBotAuthorizer: 0xe6f35629e03E755CC2f977DaAC0E45663B66c8E2
  StargateClaimAuthorizer: 0x73a08503931Bd6763C4CD60013802025F1fCc3D2
  StargateDepositAuthorizer: 0x58bF21e7a425c92C4Af55928FfA9b28a38f7d2cc
  StargateWithdrawAuthorizer: 0xABA1D868D89F29b46499E84C73BdE47481Af8074
  GmxGlpAuthorizer: 0x5cf9ad70AbC53dda7f99Cd3C651DC238F5Dc700B
```

**Avalanche:**

```
  ArgusAccountHelper: 0xC97d4AA85e7F3c7553555608A83Cb973E68d48f3
  ArgusViewHelper: 0xE016BdEEd6f31A3C509621104bFE103fa7476B12
  CoboSafeAccount: 0x7677E361aEC4ee6e13D27806BC914Dd35c0Da0D8
  FlatRoleManager: 0x55059108c6b7F4f6085f485863EFE3e34D493368
  FuncAuthorizer: 0x37c43Df81B967d9Ee54bCcc0202bC8962bF7c3c2
  TransferAuthorizer: 0x929fEA220AeEb5e09508fc1581202FeD84DcFD56
  ZeroXBotAuthorizer: 0x07f2AD9A6299E89019793706Ae39A780b49CDdDc
  1inchV5Authorizer: 0x7Ba3CC542b70f8F1D6282dae222235D42CFd34CD
  ParaswapBotAuthorizer: 0x83C7513604A7a4BfCA7A94f916bE7F2bA6b695e9
  StargateClaimAuthorizer: 0xb1314e31a606ecd8F30c29b91493885294453BA3
  StargateDepositAuthorizer: 0x30c4a1a21A14281c8EB5AE75fd874359D01200ED
  StargateWithdrawAuthorizer: 0x59E3C907abe047f731e570B56D671EdFE57d2277
  ArgusRootAuthorizer: 0x88c8575825A1BED902d284cCDF410A56d59074C0
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Wallet as a Service
Source: https://cobo.com/developers/v1/overview/waas-introduction



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Cobo Custody offers HTTP based SaaS APIs to allow users to access their crypto assets
or interact with blockchain applications on over 80 blockchains. The goal is to
make it easy for developers to build various kinds of blockchain applications,
such as cryptocurrency exchanges, token funds, payment platforms, asset-backed
lending platforms, DApps, mining pools, clould mining platforms and other
projects, by offloading the heavy-lift security and blockchain interaction
issues to Cobo's battle tested bank-grade technologies.

Developers may also store their digital assets with Cobo Custody, leveraging
Cobo's world-class omni-custody technologies.

Cobo Custody’s APIs enables a variety of capabilities:

* Generate addresses for bitcoin, ethereum, litecoin and 50 more main
* Manage crypto wallets and addresses
* Send and receive crypto coins or tokens
* View transaction history
* Set up API callbacks for interested events
* Stake in crypto projects
* Interact with DeFi, NFT smart contracts
* etc.

Besides HTTP based SaaS API, Cobo Custody also provides a web-based interface
([https://home.custody.cobo.com/](https://home.custody.cobo.com/)) that
supports customizable risk control policies:

* IP address whitelisting
* Address whitelisting
* Blacklists (supported by third-party institutional data)
* Multi-role approval
* One-touch emergency freeze
* Multi-layer transaction verification
* Transaction speed / amount limits for each token
* Hot,warm & Cold fund separation
* Low balance alerts
  The following is a screenshot of the web management interface:
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/webhomeEN.png" />

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Coin Details
Source: https://cobo.com/developers/v1/api-references/custody-wallet/coin_info

GET /v1/custody/coin_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the currency rate and unit for a given coin code. The endpoint requires authentication and takes a 'coin_code' parameter in the GET request.

<Tip> FAQ：[How do I query the withdraw fees?](/v1/faqs/coin-management#how-do-i-query-the-withdrawal-fees)</Tip>

#### Request

<ParamField query="coin" type="String" required>Coin code</ParamField>
<ParamField query="amount" type="Int">the amount you wish to send</ParamField>
<Tip>To accurately estimate handling fees, it is required to include the amount parameter. Otherwise, this endpoint will return the default transaction fee. Please note that the default transaction fee might not be very accurate.</Tip>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="coin" type="String">Coin code</ResponseField>
    <ResponseField name="display_code" type="String">Coin ticker symbol  (not unique, changeable, for reference only )</ResponseField>
    <ResponseField name="description" type="String">Coin code</ResponseField>
    <ResponseField name="decimal" type="Int">Coin balance decimal places</ResponseField>
    <ResponseField name="can_deposit" type="bool">Deposit accessibility</ResponseField>
    <ResponseField name="can_withdraw" type="bool">Withdraw accessibility</ResponseField>
    <ResponseField name="balance" type="String">Current balance</ResponseField>
    <ResponseField name="abs_balance" type="String">Absolute value of balance</ResponseField>
    <ResponseField name="fee_coin" type="String">Coin used for fee</ResponseField>
    <ResponseField name="abs_estimate_fee" type="String">Estimated fee</ResponseField>
    <ResponseField name="abs_estimate_fee_usd" type="String">Estimated fee(Convert to USD calculation) </ResponseField>
    <ResponseField name="confirming_threshold" type="Int">Confirmation threshold required for the coin</ResponseField>
    <ResponseField name="dust_threshold" type="Int">Coin minimum withdraw threshold</ResponseField>
    <ResponseField name="minimum_deposit_threshold" type="String">Coin minimum deposit threshold</ResponseField>
    <ResponseField name="token_address" type="String">Smart contract address for token (null for main-chain token)</ResponseField>
    <ResponseField name="require_memo" type="String">Memo for specified coins(EOS,XLM,XRP,IOST)</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/coin_info/",
    {
      "coin": "ETH",
      "amount": 1000000000000000000
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/coin_info/', {
      "coin": "ETH",
      "amount": 1000000000000000000
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/coin_info/", map[string]string{
      "coin": "ETH",
      "amount": 1000000000000000000
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "coin": "ETH",
      "display_code": "ETH",
      "description": "Ethereum",
      "decimal": 18,
      "can_deposit": true,
      "can_withdraw": true,
      "require_memo": false,
      "balance": "0",
      "abs_balance": "0",
      "fee_coin": "ETH",
      "abs_estimate_fee": "0.0003648",
      "abs_estimate_fee_usd": "5.67",
      "confirming_threshold": 12,
      "dust_threshold": 0,
      "token_address": ""
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Gas Station Balance
Source: https://cobo.com/developers/v1/api-references/custody-wallet/get_gas_station_balance

GET /v1/custody/get_gas_station_balance/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of assets of gas station. The response includes asset details such as coin, address, and balance.

#### Request

None

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="assets" type="object[]">
      <Expandable title="object">
        <ResponseField name="coin" type="String">The coin symbol</ResponseField>
        <ResponseField name="description" type="String">Full name of coin (not unique, changeable, for reference only)</ResponseField>
        <ResponseField name="decimal" type="String">Coin balance decimal places</ResponseField>
        <ResponseField name="balance" type="String">Current balance</ResponseField>
        <ResponseField name="abs_balance" type="String">Absolute value of balance</ResponseField>
        <ResponseField name="address" type="String">Address</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/get_gas_station_balance/',
    {},
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/get_gas_station_balance/', {}, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/get_gas_station_balance/", map[string]string{})
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "assets": [
        {
          "coin": "ETH",
          "description": "Ethereum",
          "decimal": 18,
          "balance": "446826793400000000",
          "abs_balance": "0.4468267934",
          "address": "0xb59c5dd6d35318937367391767a00dbdc4249041"
        },
        {
          "coin": "BSC_BNB",
          "description": "Binance Smart Chain",
          "decimal": 18,
          "balance": "0",
          "abs_balance": "0",
          "address": "0xb59c5dd6d35318937367391767a00dbdc4249041"
        }
      ]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transaction Details
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transaction

GET /v1/custody/transaction/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint retrieves a transaction by its ID from the WaaS API. The endpoint requires authentication and takes a single query parameter, 'id', which is the ID of the transaction to retrieve.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="id" type="String" required>Cobo Unique Transaction ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET" " /v1/custody/transaction/ ",
    {
      "id": "20210112173820000166329000003582",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch(
      "GET"
      " /v1/custody/transaction/ "
      {
          "id": "20210112173820000166329000003582",

      },
      api_key, api_secret, host
  ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  request(
      "GET"
      " /v1/custody/transaction/ "
      {
          "id": "20210112173820000166329000003582",

      })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "id": "20210112173820000166329000003582",
      "coin": "BTC",
      "display_code": "BTC",
      "description": "Bitcoin",
      "decimal": 8,
      "address": "19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku",
      "source_address": "bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v",
      "side": "withdraw",
      "amount": "80000",
      "abs_amount": "0.0008",
      "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
      "vout_n": 0,
      "request_id": "web_send_by_user_327_1610444045047",
      "status": "success",
      "abs_cobo_fee": "0",
      "request_created_time": 1610444045158,
      "created_time": 1610445878970,
      "last_time": 1610445878970,
      "confirmed_num": 3,
      "remark":"hello test",
      "tx_detail": {
        "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
        "blocknum": 665711,
        "blockhash": "00000000000000000007137dde44472364eb80126b7d98c12ffb8d37ba11ad33",
        "fee": 0,
        "actualgas": 17812,
        "gasprice": 1,
        "hexstr": ""
      },
      "source_address_detail": "bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v",
      "memo": "",
      "confirming_threshold": 3,
      "fee_coin": "BTC",
      "fee_amount": 50000,
      "fee_decimal": 8,
      "type": "external",
      "tx_request_type": ""
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transaction By Txid
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transaction_by_txid

GET /v1/custody/transaction_by_txid/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint retrieves transaction details by transaction ID. It requires authentication and takes a single query parameter 'txid' which is the transaction ID to retrieve details for. The response is a JSON object containing transaction details.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="txid" type="String" required>Transaction ID, which can be found on the corresponding public chain</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/transaction_by_txid/',
    {
      "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/transaction_by_txid/',
          {
           "txid":"239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transaction_by_txid/", map[string]string{
           "txid":"239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "id": "20210112173820000166329000003582",
      "coin": "BTC",
      "display_code": "BTC",
      "description": "Bitcoin",
      "decimal": 8,
      "address": "19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku",
      "source_address": "bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v",
      "side": "withdraw",
      "amount": "80000",
      "abs_amount": "0.0008",
      "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
      "vout_n": 0,
      "request_id": "web_send_by_user_327_1610444045047",
      "status": "success",
      "abs_cobo_fee": "0",
      "request_created_time": 1610444045158,
      "created_time": 1610445878970,
      "last_time": 1610445878970,
      "confirmed_num": 3,
      "remark":"hello test",
      "tx_detail": {
        "txid": "239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28",
        "blocknum": 665711,
        "blockhash": "00000000000000000007137dde44472364eb80126b7d98c12ffb8d37ba11ad33",
        "fee": 0,
        "actualgas": 17812,
        "gasprice": 1,
        "hexstr": ""
      },
      "source_address_detail": "bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v",
      "memo": "",
      "confirming_threshold": 3,
      "fee_coin": "BTC",
      "fee_amount": 50000,
      "fee_decimal": 8,
      "type": "external",
      "tx_request_type": ""
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By ID
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_id

GET /v1/custody/transactions_by_id/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by various parameters such as coin, address, side, and transaction ID range. The response includes transaction details such as transaction ID, coin type, amount, and timestamp.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="coin" type="String">Coin code (Does not return all currencies)</ParamField>
<ParamField query="side" type="enum(deposit / withdraw)">Deposit/withdraw </ParamField>
<ParamField query="address" type="String">Deposit/withdraw address is optional. If not included, all address history will be returned. </ParamField>
<ParamField query="max_id" type="String">The transaction history ID limit is optional. If not included, will by default return the most recent records.(cannot be used with min\_id) </ParamField>
<ParamField query="min_id" type="String"> Optional. If included, the sequence will be changed to time ASC. If not included, will by default return the most recent records, time DESC.(cannot be used with max\_id) </ParamField>
<ParamField query="limit" type="Integer">Page size is optional. If not included, the default size will be 50, and the maximum size will also be 50.</ParamField>
<ParamField query="include_financial" type="String">Request all transactions. If it is passed in, return all transactions(Including stacking, trading)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/transactions_by_id/',
    {
      "coin": "BTC_USDT",
      "side": "deposit",
      "max_id": 20181114183534062065000000483656
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/transactions_by_id/',
          {
              "coin": "BTC_USDT",
              "side": "deposit",
              "max_id": 20181114183534062065000000483656

          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transactions_by_id/", map[string]string{
      "coin": "BTC_USDT",
      "side": "deposit",
      "max_id": 20181114183534062065000000483656
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
          "id": "20221013214833000312228000005846",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "6000000",
          "abs_amount": "0.06",
          "txid": "L65954e38419b55abb10b37fc6fca54f",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668913144,
          "last_time": 1665668913144,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L65954e38419b55abb10b37fc6fca54f",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      },
      {
          "id": "20221013213858000312228000007739",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "23000000",
          "abs_amount": "0.23",
          "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668338625,
          "last_time": 1665668338625,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By Request IDs
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_request_ids

GET /v1/custody/transactions_by_request_ids/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing transaction information for the given request IDs. The request IDs should be provided as a comma-separated string in the 'request_ids' parameter of the GET request. The maximum number of request IDs that can be provided is 50.

<Tip> FAQ：[How to query the transaction details of a batch withdraw request?](/v1/faqs/transaction-management#how-to-query-the-transaction-details-of-a-batch-withdrawal-request)</Tip>

#### Request

<ParamField query="request_ids" type="String" required>Request ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    "GET",
    "/v1/custody/transactions_by_request_ids/",
    {
      "request_ids": "web_send_by_user_2045_1681202509548,IntegrationTest-758556063289348454"
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch("GET", "/v1/custody/transactions_by_request_ids/",
          {
              "request_ids": "web_send_by_user_2045_1681202509548,IntegrationTest-758556063289348454"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transactions_by_request_ids/", map[string]string{
      "request_ids": "web_send_by_user_2045_1681202509548,IntegrationTest-758556063289348454"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
        "id": "20230410161529000336305000000596",
        "coin": "COBO_HNS",
        "display_code": "COBO_HNS",
        "description": "",
        "decimal": 6,
        "address": "rs1qhqr75h43kxuj4qn42rn2a7kgrehmrx79z67l85",
        "source_address": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
        "side": "withdraw",
        "amount": "500",
        "abs_amount": "0.0005",
        "txid": "d9cf9cd81d8e74afd7638988fe0abe04874cf3dc0a91a92daee723a063efa648",
        "vout_n": 0,
        "request_id": "IntegrationTest-758556063289348454",
        "status": "success",
        "abs_cobo_fee": "0.000000025",
        "created_time": 1680853859732,
        "last_time": 1681114653298,
        "confirmed_num": 2,
        "remark":"hello test",
        "request_created_time": 1680853859732,
        "tx_detail": {
          "txid": "d9cf9cd81d8e74afd7638988fe0abe04874cf3dc0a91a92daee723a063efa648",
          "blocknum": 820583,
          "blockhash": "3cec854e701ae9c360f59a829f3089faaf24ce9ec4c7dad63494fcb8bc395d5c",
          "fee": 0,
          "actualgas": 250000,
          "gasprice": 1,
          "hexstr": ""
        },
        "source_address_detail": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
        "memo": "",
        "confirming_threshold": 2,
        "fee_coin": "COBO_HNS",
        "fee_amount": 550000,
        "fee_decimal": 6,
        "type": "external",
        "tx_request_type": ""
      },
      {
        "id": "20230411164409000324843000007282",
        "coin": "COBO_HNS",
        "display_code": "COBO_HNS",
        "description": "",
        "decimal": 6,
        "address": "rs1qhqr75h43kxuj4qn42rn2a7kgrehmrx79z67l85",
        "source_address": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
        "side": "withdraw",
        "amount": "50000",
        "abs_amount": "0.05",
        "txid": "f3666096ea70aa44f1766d56a5681266f7c83f6aa36130c1fc2d2cdc89b1127a",
        "vout_n": 0,
        "request_id": "web_send_by_user_2045_1681202509548",
        "status": "success",
        "abs_cobo_fee": "0.0000025",
        "created_time": 1681202509877,
        "last_time": 1681202710566,
        "confirmed_num": 2,
        "request_created_time": 1681202509877,
        "tx_detail": {
          "txid": "f3666096ea70aa44f1766d56a5681266f7c83f6aa36130c1fc2d2cdc89b1127a",
          "blocknum": 822051,
          "blockhash": "515d242200dbb049cbac9902df7a3982d05f4537790e1226b8a8b98490774f38",
          "fee": 0,
          "actualgas": 250000,
          "gasprice": 1,
          "hexstr": ""
        },
        "source_address_detail": "rs1qt8f7pjuc6de5ljgtm96l2gkl4x7pq497j8qdn3",
        "memo": "",
        "confirming_threshold": 2,
        "fee_coin": "COBO_HNS",
        "fee_amount": 550000,
        "fee_decimal": 6,
        "type": "external",
        "tx_request_type": ""
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By Time
Source: https://cobo.com/developers/v1/api-references/custody-wallet/transactions_by_time

GET /v1/custody/transactions_by_time/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transactions filtered by time range, coin type, transaction side (deposit/withdraw), and address. The response includes transaction details such as transaction hash, amount, and timestamp.

<Note>Only successful deposit/withdraw requests will be considered as 'Transaction' here</Note>

#### Request

<ParamField query="coin" type="String">Coin code (Does not return all currencies)</ParamField>
<ParamField query="side" type="enum(deposit / withdraw)">Deposit/withdraw </ParamField>
<ParamField query="address" type="String">Deposit/withdraw address is optional. If not included, all address history will be returned. </ParamField>
<ParamField query="begin_time" type="Long">Begin timestamp(milliseconds). If set, transactions whose transaction confirmation time is less than or equal to this will not be returned.(cannot be used with end\_time) </ParamField>
<ParamField query="end_time" type="Long">End timestamp (milliseconds). If it is passed in, the transactions whose transaction confirmation time is greater than or equal to this will not be returned.(cannot be used with begin\_time) </ParamField>
<ParamField query="limit" type="Integer">Page size is optional. If not included, the default size will be 50, and the maximum size will also be 50.</ParamField>
<ParamField query="include_financial" type="String">Request all transactions. If it is passed in, return all transactions(Including stacking, trading)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <Snippet file="full_custodian_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
    'GET',
    '/v1/custody/transactions_by_time/',
    {
      "coin": "BTC_USDT",
      "side": "deposit",
      "begin_time": 1542191734958
    },
    api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/transactions_by_time/',
          {
              "coin": "BTC_USDT",
              "side": "deposit",
              "begin_time": 1542191734958
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/transactions_by_time/", map[string]string{
      "coin": "BTC_USDT",
      "side": "deposit",
      "begin_time": 1542191734958
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [
      {
          "id": "20221013214833000312228000005846",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "6000000",
          "abs_amount": "0.06",
          "txid": "L65954e38419b55abb10b37fc6fca54f",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668913144,
          "last_time": 1665668913144,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L65954e38419b55abb10b37fc6fca54f",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      },
      {
          "id": "20221013213858000312228000007739",
          "coin": "BTC_USDT",
          "display_code": "USDT",
          "description": "Tether",
          "decimal": 8,
          "address": "38GewuNXgnbmsxgvGFKd5ZNjUdNavxgEGM",
          "source_address": "AutoTest_RC02",
          "side": "deposit",
          "amount": "23000000",
          "abs_amount": "0.23",
          "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
          "vout_n": 0,
          "request_id": null,
          "status": "success",
          "abs_cobo_fee": "0",
          "created_time": 1665668338625,
          "last_time": 1665668338625,
          "confirmed_num": 3,
          "remark": "",
          "tx_detail": {
              "txid": "L3dbb8e30d8da66c9ea0d7171e1fbe2c",
              "blocknum": 0,
              "blockhash": "",
              "fee": 0,
              "actualgas": 0,
              "gasprice": 1,
              "hexstr": ""
          },
          "source_address_detail": "AutoTest_RC02",
          "confirming_threshold": 3,
          "fee_coin": "BTC",
          "fee_decimal": 8,
          "fee_amount": 0,
          "type": "internal",
          "tx_request_type": ""
      }
    ]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Address Encodings
Source: https://cobo.com/developers/v1/api-references/development/address-encoding



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

| **Enum** | **Encodings**                 |
| :------- | :---------------------------- |
| 0        | ENCODING\_P2PKH               |
| 1        | ENCODING\_P2SH\_P2WPKH        |
| 2        | ENCODING\_BECH32              |
| 3        | ENCODING\_P2PKH\_UNCOMPRESSED |
| 4        | ENCODING\_P2SH\_P2MS          |
| 5        | ENCODING\_P2SH\_P2WSH\_P2MS   |
| 6        | ENCODING\_P2TR                |
| 9        | ENCODING\_ADA\_BYRON          |
| 10       | ENCODING\_ADA\_SHELLEY        |

## BTC

* Legacy: ENCODING\_P2PKH
* Nested SegWit (P2SH): ENCODING\_P2SH\_P2WPKH
* Native SegWit (Bech32): ENCODING\_BECH32
* Taproot: ENCODING\_P2TR

## BTC\_USDT

* ENCODING\_P2PKH
* ENCODING\_P2SH\_P2WPKH (default)

## BTC\_BRC20\_ORDI

* ENCODING\_P2TR

## SIGNET\_BTC

* ENCODING\_P2SH\_P2WPKH
* ENCODING\_BECH32 (default)
* ENCODING\_P2TR

## ADA

* ENCODING\_P2PKH
* ENCODING\_ADA\_BYRON
* ENCODING\_ADA\_SHELLEY

## CFZ

* old hex address: ENCODING\_P2PKH
* new base32 address: ENCODING\_P2SH\_P2WPKH (default)

## DASH

* ENCODING\_P2PKH (default)
* ENCODING\_P2PKH\_UNCOMPRESSED

Cryptocurrencies that do not support specifying the main chain address format, the default address format is ENCODING\_P2PKH (0).

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Cobo Callback Signature
Source: https://cobo.com/developers/v1/api-references/development/callback-signature



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

To ensure that the response messages originate from Cobo, it is essential to verify signatures for confirmation.
Cobo utilizes the Elliptic Curve Digital Signature Algorithm (ECDSA) to sign each HTTP response and API callback response.
To authenticate Cobo's signature, you will first need to retrieve a public key.
To do so, kindly navigate to the "API Callback" section on the Cobo Custody Web.
**Note that the public key differs between the development and production environments.**

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/callback.png" />

The API signature is generated using ECDSA and represented in hex through hexadecimal encoding.
The data will be signed according to the following format:

```java
HTTP_METHOD + |  +  HTTP_REQUEST_PATH + | + TIMESTAMP + | + PARAMS
```

HTTP\_METHOD
GET or POST must be capitalized. Note that Cobo will utilize form-data instead of JSON payloads in HTTP POST requests.
The snippet provided includes code samples focused on signature verification using Cobo SDKs.
To view the complete code samples, kindly refer to the ["How to Configure API Callback"](/v1/guides/howtos/configure-api-callback) guide.

```java
verifyResult = LocalSigner.verifyEcdsaSignature(content, signature, coboPubKey);
```

To successfully verify a signature, you will need to complete the following steps:

1. Retrieve Biz-Timestamp (timestamp) and Biz-Resp-Signature (signature) from the callback's HTTP header.
2. Concatenate the original data from the HTTP body with the timestamp from the header to create the content to be signed.
3. Retrieve Cobo’s public key from the Cobo Custody Web or through the SDKs.
4. Utilize the secp256k1 elliptic curve algorithm or the verifyEcdsaSignature function from Cobo SDKs to verify whether the public key, the content to be signed, and the signature match.
   <Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Changelog
Source: https://cobo.com/developers/v1/api-references/development/changelog

Keep track of every change to the WaaS API

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

#### October 10, 2024

* Add new enumeration value `902` (reorg) for MPC transaction status.

#### September 13, 2024

* Add new enumeration value `502` (reverting) for MPC transaction status.

#### August 27, 2024

* Add New API: ***[Babylon Unbonding](/v1/api-references/mpc-wallet/babylon_unbonding)*** and ***[Babylon Withdraw](/v1/api-references/mpc-wallet/babylon_withdraw)*** to MPC Wallet.

#### August 14, 2024

* Add New API: ***[Babylon Drop Staking](/v1/api-references/mpc-wallet/babylon_drop_staking)*** to MPC Wallet.

#### July 12, 2024

* Add New API: ***[Babylon List Transactions By Status](/v1/api-references/mpc-wallet/babylon_list_transactions_by_status)*** to MPC Wallet.

#### June 18, 2024

* Add New API: ***[Babylon Batch Broadcast Staking Transaction](/v1/api-references/mpc-wallet/babylon_batch_broadcast_staking_transaction)*** to MPC Wallet.

#### June 14, 2024

* Change the data type of the `id` field in the response of ***[Get Addresses List](/v1/api-references/mpc-wallet/mpc_list_addresses)*** from `Int` to `String`.

#### June 3, 2024

* Add APIs for the Babylon Staking of Co-managed Wallet.

#### April 2, 2024

* Add APIs for the Gas Station of Full Custody Wallet.

#### February 28, 2024

* Add new optional parameter ***"extra\_parameters"*** for ***[Speedup Transaction](/v1/api-references/mpc-wallet/mpc_speedup_transaction)*** and ***[Drop Transaction](/v1/api-references/mpc-wallet/mpc_drop_transaction)***.

#### January 4, 2024

* Add New API: ***[Get Coin Details](/v1/api-references/mpc-wallet/mpc_coin_info)*** to MPC Wallet.

#### December 28, 2023

* Add APIs for the Gas Station of Co-managed Wallet.

#### December 21, 2023

* Add new optional parameter ***"amount"*** for ***[Get Coin Details](/v1/api-references/custody-wallet/coin_info)***

#### December 7, 2023

* Add New API: ***[Get Max Sendable Amount](/v1/api-references/mpc-wallet/mpc_get_max_send_amount)*** to MPC Wallet.

#### November 8, 2023

* Add New API: ***[Get Transactions By time and offset](/v1/api-references/custody-wallet/transactions_by_time_ex)*** to Custodial Wallet.

#### October 26, 2023

* Add New API: MPC Wallet add ***[Update Address Description](/v1/api-references/mpc-wallet/mpc_update_address_description)*** API.
* Add details about ***instructions*** for Solana contract to the ***extra\_parameters*** parameter
  in the MPC API's ***[Create Transaction](/v1/api-references/mpc-wallet/mpc_create_transaction)***.

#### October 20, 2023

* Add New Params: Custodial Wallet ***[New Withdraw Request](/v1/api-references/custody-wallet/new_withdraw_request)*** and MPC Wallet  ***[Create Transaction](/v1/api-references/mpc-wallet/mpc_create_transaction)*** API add remark param.

#### October 13, 2023

* Add new enumeration value `403` for MPC transaction status and modify the meaning of status `501`.

#### October 12, 2023

* Modify example of response of the MPC API's ***[Get Transactions List](/v1/api-references/mpc-wallet/mpc_list_transactions)***

#### October 4, 2023

* Add more details about ***calldata*** to the ***extra\_parameters*** parameter
  in the MPC API's ***[Create Transaction](/v1/api-references/mpc-wallet/mpc_create_transaction)***.

#### September 7, 2023

* Add more details to the ***extra\_parameters*** parameter in the MPC API's
  ***[Create Transaction](/v1/api-references/mpc-wallet/mpc_create_transaction)***.

#### August 10, 2023

* Merge MPC and MPC Web3 APIs.

#### July 28, 2023

* Add New APIs: ***[Get Signed Messages By Cobo ID](/v1/api-references/mpc-wallet/mpc_sign_messages_by_cobo_ids)*** and
  ***[Get Signed Messages By Request ID](/v1/api-references/mpc-wallet/mpc_sign_messages_by_request_ids)*** to MPC Web3 wallet.

#### July 25, 2023

* Add EIP-712 example to the ***extra\_parameters*** parameter in the MPC API's ***[Sign Message](/v1/api-references/mpc-wallet/mpc_sign_message)***.

#### July 24, 2023

* Add New APIs: ***[Get Tss Node List](/v1/api-references/mpc-wallet/mpc_list_tss_node)*** to MPC wallet.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Error Codes
Source: https://cobo.com/developers/v1/api-references/development/error-codes



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Cobo servers will return the following error data when encountering an error:

```json
{
  "success": false,
  "error_code": 1000,
  "error_description": "Unknown internal error"
}
```

## <font color="blue"> HTTP Status Code </font>

| **Status Code** | **Description**                                                                  |
| :-------------- | :------------------------------------------------------------------------------- |
| 200             | OK                                                                               |
| 400             | Bad request                                                                      |
| 401             | Unauthorized – API key, signature, or timestamp is incorrect                     |
| 403             | Forbidden – No access allowed                                                    |
| 404             | Not Found – Requested resources not found                                        |
| 405             | Method Not Allowed – HTTP methods used not applicable to the requested resources |
| 406             | Not Acceptable – Requested content format is not JSON                            |
| 429             | Too Many Requests – Requests are limited, please reduce the request frequency    |
| 500             | Internal Server Error – Internal server error, please try again later            |
| 502             | Bad Gateway                                                                      |
| 503             | Service Unavailable – Service unavailable, please try again later                |

## <font color="blue"> Error codes starting with 1 </font>

| **Error Code** | **Description**                                                            |
| :------------- | :------------------------------------------------------------------------- |
| 1000           | Unknown internal error – Please contact Cobo                               |
| 1001           | Signature missing, format error, or mismatch                               |
| 1002           | Unsupported 'method' parameter                                             |
| 1003           | API params is missing or null                                              |
| 1004           | Unexpected parameters were provided                                        |
| 1005           | The nonce value is invalid                                                 |
| 1006           | The parameter format or value is invalid                                   |
| 1007           | The current user lacks the necessary permissions                           |
| 1010           | The request is too frequent                                                |
| 1011           | Invalid page\_index value                                                  |
| 1012           | Error request in the production environment                                |
| 1013           | The hash passed by the API is inconsistent with the one calculated locally |
| 1030           | Blacklisted user                                                           |
| 1031           | Unsupported region                                                         |
| 1040           | Errors related to access tokens                                            |
| 1050           | Deprecated API                                                             |
| 1060           | No enough balance                                                          |
| 1070           | cobo card kyc status                                                       |

## <font color="blue"> Error codes starting with 12 </font>

| **Error Code** | **Description**                                                 |
| :------------- | :-------------------------------------------------------------- |
| 12000          | Signature headers missing – API signature header is missing     |
| 12001          | Signature verification failed – API signature verification fail |
| 12002          | Coin not supported                                              |
| 12003          | Permission denied                                               |
| 12004          | Transaction does not exist                                      |
| 12005          | Signature permission denied -- API key does not have access     |
| 12006          | IP not in whitelist                                             |
| 12007          | Insufficient balance                                            |
| 12008          | Coin is suspended temporarily                                   |
| 12009          | Duplicate withdraw request id                                   |
| 12010          | Account has been frozen                                         |
| 12011          | Amount below coin dust                                          |
| 12012          | Invalid address                                                 |
| 12013          | Address not in whitelist                                        |
| 12014          | Transaction fee invalid                                         |
| 12015          | Address does not exist                                          |
| 12016          | Insufficient Credit                                             |
| 12021          | duplicated signature                                            |
| 12022          | blockchain node API call error                                  |
| 12200          | staking product not exist                                       |
| 12201          | invalid staking amount                                          |
| 12202          | invalid staking status                                          |
| 12203          | Unsupported transfer from staking wallet                        |

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Testnet Coins
Source: https://cobo.com/developers/v1/api-references/development/testing



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

To facilitate testing, Cobo supports the GETH (ETH Testnet) and XTN (BTC Testnet) environments. Users are encouraged to obtain testnet coins for these networks from reputable third-party websites. Below are recommended platforms for your reference:

## SETH (ETH Testnet) - Sepolia Testnet

For testing on the Ethereum (ETH) Testnet using SETH, Cobo recommends utilizing the Sepolia Testnet. The following Explorer can be employed to monitor network metrics:

Etherscan Explorer: [https://sepolia.etherscan.io/](https://sepolia.etherscan.io/)

Below are recommended platforms where you can apply for testnet coins:

[QuickNode Sepolia Faucet](https://faucet.quicknode.com/drip)

[Grabteeth](https://grabteeth.xyz/)

[PoW faucet](https://sepolia-faucet.pk910.de/)

[Alchemy Sepolia faucet](https://sepoliafaucet.com/)

## XTN (BTC Testnet) - Testnet

For testing on the Bitcoin (BTC) Testnet using XTN, the following Explorer can be employed to monitor network metrics:

BlockCypher Explorer: [https://live.blockcypher.com/btc-testnet/](https://live.blockcypher.com/btc-testnet/)

Below are recommended platforms where you can apply for testnet coins:

[https://tbtc.bitaps.com/](https://tbtc.bitaps.com/)

[https://bitcoinfaucet.uo1.net/](https://bitcoinfaucet.uo1.net/)

[https://coinfaucet.eu/en/btc-testnet/](https://coinfaucet.eu/en/btc-testnet/)

[https://cryptopump.info/](https://cryptopump.info/)

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Transaction Notification
Source: https://cobo.com/developers/v1/api-references/development/transaction-notification



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
Upon receiving a deposit or withdraw transaction, Cobo will send a push message to a client-specified URL via HTTP(S) using the POST request method. The push message contains transaction data in JSON format within the HTTP message body.

Status = “Success”

When Cobo receives a deposit of 0.000001 TRX to a recipient address associated with a Cobo client, it will send an HTTP POST request to the client's designated URL. The request body will be structured as follows:

#### Custodial Wallet

```json
{
  "id": "20201207150724000192033000003701",
  "coin": "TRON",
  "display_code": "TRX",
  "description": "TRON",
  "decimal": 6,
  "address": "TZAt997umXasPUfxUZYKQKcGwjmYpJzX6V",
  "source_address": "TWDchZBmYvTQBeXD4w8rRUowDv5ka8kiFU",
  "side": "deposit",
  "amount": "1",
  "abs_amount": "0.000001",
  "txid": "6c2df6f6cf7fe8fe1e8559c11679a5a5b90768d1c128ffb3dd66d6f3cb910775",
  "vout_n": 0,
  "request_id": null,
  "status": "success",
  "abs_cobo_fee": "0",
  "created_time": 1607324928585,
  "last_time": 1607324928585,
  "request_created_time": 1607324928492,
  "confirmed_num": 27,
  "tx_detail": {
    "txid": "6c2df6f6cf7fe8fe1e8559c11679a5a5b90768d1c128ffb3dd66d6f3cb910775",
    "blocknum": 25660684,
    "blockhash": "0000000001878d0c83fb9640712d3354a0a1912dfd5884959d3c1a16b6f62e1c",
    "hexstr": ""
  },
  "source_address_detail": "TWDchZBmYvTQBeXD4w8rRUowDv5ka8kiFU",
  "confirming_threshold": 27,
  "type": "external"
}
```

#### MPC Wallet

```json
{
    "cobo_id": "20240117111135000139405000001665",
    "request_id": "",
    "status": 900,
    "coin_detail":
    {
        "coin": "XTN",
        "chain_code": "XTN",
        "display_code": "XTN",
        "description": "Bitcoin Testnet3",
        "decimal": 8,
        "can_deposit": true,
        "can_withdraw": true,
        "confirming_threshold": 3
    },
    "nft_detail":
    {
        "nft_code": "",
        "token_id": null,
        "chain_code": "",
        "contract_address": ""
    },
    "amount_detail":
    {
        "amount": "100000",
        "abs_amount": "0.001",
        "nft_amount": 0
    },
    "fee_detail":
    {
        "fee_coin_detail":
        {
            "coin": "XTN",
            "chain_code": "XTN",
            "display_code": "XTN",
            "description": "Bitcoin Testnet3",
            "decimal": 8,
            "can_deposit": true,
            "can_withdraw": true,
            "confirming_threshold": 3
        },
        "gas_price": 0,
        "gas_limit": 0,
        "fee_used": 845,
        "fee": 5.0
    },
    "source_addresses": null,
    "from_address": "2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE",
    "to_address": "2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE",
    "memo": "",
    "tx_hash": "b8805bdde2e05c7392ed33069842b22317fd97882e62863756f8f84ec6bde75b",
    "vout_n": 0,
    "nonce": 0,
    "confirmed_number": 3,
    "replace_cobo_id": "",
    "transaction_type": 1000,
    "block_detail":
    {
        "block_hash": "000000000000002731780a7ec34736a63056eef5256cced316eba74df5c2a5dd",
        "block_height": 2573189,
        "block_time": 1705461073000
    },
    "tx_detail":
    {
        "tx_hash": "b8805bdde2e05c7392ed33069842b22317fd97882e62863756f8f84ec6bde75b"
    },
    "extra_parameters": "",
    "created_time": 1705461095138,
    "updated_time": 1705462579114,
    "failed_reason": "",
    "to_address_details": ""
}
```

For the definition of parameters, please refer to this [guide](/v1/api-references/custody-wallet/transaction#response) if you are using Cobo's Custodial Wallets and [here](/v1/api-references/mpc-wallet/mpc_transactions_by_request_ids#response) if you are using MPC Wallets.

Status = “Failed”

By default, Cobo does not send push messages for failed transactions. If you have a specific business requirement to receive push messages for transactions marked as 'failed,' please contact Cobo's customer support at [custodyservice@cobo.com](mailto:custodyservice@cobo.com).  We will configure the corresponding settings tailored to meet your development needs.

Status = “Pending”

If you have ticked “Push Pending Transaction” under Transaction Notification on Cobo Custody Web, you will receive a push message whenever there is a change in the number of block confirmations for a specific transaction. The message will indicate the transaction status as ‘pending’ and include essential details such as the number of confirmed blocks and the threshold.

The status will change from "pending" to "success" when the 'confirmed\_num' reaches the pre-defined 'confirmed\_threshold' in the message. Additionally, pending transactions include an extra field called "waiting\_audit," signifying whether an approval is required.

Each push message for a specific block number change will be sent only once. Kindly note that certain blockchains may not provide block-based notifications due to their internal mechanisms.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/pendingpushEN.png" />

### Things to note:

1. Upon receiving a push notification from Cobo, it is strongly recommended to call Cobo's transaction querying endpoint with the provided ID to validate the transaction. Please refrain from relying solely on push messages for the validation of deposit or withdraw transactions.

2. Upon receiving a "success" transaction push message from Cobo, clients are required to respond with an HTTP status code of 200 and an HTTP body containing 'ok' to confirm receipt. If no response is received by Cobo after 14 push attempts, the message will be marked as failed.

3. For transactions marked as "pending," Cobo will send a push message whenever there is a change in the block confirmation number. No response is required from the client.

4. We recommend using the provided IDs as unique keys for each transaction to enhance database security and prevent any instances of duplicate accounting.

5. For security reasons, we strongly recommend using HTTPS and Cobo's public key for signature verification. Detailed instructions can be found in our [guide](/v1/api-references/development/callback-signature). Please ensure that you are operating in the correct environment during the verification process.

For information on how to configure API callbacks, refer to this [guide](/v1/guides/howtos/configure-api-callback).
<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Withdrawal Confirmation
Source: https://cobo.com/developers/v1/api-references/development/withdrawal-confirmation



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
Upon receiving a withdraw request, Cobo will initiate the verification process by sending a push message to a client-specified URL via HTTP(S) using the POST request method. The push message contains withdraw data in JSON format within the HTTP message body.

Upon completing the verification of the withdraw request and associated data, the client is required to respond promptly with an HTTP status of 200. The response should include an HTTP body containing either 'ok' to indicate approval or 'deny' to signify rejection. Failure to provide this response will result in continued pushes of the same message to the designated URL. Kindly note that your timely response is crucial for the efficient processing of a withdraw request.

When a withdrawal request for 1 BTC\_USDT is submitted to a Custodial Wallet, Cobo will initiate an HTTP POST request to the client-designated URL. The request body will be structured as follows:

```json json
{
    "id": "",
    "coin": "BTC_USDT",
    "display_code": "USDT",
    "description": "Tether",
    "decimal": 8,
    "address": "18bpqEgCJ17TwxDwT26YjQnSBFVgcLBimE",
    "memo": "",
    "source_address": "1F5i9mdCAsU2EfQtXYpwZgW2UFzS8A2EMn",
    "source_address_detail": "1F5i9mdCAsU2EfQtXYpwZgW2UFzS8A2EMn",
    "side": "withdraw",
    "amount": "100000000",
    "abs_amount": "1",
    "txid": "73ea2bcb20b36115bc50588a8bcdbfbaaeb3d75656c2b104ef4a1234e5dbe550",
    "vout_n": 0,
    "request_id": "test_request_id",
    "status": "pending",
    "created_time": 1542165707058,
    "last_time": 1542165707058,
    "confirming_threshold": 3,
    "remark": "hello test",
    "confirmed_num": 0,
    "type": "external",
	"fee_amount": 0,
   "fee_coin": "GETH",
	"fee_decimal": 18,
}
```

For more information, please refer to the response of [transactions\_by\_id](/v1/api-references/custody-wallet/transactions_by_id).

When a withdrawal request for 0.009 GETH is submitted to a MPC Wallet, the request body will be structured as follows:

```json json
{
        "cobo_id": "20221222170157000336673000008161",
        "request_id": "web_send_by_user_915_1671699717647",
        "status": 101,
        "coin_detail": {
          "coin": "GETH",
          "display_code": "GETH",
          "description": "Ethereum Goerli Testnet",
          "decimal": 18,
          "can_deposit": True,
          "can_withdraw": True,
          "confirming_threshold": 32
        },
        "amount_detail": {
          "amount": "9000000000000000",
          "abs_amount": "0.009"
        },
        "fee_detail": {
          "fee_coin_detail": {
            "coin": "GETH",
            "display_code": "GETH",
            "description": "Ethereum Goerli Testnet",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 32
          },
          "gas_price": 300000000,
          "gas_limit": 21000,
          "fee_used": 0
        },
        "source_addresses": "",
        "from_address": "0x3ede1e59a3f3a66de4260df7ba3029b515337e5c",
        "to_address": "0x9414933Ff7777bb28cA22D15c178596A6e58d957",
        "tx_hash": "",
        "vout_n": 0,
        "nonce": null,
        "confirmed_number": 0,
        "replace_cobo_id": "",
        "transaction_type": 303,
        "operation": 100,
        "block_detail": {
          "block_hash": "",
          "block_height": 0,
          "block_time": 0
        },
        "tx_detail": {
          "tx_hash": ""
        },
        "extra_parameters": "",
}
```

For more information, please refer to the response of [transactions\_by\_cobo\_ids](/v1/api-references/mpc-wallet/mpc_transactions_by_cobo_ids).

If you approve this withdrawal request, please respond with an HTTP status of 200 and set the message body to "ok".

### Things to note:

1. To ensure system resilience against a single point of failure (SPOF), we strongly recommend using a dedicated server, such as a risk monitor, for processing withdraw confirmations.

2. Please validate the legitimacy of each withdraw request by carefully reviewing key parameters, including request\_id, to\_address, and amount.

3. For security reasons, we strongly recommend using HTTPS and Cobo's public key for signature verification. Detailed instructions can be found in our [guide](/v1/api-references/development/callback-signature). Please ensure that you are operating in the correct environment during the verification process.

For information on how to configure API callbacks, refer to this [guide](/v1/guides/howtos/configure-api-callback).

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Bind Addresses
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/auth_bind_addresses

POST /v1/custody/guard/bind_addresses/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows a prime broker to bind a list of chain addresses to a user account. The endpoint requires a POST request with a JSON payload containing the user ID and a list of chain addresses. If the payload is valid, the endpoint returns a JSON response with the result of the binding operation.

#### Request

<ParamField body="user_id" type="String" required>The ID of the user account to bind the addresses to.</ParamField>
<ParamField body="addresses" type="Json" required>A list of chain addresses to bind to the user account.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="pubkey" type="String">The bound Auth public key, or empty if the binder\_id has expired</ResponseField>

    <ResponseField name="addresses" type="object[]">
      <Expandable title="object">
        <ResponseField name="chain_coin" type="String">bound coin</ResponseField>
        <ResponseField name="address" type="String">bound address</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/guard/bind_addresses/",
      {
          "user_id": "cobo_168108513539918",
          "addresses": '[{"chain_coin": "VET", "address": "0x4baf0837d4c8bccd79dfa6fd60f4985ef9b696cc"}]'
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/guard/bind_addresses/',
          {
            "user_id": "cobo_168108513539918",
            "addresses": '[{"chain_coin": "VET", "address": "0x4baf0837d4c8bccd79dfa6fd60f4985ef9b696cc"}]'
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/guard/bind_addresses/", map[string]string{
      "user_id": "cobo_168108513539918",
      "addresses": '[{"chain_coin": "VET", "address": "0x4baf0837d4c8bccd79dfa6fd60f4985ef9b696cc"}]'
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "pubkey": "480da241874516ca9a25b1776e2b3ce6d2d5ea184d9a83e28874e57d4a2786ea1db059aefb9023cf7775da68c5381cf401c128aa967927c3abc46c7545c90438",
      "addresses": [
        {
          "chain_coin": "ETH",
          "address": "0x123"
        }
        …
      ]
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Change Binding
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/auth_change_binding

POST /v1/custody/guard/change_binding/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows authenticated users to change their binding to a new Prime Broker. The user's `broker_user_id` is passed in the request body, and the new `binder_id` is returned in the JSON response.

#### Request

<ParamField body="user_id" type="String" required>unique user ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="binder_id" type="String">Binding ID, the binding ID needs to be prefixed with binder\_id= to generate a QR code for the user to scan the code to bind, or the user can directly copy the binding code in the form of binder\_id=xxxx to Cobo Auth for the binding operation</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/guard/change_binding/",
      {
          "user_id": "cobo_168108513539918"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/guard/change_binding/',
          {
             "user_id": "cobo_168108513539918"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/guard/change_binding/", map[string]string{
      "user_id": "cobo_168108513539918"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "binder_id": "Ph8YP+LTQyqcfHE/A+eXUw=="
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Create Binding
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/auth_create_binding

POST /v1/custody/guard/create_binding/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint creates a binding between a user in the prime broker system and a user in the custody system. It requires a POST request with a 'user_id' field in the request body, and the user must have all necessary permissions. The response is a JSON object with a 'binder_id' field containing the ID of the newly created binding.

#### Request

<ParamField body="user_id" type="String" required>unique user ID, no more than 24 characters</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="binder_id" type="String">Binding ID, the binding ID needs to be prefixed with binder\_id= to generate a QR code for the user to scan the code to bind, or the user can directly copy the binding code in the form of binder\_id=xxxx to Cobo Auth for the binding operation</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/guard/create_binding/",
      {
          "user_id": "cobo_168108513539918"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/guard/create_binding/',
          {
              "user_id": "cobo_168108513539918"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/guard/create_binding/", map[string]string{
      "user_id": "cobo_168108513539918"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "binder_id": "Ph8YP+LTQyqcfHE/A+eXUw=="
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Query Binding
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/auth_query_binding

GET /v1/custody/guard/query_binding/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the binding information for a given binder ID. The endpoint requires authentication and the user must have query permission. The binder ID is passed as a parameter in the GET request.

#### Request

<ParamField query="binder_id" type="String" required>CoboAuth binding code</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="status" type="Int">Binding code status</ResponseField>
    <ResponseField name="pubkey" type="String">The bound Auth public key, or empty if the binder\_id has expired</ResponseField>

    <ResponseField name="addresses" type="object[]">
      <Expandable title="object">
        <ResponseField name="chain_coin" type="String">bound coin</ResponseField>
        <ResponseField name="address" type="String">bound address</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/guard/query_binding/",
      {
          "binder_id": "Ph8YP+LTQyqcfHE/A+eXUw=="
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/guard/query_binding/',
          {
              "binder_id": "Ph8YP+LTQyqcfHE/A+eXUw=="
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/guard/query_binding/", map[string]string{
      "binder_id": "Ph8YP+LTQyqcfHE/A+eXUw=="
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "status": 0,
      "pubkey": "480da241874516ca9a25b1776e2b3ce6d2d5ea184d9a83e28874e57d4a2786ea1db059aefb2093cf6665da68c5381cf401c128aa967927c3abc46c7545c90438",
      "addresses": [
        {
          "chain_coin": "ETH",
          "address": "0x123"
        }
        …
      ]
    }
  }




  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Query Statement By ID
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/auth_query_statement

GET /v1/custody/guard/query_statement/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows authenticated users to query a statement by providing a statement ID. The response is a JSON object containing information about the statement, including its ID, creation time, and a list of transactions. The endpoint requires the user to have query permission.

#### Request

<ParamField query="statement_id" type="String" required>unique auth statement id</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="id" type="String">unique auth statement id</ResponseField>
    <ResponseField name="status" type="String">auth statement status (UNSEND: 1, WAIT: 2, APPROVE: 3, REJECT: 4, INVALID: 5, TIMEOUT: 6, SEND\_TIMEOUT: 7, APPROVE\_BY\_OTHERS: 9, REJECT\_BY\_OTHERS: 10)</ResponseField>
    <ResponseField name="user_id" type="String">unique user ID</ResponseField>
    <ResponseField name="pubkey" type="String">Auth public key</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/guard/query_statement/",
      {
          "statement_id": "ABeWuAV7N2cwyWSxj3FW6gqcbUoqok8WzRHguqShLtXYVrmuEXWiPrcFBTJcPX24Q1CmZrxJiJCvZPTNK5ptqMhyXAuAbtRH6isJjG5Pq21jYzhCVGUoUVPHY5HTgDFCsrgFDsDVXGqUGi3ieWr26GWuAZUKX4L7s5kY"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/guard/query_statement/',
          {
              "statement_id": "ABeWuAV7N2cwyWSxj3FW6gqcbUoqok8WzRHguqShLtXYVrmuEXWiPrcFBTJcPX24Q1CmZrxJiJCvZPTNK5ptqMhyXAuAbtRH6isJjG5Pq21jYzhCVGUoUVPHY5HTgDFCsrgFDsDVXGqUGi3ieWr26GWuAZUKX4L7s5kY"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/guard/query_statement/", map[string]string{
      "statement_id": "ABeWuAV7N2cwyWSxj3FW6gqcbUoqok8WzRHguqShLtXYVrmuEXWiPrcFBTJcPX24Q1CmZrxJiJCvZPTNK5ptqMhyXAuAbtRH6isJjG5Pq21jYzhCVGUoUVPHY5HTgDFCsrgFDsDVXGqUGi3ieWr26GWuAZUKX4L7s5kY"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json

  {
    "success": true,
    "result": {
      "id": "ABeWuAV7N2cwyWSxj3FW6gqcbUoqok8WzRHguqShLtXYVrmuEXWiPrcFBTJcPX24Q1CmZrxJiJCvZPTNK5ptqMhyXAuAbtRH6isJjG5Pq21jYzhCVGUoUVPHY5HTgDFCsrgFDsDVXGqUGi3ieWr26GWuAZUKX4L7s5kY",
      "status": 4,
      "user_id": "cobo_168108513539918",
      "pubkey": "480da241874516ca9a25b1776e2b3ce6d2d5ea184d9a83e28874e57d4a2786ea1db059aefb2093cf7775da68c5381cf401c128aa967927c3abc46c7545c90438"
    }
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Query User Auth
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/auth_query_user_auth

GET /v1/custody/guard/query_user_auth/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is a GET request that requires a 'user_id' parameter. It returns a JSON response containing the user's authentication information queried from PrimeBrokerManager. Authentication is required to access this endpoint.

#### Request

<ParamField query="user_id" type="String" required>unique user ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="pubkey" type="String">The bound Auth public key, or empty if the binder\_id has expired</ResponseField>

    <ResponseField name="addresses" type="object[]">
      <Expandable title="object">
        <ResponseField name="chain_coin" type="String">bound coin</ResponseField>
        <ResponseField name="address" type="String">bound address</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/guard/query_user_auth/",
      {
          "user_id": "cobo_168108513539918"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/guard/query_user_auth/',
          {
              "user_id": "cobo_168108513539918"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/guard/query_user_auth/", map[string]string{
      "user_id": "cobo_168108513539918"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "pubkey": "480da241874516ca9a25b1776e2b3ce6d2d5ea481d9a83e28874e57d4a2786ea1db059aefb2093cf7775da68c5381cf401c821aa967927c3abc46c7545c90438",
      "addresses": [
        {
          "chain_coin": "ETH",
          "address": "0x123"
        }
        …
      ]
    }
  }


  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Unbind Binding
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/auth_unbind_binding

POST /v1/custody/guard/unbind_binding/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to unbind their broker account from their MPC Wallet account. It requires a POST request with a 'user_id' field in the request body. The response is a JSON object containing a 'statement_id' field which can be used to query the status of the unbinding process.

#### Request

<ParamField body="user_id" type="String" required>unique user ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="statement_id" type="String">unique auth statement id</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/guard/unbind_binding/",
      {
          "user_id": "cobo_168108513539918"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/guard/unbind_binding/',
          {
              "user_id": "cobo_168108513539918"
          },
          api_key, api_secret, host
      ).then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/guard/unbind_binding/", map[string]string{
      "user_id": "cobo_168108513539918"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "statement_id": "ABeWuAV7N2cwyWSxj3FW6gqcbUoqok8WzRHguqShLtXYVrmuEXWiPrcFBTJcPX24Q1CmZrxJiJCvZPTNK5ptqMhyXAuAbtRH6isJjG5Pq21jYzhCVGUoUVPHY5HTgDFCsrgFDsDVXGqUGi3ieWr26GWuAZUKX4L7s5kY"
    }
  }



  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon Batch Broadcast Staking Transaction
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_batch_broadcast_staking_transaction

POST /v1/custody/mpc/babylon/batch_broadcast_staking_transaction/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to batch broadcast the specified pre-signed staking transactions based on the provided parameter `request_ids`

#### Request

<ParamField body="request_ids" type="String" required>A comma-separated list of transaction request IDs. Please note that the length of the list should be less than or equal to 100.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object" />

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/babylon/batch_broadcast_staking_transaction/",
      {
          "request_ids": "1717059604245,1718613205287"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/babylon/batch_broadcast_staking_transaction/', {
      "request_ids": "1717059604245,1718613205287"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/babylon/batch_broadcast_staking_transaction/", map[string]string{
      "request_ids": "1717059604245,1718613205287"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {}
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon Broadcast Staking Transaction
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_broadcast_staking_transaction

POST /v1/custody/mpc/babylon/broadcast_staking_transaction/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to broadcast the specified pre-signed staking transaction based on the provided parameter `request_id`

#### Request

<ParamField body="request_id" type="String" required>transaction request ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="String">""</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/babylon/broadcast_staking_transaction/",
      {
          "request_id": "1717059604245",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/babylon/broadcast_staking_transaction/', {
      "request_id": "1717059604245"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/babylon/broadcast_staking_transaction/", map[string]string{
      "request_id": "1717059604245"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": ""
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon Drop Staking
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_drop_staking

POST /v1/custody/mpc/babylon/drop_staking/
This endpoint specify the pre-signed staking transaction, create a new transaction to drop the corresponding transaction, accepting parameters such as `request_id`, `related_request_id`, `fee_rate`, and `max_staking_fee`.

#### Request

<ParamField body="request_id" type="String" required>transaction ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>
<ParamField body="related_request_id" type="String" required>request ID of the transaction to be dropped</ParamField>
<Tip>Only transactions with the status 100 and 200 are eligible to be dropped.</Tip>
<ParamField body="fee_rate" type="Float" required>transaction fees per byte</ParamField>
<ParamField body="max_staking_fee" type="Int">maximum fee for constructing the transaction. If the actual fee exceeds this limit, the creation will fail. The default is None.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="String">""</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/babylon/drop_staking/",
      {
          "request_id": "1717059604245",
          "related_request_id": "1717059601673",
          "fee_rate": 9.5,
          "max_staking_fee": 2000
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/babylon/drop_staking/', {
      "request_id": "1717059604245",
      "related_request_id": "1717059601673",
      "fee_rate": 9.5,
      "max_staking_fee": 2000
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/babylon/drop_staking/", map[string]string{
      "request_id": "1717059604245",
      "related_request_id": "1717059601673",
      "fee_rate": 9.5,
      "max_staking_fee": 2000
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": ""
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon Get Staking Info
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_get_staking_info

GET /v1/custody/mpc/babylon/get_staking_info/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to query the specified pre-signed staking transaction information based on the provided parameter `request_id`

#### Request

<ParamField query="request_id" type="String" required>transaction request ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="request_id" type="String">Transaction request ID</ResponseField>
    <ResponseField name="cobo_id" type="String">Unique transaction ID in Cobo</ResponseField>
    <ResponseField name="staking_info" type="String">Detailed information of the staking transaction, in JSON format</ResponseField>

    <ResponseField name="status" type="Int">
      | Status Type                        | Code |
      | ---------------------------------- | ---- |
      | STAKING\_TX\_INIT                  | 1    |
      | STAKING\_TX\_WAITING\_BROADCASTING | 100  |
      | STAKING\_TX\_BROADCASTED           | 200  |
      | STAKING\_TX\_PENDING               | 300  |
      | STAKING\_ACTIVE                    | 400  |
      | STAKING\_OVERFLOW                  | 490  |
      | STAKING\_FAILED                    | 499  |
      | STAKING\_UNBONDINGREQUESTED        | 500  |
      | STAKING\_UNBONDING                 | 510  |
      | STAKING\_UNBONDED                  | 520  |
      | STAKING\_WITHDRAWN                 | 600  |

      <Tip>The 300 status indicates that the transaction has been confirmed on the BTC chain but not yet indexed by Babylon, while the 400 status indicates that the transaction has been successfully confirmed by the Babylon indexer.</Tip>
      <Tip>The 490 status indicates that the transaction has been successfully confirmed by the Babylon indexer, but because it exceeds Babylon's staking cap, it will not be included in the earnings calculation.</Tip>
      <Tip>The 500 status indicates that the unbonding request for the staking transaction has been sent to Babylon. The 510 status means that the unbonding transaction is waiting for Babylon to reach the required number of locked blocks. The 520 status indicates that the staking transaction has been successfully unbonded (either due to natural expiration or successful unbonding). Once this status is reached, the staking transaction can be withdrawn.</Tip>
      <Tip>The 600 status indicates that the staking transaction has been fully withdrawn and the staking transaction is closed.</Tip>
    </ResponseField>

    <ResponseField name="fee_rate" type="String">transaction fees per byte</ResponseField>
    <ResponseField name="max_staking_fee" type="Int">maximum fee for the staking transaction</ResponseField>
    <ResponseField name="sign_result" type="Json">signature result, which is in JSON format and contains the raw transaction hex</ResponseField>
    <ResponseField name="tx_hash" type="String">transaction hash</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/babylon/get_staking_info/",
      {
          "request_id": "1717059604245",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/babylon/get_staking_info/', {
      "request_id": "1717059604245"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/babylon/get_staking_info/", map[string]string{
      "request_id": "1717059604245"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "request_id": "1717134063431",
      "cobo_id": "20240531134105000300692000007801",
      "staking_info": "{\"asset_coin\": \"SIGNET_BTC\", \"stake_address\": \"tb1pufc6zv4wquhcshgr4lay4lqa6vua3m435hqmml9w74ycxxnv329qdl6cq2\", \"amount\": 50000, \"stake_block_time\": 64000, \"finality_provider\": \"88b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384\"}",
      "status": 200,
      "fee_rate": "100.00000000",
      "max_staking_fee": 50000,
      "sign_result": "{\"raw_tx\": \"0200000000010197a8e32b25590962075bf8517aa117459abd26593731e3d58ecf3c8cfb1b9a750200000000000000000350c30000000000002251205e5882d46eadd557b170a4dc73970bb663c37b262da3b7eb75ff9627c51d695b0000000000000000496a476262743400b450b244d588ad9979855f1de3816987e2644035679feee1a72020e3fc0c4dc988b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384fa00125f0c0000000000225120b450b244d588ad9979855f1de3816987e2644035679feee1a72020e3fc0c4dc90140ca3ce98e6837b4404af7e1087072e7306d132ae1ccbf5377f75bd7f2ee7678c9e623e167deaca981269cc317b6c25359b6b399bfb577d5414c17002ca34e463809080300\"}",
      "tx_hash": "7311feeeb9278f487be3c84662210540d8ac2dc24972721d7978915ef649f8c8"
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon List Transactions By Status
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_list_transactions_by_status

GET /v1/custody/mpc/babylon/list_transactions_by_status/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to query all staking transactions based on the provided parameter `status`, `address`, `min_cobo_id` and `limit`.

#### Request

<ParamField query="status" type="Int" required>
  | Status Type                                                                                                                                                                                                                                                                                                                                                                                                                                                            | Code |
  | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---- |
  | STAKING\_TX\_INIT                                                                                                                                                                                                                                                                                                                                                                                                                                                      | 1    |
  | STAKING\_TX\_WAITING\_BROADCASTING                                                                                                                                                                                                                                                                                                                                                                                                                                     | 100  |
  | STAKING\_TX\_BROADCASTED                                                                                                                                                                                                                                                                                                                                                                                                                                               | 200  |
  | STAKING\_TX\_PENDING                                                                                                                                                                                                                                                                                                                                                                                                                                                   | 300  |
  | STAKING\_ACTIVE                                                                                                                                                                                                                                                                                                                                                                                                                                                        | 400  |
  | STAKING\_OVERFLOW                                                                                                                                                                                                                                                                                                                                                                                                                                                      | 490  |
  | STAKING\_FAILED                                                                                                                                                                                                                                                                                                                                                                                                                                                        | 499  |
  | STAKING\_UNBONDINGREQUESTED                                                                                                                                                                                                                                                                                                                                                                                                                                            | 500  |
  | STAKING\_UNBONDING                                                                                                                                                                                                                                                                                                                                                                                                                                                     | 510  |
  | STAKING\_UNBONDED                                                                                                                                                                                                                                                                                                                                                                                                                                                      | 520  |
  | STAKING\_WITHDRAWN                                                                                                                                                                                                                                                                                                                                                                                                                                                     | 600  |
  | <Tip>The 300 status indicates that the transaction has been confirmed on the BTC chain but not yet indexed by Babylon, while the 400 status indicates that the transaction has been successfully confirmed by the Babylon indexer.</Tip>                                                                                                                                                                                                                               |      |
  | <Tip>The 490 status indicates that the transaction has been successfully confirmed by the Babylon indexer, but because it exceeds Babylon's staking cap, it will not be included in the earnings calculation.</Tip>                                                                                                                                                                                                                                                    |      |
  | <Tip>The 500 status indicates that the unbonding request for the staking transaction has been sent to Babylon. The 510 status means that the unbonding transaction is waiting for Babylon to reach the required number of locked blocks. The 520 status indicates that the staking transaction has been successfully unbonded (either due to natural expiration or successful unbonding). Once this status is reached, the staking transaction can be withdrawn.</Tip> |      |
  | <Tip>The 600 status indicates that the staking transaction has been fully withdrawn and the staking transaction is closed.</Tip>                                                                                                                                                                                                                                                                                                                                       |      |
</ParamField>

<ParamField query="address" type="String">staking address</ParamField>
<ParamField query="min_cobo_id" type="String">> cobo\_id; details of staking transactions whose cobo ID are greater than this value will be returned</ParamField>
<ParamField query="limit" type="Int">entries per page; max: 50; default: 50</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="request_id" type="String">Transaction request ID</ResponseField>
    <ResponseField name="cobo_id" type="String">Unique transaction ID in Cobo</ResponseField>
    <ResponseField name="staking_info" type="String">Detailed information of the staking transaction, in JSON format</ResponseField>

    <ResponseField name="status" type="Int">
      | Status Type                        | Code |
      | ---------------------------------- | ---- |
      | STAKING\_TX\_INIT                  | 1    |
      | STAKING\_TX\_WAITING\_BROADCASTING | 100  |
      | STAKING\_TX\_BROADCASTED           | 200  |
      | STAKING\_TX\_PENDING               | 300  |
      | STAKING\_ACTIVE                    | 400  |
      | STAKING\_OVERFLOW                  | 490  |
      | STAKING\_FAILED                    | 499  |
      | STAKING\_UNBONDINGREQUESTED        | 500  |
      | STAKING\_UNBONDING                 | 510  |
      | STAKING\_UNBONDED                  | 520  |
      | STAKING\_WITHDRAWN                 | 600  |
    </ResponseField>

    <ResponseField name="fee_rate" type="String">transaction fees per byte</ResponseField>
    <ResponseField name="max_staking_fee" type="Int">maximum fee for the staking transaction</ResponseField>
    <ResponseField name="sign_result" type="Json">signature result, which is in JSON format and contains the raw transaction hex</ResponseField>
    <ResponseField name="tx_hash" type="String">transaction hash</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/babylon/list_transactions_by_status/",
      {
          "status": 400,
          "address": "tb1pk3gty3x43zkej7v9tuw78qtfsl3xgsp4v707acd8yqsw8lqvfhystl0rec",
          "cobo_id": "20240617181735000387960000000501"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/babylon/list_transactions_by_status/', {
      "status": 400,
      "address": "tb1pk3gty3x43zkej7v9tuw78qtfsl3xgsp4v707acd8yqsw8lqvfhystl0rec",
      "cobo_id": "20240617181735000387960000000501"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/babylon/list_transactions_by_status/", map[string]string{
      "status": 400,
      "address": "tb1pk3gty3x43zkej7v9tuw78qtfsl3xgsp4v707acd8yqsw8lqvfhystl0rec",
      "cobo_id": "20240617181735000387960000000501"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [{
      "request_id": "1718619454210",
      "cobo_id": "20240617181735000387960000000502",
      "staking_info": "{\"asset_coin\": \"SIGNET_BTC\", \"stake_address\": \"tb1pufc6zv4wquhcshgr4lay4lqa6vua3m435hqmml9w74ycxxnv329qdl6cq2\", \"amount\": 50000, \"stake_block_time\": 64000, \"finality_provider\": \"88b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384\"}",
      "status": 400,
      "fee_rate": "10.00000000",
      "max_staking_fee": null,
      "sign_result": "{\"raw_tx\": \"0200000000010197a8e32b25590962075bf8517aa117459abd26593731e3d58ecf3c8cfb1b9a750200000000000000000350c30000000000002251205e5882d46eadd557b170a4dc73970bb663c37b262da3b7eb75ff9627c51d695b0000000000000000496a476262743400b450b244d588ad9979855f1de3816987e2644035679feee1a72020e3fc0c4dc988b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384fa00125f0c0000000000225120b450b244d588ad9979855f1de3816987e2644035679feee1a72020e3fc0c4dc90140ca3ce98e6837b4404af7e1087072e7306d132ae1ccbf5377f75bd7f2ee7678c9e623e167deaca981269cc317b6c25359b6b399bfb577d5414c17002ca34e463809080300\"}",
      "tx_hash": "7311feeeb9278f487be3c84662210540d8ac2dc24972721d7978915ef649f8c8"
    }]
  }
  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon List Waiting Broadcast Transactions
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_list_waiting_broadcast_transactions

GET /v1/custody/mpc/babylon/list_waiting_broadcast_transactions/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to query all unbroadcasted pre-signed staking transactions based on the provided parameter `asset_coin` and `address`

#### Request

<ParamField query="asset_coin" type="String" required>code of the staking token</ParamField>
<ParamField query="address" type="String" required>staking address</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object[]">
  <Expandable title="object">
    <ResponseField name="request_id" type="String">Transaction request ID</ResponseField>
    <ResponseField name="cobo_id" type="String">Unique transaction ID in Cobo</ResponseField>
    <ResponseField name="staking_info" type="String">Detailed information of the staking transaction, in JSON format</ResponseField>

    <ResponseField name="status" type="Int">
      | Status Type                        | Code |
      | ---------------------------------- | ---- |
      | STAKING\_TX\_INIT                  | 1    |
      | STAKING\_TX\_WAITING\_BROADCASTING | 100  |
      | STAKING\_TX\_BROADCASTED           | 200  |
      | STAKING\_TX\_PENDING               | 300  |
      | STAKING\_ACTIVE                    | 400  |
      | STAKING\_OVERFLOW                  | 490  |
      | STAKING\_FAILED                    | 499  |
      | STAKING\_UNBONDINGREQUESTED        | 500  |
      | STAKING\_UNBONDING                 | 510  |
      | STAKING\_UNBONDED                  | 520  |
      | STAKING\_WITHDRAWN                 | 600  |

      <Tip>The 300 status indicates that the transaction has been confirmed on the BTC chain but not yet indexed by Babylon, while the 400 status indicates that the transaction has been successfully confirmed by the Babylon indexer.</Tip>
      <Tip>The 490 status indicates that the transaction has been successfully confirmed by the Babylon indexer, but because it exceeds Babylon's staking cap, it will not be included in the earnings calculation.</Tip>
      <Tip>The 500 status indicates that the unbonding request for the staking transaction has been sent to Babylon. The 510 status means that the unbonding transaction is waiting for Babylon to reach the required number of locked blocks. The 520 status indicates that the staking transaction has been successfully unbonded (either due to natural expiration or successful unbonding). Once this status is reached, the staking transaction can be withdrawn.</Tip>
      <Tip>The 600 status indicates that the staking transaction has been fully withdrawn and the staking transaction is closed.</Tip>
    </ResponseField>

    <ResponseField name="fee_rate" type="String">transaction fees per byte</ResponseField>
    <ResponseField name="max_staking_fee" type="Int">maximum fee for the staking transaction</ResponseField>
    <ResponseField name="sign_result" type="Json">signature result, which is in JSON format and the contains raw transaction hex</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/babylon/list_waiting_broadcast_transactions/",
      {
          "asset_coin": "SIGNET_BTC",
          "address": "tb1pk3gty3x43zkej7v9tuw78qtfsl3xgsp4v707acd8yqsw8lqvfhystl0rec"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/babylon/list_waiting_broadcast_transactions/', {
      "asset_coin": "SIGNET_BTC",
      "address": "tb1pk3gty3x43zkej7v9tuw78qtfsl3xgsp4v707acd8yqsw8lqvfhystl0rec"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/babylon/get_staking_info/", map[string]string{
      "asset_coin": "SIGNET_BTC",
      "address": "tb1pk3gty3x43zkej7v9tuw78qtfsl3xgsp4v707acd8yqsw8lqvfhystl0rec"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": [{
      "request_id": "1717134063431",
      "cobo_id": "20240531134105000300692000007801",
      "staking_info": "{\"asset_coin\": \"SIGNET_BTC\", \"stake_address\": \"tb1pufc6zv4wquhcshgr4lay4lqa6vua3m435hqmml9w74ycxxnv329qdl6cq2\", \"amount\": 50000, \"stake_block_time\": 64000, \"finality_provider\": \"88b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384\"}",
      "status": 200,
      "fee_rate": "100.00000000",
      "max_staking_fee": 50000,
      "sign_result": "{\"raw_tx\": \"0200000000010197a8e32b25590962075bf8517aa117459abd26593731e3d58ecf3c8cfb1b9a750200000000000000000350c30000000000002251205e5882d46eadd557b170a4dc73970bb663c37b262da3b7eb75ff9627c51d695b0000000000000000496a476262743400b450b244d588ad9979855f1de3816987e2644035679feee1a72020e3fc0c4dc988b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384fa00125f0c0000000000225120b450b244d588ad9979855f1de3816987e2644035679feee1a72020e3fc0c4dc90140ca3ce98e6837b4404af7e1087072e7306d132ae1ccbf5377f75bd7f2ee7678c9e623e167deaca981269cc317b6c25359b6b399bfb577d5414c17002ca34e463809080300\"}"
    }]
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon Prepare Staking
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_prepare_staking

POST /v1/custody/mpc/babylon/prepare_staking/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint is used to create a pre-signed staking transaction, accepting parameters such as `request_id`, `stake_info`, `fee_rate`, and `max_staking_fee`. Please note that a successfully created staking transaction will not be broadcast automatically; you need to call the [Babylon Broadcast Staking Transaction](/developers/api-references/mpc-wallet/babylon_broadcast_staking_transaction) endpoint to broadcast it.

#### Request

<ParamField body="request_id" type="String" required>transaction request ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>

<ParamField body="stake_info" type="String" required>
  detailed information for constructing a staking transaction in JSON format

  * asset\_coin: string, code of the staking token
  * stake\_address: string, staking address
  * amount: int, staking amount
  * stake\_block\_time: int, number of staking blocks, which starts counting after the transaction is on the chain
  * finality\_provider: string, pubkey hex of the provider to be used for staking. The default is None, which uses the provider pubkey hex managed by Cobo

  ```python Sample
  '{"asset_coin": "SIGNET_BTC", "stake_address": "tb1pg4n40etj6qf8c7zj0lzfswaey58f30ps4d9fnezwj5m7fc62w2pqgp0fxm", "amount": 50000, "stake_block_time": 64000, "finality_provider": "88b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384"}'
  ```
</ParamField>

<ParamField body="fee_rate" type="Float" required>transaction fees per byte</ParamField>
<ParamField body="max_staking_fee" type="Int">maximum fee for constructing the transaction. If the actual fee exceeds this limit, the creation will fail. The default is None.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="String">""</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/babylon/prepare_staking/",
      {
          "request_id": "1717059604245",
          "stake_info": '{"asset_coin": "SIGNET_BTC", "stake_address": "tb1pg4n40etj6qf8c7zj0lzfswaey58f30ps4d9fnezwj5m7fc62w2pqgp0fxm", "amount": 50000, "stake_block_time": 64000, "finality_provider": "88b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384"}',
          "fee_rate": 7.5,
          "max_staking_fee": 2000
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/babylon/prepare_staking/', {
      "request_id": "1717059604245",
      "stake_info": '{"asset_coin": "SIGNET_BTC", "stake_address": "tb1pg4n40etj6qf8c7zj0lzfswaey58f30ps4d9fnezwj5m7fc62w2pqgp0fxm", "amount": 50000, "stake_block_time": 64000, "finality_provider": "88b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384"}',
      "fee_rate": 7.5,
      "max_staking_fee": 2000
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/babylon/prepare_staking/", map[string]string{
      "request_id": "1717059604245",
      "stake_info": '{"asset_coin": "SIGNET_BTC", "stake_address": "tb1pg4n40etj6qf8c7zj0lzfswaey58f30ps4d9fnezwj5m7fc62w2pqgp0fxm", "amount": 50000, "stake_block_time": 64000, "finality_provider": "88b32b005d5b7e29e6f82998aff023bff7b600c6a1a74ffac984b3aa0579b384"}',
      "fee_rate": 7.5,
      "max_staking_fee": 2000
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": ""
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon Replace Staking Fee
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_replace_staking_fee

POST /v1/custody/mpc/babylon/replace_staking_fee/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint specify the pre-signed staking transaction, create a new transaction to replace the corresponding transaction, accepting parameters such as `request_id`, `related_request_id`, `fee_rate`, and `max_staking_fee`.

#### Request

<ParamField body="request_id" type="String" required>transaction ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>
<ParamField body="related_request_id" type="String" required>request ID of the transaction to be replaced</ParamField>
<Tip>Only transactions with the status 100 and 200 are eligible to be replaced.</Tip>
<ParamField body="fee_rate" type="Float" required>transaction fees per byte</ParamField>
<ParamField body="max_staking_fee" type="Int">maximum fee for constructing the transaction. If the actual fee exceeds this limit, the creation will fail. The default is None.</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="String">""</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/babylon/replace_staking_fee/",
      {
          "request_id": "1717059604245",
          "related_request_id": "1717059601673",
          "fee_rate": 9.5,
          "max_staking_fee": 2000
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/babylon/replace_staking_fee/', {
      "request_id": "1717059604245",
      "related_request_id": "1717059601673",
      "fee_rate": 9.5,
      "max_staking_fee": 2000
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/babylon/replace_staking_fee/", map[string]string{
      "request_id": "1717059604245",
      "related_request_id": "1717059601673",
      "fee_rate": 9.5,
      "max_staking_fee": 2000
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": ""
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon Unbonding
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_unbonding

POST /v1/custody/mpc/babylon/unbonding/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint performs the unbond operation for a given staking transaction.

#### Request

<ParamField body="request_id" type="String" required>transaction ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>
<ParamField body="staking_request_id" type="String" required>request ID of the staking transaction to be unbonded</ParamField>
<Tip>Please note that only staking transactions with status 400 or 490 are eligible to be unbonded.</Tip>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="String">""</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/babylon/unbonding/",
      {
          "request_id": "1717059604245",
          "staking_request_id": "1717059601673"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/babylon/unbonding/', {
      "request_id": "1717059604245",
      "staking_request_id": "1717059601673"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/babylon/unbonding/", map[string]string{
      "request_id": "1717059604245",
      "staking_request_id": "1717059601673"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": ""
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Babylon Withdraw
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/babylon_withdraw

POST /v1/custody/mpc/babylon/withdraw/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint performs the withdraw operation for a given staking transaction.

#### Request

<ParamField body="request_id" type="String" required>transaction ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>
<ParamField body="fee_rate" type="Float" required>transaction fees per byte</ParamField>
<ParamField body="max_fee_amount" type="Int">maximum fee for constructing the transaction. If the actual fee exceeds this limit, the creation will fail. The default is None.</ParamField>
<ParamField body="staking_request_id" type="String">request ID of the staking transaction to be withdrawn</ParamField>
<Tip>Please note that only staking transactions with status 520 are eligible to be withdrawn.</Tip>
<ParamField body="unbonding_request_id" type="String">request ID of the unbonding transaction</ParamField>
<Tip>Please note that the `staking_request_id` and `unbonding_request_id` parameters are mutually exclusive. If the staking transaction has naturally expired, please provide the `staking_request_id` parameter. If the staking transaction has been successfully unbonded, please provide the `unbonding_request_id` parameter.</Tip>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="String">""</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/babylon/withdraw/",
      {
          "request_id": "1717059604245",
          "fee_rate": 9.5,
          "max_fee_amount": 2000,
          "unbonding_request_id": "1717059601673",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/babylon/withdraw/', {
      "request_id": "1717059604245",
      "fee_rate": 9.5,
      "max_fee_amount": 2000,
      "unbonding_request_id": "1717059601673",
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/babylon/withdraw/", map[string]string{
      "request_id": "1717059604245",
      "fee_rate": 9.5,
      "max_fee_amount": 2000,
      "unbonding_request_id": "1717059601673",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": ""
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Create Transaction
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_create_transaction

POST /v1/custody/mpc/create_transaction/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint creates a transaction for a given coin and request ID. The request must include the amount, from_address, and to_address. Optional parameters include fee, gas_price, gas_limit, max_fee, max_priority_fee, operation, and extra_parameters. The endpoint returns a JSON response with a 'cobo_id' field containing the ID of the created transaction.

#### Request

<ParamField body="coin" type="String" required>coin code</ParamField>
<ParamField body="request_id" type="String" required>transaction ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>

<ParamField body="amount" type="Int">
  transaction amount in decimal places (e.g. one bitcoin is divisible to eight decimal places, and 100000000 represents 1 BTC)

  Account Model: this parameter is required

  UTXO Model: this parameter is optional. The transaction sending amount will be based on the `to_address_details` parameter if the `amount` is zero or empty
</ParamField>

<ParamField body="from_address" type="String">
  Account Model: this parameter is required

  UTXO Model: this parameter is optional, the input will be selected based off the `extra_parameters` parameter if the `from_address` is empty or not passed. The `from_address` will also be used as the change address of UTXO transactions when utxo\_change\_address not specified in extra\_parameters
</ParamField>

<ParamField body="to_address" type="String">to address</ParamField>

<ParamField body="to_address_details" type="String">
  list of addresses used for receiving coins associated with the UTXO model; this value must be a JSON string and has a parameter type that fits.
  <br />Please note that the `to_address_details` parameter and `amount` parameter are alternative. Please set the `amount` parameter to 0 or leave it empty when using the `to_address_details` parameter.

  ```python Sample
  to_address_details: '[{"to_address": "2N4J1WajwKZKpRtzzUmaW9B5GEqkppqdVY9","amount": "547"},
                         {"to_address": "tb1qycxy8d8jgff8hql09y62smw5s5mrf3ryn2j9lk","amount": "548"}]'
  ```
</ParamField>

<ParamField body="fee" type="Float">transaction fees per byte; applicable to UTXO model; use either fee or fee\_amount for UTXO model</ParamField>
<Tip>If you have previously called the `estimate_fee` API to obtain an estimated fee for UTXO transactions before creating the transaction, please use the `fee_amount` parameter instead of `fee` to specify the transaction fee. Otherwise, it will re-estimate the transaction fee based on the `fee` parameter when creating the transaction.</Tip>
<ParamField body="gas_price" type="Int">gas price; applicable to ETH; unit: wei</ParamField>
<ParamField body="gas_limit" type="Int">gas limit, applicable to ETH</ParamField>

<ParamField body="operation" type="Int">
  action type,
  100: TRANSFER (default);
  200: CONTRACT\_CALL
</ParamField>

<ParamField body="extra_parameters" type="String">
  UTXO Model:

  1. **input\_selection:** inputs to be excluded and included in transactions associated with the UTXO model; inputs must be in correspondence with from\_address (if specified); it must be a JSON string and has a structure that fits InputSelection
  2. **inputs\_to\_spend:** UTXO you want as input. Please note that the length of the list of UTXOs should be less than or equal to 100.
     * tx\_hash: Transaction tx\_hash
     * vout\_n: UTXO index
  3. **inputs\_to\_exclude:** UTXO you don't want as input
     * tx\_hash: Transaction tx\_hash
     * vout\_n: UTXO index
  4. **utxo\_change\_address:** the change address for UTXO transactions. if parameter from\_address passed and utxo\_change\_address not passed, from\_address will be used as the change address. otherwise, the permanent address (SegWit) will be used as the change address

  ```python Sample
  extra_parameters: '{"input_selection":
                          {"inputs_to_spend":[
                                {"tx_hash": "e7ddfa61cc2a78e1661da44b10cdc862256573d2dc0485dc989fb7045ed9032c", "vout_n": 1},
   			                  {"tx_hash": "eabaee1f1a196b087e78303c6eaaeb9d1166de5f8d85f4ef7872b88bfcd60914", "vout_n": 2}],
                          "inputs_to_exclude":[
   		                      {"tx_hash": "e7ddfa61cc2a78e1661da44b10cdc862256573d2dc0485dc989fb7045ed9032c", "vout_n": 3},
   			                  {"tx_hash": "eabaee1f1a196b087e78303c6eaaeb9d1166de5f8d85f4ef7872b88bfcd60914", "vout_n": 4}]
                          },
                       "utxo_change_address": "2MznT7D2tKZKshfQPfhTuLYB7Bw9TZqb17w"
   			        }'
  ```

  Web3 wallet:

  * calldata: request data associated with an EVM transaction; When deploying a new contract, the `to_address` parameter should be set to `0x0000000000000000000000000000000000000000`. Please note that when using `calldata`, the `gas_limit` parameter should be set to an appropriate value based on the data being sent and the contract's execution requirements.

  ```python Sample
  extra_parameters: '{"calldata": "0xa8059cbb000000000000000000000000971948873f869e4517311b190d7eb31e30eba0ef000000000000000000000000000000000000000000000000002386f26fc10000"}'
  ```

  * instructions: request data associated with a Solana transaction. This parameter is in JSON format and contains a list of instructions. Each instruction includes the following parameters:
    * accounts: a list of accounts associated with Solana contract, each of which has the following attributes:
      * pubkey: account address. If the account is signer, `pubkey` needs to match the `from_address` parameter.
      * is\_signer: boolean value indicating whether the account can sign transactions.
      * is\_writable: boolean value indicating whether the account can be modified.
    * data: data used for calling Solana contract.
    * program\_id: contract address. when calling a Solana contract, the `to_address` parameter needs to match the `program_id` parameter. If multiple contracts are being called, then the `to_address` parameter should match the `program_id` parameter of the first instruction.

  ```python Sample
  extra_parameters: '{"instructions": "[{\\"accounts\\":[{\\"pubkey\\":\\"E4MhQWiqCLER3fFZNf8LyQFpLWW3BRxtsR5eps3c3vNS\\",\\"is_signer\\":true,\\"is_writable\\":true}],\\"data\\":\\"Canary TX 4, slot: 219858117\\",\\"program_id\\":\\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\\"}]"}'
  ```
</ParamField>

<ParamField body="fee_amount" type="Int">transaction fee; applicable to UTXO model; use either fee or fee\_amount for UTXO model</ParamField>
<ParamField body="remark" type="String">The remark to withdraw. The length should be less than 2048 characters</ParamField>
<ParamField body="auto_fuel" type="Int">How the transaction utilizes the gas station, 0: no refueling(default); 1: passive use of the gas station; 2: active use of the gas station. <br /> This parameter is used when you've activated the gas station service and use the gas station to support the transaction fee for MPC transactions.</ParamField>
<Tip>The gas station will definitely refuel for the transaction when in active use, while for passive use, refueling by the gas station occurs only when the address balance is insufficient for transaction fees.<br /><br />Please note that due to the TRON chain's fee delegation mechanism, only no refueling and active use of the gas station are supported for the TRON chain; passive use of the gas station is not supported.</Tip>
<ParamField body="memo" type="String">Needed when you withdraw XRP</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="cobo_id" type="String">Unique transaction ID</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python

  # TRANSFER example:
  request(
      "POST",
      "/v1/custody/mpc/create_transaction/",
      {
          "coin": "VET",
          "from_address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
          "to_address": "0x51d91dd9d7af32fe3aebf7e257c74d24baffa692",
          "amount": 1,
          "request_id": "1671699717647"
      },
      api_key, api_secret, host
  )


  # UTXO example:
  request(
      "POST",
      "/v1/custody/mpc/create_transaction/",
      {
          'coin': 'XTN',
          'request_id': 'mpc_api_1674896802004',
          'to_address': '2N4J1WajwKZKpRtzzUmaW9B5GEqkppqdVY9',
          'amount': '400003',
          'extra_parameters': '{"input_selection":
                                  {"inputs_to_spend":
                                      [{"tx_hash": "e7ddfa61cc2a78e1661da44b10cdc862256573d2dc0485dc989fb7045ed9032c", "vout_n": 1},
                                       {"tx_hash": "eabaee1f1a196b087e78303c6eaaeb9d1166de5f8d85f4ef7872b88bfcd60914", "vout_n": 2}]
                                  }
                               }'
      }
      api_key, api_secret, host


  # Web3 example:
  request(
      "POST",
      "/v1/custody/mpc/create_transaction/",
      {
          'coin': 'GETH',
          'request_id': 'mpc_api_1674896802004',
          'from_address': '0x7c524e7c37b9b8279aaf9b10940a8368540f2aec',
          'to_address': '0x7c524e7c37b9b8279aaf9b10940a8368540f2aec',
          'amount': '100000000',
          'gas_price':2613036
          'gas_limit':21000
          'extra_parameters':'{"calldata": "0xa8059cbb000000000000000000000000971948873f869e4517311b190d7eb31e30eba0ef000000000000000000000000000000000000000000000000002386f26fc10000"}'
      }
      api_key, api_secret, host

  ```

  ```javascript JavaScript

  //TRANSFER example:
  coboFetch('POST', '/v1/custody/mpc/create_transaction/', {
      "coin": "VET",
      "from_address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
      "to_address": "0x51d91dd9d7af32fe3aebf7e257c74d24baffa692",
      "amount": 1,
      "request_id": "1671699717647"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });

  //UTXO example:
  coboFetch('POST', '/v1/custody/mpc/create_transaction/',{
          'coin': 'XTN',
          'request_id': 'mpc_api_1674896802004',
          'to_address': '2N4J1WajwKZKpRtzzUmaW9B5GEqkppqdVY9',
          'amount': '400003',
          'extra_parameters': '{"input_selection":
                                  {"inputs_to_spend":
                                      [{"tx_hash": "e7ddfa61cc2a78e1661da44b10cdc862256573d2dc0485dc989fb7045ed9032c", "vout_n": 1},
                                       {"tx_hash": "eabaee1f1a196b087e78303c6eaaeb9d1166de5f8d85f4ef7872b88bfcd60914", "vout_n": 2}]
                                  }
                               }'
      }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });


  //Web3 example:
  coboFetch('POST', '/v1/custody/mpc/create_transaction/',{
          'coin': 'GETH',
          'request_id': 'mpc_api_1674896802004',
          'from_address': '0x7c524e7c37b9b8279aaf9b10940a8368540f2aec',
          'to_address': '0x7c524e7c37b9b8279aaf9b10940a8368540f2aec',
          'amount': '100000000',
          'gas_price':2613036
          'gas_limit':21000
          'extra_parameters':'{"calldata": "0xa8059cbb000000000000000000000000971948873f869e4517311b190d7eb31e30eba0ef000000000000000000000000000000000000000000000000002386f26fc10000"}'
      }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });

  ```

  ```go Go
  //TRANSFER example:
  Request("POST", "/v1/custody/mpc/create_transaction/", map[string]string{
      "coin": "VET",
      "from_address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
      "to_address": "0x51d91dd9d7af32fe3aebf7e257c74d24baffa692",
      "amount": 1,
      "request_id": "1671699717647"
  })

  //UTXO example:
  Request("POST", "/v1/custody/mpc/create_transaction/", map[string]string{
          'coin': 'XTN',
          'request_id': 'mpc_api_1674896802004',
          'to_address': '2N4J1WajwKZKpRtzzUmaW9B5GEqkppqdVY9',
          'amount': '400003',
          'extra_parameters': '{"input_selection":
                                  {"inputs_to_spend":
                                      [{"tx_hash": "e7ddfa61cc2a78e1661da44b10cdc862256573d2dc0485dc989fb7045ed9032c", "vout_n": 1},
                                       {"tx_hash": "eabaee1f1a196b087e78303c6eaaeb9d1166de5f8d85f4ef7872b88bfcd60914", "vout_n": 2}]
                                  }
                               }'
      })

  //Web3 example:
  Request("POST", "/v1/custody/mpc/create_transaction/", map[string]string{
          'coin': 'GETH',
          'request_id': 'mpc_api_1674896802004',
          'from_address': '0x7c524e7c37b9b8279aaf9b10940a8368540f2aec',
          'to_address': '0x7c524e7c37b9b8279aaf9b10940a8368540f2aec',
          'amount': '100000000',
          'gas_price':2613036
          'gas_limit':21000
          'extra_parameters':'{"calldata": "0xa8059cbb000000000000000000000000971948873f869e4517311b190d7eb31e30eba0ef000000000000000000000000000000000000000000000000002386f26fc10000"}'
      })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "cobo_id": "20221227195133000378036000001822"
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Drop Transaction
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_drop_transaction

POST /v1/custody/mpc/drop_transaction/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint accepts parameters 'cobo_id' and 'request_id' as required fields, and 'fee', 'gas_price', 'gas_limit', and 'fee_amount' as optional fields. The endpoint returns a JSON response containing information about the transaction request.

<Tip>
  Only transactions with the status 401, 402, and 403 are eligible to be replaced.<br />
  Once a transaction (the original transaction or the new transaction) on the chain reaches the required number of confirmations (transaction status changes to 900), other RBF-related transactions will be marked as replaced (transaction status changes to 901).
</Tip>

#### Request

<ParamField body="cobo_id" type="String" required>Unique transaction ID</ParamField>
<ParamField body="request_id" type="String" required>RBF transaction request ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>
<ParamField body="fee" type="Float">Transaction fees per byte; must be higher than the original transaction fees; applicable to the UTXO model</ParamField>
<ParamField body="gas_price" type="Int">Gas price; must be higher than the original gas price</ParamField>
<ParamField body="gas_limit" type="Int">Gas limit</ParamField>
<ParamField body="fee_amount" type="Int">transaction fee; applicable to UTXO model; use either fee or fee\_amount for UTXO model</ParamField>
<ParamField query="auto_fuel" type="Int">How the transaction utilizes the gas station, 0: no refueling(default); 1: passive use of the gas station; 2: active use of the gas station. <br /> This parameter is used when you've activated the gas station service and use the gas station to support the transaction fee for MPC transactions.</ParamField>
<Tip>The gas station will definitely refuel for the transaction when in active use, while for passive use, refueling by the gas station occurs only when the address balance is insufficient for transaction fees.</Tip>

<ParamField body="extra_parameters" type="String">
  UTXO Model:

  * utxo\_from\_address: Given that the new transaction fee is higher, if the new transaction requires additional inputs, then the new inputs will be selected from `utxo_from_address`. Please note that the new inputs will be selected from the current wallet if this parameter is not provided.

  ```python Sample
  extra_parameters: '{"utxo_from_address": "tb1qpllcnnpt3z9nkxtj3a0jmhdj5xvxaerhv5xs5n"}'
  ```
</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="cobo_id" type="String">Unique transaction ID</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/drop_transaction/",
      {
          "cobo_id": "20221229151018000370189000003690",
          "request_id": "722669426842706122"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/drop_transaction/', {
      "cobo_id": "20221229151018000370189000003690",
      "request_id": "722669426842706122"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/drop_transaction/", map[string]string{
      "cobo_id": "20221229151018000370189000003690",
      "request_id": "722669426842706122"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "cobo_id": "20221227195133000378036000001822"
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Approval Details
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_get_approval_details

GET /v1/custody/mpc/get_approval_details/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response with the transaction approval process data for a given transaction request ID. The endpoint requires authentication and takes a 'request_id' parameter in the GET request.

#### Request

<ParamField query="request_id" type="String" required>Transaction request ID</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="spender" type="object">
      <Expandable title="object">
        <ResponseField name="role_result" type="Int">approval result of the role, 0: WAITING, 1: APPROVED, -1: DECLINED</ResponseField>
        <ResponseField name="review_threshold" type="Int">review threshold</ResponseField>
        <ResponseField name="initiator" type="String">transaction initiator</ResponseField>

        <ResponseField name="user_details" type="object">
          <Expandable title="object">
            <ResponseField name="pubkey" type="object">
              <Expandable title="object">
                <ResponseField name="result" type="Int">approval result of the user, 1: UNKNOWN, 2: APPROVED, 3 DECLINED, 4: IGNORED</ResponseField>
                <ResponseField name="signature" type="String">signature</ResponseField>
                <ResponseField name="last_time" type="String">last operation time</ResponseField>
                <ResponseField name="language" type="String">language</ResponseField>
                <ResponseField name="message" type="String">transaction review message</ResponseField>
                <ResponseField name="message_version" type="String">message version</ResponseField>
                <ResponseField name="extra_message" type="String">extra message</ResponseField>
                <ResponseField name="transaction_type" type="String">transaction type</ResponseField>
              </Expandable>
            </ResponseField>
          </Expandable>
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="broker_user" type="object">
      <Expandable title="object">
        <ResponseField name="role_result" type="Int">approval result of the role, 0: WAITING, 1: APPROVED, -1: DECLINED</ResponseField>
        <ResponseField name="review_threshold" type="Int">review threshold</ResponseField>
        <ResponseField name="initiator" type="String">Initiator</ResponseField>

        <ResponseField name="user_details" type="object">
          <Expandable title="object">
            <ResponseField name="pubkey" type="object">
              <Expandable title="object">
                <ResponseField name="result" type="Int">approval result of the user, 1: UNKNOWN, 2: APPROVED, 3 DECLINED, 4: IGNORED</ResponseField>
                <ResponseField name="signature" type="String">signature</ResponseField>
                <ResponseField name="last_time" type="String">last operation time</ResponseField>
                <ResponseField name="language" type="String">language</ResponseField>
                <ResponseField name="message" type="String">transaction review message</ResponseField>
                <ResponseField name="message_version" type="String">message version</ResponseField>
                <ResponseField name="extra_message" type="String">extra message</ResponseField>
                <ResponseField name="transaction_type" type="String">transaction type</ResponseField>
              </Expandable>
            </ResponseField>
          </Expandable>
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="approver" type="object">
      <Expandable title="object">
        <ResponseField name="role_result" type="Int">approval result of the role, 0: WAITING, 1: APPROVED, -1: DECLINED</ResponseField>
        <ResponseField name="review_threshold" type="Int">review threshold</ResponseField>
        <ResponseField name="initiator" type="String">Initiator</ResponseField>

        <ResponseField name="user_details" type="object">
          <Expandable title="object">
            <ResponseField name="pubkey" type="object">
              <Expandable title="object">
                <ResponseField name="result" type="Int">approval result of the user, 1: UNKNOWN, 2: APPROVED, 3 DECLINED, 4: IGNORED</ResponseField>
                <ResponseField name="signature" type="String">signature</ResponseField>
                <ResponseField name="last_time" type="String">last operation time</ResponseField>
                <ResponseField name="language" type="String">language</ResponseField>
                <ResponseField name="message" type="String">transaction review message</ResponseField>
                <ResponseField name="message_version" type="String">message version</ResponseField>
                <ResponseField name="extra_message" type="String">extra message</ResponseField>
                <ResponseField name="transaction_type" type="String">transaction type</ResponseField>
              </Expandable>
            </ResponseField>
          </Expandable>
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/get_approval_details/",
      {
          "request_id": "1716285866523",
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/get_approval_details/', {
      "request_id": "1716285866523",
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/get_approval_details/", map[string]string{
      "request_id": "1716285866523",
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "spender": {},
      "broker_user": {
        "role_result": 1,
        "review_threshold": 1,
        "initiator": "API",
        "user_details": {
          "51ae8dbdcf49a117e80b61ee278e4925cdf0aec29a51965da5421dd51ecaba9038373138a32a706507eb2de5112946aede58f9c996e02548e0a5a2246d46f342": {
            "result": 2,
            "signature": "d9db4fd719104d014d9ed6bcb79b959bd268d009c0da88f2120035aba4f2ee237389b283fad545ac756ffb2c2342d1be80a113a4dab6a486e3699cde4925663c",
            "last_time": "2024-05-24 06:40:23.792131+00:00",
            "language": "en",
            "message": "【Transaction Review】Please confirm the details\n\nRequest ID: mpc-transfer-1723544808437\n\nFrom: 0x3d3e6f2ce7f434caeef3d28dd5e21e0cbf3eb548\n\nInteracted With (To): 0x3d3e6f2ce7f434caeef3d28dd5e21e0cbf3eb548\n\nValue: 0.0001 Holesky ETH\n\nTentative Fee: 0.0000000513744 Holesky ETH（0.0000000000024464 Holesky ETH * 21000）\n\nTime: 2025-01-07 13:48:59\nMax Fee Amount: \n",
            "message_version": "1.0.1",
            "extra_message": "custody|3aM7ZZUr6ZKjtPekiz9fuFcehjGbYddW8vtLsUPvE5hXhe2gL9BJ4Ng5T9V4rEC1KXfc3cNtCPu4twcXDNPQ44eaVj8sU2jHQJ5m3jybaBZVXJFpC8DcqY1NkPppLCpTSvQCN9z7n|web_send_by_user_1475_1716532814022|1716532817",
            "transaction_type": "Withdraw"
          }
        }
      },
      "approver": {
        "role_result": -1,
        "review_threshold": 1,
        "initiator": "API",
        "user_details": {
          "51ae8dbdcf49a117e80b61ee278e4925cdf0aec29a51965da5421dd51ecaba9038373138a32a706507eb2de5112946aede58f9c996e02548e0a5a2246d46f342": {
            "result": 3,
            "signature": "0dec39cb9ac2909e037722ba753ea52342db33399d49226b1cf826e8fa0b92df440a42a623e78c7a2d3c6d90e71fd561dcfc7750531acb073a7903c50220b761",
            "last_time": "2024-05-24 06:42:32.660555+00:00",
            "language": "zh",
            "message": "审核员审核\n交易类型: Withdraw\n钱包: My MPC wallet\n网络: Ethereum Holsky Testnet\n发起人: API\n请求 ID: mpc-transfer-1723544808437\n创建时间: 2025-01-07 13:48:59\n\n协议:  \n发送地址: 0x3d3e6f2ce7f434caeef3d28dd5e21e0cbf3eb548\n接收地址: 0x3d3e6f2ce7f434caeef3d28dd5e21e0cbf3eb548\n\n金额: 0.0001 Holesky ETH\nEstimated Fee: 0.0000000513744 Holesky ETH（0.0000000000024464 Holesky ETH * 21000）\n\n交易说明: test mpc transfer\n",
            "extra_message": "custody|3aM7ZZUr6ZKjtPekiz9fuFcehjGbYddW8vtLsUPvE5hXhe2gL9BJ4Ng5T9V4rEC1KXfc3cNtCPu4twcXDNPQ44eaVj8sU2jHQJ5m3jybaBZVXJFpC8DcqY1NkPppLCpTSvQCN9z7n|web_send_by_user_1475_1716532814022|1716532914",
            "transaction_type": "Withdraw"
          }
        }
      }
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Tss Node List
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_tss_node

GET /v1/custody/mpc/list_tss_node/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of TSS Nodes that configured on the Custody MPC Setting page. The response includes node id, node type and if the node is online.

#### Request

None

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="tss_nodes" type="object[]">
      <Expandable title="object">
        <ResponseField name="node_id" type="String">Unique TSS Node ID</ResponseField>
        <ResponseField name="type" type="Int">TSS Node type(third party: 1, node managed by yourself: 2, Cobo: 3)</ResponseField>
        <ResponseField name="online" type="Bool">if TSS node is online (online: true，offline: false)</ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/list_tss_node/",
      {},
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/list_tss_node/', {}, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/list_tss_node/", map[string]string{})
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "tss_nodes": [
        {
          "node_id": "cobo7k8y49r1W9XtkSUs7v267mQmgZ7ZaV7W2noHgxA6rAJBZ",
          "type": 2,
          "online": true
        },
        {
          "node_id": "coboMbU7KqoVhXJSyyFeJ2fZWbXQWtZvs1WjmhnzXFB7CTowo",
          "type": 1,
          "online": true
        },
        {
          "node_id": "coboWS6hKma2MxxobbpjB8W2SVmpBiisaBq4rxqVpWJAZpecK",
          "type": 3,
          "online": true
        }
      ]
    }
  }

  ```
</ResponseExample>

```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>
```


# Get Tss Node Requests List
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_list_tss_node_requests

GET /v1/custody/mpc/list_tss_node_requests/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing a list of TSS (Threshold Signature Scheme) requests with their metadata. The requests can be filtered by request type and status. The metadata includes the COBO ID, request type, status, failed reason (if any), and additional information specific to the request type (e.g., threshold and node IDs for key generation requests).

#### Request

<ParamField query="request_type" type="Int">Request type(KEYGEN type: 1, KEYRESHARE type: 2)</ParamField>
<ParamField query="status" type="int">Request status</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="requests" type="object[]">
      <Expandable title="object">
        <ResponseField name="cobo_id" type="String">Unique request ID</ResponseField>
        <ResponseField name="request_type" type="Int">Request type(KEYGEN type: 1, KEYRESHARE type: 2)</ResponseField>
        <ResponseField name="status" type="Int">Request status（NEW: 100, WAITING\_APPROVAL: 200, PENDING: 300, SUCCESS: 400, FAILED: 500）</ResponseField>
        <ResponseField name="failed_reason" type="String">Reason for failure</ResponseField>

        <ResponseField name="meta" type="object[]">
          <Expandable title="object">
            <ResponseField name="key_gen" type="object[]">
              <Expandable title="object">
                <ResponseField name="cobo_id" type="String">Unique request ID</ResponseField>
                <ResponseField name="threshold" type="Int">Signature Threshold</ResponseField>
                <ResponseField name="node_ids" type="String[ ]">Request data associated with key generation (i.e. KeyGen) and soft key recovery (i.e. KeyShare)</ResponseField>
              </Expandable>
            </ResponseField>
          </Expandable>
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/list_tss_node_requests/",
      {
          "request_type": 1,
          "status": 400
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/list_tss_node_requests/', {
      "request_type": 1,
      "status": 400
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/list_tss_node_requests/", map[string]string{
      "request_type": 1,
      "status": 400
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "requests": [
        {
          "cobo_id": "20221205155958000350435000006699",
          "request_type": 1,
          "status": 400,
          "failed_reason": null,
          "meta": {
            "key_gen": {
              "cobo_id": "20221205155958000350435000006699",
              "threshold": 2,
              "node_ids": [
                "cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA",
                "coboMbU7KqoVhXJSyyFeJ2fZWbXQWtZvs1WjmhnzXFB7CTowo",
                "coboWS6hKma2MxxobbpjB8W2SVmpBiisaBq4rxqVpWJAZpecK"
              ]
            }
          }
        }
      ]
    }
  }




  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Retry Double Check
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_retry_double_check

POST /v1/custody/mpc/retry_double_check/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint retries a double check for a withdraw request with the given request_id. The request must be a POST request and the user must have all permissions. The endpoint retrieves the withdraw request with the given request_id and checks if it exists and has a status of 'STATUS_WAITING_DOUBLE_CHECK'. If the request is valid, the endpoint locks the record and processes the withdraw request with the 'process_waiting_double_check_withdraw_request' method from the CustodyService class.

#### Request

<ParamField body="request_id" type="String" required>transaction request ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>
<ResponseField name="result" type="object">success is null. </ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/retry_double_check/",
      {
          "request_id": "722669426842706122"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/retry_double_check/', {
      "request_id": "722669426842706122"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/retry_double_check/", map[string]string{
      "request_id": "722669426842706122"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  # double check success
  {
    "success": true,
    "result": ""
  }

  # double check failed
  {
    "success": false,
    "error_code": 1006,
    "error_message": "invalid request_id",
    "error_id": "6d9fd6b4a2e346b9953a3be47ebd0700",
    "error_description": "invalid request_id"
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Speedup Transaction
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_speedup_transaction

POST /v1/custody/mpc/speedup_transaction/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint allows users to speed up a previously submitted transaction by replacing it with a new transaction with higher transation fee. The endpoint accepts a POST request with parameters including cobo_id, request_id, fee, gas_price, gas_limit, and fee_amount. The response is a JSON object containing the updated transaction information.

<Tip>
  Only transactions with the status 401, 402, and 403 are eligible to be replaced.<br />
  Once a transaction (the original transaction or the new transaction) on the chain reaches the required number of confirmations (transaction status changes to 900), other RBF-related transactions will be marked as replaced (transaction status changes to 901).
</Tip>

#### Request

<ParamField body="cobo_id" type="String" required>Unique transaction ID</ParamField>
<ParamField body="request_id" type="String" required>RBF transaction request ID (unique identifier of a transaction request, which must correspond to a client's transaction; UUID should be used and the length should be equal to or less than 120 characters)</ParamField>
<ParamField body="fee" type="Float">Transaction fees per byte; must be higher than the original transaction fees; applicable to the UTXO model</ParamField>
<ParamField body="gas_price" type="Int">The gas price for the new transaction(must be higher than the original gas price)</ParamField>
<ParamField body="gas_limit" type="Int">The gas limit for the new transaction.</ParamField>
<ParamField body="fee_amount" type="Int">transaction fee; applicable to UTXO model; use either fee or fee\_amount for UTXO model.</ParamField>
<ParamField query="auto_fuel" type="Int">How the transaction utilizes the gas station, 0: no refueling(default); 1: passive use of the gas station; 2: active use of the gas station. <br /> This parameter is used when you've activated the gas station service and use the gas station to support the transaction fee for MPC transactions.</ParamField>
<Tip>The gas station will definitely refuel for the transaction when in active use, while for passive use, refueling by the gas station occurs only when the address balance is insufficient for transaction fees.</Tip>

<ParamField body="extra_parameters" type="String">
  UTXO Model:

  * utxo\_from\_address: Given that the new transaction fee is higher, if the new transaction requires additional inputs, then the new inputs will be selected from `utxo_from_address`. Please note that the new inputs will be selected from the current wallet if this parameter is not provided.

  ```python Sample
  extra_parameters: '{"utxo_from_address": "tb1qpllcnnpt3z9nkxtj3a0jmhdj5xvxaerhv5xs5n"}'
  ```
</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <ResponseField name="cobo_id" type="String">Unique transaction ID</ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "POST",
      "/v1/custody/mpc/speedup_transaction/",
      {
          "cobo_id": "20221229151018000370189000003690",
          "request_id": "722669426842706122"
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('POST', '/v1/custody/mpc/speedup_transaction/', {
      "cobo_id": "20221229151018000370189000003690",
      "request_id": "722669426842706122"
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("POST", "/v1/custody/mpc/speedup_transaction/", map[string]string{
      "cobo_id": "20221229151018000370189000003690",
      "request_id": "722669426842706122"
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "cobo_id": "20221227195133000378036000001822"
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By Cobo ID
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_transactions_by_cobo_ids

GET /v1/custody/mpc/transactions_by_cobo_ids/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a list of transaction requests based on the provided cobo_ids and status. The cobo_ids parameter is a comma-separated list of cobo ids. The status parameter is an optional integer representing the status of the transaction request. The response is a JSON object containing an array of transaction request objects.

#### Request

<ParamField query="cobo_ids" type="String" required>List of Cobo Unique IDs for transactions, separated by commas, cannot be empty or greater than 50</ParamField>

<ParamField query="status" type="Int">
  | Status Type           | Code |
  | --------------------- | ---- |
  | PENDING\_APPROVAL     | 101  |
  | QUEUED                | 201  |
  | PENDING\_SIGNATURE    | 301  |
  | BROADCASTING          | 401  |
  | BROADCAST\_FAILED     | 402  |
  | PENDING\_CONFIRMATION | 403  |
  | CONFIRMATION          | 501  |
  | REVERTING             | 502  |
  | SUCCESS               | 900  |
  | FAILED                | 901  |
  | REORG                 | 902  |

  <Tip>The 403 status indicates that the transaction has been successfully broadcast but not yet confirmed, while the 501 status indicates that the transaction has been successfully confirmed on the blockchain and is awaiting further confirmations.</Tip>
</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <Snippet file="mpc_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/transactions_by_cobo_ids/",
      {
          "cobo_ids": "20221222170157000336673000008161",
          "status": 101
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/transactions_by_cobo_ids/', {
      "cobo_ids": "20221222170157000336673000008161",
      "status": 101
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/transactions_by_cobo_ids/", map[string]string{
      "cobo_ids": "20221222170157000336673000008161",
      "status": 101
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "total": 28,
      "transactions": [
        {
          "cobo_id": "20221222170157000336673000008161",
          "request_id": "web_send_by_user_915_1671699717647",
          "status": 101,
          "coin_detail": {
            "coin": "GETH",
            "display_code": "GETH",
            "description": "Ethereum Goerli Testnet",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 32
          },
          "amount_detail": {
            "amount": "9000000000000000",
            "abs_amount": "0.009"
          },
          "fee_detail": {
            "fee_coin_detail": {
              "coin": "GETH",
              "display_code": "GETH",
              "description": "Ethereum Goerli Testnet",
              "decimal": 18,
              "can_deposit": True,
              "can_withdraw": True,
              "confirming_threshold": 32
            },
            "gas_price": 300000000,
            "gas_limit": 21000,
            "fee_used": 0
          },
          "source_addresses": "",
          "from_address": "0x3ede1e59a3f3a66de4260df7ba3029b515337e5c",
          "to_address": "0x9414933Ff7777bb28cA22D15c178596A6e58d957",
          "tx_hash": "",
          "vout_n": 0,
          "nonce": null,
          "confirmed_number": 0,
          "replace_cobo_id": "",
          "transaction_type": 303,
          "operation": 100,
          "block_detail": {
            "block_hash": "",
            "block_height": 0,
            "block_time": 0
          },
          "tx_detail": {
            "tx_hash": ""
          },
          "extra_parameters": "",
          "created_time": 1671699717956,
          "updated_time": 1671699717956,
          "failed_reason": null,
          "max_priority_fee": null,
          "max_fee": null,
          "approval_process": {"spender_result": 1, "spender_review_threshold": 1, "spender_status": [{"spender_person": "Cobo_Test_spender", "status": "approve"}], "spender_complete_time": 1681906749496, "approver_result": 1, "approver_review_threshold": 1, "approver_status": [{"approve_person": "Cobo_Test_approver", "status": "approve"}], "approver_complete_time": 1681906758619},
          "remark": "",
          "memo": "",
          "gas_station_child_id": ""
        }
      ]
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By Request ID
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_transactions_by_request_ids

GET /v1/custody/mpc/transactions_by_request_ids/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns a JSON response containing transaction information for a list of transaction request IDs. The response includes the transaction ID, request ID, status, and other relevant information. The endpoint requires authentication and accepts optional query parameters to filter the results by transaction status.

<Tip> FAQ：[How to query the transaction details of a batch withdraw request?](/v1/faqs/transaction-management#how-to-query-the-transaction-details-of-a-batch-withdrawal-request)</Tip>

#### Request

<ParamField query="request_ids" type="String" required>Transaction request IDs; separated by commas; the number of IDs must be greater than 0 and less than 50</ParamField>

<ParamField query="status" type="Int">
  | Status Type           | Code |
  | --------------------- | ---- |
  | PENDING\_APPROVAL     | 101  |
  | QUEUED                | 201  |
  | PENDING\_SIGNATURE    | 301  |
  | BROADCASTING          | 401  |
  | BROADCAST\_FAILED     | 402  |
  | PENDING\_CONFIRMATION | 403  |
  | CONFIRMATION          | 501  |
  | REVERTING             | 502  |
  | SUCCESS               | 900  |
  | FAILED                | 901  |
  | REORG                 | 902  |

  <Tip>The 403 status indicates that the transaction has been successfully broadcast but not yet confirmed, while the 501 status indicates that the transaction has been successfully confirmed on the blockchain and is awaiting further confirmations.</Tip>
</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <Snippet file="mpc_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/transactions_by_request_ids/",
      {
          "request_ids": "web_send_by_user_915_1671699717647",
          "status": 101
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/transactions_by_request_ids/', {
      "request_ids": "web_send_by_user_915_1671699717647",
      "status": 101
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/transactions_by_request_ids/", map[string]string{
      "request_ids": "web_send_by_user_915_1671699717647",
      "status": 101
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "total": 28,
      "transactions": [
        {
          "cobo_id": "20221222170157000336673000008161",
          "request_id": "web_send_by_user_915_1671699717647",
          "status": 101,
          "coin_detail": {
            "coin": "GETH",
            "display_code": "GETH",
            "description": "Ethereum Goerli Testnet",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 32
          },
          "amount_detail": {
            "amount": "9000000000000000",
            "abs_amount": "0.009"
          },
          "fee_detail": {
            "fee_coin_detail": {
              "coin": "GETH",
              "display_code": "GETH",
              "description": "Ethereum Goerli Testnet",
              "decimal": 18,
              "can_deposit": True,
              "can_withdraw": True,
              "confirming_threshold": 32
            },
            "gas_price": 300000000,
            "gas_limit": 21000,
            "fee_used": 0
          },
          "source_addresses": "",
          "from_address": "0x3ede1e59a3f3a66de4260df7ba3029b515337e5c",
          "to_address": "0x9414933Ff7777bb28cA22D15c178596A6e58d957",
          "tx_hash": "",
          "vout_n": 0,
          "nonce": null,
          "confirmed_number": 0,
          "replace_cobo_id": "",
          "transaction_type": 303,
          "operation": 100,
          "block_detail": {
            "block_hash": "",
            "block_height": 0,
            "block_time": 0
          },
          "tx_detail": {
            "tx_hash": ""
          },
          "extra_parameters": "",
          "created_time": 1671699717956,
          "updated_time": 1671699717956,
          "failed_reason": null,
          "max_priority_fee": null,
          "max_fee": null,
          "approval_process": {"spender_result": 1, "spender_review_threshold": 1, "spender_status": [{"spender_person": "Cobo_Test_spender", "status": "approve"}], "spender_complete_time": 1681906749496, "approver_result": 1, "approver_review_threshold": 1, "approver_status": [{"approve_person": "Cobo_Test_approver", "status": "approve"}], "approver_complete_time": 1681906758619},
          "remark": "",
          "memo": "",
          "gas_station_child_id": ""
        }
      ]
    }
  }

  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Get Transactions By Tx Hash
Source: https://cobo.com/developers/v1/api-references/mpc-wallet/mpc_transactions_by_tx_hash

GET /v1/custody/mpc/transactions_by_tx_hash/
<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note> This endpoint returns transaction details for a given transaction hash. The response is a JSON object containing transaction details such as transaction hash, block number, sender address, recipient address, value, and gas used. The endpoint also accepts an optional parameter 'transaction_type' to filter the transaction details based on the type of transaction.

#### Request

<ParamField query="tx_hash" type="String" required>Transaction hash</ParamField>

<ParamField query="transaction_type" type="int">
  **only use in non-web3 wallet:**

  | Transaction Type               | Code |
  | ------------------------------ | ---- |
  | TRANSACTION\_FROM\_WEB         | 100  |
  | TRANSACTION\_FROM\_API         | 102  |
  | TRANSACTION\_RBF\_API\_SPEEDUP | 103  |
  | TRANSACTION\_RBF\_WEB\_SPEEDUP | 104  |
  | TRANSACTION\_RBF\_API\_DROP    | 105  |
  | TRANSACTION\_RBF\_WEB\_DROP    | 106  |
  | TRANSACTION\_FROM\_EXTERNAL    | 107  |
  | TRANSACTION\_FROM\_DEPOSIT     | 1000 |

  **only use in web3 wallet:**

  | Transaction Type                             | Code |
  | -------------------------------------------- | ---- |
  | TYPE\_MPC\_WEB3\_WEB                         | 300  |
  | TYPE\_MPC\_WEB3\_MMI\_TX                     | 301  |
  | TYPE\_MPC\_WEB3\_API\_TRANSACTION            | 303  |
  | TYPE\_MPC\_WEB3\_TRANSACTION\_FROM\_EXTERNAL | 307  |
  | TYPE\_MPC\_WEB3\_RBF\_API\_SPEEDUP           | 308  |
  | TYPE\_MPC\_WEB3\_RBF\_WEB\_SPEEDUP           | 309  |
  | TYPE\_MPC\_WEB3\_RBF\_API\_DROP              | 310  |
  | TYPE\_MPC\_WEB3\_RBF\_WEB\_DROP              | 311  |
  | TRANSACTION\_FROM\_DEPOSIT                   | 1000 |
</ParamField>

#### Response

<ResponseField name="success" type="bool">request successful or failed</ResponseField>

<ResponseField name="result" type="object">
  <Expandable title="object">
    <Snippet file="mpc_transaction_snippet.mdx" />
  </Expandable>
</ResponseField>

<RequestExample>
  ```python Python
  request(
      "GET",
      "/v1/custody/mpc/transactions_by_tx_hash/",
      {
          "tx_hash": "0x224cd23f20a8dfbbe5418871f6a32ddee4463b31e77b5090e7efff1bd8bb6b74",
          "transaction_type": 303
      },
      api_key, api_secret, host
  )
  ```

  ```javascript JavaScript
  coboFetch('GET', '/v1/custody/mpc/transactions_by_tx_hash/', {
      "tx_hash": "0x224cd23f20a8dfbbe5418871f6a32ddee4463b31e77b5090e7efff1bd8bb6b74",
      "transaction_type": 303
  }, api_key, api_secret, host)
      .then(res => {
          res.json().then((data)=>{
              console.log(JSON.stringify(data, null, 4));
          })
      }).catch(err => {
          console.log(err)
      });
  ```

  ```go Go
  Request("GET", "/v1/custody/mpc/transactions_by_tx_hash/", map[string]string{
      "tx_hash": "0x224cd23f20a8dfbbe5418871f6a32ddee4463b31e77b5090e7efff1bd8bb6b74",
      "transaction_type": 303
  })
  ```
</RequestExample>

<ResponseExample>
  ```json
  {
    "success": true,
    "result": {
      "total": 28,
      "transactions": [
        {
          "cobo_id": "20221222170157000336673000008161",
          "request_id": "web_send_by_user_915_1671699717647",
          "status": 101,
          "coin_detail": {
            "coin": "GETH",
            "display_code": "GETH",
            "description": "Ethereum Goerli Testnet",
            "decimal": 18,
            "can_deposit": True,
            "can_withdraw": True,
            "confirming_threshold": 32
          },
          "amount_detail": {
            "amount": "9000000000000000",
            "abs_amount": "0.009"
          },
          "fee_detail": {
            "fee_coin_detail": {
              "coin": "GETH",
              "display_code": "GETH",
              "description": "Ethereum Goerli Testnet",
              "decimal": 18,
              "can_deposit": True,
              "can_withdraw": True,
              "confirming_threshold": 32
            },
            "gas_price": 300000000,
            "gas_limit": 21000,
            "fee_used": 0
          },
          "source_addresses": "",
          "from_address": "0x3ede1e59a3f3a66de4260df7ba3029b515337e5c",
          "to_address": "0x9414933Ff7777bb28cA22D15c178596A6e58d957",
          "tx_hash": "",
          "vout_n": 0,
          "nonce": null,
          "confirmed_number": 0,
          "replace_cobo_id": "",
          "transaction_type": 303,
          "operation": 100,
          "block_detail": {
            "block_hash": "",
            "block_height": 0,
            "block_time": 0
          },
          "tx_detail": {
            "tx_hash": ""
          },
          "extra_parameters": "",
          "created_time": 1671699717956,
          "updated_time": 1671699717956,
          "failed_reason": null,
          "max_priority_fee": null,
          "max_fee": null,
          "approval_process": {"spender_result": 1, "spender_review_threshold": 1, "spender_status": [{"spender_person": "Cobo_Test_spender", "status": "approve"}], "spender_complete_time": 1681906749496, "approver_result": 1, "approver_review_threshold": 1, "approver_status": [{"approve_person": "Cobo_Test_approver", "status": "approve"}], "approver_complete_time": 1681906758619},
          "remark": "",
          "memo": "",
          "gas_station_child_id": ""
        }
      ]
    }
  }



  ```
</ResponseExample>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Address Management
Source: https://cobo.com/developers/v1/faqs/address-management

Frequently Asked Questions about Address Management 

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
<Tip> Navigate to your desired sections via the sidebar   👉 </Tip>

### How to batch-generate addresses?

<Expandable title="Answer">
  <ResponseField>You may use the [POST /v1/custody/new\_addresses/](/v1/api-references/custody-wallet/new_addresses) endpoint to batch-generate addresses under a Custodial Wallet.
  To batch-generate addresses under an MPC Wallet, you may use the [POST /v1/custody/mpc/generate\_addresses/](/v1/api-references/mpc-wallet/mpc_generate_addresses) endpoint instead. A maximum of 200 addresses can be generated in a single request.</ResponseField>
</Expandable>

### How to verify whether a withdraw address is legitimate?

<Expandable title="Answer">
  <ResponseField>You can use the [GET /v1/custody/is\_valid\_address/](/v1/api-references/custody-wallet/is_valid_address) endpoint to query whether a withdraw address under a Custodial Wallet is legitimate.
  For an MPC Wallet, please use the [GET /v1/custody/mpc/is\_valid\_address/](/v1/api-references/mpc-wallet/mpc_is_valid_address) endpoint instead. If the response returns an zero, it indicates that the address is deemed invalid.</ResponseField>
</Expandable>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# API Callback
Source: https://cobo.com/developers/v1/faqs/api-callback

Frequently Asked Questions about API Callback

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
<Tip> Navigate to your desired sections via the sidebar   👉 </Tip>

### Do I need to verify a callback?

<Expandable title="Answer">
  <ResponseField>
    For security reasons, we highly recommend that you complete the signature verification and IP whitelisting when receiving Cobo's callback messages. You can obtain Cobo's pubkey by heading to Cobo Custody Web-Wallet-API Callback. For more information on signature verification, refer to /api-references/development/callback-signature.
  </ResponseField>
</Expandable>

### How many times can an API callback notification be pushed?

<Expandable title="Answer">
  <ResponseField>
    Each API callback can be pushed for a maximum of 14 times. The time intervals between each push are incremental, starting at 10-minute intervals and progressively extending to hourly, bi-hourly, and so forth.
  </ResponseField>
</Expandable>

### Why do I need to configure API callback confirmation?

<Expandable title="Answer">
  <ResponseField>
    Given the potential single-point failure risks associated with API servers, we strongly recommend that you maintain a dedicated callback server for configuring API callback confirmation. This not only enhances risk isolation but also facilitates effective internal security control. In the event of an exception during API callback confirmation, Cobo's 24/7 customer support will provide you with real-time alerts, enabling immediate internal inspection to address any potential security vulnerabilities.
  </ResponseField>
</Expandable>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# API Key
Source: https://cobo.com/developers/v1/faqs/api-key

Frequently Asked Questions about API Key

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
<Tip> Navigate to your desired sections via the sidebar   👉 </Tip>

### How can I obtain the public and private API keys?

<Expandable title="Answer">
  <ResponseField>
    Cobo employs the ECDSA algorithm for signature verification. We strongly recommend that you generate your public and private API keys locally to ensure that Cobo neither has access to nor stores your private keys. After generating your keys locally, you can manage the public keys by heading to Cobo Custody Web-Wallet-API. For more information on private key generation, signing and verification, please refer to [https://github.com/CoboGlobal/](https://github.com/CoboGlobal/). For API references, please go to /v1/api-references/overview/authentication.
  </ResponseField>
</Expandable>

### Why cannot I add an API key on Cobo Custody Web?

<Expandable title="Answer">
  <ResponseField>
    Only the admin is authorized to add API keys on Cobo Custody Web. Please contact your admin if you don't have the permission
  </ResponseField>
</Expandable>

### Why did my API signature verification fail?

<Expandable title="Answer">
  <ResponseField>
    Your API signature verification may have failed due to the following reasons:

    The public keys are not associated with the correct environments (i.e., production, development) on Cobo Custody Web.

    Incorrect API key types. Please make sure that you are using the correct key type (i.e., "querying", "withdraw and querying", "operation and querying").

    The incorrect HOST has been used.

    * Development: [https://api.dev.cobo.com](https://api.dev.cobo.com); corresponding Cobo Custody Web page: [https://home.develop.cobo.com/](https://home.develop.cobo.com/).
    * Production: [https://api.cobo.com](https://api.cobo.com); corresponding Cobo Custody Web page: [https://home.custody.cobo.com/](https://home.custody.cobo.com/).

    If the issue still persists, please provide us with the parameters and return values for troubleshooting.
  </ResponseField>
</Expandable>

### Do all API keys have a validity period of 90 days?

<Expandable title="Answer">
  <ResponseField>
    If an API key is not associated with an IP whitelist, its validity period is limited to 90 days. However, once an IP address is added to the API key, it becomes permanently valid.
  </ResponseField>
</Expandable>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Coin Management
Source: https://cobo.com/developers/v1/faqs/coin-management

Frequently Asked Questions about Coin Management

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
<Tip> Navigate to your desired sections via the sidebar   👉 </Tip>

### How do I query the withdraw fees?

<Expandable title="Answer">
  <ResponseField>
    The withdraw fees may fluctuate based on how busy a blockchain network is. You can refer to the `abs_estimate_fee` field
    of the [GET /v1/custody/coin\_info](/v1/api-references/custody-wallet/coin_info) endpoint to check the estimated withdraw fees associated with a Custodial Wallet.
    For an MPC Wallet, please use the [GET /v1/custody/mpc/estimate\_fee/](/v1/api-references/mpc-wallet/mpc_estimate_fee) endpoint instead.
  </ResponseField>
</Expandable>

### What do `amount` and `abs_amount` stand for in the interface?

<Expandable title="Answer">
  <ResponseField>In the realm of cryptocurrencies, each coin possesses a smallest unit.
  For instance, a satoshi is the smallest unit of Bitcoin. Each Bitcoin equals 100 million satoshis (i.e., 100,000,000).
  Cobo denominates amount in terms of the smallest unit specific to each cryptocurrency to prevent complications associated with the misuse of floating point numbers.
  If you transfer 1 Bitcoin, for instance, the `amount` will be displayed as 100,000,000 and the `abs_amount` will be 1.
  This conversion is calculated using the formula: abs\_amount = amount / pow(10, decimal).</ResponseField>
</Expandable>

### How do I query the minimum deposit amount for a specific coin?

<Expandable title="Answer">
  <ResponseField>
    You can refer to the `minimum_deposit_threshold` field of the [GET /v1/custody/get\_supported\_coins/](/v1/api-references/custody-wallet/get_supported_coins)
    endpoint to query the minimum deposit amount for a specific coin within a Custodial Wallet. If the response returns a zero, it indicates that the there is no minimum deposit requirement for the selected type of coins. Note that coins held under an MPC Wallet do not have any minimum deposit requirements.
  </ResponseField>
</Expandable>

### Why does the coin amount returned by the 'org\_info' field of the API endpoint differ from the amount shown on the Cobo Custody Web dashboard?

<Expandable title="Answer">
  <ResponseField>
    The data returned by the org\_info field of the API endpoint should match the balance of the corresponding coin in your wallet.
    However, the coin balances displayed on the Cobo Custody Web dashboard (as seen in the first screenshot) are snapshots and may experience a delay of up to one hour.
    If you need to query real-time balances, we recommend that you navigate to the specific wallet first and verify the balance of the corresponding coin within that wallet (as seen in the second screenshot).

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/faq-coin-management-02.png" />

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/faq-coin-management-01.png" />
  </ResponseField>
</Expandable>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Transaction Management
Source: https://cobo.com/developers/v1/faqs/transaction-management

Frequently Asked Questions about Transaction Management

<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
<Tip> Navigate to your desired sections via the sidebar   👉 </Tip>

### How to query the transaction details of a batch withdraw request?

<Expandable title="Answer">
  <ResponseField>
    You can use the [GET /v1/custody/transactions\_by\_request\_ids/](/v1/api-references/custody-wallet/transactions_by_request_ids) endpoint
    to query the transaction details of a batch withdraw request submitted under a Custodial Wallet. The request IDs should be provided in the `request_ids` field of the GET request, separated by commas.
    For an MPC Wallet, you can use the [GET /v1/custody/mpc/transactions\_by\_request\_ids/](/v1/api-references/mpc-wallet/mpc_transactions_by_request_ids) endpoint instead. A maximum of 50 request IDs can be included in a single request.
  </ResponseField>
</Expandable>

### How do I query the details of a pending transaction?

<Expandable title="Answer">
  <ResponseField>
    You may use the [GET /v1/custody/pending\_transactions/](/v1/api-references/custody-wallet/pending_transactions)
    endpoint to query the details of a pending transaction under a Custodial Wallet. For an MPC Wallet, you may refer to the `status` field with code 501 CONFIRMATION in [any transactional APIs](/v1/api-references/mpc-wallet/mpc_list_transactions) to retrieve the details of a pending transaction.
    Prior to using any endpoints, however, you need to first head to Cobo Custody Web and enable the "Transaction Notification - Includes Block Confirmation Number" Status feature.
    Failure to enable this feature will result in the inability to fetch transaction information. For more information, please refer to  /api-references/development/transaction-notification. Do note that some transactions cannot be retrieved due to fast on-chain confirmations (e.g., TRON).
  </ResponseField>
</Expandable>

### How can I retrieve transaction records for all wallets?

<Expandable title="Answer">
  <ResponseField>
    There are several methods to retrieve wallet transaction records:

    * **API Callback**: Enable the Transaction Notification feature on the Cobo Custody Web and set up the Cobo API callback service to retrieve transaction records. [Click here](/v1/api-references/development/transaction-notification) for more information.
    * **Cobo Custody Web**: Visit the Cobo Custody Web and navigate to the corresponding wallet. Switch to the "Transactions" tab and export transaction records using available filters.
    * **API Call**: Use the "[transactions\_by\_time](/v1/api-references/custody-wallet/transactions_by_time)" endpoint to fetch a transaction list that contains details such as transaction hash, amount, and timestamp. Filter the returned data using parameters such as time range, coin type, transaction type (e.g., withdraw, deposit), and address.
    * **API Call**: Use the "[transaction\_history](/v1/api-references/custody-wallet/transaction_history)" endpoint to query transaction records for a specific coin and address. Filter the returned data using parameters such as side, max\_id, min\_id, begin\_time, end\_time, and include\_financial. The maximum number of transactions that can be returned is 50.
  </ResponseField>
</Expandable>

### In rare instances where an on-chain transaction that has been successfully confirmed is rolled back, how will Cobo handle the transaction that should have been credited?

<Expandable title="Answer">
  <ResponseField>
    For Cobo Full Custody: If a transaction has reached the required number of confirmations but is later rolled back due to a hard fork, we will contact you promptly to resolve the issue.

    For Cobo MPC Co-Managed Custody and MPC Lite: The transaction confirmation count serves only as a reference (provided by Cobo). You maintain complete control over your blockchain addresses, enabling you to autonomously manage rolled-back transactions without requiring Cobo's assistance.
  </ResponseField>
</Expandable>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Best Security Practices for API Configuration
Source: https://cobo.com/developers/v1/guides/howtos/api-configuration-best-practices



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

### 1. Ensure the security of TSS Node and MPC key-shares

The TSS Node is a program for managing MPC key-shares. To ensure the secure maintenance of your TSS Node, please follow the security practices below:

* Cobo offers three deployment methods for the TSS Node. The generic version is suitable for regular Linux servers or Apple Macbooks,
  and a version specifically tailored for deployment on Intel® Software Guard Extensions (SGX) servers is also available.
  For optimal security, we recommend using SGX servers.
* During the installation process, the TSS Node requires access to Ubuntu APT and Docker.io image repositories.
  Ensure to grant the associated network permissions and promptly revoke them following the TSS Node initialization.
  When generating root extended public keys, MPC key-shares, and transaction signatures, the TSS Node will interact with Cobo's servers through the public network.
  Kindly ensure that the relevant network permissions are only open during these specific processes and are promptly closed afterward.
* During the initialization of the TSS Node, you will be required to enter a password for encrypting the MPC key-share database.
  We recommend using a password manager (e.g., 1Password, Bitwarden) to generate a complicated password between 16 to 32 characters.
  The password must be kept secure at all times.
* The MPC key-share database file and the corresponding password must be backed up.We recommend storing them separately on different secure devices,
  with strict restrictions for accessing these devices:
  * Apply additional encryption to all backup data
  * Use a secure hardware-encrypted USB drive for backup
  * Store backup devices in a secure deposit box and restrict access permissions
* Cobo offers dedicated callback services for TSS Node. We strongly recommend deploying and configuring these callback services on a separate server,
  different from the one hosting the TSS Node. For security reasons, make sure to activate callback services for all transactions.
* Cobo will regularly update TSS Node software packages to introduce new features and performance enhancements. For optimal functionality and security,
  ensure that your TSS Node is always running the latest version.

### 2. Proper use the 'request\_id' field in withdraw requests

The 'request\_id' serves as the unique identifier for each withdraw request, corresponding to a specific withdraw action.
This ensures that even in the event of network issues, duplicate withdraw requests sent to Cobo will be rejected due to the repeated 'request\_id'.
We recommend using a Universally Unique Identifier (UUID).

### 3. Properly configure withdraw confirmation callbacks

* The callback URL designated by the client should be hosted on a server isolated from the one storing the API private key to minimize the risk of a single point of failure.
  For instance, it could be a dedicated server hosting a risk control engine.
  <u>We have noticed instances where clients either fail to validate withdraw requests or use callback URLs located on the same server that initiates withdraw requests.</u>
* Please conduct verification for all withdraw requests:
  * a.Check if request\_id, coin, to\_addr, amount, etc., are valid and consistent with your business requests.
  * b.Verify high-risk withdraw behaviors through internal risk control audits. This may involve server security checks, user confirmation for withdraw authenticity, and more.
* Use the HTTPS protocol and enable two-way verification to prevent man-in-the-middle attacks. For Cobo's callback messages, verify the signature using Cobo's public key. We strongly recommend using Cobo SDKs, as they come embedded with default signature verification logic.
* Validate the timestamp carried in the request header to be close to the local server's time. An alert should be triggered if the difference exceeds a specific threshold.
* Cache signature information for a specific period to identify duplicate signatures. If repeated signatures are detected, implement appropriate risk control measures or contact us at [custodyservice@cobo.com](mailto:custodyservice@cobo.com) to safeguard against replay attacks.

### 4. Properly configure transaction notification callbacks

<ol>
  <li>Upon receiving a push message from Cobo, please call the transaction querying endpoint and use the specific 'id' field to validate the transaction.
  <u>Do not rely solely on push messages for deposit and withdraw confirmations.</u></li>
  <li>Due to unpredictable factors such as network delays, a callback may be repeated.
  We recommended using the 'id' field as the unique identifier for each transaction and employing database read-write locks to prevent duplicate accounting.</li>
  <li>Please use the HTTPS protocol and enable two-way verification to prevent man-in-the-middle attacks.
  For Cobo's callback messages, verify the signature using Cobo’s pubkey. We strongly recommend using Cobo SDKs, as they come embedded with default signature verification logic.</li>
</ol>

### 5. Configure risk control rules and set up Cobo Guard

Cobo offers a flexible and configurable set of risk control strategies to safeguard your digital assets. Currently, it supports six types of strategies:

<ol>
  <li>Manage all withdrawals: In the event of abnormal business activity, you can swiftly tighten wallet controls by configuring a rule that subjects all withdraw requests to review.</li>
  <li>Manage all withdrawals initiated via APIs</li>
  <li>Manage all withdrawals initiated via the Cobo Custody Web</li>
  <li>Manage withdrawals to addresses not in the whitelist</li>
  <li>Manage withdrawals to addresses in the whitelist</li>
  <li>Set withdraw limits (i.e., per transaction, per hour, per day): Please set a threshold based on your specific business requirements</li>
</ol>

Different risk control strategies can be combined with various control actions to create flexible and customized risk control rules. Control actions include automated approval, automated rejection, and assigning a specified number of approvers for review.
For instance, you can require approval from any one of four approvers for a transaction, or require approvals from at least two out of four approvers for a withdraw exceeding \$10,000.

To adjust the priority of your risk control rules, use the up/down arrow under the 'Operations' tab. These rules will be applied sequentially from priority 1 to n. If a withdraw triggers multiple risk control rules, the one with the highest priority will be executed.

Important note: <u>After editing your risk control rules, click 'Save Changes' and approve the request on your Cobo Guard.You can then refresh the page to verify if the rules are in effect. We also recommend conducting a test transaction to ensure that the rules align with your business requirements.</u>

### 6. Safeguard your Cobo Custody account and Cobo Guard

<ol>
  <li>Refrain from using easily crackable, simple passwords and avoid storing passwords casually, such as in browser auto-fill. When setting up 2FA or Cobo Guard, exercise caution not to disclose the QR codes or secrets (e.g., ensure there are no others nearby, avoid sending them through screenshots).</li>
  <li>Never share your password or 2FA with anyone, including colleagues or Cobo staff. Note that Cobo staff will never request your password or 2FA in any form.</li>
  <li>Stay vigilant against phishing websites and take note of the official Cobo Custody website: [https://home.custody.cobo.com/](https://home.custody.cobo.com/). You can also set up an anti-phishing phrase on the Cobo Custody Web by navigating to "Settings - Anti-Phishing Code". This phrase will be visible in the upper-right corner of the webpage after each login.</li>
  <li>Never lend a device with Cobo Guard to others or disclose your iPhone password. Ensure that a password or biometric unlock is always required when using a device with Cobo Guard.</li>
</ol>

### 7. Properly configure permissions to prevent internal collusion and malicious activities.

Exercise caution when granting advanced roles such as admins, approvers, and withdrawers.
Admins have the authority to perform high-risk operations, including team and wallet management, risk control configurations, and more.
We recommend that you grant admin roles to only the organization owner.
Additionally, ensure the separation of duties by assigning the withdrawer and approver roles to different individuals.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# API Error Handling and Reporting 
Source: https://cobo.com/developers/v1/guides/howtos/api-error-handling-and-reporting



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Overview

Understanding how to handle API errors is crucial for ensuring a positive user experience and smooth business operations when collaborating with any third-party APIs. These errors may include:

1. Timeouts due to unavailability of the third-party service.
2. Incorrect request formats due to user errors or non-fatal software errors.
3. Runtime errors due to system exceptions or other unexpected issues.

The approach to handling individual errors when utilizing third-party APIs depends on the nature of each API call and the specific business context. The following will outline best practices for managing API errors and resolving common issues.

## Error Codes

The error codes returned by Cobo play a crucial role in identifying specific issues that have arisen during API calls. Understanding these error codes is essential for troubleshooting and ensuring the smooth integration of APIs. Cobo provides two distinct types of error codes: Cobo Error Codes and HTTP Error Codes.

Cobo Error Codes are typically generated during the processing of API calls and may result from various factors, such as incorrect inputs and server exceptions. For more information, please [refer to](/v1/api-references/development/error-codes) the description corresponding to each error code.

HTTP Error Codes, on the other hand, indicate client-side errors and may start with “4”. These errors are usually resulted from issues with parameters in the HTTP request you provided.

HTTP Error Codes that start with “5” indicate server-side errors. In such cases, specific error information cannot be provided. We recommend that you:

1. Do not send the API request again immediately.
2. Double-check the parameters you provided in your request. It might be that one of the parameters was not formatted correctly, thus resulting in a failure in our backend.
3. Contact Cobo’s customer support or seek assistance on Cobo Discord.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Safeguarding API Security Key
Source: https://cobo.com/developers/v1/guides/howtos/api-security-key



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Currently, Cobo uses the asymmetric Elliptic Curve Digital Signature Algorithm (ECDSA). Clients will need to first generate a local key-pair (i.e., public and private keys) and then inform Cobo about the public key. Cobo will use this public key to verify whether a request from the client has a corresponding private key signature. We strongly recommend using Cobo's SDKs, which come with built-in signature verification logic. [Click here](https://www.cobo.com/developers/sdks-and-tools/sdks/waas/python) to download Cobo’s SDKs.

If you choose not to use Cobo's SDKs for WaaS API calls, please [refer to](https://www.cobo.com/developers/api-references/overview/authentication) this link for a better understanding of Cobo's API authentication mechanism. Aside from the public API endpoints, Cobo requires that each API call request be signed. The api\_key corresponds to your public key and must be manually added on Cobo Custody Web. The api\_secret represents your private key and should be securely stored. You can use Cobo's SDKs to create the corresponding api\_secret and api\_key.

For API key security, we recommend the following best practices:

* Generate and store api\_key and api\_secret on a trusted device. We recommend encrypting the api\_secret and then decrypting it during use to ensure it is never transmitted between other servers, networks (e.g., Telegram or instant messengers), or individuals.
* Add IP whitelists. Note that Cobo only accepts requests from designated servers.
* Implement Role-Based Access Control (RBAC) to restrict permissions associated with each API key or token. Ensure that every key is assigned only the essential permissions required for its intended function, adhering to the principle of least privilege.
* Enforce a robust API key rotation policy to systematically update keys at regular intervals. This practice not only mitigates the risk of compromised keys but also guarantees the revocation of outdated or unused keys.
* Implement short-term expirations for API keys or tokens to reduce the window of opportunity for potential attackers. Short-lived keys necessitate more frequent renewal, contributing to heightened security measures by limiting access time.
* Encrypt API keys both in transit (HTTPS) and at rest. Employ encryption and robust storage mechanisms to safeguard keys on servers.
  <Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Setting Up Token Sweeping
Source: https://cobo.com/developers/v1/guides/howtos/auto-token-sweeping-for-mpc-wallets



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Overview

Digital asset platforms and crypto exchanges often deal with the management of a substantial number of wallet addresses.
These addresses are assigned to various end-users, each of whom deposits assets by initiating transfers to designated wallet addresses.
In such cases, these platforms often conduct token sweeping to consolidate assets dispersed across different wallet addresses into a select few addresses.
The rationale behind this approach is to curtail the number of on-chain transactions, thereby minimizing associated gas fees.

Token sweeping may be triggered based on the following considerations:

1. Total amount of assets on a single address
2. Frequency (e.g., daily, weekly)
3. Current network gas fees

Do note that protracted trigger intervals may leave an end user's address with an insufficient balance in the event of a withdraw request.
In such cases, the client may need to submit another token sweeping request to ensure the availability of funds.

## Code Samples

Below are code samples along with corresponding explanations for your references.
You can choose to optimize the token sweeping strategy according to your business needs.
Token sweeping includes two categories: token sweeping for native tokens and non-native tokens.

Java: [https://github.com/CoboGlobal/cobo-java-api/blob/main/example/src/main/java/com/cobo/custody/mpc/MPCFundCollection.java](https://github.com/CoboGlobal/cobo-java-api/blob/main/example/src/main/java/com/cobo/custody/mpc/MPCFundCollection.java)

Python: [https://github.com/CoboGlobal/cobo-python-api/blob/main/mpc\_fund\_collection.py](https://github.com/CoboGlobal/cobo-python-api/blob/main/mpc_fund_collection.py)

## Token Sweeping Logics

1. Verify if the destination address is valid. If validation fails, please exit directly as the token sweeping will be marked as a failure.

<CodeGroup>
  ```java Java
  ApiResponse<Boolean> response = mpcClient.isValidAddress(coin, toAddr);
          if (!response.isSuccess()) {
              return false;
          }
          if (!response.getResult()) {
              return false;
          }
  ```

  ```python Python
  resp = self.mpc_client.is_valid_address(coin=coin, address=to_addr)
  if not resp or not resp.success or not resp.result:
  return False
  ```
</CodeGroup>

2. Query the coin type used for settling transaction fees.

<CodeGroup>
  ```java Java
  ApiResponse<EstimateFeeDetails> feeResponse = mpcClient.estimateFee(coin, toAmount, toAddr, null);
          if (!feeResponse.isSuccess()) {
              return false;
          }
  ```

  ```python Python
  fee_resp = self.mpc_client.estimate_fee(coin=coin, amount=to_amount, address=to_addr)
  if not resp:
         		return False
  ```
</CodeGroup>

3. Consolidate the balances of the queried coin type across all addresses under the MPC Wallet. If the aggregated balance falls below the estimated transaction fees amount, please exit directly as the token sweeping will be marked as a failure.

<CodeGroup>
  ```java Java
     // Query the total number of addresses with remaining balances
          Integer pageIndex = 0;
          Integer pageLength = 50;
          ApiResponse<MPCListBalances> balances = mpcClient.listBalances(coin, pageIndex, pageLength);
          if (!balances.isSuccess()) {
              return false;
          }
          Integer total = balances.getResult().getTotal();
          if (total <= 0) {
              return false;
          }
          // Retrieve the balance data from all addresses with remaining balances
          List<MPCCoinBalanceDetail> allBalances = new ArrayList<>();
          while (pageIndex * pageLength < total) {
              balances = mpcClient.listBalances(coin, pageIndex, pageLength);
              allBalances.addAll(balances.getResult().getCoinData());
              pageIndex += pageLength;
          }
          // Summarize the total balance across all addresses with remaining balances; if the address matches the toAddr, the balance will not be swept
          BigInteger allBalanceAmount = new BigInteger("0");
          for (MPCCoinBalanceDetail balanceDetail : allBalances) {
              if (Objects.equals(balanceDetail.getAddress(), toAddr)) {
                  continue;
              }
              BigInteger balance = new BigInteger(balanceDetail.getBalance());
              allBalanceAmount = allBalanceAmount.add(balance);
          }
  ```

  ```python Python

  page_index = 0
          page_length = 50
          #  Query the total number of addresses with remaining balances
          balance_resp = self.mpc_client.list_balances(coin=coin, page_index=page_index, page_length=page_length)
          if not balance_resp or not balance_resp.success or int(balance_resp.result.get('total')) <= 0:
              return False
          balance_total = int(balance_resp.result.get('total'))
          #  Retrieve the balance data from all addresses with remaining balances
          all_balances = []
          while page_index * page_length < balance_total:
              balance_resp = self.mpc_client.list_balances(coin=coin, page_index=page_index, page_length=page_length)
              all_balances.extend(balance_resp.result.get('coin_data'))
              page_index += page_length
          # Summarize the total balance across all addresses with remaining balances; if the address matches the toAddr, the balance will not be swept

          all_balance_amount = 0
          for balance in all_balances:
              if balance.get('address') == to_addr:
                  continue
              all_balance_amount += balance.get('balance')
  if all_balance_amount > to_amount:
              transfer_all_amount = 0
              for balance in all_balances:
                  if balance.get('address') == to_addr:
                      continue
  ```
</CodeGroup>

4. Transfer the balances of the specified coin type across all addresses to the destination address. The token sweeping process concludes when the total swept amount reaches the predefined threshold.
   1. When you sweep native tokens, the amount to sweep is computed based on the total address balances, your pre-set sweeping threshold, and the estimated transaction fees.
   2. When you sweep non-native tokens, verify first that "fromAddr" has sufficient balance to cover the estimated transaction fees. If insufficient, please transfer funds from "feeAddr" to "fromAddr" to ensure the success of token sweeping.

<CodeGroup>
  ```java Java
  if (allBalanceAmount.compareTo(toAmount) >= 0) {
      BigInteger transferAllAmount = new BigInteger("0");
      for (MPCCoinBalanceDetail balanceDetail : allBalances) {
          if (Objects.equals(balanceDetail.getAddress(), toAddr)) {
              continue;
          }
          if (feeResponse.getResult().getFeeCoin().equals(coin)) {
              // sweep native tokens
              BigInteger transferAmount = transfer(balanceDetail.getCoin(), balanceDetail.getAddress(), toAddr, toAmount.subtract(transferAllAmount));
              transferAllAmount = transferAllAmount.add(transferAmount);
          } else {
              // sweep non-native tokens
              BigInteger transferAmount = tokenTransfer(balanceDetail.getCoin(), balanceDetail.getAddress(), toAddr, feeFromAddress, toAmount.subtract(transferAllAmount));
              transferAllAmount = transferAllAmount.add(transferAmount);
          }
          if (transferAllAmount.compareTo(toAmount) >= 0) {
              return true;
          }
      }
      // transfer funds from "feeAddr" to "fromAddr" to ensure the success of token sweeping
      return transferAllAmount.compareTo(toAmount) >= 0;
      } else {
      return false;
      }
  ```

  ```python Python

  if all_balance_amount > to_amount:
              transfer_all_amount = 0
              for balance in all_balances:
                  if balance.get('address') == to_addr:
                      continue
                  if fee_resp.result.get('fee_coin') == coin:
                      # sweep native tokens
                      transfer_all_amount += self.transfer(coin=coin, from_addr=balance.get('address'), to_addr=to_addr, to_amount=to_amount - transfer_all_amount)
                  else:
                      transfer_all_amount += self.token_transfer(coin=coin, from_addr=balance.get('address'), to_addr=to_addr, fee_addr=fee_from_addr, to_amount=to_amount - transfer_all_amount)
                  if transfer_all_amount > to_amount:
                      return True
              # transfer funds from "feeAddr" to "fromAddr" to ensure the success of token sweeping
              return transfer_all_amount > to_amount
          else:
              return False
  ```
</CodeGroup>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# How to Configure API Callback 
Source: https://cobo.com/developers/v1/guides/howtos/configure-api-callback



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

API callback is a service provided by Cobo to its clients, delivering push messages to a client-designated callback URL when an event is triggered (e.g., a new deposit or withdraw).
API callback is commonly used for event-driven architectures and is particularly useful when immediate responses are needed.
To use API callback on Cobo, the client will need to first set up the API callback service and configure a specific URL on the Cobo Custody Web.
Currently, Cobo supports two types of API callback: Transaction Notification and Withdraw Confirmation.

**Transaction Notification:** When a deposit/withdraw transaction is scanned on chain by Cobo, it will send a push message to an URL specified by the client.
This serves to provide clients with real-time updates on all transactions and aid in transaction reconciliation. For more information, please [click here](/v1/api-references/development/transaction-notification).

**Withdraw Confirmation:** Cobo will send a push message to the callback URL using the POST method, containing withdraw details.
Clients are required to respond to Cobo in the RESPONSE format, indicating either 'OK' or 'Deny' in the message body. If no response or a 'Deny' response is provided, the withdraw request will be rejected.
For more information, please [click here](/v1/api-references/development/withdrawal-confirmation).

The following provides instructions on configuring the API callback service, along with code samples for callback endpoints.

<Note>
  1. Make sure to modify the coboPubKey, URL, and customCheck based on your business needs.
  2. This demo sets up an HTTP server that can receive POST requests from Cobo.
</Note>

```java Java
package com.cobo.callback.controller;

import com.cobo.custody.api.client.config.Env;
import com.cobo.custody.api.client.impl.LocalSigner;
import org.springframework.web.bind.annotation.*;
import org.apache.commons.lang3.StringUtils;

@RestController
public class CallbackController {
   // Configure coboPub based on your operating environment (i.e., development or production environment)
   private static final String coboPubKey = Env.DEV.coboPub;

   @RequestMapping(value="/custody_callback", method = RequestMethod.POST)
   public static String custodyCallback(@RequestHeader("Biz-Timestamp") String timestamp,
                                                        @RequestHeader("Biz-Resp-Signature") String signature,
                                                        @RequestBody String body) {
       boolean verifyResult = false;
       try {
           if (!StringUtils.isEmpty(timestamp) && !StringUtils.isEmpty(signature)) {
               String content = body + "|" + timestamp;
               verifyResult = LocalSigner.verifyEcdsaSignature(content, signature, coboPubKey);
           }
       } catch (Exception e) {
           e.fillInStackTrace();
       }

       verifyResult &= customCheck(body);

       return verifyResult ? "ok" : "deny";
   }

   public static boolean customCheck(String body) {
       //add you checking policy
       return true;
   }
}
```

#### Dependency configurations

```java Java
plugins {
  id 'java'
  id 'org.springframework.boot' version '3.1.4'
  id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.cobo'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '17'
}

repositories {
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter'
  implementation 'org.springframework.boot:spring-boot-starter-web:3.1.4'
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'com.github.CoboGlobal:cobo-java-api:v0.62'
  implementation "org.slf4j:slf4j-simple:1.7.9"
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
  useJUnitPlatform()
}

```

Security recommendations for configuring and deploying a callback server:

1. HTTPS: Configure the callback server to use HTTPS, and employ the SSL/TLS handshake to establish an encrypted link between the client and server to enable secure data transmission.
2. Callback verification: Ensure that you only accept callback requests from trusted sources. You can employ token validation, IP whitelisting, or other methods to verify if requests originate from legitimate sources.
3. Firewall and security group rules: Set up firewall rules on your cloud server or network devices to allow inbound and outbound callback traffic. Only permit specific ports and IP ranges to access the callback server.
4. Logging: Enable detailed logging on the callback server to track and analyze the history of callback requests. This is instrumental for troubleshooting and monitoring system performance.
5. Timeout and retry policies: Define appropriate timeout and retry policies for callback requests to ensure proper handling and retries in case of network issues or server unavailability.
6. Security: Ensure that the operating system, web server, and applications running on your server are up-to-date, with the latest security updates and patches installed.
7. Monitoring and alerts: Configure server monitoring to detect the status and performance of the callback server. In the event of failures or anomalies, set up alerts to promptly notify your operations team.
8. Fault Tolerance: Ensure that the callback server can tolerate and appropriately handle duplicate callback requests to prevent data duplication or other issues.
9. Documentation and notifications: Provide documentation or notifications to enable the initiator of callback requests to understand how to correctly construct and handle callback requests.
10. Disaster recovery and backup: Configure a disaster recovery or backup server to ensure that services continue to operate even if the primary callback server experiences a failure.
11. Compliance: Ensure that your callback server complies with applicable regulations and legal requirements, especially those related to data privacy and security.

Cobo API callback signature

To enhance security, Cobo will apply ECDSA signatures to every RESPONSE message. For more information, please [click here](/v1/api-references/development/callback-signature).
To authenticate the signature, you are required to retrieve the corresponding pubkey by navigating to the "API Callback" section on the Cobo Custody Web.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/callback.png" />

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Creating and Managing Deposit Addresses
Source: https://cobo.com/developers/v1/guides/howtos/create-manage-deposit-addresses



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Overview

User deposit addresses are commonly used by retail-facing platforms to receive funds from external users. These addresses are assigned to each user to easily distinguish the source of deposit transactions.

With Cobo Wallet-as-a-Service, you can create and manage deposit addresses for your applications in both **Custodial Wallet** and **MPC Wallet**.

## Create Addresses

You can create up to 200 addresses by using [Cobo SDKs](https://github.com/CoboGlobal) and corresponding APIs ([Custodial Wallet API](/v1/api-references/custody-wallet/new_addresses), [MPC Wallet API](/v1/api-references/mpc-wallet/mpc_generate_addresses) )

**Custodial Wallet**

<CodeGroup>
  ```python Python
  from cobo_custody.client import Client
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner

  api_secret = "your_api_secret"  # your wallet api secret
  # init cobo client
  client = Client(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # new deposit addresses
  response = client.batch_new_deposit_address("GETH",1)
  print(f"New deposit addresses: {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;
  import java.util.List;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.account.NewAddresses;

  public class CoboApiExample {
      public static void main(String[] args) {
      String apiSecret = "your_api_secret"; // your wallet api secret
      String coin = "GETH";  // Your testing coin
      // init cobo client
      CoboApiRestClient client = CoboApiClientFactory.newInstance(
          new LocalSigner(apiSecret),
          Env.DEV,
          false).newRestClient();

      // create new deposit addresses
      ApiResponse<NewAddresses> newAddresses = client.newAddresses(coin, 1, false);
      System.out.println("generateAddresses:" + newAddresses.getResult());
      }
  }
  ```
</CodeGroup>

<br />

<Accordion title="View Response - Custodial Wallet">
  ```json
  {
    "success": true,
    "result": {
      "coin": "GETH",
      "address": "0xec323f3743b96e020c234c216fa650f96b66fc9d"
    }
  }
  ```
</Accordion>

**MPC Wallet**

<CodeGroup>
  ```python Python
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  from cobo_custody.client.mpc_client import MPCClient

  api_secret = "your api secret"  # your wallet api secret

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  response = mpc_client.generate_addresses("GETH",1)
  print(f"New deposit addresses: {response.result}")
  ```

  ```java Java 
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.account.MPCAddressList;

  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
      String apiSecret = "your_api_secret"; // your wallet api secret
      String coin = "GETH";  // Your testing coin

      // init client
      CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
      new LocalSigner(apiSecret),
      Env.DEV,
      false).newMPCRestClient();

      // new deposit addresses
      ApiResponse<MPCAddressList> generateAddressResponse = mpcClient.generateAddresses(chain_code, 1);
      System.out.println("Generated Address: " + generateAddressResponse.getResult());
      }
  }
  ```
</CodeGroup>

<br />

<Accordion title="View Response - MPC Wallet">
  ```json
  {
    "success": true,
    "result": {
      "addresses": [
        {
          "id": 721935051680543203,
          "address": "0xd80e19dddb11e9a91f7aa644306564538e4b8586",
          "hd_path": "m/44/60/1/0/82",
          "encoding": 0
        }
      ]
    }
  }
  ```
</Accordion>

You need to specify the `Coin` field in the format of **Chain Code\_Token Code** (e.g., “ETH\_USDT”, “TRON\_USDC”). Token Code is not required for native coins (e.g., “BTC”, “ETH”). You can query the types of coins supported by your wallet via the [Get Supported Coins](/v1/api-references/custody-wallet/get_supported_coins).

These addresses can be used to receive coins under the same chain, and EVM addresses can be used to receive coins for all EVM-compatible chains.

For BTC, Cobo supports both *segwit* (3 address) and *native\_segwit* (bc1 address) addresses. You can input “True”  in the `native_segwit` field to generate bc1 addresses.

Please make sure you have added coins on Cobo Custody Web before creating any deposit addresses via API.

## Manage Addresses

You can view your address list using the Get Address History ([Cusotidal Wallet API](/v1/api-references/custody-wallet/address_history), [MPC Wallet API](/v1/api-references/mpc-wallet/mpc_list_addresses)).
This API allows you to retrieve addresses by coin types. Each API request can retrieve up to 20 addresses, in either ascending or descending order.

**Cusotidal Wallet**

<CodeGroup>
  ```python Python
  from cobo_custody.client import Client
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner

  api_secret = "your_api_secret"  # your wallet api secret
  # init cobo client
  client = Client(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # get address history
  response = client.get_address_history("GETH")
  print(f"Transaction history: {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;
  import java.util.List;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.account.*;

  public class CoboApiExample {
      public static void main(String[] args) {
      String apiSecret = "your_api_secret"; // your wallet api secret
      String coin = "GETH";  // Your testing coin
      // init cobo client
      CoboApiRestClient client = CoboApiClientFactory.newInstance(
          new LocalSigner(apiSecret),
          Env.DEV,
          false).newRestClient();

      // get address history
      ApiResponse<List<Address>> getAddressHistory = client.getAddressHistory(coin);
      System.out.println("Addresses History:" + getAddressHistory.getResult());
      }
  }
  ```
</CodeGroup>

<br />

<Accordion title="View Response - Custodial Wallet">
  ```json
  {
    "success": true,
    "result": [
      {
        "coin": "GETH",
        "address": "0x544094588811118b7701cf4a9dea056e775b4b4e"
      },
      {
        "coin": "GETH",
        "address": "0x644094588811118b7701cf4a9dea056e775b4b4e"
      }
    ]
  }

  ```
</Accordion>

**MPC Wallet**

<CodeGroup>
  ```python Python
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  from cobo_custody.client.mpc_client import MPCClient

  api_secret = "your api secret"  # your wallet api secret

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # get address history
  response = mpc_client.list_addresses("GETH")
  print(f"Address History: {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.account.MPCAddressList;

  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
      String apiSecret = "your_api_secret"; // your wallet api secret
      String coin = "GETH";  // Your testing coin

      // init client
      CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
      new LocalSigner(apiSecret),
      Env.DEV,
      false).newMPCRestClient();

      // new deposit addresses
      ApiResponse<MPCAddressList> generateAddressResponse = mpcClient.listAddresses(coin);
      System.out.println("Generated Address: " + generateAddressResponse.getResult());
      }
  }
  ```
</CodeGroup>

<br />

<Accordion title="View Response - MPC Wallet">
  ```json
  {
    "success": true,
    "result": {
      "total": 2,
      "addresses": [
        {
          "id": 721941011752862138,
          "address": "0x297db9241bfe5665641951bcf166feebd003870c",
          "encoding": 0,
          "hd_path": "m/44/60/1/0/85"
        },
        {
          "id": 721941011752862137,
          "address": "0x14cf9de0d8062ca53af5c92dcc574c8f3acb6da5",
          "encoding": 0,
          "hd_path": "m/44/60/1/0/84"
        }
      ]
    }
  }

  ```
</Accordion>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# How to Create a Transaction on UTXO-based Blockchains
Source: https://cobo.com/developers/v1/guides/howtos/creating-utxo-transactions



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

The main features of UTXO-based transactions are:

* Transactions on a UTXO-based blockchain consist of inputs and outputs.
  Each input refers to a specific UTXO (unspent transaction output) from a previous transaction.
  When you create a new transaction, you use one or more UTXOs as inputs, and you can specify different destination addresses (i.e., the 'to' address) for the outputs.
* When you spend a fraction of a UTXO, the remaining amount needs to be sent back to you.
  This is typically done by including one of your own addresses as a "change address" in the transaction.
  This change address receives the remaining funds that are not sent to the destination addresses.

In Custodial Wallets, transactions are initiated based on all available Unspent Transaction Outputs (UTXOs) within each wallet.
Cobo will manage the corresponding logics and you are not required to construct an input address.

For MPC Wallets, you have the flexibility to decide whether to initiate a transaction using all available UTXOs under each wallet or under a specified address.
Additionally, you can define a change address. If none is specified, the system will automatically send the change to the 'from' address.
In cases where the transaction originates directly from the wallet rather than a 'from' address, any change will be sent back to the default address of the wallet (i.e., the address that was auto generated when you first created the MPC Wallet).

### Code Samples for MPC Wallets

If the transaction is initiated using all available UTXOs under an MPC Wallet:

<CodeGroup>
  ```python Python
  from cobo_custody.client.mpc_client import MPCClient
  from cobo_custody.config import DEVELOP_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time

  signer = LocalSigner("your_api_secret_here")
  mpc_client = MPCClient(signer=signer, env=DEVELOP_ENV, debug=True)
  response = mpc_client.create_transaction(
     coin="XTN",
     request_id=f"MPCTransaction-{int(time.time() * 1000)}",
     amount=None,
     to_address_details='[{"to_address": "2N4J1WajwKZKpRtzzUmaW9B5GEqkppqdVY9","amount": "547"},'
                         '{"to_address": "tb1qycxy8d8jgff8hql09y62smw5s5mrf3ryn2j9lk","amount": "548"}]',
     fee=10.1
  )
  print(response.result)

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;
  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.MPCPostTransaction;
  import java.math.BigInteger;

  public class CobоCustodyApiClientExample {
     private static CoboMPCApiRestClient mpcClient;
     public static void main(String[] args) {
         String apiSecret = "your_api_secret_here";
         mpcClient = CoboApiClientFactory.newInstance(
                 new LocalSigner(apiSecret),
                 Env.DEVELOP,
                 false).newMPCRestClient();
         String coin = "BTC";
         String requestId = String.valueOf(System.currentTimeMillis());
         String fromAddr = null;
         String toAddr = null;
         BigInteger amount = null;
         String toAddressDetails = "[{\"to_address\": \"2N4J1WajwKZKpRtzzUmaW9B5GEqkppqdVY9\", \"amount\": \"547\"}, {\"to_address\": \"tb1qycxy8d8jgff8hql09y62smw5s5mrf3ryn2j9lk\",\"amount\": \"548\"}]";
         BigInteger fee = new BigInteger("10");
         BigInteger gasPrice = null;
         BigInteger gasLimit = null;
         Integer operation = null;
         String extraParameters = null;
         ApiResponse<MPCPostTransaction> response = mpcClient.createTransaction(
                 coin, requestId, fromAddr,toAddr, amount, toAddressDetails, gasPrice, gasLimit, fee, operation, extraParameters
         );

         System.out.println(response.getResult());
     }
  }

  ```
</CodeGroup>

If the transaction is initiated using all available UTXOs under a designated address:

<CodeGroup>
  ```python Python
  from cobo_custody.client.mpc_client import MPCClient
  from cobo_custody.config import DEVELOP_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time

  signer = LocalSigner("your_api_secret_here")
  mpc_client = MPCClient(signer=signer, env=DEVELOP_ENV, debug=True)

  response = mpc_client.create_transaction(
     coin="XTN",
     request_id=f"MPCTransaction-{int(time.time() * 1000)}",
     amount="10000",
     from_addr="tb1qtxkz0v063lgu0crqqnc2llarfg27lkyqq5l4mv",
     to_addr="tb1q0dr4tfw8eguswrpc2rrc5mg6af0k42jhu7rgyg",
  )
  print(response.result)

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;
  import java.math.BigDecimal;
  import java.math.BigInteger;
  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.MPCPostTransaction;
  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
          String apiSecret = "1795cd4c0184a6205130a3ecd5d6317c35214b9a9730c5599872cdf33ce30ab5";  // your wallet api secret
          String coin = "XTN";  // your target coin
          String requestId = String.valueOf(System.currentTimeMillis());  // your custom request_id
          String fromAddr = "tb1qtxkz0v063lgu0crqqnc2llarfg27lkyqq5l4mv";  // your mpc wallet address
          String toAddr = "tb1q0dr4tfw8eguswrpc2rrc5mg6af0k42jhu7rgyg";  // your address
          BigInteger withdraw_amount = new BigInteger("1000");  // withdraw amount：0.01GETH
          String toAddressDetails = null;
          BigDecimal fee = null;
          BigInteger gasPrice = null;
          BigInteger gasLimit = null;
          Integer operation = null;
          String extraParameters = null;
          // init client
          CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEVELOP,
                  false).newMPCRestClient();

          ApiResponse<MPCPostTransaction> createTransactionResponse = mpcClient.createTransaction(coin, requestId, withdraw_amount, fromAddr, toAddr,
                  toAddressDetails, fee, gasPrice, gasLimit, operation, extraParameters, null, null, null);
          System.out.println("Withdraw: " + createTransactionResponse.getResult());
      }
  }

  ```
</CodeGroup>

### Code Samples for Custodial Wallets

The transaction is initiated using all UTXOs under a Custodial Wallet:

<CodeGroup>
  ```python Python
  from cobo_custody.client import Client
  from cobo_custody.config import DEVELOP_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time


  api_secret = "your_api_secret"  # your wallet api secret
  chain_code = "BTC"  # your target chain
  coin_code = "BTC"  # your target coin
  amount = 1000  # withdraw amount
  to_address = "your address"  # your address


  # init cobo client
  client = Client(signer=LocalSigner(api_secret), env=DEVELOP_ENV, debug=False)

  request_id = f"ApiTransaction-{int(time.time() * 1000)}"    # your custom request_id
  response = client.withdraw(
     coin=coin_code,
     request_id=request_id,
     amount=amount,
     address=to_address,
  )
  print(f"Withdraw: {response.result}")

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;
  import java.math.BigInteger;
  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;

  public class CoboApiExample {
  public static void main(String[] args) {
  String apiSecret = "your_api_secret"; // your wallet api secret
  String coin = "XTN"; // your target coin
  String requestId = String.valueOf(System.currentTimeMillis()); // your custom request_id
  String toAddr = "your_address"; // your address
  BigInteger withdraw_amount = new BigInteger("1000000000"); // withdraw amount

  // init cobo client
  CoboApiRestClient client = CoboApiClientFactory.newInstance(
  new LocalSigner(apiSecret),
  Env.DEVELOP,
  false).newRestClient();

  ApiResponse<String> withdraw = client.withdraw(
  coin,
  requestId,
  toAddr,
  withdraw_amount,
  null,
  null,
  null
  );
  System.out.println("response data: withdraw" + withdraw.getResult());

  }
  }
  ```
</CodeGroup>

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# How to Create Web3 Transactions in MPC Wallets
Source: https://cobo.com/developers/v1/guides/howtos/creating-web3-transactions



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

## Overview

Web3 transactions typically involve interacting with smart contracts on the blockchain, with applications extending to decentralized applications (dApps), non-fungible tokens (NFTs), and beyond. This guide will outline how developers can create Web3 transactions in MPC Wallets using the APIs provided by Cobo.

Note: The code samples below are only applicable to Web3 Wallets under the MPC Wallets.

## Code Samples

#### Initiating a withdraw transaction using Web3 Wallets (e.g., sending 0.01 ETH)

Step 1: Initialize the mpc\_client

Step 2: Create the withdraw transaction

<CodeGroup>
  ```python Python
  from cobo_custody.client.mpc_client import MPCClient
  from cobo_custody.config import DEVELOP_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time

  api_secret = "your api secret"  # your wallet api secret
  chain_code = "ETH"  # your target chain
  coin_code = "ETH"  # your target coin
  amount = "100000000000000000"  # withdraw amount：0.01ETH
  from_address = "your mpc wallet address"  # your mpc wallet address
  to_address = "to address"  # to address

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEVELOP_ENV, debug=False)

  request_id = f"MPCTransaction-{int(time.time() * 1000)}" # your custom request_id
  # create withdraw transaction
  response = mpc_client.create_transaction(
     coin=coin_code,
     request_id=request_id,
     amount=amount,
     from_addr=from_address,
     to_addr=to_address,
     gas_price=6500000000,
     gas_limit=21000,
  )
  print(f"Withdraw: {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.MPCPostTransaction;

  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
          String apiSecret = "your_api_secret"; // your wallet api secret

          // init client
          CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEV,
                  false).newMPCRestClient();

          // create withdraw transaction
          String coin = "GETH";
          String requestId = String.valueOf(System.currentTimeMillis());
          String fromAddr = "your mpc wallet address";
          String toAddr = "to address";
          BigInteger amount = new BigInteger("100000000000000000");
          String toAddressDetails = null;
          BigDecimal fee = null;
          BigInteger gasPrice = new BigInteger("6500000000");
          BigInteger gasLimit = new BigInteger("21000");
          Integer operation = null;
          String extraParameters = null;
          ApiResponse<MPCPostTransaction> res = mpcClient.createTransaction(coin, requestId, amount, fromAddr, toAddr,
                  toAddressDetails, fee, gasPrice, gasLimit, operation, extraParameters, null, null, null, null);
          System.out.println("Withdraw: " + res.getResult());
      }
  }
  ```
</CodeGroup>

<br />

#### Interacting with a smart contract using Web3 Wallets

Step 1: Initialize the mpc\_client

Step 2: Pass in calldata to call a smart contract

<CodeGroup>
  ```python Python
  from cobo_custody.client.mpc_client import MPCClient
  from cobo_custody.config import DEVELOP_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time

  api_secret = "your api secret"  # your wallet api secret
  chain_code = "ETH"  # your target chain
  coin_code = "ETH"  # your target coin
  amount = "0"
  from_address = "your mpc wallet address"  # your mpc wallet address
  to_address = "contract address"  # contract address
  extra_parameters = '{"calldata": "0xa8059cbb000000000000000000000000971948873f869e4517311b190d7eb31e30eba0ef000000000000000000000000000000000000000000000000002386f26fc10000"}' # use calldata to call or deploy contract

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEVELOP_ENV, debug=False)

  request_id = f"MPCTransaction-{int(time.time() * 1000)}" # your custom request_id

  response = mpc_client.create_transaction(
     coin=coin_code,
     request_id=request_id,
     amount=amount,
     from_addr=from_address,
     to_addr=to_address,
     gas_price=6500000000,
     gas_limit=22385,
     extra_parameters=extra_parameters,
  )
  print(f"call contract: {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.MPCPostTransaction;

  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
          String apiSecret = "your_api_secret"; // your wallet api secret

          // init client
          CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEV,
                  false).newMPCRestClient();

          // create withdraw transaction
          String coin = "GETH";
          String requestId = String.valueOf(System.currentTimeMillis());
          String fromAddr = "your mpc wallet address";
          String toAddr = "contract address";
          BigInteger amount = new BigInteger("0");
          String toAddressDetails = null;
          BigDecimal fee = null;
          BigInteger gasPrice = new BigInteger("6500000000");
          BigInteger gasLimit = new BigInteger("22385");
          Integer operation = null;
          String extraParameters = "{\"calldata\": \"0xa8059cbb000000000000000000000000971948873f869e4517311b190d7eb31e30eba0ef000000000000000000000000000000000000000000000000002386f26fc10000\"}"

          ApiResponse<MPCPostTransaction> res = mpcClient.createTransaction(coin, requestId, amount, fromAddr, toAddr,
                  toAddressDetails, fee, gasPrice, gasLimit, operation, extraParameters, null, null, null, null);
          System.out.println("call contract: " + res.getResult());
      }
  }
  ```
</CodeGroup>

<br />

For more information on the 'create\_transaction' endpoint, please [click here](/v1/api-references/mpc-wallet/mpc_create_transaction).
<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# How to Create a Withdraw Transaction via APIs
Source: https://cobo.com/developers/v1/guides/howtos/creating-withdrawal-transactions



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Withdraw transactions in MPC Wallets and Custodial Wallets follow distinct creation processes via APIs.
In MPC Wallets, kindly take note of the distinctions between transactions created on Account-based blockchains and those on UTXO-based blockchains.

### Code Samples for MPC Wallets

The following code samples focus on Account-based blockchains.
For information on how to create a transaction on UTXO-based blockchains, please refer to this [guide](/v1/guides/howtos/creating-utxo-transactions).

The following codes demonstrate the transfer of 0.1 ETH to a specified receiving address via Account-based blockchains.

<CodeGroup>
  ```python Python
  from cobo_custody.client.mpc_client import MPCClient
  from cobo_custody.config import DEVELOP_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time

  api_secret = "your api secret"  # your wallet api secret
  chain_code = "ETH"  # your target chain
  coin_code = "ETH"  # your target coin
  amount = "100000000000000000"  # withdraw amount：0.01ETH
  from_address = "your mpc wallet address"  # your mpc wallet address
  to_address = "your address"  # your address

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEVELOP_ENV, debug=False)

  request_id = f"MPCTransaction-{int(time.time() * 1000)}"  # your custom request_id
  response = mpc_client.create_transaction(
     coin=coin_code,
     request_id=request_id,
     amount=amount,
     from_addr=from_address,
     to_addr=to_address,
     gas_price=6500000000,
     gas_limit=21000,
  )
  print(f"Withdraw: {response.result}")

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.MPCPostTransaction;

  import java.math.BigInteger;
  public class CobоCustodyApiClientExample {
     private static CoboMPCApiRestClient mpcClient;
     public static void main(String[] args) {
         String apiSecret = "your_api_secret_here";


         mpcClient = CoboApiClientFactory.newInstance(
                 new LocalSigner(apiSecret),
                 Env.DEVELOP,
                 false).newMPCRestClient();

         String coin = "ETH";
         String requestId = String.valueOf(System.currentTimeMillis());
         String fromAddr = "0x5bc25b43fad2525c9efaa913070aca4d8bb0c15d";
         String toAddr = "0x4629a4b6b4FEBd13536871E167151be9d16535b3";
         BigInteger amount = new BigInteger("100000000000000000");
         String toAddressDetails = null;
         BigInteger fee = null;
         BigInteger gasPrice = new BigInteger("6500000000");
         BigInteger gasLimit = new BigInteger("21000");
         Integer operation = null;
         String extraParameters = null;
         ApiResponse<MPCPostTransaction> response = mpcClient.createTransaction(
                 coin, requestId, fromAddr,toAddr, amount, toAddressDetails, gasPrice, gasLimit, fee, operation, extraParameters
         );

         System.out.println(response.getResult());
     }
  }

  ```
</CodeGroup>

For more information on the "mpc\_create\_transaction" endpoint, [click here](/v1/api-references/mpc-wallet/mpc_create_transaction).

### Code Samples for Custodial Wallets

In Custodial Wallets, an on-chain transaction will be triggered if the receiving address is an external address.
Conversely, if the receiving address belongs to a Custodial Wallet managed by Cobo,
the transaction will be executed off-chain without incurring any gas fees.

<CodeGroup>
  ```python Python
  from cobo_custody.client import Client
  from cobo_custody.config import DEVELOP_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  import time

  api_secret = "your_api_secret"  # your wallet api secret
  chain_code = "ETH"  # your target chain
  coin_code = "ETH"  # your target coin
  amount = 100000000000000000  # withdraw amount
  to_address = "your address"  # your address

  # init cobo client
  client = Client(signer=LocalSigner(api_secret), env=DEVELOP_ENV, debug=False)

  request_id = f"ApiTransaction-{int(time.time() * 1000)}"    # your custom request_id
  response = client.withdraw(
     coin=coin_code,
     request_id=request_id,
     amount=amount,
     address=to_address,
  )
  print(f"Withdraw: {response.result}")

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigInteger;
  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;

  public class CoboApiExample {
  public static void main(String[] args) {
  String apiSecret = "your_api_secret"; // your wallet api secret
  String coin = "ETH"; // your target coin
  String requestId = String.valueOf(System.currentTimeMillis()); // your custom request_id
  String toAddr = "your_address"; // your address
  BigInteger withdraw_amount = new BigInteger("100000000000000000"); // withdraw amount

  // init cobo client
  CoboApiRestClient client = CoboApiClientFactory.newInstance(
  new LocalSigner(apiSecret),
  Env.DEVELOP,
  false).newRestClient();

  ApiResponse<String> withdraw = client.withdraw(
  coin,
  requestId,
  toAddr,
  withdraw_amount,
  null,
  null,
  null
  );
  System.out.println("response data: withdraw" + withdraw.getResult());


  }
  }

  ```
</CodeGroup>

For more information on the "new\_withdraw\_request" endpoint, [click here](/v1/api-references/custody-wallet/new_withdraw_request).

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Deposit and Withdraw Processes
Source: https://cobo.com/developers/v1/guides/howtos/deposit-and-withdrawal-transaction-status



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

For digital asset custodians, crypto transactions can be broadly categorized into two types: withdrawals and deposits.
A withdraw transaction is initiated by the client directly on the Cobo platform.
Conversely, a deposit transaction is initiated by a third party, wherein the receiving address is associated with a Cobo Custodial Wallet and/or an MPC Wallet.

### Withdraw process for Custodial Wallets and MPC Wallets:

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/custodial-wallet-withdrawal-process.png" />

Notes for withdraw transactions initiated from Custodial Wallets:

* The transaction status that can be queried includes "success" and "failed" (applicable to both API calls and API callbacks).
* If you tick "Push Pending Transaction" under Transaction Notification on the Cobo Custody Web, you will receive a push notification whenever there is a change in the number of block confirmations for a specific transaction. The notification will indicate the transaction status as 'pending' and include essential details such as the number of confirmed blocks and the threshold. Please note that each notification for a given number change will be sent only once.
* You can also check the number of confirmed blocks for a specific transaction by navigating to the "Transactions" tab on the Cobo Custody Web.

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/mpc-wallet-withdrawal-process.png" />

### Deposit process for Custodial Wallets and MPC Wallets:

<img src="https://mintlify.s3.us-west-1.amazonaws.com/cobo-docs/v1/images/custodial-mpc-deposit-process.png" />

Notes for deposit transactions associated with Custodial Wallets:

* Cobo reserves the right to reject a deposit transaction if it triggers compliance risks or violates risk control rules. Transactions declined by Cobo will not be displayed on the Cobo Custody Web, and API callback notifications will not be pushed.
* If the transaction amount falls below the minimum deposit requirement, it will not be displayed on the Cobo Custody Web, and API callback notifications will not be pushed. For best practices, kindly refer to this [guide](/v1/guides/howtos/querying-deposit-transactions).

| Status  | Description                    |
| ------- | ------------------------------ |
| PENDING | Transaction is being confirmed |
| SUCCESS | Transaction completed          |
| FAILED  | Transaction failed             |

Notes for deposit transactions associated with MPC Wallets:

* Clients have the flexibility to choose whether to perform AML checks (e.g., Travel Rule, KYT) for a specific transaction.
  Additionally, they can decide whether to record the transaction in their account.
* MPC Wallets do not have a minimum deposit requirement.

| Value | Status                | Description                                   |
| ----- | --------------------- | --------------------------------------------- |
| 101   | PENDING\_APPROVAL     | Transaction is pending approval               |
| 201   | QUEUED                | Transaction is in queue                       |
| 301   | PENDING\_SIGNATURE    | Transaction is pending signatures             |
| 401   | BROADCASTING          | Transaction is being broadcasted              |
| 402   | BROADCAST\_FAILED     | Transaction failed to be broadcasted on chain |
| 403   | PENDING\_ON\_CHAIN    | Transaction successfully broadcasted on chain |
| 501   | PENDING\_CONFIRMATION | Transaction is being confirmed                |
| 900   | SUCCESS               | Transaction completed                         |
| 901   | FAILED                | Transaction failed                            |

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# How to Estimate and Optimize Transaction Fees for MPC Wallets
Source: https://cobo.com/developers/v1/guides/howtos/estimate-transaction-fees



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

### Overview

When users engage in digital currency transactions on blockchain networks, they are required to pay transaction fees. These fees are paid to the network's miners, who confirm and validate the transactions and add them to the blockchain ledger. The calculation methods for transaction fees vary across different networks.

Gas is the fee required to successfully conduct a transaction or execute a contract on the Ethereum network. These fees are denominated in minute fractions of the cryptocurrency ether (ETH), known as gwei. On the Bitcoin network, the fee rate is calculated in satoshis (the smallest unit of the Bitcoin cryptocurrency) per unit of data that your transaction will consume, abbreviated as sats/vByte.

### Calculation Methods

On the Ethereum network, gas fees are calculated by multiplying the gas price by the gas limit. Keep in mind that gas prices are influenced by the supply and demand for transactions. In times of network congestion, gas prices may surge, requiring clients to pay a higher fee for expedited transaction completion.

For the Bitcoin network, transaction fees are calculated by multiplying the transaction size by the fee rate (satoshi per byte). Fee rates on the Bitcoin network also fluctuate in response to changing network conditions. Clients can adjust rates based on the urgency of their transactions.

### Estimating Transaction Fees API

Before initiating a transaction, clients need to estimate the transaction fees by calling the estimate\_fee endpoint. They need to pass in all required parameters, such as coin code, amount, address, gas price and gas limit.

The endpoint returns gas fees based on the parameters specified by the user, indicating the success or failure status. The response also includes different gas fees for transactions at slow, average, and fast speeds.

After obtaining the transaction fees, clients must reserve both the transaction amount and the estimated fee amount in the wallet address from which the transaction will be initiated. Failure to do so may result in a transaction failure.

If the wallet address lacks sufficient balance to cover both the transaction amount and transaction fees, clients must promptly top up the required coin balance for paying transaction fees or reduce the transaction amount.

For more information on the endpoint, please [click here](/v1/api-references/mpc-wallet/mpc_estimate_fee).

#### Calling the API for Estimating Transaction Fees

Note that different types of coins and wallets require different input parameters. For account-based models, clients should provide the gas price and gas limit. In UTXO-based models, clients must specify transaction fees and inputs (the UTXOs being spent). Web3 wallets require additional parameters, including calldata. Please ensure that the correct parameters are passed in based on your specific use cases.

<CodeGroup>
  ```python Python
  from cobo_custody.client.mpc_client import MPCClient
  from cobo_custody.config import DEVELOP_ENV
  from cobo_custody.signer.local_signer import LocalSigner

  api_secret = "your_api_secret"  # your wallet api secret

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEVELOP_ENV, debug=False)

  # Params example
  coin = "ETH"
  amount = 1
  address = "0x0c4554ab637e8682155aca0923ed0ea2a469e1e7"
  replace_cobo_id = "20231206165108000159686000005421"
  from_address = None
  to_address_details = None
  fee = None
  gas_price = None
  gas_limit = None
  extra_parameters = '{"calldata": "0x23b872dd0000000000000000000000000c4554ab637e8682155aca0923ed0ea2a469e1e7000000000000000000000000cd0ef2cf9dff3b23d28eda1f49a245347a71ab9d000000000000000000000000000000000000000000000000000000000047b32d"}'

  response = mpc_client.estimate_fee(
     coin=coin,
     address=address,
     amount=amount,
     replace_cobo_id=replace_cobo_id,
     from_address=from_address,
     to_address_details=to_address_details,
     fee=fee,
     gas_price=gas_price,
     gas_limit=gas_limit,
     extra_parameters=extra_parameters
  )
  print(f"estimate_fee: {response.result}")

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.EstimateFeeDetails;

  public class CobоCustodyApiClientExample {
    public static void main(String[] args) {
    String apiSecret = "5adcec97a4911400738553e1c6550ce99c919f90fb79c9e34d791a34188f62eb"; // your wallet api secret
    BigInteger amount = new BigInteger("10000");
    String coin = "ETH";  // Your testing coin
    String address = "0x0c4554ab637e8682155aca0923ed0ea2a469e1e7";
    String replaceCoboId = "20231206165108000159686000005421";
    String fromAddress = null;
    String toAddressDetails = null;
    BigDecimal fee = null;
    BigInteger gasPrice = null;
    BigInteger gasLimit = null;
    String extra_parameters = null;

    CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
    new LocalSigner(apiSecret),
    Env.DEV,
    false).newMPCRestClient();

    ApiResponse<EstimateFeeDetails> estimateFeeResponse = mpcClient.estimateFee(coin, amount, address, replaceCoboId, fromAddress, toAddressDetails, fee, gasPrice, gasLimit, extra_parameters);
    System.out.println("estimateFee: " + estimateFeeResponse);
    }
  ```
</CodeGroup>

#### API Responses

The response contains a success status and specific result attributes. There are two possible success statuses: success or failure. The specific results come in three types: slow, average, and fast.

* Slow: Submitted transaction fees are lower than the current average on the network, leading to a longer confirmation time and potential failure to confirm.
* Average: Submitted transaction fees are roughly equal to the current average on the network.
* Fast: Submitted transaction fees exceed the current average on the network, resulting in a faster confirmation time.

For example:

* For BTC, the transaction fee obtained from the network serves as the recommended average transaction fee. The fast transaction fee is set at 10 times the average, and the slow transaction fee is set at 0.1 times the average.
* For ETH, the transaction fee obtained from the network serves as the recommended average transaction fee. The fast transaction fee is set at 2 times the average, and the slow transaction fee is set at 1 time the average.

<CodeGroup>
  ```ApiResponse
  estimate_fee: {
  	'fee_coin': 'ETH',
  	'fee_decimal': 18,
  	'slow': {
  		'fee_per_byte': 0,
  		'fee_amount': 0,
  		'gas_price': 48779970845,
  		'gas_limit': 21000
  	},
  	'average': {
  		'fee_per_byte': 0,
  		'fee_amount': 0,
  		'gas_price': 48779970845,
  		'gas_limit': 21000
  	},
  	'fast': {
  		'fee_per_byte': 0,
  		'fee_amount': 0,
  		'gas_price': 97559941690,
  		'gas_limit': 21000
  	}
  ```
</CodeGroup>

### Best Practices for Optimizing Transaction Fees

1. Interact on-chain during periods of lower gas prices
2. Interact with smart contracts that entail lower gas consumption.
3. Adopt best practices for optimizing transactions fees
   * Minimize on-chain data (use events, IPFS, stateless contracts, Merkle proofs)
     * Use events to record information instead of storing it in contract state.
     * Use distributed file storage systems like IPFS to store large amounts of data.
     * Employ stateless contracts and Merkle proofs to reduce on-chain storage requirements.
   * Minimize on-chain operations (strings, return stored values, loops, local storage, batching)
     * Avoid unnecessary string operations and complex computations.
     * Return stored values directly instead of calculating them on-chain.
     * Reduce loop usage and optimize algorithm efficiency.
   * Optimize local storage by minimizing read and write operations on state variables.
     * Batch operations to reduce the number of individual transactions.
   * Memory location (calldata, stack, memory, storage)
     * Use calldata, stack, memory, and storage efficiently to reduce gas consumption.
     * Manage data memory locations carefully.
   * Variable order
     * Arrange variables in order based on access frequency and gas fees.
   * Data types
     * Choose appropriate data types to reduce gas consumption.
   * Libraries (embedded libraries, independently deployed library contracts)
     * Use embedded libraries to reduce duplicate code.
     * Independently deploy library contracts to share logic and reduce gas consumption.
   * Minimal Proxy
     * Use the minimal proxy pattern to reduce the gas fees of deploying and executing proxy contracts.
   * Functions
     * Optimize functions to minimize gas consumption.
   * Contract size (messages, modifiers, functions)
     * Streamline messages, modifiers, and functions to reduce contract size.
   * Solidity compiler optimizer
     * Make effective use of Solidity compiler optimizer settings to strike a balance between compilation optimization and gas fees.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Managing Wallet Balances
Source: https://cobo.com/developers/v1/guides/howtos/manage-balance-and-transactions



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>
**In Custodial Wallet**, you can query the wallet balance using the [Get Account Details](/v1/api-references/custody-wallet/org_info) , where the balance of each type of coin will be returned in the balance field of the response.
Note that because Cobo will automatically aggregate funds in deposit addresses, the balance in a deposit address may not reflect the actual balance of the selected type of coin.

<Tip>In Custodial Wallet, tokens deposited into these addresses will undergo automated aggregation (token sweep) by Cobo. You are exempt from the necessity to pre-fund or fund transaction fees for your deposit addresses. This translates into substantial savings in both development and operational efforts for your team.</Tip>

<CodeGroup>
  ```python Python
  from cobo_custody.client import Client
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner

  api_secret = "your_api_secret"  # your wallet api secret
  # init cobo client
  client = Client(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # get account balance
  response = client.get_account_info()
  print(f"Account balance: {response.result}")


  ```

  ```java Java
  package com.cobo.custody.api.client.impl;
  import java.util.List;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.account.OrgInfo;

  public class CoboApiExample {
      public static void main(String[] args) {
      String apiSecret = "your_api_secret"; // your wallet api secret
      // init cobo client
      CoboApiRestClient client = CoboApiClientFactory.newInstance(
          new LocalSigner(apiSecret),
          Env.DEV,
          false).newRestClient();

      // get account balance
      ApiResponse<OrgInfo> getOrgInfo = client.getOrgInfo();
      System.out.println("Addresses History:" + getAddressHistory.getResult());
      }
  }


  ```
</CodeGroup>

<br />

<Accordion title="View Response - Custodial Wallet">
  ```json
  {
    "success": true,
    "result": {
      "name": "test",
      "assets": [
        {
          "coin": "ETH",
          "display_code": "ETH",
          "description": "Ethereum",
          "decimal": 18,
          "can_deposit": true,
          "can_withdraw": true,
          "balance": "0",
          "abs_balance": "0",
          "fee_coin": "ETH",
          "abs_estimate_fee": "0.0003648",
          "confirming_threshold": 12,
          "dust_threshold": 1,
          "token_address": "",
          "require_memo": false
        },
        {
          "coin": "BTC",
          "display_code": "BTC",
          "description": "Bitcoin",
          "decimal": 8,
          "can_deposit": true,
          "can_withdraw": true,
          "balance": "102730",
          "abs_balance": "0.0010273",
          "fee_coin": "BTC",
          "abs_estimate_fee": "0.00013513",
          "confirming_threshold": 3,
          "dust_threshold": 546,
          "token_address": "",
          "require_memo": false
        }
      ]
    }
  }


  ```
</Accordion>

**In MPC Wallet**, you can query the balance of each address using the [Get Balances List](/v1/api-references/mpc-wallet/mpc_list_balances) up to 50 addresses.

<CodeGroup>
  ```python Python
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  from cobo_custody.client.mpc_client import MPCClient

  api_secret = "your api secret"  # your wallet api secret

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # get balance list
  response = client.list_balances("ETH",0,50)
  print(f"Address History: {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.account.MPCListBalances;

  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
      String apiSecret = "your_api_secret"; // your wallet api secret
      String coin = "ETH";  // Your testing coin

      // init client
      CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
      new LocalSigner(apiSecret),
      Env.DEV,
      false).newMPCRestClient();

      // get balance list
      ApiResponse<MPCListBalances> listBalances = client.listBalances(coin,0,50);
      System.out.println("Balance List: " + generateAddressResponse.getResult());
      }
  }
  ```
</CodeGroup>

<br />

<Accordion title="View Response - MPC Wallet">
  ```json
  {
    "success": true,
    "result": {
      "total": 2,
      "coin_data": [
        {
          "address": "0xe0cc496b3d9b0f8019b678066b9db81261d827bc",
          "coin": "ETH",
          "chain_code": "ETH",
          "display_code": "ETH",
          "description": "Ethereum",
          "balance": "49999999999999999986",
          "decimal": 18
        }
      ],
      "nft_data": [
        {
          "nft_code": "NFT_ETH_BLUE_CHURCH",
          "token_id": "200",
          "address": "0xcc656c94b8ec881ddd9611e8ad4a4eca9f859e7b",
          "chain_code": "ETH",
          "contract_address": "0x357fd2942e8ee435d7d21859ecae99bd597d8779",
          "balance": "1"
        }
      ]
    }
  }
  ```
</Accordion>

Transactional APIs can be used to retrieve your deposit and withdraw history for account reconciliation.
Please refer to <Tooltip tip="Coming Soon">Best Practices of Managing Transaction History</Tooltip> article for more information.
<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Querying Deposit Transactions 
Source: https://cobo.com/developers/v1/guides/howtos/querying-deposit-transactions



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Deposit transactions refer to transactions initiated by third parties with the target address being an address under Cobo’s Custodial Wallets or MPC Wallets.
Currently, Cobo provides two methods for clients to query about their deposit details.

* Transaction Notification: When Cobo receives a notification of a successful deposit transaction, it will send an HTTP request to a URL designated by the client.
  You can query the transaction details in this push message.

* API Querying: This method allows you to query transaction details via API endpoints.
  You can opt to traverse/iterate over a collection of data or specify a parameter for querying.

Below are code samples to show you how to query deposit transaction details by time and use the outputs as the most recent deposit record.

#### Code Samples for MPC Wallets:

<CodeGroup>
  ```python Python
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  from cobo_custody.client.mpc_client import MPCClient

  api_secret = "your api secret"  # your wallet api secret

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  response = mpc_client.list_transactions(transaction_type=1000, order_by="created_time", order="DESC")
  print(f"Get Transactions By Time: {response.result}")

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.MPCTransactions;

  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
      String apiSecret = "your_api_secret"; // your wallet api secret

      // init client
      CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
      new LocalSigner(apiSecret),
      Env.DEV,
      false).newMPCRestClient();

      // get deposit transaction
      ApiResponse<MPCTransactions> listTransactionsResponse = mpcClient.listTransactions(null, null, null, "created_time", "DESC", 1000, null, null, null, 1);
      System.out.println("Deposit Transactions: " + listTransactionsResponse.getResult());
      }
  }

  ```
</CodeGroup>

#### Code Samples for Custodial Wallets:

<CodeGroup>
  ```python Python
  from cobo_custody.client import Client
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner

  api_secret = "your_api_secret"  # your wallet api secret
  # init cobo client
  client = Client(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # get deposit transaction
  response = client.get_transactions_by_time(side="deposit")
  print(f"Get Transactions By Time: {response.result}")

  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.util.List;
  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.Side;
  import com.cobo.custody.api.client.domain.transaction.Transaction;

  public class CoboApiExample {
      public static void main(String[] args) {
      String apiSecret = "your_api_secret"; // your wallet api secret

      // init cobo client
      CoboApiRestClient client = CoboApiClientFactory.newInstance(
          new LocalSigner(apiSecret),
          Env.DEV,
          false).newRestClient();

      // get deposit transaction
      ApiResponse<List<Transaction>> getTransactionsByTime = client.getTransactionsByTime(null, Side.Deposit, null, 0, 0, 1, null);
      System.out.println("getTransactionsByTime: " + getTransactionsByTime.getResult());
      }
  }

  ```
</CodeGroup>

#### Things to Note

1. The deposit processes over account-based blockchains and UTXO-based blockchains are similar.
2. Deposit transactions include those occurring under Custodial Wallets and MPC Wallets.
3. For Custodial Wallets, the minimum deposit amounts vary for different coins.
   The specific values can be obtained in the 'minimum\_deposit\_threshold' field returned by the ['Get Coin Details'](/v1/api-references/custody-wallet/coin_info) endpoint.
   **If your deposit amount is below this specified value, the coins will not be credited to your account.**
   If the returned value is zero, deposits of any amount will be credited.
   <Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Replace-By-Fee (RBF) in MPC Wallets
Source: https://cobo.com/developers/v1/guides/howtos/rbf



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Replace-by-fee (RBF) is a feature that allows users to replace one version of an unconfirmed transaction with a different version of the transaction that pays a higher transaction fee.
The benefits of RBF are that it allows users to modify the fee after the transaction has been broadcast to the network but before it is confirmed by miners,
thereby enabling the acceleration of the current transaction onto the blockchain or its cancellation.

RBF can be applied to transactions initiated from MPC Wallets only when they are in the following statuses:

| Value | Status                | Description                                          |
| ----- | --------------------- | ---------------------------------------------------- |
| 401   | BROADCASTING          | Broadcasting a transaction                           |
| 402   | BROADCAST\_FAILED     | Transaction failed to be broadcast on chain          |
| 403   | PENDING\_CONFIRMATION | Transaction has been broadcast but not yet confirmed |

Things to note:

* The fee for an RBF transaction needs to be 15% higher than the original transaction fee.
* If you have already created an RBF transaction and wish to further increase the transaction fee, we highly recommend creating a new RBF transaction based on the latest transaction, rather than directly applying RBF to the original transaction.
  This ensures a higher transaction fee for your new transaction, increasing its likelihood of acceptance by miners.
* We also support reapplying RBF to the original transaction. In this case, please note that the fee for the latest RBF transaction must be at least 15% higher than that for the previous RBF transaction.

## Code Samples

### Speeding up MPC transactions with RBF

If your transaction is experiencing delays in being confirmed on the blockchain, you can use RBF to accelerate the process.
This allows you to resend the same transaction with a higher fee to replace the original one.

<CodeGroup>
  ```python Python
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  from cobo_custody.client.mpc_client import MPCClient

  api_secret = "your api secret"  # your wallet api secret

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)
  request_id = str(int(time.time() * 1000))
  eth_tx_cobo_id = "20231113154933000386496000009513"

  response = mpc_client.speedup_transaction(cobo_id=eth_tx_cobo_id, request_id=request_id,                                                  gas_price=20000, gas_limit=21000)
  print(f"speedup transaction result: {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.MPCPostTransaction;

  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
          String apiSecret = "your_api_secret"; // your wallet api secret

          // init client
          CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEV,
                  false).newMPCRestClient();

          // speedup transaction
          String coboId = "cobo_id of the transaction to speedup";
          String requestId = String.valueOf(System.currentTimeMillis());
          BigDecimal fee = null;
          BigInteger gasPrice = new BigInteger("6500000000");
          BigInteger gasLimit = new BigInteger("21000");
          BigInteger feeAmount = null;

          ApiResponse<MPCPostTransaction> res = mpcClient.speedUpTransaction(coboId, requestId, fee, gasPrice, gasLimit, feeAmount);
          System.out.println("speedup transaction: " + res.getResult());
      }
  }
  ```
</CodeGroup>

<br />

### Canceling MPC transactions with RBF

You can use RBF to cancel an original transaction by setting the transaction amount in the new RBF transaction to zero, ensuring that the receiving address matches the sending address, and simultaneously increasing the transaction fee.
This will render the new RBF transaction invalid while providing sufficient information to cancel the original transaction.

<CodeGroup>
  ```python Python
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  from cobo_custody.client.mpc_client import MPCClient

  api_secret = "your api secret"  # your wallet api secret

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  request_id = str(int(time.time() * 1000))
  eth_tx_cobo_id = "20231113154933000386496000009513"

  response = mpc_client.drop_transaction(cobo_id=eth_tx_cobo_id, request_id=request_id,                                                  gas_price=20000, gas_limit=21000)
  print(f"drop transaction result: {response.result}")
  ```

  ```java Java
  package com.cobo.custody.api.client.impl;

  import java.math.BigDecimal;
  import java.math.BigInteger;

  import com.cobo.custody.api.client.CoboApiClientFactory;
  import com.cobo.custody.api.client.CoboMPCApiRestClient;
  import com.cobo.custody.api.client.config.Env;
  import com.cobo.custody.api.client.domain.ApiResponse;
  import com.cobo.custody.api.client.domain.transaction.MPCPostTransaction;

  public class CobоCustodyApiClientExample {
      public static void main(String[] args) {
          String apiSecret = "your_api_secret"; // your wallet api secret

          // init client
          CoboMPCApiRestClient mpcClient = CoboApiClientFactory.newInstance(
                  new LocalSigner(apiSecret),
                  Env.DEV,
                  false).newMPCRestClient();

          // drop transaction
          String coboId = "cobo_id of the transaction to drop";
          String requestId = String.valueOf(System.currentTimeMillis());
          BigDecimal fee = null;
          BigInteger gasPrice = new BigInteger("6500000000");
          BigInteger gasLimit = new BigInteger("21000");
          BigInteger feeAmount = null;

          ApiResponse<MPCPostTransaction> res = mpcClient.dropTransaction(coboId, requestId, fee, gasPrice, gasLimit, feeAmount);
          System.out.println("drop transaction: " + res.getResult());
      }
  }
  ```
</CodeGroup>

<br />

### Locating a transaction to apply RBF when there are multiple unconfirmed transactions for a single address

* Retrieve all unconfirmed transactions under the given address that have a status of 402 or 403 (Note: RBF can also be applied to transactions with a status of 401, but as transactions with a 401 status will transition to 402 or 403 shortly, there is no need to filter transactions with a 401 status).
* Locate all unconfirmed transactions with statuses 501 and 900, identify the transaction among these that has the largest nonce. The nonce of the transaction you are trying to locate should then be this nonce + 1.
* Apply RBF to the identified transaction using a higher transaction fee.
* Verify whether the RBF transaction has been broadcast on the blockchain and confirmed by miners. If not, reapply RBF to the identified transaction.

<CodeGroup>
  ```python Python
  from cobo_custody.config import DEV_ENV
  from cobo_custody.signer.local_signer import LocalSigner
  from cobo_custody.client.mpc_client import MPCClient

  api_secret = "your api secret"  # your wallet api secret

  # init cobo client
  mpc_client = MPCClient(signer=LocalSigner(api_secret), env=DEV_ENV, debug=False)

  # get transactions in status 402 and 403
  address = "you address"
  broadcast_failed_txs = mpc_client.list_transactions(from_address=address, status=402).result["transactions"]
  pending_confirmation_txs = mpc_client.list_transactions(from_address=address, status=403).result["transactions"]

  if broadcast_failed_txs or pending_confirmation_txs:
      pending_txs = broadcast_failed_txs + pending_confirmation_txs

      minimum_nonce = pending_txs[0]["nonce"]
      tx_should_be_replaced = pending_txs[0]["cobo_id"]
      for tx in pending_txs[1:]:
          if tx["nonce"] < minimum_nonce:
              minimum_nonce = tx["nonce"]
              tx_should_be_replaced = tx["cobo_id"]

      print("tx_should_be_replaced: ", tx_should_be_replaced)
      print("minimum_nonce: ", minimum_nonce)

      # on the next you may speedup or drop the tx with an appropriate fee
  ```
</CodeGroup>

<br />

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# JavaScript
Source: https://cobo.com/developers/v1/sdks-and-tools/sdks/cobo-safe/js



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

# Overview

`jscobosafe` is a JavaScript SDK for sending transactions via `Cobo Safe` in the same way as [ethers.js](https://github.com/ethers-io/ethers.js/).

Head to [https://github.com/coboglobal/jscobosafe](https://github.com/coboglobal/jscobosafe) for the source code.

# Installation

```sh
npm i git+https://github.com/coboglobal/jscobosafe
```

# Usage

Your `.env` configuration

```
PRIV = <Private key of the delegate>
COBOSAFE = <Address of CoboSafeAccount>
```

The code performs a transfer of WMATIC ERC20 token on Polygon network.

```js
const {CoboSafeAccount} = require("jscobosafe");
const {ethers} = require("ethers");
const ERC20_ABI = require("./ERC20.json");

require("dotenv").config();
const PRI_KEY = process.env.PRIV;
const COBO_SAFE_ADDRESS = process.env.COBOSAFE

const provider = new ethers.JsonRpcProvider("https://rpc.ankr.com/polygon")
const signer = new ethers.Wallet(PRI_KEY, provider);
const coboSafe = new CoboSafeAccount(COBO_SAFE_ADDRESS, signer)
const delegate = coboSafe.delegate;

const WMATIC_ADDRESS = "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270";

async function main(){
    console.log("CoboSafe", coboSafe.address);
    console.log("Safe", await coboSafe.safe());
    console.log("Delegate", coboSafe.delegate);

    let tx;

    // Connect with the contract as other ethers.js signers do.
    const token = new ethers.Contract(WMATIC_ADDRESS, ERC20_ABI, coboSafe);

    console.log(await token.balanceOf(await coboSafe.safe()))
    tx = await token.transfer(delegate, 1);
    await tx.wait()
    console.log(await token.balanceOf(await coboSafe.safe()))
}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Python
Source: https://cobo.com/developers/v1/sdks-and-tools/sdks/cobo-safe/python



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

# Overview

`pycobosafe` is a Python SDK for sending transactions via `Cobo Safe` in the same way as [brownie](https://github.com/eth-brownie/brownie).

Head to [https://github.com/coboglobal/pycobosafe](https://github.com/coboglobal/pycobosafe) for the source code.

`pycobosafe` also works as an interactive console to interact with `Cobo Safe` contracts. Read more [here](/v1/sdks-and-tools/tools/pycobosafe).

# Installation

```sh
pip install git+https://github.com/coboglobal/pycobosafe
```

# Usage

Your `.env` configuration

```
DELEGATE = <Your brownie account id>
COBOSAFE = <Address of CoboSafeAccount>
```

The code performs a transfer of WMATIC ERC20 token on Polygon network.

```py
import json
import os

import dotenv
from brownie import Contract, accounts, network
from web3 import Web3

from pycobosafe.account import CoboSafeAccount

# Connect to the network. A fork chain is used for test.
network.connect("polygon-main-fork")

# Load delegate's private key / keystore file and CoboSafe address.
dotenv.load_dotenv()
DELEGATE = accounts.load((os.getenv("DELEGATE"))) # This is safer than plain private key.
COBOSAFE = os.getenv("COBOSAFE")
assert DELEGATE and COBOSAFE, "delegate or cobosafe not set"

cobosafe = CoboSafeAccount(COBOSAFE, DELEGATE)

WMATIC = Web3.toChecksumAddress("0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270")

ERC20_ABI = json.load(open(os.path.join(os.path.dirname(__file__), "ERC20.json")))
erc20 = Contract.from_abi("WMATIC", WMATIC, ERC20_ABI)

print(erc20.balanceOf(cobosafe.safe.address))

# Send transaction as other brownie accounts do.
erc20.transfer(DELEGATE, 1, {"from": cobosafe})

print(erc20.balanceOf(cobosafe.safe.address))
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Go
Source: https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/go



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

***

# Overview

This guide introduces Cobo WaaS API in Go SDK, enabling developers to integrate with Cobo's Custodial/MPC services seamlessly using the Go programming language.

# Before You Begin

* Ensure that you have created an account and configured Cobo's Custodial/MPC services.
  For detailed instructions, please refer to the [Quickstart](https://www.cobo.com/developers/get-started/overview/quickstart) guide.

* To access the API documentation, navigate to the [API references](https://www.cobo.com/developers/api-references/overview/) section.

# Using the Cobo Go SDK

## GitHub

[The Official Go SDK for Cobo WaaS API](https://github.com/CoboGlobal/cobo-go-api).

## Requirements

Go 1.18 or newer.

## Installation

add dependency

```sh
go get github.com/CoboGlobal/cobo-go-api@v0.46.0
```

## Code Sample

### Generate Key Pair

```go
import (
	"fmt"
	"github.com/CoboGlobal/cobo-go-api/cobo_custody"
)

apiSecret, apiKey := cobo_custody.GenerateKeyPair()
fmt.Println("API_SECRET:", apiSecret)
fmt.Println("API_KEY:", apiKey)
```

For more information on the API key, please [click here](https://www.cobo.com/developers/api-references/overview/authentication).

### Initialize ApiSigner

`ApiSigner` can be instantiated through

```go
import "github.com/CoboGlobal/cobo-go-api/cobo_custody"

var localSigner = cobo_custody.LocalSigner{
		PrivateKey: "apiSecret",
	}
```

In some cases, your private key cannot be exported, for example, your private key is in aws kms, you should pass in your own implementation by implements `ApiSigner` interface

### Initialize RestClient

```go
import "github.com/CoboGlobal/cobo-go-api/cobo_custody"
var client = cobo_custody.Client{
  Signer:  localSigner,
  Env:     cobo_custody.Dev(),
}
```

### Custodial Wallet Sample

```Go
import (
	"fmt"
	"github.com/CoboGlobal/cobo-go-api/cobo_custody"
)
apiSecret, apiKey := cobo_custody.GenerateKeyPair()
fmt.Println("API_SECRET:", apiSecret)
fmt.Println("API_KEY:", apiKey)

var localSigner = cobo_custody.LocalSigner{
  PrivateKey: apiSecret,
}

var client = cobo_custody.Client{
  Signer:  localSigner,
  Env:     cobo_custody.Dev(),
}

var res, error_msg = client.GetAccountInfo()
fmt.Println(res)
fmt.Println(error_msg)

```

### MPC Wallet Sample

```go
import (
	"fmt"
	"github.com/CoboGlobal/cobo-go-api/cobo_custody"
)
apiSecret, apiKey := cobo_custody.GenerateKeyPair()
fmt.Println("API_SECRET:", apiSecret)
fmt.Println("API_KEY:", apiKey)

var localSigner = cobo_custody.LocalSigner{
  PrivateKey: apiSecret,
}

var mpc_client = cobo_custody.MPCClient{
  Signer:  localSigner,
  Env:     cobo_custody.Dev(),
}

var res, error_msg = mpc_client.GetSupportedChains()
fmt.Println(res)
fmt.Println(error_msg)
```

### Handling Response

```Go
import (
	"fmt"

	"github.com/CoboGlobal/cobo-go-api/cobo_custody"
)

var localSigner = cobo_custody.LocalSigner{
    PrivateKey: "your secret key",
}

var client = cobo_custody.Client{
    Signer: localSigner,
    Env:    cobo_custody.Dev(),
}

var res, error_msg = client.GetCoinInfo("BTC")
fmt.Println(res)

/* The response is a simplejson.Json object
   {map[abs_balance:0.0001 abs_estimate_fee:0.000948
        abs_estimate_fee_usd:35.28 balance:10000
        can_deposit:true
        can_withdraw:true
        coin:BTC confirming_threshold:4 decimal:8
        description:Bitcoin display_code:BTC
        dust_threshold:546 fee_coin:BTC
        minimum_deposit_threshold:10000
        require_memo:false token_address:]}
*/

// You can handle the response object as follows:
fmt.Println(res.Get("abs_balance"))
fmt.Println(res.Get("abs_estimate_fee"))

```

### Handling API Errors

```Go
var client = cobo_custody.Client{
    Signer: localSigner,
    Env:    cobo_custody.Dev(),
}
var res, error_msg = client.GetCoinInfo("BTC")
fmt.Println(error_msg)

/* The error response is a cobo_custody.ApiError object.
" { 4b9be35a1c5d44f38ddf2b7e58fd3897 1006 Invalid api key,
  please use standard wallet api key }"
*/

// You can handle the response object as follows:
fmt.Println(error_msg.ErrorCode)
fmt.Println(error_msg.ErrorId)
fmt.Println(error_msg.ErrorMessage)
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Java
Source: https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/java



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

***

# Overview

This guide introduces Cobo WaaS API in Java SDK, enabling developers to integrate with Cobo's Custodial/MPC services seamlessly using the Java programming language.

# Before You Begin

* Ensure that you have created an account and configured Cobo's Custodial/MPC services.
  For detailed instructions, please refer to the [Quickstart](https://www.cobo.com/developers/get-started/overview/quickstart) guide.

* To access the API documentation, navigate to the [API references](https://www.cobo.com/developers/api-references/overview/) section.

# Using the Cobo Java SDK

## GitHub

[The Official Java SDK for Cobo WaaS API](https://github.com/CoboGlobal/cobo-java-api).

## Requirements

* JDK8
* JDK17 or newer

## Installation

Step 1. Add the JitPack repository to your build file

gradle:

```
allprojects {
    repositories {
        ...
        maven { url 'https://jitpack.io' }
    }
}
```

maven:

```
<repositories>
    <repository>
        <id>jitpack.io</id>
        <url>https://jitpack.io</url>
    </repository>
</repositories>
```

Step 2. Add the dependency

gradle:

```
dependencies {
    implementation 'com.github.CoboGlobal:cobo-java-api:v0.64'
}
```

maven:

```
<dependency>
    <groupId>com.github.CoboGlobal</groupId>
    <artifactId>cobo-java-api</artifactId>
    <version>v0.62</version>
</dependency>
```

## Code Sample

### Generate Key Pair

```java
import com.cobo.custody.api.client.impl.LocalSigner;

String[] key = LocalSigner.generateKeyPair();
String secretKey = key[0];
String apiKey = key[1];

```

For more information on the API key, please [click here](https://www.cobo.com/developers/api-references/overview/authentication).

### Initialize ApiSigner

`ApiSigner` can be instantiated through `new LocalSigner("secretkey" )`

In certain scenarios, the private key may be restricted from export, such as when it is stored in AWS Key Management Service (KMS).
In such cases, please pass in a custom implementation using the ApiSigner interface:

```java

import com.cobo.custody.api.client.ApiSigner;
new ApiSigner() {
    @Override
    public String sign(byte[] message) {
        return null;
    }

    @Override
    public String getPublicKey() {
        return null;
    }
}
```

### Initialize RestClient

These can be instantiated using the corresponding factory method provided by `CoboApiClientFactory`.

```java
import com.cobo.custody.api.client.CoboApiClientFactory;
import com.cobo.custody.api.client.CoboApiRestClient;
import com.cobo.custody.api.client.config.CoboApiConfig;
import com.cobo.custody.api.client.config.Env;
import com.cobo.custody.api.client.impl.LocalSigner;

CoboApiRestClient client = CoboApiClientFactory.newInstance(
                new LocalSigner(apiSecret),
                Env.DEV,
                false).newRestClient();
```

### Custodial Wallet Sample

```java

import com.cobo.custody.api.client.CoboApiClientFactory;
import com.cobo.custody.api.client.CoboApiRestClient;
import com.cobo.custody.api.client.config.Env;
import com.cobo.custody.api.client.domain.ApiResponse;
import com.cobo.custody.api.client.domain.account.CoinInfo;
import com.cobo.custody.api.client.impl.LocalSigner;

String[] key = LocalSigner.generateKeyPair();
String secretKey = key[0];
String apiKey = key[1];

CoboApiRestClient client = CoboApiClientFactory.newInstance(
        new LocalSigner(secretKey),
        Env.DEV,
        false).newRestClient();

ApiResponse<CoinInfo> coinInfo = client.getCoinInfo("BTC");
System.out.println(coinInfo);

```

### MPC Wallet Sample

```java
import com.cobo.custody.api.client.CoboApiClientFactory;
import com.cobo.custody.api.client.CoboMPCApiRestClient;
import com.cobo.custody.api.client.config.Env;
import com.cobo.custody.api.client.domain.ApiResponse;
import com.cobo.custody.api.client.domain.account.MPCChains;
import com.cobo.custody.api.client.impl.LocalSigner;

String[] key = LocalSigner.generateKeyPair();
String secretKey = key[0];
String apiKey = key[1];

CoboMPCApiRestClient mpc_client = CoboApiClientFactory.newInstance(
        new LocalSigner(secretKey),
        Env.DEV,
        false).newMPCRestClient();

ApiResponse<MPCChains> chains = mpc_client.getSupportedChains();
System.out.println(chains);
```

### Handling Response

```java
import com.cobo.custody.api.client.CoboApiClientFactory;
import com.cobo.custody.api.client.CoboMPCApiRestClient;
import com.cobo.custody.api.client.config.Env;
import com.cobo.custody.api.client.domain.ApiResponse;
import com.cobo.custody.api.client.domain.account.MPCChains;
import com.cobo.custody.api.client.impl.LocalSigner;

CoboApiRestClient client = CoboApiClientFactory.newInstance(
        new LocalSigner(secretKey),
        Env.DEV,
        false).newRestClient();

ApiResponse<CoinInfo> coinInfo = client.getCoinInfo("BTC");
System.out.println(coinInfo);

/* The response like this
"Response{success=true,
          errorCode=0, errorMessage='null',
          errorId='null', errorDescription='null',
          result=CoinInfo{
              coin='BTC', displayCode='BTC',
              description='Bitcoin', decimal=8, canDeposit=true,
              canWithdraw=true, requireMemo=false,
              minimumDepositThreshold='10000',
              balance='10000', absBalance='0.0001',
              feeCoin='BTC', absEstimateFee='0.000948',
              confirmingThreshold=4, dustThreshold=546',
              tokenAddress='',
              absEstimateFeeUsd='35.28'
           }
         }"
*/

 // You can handle the response object as follows:
System.out.println(coinInfo.isSuccess());
System.out.println(coinInfo.getResult().getCoin());
System.out.println(coinInfo.getResult().getBalance());
```

### Handling API Errors

```java
/* The error response like this
Response{ success=false, errorCode=1006,
          errorMessage='Invalid api key, please use standard wallet api key',
          errorId='fbee1201d4ee4a67aae91f05f57e0679',
          errorDescription='Invalid api key, please use standard wallet api key',
          result=null
         }
*/

// You can handle the response object as follows:
System.out.println(coinInfo.isSuccess());
System.out.println(coinInfo.getErrorCode());
System.out.println(coinInfo.getErrorDescription());
System.out.println(coinInfo.getErrorId());
System.out.println(coinInfo.getErrorMessage());
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# JavaScript
Source: https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/javascript



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

***

# Overview

This guide introduces Cobo WaaS API in JavaScript SDK, enabling developers to integrate with Cobo's Custodial/MPC services seamlessly using the JavaScript programming language.

# Before You Begin

* Ensure that you have created an account and configured Cobo's Custodial/MPC services.
  For detailed instructions, please refer to the [Quickstart](https://www.cobo.com/developers/get-started/overview/quickstart) guide.

* To access the API documentation, navigate to the [API references](https://www.cobo.com/developers/api-references/overview/) section.

# Using the Cobo JavaScript SDK

## GitHub

[The Official JavaScript SDK for Cobo WaaS API](https://github.com/CoboGlobal/cobo-js-api).

## Requirements

Node.js v10.18.0 or newer.

## Installation

add dependency in package.json

```json
{
  "dependencies": {
    "cobo-custody": "https://github.com/CoboGlobal/cobo-js-api/releases/download/v0.39.0/release.tgz"
  }
}
```

## Code Sample

### Generate Key Pair

```JavaScript
const { LocalSigner } = require('cobo-custody');

const keyPair = LocalSigner.newKeyPair();
console.log(keyPair["privKey"]);
console.log(keyPair["pubKey"]);
```

For more information on the API key, please [click here](https://www.cobo.com/developers/api-references/overview/authentication).

### Initialize ApiSigner

`ApiSigner` can be instantiated through

```javascript
const { LocalSigner } = require("cobo-custody");
const signer = new LocalSigner(keyPair["privKey"]);
```

In certain scenarios, the private key may be restricted from export, such as when it is stored in AWS Key Management Service (KMS).
In such cases, please pass in a custom implementation using the ApiSigner interface:

### Initialize RestClient

```JavaScript
const { Client } = require('cobo-custody');
const { LocalSigner } = require('cobo-custody');
const {DEV,PROD} = require('cobo-custody');

const client = new Client(API_SIGNER, DEV, true);
```

### Custodial Wallet Sample

```JavaScript
const { Client } = require('cobo-custody');
const { LocalSigner } = require('cobo-custody');
const {DEV,PROD} = require('cobo-custody');

async function cutodian_wallet_sample() {
    const keyPair = LocalSigner.newKeyPair();
    console.log(keyPair["privKey"]);
    console.log(keyPair["pubKey"]);
    const signer = new LocalSigner(keyPair["privKey"]);
    const client = new Client(signer, DEV, false);
    const res =  await client.getCoinInfo("BTC");
    console.log(res);
}
cutodian_wallet_sample();
```

### MPC Wallet Sample

```JavaScript
async function mpc_wallet_sample() {
    const keyPair = LocalSigner.newKeyPair();
    console.log(keyPair["privKey"]);
    console.log(keyPair["pubKey"]);
    const signer = new LocalSigner(keyPair["privKey"]);
    const mpc_client = new MPCClient(signer, DEV, false);
    const res =  await mpc_client.GetSupportedChains();
    console.log(res);
}
mpc_wallet_sample();
```

### Handling Response

```JavaScript
const { Client } = require('cobo-custody');
const { LocalSigner } = require('cobo-custody');
const {DEV,PROD} = require('cobo-custody');

async function cutodian_wallet_sample() {
    const keyPair = LocalSigner.newKeyPair();
    console.log(keyPair["privKey"]);
    console.log(keyPair["pubKey"]);
    const signer = new LocalSigner(keyPair["privKey"]);
    const client = new Client(signer, DEV, false);
    const res =  await client.getCoinInfo("BTC");
    console.log(res);

    /*response is a json object
    "{
      success: true,
      result: {
        coin: 'BTC',
        display_code: 'BTC',
        description: 'Bitcoin',
        decimal: 8,
        can_deposit: true,
        can_withdraw: true,
        require_memo: false,
        minimum_deposit_threshold: '10000',
        balance: '10000',
        abs_balance: '0.0001',
        fee_coin: 'BTC',
        abs_estimate_fee: '0.000948',
        abs_estimate_fee_usd: '35.30',
        confirming_threshold: 4,
        dust_threshold: 546,
        token_address: ''
      }
    }*/

    // You can handle the response object as follows:
    console.log(res.success);
    console.log(res.result.coin)
    console.log(res.result.abs_estimate_fee)

}
cutodian_wallet_sample();
```

### Handling API Errors

```JavaScript
const { Client } = require('cobo-custody');
const { LocalSigner } = require('cobo-custody');
const {DEV,PROD} = require('cobo-custody');

async function cutodian_wallet_sample() {
    const keyPair = LocalSigner.newKeyPair();
    // console.log(keyPair["privKey"]);
    // console.log(keyPair["pubKey"]);
    const signer = new LocalSigner("wrong secret key");
    const client = new Client(signer, DEV, false);
    const res =  await client.getCoinInfo("BTC");
    console.log(res);

    /*response is a json object
   {
      success: false,
      error_code: 1006,
      error_message: 'Invalid api key, please use standard wallet api key',
      error_id: '16060797d8834044a4fdb0f7d01c6627',
      error_description: 'Invalid api key, please use standard wallet api key'
    }*/

    // You can handle the error response object as follows:
    console.log(res.success);
    console.log(res.error_code);
    console.log(res.error_message);
    console.log(res.error_id);
    console.log(res.error_description);
  }

cutodian_wallet_sample();

```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# PHP
Source: https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/php



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

***

# Overview

This guide introduces Cobo WaaS API in PHP SDK, enabling developers to integrate with Cobo's Custodial/MPC services seamlessly using the PHP programming language.

# Before You Begin

* Ensure that you have created an account and configured Cobo's Custodial/MPC services.
  For detailed instructions, please refer to the [Quickstart](https://www.cobo.com/developers/get-started/overview/quickstart) guide.

* To access the API documentation, navigate to the [API references](https://www.cobo.com/developers/api-references/overview/) section.

# Using the Cobo PHP SDK

## GitHub

[The Official PHP SDK for Cobo WaaS API](https://github.com/CoboGlobal/cobo-php-api).

## Requirements

PHP 7.0 or newer.

## Installation

The cobo\_custody library can be conveniently installed using Composer.

* first you need to install [Composer](https://getcomposer.org/)

* then add dependency in composer.json

```json
{
  "require": {
    "cobo/cobo_custody": "0.2.17"
  }
}
```

## Code Sample

### Generate Key Pair

```php
<?php
require 'vendor/autoload.php';

use Cobo\Custody\Config;
use Cobo\Custody\LocalSigner;
use Cobo\Custody\Client;
$key = LocalSigner::generateKeyPair();
echo "apiSecret:", $key['apiSecret'],"\n";
echo "apiKey:", $key['apiKey'];
?>
```

For more information on the API key, please [click here](https://www.cobo.com/developers/api-references/overview/authentication).

### Initialize ApiSigner

`ApiSigner` can be instantiated through `$signer = new LocalSigner($key['apiSecret']);`

```php
$signer = new LocalSigner($key['apiSecret']);
```

In certain scenarios, the private key may be restricted from export, such as when it is stored in AWS Key Management Service (KMS).
In such cases, please pass in a custom implementation using the ApiSigner interface:

### Initialize RestClient

```php
<?php
require 'vendor/autoload.php';

use Cobo\Custody\Config;
use Cobo\Custody\LocalSigner;
use Cobo\Custody\Client;

$client = new Client($signer, Config::DEV, false);
?>
```

### Custodial Wallet Sample

```php
<?php
require 'vendor/autoload.php';

use Cobo\Custody\Config;
use Cobo\Custody\LocalSigner;
use Cobo\Custody\Client;

$key = LocalSigner::generateKeyPair();
echo "apiSecret:", $key['apiSecret'],"\n";
echo "apiKey:", $key['apiKey'];

$signer = new LocalSigner($key['apiSecret']);
$client = new Client($signer, Config::DEV, false);
$res = $client->getAccountInfo();

?>
```

### MPC Wallet Sample

```php
<?php
require 'vendor/autoload.php';
use Cobo\Custody\Config;
use Cobo\Custody\LocalSigner;
use Cobo\Custody\MPCClient;
$key = LocalSigner::generateKeyPair();
echo "apiSecret:", $key['apiSecret'],"\n";
echo "apiKey:", $key['apiKey'];

$signer = new LocalSigner($apiKey);
$mpc_client = new MPCClient($signer, Config::DEV, false);
$res = $mpc_client->getSupportedChains();
var_dump($res->success);
var_dump(json_encode($res));
?>
```

### Handling Response

```php
<?php
require 'vendor/autoload.php';
use Cobo\Custody\Config;
use Cobo\Custody\LocalSigner;
use Cobo\Custody\Client;
$key = LocalSigner::generateKeyPair();
echo "apiSecret:", $key['apiSecret'],"\n";
echo "apiKey:", $key['apiKey'];

$signer = new LocalSigner($apiKey);
$client = new Client($signer, Config::DEV, false);
$res = $client->getCoinDetails();

/* response as follows:
object(stdClass)#5 (2) {
  ["success"]=>
  bool(true)
  ["result"]=>
  object(stdClass)#1750 (16) {
    ["coin"]=>
    string(3) "BTC"
    ["display_code"]=>
    string(3) "BTC"
    ["description"]=>
    string(7) "Bitcoin"
    ["decimal"]=>
    int(8)
    ["can_deposit"]=>
    bool(true)
    ["can_withdraw"]=>
    bool(true)
    ["require_memo"]=>
    bool(false)
    ["minimum_deposit_threshold"]=>
    string(5) "10000"
    ["balance"]=>
    string(5) "10000"
    ["abs_balance"]=>
    string(6) "0.0001"
    ["fee_coin"]=>
    string(3) "BTC"
    ["abs_estimate_fee"]=>
    string(8) "0.000948"
    ["abs_estimate_fee_usd"]=>
    string(5) "35.64"
    ["confirming_threshold"]=>
    int(4)
    ["dust_threshold"]=>
    int(546)
    ["token_address"]=>
    string(0) ""
  }
}
*/

// You can handle the response object as follows:
var_dump($res->success);
var_dump($res->result->coin);
var_dump($res->result->abs_estimate_fee_usd);
var_dump(json_encode($res));
?>
```

### Handling API Errors

```php
<?php
require 'vendor/autoload.php';
use Cobo\Custody\Config;
use Cobo\Custody\LocalSigner;
use Cobo\Custody\Client;

$signer = new LocalSigner("wrong secret key");
$client = new Client($signer, Config::DEV, false);
$res = $client->getCoinDetails();

/* response
"
object(stdClass)#5 (5) {
  ["success"]=>bool(false)
  ["error_code"]=>int(1006)
  ["error_message"]=>string(51) "Invalid api key, please use standard wallet api key"
  ["error_id"]=>string(32) "110e3bd3e8064f99ae0c0fea9e91bdb9"
  ["error_description"]=>string(51) "Invalid api key, please use standard wallet api key"
}
*/

// You can handle the error response  as follows:
var_dump($res->error_code);
var_dump($res->error_message);
var_dump($res->error_id);
var_dump($res->error_description);
?>
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Python
Source: https://cobo.com/developers/v1/sdks-and-tools/sdks/waas/python



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

***

# Overview

This guide introduces Cobo WaaS API in Python SDK, enabling developers to integrate with Cobo's Custodial/MPC services seamlessly using the Python programming language.

# Before You Begin

* Ensure that you have created an account and configured Cobo's Custodial/MPC services.
  For detailed instructions, please refer to the [Quickstart](https://www.cobo.com/developers/get-started/overview/quickstart) guide.

* To access the API documentation, navigate to the [API references](https://www.cobo.com/developers/api-references/overview/) section.

# Using the Cobo Python SDK

## GitHub

[The Official Python SDK for Cobo WaaS API](https://github.com/CoboGlobal/cobo-python-api).

## Requirements

Python 3.7 or newer.

## Installation

Please run the first command for installation. Note that the source code below is only required for those looking to modify the package.
:

```sh
pip install --upgrade cobo-custody
```

Install from source with:

```sh
python setup.py install
```

## Code Sample

### Generate Key Pair

For more information on the API Key, please [click here](/v1/api-references/overview/authentication).

```python
from cobo_custody.signer.local_signer import generate_new_key,LocalSigner
from cobo_custody.client import Client
from cobo_custody.config import DEV_ENV
api_secret, api_key = generate_new_key()
```

### Initialize ApiSigner

`ApiSigner` can be instantiated through

```python
from cobo_custody.signer.local_signer import LocalSigner
LocalSigner("API_SECRET")
```

In certain scenarios, the private key may be restricted from export, such as when it is stored in AWS Key Management Service (KMS).
In such cases, please pass in a custom implementation using the ApiSigner interface:

### Initialize RestClient

```python
from cobo_custody.client import Client
from cobo_custody.config import DEV_ENV
from cobo_custody.signer.local_signer import LocalSigner
client = Client(signer=signer, env=DEV_ENV, debug=True)
```

### Custodial Wallet Sample

```python
from cobo_custody.signer.local_signer import generate_new_key,LocalSigner
from cobo_custody.client import Client
from cobo_custody.config import DEV_ENV
signer = LocalSigner("api_secret")
client = Client(signer=signer, env=DEV_ENV, debug=True)
client.get_account_info()
```

### MPC Wallet Sample

```python
from cobo_custody.signer.local_signer import generate_new_key,LocalSigner
from cobo_custody.client.mpc_client import MPCClient
from cobo_custody.config import DEV_ENV
signer = LocalSigner("api_secret")
mpc_client = MPCClient(signer=signer, env=DEV_ENV, debug=True)
mpc_client.get_supported_coins()
```

### Handling Response

The response is an ApiResponse object.

```python
from cobo_custody.signer.local_signer import generate_new_key,LocalSigner
from cobo_custody.client.mpc_client import MPCClient
from cobo_custody.config import DEV_ENV
signer = LocalSigner("api_secret")
client = Client(signer=signer, env=DEV_ENV, debug=True)
res = client.get_supported_coins()

''' Response
ApiResponse(success=True,
 result= {
   'name': 'DEV_AT_Auth',
   'assets': [
     {
       'coin': 'COBO_ETH',
       'display_code': 'COBO_ETH',
       'description': 'Cobo Ethereum Testnet',
       'decimal': 18,
       'can_deposit': True,
       'can_withdraw': True,
       'require_memo': False,
       'minimum_deposit_threshold': '0',
       'balance': '90681999999999969',
       'abs_balance': '0.090681999999999969',
       'fee_coin': 'COBO_ETH',
       'abs_estimate_fee': '0.000021',
       'abs_estimate_fee_usd': '0.04',
       'confirming_threshold': 2,
       'dust_threshold': 1,
       'token_address': ''
     }
   ]
 }
, exception=None)'''

# You can handle the response object as follows:
#value is True
print(res.success)
print(res.result)
#value is DEV_AT_Auth
print(res.result["name"])
print(res.exception)
```

### Handling API Errors

```python
from cobo_custody.signer.local_signer import generate_new_key,LocalSigner
from cobo_custody.client.mpc_client import MPCClient
from cobo_custody.config import DEV_ENV
signer = LocalSigner("api_secret")
client = Client(signer=signer, env=DEV_ENV, debug=True)
res = client.get_supported_coins()


'''Reponse
ApiResponse(success=False,
           result=None,
           exception=ApiError(
                errorCode=12001,
                errorMessage='Signature verify fail',
                errorId='a0ca65be81f94a9e8046f214e0480b3a'
                )
           )
'''

# You can handle the response object as follows
#value is False
print(res.success)

print(res.result)

#value is ApiError object
print(res.exception)

print(res.exception["errorCode"])
print(res.exception["errorMessage"])
print(res.exception["errorId"])
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# Cobo Safe Python Kit
Source: https://cobo.com/developers/v1/sdks-and-tools/tools/pycobosafe



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

# Installation

```sh
pip install git+https://github.com/coboglobal/pycobosafe
```

# Usage

`pycobosafe` provides an interactive console for interacting with Cobo Safe and allow users to view the information of Cobo Safe easily and perform simple on-chain actions.

```
$> pycobosafe -c polygon-main-fork
Welcome to the cobosafe shell. Type `help` to list commands.

cobosafe > help

Documented commands (type help <topic>):
========================================
bind_authorizer    create_cobosmart  glob          safe             
bind_delegate      debug             help          sh               
chain              delegate          init_argus    unbind_authorizer
cobosafe           dump              ipython       unbind_delegate  
create_authorizer  exit              load_account
create_cobosafe    factory           py  
```

List all implementations registered in `CoboFactory`.

```
cobosafe > factory
Name: CoboFactory
Address: 0xC0B00000e19D71fA50a9BB1fcaC2eC92fac9549C
Version: 1
Owner: 0x5551268c3664E5750C70f15A661F1C2E782ee210
Latest implementations (Total 18):
  ArgusAccountHelper: 0xB4d7111432C2827B58331802E1759e9c91e83282
  ArgusViewHelper: 0xF97BB9AF9FE6A68b324EdBcd0fE698E631F5113A
  CoboSafeAccount: 0xE7168444CF4c25800C2817BFDC6dcf17C261994d
  FlatRoleManager: 0x2F2FDDb984cdEC4318D8d87BC70821e9B9Ed8e7E
  ArgusRootAuthorizer: 0x7Ba3CC542b70f8F1D6282dae222235D42CFd34CD
  FuncAuthorizer: 0x92DdB2B7D17FF42078AFFf98721F6d1E38083ED6
  TransferAuthorizer: 0x2148c4F124029c3A18CFcC7A86A67A5Bf4D88658
  1inchV5Authorizer: 0xfecE55912861a401738604c52998604ba45115a1
  ParaswapBotAuthorizer: 0x47219e2f187a145De306f0ca882A0304D0AE912e
  ...
```

Summarize information of contracts in Cobo Safe framework.

```
cobosafe > dump 0xE3dA9932f4492A28678cDe44ff875E434377bcFE
Name: CoboSafeAccount
Address: 0xE3dA9932f4492A28678cDe44ff875E434377bcFE
Version: 1
Owner: 0x765F20672A0Ff2d1fC518b7B318b72A043aaDD99
Authorizer: 0x3C85b07C8478D5876D5F17EB8dcD4D442842BaaF
Role manager: 0x324B5B185b2B02AA3A74EE44e76bc72464b020BA
Delegates:
```

Interact with Cobo Safe contracts. *Note: For test purpose only, do NOT use in Production environment.*

```
cobosafe > load_account <your brownie account id>
Enter password for "<id>":
Load address: <0x..>
Delegate set to <0x..>

cobosafe > safe 0x765F20672A0Ff2d1fC518b7B318b72A043aaDD99
Safe set to 0x765F20672A0Ff2d1fC518b7B318b72A043aaDD99

cobosafe > init_argus
CoboSafeAccount created at 0xE3dA9932f4492A28678cDe44ff875E434377bcFE
Name: CoboSafeAccount
Address: 0xE3dA9932f4492A28678cDe44ff875E434377bcFE
Version: 1
Owner: 0x765F20672A0Ff2d1fC518b7B318b72A043aaDD99
Authorizer: 0x3C85b07C8478D5876D5F17EB8dcD4D442842BaaF
Role manager: 0x324B5B185b2B02AA3A74EE44e76bc72464b020BA
Delegates: 
```

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


# MPC Recovery Kits
Source: https://cobo.com/developers/v1/sdks-and-tools/tools/recovery-kit



<Note>This content applies to WaaS 1.0 only. We highly recommend that you upgrade to [WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).</Note>

Cobo MPC WaaS provides `Hard Key Recovery` for disaster recovery. The tool named `cobo-mpc-recovery-tool`
in this repository can reconstruct the MPC private key that corresponds to the Cobo MPC wallet.

Binary archives are published at [https://github.com/CoboGlobal/cobo-mpc-recovery-kits/releases](https://github.com/CoboGlobal/cobo-mpc-recovery-kits/releases)

## Building the source

Building binary from the source in local environment, instead of using published binary archives

* Go 1.18 is required. Manually install Go, please [click here](https://go.dev/doc/install)

* Clone the repository:

```
git clone https://github.com/CoboGlobal/cobo-mpc-recovery-kits.git
```

* Enter the directory

```
cd cobo-mpc-recovery-kits
```

* Build `cobo-mpc-recovery-tool`

```
make tool
```

Binary executable found in the `build` directory

## Commands

### Recovery command

Reconstruct all MPC key shares in TSS group recovery files, and derive the child private keys of all wallet addresses under the Cobo MPC wallet

```
cobo-mpc-recovery-tool [flags]
```

|         flags         | Description                                                                                             |
| :-------------------: | ------------------------------------------------------------------------------------------------------- |
|        csv-file       | address csv file, contains HD derivation paths                                                          |
|     csv-output-dir    | address csv output dir, derive keys file output in this directory (default "recovery")                  |
|        group-id       | recovery group id                                                                                       |
|  group-recovery-files | TSS group recovery files, such as recovery/tss-group-id-node-1-time1,recovery/tss-group-id-node-2-time2 |
|         paths         | key HD derivation paths                                                                                 |
| show-root-private-key | show TSS root private key                                                                               |

### Verify command

Verify all TSS group recovery files are valid

```
cobo-mpc-recovery-tool verify [flags]
```

|         flags        | Description                                                                                             |
| :------------------: | ------------------------------------------------------------------------------------------------------- |
|       group-id       | recovery group id                                                                                       |
| group-recovery-files | TSS group recovery files, such as recovery/tss-group-id-node-1-time1,recovery/tss-group-id-node-2-time2 |

## Running

* Prerequisites

  * Acquire TSS group recovery files (JSON format) that contain exported MPC key shares.
  * Passphrase of each TSS group recovery file

* Create a new recovery folder in the same directory level as `cobo-mpc-recovery-tool`, and paste the TSS group recovery files
  under the recovery folder

```
├── cobo-mpc-recovery-tool
└── recovery
    ├── tss-group-<GROUP_ID>-node-<NODE_ID1>-recovery-<TIME1>
    └── tss-group-<GROUP_ID>-node-<NODE_ID2>-recovery-<TIME2>
```

* Execute the verify command

```
./cobo-mpc-recovery-tool verify \
    --group-recovery-files recovery/tss-group-<GROUP_ID>-node-<NODE_ID1>-recovery-<TIME1>,recovery/tss-group-<GROUP_ID>-node-<NODE_ID2>-recovery-<TIME2> \
    --group-id <GROUP_ID>
```

* (Optional) Locate the address.csv file after manually exporting the address information from Cobo Custody Web.
  Please paste address.csv under the recovery folder

```
├── cobo-mpc-recovery-tool
└── recovery
    ├── address.csv
    ├── tss-group-<GROUP_ID>-node-<NODE_ID1>-recovery-<TIME1>
    └── tss-group-<GROUP_ID>-node-<NODE_ID2>-recovery-<TIME2>
```

* Execute the recovery command

Adding flag `--csv-file recovery/address.csv` or `--paths` are optional and alternative to recovery command

```
./cobo-mpc-recovery-tool \
    --group-recovery-files recovery/tss-group-<GROUP_ID>-node-<NODE_ID1>-recovery-<TIME1>,recovery/tss-group-<GROUP_ID>-node-<NODE_ID2>-recovery-<TIME2> \
    --group-id <GROUP_ID> \
    --show-root-private-key
```

The MPC root private key and the MPC root extended public key will be reconstructed and shown in logs.

* Once the execution completed, if flag `--csv-file recovery/address.csv` added, all child private keys will be saved
  under the `recovery/address-recovery-<TIME>.csv` file in plain text.
  Please make sure that all data stored securely.

<Tip>Feel free to [share your feedback](https://forms.zohopublic.com/cobo/form/DocumentFeedbackForm/formperma/QvLOhxJv1_JMsJ-1dleZ8Itb_7rzN-LtgvsDdxosoVI) to improve our documentation!</Tip>


