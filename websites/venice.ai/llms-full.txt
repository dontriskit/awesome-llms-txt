# API Spec
Source: https://docs.venice.ai/api-reference/api-spec



## Swagger Configuration

You can find the complete swagger definition for the Venice API here:
[https://api.venice.ai/doc/api/swagger.yaml](https://api.venice.ai/doc/api/swagger.yaml)

***

## OpenAI Compatibility

Venice's text inference API implements the OpenAI API specification, ensuring compatibility with existing OpenAI clients and tools. This document outlines how to integrate with Venice using this familiar interface.

### Base Configuration

#### Required Base URL

All API requests must use Venice's base URL:

```javascript
const BASE_URL = "https://api.venice.ai/api/v1"
```

### Client Setup

Configure your OpenAI client with Venice's base URL:

```javascript
import OpenAI from "openai";

new OpenAI({
  apiKey: "--Your API Key--",
  baseURL: "https://api.venice.ai/api/v1",
});
```

## Available Endpoints

### Models

* **Endpoint**: `/api/v1/models`

* **Documentation**: [Models API Reference](/api-reference/endpoint/models/list)

* **Purpose**: Retrieve available models and their capabilities

### Chat Completions

* **Endpoint**: `/api/v1/chat/completions`

* **Documentation**: [Chat Completions API Reference](/api-reference/endpoint/chat/completions)

* **Purpose**: Generate text responses in a chat-like format

## System Prompts

Venice provides default system prompts designed to ensure uncensored and natural model responses. You have two options for handling system prompts:

1. **Default Behavior**: Your system prompts are appended to Venice's defaults

2. **Custom Behavior**: Disable Venice's system prompts entirely

### Disabling Venice System Prompts

Use the `venice_parameters` option to remove Venice's default system prompts:

```javascript
const completionStream = await openAI.chat.completions.create({
  model: "default",
  messages: [
    {
      role: "system",
      content: "Your system prompt",
    },
    {
      role: "user",
      content: "Why is the sky blue?",
    },
  ],
  // @ts-expect-error Venice.ai paramters are unique to Venice.
  venice_parameters: {
    include_venice_system_prompt: false,
  },
});
```

## Best Practices

1. **Error Handling**: Implement robust error handling for API responses

2. **Rate Limiting**: Be mindful of rate limits during the beta period

3. **System Prompts**: Test both with and without Venice's system prompts to determine the best fit for your use case

4. **API Keys**: Keep your API keys secure and rotate them regularly

## Differences from OpenAI's API

While Venice maintains high compatibility with the OpenAI API specification, there are some Venice-specific features and parameters:

1. **venice\_parameters**: Venice offers additional configurations not available via OpenAI

2. **System Prompts**: Different default behavior for system prompt handling

3. **Model Names**: Venice provides transformation for some common OpenAI model selection to comparable Venice support models, although it is recommended to review the models available on Venice directly ([https://docs.venice.ai/api-reference/endpoint/models/list](https://docs.venice.ai/api-reference/endpoint/models/list))


# Create API Key
Source: https://docs.venice.ai/api-reference/endpoint/api_keys/create

POST /api_keys
Create a new API key.



# Delete API Key
Source: https://docs.venice.ai/api-reference/endpoint/api_keys/delete

DELETE /api_keys
Delete an API key.



# Generate API Key with Web3 Wallet
Source: https://docs.venice.ai/api-reference/endpoint/api_keys/generate_web3_key/get

GET /api_keys/generate_web3_key
Returns the token required to generate an API key via a wallet.

## Autonomous Agent API Key Creation

Please see [this guide](/overview/guides/generating-api-key-agent) on how to use this endpoint.

***


# Generate API Key with Web3 Wallet
Source: https://docs.venice.ai/api-reference/endpoint/api_keys/generate_web3_key/post

POST /api_keys/generate_web3_key
Authenticates a wallet holding sVVV and creates an API key.

## Autonomous Agent API Key Creation

Please see [this guide](/overview/guides/generating-api-key-agent) on how to use this endpoint.

***


# List API Keys
Source: https://docs.venice.ai/api-reference/endpoint/api_keys/list

GET /api_keys
Return a list of API keys.



# Rate Limit Logs
Source: https://docs.venice.ai/api-reference/endpoint/api_keys/rate_limit_logs

GET /api_keys/rate_limits/log
Returns the last 50 rate limits that the account exceeded.

## Experimental Endpoint

<Warning>
  This is an experimental endpoint and may be subject to change.
</Warning>

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-b1bd9f3e-507b-46c5-ad35-be7419ea5ad3?action=share\&creator=38652128\&ctx=documentation\&active-environment=38652128-ef110f4e-d3e1-43b5-8029-4d6877e62041).


# Rate Limits and Balances
Source: https://docs.venice.ai/api-reference/endpoint/api_keys/rate_limits

GET /api_keys/rate_limits
Return details about user balances and rate limits.



# Speech API (Beta)
Source: https://docs.venice.ai/api-reference/endpoint/audio/speech

POST /audio/speech
Converts text to speech using various voice models and formats.



# List Characters
Source: https://docs.venice.ai/api-reference/endpoint/characters/list

GET /characters
This is a preview API and may change. Returns a list of characters supported in the API.

## Experimental Endpoint

<Warning>
  This is an experimental endpoint and may be subject to change.
</Warning>

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-b1bd9f3e-507b-46c5-ad35-be7419ea5ad3?action=share\&creator=38652128\&ctx=documentation\&active-environment=38652128-ef110f4e-d3e1-43b5-8029-4d6877e62041).


# Chat Completions
Source: https://docs.venice.ai/api-reference/endpoint/chat/completions

POST /chat/completions
Run text inference based on the supplied parameters.

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-5a71391b-5dd8-4fe8-80be-197a958907fe?action=share\&creator=38652128\&ctx=documentation\&active-environment=38652128-ef110f4e-d3e1-43b5-8029-4d6877e62041).

***


# Model Feature Suffix
Source: https://docs.venice.ai/api-reference/endpoint/chat/model_feature_suffix



Venice supports additional capabilities within it's models that can be powered by the `venice_parameters` input on the chat completions endpoint.

In certain circumstances, you may be using a client that does not let you modify the request body. For those platforms, you can utilize Venice's Model Feature Suffix offering to pass flags in via the model ID.

### Instructions

You can append any valid `venice_parameter` value to the end of the model ID as follows. These feature suffix should follow the model name with a `:` and you can chain multiple features together:

**To Set Web Search to Auto**

```
default:enable_web_search=auto
```

**To Enable Web Search and Disable System Prompt**

```
default:enable_web_search=on&include_venice_system_prompt=false
```

**To Use a Character**

```
default:character_slug=alan-watts
```

### Postman Example

You can view an example of this feature in our [Postman Collection here](https://www.postman.com/veniceai/workspace/venice-ai-workspace/request/38652128-857f29ff-ee70-4c7c-beba-ef884bdc93be?action=share\&creator=38652128\&ctx=documentation\&active-environment=38652128-ef110f4e-d3e1-43b5-8029-4d6877e62041).


# Generate Images
Source: https://docs.venice.ai/api-reference/endpoint/image/generate

POST /image/generate
Generate an image based on input parameters

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-0adc004d-2edf-4b88-a3bb-0f868c791c9c?action=share\&source=copy-link\&creator=38652128\&ctx=documentation).

***


# Image Styles
Source: https://docs.venice.ai/api-reference/endpoint/image/styles

GET /image/styles
List available image styles that can be used with the generate API.

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-04b32328-197f-4548-b15e-79d4ab0728b1?action=share\&source=copy-link\&creator=38652128\&ctx=documentation).

***


# Upscale Images
Source: https://docs.venice.ai/api-reference/endpoint/image/upscale

POST /image/upscale
Upscale an image based on the supplied parameters.

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-8c268e3a-614f-4e49-9816-e4b8d1597818?action=share\&source=copy-link\&creator=38652128\&ctx=documentation).

***


# Compatibility Mapping
Source: https://docs.venice.ai/api-reference/endpoint/models/compatibility_mapping

GET /models/compatibility_mapping
Returns a list of model compatibility mappings and the associated model.

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-59dfa959-7038-4cd8-b8ba-80cf09f2f026?action=share\&source=copy-link\&creator=38652128\&ctx=documentation).

***


# List Models
Source: https://docs.venice.ai/api-reference/endpoint/models/list

GET /models
Returns a list of available models supported by the Venice.ai API for both text and image inference.

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-59dfa959-7038-4cd8-b8ba-80cf09f2f026?action=share\&source=copy-link\&creator=38652128\&ctx=documentation).

***


# Traits
Source: https://docs.venice.ai/api-reference/endpoint/models/traits

GET /models/traits
Returns a list of model traits and the associated model.

## Postman Collection

For additional examples, please see this [Postman Collection](https://www.postman.com/veniceai/workspace/venice-ai-workspace/folder/38652128-59dfa959-7038-4cd8-b8ba-80cf09f2f026?action=share\&source=copy-link\&creator=38652128\&ctx=documentation).

***


# Error Codes
Source: https://docs.venice.ai/api-reference/error-codes

Predictable error codes for the Venice API

When an error occurs in the API, we return a consistent error response format that includes an error code, HTTP status code, and a descriptive message. This reference lists all possible error codes that you might encounter while using our API, along with their corresponding HTTP status codes and messages.

| Error Code                           | HTTP Status | Message                                                                                                           | Log Level |
| ------------------------------------ | ----------- | ----------------------------------------------------------------------------------------------------------------- | --------- |
| `AUTHENTICATION_FAILED`              | 401         | Authentication failed                                                                                             | -         |
| `AUTHENTICATION_FAILED_INACTIVE_KEY` | 401         | Authentication failed - Pro subscription is inactive. Please upgrade your subscription to continue using the API. | -         |
| `INVALID_API_KEY`                    | 401         | Invalid API key provided                                                                                          | -         |
| `UNAUTHORIZED`                       | 403         | Unauthorized access                                                                                               | -         |
| `INVALID_REQUEST`                    | 400         | Invalid request parameters                                                                                        | -         |
| `INVALID_MODEL`                      | 400         | Invalid model specified                                                                                           | -         |
| `CHARACTER_NOT_FOUND`                | 404         | No character could be found from the provided character\_slug                                                     | -         |
| `INVALID_CONTENT_TYPE`               | 415         | Invalid content type                                                                                              | -         |
| `INVALID_FILE_SIZE`                  | 413         | File size exceeds maximum limit                                                                                   | -         |
| `INVALID_IMAGE_FORMAT`               | 400         | Invalid image format                                                                                              | -         |
| `CORRUPTED_IMAGE`                    | 400         | The image file is corrupted or unreadable                                                                         | -         |
| `RATE_LIMIT_EXCEEDED`                | 429         | Rate limit exceeded                                                                                               | -         |
| `MODEL_NOT_FOUND`                    | 404         | Specified model not found                                                                                         | -         |
| `INFERENCE_FAILED`                   | 500         | Inference processing failed                                                                                       | error     |
| `UPSCALE_FAILED`                     | 500         | Image upscaling failed                                                                                            | error     |
| `UNKNOWN_ERROR`                      | 500         | An unknown error occurred                                                                                         | error     |


# Rate Limits
Source: https://docs.venice.ai/api-reference/rate-limiting

This page describes the request and token rate limits for the Venice API.

The Venice API implements two tiers of rate limits:

**Explorer:** <br />
This is a trial tier designed to allow testing the Venice AI. It is included for PRO users.

**Paid:** <br />
This is a paid tier. Users will be debited VCU first, and when VCU is depleted, will be debited USD. If no balance of either VCU or USD is available, requests will default to explorer tier (if PRO user), or fail (if free user).

These rate limits apply at the user level, regardless of how many keys are created.

## Explorer Tier Rate Limits

These rate limits apply to Pro users who are testing the API with their application. These users can upgrade to paid tier limits by purchasing USD credits or staking VVV to gain VCU.

### Explorer Tier - LLMs

***

| Model                 | Model ID                | Req / Min | Req / Day | Tokens / Min |
| --------------------- | ----------------------- | :-------: | :-------- | :----------: |
| Deepseek Coder V2     | deepseek-coder-v2-lite  |     5     | 100       |    30,000    |
| Deepseek R1 70B       | deepseek-r1-llama-70b   |     5     | 100       |    30,000    |
| Dolphin 72B           | dolphin-2.9.2-qwen2-72b |     5     | 100       |    30,000    |
| Llama 3.2 3B          | llama-3.2-3b            |     5     | 100       |    30,000    |
| Llama 3.3 70B         | llama-3.3-70b           |     5     | 100       |    30,000    |
| Mistral Small 3.1 24B | mistral-31-24b          |     5     | 100       |    30,000    |
| Qwen 2.5 Coder 32B    | qwen-2.5-coder-32b      |     5     | 100       |    30,000    |
| Qwen 2.5 QWQ 32B      | qwen-2.5-qwq-32b        |     5     | 100       |    30,000    |
| Qwen 2.5 VL           | qwen-2.5-vl             |     5     | 100       |    30,000    |
| Llama 3.1 405B        | llama-3.1-405b          |     2     | 40        |    30,000    |
| Deepseek R1 671B      | deepseek-r1-671b        |     1     | 20        |    30,000    |

### Explorer Tier - Image Models

***

| Model            | Model ID | Req / Min | Req / Day |
| ---------------- | -------- | :-------: | :-------: |
| All Image Models | All      |     1     |     20    |

### Explorer Tier - Audio Models

***

| Model            | Model ID | Req / Min | Req / Day |
| ---------------- | -------- | :-------: | :-------: |
| All Audio Models | All      |     5     |    100    |

## Paid Tier Rate Limits

These rate limits apply to users who have purchased USD credits or staked VVV to gain VCU.

<Note>We will continue to monitor usage. As we add compute capacity to the network, we will review these limits. If you are consistently hitting rate limits, please contact [**support@venice.ai**](mailto:support@venice.ai) or post in the #API channel in Discord for support.</Note>

### Paid Tier - LLMs

***

| Model                 | Model ID                | Req / Min | Req / Day | Tokens / Min |
| --------------------- | ----------------------- | :-------: | :-------- | :----------: |
| Llama 3.2 3B          | llama-3.2-3b            |    500    | 288,000   |   1,000,000  |
| Deepseek Coder V2     | deepseek-coder-v2-lite  |     75    | 54,000    |    750,000   |
| Qwen 2.5 Coder 32B    | qwen-2.5-coder-32b      |     75    | 54,000    |    750,000   |
| Qwen 2.5 QWQ 32B      | qwen-2.5-qwq-32b        |     75    | 54,000    |    750,000   |
| Dolphin 72B           | dolphin-2.9.2-qwen2-72b |     50    | 36,000    |    500,000   |
| Llama 3.3 70B         | llama-3.3-70b           |     50    | 36,000    |    500,000   |
| Mistral Small 3.1 24B | mistral-31-24b          |     50    | 36,000    |    500,000   |
| Qwen 2.5 VL 72B       | qwen-2.5-vl             |     50    | 36,000    |    300,000   |
| Llama 3.1 405B        | llama-3.1-405b          |     20    | 15,000    |    300,000   |
| Deepseek R1 671B      | deepseek-r1-671b        |     15    | 10,000    |    200,000   |

### Paid Tier - Image Models

***

| Model      | Model ID                       | Req / Min | Req / Day |
| ---------- | ------------------------------ | --------- | :-------- |
| Flux       | flux-dev / flux-dev-uncensored | 20        | 14,400    |
| All others | All                            | 20        | 28,800    |

### Paid Tier - Audio Models

***

| Model            | Model ID | Req / Min | Req / Day |
| ---------------- | -------- | :-------: | :-------: |
| All Audio Models | All      |     60    |   86,400  |

## Rate Limit and Consumption Headers

You can monitor your API utilization and remaining requests by evaluating the following headers:

<div style={{ overflowX: 'auto' }}>
  | Header                                                                       | Description                                                                             |
  | ---------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |
  | <div style={{whiteSpace: 'nowrap'}}>**x-ratelimit-limit-requests**</div>     | The number of requests you've made in the current evaluation period.                    |
  | <div style={{whiteSpace: 'nowrap'}}>**x-ratelimit-remaining-requests**</div> | The remaining requests you can make in the current evaluation period.                   |
  | <div style={{whiteSpace: 'nowrap'}}>**x-ratelimit-reset-requests**</div>     | The unix time stamp when the rate limit will reset.                                     |
  | <div style={{whiteSpace: 'nowrap'}}>**x-ratelimit-limit-tokens**</div>       | The number of total (prompt + completion) tokens used within a 1 minute sliding window. |
  | <div style={{whiteSpace: 'nowrap'}}>**x-ratelimit-remaining-tokens**</div>   | The remaining number of total tokens that can be used during the evaluation period.     |
  | <div style={{whiteSpace: 'nowrap'}}>**x-ratelimit-reset-tokens**</div>       | The duration of time in seconds until the token rate limit resets.                      |
  | <div style={{whiteSpace: 'nowrap'}}>**x-venice-balance-vcu**</div>           | The user's VCU balance before the request has been processed.                           |
  | <div style={{whiteSpace: 'nowrap'}}>**x-venice-balance-usd**</div>           | The user's USD balance before the request has been processed.                           |
</div>


# About Venice
Source: https://docs.venice.ai/overview/about-venice



Welcome to Venice.ai's API documentation! Our API enables you to harness the power of advanced AI models for text and image generation while maintaining the highest standards of privacy and performance.

<Warning>
  Venice's API is rapidly evolving. Please help us improve our offering by providing feedback. Join our [Discord](https://discord.gg/askvenice) to interact with our community or request new featues.

  * Features and endpoints may evolve

  * Model availability may change

  * Your feedback shapes our development. We take your feedback seriously and work quickly to ensure we are providing you with the best possible product.
</Warning>

## Venice's Values

* **Privacy-First Architecture**: Built from the ground up with user privacy as a core principle. Venice does not utilize or store user data for any purposes whatsoever.

* **Open-Source**: Venice only utilizes open-source models to ensure users have full transparency into the models they are interacting with.

* **OpenAI API Compatible**: Seamless integration with existing OpenAI clients using the Venice API base URL.

## What Can I do with Venice API?

* **Chat**: Prompt any of the supported models directly for simple chat applications with custom parameters and configurations. Use default settings, or customize as deeply as you prefer.

* **Generate Images**: Use the image models to generate new images from a simple prompt, or modify images with "inpainting".

* **Assist with Coding**: Prompt models for coding related outputs or integrate the Venice API into your preferred IDE or Visual Studio Code plugin.

* **Transcribe Audio (BETA)**: Use Venice's new Voice models to transcribe text into Voice using your preferred "speaker".

* **Analyze Documents**: Send images or PDF documents for interpretation, analysis or summarization.

* **Interact with Characters**: Chat with your favorite Venice characters through the API.

* **Anything you can imagine**: The Venice API has no bounds. Tie the API into your preferred integration using the API base URL and build anything you can imagine and code.

## Accessing the API

Venice users can access the API in 3 ways:

1. **Pro Account:** Users with a PRO account will gain access to the Venice API within the “Explorer Tier”. This tier has lower rate-limits, and is intended for simple interaction with the API.

2. **VCUs:** With Venice’s [launch of the VVV token](https://venice.ai/blog/introducing-the-venice-token-vvv), users who stake tokens within the Venice protocol gain access to a daily AI inference allocation (as well as ongoing staking yield). When staking, users receive VCUs, which represent a portion of the overall Venice compute capacity. You can stake VVV tokens and [see your VCU allocation here](https://venice.ai/token). Users with positive VCU balance are entitled to “Paid Tier” rate limits.

3. **USD:** Users can also opt to deposit USD into their account to pay for API inference the same way that they would on other platforms, like OpenAI or Anthropic. Users with positive USD balance are entitled to “Paid Tier” rate limits.

## API settings

Venice recognizes that users may be integrating with various applications and require API key separation and usage limitation. Venice now offers the following settings for API Keys:

1. **Administrator Settings**: Users can create new API keys directly through the API, reducing the need for UI interactions.

2. **Expiration Time**: Users can set a date for API keys expiration.

3. **Usage Limits**: Users can set daily VCU or USD limits per API key.

## Resources

<CardGroup cols={2}>
  <Card title="Our Privacy Commitment" href="/overview/privacy" icon="shield-halved">
    Learn more about how our API handles your data and privacy.
  </Card>

  <Card title="Pricing" href="/overview/pricing" icon="dollar-sign">
    Learn more about our pricing.
  </Card>

  <Card title="Rate Limits & Usage" href="/api-reference/rate-limiting" icon="stopwatch">
    Learn more about how our API handles rate limits and usage.
  </Card>

  <Card title="API Reference" href="/api-reference" icon="rectangle-code">
    Explore our API reference.
  </Card>
</CardGroup>

## Start Building

<Card horizontal title="Getting Started" href="/overview/getting-started" icon="rocket">
  Ready to begin? Head to our Getting Started Guide for a step-by-step walk-through of making your first API call.
</Card>

These docs are open source and can be contributed to on [Github](https://github.com/veniceai/api-docs) by submitting a pull request. Here is a simple reference guide for ["How to use Venice API"](https://venice.ai/blog/how-to-use-venice-api)


# Quickstart
Source: https://docs.venice.ai/overview/getting-started



## Step-by-step guide

To get started with Venice quickly, you'll need to:

<Steps>
  <Step title="Generate an API Key">
    Navigate to your user settings within your [Venice API Settings](https://venice.ai/settings/api) and generate a new API key.

    For a more detailed guide, check out the [API Key](/overview/guides/generating-api-key) page.
  </Step>

  <Step title="Choose a model">
    Go to the ["List Models"](https://docs.venice.ai/api-reference/endpoint/models/list) API reference page and enter your API key to output a list of all models, or use the following command in a terminal

    <CodeGroup>
      ```bash Curl
      # Open a terminal, replace <your-api-key> with your actual API key, and run the following command
      curl --request GET \
        --url https://api.venice.ai/api/v1/models \
        --header 'Authorization: Bearer <your-api-key>'
      ```

      ```go Go
      package main

      import (
      "fmt"
      "net/http"
      "io"
      )

      func main() {

      url := "https://api.venice.ai/api/v1/models"
      method := "GET"

      client := &http.Client {}
      req, err := http.NewRequest(method, url, nil)

      if err != nil {
      fmt.Println(err)
      return
      }
      req.Header.Add("Authorization", "Bearer <your-api-key>")

      res, err := client.Do(req)
      if err != nil {
      fmt.Println(err)
      return
      }
      defer res.Body.Close()

      body, err := io.ReadAll(res.Body)
      if err != nil {
      fmt.Println(err)
      return
      }
      fmt.Println(string(body))
      }
      ```

      ```python Python
      import http.client

      conn = http.client.HTTPSConnection("api.venice.ai")
      payload = ''
      headers = {
        'Authorization': 'Bearer <your-api-key>'
      }
      conn.request("GET", "/api/v1/models", payload, headers)
      res = conn.getresponse()
      data = res.read()
      print(data.decode("utf-8"))
      ```

      ```js Javascript
      /**
      * Keep in mind that you will likely run into CORS issues when making requests from the browser.
      * You can get around this by using a proxy service like 
      * https://corsproxy.io/
      *
      * If you're looking for a React/NextJS example, check out: 
      * https://codesandbox.io/p/devbox/adoring-cori-6skflx
      **/
      const myHeaders = new Headers();
      myHeaders.append("Authorization", "Bearer <your-api-key>");

      const requestOptions = {
      method: "GET",
      headers: myHeaders,
      redirect: "follow"
      };

      fetch("https://api.venice.ai/api/v1/models", requestOptions)
      .then((response) => response.text())
      .then((result) => console.log(result))
      .catch((error) => console.error(error));
      ```
    </CodeGroup>
  </Step>

  <Step title="Text Prompt">
    Go to the ["Chat Completions"](https://docs.venice.ai/api-reference/endpoint/chat/completions) API reference page and enter your API key as well as text prompt configuration options, or modify the command below in a terminal

    <CodeGroup>
      ```bash Curl
      # Open a terminal, replace <your-api-key> with your actual API key, edit the information to your needs and run the following command
      curl --request POST \
      --url https://api.venice.ai/api/v1/chat/completions \
      --header 'Authorization: Bearer <your-api-key>' \
      --header 'Content-Type: application/json' \
      --data '{
       "model": "llama-3.3-70b",
       "messages": [
        {
         "role": "system",
         "content": "You are a helpful assistant"
        },
        {
         "role": "user",
         "content": "Tell me about AI"
        }
       ],
       "venice_parameters": {
        "enable_web_search": "on",
        "include_venice_system_prompt": true
       },
       "frequency_penalty": 0,
       "presence_penalty": 0,
       "max_tokens": 1000,
       "max_completion_tokens": 998,
       "temperature": 1,
       "top_p": 0.1,
       "stream": false
      }'
      ```
    </CodeGroup>
  </Step>

  <Step title="Image Generation">
    Go to the ["Generate Images"](https://docs.venice.ai/api-reference/endpoint/image/generate) API reference page and enter your API key as well as image prompt configuration options, or modify the command below in a terminal

    <CodeGroup>
      ```bash Curl
      # Open a terminal, replace <your-api-key> with your actual API key, edit the information to your needs and run the following command
      curl --request POST \
      --url https://api.venice.ai/api/v1/image/generate \
      --header 'Authorization: Bearer <your-api-key>' \
      --header 'Content-Type: application/json' \
      --data '{
      "model": "fluently-xl",
      "prompt": "A beautiful sunset over a mountain range",
      "negative_prompt": "Clouds, Rain, Snow",
      "style_preset": "3D Model",
      "height": 1024,
      "width": 1024,
      "steps": 30,
      "cfg_scale": 7.5,
      "seed": 123456789,
      "lora_strength": 50,
      "safe_mode": false,
      "return_binary": false,
      "hide_watermark": false
      }'
      ```
    </CodeGroup>
  </Step>
</Steps>

<Resources />


# AI Agents
Source: https://docs.venice.ai/overview/guides/ai-agents

Venice is supported with the following AI Agent communities.

* [Coinbase Agentkit](https://www.coinbase.com/developer-platform/discover/launches/introducing-agentkit)

* [Eliza](https://github.com/ai16z/eliza) - Venice support introduced via this [PR](https://github.com/ai16z/eliza/pull/1008).

## Eliza Instructions

To setup Eliza with Venice, follow these instructions. A full blog post with more detail can be found [here](https://venice.ai/blog/how-to-build-a-social-media-ai-agent-with-elizaos-venice-api).

* Clone the Eliza repository:

```bash
# Clone the repository
git clone https://github.com/ai16z/eliza.git
```

* Copy `.env.example` to `.env`

* Update `.env` specifying your `VENICE_API_KEY`, and model selections for  `SMALL_VENICE_MODEL`, `MEDIUM_VENICE_MODEL`, `LARGE_VENICE_MODEL`, `IMAGE_VENICE_MODEL`, instructions on generating your key can be found [here](/overview/guides/generating-api-key).

* Create a new character in the `/characters/` folder with a filename similar to  `your_character.character.json`to specify the character profile, tools/functions, and Venice.ai as the model provider:

```typescript
   modelProvider: "venice"
```

* Build the repo:

```bash
pnpm i
pnpm build
pnpm start
```

* Start your character

```bash
pnpm start --characters="characters/<your_character>.character.json"
```

* Start the local UI to chat with the agent

![](https://mintlify.s3.us-west-1.amazonaws.com/veniceai/images/eliza-config.png)


# Generating an API Key
Source: https://docs.venice.ai/overview/guides/generating-api-key



Venice's API is protected via API keys. To begin using the Venice API, you'll first need to generate a new key. Follow these steps to get started.

<Steps>
  <Step title="Visit the API Settings Page">
    To get to the API settings page, by visiting [https://venice.ai/settings/api](https://venice.ai/settings/api). This page is accessible by clicking "API" in the left hand toolbar, or by clicking “API” within your user settings.

    Within this dashboard, you're able to view your VCU and USD balances, your API Tier, your API Usage, and your API Keys.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/veniceai/images/guides/API-VCU-Overview.png" alt="API VCU Overview" />
    </Frame>
  </Step>

  <Step title="Click Generate New API Key">
    Scroll down the dashboard and select "Generate New API Key". You'll be presented with a list of options.

    * **Description:** This is used to name your API key

    * **API Key Type:**

      * “Admin” keys have the ability to delete or generate additional API keys programmatically.

      * “Inference Only” keys are only permitted to run inference.

    * **Expires at:** You can choose to set an expiration date for the API key after which it will cease to function. By default, a date will not be set, and the key will work in perpetuity.

    * **Epoch Consumption Limits:** This allows you to create limits for API usage from the individual API key. You can choose to limit the VCUs or USD amount allowable within a given epoch (24hrs).

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/veniceai/images/guides/Generate-New-API-Key.png" alt="Generate New API Key" />
    </Frame>
  </Step>

  <Step title="Generate the key">
    Clicking Generate will show you the API key.

    <Warning>
      **Important:** This key is only shown once. Make sure to copy it and store it in a safe place. If you loose it, you'll need to delete it and create a new one.
    </Warning>

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/veniceai/images/guides/Your-API-Key.png" alt="Your API Key" />
    </Frame>
  </Step>
</Steps>


# Autonomous Agent API Key Creation
Source: https://docs.venice.ai/overview/guides/generating-api-key-agent



Autonomous AI Agents can programmatically access Venice.ai's APIs without any human interaction using the "api\_keys" endpoint. AI Agents are now able to manage their own wallets on the BASE blockchain, allowing them to programmatically acquire and stake VVV token to earn a daily VCU inference allocation. Venice's new API endpoint allows them to automate further by generating their own API key.&#x20;

To autonomously generate an API key within an agent, you must:

<Steps>
  <Step title="Acquire VVV">
    The agent will need VVV token to complete this process. This can be achieved by sending tokens directly to the agent wallet, or having the agent swap on a Decentralized Exchange (DEX), like [Aerodrome](https://aerodrome.finance/swap?from=eth\&to=0xacfe6019ed1a7dc6f7b508c02d1b04ec88cc21bf\&chain0=8453\&chain1=8453) or [Uniswap](https://app.uniswap.org/swap?chain=base\&inputCurrency=NATIVE\&outputCurrency=0xacfe6019ed1a7dc6f7b508c02d1b04ec88cc21bf).
  </Step>

  <Step title="Stake VVV with Venice">
    Once funded, the agent will need to stake the VVV tokens within the [Venice Staking Smart Contract](https://basescan.org/address/0x321b7ff75154472b18edb199033ff4d116f340ff#code). To accomplish this you first must approve VVV tokens for staking, then execute a "stake" transaction.&#x20;

    <Frame as="div">
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/veniceai/images/guides/SC-Stake.png" alt="Smart Contract Staking" />
    </Frame>

    When the transaction is complete, you will see the VVV tokens exit the wallet and sVVV tokens returned to your wallet. This indicates a successful stake.&#x20;
  </Step>

  <Step title="Obtain Validation Token">
    To generate an API key, you need to first obtain your validation token. You can get this by calling this [API endpoint ](https://docs.venice.ai/api-reference/endpoint/api_keys/generate_web3_key/get)`https://api.venice.ai/api/v1/api_keys/generate_web3_key` . The API response will provide you with a "token".&#x20;

    Here is an example request:

    ```
    curl --request GET \
      --url https://api.venice.ai/api/v1/api_keys/generate_web3_key
    ```
  </Step>

  <Step title="Sign for Wallet Validation">
    Sign the token with the wallet holding VVV to complete the association between the wallet and token.&#x20;
  </Step>

  <Step title="Generate API Key">
    Now you can call this same [API endpoint](https://docs.venice.ai/api-reference/endpoint/api_keys/generate_web3_key/get) `https://api.venice.ai/api/v1/api_keys/generate_web3_key` to create your API key.&#x20;

    You will need the following information to proceed, which is described further within the "[Generating API Key Guide](https://docs.venice.ai/overview/guides/generating-api-key)":

    * API Key Type: Inference or Admin

    * ConsumptionLimit: To be used if you want to limit the API key usage

    * Signature: The signed token from step 4

    * Token: The unsigned token from step 3

    * Address: The agent's wallet address

    * Description: String to describe your API Key

    * ExpiresAt: Option to set an expiration date for the API key (empty for no expiration)

    Here is an example request:

    ```
    curl --request POST \
      --url https://api.venice.ai/api/v1/api_keys/generate_web3_key \
      --header 'Authorization: Bearer ' \
      --header 'Content-Type: application/json' \
      --data '{
      "description": "Web3 API Key",
      "apiKeyType": "INFERENCE",
      "signature": "<signed token>",
      "token": "<unsigned token>",
      "address": "<wallet address>",
      "consumptionLimit": {
        "vcu": 1
      }
    }'
    ```
  </Step>
</Steps>

Example code to interact with this API can be found below:

```
import { ethers } from "ethers";

// NOTE: This is an example. To successfully generate a key, your address must be holding
// and staking VVV.
const wallet = ethers.Wallet.createRandom()
const address = wallet.address
console.log("Created address:", address)

// Request a JWT from Venice's API
const response = await fetch('https://api.venice.ai/api/v1/api_keys/generate_web3_key')
const token = (await response.json()).data.token
console.log("Validation Token:", token)

// Sign the token with your wallet and pass that back to the API to generate an API key
const signature = await wallet.signMessage(token)
const postResponse = await fetch('https://api.venice.ai/api/v1/api_keys/generate_web3_key', {
  method: 'POST',
  body: JSON.stringify({
    address,
    signature,
    token,
    apiKeyType: 'ADMIN'
  })
})

await postResponse.json()
```


# Integrations
Source: https://docs.venice.ai/overview/guides/integrations

Here is a list of third party tools with Venice.ai integrations.

[How to use Venice API](https://venice.ai/blog/how-to-use-venice-api) reference guide.

## Venice Confirmed Integrations

* Agents

  * [ElizaOS](https://venice.ai/blog/how-to-build-a-social-media-ai-agent-with-elizaos-venice-api) (local build)

  * [ElizaOS](https://venice.ai/blog/how-to-launch-an-elizaos-agent-on-akash-using-venice-api-in-less-than-10-minutes) (via [Akash Template](https://console.akash.network/templates/akash-network-awesome-akash-Venice-ElizaOS))

* Coding

  * [Cursor IDE](https://venice.ai/blog/how-to-code-privately-in-cursor-with-venice-api-a-quick-guide)

  * [Cline](https://venice.ai/blog/how-to-use-the-venice-api-with-cline-in-vscode-a-developers-guide) (VSC Extension)

  * [ROO Code ](https://venice.ai/blog/how-to-use-the-roo-ai-coding-assistant-in-private-with-venice-api-a-quick-guide)(VSC Extension)

  * [VOID IDE](https://venice.ai/blog/how-to-use-open-source-ai-code-editor-void-in-private-with-venice-api)&#x20;

* Assistants

  * [Brave Leo Browser ](https://venice.ai/blog/how-to-use-brave-leo-ai-with-venice-api-a-privacy-first-browser-ai-assistant)

## Community Confirmed&#x20;

These integrations have been confirmed by the community. Venice is in the process of confirming these integrations and creating how-to guides for each of the following:

* Agents/Bots

  * [Coinbase Agentkit](https://www.coinbase.com/developer-platform/discover/launches/introducing-agentkit)

  * [Eliza\_Starter](https://github.com/Baidis/eliza-Venice) Simplified Eliza setup.

  * [Venice AI Discord Bot](https://bobbiebeach.space/blog/venice-ai-discord-bot-full-setup-guide-features/)

  * [JanitorAI](https://janitorai.com/)

* Coding

  * [Aider](https://github.com/Aider-AI/aider), AI pair programming in your terminal

  * [Alexcodes.app](https://alexcodes.app/)

* Assistants

  * [Jan - Local AI Assistant](https://github.com/janhq/jan)

  * [llm-venice](https://github.com/ar-jan/llm-venice)

  * [unOfficial PHP SDK for Venice](https://github.com/georgeglarson/venice-ai-php)

  * [Msty](https://msty.app)

  * [Open WebUI](https://github.com/open-webui/open-webui)

  * [Librechat](https://www.librechat.ai/)

  * [ScreenSnapAI](https://screensnap.ai/)

## Venice API Raw Data

Many users have requested access to Venice API docs and data in a format acceptable for use with RAG (Retrieval-Augmented Generation) for various purposes. The full API specification is available within the "API Swagger" document below, in yaml format. The Venice API documents included throughout this API Reference webpage are available from the link below, with most documents in .mdx format.

[API Swagger](https://api.venice.ai/doc/api/swagger.yaml)

[API Docs](https://github.com/veniceai/api-docs/archive/refs/heads/main.zip)


# Using Postman
Source: https://docs.venice.ai/overview/guides/postman



## Overview

Venice provides a comprehensive Postman collection that allows developers to explore and test the full capabilities of our API. This collection includes pre-configured requests, examples, and environment variables to help you get started quickly with Venice's AI services.

## Accessing the Collection

Our official Postman collection is available in the Venice AI Workspace:

* [Venice AI Postman Workspace](https://www.postman.com/veniceai/workspace/venice-ai-workspace)
* [Venice AI Postman Examples](https://postman.venice.ai/)

## Collection Features

* **Ready-to-Use Requests**: Pre-configured API calls for all Venice endpoints
* **Environment Templates**: Properly structured environment variables
* **Request Examples**: Real-world usage examples for each endpoint
* **Response Samples**: Example responses to help you understand the API's output
* **Documentation**: Inline documentation for each request

## Getting Started

<Steps>
  <Step title="Fork the Collection">
    * Navigate to the Venice AI Workspace
    * Click "Fork" to create your own copy of the collection
    * Choose your workspace destination
  </Step>

  <Step title="Set Up Your Environment">
    * Create a new environment in Postman
    * Add your Venice API key
    * Configure the base URL: `https://api.venice.ai/api/v1`
  </Step>

  <Step title="Make Your First Request">
    * Select any request from the collection
    * Ensure your environment is selected
    * Click "Send" to test the API
  </Step>
</Steps>

## Available Endpoints

The collection includes examples for all Venice API endpoints:

* Text Generation
* Image Generation
* Model Information
* Image Upscaling
* System Prompt Configuration

## Best Practices

* Keep your API key secure and never share it
* Use environment variables for sensitive information
* Test responses in the Postman console before implementation
* Review the example responses for expected data structures

<Note>*Note: The Postman collection is regularly updated to reflect the latest API changes and features.*</Note>


# Structured Responses
Source: https://docs.venice.ai/overview/guides/structured-responses

Using structured responses within the Venice API

Venice has now included structured outputs via “response\_format” as an available field in the API. This field enables you to generate responses to your prompts that follow a specific pre-defined format. With this new method, the models are less likely to hallucinate incorrect keys or values within the response, which was more prevalent when attempting through system prompt manipulation or via function calling.

The structured output “response\_format” field utilizes the OpenAI API format, and is further described in the openAI guide [here](https://platform.openai.com/docs/guides/structured-outputs). OpenAI also released an introduction article to using stuctured outputs within the API specifically [here](https://openai.com/index/introducing-structured-outputs-in-the-api/). As this is advanced functionality, there are a handful of “gotchas” on the bottom of this page that should be followed.

This functionality is not natively available for all models. Please refer to the models section [here](https://docs.venice.ai/api-reference/endpoint/models/list?playground=open), and look for “supportsResponseSchema” for applicable models.

```json
    {
      "id": "dolphin-2.9.2-qwen2-72b",
      "type": "text",
      "object": "model",
      "created": 1726869022,
      "owned_by": "venice.ai",
      "model_spec": {
        "availableContextTokens": 32768,
        "capabilities": {
          "supportsFunctionCalling": true,
          "supportsResponseSchema": true,
          "supportsWebSearch": true
        },
```

### How to use Structured Responses

To properly use the “response\_format” you can define your schema with various “properties”, representing categories of outputs, each with individually configured data types. These objects can be nested to create more advanced structures of outputs.

Here is an example of an API call using response\_format to explain the step-by-step process of solving a math equation.

You can see that the properties were configured to require both “steps” and “final\_answer” within the response. Within nesting, the steps category consists of both an “explanation” and an “output”, each as strings.

```json
curl --request POST \
  --url https://api.venice.ai/api/v1/chat/completions \
  --header 'Authorization: Bearer <api-key>' \
  --header 'Content-Type: application/json' \
  --data '{
  "model": "dolphin-2.9.2-qwen2-72b",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful math tutor."
    },
    {
      "role": "user",
      "content": "solve 8x + 31 = 2"
    }
  ],
  "response_format": {
    "type": "json_schema",
    "json_schema": {
      "name": "math_response",
      "strict": true,
      "schema": {
        "type": "object",
        "properties": {
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "explanation": {
                  "type": "string"
                },
                "output": {
                  "type": "string"
                }
              },
              "required": ["explanation", "output"],
              "additionalProperties": false
            }
          },
          "final_answer": {
            "type": "string"
          }
        },
        "required": ["steps", "final_answer"],
        "additionalProperties": false
      }
    }
  }
}

```

Here is the response that was received from the model. You can see that the structure followed the requirements by first providing the “steps” with the “explanation” and “output” of each step, and then the “final answer”.

```json
{
  "steps": [
    {
      "explanation": "Subtract 31 from both sides to isolate the term with x.",
      "output": "8x + 31 - 31 = 2 - 31"
    },
    {
      "explanation": "This simplifies to 8x = -29.",
      "output": "8x = -29"
    },
    {
      "explanation": "Divide both sides by 8 to solve for x.",
      "output": "x = -29 / 8"
    }
  ],
  "final_answer": "x = -29 / 8"
}

```

Although this is a simple example, this can be extrapolated into more advanced use cases like: Data Extraction, Chain of Thought Exercises, UI Generation, Data Categorization and many others.

### Gotchas

Here are some key requirements to keep in mind when using Structured Outputs via response\_format:

* Initial requests using response\_format may take longer to generate a response. Subsequent requests will not experience the same latency as the initial request.

* For larger queries, the model can fail to complete if either `max_tokens` or model timeout are reached, or if any rate limits are violated

* Incorrect schema format will result in errors on completion, usually due to timeout

* Although response\_format ensures the model will output a particular way, it does not guarantee that the model provided the correct information within. The content is driven by the prompt and the model performance.

* Structured Outputs via response\_format are not compatible with parallel function calls

* Important: All fields or parameters must include a `required` tag. To make a field optional, you need to add a `null` option within the `type`of the field, like this `"type": ["string", "null"]`&#x20;

* It is possible to make fields optional by giving a `null` options within the required field to allow an empty response.

* Important: `additionalProperties` must be set to false for response\_format to work properly

* Important: `strict` must be set to true for response\_format to work properly


# API Pricing
Source: https://docs.venice.ai/overview/pricing



### Explorer Tier

Venice is pleased to offer trial API access to our Pro users free of charge with [constrained rate limits](/api-reference/rate-limiting#explorer-tier-rate-limits), to support exploration of our services and testing of our API with their application.

### Paid Tier

Paid access to the Venice API can be obtained in two ways:

<Steps>
  <Step title="Purchased API Credits">
    Users can purchase API credits via the [API Dashboard](https://venice.ai/settings/api).
  </Step>

  <Step title="Stake VVV">
    Users can [stake VVV](https://venice.ai/blog/how-to-stake-and-claim-your-venice-tokens-vvv) which in return, provides you proportional access to
    Venice's compute pool in "Venice Compute Units" or VCUs. The more you stake, the higher your VCU allocation, and they renew daily. You also earn
    staking rewards while staked. Visit the [Token Dashboard](https://venice.ai/token) to stake VVV and to see how much VCU you control.
  </Step>
</Steps>

## Model Pricing

### Chat Models

Chat models are priced per million tokens, with separate pricing for input and output tokens. While the price is per million tokens, you will only be charged for the tokens you use.
You can estimate the token count of a chat request using [this calculator](https://quizgecko.com/tools/token-counter).

| Model                                                                                                                | Input Tokens (per M.) | Input Tokens (per M.) | Output Tokens (per M.) | Output Tokens (per M.) |
| -------------------------------------------------------------------------------------------------------------------- | :-------------------: | :-------------------: | :--------------------: | :--------------------: |
| <div style={{whiteSpace: 'nowrap'}}>Llama 3.2 3B</div>                                                               |        1.5 VCU        |         \$0.15        |          6 VCU         |         \$0.60         |
| <div style={{whiteSpace: 'nowrap'}}>Qwen 2.5 Coder 32B<br />Qwen 2.5 QWQ 32B<br />Mistral Small 3.1 24B</div>        |         5 VCU         |         \$0.50        |         20 VCU         |         \$2.00         |
| <div style={{whiteSpace: 'nowrap'}}>Llama 3.3 70B<br />Dolphin 72B <br />Deepseek R1 70B<br /> Qwen 2.5 VL 72B</div> |         7 VCU         |         \$0.70        |         28 VCU         |         \$2.80         |
| <div style={{whiteSpace: 'nowrap'}}> Llama 3.1 405B</div>                                                            |         15 VCU        |         \$1.50        |         60 VCU         |         \$6.00         |
| <div style={{whiteSpace: 'nowrap'}}>DeepSeek R1 671B</div>                                                           |         35 VCU        |         \$3.50        |         140 VCU        |         \$14.00        |

### Image Models

All Venice Image models are currently priced at the following rates:

| Model | One 1024x1024 Image | One 1024x1024 Image |
| ----- | :-----------------: | :-----------------: |
| All   |       0.1 VCU       |      \$0.01 USD     |

### Audio Models

All Venice Audio models are currently priced at the following rates:

| Model | Input Characters (per M.) | Input Characters (per M.) |
| ----- | :-----------------------: | :-----------------------: |
| All   |           35 VCU          |         \$3.50 USD        |


# Privacy
Source: https://docs.venice.ai/overview/privacy



Nearly all AI apps and services collect user data (personal information, prompt text, and AI text and image responses) in central servers, which they can access, and which they can (and do) share with third parties, ranging from ad networks to governments. Even if a company wants to keep this data safe, data breaches happen [all the time](https://www.wired.com/story/wired-guide-to-data-breaches/), often unreported.

> The only way to achieve reasonable user privacy is to avoid collecting this information in the first place. This is harder to do from an engineering perspective, but we believe it’s the correct approach.

### Privacy as a principle

One of Venice’s guiding principles is user privacy. The platform's architecture flows from this philosophical principle, and every component is designed with this objective in mind.

#### Architecture

The Venice API replicates the same technical architecture as the Venice platform from a backend perspective.

**Venice does not store or log any prompt or model responses on our servers.** API calls are forwarded directly to GPUs running across a collection of decentralized providers over encrypted HTTPS paths.

![Venice AI Privacy Architecture](https://mintlify.s3.us-west-1.amazonaws.com/veniceai/images/privacy-architecture.png "Venice AI Privacy Architecture")


