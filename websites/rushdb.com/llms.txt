# RushDB

## Docs

- [Data Types](https://docs.rushdb.com/advanced/data-types): RushDB supports a wide range of data types to accommodate diverse data needs and provide a flexible environment for your applications. Below is a comprehensive list of the supported data types along with their descriptions:
- [Enhanced TypeScript](https://docs.rushdb.com/advanced/enhanced-typescript): When working with RushDB SDK, achieving perfect TypeScript contracts ensures a seamless development experience. TypeScript's strong typing system allows for precise autocomplete suggestions and error checking, particularly when dealing with complex queries and nested models. This section will guide you on how to enhance TypeScript support by defining comprehensive type definitions for your models.
- [Properties](https://docs.rushdb.com/advanced/properties): The fundamental unit of meaningful data in RushDB is known as a Property. Despite its apparent simplicity and
- [Querying Data](https://docs.rushdb.com/advanced/querying-data): In previous sections, you have encountered the where condition and various logical operators like $and and $xor. This section provides a comprehensive guide on querying data using the SearchQuery type, covering all available logical and comparison operators.
- [Records](https://docs.rushdb.com/advanced/records): If you're seeking documentation for the Records API, you can find it by following the link to Records API.
- [Relationships](https://docs.rushdb.com/advanced/relationships): In the realm of real-world data and a human-centric mindset, there may arise a need to store nested data within Records.
- [Aggregations](https://docs.rushdb.com/advanced/search-aggregation): In addition to the classic search by specified criteria, RushDB provides data aggregation capabilities. You can return complex nested structures when searching for data, and add new fields to the search result on the fly.
- [Properties](https://docs.rushdb.com/basic-concepts/properties): In RushDB, you can store meaningful data using Properties. Properties are fundamental data units, representing individual pieces of information as key-value pairs.
- [Records](https://docs.rushdb.com/basic-concepts/records): In RushDB, you have the capability to store meaningful data within Records. These Records consist of individual data
- [Relations](https://docs.rushdb.com/basic-concepts/relations): Relations in RushDB allow you to create links between records, simplifying the modeling of complex data interactions and enhancing relationships between different Records in your application.
- [Transactions](https://docs.rushdb.com/basic-concepts/transactions): Transactions in RushDB allow you to execute multiple operations in a way that either all succeed or none are applied, ensuring data integrity.
- [Introduction](https://docs.rushdb.com/index): RushDB Logo
- [PropertiesAPI](https://docs.rushdb.com/python-sdk/properties-api): The PropertiesAPI class provides methods for managing and querying properties in RushDB.
- [Record](https://docs.rushdb.com/python-sdk/record): The Record class represents a record in RushDB and provides methods for manipulating individual records, including updates, relationships, and deletions.
- [RecordsAPI](https://docs.rushdb.com/python-sdk/records-api): The RecordsAPI class provides methods for managing records in RushDB. It handles record creation, updates, deletion, searching, and relationship management.
- [Get API Token](https://docs.rushdb.com/quick-start/configuring-dashboard): In this section, we'll walk through the process of registering for RushDB and generating an API token necessary for using the RushDB SDK. This token is essential for authenticating your application's requests to the RushDB backend.
- [Create & Fetch Records](https://docs.rushdb.com/quick-start/creating-and-retrieving-records): In this section, we'll learn how to use the RushDB SDK to create and retrieve simple data records. This guide assumes you have already initialized the SDK and obtained an API token as described in the previous sections. Here, we'll focus on utilizing the SDK to interact with your data, demonstrating how to define a data model, create a record, and then fetch it back.
- [Installation](https://docs.rushdb.com/quick-start/installation): Getting started with RushDB SDK is straightforward. This section will guide you through installing the SDK and setting up your first SDK instance.
- [RushDB Platform Setup](https://docs.rushdb.com/quick-start/local-platform-setup): You can quickly launch the RushDB Platform using the following Docker command:
- [CRUD Operations without Model Registration](https://docs.rushdb.com/working-with-rushdb-sdk/advanced-usage/crud-without-models): While registering models with Model provides strong TypeScript support and a clear structure, you can also perform CRUD operations directly using the RestAPI methods in the RushDB class. This approach allows you to interact with your data without predefining models, offering flexibility for quick operations or dynamic use cases.
- [Importing Data Without Registering Models](https://docs.rushdb.com/working-with-rushdb-sdk/advanced-usage/importing-data): When working with RushDB SDK, creating models like Author, Post, and Blog repositories allows us to define clear TypeScript contracts, ensuring type safety and better development experience. However, in many scenarios, you might need to quickly import data from external sources, such as JSON files, without going through the process of registering models.
- [Managing Labels and Properties](https://docs.rushdb.com/working-with-rushdb-sdk/advanced-usage/labels-properties): In RushDB, labels and properties are crucial for defining and organizing your data models. Labels act as categories or tags for your records, while properties define the structure and data types of the records themselves. This section covers how to manage labels and properties using the RushDB SDK.
- [Creating Records](https://docs.rushdb.com/working-with-rushdb-sdk/creating-records): Creating records is a fundamental operation when working with any data-driven application. The Model class provides methods to create single or multiple records in the database.
- [Deleting Records](https://docs.rushdb.com/working-with-rushdb-sdk/deleting-records): Deleting records is a fundamental operation to manage the lifecycle of data within your application. The Model class provides methods to delete multiple records. We will use the Author and Post models defined earlier to demonstrate these operations.
- [Reading Records](https://docs.rushdb.com/working-with-rushdb-sdk/reading-records): Reading records involves fetching data from the database. The Model class provides several methods to retrieve records based on different criteria..
- [Defining Models with RushDB SDK](https://docs.rushdb.com/working-with-rushdb-sdk/rushdb-models): In this section, we focus on how to define models using the RushDB SDK. Defining models accurately is crucial as it not only aids in validating the fields according to the schema but also enhances the developer experience with features like autocomplete and field name suggestions.
- [Introduction to RushDB SDK](https://docs.rushdb.com/working-with-rushdb-sdk/rushdb-sdk-intro): Welcome to the comprehensive guide on working with the RushDB SDK. This section provides an overview of initializing the RushDB SDK, a crucial first step for integrating RushDB into your applications. Understanding the initialization process is key to effectively manage and interact with your data through RushDB.
- [ApiResponse | CollectSDKResult](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/rushdb-api-response): ApiResponse
- [InferType](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/rushdb-infer-type): The InferType type is used to infer the types of schema fields for a given Model. This utility type helps in deriving the correct types for fields defined in the schema, ensuring type safety and proper validation.
- [Model](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/rushdb-model): The Model class in the RushDB SDK represents a data model and provides methods for performing CRUD operations, managing relationships, and validating records based on a defined schema. It is a central component for interacting with records in RushDB.
- [Schema](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/rushdb-schema): The Schema type is used to define the schema for a model in the RushDB SDK. It describes the structure and validation rules for the data fields of a model.
- [BooleanValue](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/search-query/boolean-value): The BooleanValue type is used to define conditions for boolean fields in a query.
- [DatetimeValue](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/search-query/datetime-value-object): The DatetimeValue type is used to define conditions for datetime fields in a query.
- [NullValue](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/search-query/null-value): The NullValue type is used to define conditions for null fields in a query.
- [NumberValue](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/search-query/number-value): The NumberValue type is used to define conditions for number fields in a query.
- [SearchQuery](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/search-query/search-query): The SearchQuery type is used to define the criteria for querying records in the RushDB SDK. It allows you to specify filters, sorting, pagination, and related records to be retrieved.
- [SearchQueryLogicalGrouping](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/search-query/search-query-logical-grouping): The SearchQueryLogicalGrouping type is used to define logical groupings for combining multiple conditions in a query.
- [SearchQueryWhere](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/search-query/search-query-where): The SearchQueryWhere type is used to define the filtering conditions for a query. It supports logical grouping and field-specific conditions.
- [StringValue](https://docs.rushdb.com/working-with-rushdb-sdk/typescript-reference/search-query/string-value): The StringValue type is used to define conditions for string fields in a query.
- [Updating Records](https://docs.rushdb.com/working-with-rushdb-sdk/updating-records): Updating records is a crucial operation for maintaining and modifying data within your application. The Model class provides methods to update single or multiple records. We will use the Author and Post models defined earlier to demonstrate these operations.