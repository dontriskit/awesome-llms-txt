# Donobu ‚Äì Continuous Quality for Your Web App

## Overview
Donobu is an agentic platform that enables QA, engineering, product, design, marketing, and legal teams to rapidly **test and validate** websites and web applications. Using a **bring-your-own-LLM** approach (or entirely manual control), Donobu helps you create browser **automations and tests** from natural language prompts. When you specify a website URL and an objective, Donobu‚Äôs **FlowPilot** agent (or manual mode) will **navigate, verify, and record** the steps, ultimately generating a Playwright script in TypeScript for deterministic replay (**rerun**) or integration into your test automation pipeline.

> **Positioning Note**: Donobu is designed as an **AI/manual tester** companion, perfect for complementing AI code-writer tools. While it can handle generic automation tasks (e.g., setting up a test environment, routine employee workflows), **its primary focus is on robust testing and continuous quality** across your web app lifecycle.

### Key Highlights
- **Agentic and Manual Testing**  
  Automate website interactions with AI-driven or manual step recording, ideal for achieving wide test coverage.
- **No Coding Required**  
  Simply provide an objective; Donobu‚Äôs FlowPilot figures out the necessary steps, letting anyone create tests.
- **Scalable**  
  Export test flows as TypeScript, integrate them into CI/CD pipelines, and reference previous browser states to streamline QA processes.
- **Smart vs. Standard Actions**  
  AI-powered ‚Äúsmart‚Äù actions (e.g., semantic assertions, text analysis) blend seamlessly with ‚Äústandard‚Äù user-like actions (click, navigate, hover).

---

## Flows in Donobu
A **flow** is a sequence of actions intended to accomplish a specific **testing or validation objective**. Flows can be built in two ways:

1. **Autonomous Mode (FlowPilot)**  
  - Donobu‚Äôs FlowPilot agent autonomously determines how to fulfill the given test objective.  
  - Users can pause the agent‚Äôs navigation at any time if manual oversight is needed.

2. **Manual Mode**  
  - The user navigates the website themselves while Donobu records each step.  
  - Perfect for highly specific test paths or scenarios requiring direct user control.

### Iterations and Stopping Criteria
Donobu applies **iteration limits** to avoid infinite loops or excessive exploration when in **Autonomous** mode. Once this threshold is reached, FlowPilot automatically stops and reports progress or results.

### Saved Browser State
For login flows or complex test pre-conditions, Donobu can **save browser state** (session, cookies, etc.). Subsequent flows can reference that saved state by using the previous flow‚Äôs ID or name‚Äîespecially useful for multi-part test sequences.

## Terminology

- **Actions**  
  Individual steps in a flow (e.g., navigating, clicking, asserting).
- **Flow**  
  A collection of actions that fulfill a particular objective or test scenario.
- **FlowPilot**  
  The autonomous navigator (formerly ‚ÄúFlow Runner‚Äù) that interprets your test prompts and site context to decide the optimal sequence of steps.
- **Rerun**  
  A deterministic re-execution of a previously discovered flow, free from additional LLM inferences.

## Supported LLMs and Keys
Donobu supports user-provided API keys for:
1. **OpenAI** (e.g., GPT-4, GPT-4o-mini)
2. **Google Gemini**
3. **Anthropic Claude**

As new multimodal or specialized models emerge, Donobu‚Äôs ‚Äúbring-your-own-LLM‚Äù approach makes it easy to adopt them. Your keys are stored locally for security and **never** transmitted externally by Donobu.

## Run Modes
Donobu flows can run in one of three modes, depending on how you want the test or automation to execute:

- **AUTONOMOUS**  
  FlowPilot (the AI agent) decides how to achieve the objective, stopping once successful or hitting the iteration limit.

- **INSTRUCT**  
  Human-driven mode (referred to as ‚Äúmanual‚Äù in the UI). The flow ends only when the user explicitly stops or completes it.

- **DETERMINISTIC**  
  A step-by-step ‚Äúon rails‚Äù mode that typically **reruns** a previously saved flow, executing predefined actions without additional AI inference.

## Key Features

1. **FlowPilot (Agentic Navigation)**  
   - Tests or verifies your site by autonomously finding the best sequence of actions.  
   - Easily paused via an on-page overlay for manual intervention.

2. **Rerun**  
   - Replays existing flows deterministically‚Äîideal for regression testing and CI environments.

3. **Export Code**  
   - Produces Playwright TypeScript scripts ready for deeper CI/CD integration and advanced custom checks.

4. **API Support**  
   - Donobu runs a local server (`http://localhost:31000/api`) to programmatically create and manage flows‚Äîgreat for DevOps or automated QA pipelines.

5. **Semantic Assertions & Smart Actions**  
   - Leverage AI to perform advanced checks (e.g., brand style, text classification, AI chatbot verification) that go beyond standard DOM-based testing.

6. **Manual Control & Recording**  
   - Record user-driven testing steps in a flow, bypassing the AI layer entirely.

## Enhanced Prompting Guidelines
- **End-to-End Test Case Structure**:  
  Prompts should be written like an end-to-end test case with a clearly defined end state. Describe the expected final condition or outcome of the test.

- **Magic Keyword ‚ÄúAssert‚Äù**:  
  Use the word **"Assert"** in your prompts to indicate a test assertion. This keyword signals that the assertion should check a condition that returns true or false, ensuring that key checkpoints are validated.

- **Bounded Requests to Prevent Infinite Loops**:  
  When instructing the system to process lists or iterative steps (e.g., ‚Äútest the first 3 links of the results‚Äù), explicitly bound the request to a specific number or condition. This prevents unintentional infinite loops or excessive processing.

- **Clear and Descriptive Objectives**:  
  Objectives or prompts should describe the desired outcome clearly without necessarily using numeric steps. For example, instead of "1. Login, 2. Navigate, 3. Validate", use a descriptive statement such as "Complete the login process, navigate to the dashboard, and verify that the user‚Äôs name appears correctly."

- **Optional Keywords for Flow Control (suggestion)**:  
  Consider introducing keywords like **"Wait"** for delays or **"Retry"** for reattempting steps, providing further control over the flow execution.  
  *(This is an optional guideline to expand the control vocabulary.)*

- - **Error Handling Guidelines:**  
  Specify clear instructions on how to handle unexpected results or errors during the flow. For example, incorporate a "Make comment and stop" to manage exceptions.

## API Usage

When the Donobu desktop app is running locally, it spins up an API server (defaulting to port `31000`). You can programmatically **create**, **query**, **rerun**, and **export** flows using a simple HTTP interface.

---

### üìÖ Create a Flow via API
```http
POST /api/flows
Content-Type: application/json
```
#### Request Body:
```json
{
  "targetWebsite": "https://www.example.com",
  "overallObjective": "Find the best deal on a new laptop.",
  "name": "My Awesome Flow",
  "browser": {
    "initialState": {
      "type": "id",
      "value": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
    },
    "persistState": true,
    "using": {
      "type": "device",
      "deviceName": "Desktop Chromium",
      "headless": true
    }
  },
  "callbackUrl": "https://www.example.com/callback",
  "customTools": [
    {
      "name": "MyCustomTool",
      "description": "This tool does something special.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "input": {
            "type": "string",
            "description": "The input for the tool."
          }
        }
      },
      "javascript": "console.log('Hello, world!');"
    }
  ],
  "maxIterations": 10,
  "gptConfigNameOverride": "My GPT Config",
  "defaultToolTipDurationMilliseconds": 2247,
  "initialRunMode": "AUTONOMOUS",
  "isControlPanelEnabled": true,
  "allowedTools": [],
  "toolCallsOnStart": [],
  "resultinputSchema": {
    "type": "object",
    "properties": {
      "result": {
        "type": "string"
      }
    }
  }
}
```
**Minimum required fields**:  
- `targetWebsite` *(string)*  
- `overallObjective` *(string)* (or an alternative if your flow is purely manual/deterministic)

**Common optional fields**:  
- `deviceName` to choose the browser options - `Desktop Chrome`, `Desktop Safari`, `Desktop Firefox`, `iPhone 14`, `Pixel 7`, `iPad Pro 11`  
- `maxIterations` to bound AI exploration in AUTONOMOUS mode

---

### üîç Query Flows
```http
GET /api/flows?name=My%20Flow&runMode=AUTONOMOUS&state=SUCCESS&startedAfter=1700000000000&limit=5
```
#### Response (200 OK):
```json
{
  "flows": [
    {
      "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
      "name": "My Flow",
      "state": "SUCCESS",
      "startedAt": 1700056789123
    }
  ],
  "nextPageToken": null
}
```

---

### üóíÔ∏è Get Flow Metadata
```http
GET /api/flows/{flowId}
```
Returns the metadata for a specific flow.

---

### ‚ùå Delete a Flow
```http
DELETE /api/flows/{flowId}
```
Removes a flow from the system.

---

### ‚è™ Rerun a Flow
```http
GET /api/flows/{flowId}/rerun
```
Returns a deterministic version of the flow configuration, suitable for replay.

---

### üíª Export Flow as Code
```http
GET /api/flows/{flowId}/code
```
Returns a code (TypeScript Playwright) representation of the flow.

---

### Key API Enhancements (2025 Schema)

- **Query Filters**: Filter by `name`, `runMode`, `state`, `startedBefore`, `startedAfter`, and more.
- **Pagination**: Use `limit` and `pageToken` for efficient listing.
- **Browser Configs**: Use `device`, `remoteInstance`, or `browserBase` for flexible environments.
- **Custom Tools**: Define tool name, input schema, and implementation in JS.
- **Tool Calls on Start**: Run tools automatically at the start of a flow.
- **Result Schema**: Capture final results using `resultinputSchema`.
- **Callback Support**: Notify external systems when a flow completes.

You can integrate Donobu flows into your testing pipelines or QA environments with minimal configuration. Use autonomous exploration or rerun deterministic scripts on demand.

## Available Actions

Below is a selection of **testing-oriented** actions supported by Donobu. Some are purely mechanical (standard); others incorporate AI logic (smart):

- **Go to Webpage** *(standard)*  
  Load a new URL in the browser.
- **Click** *(standard)*  
  Click a specified element (e.g., button, link).
- **Input Text** *(standard)*  
  Type text into a field, such as usernames or form data.
- **Detect Broken Links** *(standard)*  
  Check for 404 or otherwise dead links across a page.
- **Analyze Page Text** *(smart)*  
  Read and interpret textual content using an LLM.
- **Assert** *(smart)*  
  Visually verify or check a condition on a webpage using the **Assert** keyword. This action validates whether a specific state (such as brand consistency, text accuracy, or element presence) is true or false.
- **Run Accessibility Test** *(standard)*  
  Evaluate WCAG compliance for universal design.
- **Cookie Report** *(smart)*  
  Inspect cookies for compliance and list their potential uses, with prompt-based analysis if needed.
- **Mark Objective Complete** *(standard)*  
  Ends the flow after successful test completion.
- **Pause for User Interaction** *(standard)*  
  Temporarily halt FlowPilot so a user can handle manual steps like entering sensitive information.

## Varied Testing Scenarios & Example Flows

Below are sample test scenarios from different teams highlighting Donobu‚Äôs capacity for **verification**, **reporting**, and **continuous QA**.

### Example 1 ‚Äì Multi-Step Purchase Flow (E-Commerce)
- **URL**: [https://www.bestbuy.com](https://www.bestbuy.com)  
- **Objective**:  
  1. Search for ‚Äúgaming laptop‚Äù  
  2. Filter by ‚ÄúPrice: High to Low‚Äù and ‚Äú4-star or higher‚Äù rating  
  3. Add the first item to cart and proceed to checkout  
  4. Stop before payment entry  
- **Key Notes**:  
  - **AUTONOMOUS** with `maxIterations = 15` prevents infinite loops.  
  - Incorporates a **Pause** action if user input is required.

### Example 2 ‚Äì Content Audit and Summarization (Editorial Team)
- **URL**: [https://www.bloomberg.com](https://www.bloomberg.com)  
- **Objective**:  
  Extract the titles of the first five news articles on the homepage, categorize each article by topic (e.g., finance, tech, politics), and summarize key points in bullet form.  
- **Key Notes**:  
  - Relies on **Analyze Page Text** and semantic checks to ensure the categorization and summaries are accurate.
  - Limits processing to a specified number of articles to prevent looping.

### Example 3 ‚Äì Login State Preservation (Product/QA)
- **URL**: [https://stage.yourapp.com](https://stage.yourapp.com)  
- **Objective**:  
  1. Log in with test credentials  
  2. Update user display name in ‚ÄúAccount Settings‚Äù  
  3. Mark the flow complete and **persist browser state**  
- **Key Notes**:  
  - Future flows can load this saved session to test deeper features.  
  - Ideal for advanced QA use cases.

### Example 4 ‚Äì AI Chatbot Verification (Engineering/QA)
- **URL**: [https://www.customer-support.com](https://www.customer-support.com)  
- **Objective**:  
  Open the embedded chatbot, inquire about subscription plan details, verify that at least three valid plan tiers are presented, and ensure the reply references plan cost and usage caps.  
- **Key Notes**:  
  - Shows Donobu‚Äôs open-ended test approach with iteration limits to keep FlowPilot on track.

### Example 5 ‚Äì Accessibility and Brand Consistency (Legal/Design)
- **URL**: [https://www.federalreserve.gov](https://www.federalreserve.gov)  
- **Objective**:  
  Execute an accessibility test to identify WCAG issues, verify that brand colors adhere to official style guidelines, and generate a final JSON report for legal review.  
- **Key Notes**:  
  - Combines standard ‚ÄúRun Accessibility Test‚Äù plus a ‚Äúsemantic brand check.‚Äù

---

## Frequently Asked Questions

1. **How can I start using Donobu?**  
   Download Donobu and contact us if you‚Äôre interested in advanced features‚Äîwe‚Äôll be happy to guide you.

2. **Is Donobu free to use?**  
   Yes! Donobu is currently free. You can use it with your own LLM model or record flows manually at no cost.

3. **Can I share Donobu with my friends or team?**  
   Absolutely‚ÄîDonobu is built for collaboration.

4. **What devices can I use Donobu on?**  
   Donobu currently works on **macOS**. We plan to expand to more platforms soon.

5. **Do I need coding skills to use Donobu?**  
   No coding required. Donobu‚Äôs intuitive interface and natural language prompts let anyone build test flows.

---

## Conclusion
Donobu elevates web testing and continuous quality assurance, helping teams verify websites, extract data, and confirm brand consistency. Whether you use FlowPilot‚Äôs AI-driven navigation or record steps manually, Donobu‚Äôs **blend of smart and standard actions** enables thorough testing. With iteration limits, saved browser states, and robust API endpoints, it seamlessly integrates into any QA or DevOps pipeline.

Start exploring Donobu‚Äôs capabilities today, and reach out if you need any clarification or advanced support!
