# Add Comment Annotations
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comment-annotations/add-comment-annotations

POST https://api.velt.dev/v1/commentannotations/add

Use this API to add comment annotations to a document within an organization.

* You can add comments on an elemement, text or page.
* You can provide HTML or text content.
* Additional filters can be applied using location IDs.

# Endpoint

`POST https://api.velt.dev/v1/commentannotations/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="Object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID
    </ParamField>

    <ParamField body="commentAnnotations" type="Object[]" required>
      <Expandable title="properties">
        <ParamField body="location" type="Object">
          <Expandable title="properties">
            <ParamField body="id" type="string" required>
              Location ID
            </ParamField>

            <ParamField body="locationName" type="string">
              Location Name
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="targetElement" type="Object">
          Target Element

          <Expandable title="properties">
            <ParamField body="elementId" type="string">
              Element DOM Id
            </ParamField>

            <ParamField body="targetText" type="string">
              Target Text. Provide this if you want to add comment annotation on the provided text content.
            </ParamField>

            <ParamField body="occurrence" type="number">
              Occurrence. Provide this if you want to add comment annotation on a text content.
            </ParamField>

            <ParamField body="selectAllContent" type="boolean">
              Select All Content. Provide this if you want to select and add comment annotation on the entire text content of the target elementId.
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="commentData" type="Object[]" required>
          Array of Comment Data

          <Expandable title="properties">
            <ParamField body="commentText" type="string">
              Comment content in plain text string
            </ParamField>

            <ParamField body="commentHtml" type="string">
              Comment content in HTML string
            </ParamField>

            <ParamField body="from" type="User" required>
              User object from whom the comment is added
            </ParamField>

            <ParamField body="createdAt" type="number">
              Created At timestamp (in milliseconds since epoch).
            </ParamField>

            <ParamField body="lastUpdated" type="number">
              Last Updated timestamp (in milliseconds since epoch).
            </ParamField>

            <ParamField body="taggedUserContacts" type="Object[]">
              Array of tagged user contacts

              <Expandable title="properties">
                <ParamField body="text" type="string" required>
                  Display text of the tagged user (e.g. "@Username")
                </ParamField>

                <ParamField body="userId" type="string" required>
                  User ID of the tagged user
                </ParamField>

                <ParamField body="contact" type="Object" required>
                  <Expandable title="properties">
                    <ParamField body="email" type="string" required>
                      Email of the tagged user
                    </ParamField>

                    <ParamField body="name" type="string" required>
                      Name of the tagged user
                    </ParamField>

                    <ParamField body="userId" type="string" required>
                      User ID of the tagged user
                    </ParamField>
                  </Expandable>
                </ParamField>
              </Expandable>
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="status" type="Status">
          Status

          <Expandable title="properties">
            <ParamField body="id" type="string" required>
              Status ID
            </ParamField>

            <ParamField body="name" type="string" required>
              Status Name
            </ParamField>

            <ParamField body="type" type="'default' | 'ongoing' | 'terminal'" required>
              Type.
            </ParamField>

            <ParamField body="color" type="string" required>
              Text and comment pin color
            </ParamField>

            <ParamField body="lightColor" type="string" required>
              Background color on the status indicator
            </ParamField>

            <ParamField body="svg" type="string">
              Raw SVG of the icon. Either `svg` or `iconUrl` is required.
            </ParamField>

            <ParamField body="iconUrl" type="string">
              Icon URL. Either `svg` or `iconUrl` is required.
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="assignedTo" type="User">
          User object to whom the comment is assigned
        </ParamField>

        <ParamField body="context" type="Object">
          Custom key/value metadata object
        </ParamField>

        <ParamField body="createdAt" type="number">
          Created At timestamp (in milliseconds since epoch).
        </ParamField>

        <ParamField body="lastUpdated" type="number">
          Last Updated timestamp (in milliseconds since epoch).
        </ParamField>

        <ParamField body="priority" type="Object">
          Priority

          <Expandable title="properties">
            <ParamField body="id" type="string" required>
              Priority ID
            </ParamField>

            <ParamField body="color" type="string" required>
              Priority Color
            </ParamField>

            <ParamField body="name" type="string" required>
              Priority Name
            </ParamField>

            <ParamField body="lightColor" type="string" required>
              Priority Light Color
            </ParamField>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### Add comment annotation by organizationId, documentId and location

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "commentAnnotations": [
      {
        "location": {
          "id": "yourLocationId",
          "locationName": "yourLocationName"
        },
        "targetElement": {
          "elementId": "yourElementId",
          "targetText": "Your Target Text",
          "occurrence": 1,
          "selectAllContent": false
        },
        "commentData": [
          {
            "commentText": "Sample Comment",
            "commentHtml": "<div>Sample Comment</div>",
            "from": {
              "userId": "yourUserId",
              "name": "yourUserName",
              "email": "yourUserEmail",
            }
          }
        ]
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
   "result": {
       "status": "success",
       "message": "Comment Annotation(s) added successfully.",
       "data": {
           "-O0mpUziLcBwzREvZKs6": {
               "success": true,
               "annotationId": "-O0mpUziLcBwzREvZKs6",
               "commentIds": [
                   126535
               ],
               "message": "Added Successfully"
           }
       }
   }
}

```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
     "result": {
         "status": "success",
         "message": "Comment Annotation(s) added successfully.",
         "data": {
             "-O0mpUziLcBwzREvZKs6": {
                 "success": true,
                 "annotationId": "-O0mpUziLcBwzREvZKs6",
                 "commentIds": [
                     126535
                 ],
                 "message": "Added Successfully"
             }
         }
     }
  }
  ```
</ResponseExample>


# Delete Comment Annotations
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comment-annotations/delete-comment-annotations

POST https://api.velt.dev/v1/commentannotations/delete

Use this API to delete comment annotations from a document within an organization.
Additional filters can be applied using location IDs, annotation IDs, or user IDs.

# Endpoint

`POST https://api.velt.dev/v1/commentannotations/delete`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string">
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID
    </ParamField>

    <ParamField body="locationIds" type="string[]">
      Array of Location IDs
    </ParamField>

    <ParamField body="annotationIds" type="string[]">
      Array of Annotation IDs
    </ParamField>

    <ParamField body="userIds" type="string[]">
      Array of User IDs
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Delete annotations by organizationId and documentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId"
  }
}
```

#### 2. Delete annotations by organizationId, documentId and locationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ]
  }
}
```

#### 3. Delete annotations by organizationId, documentId, locationIds and userIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "userIds": [
      "yourUserId"
    ]
  }
}
```

#### 4. Delete annotations by organizationId, documentId and userIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userIds": [
      "yourUserId"
    ]
  }
}
```

#### 5. Delete annotations by organizationId, documentId and annotationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ]
  }
}
```

#### 6. Delete annotations by organizationId, documentId, locationIds and annotationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ]
  }
}
```

#### 7. Delete annotations by documentId. This will work if the document was created without an organization.

```JSON
{
  "data": {
    "documentId": "yourDocumentId"
  }
}
```

#### 8. Delete annotations by documentId and locationIds. This will work if the document was created without an organization.

```JSON
{
  "data": {
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ]
  }
}
```

#### 9. Delete annotations by documentId and userIds. This will work if the document was created without an organization.

```JSON
{
  "data": {
    "documentId": "yourDocumentId",
    "userIds": [
      "yourUserId"
    ]
  }
}
```

#### 10. Delete annotations by documentId and annotationIds. This will work if the document was created without an organization.

```JSON
{
  "data": {
    "documentId": "yourDocumentId",
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ]
  }
}
```

#### 11. Delete annotations by documentId, locationIds, and userIds. This will work if the document was created without an organization.

```JSON
{
  "data": {
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "userIds": [
      "yourUserId"
    ]
  }
}
```

#### 12. Delete annotations by documentId, locationIds, and annotationIds. This will work if the document was created without an organization.

```JSON
{
  "data": {
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Annotations deleted successfully.",
    "data": {
      "yourAnnotationId1": {
        "success": true,
        "id": "yourAnnotationId",
        "message": "Deleted Successfully"
      },
      "yourAnnotationId2": {
        "success": false,
        "id": "yourAnnotationId2",
        "message": "Annotation not found."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Annotations deleted successfully.",
      "data": {
        "yourAnnotationId": {
          "success": true,
          "id": "yourAnnotationId",
          "message": "Deleted Successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Get Comment Annotations v1
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comment-annotations/get-comment-annotations

POST https://api.velt.dev/v1/commentannotations/get

Use this API to retrieve comment annotations from a document within an organization.
Additional filters can be applied using location IDs, annotation IDs, or user IDs.

<Warning>
  Use this for SDK v3 or prior versions.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/commentannotations/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID
    </ParamField>

    <ParamField body="locationIds" type="string[]">
      Array of Location IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>

    <ParamField body="annotationIds" type="string[]">
      Array of Annotation IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>

    <ParamField body="userIds" type="string[]">
      Array of User IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get annotations by organizationId and documentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
  }
}
```

#### 2. Get annotations by organizationId, documentId, and locationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
  }
}
```

#### 3. Get annotations by organizationId, documentId, locationIds, and userIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "userIds": [
      "yourUserId"
    ],
  }
}
```

#### 4. Get annotations by organizationId, documentId, and userIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userIds": [
      "yourUserId"
    ],
  }
}
```

#### 5. Get annotations by organizationId, documentId, and annotationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ],
  }
}
```

#### 6. Get annotations by organizationId, documentId, locationIds, and annotationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ],
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Annotations fetched successfully.",
    "data": [
      {
        "annotationId": "yourAnnotationId",
        "comments": [
          {
            "commentId": 123456,
            "commentText": "This is a sample comment text.",
            "commentHtml": "<p>This is a sample comment text.</p>",
            "from": {
              "userId": "user123",
              "name": "John Doe",
              "email": "john.doe@example.com"
            },
            "lastUpdated": "2023-06-15T10:30:00Z"
          }
        ],
        "from": {
          "userId": "user123",
          "name": "John Doe",
          "email": "john.doe@example.com"
        },
        "color": "#00FF00",
        "createdAt": "2023-06-15T10:30:00Z",
        "lastUpdated": "2023-06-15T10:30:00Z",
        "status": {
          "id": "OPEN",
          "name": "Open",
          "color": "#0000FF",
          "type": "default"
        }
      },
      null // null is returned only if you provided an annotationId that doesn't exist
    ]
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Annotations fetched successfully.",
      "data": [
        {
          "annotationId": "yourAnnotationId",
          "comments": [
            {
              "commentId": 123456,
              "commentText": "This is a sample comment text.",
              "commentHtml": "<p>This is a sample comment text.</p>",
              "from": {
                "userId": "user123",
                "name": "John Doe",
                "email": "john.doe@example.com"
              },
              "lastUpdated": "2023-06-15T10:30:00Z",
              "type": "text",
            }
          ],
          "from": {
            "userId": "user123",
            "name": "John Doe",
            "email": "john.doe@example.com"
          },
          "color": "#00FF00",
          "createdAt": "2023-06-15T10:30:00Z",
          "lastUpdated": "2023-06-15T10:30:00Z",
          "status": {
            "id": "OPEN",
            "name": "Open",
            "color": "#0000FF",
            "type": "default"
          }
        },
        null // null is returned only if you provided an annotationId that doesn't exist
      ]
    }
  }
  ```
</ResponseExample>


# Get Comment Annotations Count
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comment-annotations/get-comment-annotations-count

POST https://api.velt.dev/v1/commentannotations/count/get

Use this API to retrieve the count of comment annotations for specified documents, including both total and unread counts.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/commentannotations/count/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentIds" type="string[]" required>
      Array of document IDs to get comment annotation counts for. Limit: Only 30 IDs can be passed at a time.
    </ParamField>

    <ParamField body="userId" type="string" required>
      ID of the user requesting the counts
    </ParamField>

    <ParamField body="statusIds" type="string[]">
      Array of status IDs to filter comments by (e.g., "OPEN", "IN\_PROGRESS")
    </ParamField>
  </Expandable>
</ParamField>

#### **Example Request**

```JSON
{
  "data": {
    "organizationId": "ORG_ID",
    "documentIds": ["DOC_1", "DOC_2"],
    "userId": "1.1",
    "statusIds": ["OPEN", "IN_PROGRESS"]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success", 
    "message": "Comment count retrieved successfully.",
    "data": {
      "DOC_1": {
        "total": 4,
        "unread": 2
      },
      "DOC_2": {
        "total": 2,
        "unread": 0
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```JSON
  {
    "result": {
      "status": "success",
      "message": "Comment count retrieved successfully.",
      "data": {
        "DOC_1": {
          "total": 4,
          "unread": 2
        },
        "DOC_2": {
          "total": 2,
          "unread": 0
        }
      }
    }
  }
  ```
</ResponseExample>


# Get Comment Annotations v2
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comment-annotations/get-comment-annotations-v2

POST https://api.velt.dev/v2/commentannotations/get

Use this API to retrieve comment annotations from a document within an organization.
Additional filters can be applied using location IDs, annotation IDs, or user IDs.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v2/commentannotations/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID. Pass a single document Id or use the documentIds field to pass multiple document Ids.
    </ParamField>

    <ParamField body="documentIds" type="string[]">
      Array of Document IDs. Limit: Only 30 IDs can be passed at a time.
      If you don't provide this, data for all documents will be fetched.
    </ParamField>

    <ParamField body="groupByDocumentId" type="boolean">
      Data will be grouped by document ID.
    </ParamField>

    <ParamField body="locationIds" type="string[]">
      Array of Location IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>

    <ParamField body="folderId" type="string">
      Folder ID. Filters annotations by the folder.
    </ParamField>

    <ParamField body="annotationIds" type="string[]">
      Array of Annotation IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>

    <ParamField body="userIds" type="string[]">
      Array of User IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>

    {/* <ParamField body="order" type="'asc' | 'desc'">
          Order of results based on `lastUpdated` timestamp. Options: `asc` or `desc`. Default: `desc`.
        </ParamField> */}

    <ParamField body="statusIds" type="string[]">
      Status IDs of the annotations to filter on.
    </ParamField>

    <ParamField body="updatedAfter" type="number">
      Filter annotations updated after the given lastUpdated timestamp (in milliseconds since epoch).
    </ParamField>

    <ParamField body="updatedBefore" type="number">
      Filter annotations updated before the given lastUpdated timestamp (in milliseconds since epoch).
    </ParamField>

    <ParamField body="createdAfter" type="number">
      Filter annotations created after the given createdAt timestamp (in milliseconds since epoch).
    </ParamField>

    <ParamField body="createdBefore" type="number">
      Filter annotations created before the given createdAt timestamp (in milliseconds since epoch).
    </ParamField>

    <ParamField body="pageSize" type="number">
      Number of items to be retrieved per page. Default: 1000.
    </ParamField>

    <ParamField body="pageToken" type="string">
      Page token retrieved from previous API call.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get annotations by organizationId and documentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "pageSize": 10,
    "pageToken": "1720441573192",
    "statusId": "OPEN"
  }
}
```

#### 2. Get annotations by organizationId and documentIds grouped by documentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentIds": ["yourDocumentId1", "yourDocumentId2"],
    "groupByDocumentId": true
  }
}
```

#### 3. Get annotations by organizationId, documentId, and locationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "pageSize": 10,
    "pageToken": "1720441573192",
    "statusId": "OPEN"
  }
}
```

#### 4. Get annotations by organizationId, documentId, locationIds, and userIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "userIds": [
      "yourUserId"
    ],
    "pageSize": 10,
    "pageToken": "1720441573192",
    "statusId": "OPEN"
  }
}
```

#### 5. Get annotations by organizationId, documentId, and userIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userIds": [
      "yourUserId"
    ],
    "pageSize": 10,
    "pageToken": "1720441573192",
    "statusId": "OPEN"
  }
}
```

#### 6. Get annotations by organizationId, documentId, and annotationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ],
    "pageSize": 10,
    "pageToken": "1720441573192",
    "statusId": "OPEN"
  }
}
```

#### 7. Get annotations by organizationId, documentId, locationIds, and annotationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ],
    "pageSize": 10,
    "pageToken": "1720441573192",
    "statusId": "OPEN"
  }
}
```

#### 8. Get annotations by organizationId, statusIds, updatedAfter, and updatedBefore

```JSON
{
   "data": {
       "organizationId": "myorg1",
       "statusIds": ["OPEN"],
       "updatedAfter": 1720441573192,
       "updatedBefore": 1720441573192,
   }
}

```

#### 9. Get annotations by organizationId, folderId

```JSON
{
   "data": {
       "organizationId": "myorg1",
       "folderId": "folderId1"
   }
}

```

# Response

#### Success Response with single documentId

```JSON
{
  "result": {
    "status": "success",
    "message": "Annotations fetched successfully.",
    "data": [
      {
        "annotationId": "yourAnnotationId",
        "comments": [
          {
            "commentId": 123456,
            "commentText": "This is a sample comment text.",
            "commentHtml": "<p>This is a sample comment text.</p>",
            "from": {
              "userId": "user123",
              "name": "John Doe",
              "email": "john.doe@example.com"
            },
            "lastUpdated": "2023-06-15T10:30:00Z"
          }
        ],
        "from": {
          "userId": "user123",
          "name": "John Doe",
          "email": "john.doe@example.com"
        },
        "color": "#00FF00",
        "createdAt": "2023-06-15T10:30:00Z",
        "lastUpdated": "2023-06-15T10:30:00Z",
        "status": {
          "id": "OPEN",
          "name": "Open",
          "color": "#0000FF",
          "type": "default"
        }
      },
      null // null is returned only if you provided an annotationId that doesn't exist
    ],
    "nextPageToken": "pageToken"
  }
}
```

#### Success Response with multiple documentIds with groupByDocumentId

```JSON
{
    "result": {
        "status": "success",
        "message": "Annotations fetched successfully.",
        "data": {
            "documentId1": [
                {
                    "annotationId": "annotationId1",
                    "comments": [
                      //comment objects
                    ],
                    "from": {
                      //from user object
                    },
                    "status": {
                        "color": "#625DF5",
                        "id": "OPEN",
                        "lightColor": "#E7E8FA",
                        "name": "Open",
                        "type": "default"
                    },
                    //other fields
                },
                {
                    "annotationId": "annotationId2",
                    "comments": [
                      //comment objects
                    ],
                    "from": {
                      //from user object
                    },
                    "status": {
                        "color": "#625DF5",
                        "id": "OPEN",
                        "lightColor": "#E7E8FA",
                        "name": "Open",
                        "type": "default"
                    },
                    //other fields
                },
            ],
            "documentId1": [
                {
                    "annotationId": "annotationId1",
                    "comments": [
                      //comment objects
                    ],
                    "from": {
                      //from user object
                    },
                    "status": {
                        "color": "#625DF5",
                        "id": "OPEN",
                        "lightColor": "#E7E8FA",
                        "name": "Open",
                        "type": "default"
                    },
                    //other fields
                },
                {
                    "annotationId": "annotationId2",
                    "comments": [
                      //comment objects
                    ],
                    "from": {
                      //from user object
                    },
                    "status": {
                        "color": "#625DF5",
                        "id": "OPEN",
                        "lightColor": "#E7E8FA",
                        "name": "Open",
                        "type": "default"
                    },
                    //other fields
                },
            ]
        },
        "nextPageToken": "Ds7NMZw0wWSdmfJFLNioTw=="
    }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```JSON Single Document
  {
    "result": {
      "status": "success",
      "message": "Annotations fetched successfully.",
      "data": [
        {
          "annotationId": "yourAnnotationId",
          "comments": [
            {
              "commentId": 123456,
              "commentText": "This is a sample comment text.",
              "commentHtml": "<p>This is a sample comment text.</p>",
              "from": {
                "userId": "user123",
                "name": "John Doe",
                "email": "john.doe@example.com"
              },
              "lastUpdated": "2023-06-15T10:30:00Z",
              "type": "text",
            }
          ],
          "from": {
            "userId": "user123",
            "name": "John Doe",
            "email": "john.doe@example.com"
          },
          "color": "#00FF00",
          "createdAt": "2023-06-15T10:30:00Z",
          "lastUpdated": "2023-06-15T10:30:00Z",
          "status": {
            "id": "OPEN",
            "name": "Open",
            "color": "#0000FF",
            "type": "default"
          }
        },
        null // null is returned only if you provided an annotationId that doesn't exist
      ],
      "nextPageToken": "pageToken"
    }
  }
  ```

  ```JSON Multiple Documents
  {
      "result": {
          "status": "success",
          "message": "Annotations fetched successfully.",
          "data": {
              "documentId1": [
                  {
                      "annotationId": "annotationId1",
                      "comments": [
                        //comment objects
                      ],
                      "from": {
                        //from user object
                      },
                      "status": {
                          "color": "#625DF5",
                          "id": "OPEN",
                          "lightColor": "#E7E8FA",
                          "name": "Open",
                          "type": "default"
                      },
                      //other fields
                  },
                  {
                      "annotationId": "annotationId2",
                      "comments": [
                        //comment objects
                      ],
                      "from": {
                        //from user object
                      },
                      "status": {
                          "color": "#625DF5",
                          "id": "OPEN",
                          "lightColor": "#E7E8FA",
                          "name": "Open",
                          "type": "default"
                      },
                      //other fields
                  },
              ],
              "documentId1": [
                  {
                      "annotationId": "annotationId1",
                      "comments": [
                        //comment objects
                      ],
                      "from": {
                        //from user object
                      },
                      "status": {
                          "color": "#625DF5",
                          "id": "OPEN",
                          "lightColor": "#E7E8FA",
                          "name": "Open",
                          "type": "default"
                      },
                      //other fields
                  },
                  {
                      "annotationId": "annotationId2",
                      "comments": [
                        //comment objects
                      ],
                      "from": {
                        //from user object
                      },
                      "status": {
                          "color": "#625DF5",
                          "id": "OPEN",
                          "lightColor": "#E7E8FA",
                          "name": "Open",
                          "type": "default"
                      },
                      //other fields
                  },
              ]
          },
          "nextPageToken": "Ds7NMZw0wWSdmfJFLNioTw=="
      }
  }
  ```
</ResponseExample>


# Update Comment Annotations
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comment-annotations/update-comment-annotations

POST https://api.velt.dev/v1/commentannotations/update

Use this API to update comment annotations in a document within an organization.
Additional filters can be applied using location IDs, annotation IDs, or user IDs.

# Endpoint

`POST https://api.velt.dev/v1/commentannotations/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID
    </ParamField>

    <ParamField body="locationIds" type="string[]">
      Array of Location IDs
    </ParamField>

    <ParamField body="userIds" type="string[]">
      Array of User IDs. These are the users who created the comment annotation.
    </ParamField>

    <ParamField body="annotationIds" type="string[]">
      Array of Annotation IDs
    </ParamField>

    <ParamField body="updatedData" type="Object[]">
      <Expandable title="properties">
        <ParamField body="location" type="Object">
          <Expandable title="properties">
            <ParamField body="id" type="string" required>
              Location ID
            </ParamField>

            <ParamField body="locationName" type="string">
              Location Name
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="targetElement" type="Object">
          Target Element

          <Expandable title="properties">
            <ParamField body="elementId" type="string">
              Element DOM Id
            </ParamField>

            <ParamField body="targetText" type="string">
              Target Text. Provide this if you want to add comment annotation on the provided text content.
            </ParamField>

            <ParamField body="occurrence" type="number">
              Occurrence. Provide this if you want to add comment annotation on a text content.
            </ParamField>

            <ParamField body="selectAllContent" type="boolean">
              Select All Content. Provide this if you want to select and add comment annotation on the entire text content of the target elementId.
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="from" type="User" required>
          User object from whom the Comment Annotation is added
        </ParamField>

        <ParamField body="status" type="Status">
          Status

          <Expandable title="properties">
            <ParamField body="type" type="string" required>
              Type

              <Expandable title="properties">
                <ParamField body="default" type="boolean" required>
                  Default
                </ParamField>

                <ParamField body="ongoing" type="boolean" required>
                  Ongoing
                </ParamField>

                <ParamField body="terminal" type="boolean" required>
                  Terminal
                </ParamField>
              </Expandable>
            </ParamField>

            <ParamField body="lightColor" type="string" required>
              Light Color
            </ParamField>

            <ParamField body="svg" type="string" required>
              Raw SVG of the icon
            </ParamField>

            <ParamField body="iconUrl" type="string" required>
              Icon URL
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="assignedTo" type="User">
          User object to whom the comment is assigned
        </ParamField>

        <ParamField body="context" type="Object">
          Custom key/value metadata object
        </ParamField>

        <ParamField body="priority" type="Object">
          Priority

          <Expandable title="properties">
            <ParamField body="id" type="string" required>
              Priority ID
            </ParamField>

            <ParamField body="color" type="string" required>
              Priority Color
            </ParamField>

            <ParamField body="name" type="string" required>
              Priority Name
            </ParamField>

            <ParamField body="lightColor" type="string" required>
              Priority Light Color
            </ParamField>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="updateUsers" type="Object[]">
      <Expandable title="properties">
        <ParamField body="oldUser" type="User" required>
          <Expandable title="properties">
            <ParamField body="userId" type="string" required>
              Old user's ID
            </ParamField>

            <ParamField body="name" type="string">
              Old user's name
            </ParamField>

            <ParamField body="email" type="string">
              Old user's email
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="newUser" type="User" required>
          <Expandable title="properties">
            <ParamField body="userId" type="string" required>
              New user's ID
            </ParamField>

            <ParamField body="name" type="string">
              New user's name
            </ParamField>

            <ParamField body="email" type="string">
              New user's email
            </ParamField>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Update all comment annotations by organizationId and documentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "updatedData" : {
      "status": {
        "type": "ongoing"
      }
    }
  }
}
```

#### 2. Update comment annotations by organizationId, documentId and locationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "updatedData" : {
      "status": {
        "type": "ongoing"
      }
    }
  }
}
```

#### 3. Update annotations by organizationId, documentId, locationIds and userIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "userIds": [
      "yourUserId"
    ],
    "updatedData" : {
      "status": {
        "type": "ongoing"
      }
    }
  }
}
```

#### 4. Update comment annotations by organizationId, documentId and userIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userIds": [
      "yourUserId"
    ],
    "updatedData" : {
      "status": {
        "type": "ongoing"
      }
    }
  }
}
```

#### 5. Update comment annotations by organizationId, documentId and annotationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ],
    "updatedData" : {
      "status": {
        "type": "ongoing"
      }
    }
  }
}
```

#### 6. Update comment annotations by organizationId, documentId, locationIds and annotationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationIds": [
      "locationx"
    ],
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ],
    "updatedData" : {
      "status": {
        "type": "ongoing"
      }
    }
  }
}
```

#### 7. Update Users in existing comment annotations

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationIds": [
      "yourAnnotationId1",
      "yourAnnotationId2"
    ],
    "updateUsers" : [
      {
        "oldUser": {
          "userId": "oldUserId",
        },
        "newUser": {
          "userId": "newUserId",
          "name": "newUserName",
          "email": "newUserEmail"
        }
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
    "result": {
        "status": "success",
        "message": "Annotations updated successfully.",
        "data": {
            "yourAnnotationId1": {
                "success": true,
                "id": "yourAnnotationId1",
                "message": "Annotations updated successfully"
            }
        }
    }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
      "result": {
          "status": "success",
          "message": "Annotations updated successfully.",
          "data": {
              "yourAnnotationId1": {
                  "success": true,
                  "id": "yourAnnotationId1",
                  "message": "Annotations updated successfully"
              }
          }
      }
  }
  ```
</ResponseExample>


# Add Comments
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comments/add-comments

POST https://api.velt.dev/v1/commentannotations/comments/add

Use this API to add comments within a specific CommentAnnotation.

# Endpoint

`POST https://api.velt.dev/v1/commentannotations/comments/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID
    </ParamField>

    <ParamField body="annotationId" type="string" required>
      Comment Annotation ID
    </ParamField>

    <ParamField body="commentData" type="Comment[]" required>
      Array of Comment Data

      <Expandable title="properties">
        <ParamField body="commentText" type="string">
          Comment content in plain text string
        </ParamField>

        <ParamField body="commentHtml" type="string">
          Comment content in HTML string
        </ParamField>

        <ParamField body="from" type="User" required>
          User object from whom the comment is added
        </ParamField>

        <ParamField body="createdAt" type="number">
          Created At timestamp (in milliseconds since epoch).
        </ParamField>

        <ParamField body="lastUpdated" type="number">
          Last Updated timestamp (in milliseconds since epoch).
        </ParamField>

        <ParamField body="taggedUserContacts" type="Object[]">
          Array of tagged user contacts

          <Expandable title="properties">
            <ParamField body="text" type="string" required>
              Display text of the tagged user (e.g. "@Username")
            </ParamField>

            <ParamField body="userId" type="string" required>
              User ID of the tagged user
            </ParamField>

            <ParamField body="contact" type="Object" required>
              <Expandable title="properties">
                <ParamField body="email" type="string" required>
                  Email of the tagged user
                </ParamField>

                <ParamField body="name" type="string" required>
                  Name of the tagged user
                </ParamField>

                <ParamField body="userId" type="string" required>
                  User ID of the tagged user
                </ParamField>
              </Expandable>
            </ParamField>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Add comment in a CommentAnnotation by organizationId, documentId, and annotationId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationId": "yourAnnotationId",
    "commentData": [
      {
        "commentText": "Sample Comment",
        "commentHtml": "<div>Hello</div>",
        "from": {
          "userId": "yourUserId"
        }
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Comment(s) added successfully.",
    "data": [
      778115
    ]
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Comment(s) added successfully.",
      "data": [
        778115
      ]
    }
  }
  ```
</ResponseExample>


# Delete Comments
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comments/delete-comments

POST https://api.velt.dev/v1/commentannotations/comments/delete

Use this API to delete comments within a specific CommentAnnotation.
Additional filters can be applied using comment IDs.

# Endpoint

`POST https://api.velt.dev/v1/commentannotations/comments/delete`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID
    </ParamField>

    <ParamField body="annotationId" type="string" required>
      Comment Annotation ID
    </ParamField>

    <ParamField body="commentIds" type="number[]">
      Array of Comment IDs
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Delete all comments of a CommentAnnotation by organizationId, documentId, and annotationId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationId": "yourAnnotationId"
  }
}
```

#### 2. Delete specific comments of a CommentAnnotation by organizationId, documentId, annotationId and commentIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationId": "yourAnnotationId",
    "commentIds": [
      153783,
      607395
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Comments(s) deleted successfully.",
    "data": {
      "153783": {
        "success": true,
        "id": 153783,
        "message": "Deleted successfully"
      },
      "607395": {
        "success": false,
        "id": 607395,
        "message": "Not found"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Comments(s) deleted successfully.",
      "data": {
        "153783": {
          "success": true,
          "id": 153783,
          "message": "Deleted successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update Comments
Source: https://docs.velt.dev/api-reference/rest-apis/comments-feature/comments/update-comments

POST https://api.velt.dev/v1/commentannotations/comments/update

Use this API to update comments within a specific CommentAnnotation.

# Endpoint

`POST https://api.velt.dev/v1/commentannotations/comments/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID
    </ParamField>

    <ParamField body="annotationId" type="string" required>
      Comment Annotation ID
    </ParamField>

    <ParamField body="commentIds" type="number[]" required>
      Comment IDs
    </ParamField>

    <ParamField body="updatedData" type="Object" required>
      Comment data

      <Expandable title="properties">
        <ParamField body="commentText" type="string">
          Comment content in plain text string
        </ParamField>

        <ParamField body="commentHtml" type="string">
          Comment content in HTML string
        </ParamField>

        <ParamField body="from" type="User" required>
          User object from whom the comment is added
        </ParamField>

        <ParamField body="taggedUserContacts" type="Object[]">
          Array of tagged user contacts

          <Expandable title="properties">
            <ParamField body="text" type="string" required>
              Display text of the tagged user (e.g. "@Username")
            </ParamField>

            <ParamField body="userId" type="string" required>
              User ID of the tagged user
            </ParamField>

            <ParamField body="contact" type="Object" required>
              <Expandable title="properties">
                <ParamField body="email" type="string" required>
                  Email of the tagged user
                </ParamField>

                <ParamField body="name" type="string" required>
                  Name of the tagged user
                </ParamField>

                <ParamField body="userId" type="string" required>
                  User ID of the tagged user
                </ParamField>
              </Expandable>
            </ParamField>
          </Expandable>
        </ParamField>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### Update comment in a CommentAnnotation by organizationId, documentId, annotationId and commentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "annotationId": "yourAnnotationId",
    "commentIds": [
      153783,
      607395
    ],
    "updatedData": {
      "commentText": "Sample Updated Comment",
      "commentHtml": "<div>Hello Updated</div>"
    }
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Comment updated successfully.",
    "data": {
      "607395": {
        "success": true,
        "id": 607395,
        "message": "Updated successfully"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Comment updated successfully.",
      "data": {
        "607395": {
          "success": true,
          "id": 607395,
          "message": "Updated successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Add Documents
Source: https://docs.velt.dev/api-reference/rest-apis/documents/add-documents

POST https://api.velt.dev/v1/organizations/documents/add

Use this API to add documents with metadata to an organization.

# Endpoint

`POST https://api.velt.dev/v1/organizations/documents/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documents" type="Document[]" required>
      Array of Document objects
    </ParamField>

    <ParamField body="folderId" type="string" required>
      Folder ID to add the documents to.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Create new documents

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documents": [
      {
        "documentId": "yourDocumentId",
        "documentName": "Your Document Name"
      }
    ]
  }
}
```

#### 2. Create new documents in a specific folder

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documents": [
      {
        "documentId": "yourDocumentId",
        "documentName": "Your Document Name"
      }
    ],
    "folderId": "yourFolderId"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Document(s) added successfully.",
    "data": {
      "yourDocumentId": {
        "success": true,
        "id": "8121657101517513",
        "message": "Added Successfully"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Document(s) added successfully.",
      "data": {
        "yourDocumentId": {
          "success": true,
          "id": "8121657101517513",
          "message": "Added Successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete Documents
Source: https://docs.velt.dev/api-reference/rest-apis/documents/delete-documents

POST https://api.velt.dev/v1/organizations/documents/delete

Use this API to delete specific documents from an organization.

# Endpoint

`POST https://api.velt.dev/v1/organizations/documents/delete`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentIds" type="string[]" required>
      Array of Document IDs
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentIds": ["yourDocumentId1", "yourDocumentId2"]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Document(s) deleted successfully.",
    "data": {
      "yourDocumentId1": {
        "success": true,
        "id": "6737987049068973",
        "message": "Deleted Successfully"
      },
      "yourDocumentId2": {
        "success": true,
        "id": "2131443384150904",
        "message": "Document does not exist"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Document(s) deleted successfully.",
      "data": {
        "yourDocumentId1": {
          "success": true,
          "id": "6737987049068973",
          "message": "Deleted Successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Get Documents v1
Source: https://docs.velt.dev/api-reference/rest-apis/documents/get-documents

POST https://api.velt.dev/v1/organizations/documents/get

Use this API to retrieve specific documents or all documents from an organization.

<Warning>
  Use this for SDK v3 or prior versions.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/organizations/documents/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentIds" type="string[]">
      Array of Document IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get all documents from organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
  }
}
```

#### 2. Get specific documents from organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentIds": ["yourDocumentId1", "yourDocumentId2"],
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Document(s) retrieved successfully.",
    "data": [
      {
        "documentName": "yourDocumentName",
        "disabled": false,
        "accessType": "public",
        "id": "yourDocumentId",
      }
    ]
  }
}

```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Document(s) retrieved successfully.",
      "data": [
        {
          "documentName": "yourDocumentName",
          "disabled": false,
          "accessType": "public",
          "id": "yourDocumentId",
        }
      ]
    }
  }
  ```
</ResponseExample>


# Get Documents v2
Source: https://docs.velt.dev/api-reference/rest-apis/documents/get-documents-v2

POST https://api.velt.dev/v2/organizations/documents/get

Use this API to retrieve specific documents or all documents from an organization.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v2/organizations/documents/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentIds" type="string[]">
      Array of Document IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>

    <ParamField body="folderId" type="string">
      Folder ID. Filters documents by the given folder ID.
    </ParamField>

    <ParamField body="pageSize" type="number">
      Number of items to be retrieved per page. Default: 1000.
    </ParamField>

    <ParamField body="pageToken" type="string">
      Page token retrieved from previous API call.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get all documents from organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "pageSize": 20,
    "pageToken": "8740648311207869"
  }
}
```

#### 2. Get specific documents from organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentIds": ["yourDocumentId1", "yourDocumentId2"],
  }
}
```

#### 3. Get documents by organizationId, folderId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folderId": "yourFolderId"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Document(s) retrieved successfully.",
    "data": [
      {
        "documentName": "yourDocumentName",
        "disabled": false,
        "accessType": "public",
        "id": "yourDocumentId",
      }
    ],
    "pageToken": "nextPageToken"
  }
}

```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Document(s) retrieved successfully.",
      "data": [
        {
          "documentName": "yourDocumentName",
          "disabled": false,
          "accessType": "public",
          "id": "yourDocumentId",
        }
      ],
      "pageToken": "nextPageToken"
    }
  }
  ```
</ResponseExample>


# Move Documents
Source: https://docs.velt.dev/api-reference/rest-apis/documents/move-documents

POST https://api.velt.dev/v1/organizations/documents/move

Use this API to move documents to a different folder within an organization.

# Endpoint

`POST https://api.velt.dev/v1/organizations/documents/move`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentIds" type="string[]" required>
      Array of Document IDs. Limit: Only 30 IDs can be passed at a time.
    </ParamField>

    <ParamField body="folderId" type="string" required>
      ID of the folder where documents will be moved
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### Move documents to a folder

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentIds": ["yourDocumentId1", "yourDocumentId2"],
    "folderId": "targetFolderId"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Documents moved successfully."
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Documents moved successfully."
    }
  }
  ```
</ResponseExample>


# Update Access for Documents
Source: https://docs.velt.dev/api-reference/rest-apis/documents/update-document-access

POST https://api.velt.dev/v1/organizations/documents/access/update

Use this API to update the access type for a single or multiple documents at once.

<Tip>
  You can update the default access type for all the documents associated with your API Key in [console](https://console.velt.dev/dashboard/config/appconfig).
</Tip>

# Endpoint

`https://api.velt.dev/v1/organizations/documents/access/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentIds" type="string[]" required>
      Array of Document IDs
    </ParamField>

    <ParamField body="accessType" type="string" default="public" required>
      Access type for the documents. Allowed values: `organizationPrivate`, `restricted`, `public`.
      [Learn more](/key-concepts/access-control/overview).
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentIds": ["yourDocumentId1, yourDocumentId2"],
    "accessType": "organizationPrivate"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Updated access for documents successfully.",
    "data": {
      "yourDocumentId": {
        "success": true,
        "accessType": "organizationPrivate",
        "message": "Document access type updated."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Updated access for documents successfully.",
      "data": {
        "yourDocumentId": {
          "success": true,
          "accessType": "organizationPrivate",
          "message": "Document access type updated."
        }
      }
    }
  }
  ```
</ResponseExample>


# Update Disabled State for Documents
Source: https://docs.velt.dev/api-reference/rest-apis/documents/update-document-disable-state

POST https://api.velt.dev/v1/organizations/documents/access/disablestate/update

Use this API to enable or disable both read and write access for all users.

<Info> Let's say your customer's trial or subscription has ended and you want to disable their access to the Velt data, you could use this to diable access to specific documents.</Info>

# Endpoint

`https://api.velt.dev/v1/organizations/documents/access/disablestate/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentIds" type="string[]" required>
      Array of Document IDs
    </ParamField>

    <ParamField body="disabled" type="boolean" default="false" required>
      Whether to disable read and write access to the specified documents. Allowed values: `true`, `false`
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentIds": ["yourDocumentId"],
    "disabled": true
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Updated disable state for documents successfully.",
    "data": {
      "yourDocumentId": {
        "success": true,
        "disabled": true,
        "message": "Document disabled state updated."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Updated disable state for documents successfully.",
      "data": {
        "yourDocumentId": {
          "success": true,
          "disabled": true,
          "message": "Document disabled state updated."
        }
      }
    }
  }
  ```
</ResponseExample>


# Update Documents
Source: https://docs.velt.dev/api-reference/rest-apis/documents/update-documents

POST https://api.velt.dev/v1/organizations/documents/update

Use this API to update metadata of documents within an organization.

# Endpoint

`POST https://api.velt.dev/v1/organizations/documents/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documents" type="Document[]" required>
      Array of Document objects
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documents": [
      {
        "documentId": "yourDocumentId",
        "documentName": "Your Document Name"
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Document(s) updated successfully.",
    "data": {
      "yourDocumentId": {
        "success": true,
        "id": "8121657101517513",
        "message": "Updated Successfully"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Document(s) updated successfully.",
      "data": {
        "yourDocumentId": {
          "success": true,
          "id": "8121657101517513",
          "message": "Updated Successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Add Folder
Source: https://docs.velt.dev/api-reference/rest-apis/folders/add-folder

POST https://api.velt.dev/v1/organizations/folders/add

Use this API to create a new folder in an organization.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/organizations/folders/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="folders" type="Folders[]" required>
      <Expandable title="properties">
        <ParamField body="folderId" type="string" required>
          Unique identifier for the new folder
        </ParamField>

        <ParamField body="folderName" type="string">
          Name of the folder
        </ParamField>

        <ParamField body="parentFolderId" type="string">
          ID of the parent folder
        </ParamField>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folders": [
      {
        "folderId": "yourFolderId", 
        "folderName": "yourFolderName",
        "parentFolderId": "yourParentFolderId"
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Folder created successfully.",
    "data": {
      "yourFolderId": {
        "success": true,
        "id": "yourFolderId",
        "message": "Folder added."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Folder created successfully.",
      "data": {
        "yourFolderId": {
          "success": true,
          "id": "yourFolderId",
          "message": "Folder added."
        }
      }
    }
  }
  ```
</ResponseExample>


# Get Folders
Source: https://docs.velt.dev/api-reference/rest-apis/folders/get-folders

POST https://api.velt.dev/v1/organizations/folders/get

Use this API to retrieve the given folder's metadata and its subfolders.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/organizations/folders/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="folderId" type="string">
      Folder ID to retrieve a specific folder and its subfolders. If not provided, all folders in the organization will be retrieved.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get all folders in organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId"
  }
}
```

#### 2. Get specific folder in an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folderId": "yourFolderId"
  }
}
```

# Response

#### Success Response for All Folders

```JSON
{
  "result": {
    "status": "success",
    "message": "Folders retrieved successfully.",
    "data": [
      {
        "folderId": "folderId1",
        "folderName": "Folder 1",
        "organizationId": "yourOrganizationId",
        "parentFolderId": "root",
        "createdAt": 1738695615706,
        "lastUpdated": 1738696287859
      },
      {
        "folderId": "folderId2",
        "folderName": "Folder 2",
        "organizationId": "yourOrganizationId",
        "parentFolderId": "root",
        "createdAt": 1738695077691,
        "lastUpdated": 1738695077691
      }
    ]
  }
}
```

#### Success Response for Specific Folder

```JSON
{
  "result": {
    "status": "success",
    "message": "Folders retrieved successfully.",
    "data": [
      {
        "folderId": "folderId1",
        "folderName": "Folder 1",
        "organizationId": "yourOrganizationId",
        "parentFolderId": "root",
        "createdAt": 1738695077691,
        "lastUpdated": 1738695077691,
        "subFolders": [
          {
            "folderId": "childFolderId1",
            "folderName": "Child Folder 1",
            "organizationId": "yourOrganizationId",
            "parentFolderId": "folderId1",
            "createdAt": 1738695615706,
            "lastUpdated": 1738698727591
          }
        ]
      }
    ]
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Folders retrieved successfully.",
      "data": [
        {
          "folderId": "folderId1",
          "folderName": "Folder 1",
          "organizationId": "yourOrganizationId",
          "parentFolderId": "root",
          "createdAt": 1738695077691,
          "lastUpdated": 1738695077691,
          "subFolders": [
            {
              "folderId": "childFolderId1",
              "folderName": "Child Folder 1",
              "organizationId": "yourOrganizationId",
              "parentFolderId": "folderId1",
              "createdAt": 1738695615706,
              "lastUpdated": 1738698727591
            }
          ]
        }
      ]
    }
  }
  ```
</ResponseExample>


# Update Folder
Source: https://docs.velt.dev/api-reference/rest-apis/folders/update-folder

POST https://api.velt.dev/v1/organizations/folders/update

Use this API to:

1. update metadata of a folder within an organization.
2. move a folder and its contents to a different parent folder.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/organizations/folders/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="folders" type="Folders[]" required>
      <Expandable title="properties">
        <ParamField body="folderId" type="string" required>
          Unique identifier for the new folder
        </ParamField>

        <ParamField body="folderName" type="string">
          Name of the folder
        </ParamField>

        <ParamField body="parentFolderId" type="string">
          ID of the parent folder
        </ParamField>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

## **Example Request**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folders": [
        {
          "folderId": "yourFolderId", 
          "folderName": "yourFolderName",
          "parentFolderId": "yourParentFolderId"
        }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
   "result": {
       "status": "success",
       "message": "Folder Updated successfully.",
       "data": {
           "yourFolderId": {
               "success": true,
               "id": "yourFolderId",
               "message": "Folder Updated."
           }
       }
   }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
     "result": {
         "status": "success",
         "message": "Folder Updated successfully.",
         "data": {
             "yourFolderId": {
                 "success": true,
                 "id": "yourFolderId",
                 "message": "Folder Updated."
             }
         }
     }
  }
  ```
</ResponseExample>


# Update Access for Folders
Source: https://docs.velt.dev/api-reference/rest-apis/folders/update-folder-access

POST https://api.velt.dev/v1/organizations/folders/access/update

Use this API to update the access type for a single or multiple folders at once.

<Tip>
  You can update the default access type for all the folders associated with your API Key in [console](https://console.velt.dev/dashboard/config/appconfig).
</Tip>

# Endpoint

`https://api.velt.dev/v1/organizations/folders/access/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="folderIds" type="string[]" required>
      Array of Folder IDs
    </ParamField>

    <ParamField body="accessType" type="string" default="public" required>
      Access type for the folders. Allowed values: `organizationPrivate`, `restricted`, `public`.
      [Learn more](/key-concepts/access-control/overview).
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folderIds": ["yourFolderId1, yourFolderId2"],
    "accessType": "organizationPrivate"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Updated access for folders successfully.",
    "data": {
      "yourFolderId": {
        "success": true,
        "accessType": "organizationPrivate",
        "message": "Folder access type updated."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Updated access for folders successfully.",
      "data": {
        "yourFolderId": {
          "success": true,
          "accessType": "organizationPrivate",
          "message": "Folder access type updated."
        }
      }
    }
  }
  ```
</ResponseExample>


# Broadcast Event
Source: https://docs.velt.dev/api-reference/rest-apis/livestate/broadcast-event

POST https://api.velt.dev/v1/livestate/broadcast

Use this API to broadcast live state events to any document. Use it with the [Live State](/realtime-collaboration/live-state-sync/setup#get-live-data) feature.

# Endpoint

`POST https://api.velt.dev/v1/livestate/broadcast`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body Parameters

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID where the document belongs
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID to broadcast the event to
    </ParamField>

    <ParamField body="liveStateDataId" type="string" required>
      Unique identifier for the live state data
    </ParamField>

    <ParamField body="data" type="Object" required>
      The data to broadcast. Can be any valid serializable JSON object.
    </ParamField>

    <ParamField body="merge" type="boolean" default="false">
      If true, merges the new data with existing data instead of replacing it
    </ParamField>
  </Expandable>
</ParamField>

## Example Request

```JSON
{
  "organizationId": "YOUR_ORGANIZATION_ID",
  "documentId": "YOUR_DOCUMENT_ID",
  "liveStateDataId": "sample_live_state_data_id",
  "data": {
    "status": "active",
    "message": "Hello World",
    "customField": "custom value"
  },
  "merge": true
}
```

# Response

## Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Event broadcasted successfully.",
    "data": {
      "success": true
    }
  }
}
```

## Error Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "ERROR_CODE"
  }
}
```

<ResponseExample>
  ```json
  {
    "result": {
      "status": "success",
      "message": "Event broadcasted successfully.",
      "data": {
        "success": true
      }
    }
  }
  ```
</ResponseExample>


# Add Notifications
Source: https://docs.velt.dev/api-reference/rest-apis/notifications/add-notifications

POST https://api.velt.dev/v1/notifications/add

Use this API to add notifications.

# Endpoint

`POST https://api.velt.dev/v1/notifications/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string" required>
      Document ID
    </ParamField>

    <ParamField body="actionUser" type="User" required>
      User who took the action
    </ParamField>

    <ParamField body="notificationId" type="string">
      Notification ID. If not provided, Velt will generate a random ID.
      Use this if you want more control on the ID being set and prevent duplicate notifications.
      Only the special characters `_`, `-` are allowed.
    </ParamField>

    <ParamField body="displayHeadlineMessageTemplate" type="string" required>
      Display Headline Message Template
    </ParamField>

    <ParamField body="displayHeadlineMessageTemplateData" type="object">
      Display Headline Message Template Data (Optional)

      <Expandable title="properties">
        <ParamField body="actionUser" type="User">
          User who took the action
        </ParamField>

        <ParamField body="recipientUser" type="string">
          User who was directly affected by the action
        </ParamField>

        <ParamField body="yourCustomField" type="string">
          Any custom field with string value
        </ParamField>
      </Expandable>
    </ParamField>

    <ParamField body="displayBodyMessage" type="string" required>
      Display Body Message
    </ParamField>

    <ParamField body="notifyUsers" type="User[]" required>
      Array of Notify Users
    </ParamField>

    <ParamField body="notifyAll" type="boolean">
      Default is true.
      If set to true, the notification will be sent to all users in the organization.
      If set to false, the notification will be sent to only the users specified in the `notifyUsers` array.
    </ParamField>

    <ParamField body="notificationSourceData" type="object">
      Any custom object to be stored with the notification.
      When the user clicks on the notification, this data will be sent in the callback.
    </ParamField>

    <ParamField body="createDocument" type="boolean">
      If set to true, a new document will be created before the notification is created.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Request**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "actionUser": {
      "userId": "yourUserId",
      "name": "User Name",
      "email": "user@example.com"
    },
    "displayHeadlineMessageTemplate": "This is main template, you can pass variables using curly brackets like this: {actionUser}, {recipientUser}, {yourCustomVariableWithStringValue}",
    "displayHeadlineMessageTemplateData": {
      "actionUser": {
        "userId": "yourUserId",
        "name": "User Name",
        "email": "user@example.com"
      },
      "recipientUser": {
        "userId": "recipientUserId",
        "name": "Recipient Name",
        "email": "recipient@example.com"
      },
      "yourCustomField": "Variable will be replaced with this text"
    },
    "displayBodyMessage": "This is body message (Secondary message)",
    "notifyUsers": [
      {
        "email": "test@example.com",
        "userId": "testingUserId"
      },
      {
        "userId": "yourUserId",
        "name": "User Name",
        "email": "user@example.com"
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Notification added successfully.",
    "data": {
      "success": true,
      "message": "Notification added successfully."
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Notification added successfully.",
      "data": {
        "success": true,
        "message": "Notification added successfully."
      }
    }
  }
  ```
</ResponseExample>


# Delete Notifications
Source: https://docs.velt.dev/api-reference/rest-apis/notifications/delete-notifications

POST https://api.velt.dev/v1/notifications/delete

Use this API to delete notifications.

# Endpoint

`POST https://api.velt.dev/v1/notifications/delete`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID (Optional)
    </ParamField>

    <ParamField body="locationId" type="string">
      Location ID (Optional)
    </ParamField>

    <ParamField body="userId" type="string">
      User ID (Optional)
    </ParamField>

    <ParamField body="notificationIds" type="string[]">
      Array of Notification IDs (Optional)
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Delete by organizationId and documentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId"
  }
}
```

#### 2. Delete by organizationId, documentId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 3. Delete by organizationId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId"
  }
}
```

#### 4. Delete by organizationId, userId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 5. Delete by organizationId, documentId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userId": "yourUserId"
  }
}
```

#### 6. Delete by organizationId, documentId, userId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userId": "yourUserId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 7.Delete by organizationId, documentId and locationId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationId": "yourLocationId"
  }
}
```

#### 8. Delete by organizationId, documentId, locationId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationId": "yourLocationId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 9. Delete by organizationId, locationId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "locationId": "yourLocationId",
    "userId": "yourUserId",
  }
}
```

#### 10. Delete by organizationId, locationId, userId, and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "locationId": "yourLocationId",
    "userId": "yourUserId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 11. Delete by organizationId, documentId, locationId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationId": "yourLocationId",
    "userId": "yourUserId",
  }
}
```

# Response

#### Success Response

```JSON
{
   "result": {
       "status": "success",
       "message": "Notification(s) deleted successfully.",
       "data": {
           "8955243231506071": {
               "success": true,
               "message": "Notification deleted."
           }
       }
   }
}
```

#### When some notifications are not found

```JSON
{
   "result": {
       "status": "success",
       "message": "Notification(s) deleted successfully.",
       "data": {
           "89552432315060712": {
               "success": false,
               "message": "Failed to delete notification."
           },
           "8955243231506071": {
               "success": true,
               "message": "Notification deleted."
           }
       }
   }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
     "result": {
         "status": "success",
         "message": "Notification(s) deleted successfully.",
         "data": {
             "8955243231506071": {
                 "success": true,
                 "message": "Notification deleted."
             }
         }
     }
  }
  ```
</ResponseExample>


# Get Notifications v1
Source: https://docs.velt.dev/api-reference/rest-apis/notifications/get-notifications

POST https://api.velt.dev/v1/notifications/get

Use this API to retrieve notifications.

<Warning>
  Use this for SDK v3 or prior versions.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/notifications/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID
    </ParamField>

    <ParamField body="locationId" type="string">
      Location ID
    </ParamField>

    <ParamField body="userId" type="string">
      User ID
    </ParamField>

    <ParamField body="notificationIds" type="string[]">
      Array of Notification IDs. Limit: Only 30 items can be passed at a time.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get by organizationId, documentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId"
  }
}
```

#### 2. Get by organizationId, documentId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 3. Get by organizationId, documentId and locationId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationId": "yourLocationId"
  }
}
```

#### 4. Get by organizationId, documentId, locationId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationId": "yourLocationId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 5. Get by organizationId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId"
  }
}
```

#### 6. Get by organizationId, userId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 7. Get by organizationId, documentId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userId": "yourUserId"
  }
}
```

#### 8. Get by organizationId, locationId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId",
    "locationId": "yourLocationId"
  }
}
```

#### 9. Get by organizationId, documentId, locationId, and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userId": "yourUserId",
    "locationId": "yourLocationId"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Notification(s) retrieved successfully.",
    "data": [
      {
        "id": "notificationId",
        "notificationSource": "custom",
        "notificationSourceData": {}, //The data of the notification source. e.g., CommentAnnotation
        "actionUser": {
          "email": "user@example.com",
          "name": "User Name",
          "userId": "yourUserId"
        },
        "displayBodyMessage": "This is body message (Secondary message)",
        "displayHeadlineMessageTemplate": "This is main template, you can pass variables using curly brackets like this: {actionUser}, {recipientUser}, {yourCustomVariableWithStringValue}",
        "displayHeadlineMessageTemplateData": {
          "actionUser": {
            "email": "user@example.com",
            "name": "User Name",
            "userId": "yourUserId"
          },
          "recipientUser": {
            "email": "recipient@example.com",
            "name": "Recipient Name",
            "userId": "recipientUserId"
          },
          "yourCustomVariableWithStringValue": "Variable will be replaced with this text"
        },
        "metadata": {
          "apiKey": "yourApiKey",
          "documentId": "yourDocumentId",
          "organizationId": "yourOrganizationId"
        },
        "notifyUsers": {
          "yourNotifyUserId": true
        },
        "notifyUsersByUserId": {
          "yourNotifyUserById": true
        },
        "timestamp": 1722409519944
      }
    ]
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Notification(s) retrieved successfully.",
      "data": [
        {
          "id": "notificationId",
          "notificationSource": "custom",
          "notificationSourceData": {}, //The data of the notification source. e.g., CommentAnnotation
          "actionUser": {
            "email": "user@example.com",
            "name": "User Name",
            "userId": "yourUserId"
          },
          "displayBodyMessage": "This is body message (Secondary message)",
          "displayHeadlineMessageTemplate": "This is main template, you can pass variables using curly brackets like this: {actionUser}, {recipientUser}, {yourCustomVariableWithStringValue}",
          "displayHeadlineMessageTemplateData": {
            "actionUser": {
              "email": "user@example.com",
              "name": "User Name",
              "userId": "yourUserId"
            },
            "recipientUser": {
              "email": "recipient@example.com",
              "name": "Recipient Name",
              "userId": "recipientUserId"
            },
            "yourCustomVariableWithStringValue": "Variable will be replaced with this text"
          },
          "metadata": {
            "apiKey": "yourApiKey",
            "documentId": "yourDocumentId",
            "organizationId": "yourOrganizationId"
          },
          "notifyUsers": {
            "yourNotifyUserId": true
          },
          "notifyUsersByUserId": {
            "yourNotifyUserById": true
          },
          "timestamp": 1722409519944
        }
      ]
    }
  }
  ```
</ResponseExample>


# Get Notifications v2
Source: https://docs.velt.dev/api-reference/rest-apis/notifications/get-notifications-v2

POST https://api.velt.dev/v2/notifications/get

Use this API to retrieve notifications.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v2/notifications/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID. Either pass this or userId.
    </ParamField>

    <ParamField body="locationId" type="string">
      Location ID
    </ParamField>

    <ParamField body="userId" type="string">
      User ID. Either pass this or documentId.
    </ParamField>

    <ParamField body="notificationIds" type="string[]">
      Array of Notification IDs. Limit: Only 30 items can be passed at a time.
    </ParamField>

    <ParamField body="pageSize" type="number">
      Number of items to be retrieved per page. Default: 1000.
    </ParamField>

    <ParamField body="pageToken" type="string">
      Page token retrieved from previous API call.
    </ParamField>

    <ParamField body="order" type="'asc' | 'desc'">
      Order of the notifications based on timestamp. Default: desc.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get by organizationId, documentId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "pageSize": 20,
    "pageToken": "8740648311207869"
  }
}
```

#### 2. Get by organizationId, documentId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 3. Get by organizationId, documentId and locationId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationId": "yourLocationId",
    "pageSize": 20,
    "pageToken": "8740648311207869"
  }
}
```

#### 4. Get by organizationId, documentId, locationId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "locationId": "yourLocationId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 5. Get by organizationId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId",
    "pageSize": 20,
    "pageToken": "8740648311207869"
  }
}
```

#### 6. Get by organizationId, userId and notificationIds

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId",
    "notificationIds": [
      "yourNotificationId"
    ]
  }
}
```

#### 7. Get by organizationId, documentId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userId": "yourUserId",
    "pageSize": 20,
    "pageToken": "8740648311207869"
  }
}
```

#### 8. Get by organizationId, locationId and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId",
    "locationId": "yourLocationId",
    "pageSize": 20,
    "pageToken": "8740648311207869"
  }
}
```

#### 9. Get by organizationId, documentId, locationId, and userId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userId": "yourUserId",
    "locationId": "yourLocationId",
    "pageSize": 20,
    "pageToken": "8740648311207869"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Notification(s) retrieved successfully.",
    "data": [
      {
        "id": "notificationId",
        "notificationSource": "custom",
        "notificationSourceData": {}, //The data of the notification source. e.g., CommentAnnotation
        "actionUser": {
          "email": "user@example.com",
          "name": "User Name",
          "userId": "yourUserId"
        },
        "displayBodyMessage": "This is body message (Secondary message)",
        "displayHeadlineMessageTemplate": "This is main template, you can pass variables using curly brackets like this: {actionUser}, {recipientUser}, {yourCustomVariableWithStringValue}",
        "displayHeadlineMessageTemplateData": {
          "actionUser": {
            "email": "user@example.com",
            "name": "User Name",
            "userId": "yourUserId"
          },
          "recipientUser": {
            "email": "recipient@example.com",
            "name": "Recipient Name",
            "userId": "recipientUserId"
          },
          "yourCustomVariableWithStringValue": "Variable will be replaced with this text"
        },
        "metadata": {
          "apiKey": "yourApiKey",
          "documentId": "yourDocumentId",
          "organizationId": "yourOrganizationId"
        },
        "notifyUsers": {
          "yourNotifyUserId": true
        },
        "notifyUsersByUserId": {
          "yourNotifyUserById": true
        },
        "timestamp": 1722409519944
      }
    ],
    "pageToken": "nextPageToken"
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Notification(s) retrieved successfully.",
      "data": [
        {
          "id": "notificationId",
          "notificationSource": "custom",
          "notificationSourceData": {}, //The data of the notification source. e.g., CommentAnnotation
          "actionUser": {
            "email": "user@example.com",
            "name": "User Name",
            "userId": "yourUserId"
          },
          "displayBodyMessage": "This is body message (Secondary message)",
          "displayHeadlineMessageTemplate": "This is main template, you can pass variables using curly brackets like this: {actionUser}, {recipientUser}, {yourCustomVariableWithStringValue}",
          "displayHeadlineMessageTemplateData": {
            "actionUser": {
              "email": "user@example.com",
              "name": "User Name",
              "userId": "yourUserId"
            },
            "recipientUser": {
              "email": "recipient@example.com",
              "name": "Recipient Name",
              "userId": "recipientUserId"
            },
            "yourCustomVariableWithStringValue": "Variable will be replaced with this text"
          },
          "metadata": {
            "apiKey": "yourApiKey",
            "documentId": "yourDocumentId",
            "organizationId": "yourOrganizationId"
          },
          "notifyUsers": {
            "yourNotifyUserId": true
          },
          "notifyUsersByUserId": {
            "yourNotifyUserById": true
          },
          "timestamp": 1722409519944
        }
      ],
      "pageToken": "nextPageToken"
    }
  }
  ```
</ResponseExample>


# Update Notifications
Source: https://docs.velt.dev/api-reference/rest-apis/notifications/update-notifications

POST https://api.velt.dev/v1/notifications/update

Use this API to update notifications.

# Endpoint

`POST https://api.velt.dev/v1/notifications/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID (Optional)
    </ParamField>

    <ParamField body="locationId" type="string">
      Location ID
    </ParamField>

    <ParamField body="userId" type="string">
      User ID  (Optional)
    </ParamField>

    <ParamField body="notifications" type="object">
      Notifications object

      <Expandable title="properties">
        <ParamField body="id" type="string">
          Notification ID
        </ParamField>

        <ParamField body="actionUser" type="User">
          User who took the action
        </ParamField>

        <ParamField body="displayHeadlineMessageTemplate" type="string">
          Display Headline Message Template
        </ParamField>

        <ParamField body="displayHeadlineMessageTemplateData" type="object">
          Display Headline Message Template Data

          <Expandable title="properties">
            <ParamField body="actionUser" type="User">
              User who took the action
            </ParamField>

            <ParamField body="recipientUser" type="string">
              User who was directly affected by the action
            </ParamField>

            <ParamField body="yourCustomField" type="string">
              Any custom field with string value
            </ParamField>
          </Expandable>
        </ParamField>

        <ParamField body="displayBodyMessage" type="string">
          Display Body Message
        </ParamField>

        <ParamField body="notificationSourceData" type="object">
          Any custom object to be stored with the notification.
          When the user clicks on the notification, this data will be sent to in the callback.
        </ParamField>
      </Expandable>
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Update by organizationId and documentId

```JSON
{
   "data": {
       "organizationId": "yourOrganizationId",
       "documentId": "yourDocumentId",
       "notifications": [
           {
               "id": "yourNotificationId",
               "displayBodyMessage": "This is body message (Secondary message)",
           }
       ]
   }
}
```

#### 2. Update by organizationId, documentId and locationId

```JSON
{
   "data": {
       "organizationId": "yourOrganizationId",
       "documentId": "yourDocumentId",
       "locationId": "yourLocationId",
       "notifications": [
           {
               "id": "yourNotificationId",
               "displayBodyMessage": "This is body message (Secondary message)",
           }
       ]
   }
}
```

#### 3. Update by organizationId, documentId and userId

```JSON
{
   "data": {
       "organizationId": "yourOrganizationId",
       "documentId": "yourDocumentId",
       "userId": "yourUserId",
       "notifications": [
           {
               "id": "yourNotificationId",
               "displayBodyMessage": "This is body message (Secondary message)",
           }
       ]
   }
}
```

#### 4. Update by organizationId and userId

```JSON
{
   "data": {
       "organizationId": "yourOrganizationId",
       "userId": "yourUserId",
       "notifications": [
           {
               "id": "yourNotificationId",
               "displayBodyMessage": "This is body message (Secondary message)",
           }
       ]
   }
}
```

#### 5. Update by organizationId, documentId, locationId and userId

```JSON
{
   "data": {
       "organizationId": "yourOrganizationId",
       "documentId": "yourDocumentId",
       "userId": "yourUserId",
       "locationId": "yourLocationId",
       "notifications": [
           {
               "id": "yourNotificationId",
               "displayBodyMessage": "This is body message (Secondary message)",
           }
       ]
   }
}
```

# Response

#### Success Response

```JSON
{
   "result": {
       "status": "success",
       "message": "Notification(s) updated successfully.",
       "data": {
           "5471488637912692": {
               "success": true,
               "message": "Notification updated."
           }
       }
   }
}
```

#### When some notifications are not found

```JSON
{
   "result": {
       "status": "success",
       "message": "Notification(s) updated successfully.",
       "data": {
           "5471488637912692": {
               "success": false,
               "message": "Failed to update notification."
           },
           "5471488637912693": {
               "success": true,
               "message": "Notification updated."
           }
       }
   }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
     "result": {
         "status": "success",
         "message": "Notification(s) updated successfully.",
         "data": {
             "5471488637912692": {
                 "success": true,
                 "message": "Notification updated."
             }
         }
     }
  }
  ```
</ResponseExample>


# Add User Groups
Source: https://docs.velt.dev/api-reference/rest-apis/organization-user-groups/add-groups

POST https://api.velt.dev/v1/organizations/usergroups/add

Use this API to add organization user groups to a specific organization.

# Endpoint

`POST https://api.velt.dev/v1/organizations/usergroups/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="organizationUserGroups" type="OrganizationUserGroup[]" required>
      Array of Organization User Group objects
    </ParamField>
  </Expandable>
</ParamField>

## **Example Request**

#### Add organization user group in a specific organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "organizationUserGroups": [
      {
        "groupId": "engineering",
        "groupName": "Engineering"
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Organization User Groups added successfully.",
    "data": {
      "yourGroupId": {
        "success": true,
        "id": "77ab6767b022ad0323ba39c24f12cc95",
        "message": "Organization user group added."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Organization User Groups added successfully.",
      "data": {
        "yourGroupId": {
          "success": true,
          "id": "77ab6767b022ad0323ba39c24f12cc95",
          "message": "Organization user group added."
        }
      }
    }
  }
  ```
</ResponseExample>


# Add Users to Groups
Source: https://docs.velt.dev/api-reference/rest-apis/organization-user-groups/add-users-to-group

POST https://api.velt.dev/v1/organizations/usergroups/users/add

Use this API to add users to a specific organization user group.

# Endpoint

`POST https://api.velt.dev/v1/organizations/usergroups/users/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="organizationUserGroupId" type="string" required>
      Organization User Group ID
    </ParamField>

    <ParamField body="userIds" type="string[]" required>
      Array of User IDs
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "organizationUserGroupId": "yourGroupId",
    "userIds": ["yourUserId1"]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Added organization users to group successfully.",
    "data": {
      "yourUserId1": {
        "success": true,
        "organizationUserGroupId": "yourGroupId",
        "message": "User added to organization user group."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Added organization users to group successfully.",
      "data": {
        "yourUserId1": {
          "success": true,
          "organizationUserGroupId": "yourGroupId",
          "message": "User added to organization user group."
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete Users from Groups
Source: https://docs.velt.dev/api-reference/rest-apis/organization-user-groups/delete-users-from-group

POST https://api.velt.dev/v1/organizations/usergroups/users/delete

Use this API to delete users from a specific organization user group.

# Endpoint

`POST https://api.velt.dev/v1/organizations/usergroups/users/delete`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="organizationUserGroupId" type="string" required>
      Organization User Group ID
    </ParamField>

    <ParamField body="userIds" type="string[]" required>
      Array of User IDs
    </ParamField>

    <ParamField body="deleteAll" type="boolean" required>
      If true, all users in the group will be deleted.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### Delete specific users from group

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "organizationUserGroupId": "yourGroupId",
    "userIds": ["yourUserId1"]
  }
}
```

#### Delete all users from group

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "organizationUserGroupId": "yourGroupId",
    "deleteAll": true
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Deleted users from group successfully.",
    "data": {
      "yourUserId1": {
        "success": true,
        "organizationUserGroupId": "yourGroupId",
        "message": "User deleted from organization user group."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Deleted users from group successfully.",
      "data": {
        "yourUserId1": {
          "success": true,
          "organizationUserGroupId": "yourGroupId",
          "message": "User deleted from organization user group."
        }
      }
    }
  }
  ```
</ResponseExample>


# Add Organizations
Source: https://docs.velt.dev/api-reference/rest-apis/organizations/add-organizations

POST https://api.velt.dev/v1/organizations/add

Use this API to add new organizations and its metadata.

# Endpoint

`POST https://api.velt.dev/v1/organizations/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizations" type="Organization[]" required>
      Array of Organization objects
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### Add organization

```JSON
{
  "data": {
    "organizations": [
      {
        "organizationId": "yourOrganizationId",
        "organizationName": "Your Organization Name"
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Organization(s) added successfully.",
    "data": {
      "yourOrganizationId": {
        "success": true,
        "id": "02cf91e5e7a5f4c0b600c84cf248384b",
        "message": "Added Successfully"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Organization(s) added successfully.",
      "data": {
        "yourOrganizationId": {
          "success": true,
          "id": "02cf91e5e7a5f4c0b600c84cf248384b",
          "message": "Added Successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete Organizations
Source: https://docs.velt.dev/api-reference/rest-apis/organizations/delete-organizations

POST https://api.velt.dev/v1/organizations/delete

Use this API to delete specific organization(s) data by their IDs.

# Endpoint

`POST https://api.velt.dev/v1/organizations/delete`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationIds" type="string[]" required>
      Array of Organization IDs
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### Delete specific organization

```JSON
{
  "data": {
    "organizationIds": [
      "yourOrganizationId1",
      "yourOrganizationId2"
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Organization(s) deleted successfully.",
    "data": {
      "yourOrganizationId1": {
        "success": true,
        "id": "02cf91e5e7a5f4c0b600c84cf248384b",
        "message": "Deleted Successfully"
      },
      {
      "yourOrganizationId2": {
        "success": false,
        "id": "02cf91e5e7a5f4c0b600c84cf248384b",
        "message": "Organization does not exist"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Organization(s) deleted successfully.",
      "data": {
        "yourOrganizationId": {
          "success": true,
          "id": "02cf91e5e7a5f4c0b600c84cf248384b",
          "message": "Deleted Successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Get Organizations v1
Source: https://docs.velt.dev/api-reference/rest-apis/organizations/get-organizations

POST https://api.velt.dev/v1/organizations/get

Use this API to retrieve specific organizations by organization IDs.

<Warning>
  Use this for SDK v3 or prior versions.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/organizations/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationIds" type="string[]">
      Array of Organization IDs (Optional).
      Limit: Only 30 IDs can be passed at a time.
      If this is not provided, all organizations will be returned.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationIds": [
      "yourOrganizationId"
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Organization(s) retrieved successfully.",
    "data": [
      {
        "id": "yourOrganizationId",
        "organizationName": "Your Organization Name",
        "disabled": false,
        // other metadata fields may be included here
      }
      // ... more organizations if multiple were retrieved
    ]
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Organization(s) retrieved successfully.",
      "data": [
        {
          "id": "yourOrganizationId",
          "organizationName": "Your Organization Name",
          "disabled": false,
          // other metadata fields may be included here
        }
        // ... more organizations if multiple were retrieved
      ]
    }
  }
  ```
</ResponseExample>


# Get Organizations v2
Source: https://docs.velt.dev/api-reference/rest-apis/organizations/get-organizations-v2

POST https://api.velt.dev/v2/organizations/get

Use this API to retrieve specific organizations by organization IDs.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v2/organizations/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationIds" type="string[]">
      Array of Organization IDs (Optional).
      Limit: Only 30 IDs can be passed at a time.
      If this is not provided, all organizations will be returned.
    </ParamField>

    <ParamField body="pageSize" type="number">
      Number of items to be retrieved per page (Optional). Default: 1000.
    </ParamField>

    <ParamField body="pageToken" type="string">
      Page token retrieved from previous API call. (Optional)
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationIds": [
      "yourOrganizationId"
    ],
    "pageSize": 1000,
    "pageToken": "pageToken"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Organization(s) retrieved successfully.",
    "data": [
      {
        "id": "yourOrganizationId",
        "organizationName": "Your Organization Name",
        "disabled": false,
        // other metadata fields may be included here
      }
      // ... more organizations if multiple were retrieved
    ],
    "nextPageToken": "pageToken"
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Organization(s) retrieved successfully.",
      "data": [
        {
          "id": "yourOrganizationId",
          "organizationName": "Your Organization Name",
          "disabled": false,
          // other metadata fields may be included here
        }
        // ... more organizations if multiple were retrieved
      ],
      "nextPageToken": "pageToken"
    }
  }
  ```
</ResponseExample>


# Update Disabled State for Organizations
Source: https://docs.velt.dev/api-reference/rest-apis/organizations/update-organization-disable-state

POST https://api.velt.dev/v1/organizations/access/disablestate/update

Use this API to enable or disable both read and write access for all documents for all users.

<Info> Let's say your customer's trial or subscription has ended and you want to disable their access to the Velt data, you could use this to disable access to the entire organization data.</Info>
<Info>If organization does not exist, it will be created.</Info>

# Endpoint

`POST https://api.velt.dev/v1/organizations/access/disablestate/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationIds" type="string[]" required>
      Array of Organization IDs
    </ParamField>

    <ParamField body="disabled" type="boolean" required>
      Whether to disable read and write access to the specified organizations. Allowed values: `true`, `false`.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizationIds": ["yourOrganizationId1","yourOrganizationId2"],
    "disabled": true
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Updated disable state for Organization(s) successfully.",
    "data": {
      "yourOrganizationId1": {
        "success": true,
        "id": "02cf91e5e7a5f4c0b600c84cf248384b",
        "message": "Updated disable state for organization Successfully"
      },
      "yourOrganizationId2": {
        "success": false,
        "id": "44e0132f4c6b0d453f18df42d2263b4e",
        "message": "Organization does not exist"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Updated disable state for Organization(s) successfully.",
      "data": {
        "yourOrganizationId": {
          "success": true,
          "id": "02cf91e5e7a5f4c0b600c84cf248384b",
          "message": "Updated disable state for organization Successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Update Organizations
Source: https://docs.velt.dev/api-reference/rest-apis/organizations/update-organizations

POST https://api.velt.dev/v1/organizations/update

Use this API to update existing organization(s) metadata.

# Endpoint

`POST https://api.velt.dev/v1/organizations/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizations" type="Organization[]" required>
      Array of Organization objects
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

```JSON
{
  "data": {
    "organizations": [
      {
        "organizationId": "yourOrganizationId",
        "organizationName": "Your Updated Organization Name"
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "Organization(s) updated successfully.",
    "data": {
      "yourOrganizationId": {
        "success": true,
        "id": "02cf91e5e7a5f4c0b600c84cf248384b",
        "message": "Updated Successfully"
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Organization(s) updated successfully.",
      "data": {
        "yourOrganizationId": {
          "success": true,
          "id": "02cf91e5e7a5f4c0b600c84cf248384b",
          "message": "Updated Successfully"
        }
      }
    }
  }
  ```
</ResponseExample>


# Add Users
Source: https://docs.velt.dev/api-reference/rest-apis/users/add-users

POST https://api.velt.dev/v1/users/add

Use this API to add Users to:

1. **Organization:** This will provide them access to all the documents in the organization unless the document has `restricted` access type. It will also show users in the contact list of the organization.
2. **Folder:** This will provide them access to all the documents in the folder. If you pass the `folderId`, then the users will be added to the folder and not the organization.
3. **Document:** This will provide them access to the specified document. It will also show users in the contact list of the document. If you pass the `documentId`, then the users will be added to the document and not the organization or folder.

<Info>
  * If organization does not exist, it will be created.
  * If you provide documentId or folderId, then the users will only be added at that level and not at the organization level. To also add users at the organization level, you will need to call this API again with only the organizationId.
  * If User's `initial` is not provided in the User object, then it will be automatically created using the name field.
</Info>

# Endpoint

`POST https://api.velt.dev/v1/users/add`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID. Provide this if you want to add users to a specific document.
    </ParamField>

    <ParamField body="folderId" type="string">
      Folder ID. Provide this if you want to add users to a specific folder. Either provide `documentId` or `folderId`.
    </ParamField>

    <ParamField body="users" type="User[]" required>
      Array of [User](/api-reference/sdk/models/data-models#user) objects.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Add users to a specific organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "users": [
      {
        "userId": "yourUserId1",
        "name": "User Name",
        "email": "user@email.com"
      }
    ]
  }
}
```

#### 2. Add users to a specific document within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "users": [
      {
        "userId": "yourUserId1",
        "name": "User Name",
        "email": "user@email.com"
      }
    ]
  }
}
```

#### 3. Add users to a specific folder within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folderId": "yourFolderId",
    "users": [
      {
        "userId": "yourUserId1",
        "name": "User Name",
        "email": "user@email.com"
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) processed successfully.",
    "data": {
      "yourUserId1": {
        "success": true,
        "id": "4c250058149d6c9fb8c894c9ef29c790",
        "message": "User added."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "User(s) processed successfully.",
      "data": {
        "yourUserId1": {
          "success": true,
          "id": "4c250058149d6c9fb8c894c9ef29c790",
          "message": "User added."
        }
      }
    }
  }
  ```
</ResponseExample>


# Delete All User Data (GDPR)
Source: https://docs.velt.dev/api-reference/rest-apis/users/delete-all-user-data-gdpr

POST https://api.velt.dev/v1/users/data/delete
Remove All User data from Velt.

Use this API to remove all user data from Velt. This will:

* remove their access from all the documents and data in the organization.
* remove them from @mention contact dropdown list.
* remove them from @mentions where they were tagged.
* remove all feature data created by the user. eg: comments, reactions etc.

<Warning>
  - This API may take up to 5 minutes to return a 202 response since it runs an asynchronous job to delete user data across the system.
  - To speed up this process, you can optionally provide the organizationIds where the user belongs.
  - The actual deletion of data can take upto 24 hours to complete.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/users/data/delete`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="userIds" type="string[]" required>
      Array of user Ids.
    </ParamField>

    <ParamField body="organizationIds" type="string[]">
      Array of organization Ids. These are the organizations that the user is part of.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Request**

```JSON
{
  "data": {
    "userIds": [
      "yourUserId1",
      "yourUserId2"
    ],
    "organizationIds": [
      "yourOrganizationId1",
      "yourOrganizationId2"
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) deleted successfully.",
    "data": {
      "yourUserId1": {
        "success": true,
        "message": "User removed."
      }
    }
  }
}
```

#### User(s) Not Found

```JSON
{
  "result": {
    "status": "success",
    "message": "Deleted user data successfully.",
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "Deleted user data successfully.",
    }
  }
  ```
</ResponseExample>


# Delete Users
Source: https://docs.velt.dev/api-reference/rest-apis/users/delete-users

POST https://api.velt.dev/v1/users/delete
Remove Users from an Organization or a Document.

Use this API to remove Users from:

1. **Organization:** This will remove their access from all the documents and data in the organization. It will also remove these users from the contact list of the organization.
2. **Document:** This will remove their access from the specified document. It will also remove these users from the contact list of the document. If you pass the `documentId`, then the users will be removed from the document.

# Endpoint

`POST https://api.velt.dev/v1/users/delete`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document IDs. Provide this if you want to delete users from a specific document.
    </ParamField>

    <ParamField body="folderId" type="string">
      Folder ID. Either provide `documentId` or `folderId`.
    </ParamField>

    <ParamField body="userIds" type="string[]" required>
      Array of user Ids.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Delete users in a specific organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userIds": [
      "yourUserId1"
    ]
  }
}
```

#### 2. Delete users in a specific document within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userIds": [
      "yourUserId1"
    ]
  }
}
```

#### 3. Delete users in a specific folder within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folderId": "yourFolderId",
    "userIds": [
      "yourUserId1"
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) deleted successfully.",
    "data": {
      "yourUserId1": {
        "success": true,
        "message": "User removed."
      }
    }
  }
}
```

#### User(s) Not Found

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) deleted successfully.",
    "data": {
      "yourUserId1": {
        "success": true,
        "message": "User removed."
      },
      {
      "yourUserId2": {
        "success": false,
        "message": "User does not exist."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "User(s) deleted successfully.",
      "data": {
        "yourUserId1": {
          "success": true,
          "message": "User removed."
        }
      }
    }
  }
  ```
</ResponseExample>


# Get All User Data (GDPR)
Source: https://docs.velt.dev/api-reference/rest-apis/users/get-all-user-data-gdpr

POST https://api.velt.dev/v1/users/data/get
Get all feature data for a user stored in Velt.

Use this API to get all feature data for a user stored in Velt.

* The data will be paginated and returned in chunks of 100 items per feature data.
* You can use the `nextPageToken` to fetch the next chunk of data.
* If there are no more items to fetch, the `nextPageToken` will be null.
* Here is the data that will be included:
  {/* - user's profile data: If they were added to any organization, document or folder. */}
  * **Comments data:** All the comments created by the user or where they were involved in.
  * **Reactions data:** All the reactions created by the user.
  * **Notifications data:** All the notifications where the user was involved in.
  * **Recordings data:** All the recordings created by the user.

<Warning>
  This API may take a few seconds to return a response depending on the dataset size.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/users/data/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### Params

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      The organization Id of the organization that the user is part of.
    </ParamField>

    <ParamField body="userId" type="string" required>
      The user Id of the user you want to get the data for.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Request**

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userId": "yourUserId"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success", 
    "message": "Data fetched successfully.",
    "data": {
      "comments": [..], //Upto 100 items. Empty array if no items are found.
      "reactions": [..], //Upto 100 items. Empty array if no items are found.
      "recordings": [..], //Upto 100 items. Empty array if no items are found.
      "notifications": [..] //Upto 100 items. Empty array if no items are found.
    },
    "nextPageToken": "bhdwdqwjs298e39e479ddkeuw==329" //This will be null if there are no more items to fetch.
  }
}

```

#### Failure Response

```JSON
{
   "error": {
       "message": "ERROR_MESSAGE",
       "status": "INVALID_ARGUMENT",
       "code": 500
   }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success", 
      "message": "Data fetched successfully.",
      "data": {
        "comments": [..], //Upto 100 items. Empty array if no items are found.
        "reactions": [..], //Upto 100 items. Empty array if no items are found.
        "recordings": [..], //Upto 100 items. Empty array if no items are found.
        "notifications": [..] //Upto 100 items. Empty array if no items are found.
      },
      "nextPageToken": "bhdwdqwjs298e39e479ddkeuw==329" //This will be null if there are no more items to fetch.
    }
  }
  ```
</ResponseExample>


# Get Users v1
Source: https://docs.velt.dev/api-reference/rest-apis/users/get-users

POST https://api.velt.dev/v1/users/get

Use this API to retrieve users based on various filters such as organization ID, document ID, organization user group IDs or user IDs. You can use these filters in various combinations to get the desired users. Some examples are shown below.

<Warning>
  Use this for SDK v3 or prior versions.
</Warning>

# Endpoint

`POST https://api.velt.dev/v1/users/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### **Params**

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID
    </ParamField>

    <ParamField body="userIds" type="string[]">
      Array of User IDs. Limit: Only 30 items can be passed at a time.
    </ParamField>

    <ParamField body="organizationUserGroupIds" type="string[]">
      Array of Organization User Group IDs. Only 30 items can be passed at a time.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get users by organizationId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId"
  }
}
```

#### 2. Get users by documentId within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId"
  }
}
```

#### 3. Get users by specific user IDs in an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userIds": [
      "yourUserId1",
      "yourUserId2"
    ]
  }
}
```

#### 4. Get users by specific user IDs in the given organization and document

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userIds": [
      "yourUserId1",
      "yourUserId2"
    ]
  }
}
```

#### 5. Get users by organization and organization user group IDs

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "organizationUserGroupIds": [
      "yourOrganizationUserGroupId"
    ]
  }
}
```

#### 6. Get users by organization, organization user group IDs and user IDs

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userIds": [
      "yourUserId1",
      "yourUserId2"
    ],
    "organizationUserGroupIds": [
      "yourOrganizationUserGroupId"
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) retrieved successfully.",
    "data": [
      {
        "email": "userEmail@domain.com",
        "name": "userName",
        "userId": "yourUserId"
      }
    ]
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "Error retrieving user(s).",
    "status": "ERROR_CODE"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "User(s) retrieved successfully.",
      "data": [
        {
          "email": "userEmail@domain.com",
          "name": "userName",
          "userId": "yourUserId"
        }
      ]
    }
  }
  ```
</ResponseExample>


# Get Users v2
Source: https://docs.velt.dev/api-reference/rest-apis/users/get-users-v2

POST https://api.velt.dev/v2/users/get

Use this API to retrieve users based on various filters such as organization ID, document ID, organization user group IDs or user IDs. You can use these filters in various combinations to get the desired users. Some examples are shown below.

<Warning>
  Prior to using this API, you must:

  * Enable advanced queries option in [the console](https://console.velt.dev/dashboard/config/appconfig)
  * Deploy v4 series of the Velt SDK.
</Warning>

# Endpoint

`POST https://api.velt.dev/v2/users/get`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### **Params**

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID
    </ParamField>

    <ParamField body="folderId" type="string">
      Folder ID. Either provide `documentId` or `folderId`.
    </ParamField>

    <ParamField body="userIds" type="string[]">
      Array of User IDs. Limit: Only 30 items can be passed at a time.
    </ParamField>

    <ParamField body="organizationUserGroupIds" type="string[]">
      Array of Organization User Group IDs. Only 30 items can be passed at a time.
    </ParamField>

    <ParamField body="allDocuments" type="boolean">
      If true, all document users within the organization will be retrieved. You need not pass `documentId` in this case. This will not fetch organization-level users.
    </ParamField>

    <ParamField body="groupByDocumentId" type="boolean">
      If true, the response will be grouped by document ID. This works when `allDocuments` is set to true.
    </ParamField>

    <ParamField body="pageSize" type="number">
      Number of items to be retrieved per page. Default: 1000.
    </ParamField>

    <ParamField body="pageToken" type="string">
      Page token retrieved from previous API call.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Get users by organizationId

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "pageSize": 1000,
    "pageToken": "pageToken"
  }
}
```

#### 2. Get users by documentId within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId"
  }
}
```

#### 3. Get Users from all documents within an organization.

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "allDocuments": true,
    "groupByDocumentId": true
  }
}
```

#### 4. Get users by specific user IDs in an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userIds": [
      "yourUserId1",
      "yourUserId2"
    ]
  }
}
```

#### 5. Get users by specific user IDs in the given organization and document

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "userIds": [
      "yourUserId1",
      "yourUserId2"
    ]
  }
}
```

#### 6. Get users by organization and organization user group IDs

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "organizationUserGroupIds": [
      "yourOrganizationUserGroupId"
    ]
  }
}
```

#### 7. Get users by organization, organization user group IDs and user IDs

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "userIds": [
      "yourUserId1",
      "yourUserId2"
    ],
    "organizationUserGroupIds": [
      "yourOrganizationUserGroupId"
    ]
  }
}
```

#### 8. Get users by folderId within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folderId": "yourFolderId"
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) retrieved successfully.",
    "data": [
      {
        "email": "userEmail@domain.com",
        "name": "userName",
        "userId": "yourUserId"
      }
    ],
    "nextPageToken": "pageToken"
  }
}
```

#### Success Response with allDocuments and groupByDocumentId

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) retrieved successfully.",
    "data": {
      "documentId1": [
        {
          "email": "userEmail@domain.com",
          "name": "userName",
          "userId": "yourUserId"
        }
      ]
    },
    "nextPageToken": "pageToken"
  }
}

```

#### Failure Response

```JSON
{
  "error": {
    "message": "Error retrieving user(s).",
    "status": "ERROR_CODE"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "User(s) retrieved successfully.",
      "data": [
        {
          "email": "userEmail@domain.com",
          "name": "userName",
          "userId": "yourUserId"
        }
      ],
      "pageToken": "pageToken"
    }
  }
  ```
</ResponseExample>


# Update Users
Source: https://docs.velt.dev/api-reference/rest-apis/users/update-users

POST https://api.velt.dev/v1/users/update

Use this API to update user metadata based on various filters such as organization ID, document ID, folder ID and user IDs.
You can use these filters in various combinations to get the desired results.
The user metadata such as name, email etc can be updated.

# Endpoint

`POST https://api.velt.dev/v1/users/update`

# Headers

<ParamField header="x-velt-api-key" type="string" required>
  Your API key.
</ParamField>

<ParamField header="x-velt-auth-token" type="string" required>
  Your [Auth Token](/security/auth-tokens).
</ParamField>

# Body

#### **Params**

<ParamField body="data" type="object" required>
  <Expandable title="properties">
    <ParamField body="organizationId" type="string" required>
      Organization ID
    </ParamField>

    <ParamField body="documentId" type="string">
      Document ID
    </ParamField>

    <ParamField body="folderId" type="string">
      Folder ID. Either provide `documentId` or `folderId`.
    </ParamField>

    <ParamField body="users" type="User[]" required>
      Array of [User](/api-reference/sdk/models/data-models#user) objects.
    </ParamField>
  </Expandable>
</ParamField>

## **Example Requests**

#### 1. Update users in a specific organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "users": [
      {
        "userId": "yourUserId1",
        "name": "User Name",
        "email": "user@email.com"
      }
    ]
  }
}
```

#### 2. Update users in a specific document within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "documentId": "yourDocumentId",
    "users": [
      {
        "userId": "yourUserId1",
        "name": "User Name",
        "email": "user@email.com"
      }
    ]
  }
}
```

#### 3. Update users in a specific folder within an organization

```JSON
{
  "data": {
    "organizationId": "yourOrganizationId",
    "folderId": "yourFolderId",
    "users": [
      {
        "userId": "yourUserId1",
        "name": "User Name",
        "email": "user@email.com"
      }
    ]
  }
}
```

# Response

#### Success Response

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) processed successfully.",
    "data": {
      "yourUserId1": {
        "success": true,
        "id": "7d87015b055a168b098cf05b870e40ff",
        "message": "User updated."
      }
    }
  }
}
```

#### Some User(s) Not Found

```JSON
{
  "result": {
    "status": "success",
    "message": "User(s) processed successfully.",
    "data": {
      "yourUserId1": {
        "success": true,
        "id": "7d87015b055a168b098cf05b870e40ff",
        "message": "User updated."
      },
      "yourUserId2": {
        "success": false,
        "id": "ad22d93b49ad990d2b3d582d08d7768a",
        "message": "User does not exist."
      }
    }
  }
}
```

#### Failure Response

```JSON
{
  "error": {
    "message": "ERROR_MESSAGE",
    "status": "INVALID_ARGUMENT"
  }
}
```

<ResponseExample>
  ```js
  {
    "result": {
      "status": "success",
      "message": "User(s) processed successfully.",
      "data": {
        "yourUserId1": {
          "success": true,
          "id": "7d87015b055a168b098cf05b870e40ff",
          "message": "User updated."
        }
      }
    }
  }
  ```
</ResponseExample>


# API Methods Index
Source: https://docs.velt.dev/api-reference/sdk/api/api-methods



# Comments

### Threads

#### addCommentAnnotation()

Add a new comment annotation.

* Params: [AddCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#addcommentannotationrequest)
* Returns: [AddCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#addcommentannotationevent)
* React Hook: `useAddCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addcommentannotation)

#### addCommentOnSelectedText()

Add a comment on selected text.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addcommentonselectedtext)

#### addCommentOnElement()

Add a comment on a specific element.

* Params: `{ targetElement: object, commentData: array, status?: string }`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addcommentonelement)

#### addManualComment()

Add a comment with custom positioning.

* Params: `ManualCommentAnnotationConfig`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addmanualcomment)

#### deleteCommentAnnotation()

Delete a comment annotation.

* Params: [DeleteCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#deletecommentannotationrequest)
* Returns: [DeleteCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#deletecommentannotationevent)
* React Hook: `useDeleteCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deletecommentannotation)

#### deleteSelectedComment()

Delete the currently selected comment.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deleteselectedcomment)

#### getCommentAnnotationsCount()

Get the total and unread comment annotations count for specified documents.

* Params: [CommentRequestQuery](/api-reference/sdk/models/api-request-objects#commentrequestquery) (optional)
* Returns: [GetCommentAnnotationsCountResponse](/api-reference/sdk/models/api-request-objects#getcommentannotationscountresponse)
* React Hook: `useCommentAnnotationsCount()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getcommentannotationscount)

#### getUnreadCommentAnnotationCountByLocationId()

Get count of unread comment annotations by location ID.

* Params: `locationId: string`
* Returns: `Observable<UnreadCommentsCount | null>`
* React Hook: `useUnreadCommentAnnotationCountByLocationId()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getunreadcommentannotationcountbylocationid)

#### getCommentAnnotations()

Get all the comment annotations for all the specified documents.

* Params: [CommentRequestQuery](/api-reference/sdk/models/api-request-objects#commentrequestquery) (optional)
* Returns: [GetCommentAnnotationsResponse](/api-reference/sdk/models/api-request-objects#getcommentannotationsresponse)
* React Hook: `useGetCommentAnnotations()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getcommentannotations)

#### getSelectedComments()

Get currently selected comment annotations.

* Params: none
* Returns: `Observable<CommentAnnotation[]>`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getselectedcomments)

#### getCommentAnnotationById()

Get a specific comment annotation by ID.

* Params: `{ annotationId: string, documentId?: string }`
* Returns: `Observable<CommentAnnotation>`
* React Hook: `useCommentAnnotationById()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getcommentannotationbyid)

#### getElementRefByAnnotationId()

Get the DOM element reference for a comment annotation.

* Params: `annotationId: string`
* Returns: `string`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getelementrefbyannotationid)

### Messages

#### addComment()

Add a comment to a specific comment annotation.

* Params: [AddCommentRequest](/api-reference/sdk/models/api-request-objects#addcommentrequest)
* Returns: [AddCommentEvent](/api-reference/sdk/models/api-event-objects#addcommentevent)
* React Hook: `useAddComment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addcomment)

#### updateComment()

Update a comment in a specific comment annotation.

* Params: [UpdateCommentRequest](/api-reference/sdk/models/api-request-objects#updatecommentrequest)
* Returns: [UpdateCommentEvent](/api-reference/sdk/models/api-event-objects#updatecommentevent)
* React Hook: `useUpdateComment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatecomment)

#### deleteComment()

Delete a comment from a specific comment annotation.

* Params: [DeleteCommentRequest](/api-reference/sdk/models/api-request-objects#deletecommentrequest)
* Returns: [DeleteCommentEvent](/api-reference/sdk/models/api-event-objects#deletecommentevent)
* React Hook: `useDeleteComment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deletecomment)

#### getComment()

Get comments from a specific comment annotation.

* Params: [GetCommentRequest](/api-reference/sdk/models/api-request-objects#getcommentrequest)
* Returns: [Comment\[\]](/api-reference/sdk/models/api-event-objects#comment)
* React Hook: `useGetComment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getcomment)

#### getUnreadCommentCountOnCurrentDocument()

Get the number of unread comments on the current document.

* Params: none
* Returns: `Observable<UnreadCommentsCount | null>`
* React Hook: `useUnreadCommentCountOnCurrentDocument()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getunreadcommentcountoncurrentdocument)

#### getUnreadCommentCountByLocationId()

Get the number of unread comments by location ID.

* Params: `locationId: string`
* Returns: `Observable<UnreadCommentsCount | null>`
* React Hook: `useUnreadCommentCountByLocationId()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getunreadcommentcountbylocationid)

#### getUnreadCommentCountByAnnotationId()

Get the number of unread comments by annotation ID.

* Params: `annotationId: string`
* Returns: `Observable<number>`
* React Hook: `useUnreadCommentCountByAnnotationId()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getunreadcommentcountbyannotationid)

### @Mentions

#### updateContactList()

Update the contact list for the current user session.

* Params: `contacts: Array<{userId: string, name: string, email: string}>, options?: {merge: boolean}`
* Returns: `void`
* React Hook: `useContactUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatecontactlist)

#### updateContactListScopeForOrganizationUsers()

Restrict which contacts are shown in the dropdown for organization users.

* Params: `scopes: Array<'all' | 'organization' | 'organizationUserGroup' | 'document'>`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatecontactlistscopefororganizationusers)

#### assignUser()

Assign a user to a comment annotation.

* Params: [AssignUserRequest](/api-reference/sdk/models/api-request-objects#assignuserrequest)
* Returns: [AssignUserEvent](/api-reference/sdk/models/api-event-objects#assignuserevent)
* React Hook: `useAssignUser()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#assignuser)

#### enableUserMentions()

Enable or disable user @mentions.

* Params: none
* Returns: `void`
* React Hook: `useContactUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableusermentions)

#### onContactSelected()

Listen for when a contact is selected from the dropdown.

* Params: none
* Returns: `Observable<UserContactSelectedPayload>`
* React Hook: `useContactSelected()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#oncontactselected)

#### enableAtHere()

Enable or disable @here mentions.

* Params: none
* Returns: `void`
* React Hook: `useContactUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableathere)

#### setAtHereLabel()

Customize the @here label text.

* Params: `label: string`
* Returns: `void`
* React Hook: `useContactUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setatherelabel)

#### setAtHereDescription()

Customize the @here description text.

* Params: `description: string`
* Returns: `void`
* React Hook: `useContactUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setatheredescription)

#### subscribeCommentAnnotation()

Subscribe to a comment annotation.

* Params: [SubscribeCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#subscribecommentannotationrequest)
* Returns: [SubscribeCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#subscribecommentannotationevent)
* React Hook: `useSubscribeCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#subscribecommentannotation)

#### unsubscribeCommentAnnotation()

Unsubscribe from a comment annotation.

* Params: [UnsubscribeCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#unsubscribecommentannotationrequest)
* Returns: [UnsubscribeCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#unsubscribecommentannotationevent)
* React Hook: `useUnsubscribeCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#unsubscribecommentannotation)

#### enableCustomAutocompleteSearch()

Enable custom autocomplete search for contact list.

* Params: `none`
* Returns: `void`
* React Hook: `useContactUtils()` or `useCommentUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecustomautocompletesearch)

#### disableCustomAutocompleteSearch()

Disable custom autocomplete search for contact list.

* Params: `none`
* Returns: `void`
* React Hook: `useContactUtils()` or `useCommentUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecustomautocompletesearch)

### Metadata

#### addContext()

Add custom metadata to a comment annotation.

* Params: `{ [key: string]: any }`
* Returns: `void`
* React Hook: `useCommentEventCallback('addCommentAnnotation')`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addcontext)

#### updateContext()

Update custom metadata on a comment annotation.

* Params: `annotationId: string, context: { [key: string]: any }, config?: { merge: boolean }`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatecontext)

### Custom Lists

#### addCustomListDataOnAnnotation()

Add a custom dropdown list at the Comment Annotation level.

* Params: `{ type: 'multi' | 'single', placeholder: string, data: Array<{ id: string, label: string }> }`
* Returns: `void`
* React Hook: `useCommentUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#createcustomlistdataoncomment)

#### addCustomListDataOnComment()

Add a custom dropdown list that appears when a hotkey is pressed in the comment composer.

* Params: `{ hotkey: string, type: 'custom', data: Array<AutocompleteItem> }`
* Returns: `void`
* React Hook: `useCommentUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#createcustomlistdataoncomment)

#### onAutocompleteChipClick()

Listen for clicks on autocomplete chips in comments.

* Params: none
* Returns: `Observable<AutocompleteItem>`
* React Hook: `useAutocompleteChipClick()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#createcustomlistdataoncomment)

#### enableCustomAutocompleteSearch()

Enable custom autocomplete search for custom list.

* Params: `none`
* Returns: `void`
* React Hook: `useCommentUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecustomautocompletesearch)

#### disableCustomAutocompleteSearch()

Disable custom autocomplete search for custom list.

* Params: `none`
* Returns: `void`
* React Hook: `useCommentUtils()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecustomautocompletesearch)

### Event Subscription

#### on()

Subscribe to comment events.

* Params: `CommentEventType`. [Here](/async-collaboration/comments/customize-behavior#on) is the list of event types you can subscribe to.
* Returns: `Observable<CommentEventTypesMap[T]>`. [Here](/api-reference/sdk/models/api-event-objects#comment) is the list of events object types you can expect to receive.
* React Hook: `useCommentEventCallback(CommentEventType)`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#on)

### Attachments

#### enableAttachments()

Enable file attachments in comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableattachments)

#### addAttachment()

Add an attachment to a specific comment annotation.

* Params: [AddAttachmentRequest](/api-reference/sdk/models/api-request-objects#addattachmentrequest)
* Returns: `Promise<AddAttachmentResponse[]>`
* React Hook: `useAddAttachment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addattachment)

#### deleteAttachment()

Delete an attachment from a specific comment annotation.

* Params: [DeleteAttachmentConfig](/api-reference/sdk/models/api-request-objects#deleteattachmentconfig)
* Returns: `Promise<DeleteAttachmentEvent | null>`
* React Hook: `useDeleteAttachment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deleteattachment)

#### getAttachment()

Get attachments from a specific comment annotation.

* Params: [GetAttachmentRequest](/api-reference/sdk/models/api-request-objects#getattachmentrequest)
* Returns: `Promise<Attachment[]>`
* React Hook: `useGetAttachment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getattachment)

### Reactions

#### enableReactions()

Enable emoji reactions in comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablereactions)

#### setCustomReactions()

Set custom reactions by passing a map containing reaction information.

* Params: `{[reactionId: string]: {url?: string, emoji?: string}}`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setcustomreactions)

#### addReaction()

Add a reaction to a specific comment annotation.

* Params: [AddReactionRequest](/api-reference/sdk/models/api-request-objects#addreactionrequest)
* Returns: `Promise<AddReactionEvent | null>`
* React Hook: `useAddReaction()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addreaction)

#### deleteReaction()

Delete a reaction from a specific comment annotation.

* Params: [DeleteReactionRequest](/api-reference/sdk/models/api-request-objects#deletereactionrequest)
* Returns: `Promise<DeleteReactionEvent | null>`
* React Hook: `useDeleteReaction()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deletereaction)

#### toggleReaction()

Toggle a reaction for a specific comment annotation.

* Params: [ToggleReactionRequest](/api-reference/sdk/models/api-request-objects#togglereactionrequest)
* Returns: `Promise<ToggleReactionEvent | null>`
* React Hook: `useToggleReaction()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#togglereaction)

### Status & Priority

#### enableStatus()

Enable status dropdown & filters in comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablestatus)

#### setCustomStatus()

Set custom statuses by passing an array of status objects.

* Params: `StatusConfig[]`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setcustomstatus)

#### enableResolveButton()

Enable resolve button on comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableresolvebutton)

#### updateStatus()

Update the status of a comment annotation.

* Params: [UpdateStatusRequest](/api-reference/sdk/models/api-request-objects#updatestatusrequest)
* Returns: `Promise<UpdateStatusEvent>`
* React Hook: `useUpdateStatus()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatestatus)

#### resolveCommentAnnotation()

Resolve a comment annotation.

* Params: [ResolveCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#resolvecommentannotationrequest)
* Returns: `Promise<ResolveCommentAnnotationEvent>`
* React Hook: `useResolveCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#resolvecommentannotation)

#### enablePriority()

Enable priority settings in comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablepriority)

#### setCustomPriority()

Set custom priorities by passing an array of priority objects.

* Params: `PriorityConfig[]`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setcustompriority)

#### updatePriority()

Update the priority of a comment annotation.

* Params: [UpdatePriorityRequest](/api-reference/sdk/models/api-request-objects#updatepriorityrequest)
* Returns: `Promise<UpdatePriorityEvent>`
* React Hook: `useUpdatePriority()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatepriority)

### Recordings

#### deleteRecording()

Delete a recording from a comment.

* Params: [DeleteRecordingRequest](/api-reference/sdk/models/api-request-objects#deleterecordingrequest)
* Returns: `Promise<DeleteRecordingEvent | null>`
* React Hook: `useDeleteRecording()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deleterecording)

#### getRecording()

Get recordings from a comment.

* Params: [GetRecordingRequest](/api-reference/sdk/models/api-request-objects#getrecordingrequest)
* Returns: `Promise<RecordedData[]>`
* React Hook: `useGetRecording()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getrecording)

#### setAllowedRecordings()

Set allowed recording types (audio, video, screen).

* Params: `string`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setallowedrecordings)

#### enableRecordingCountdown()

Enable countdown before recording starts.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablerecordingcountdown)

#### enableRecordingTranscription()

Enable AI transcription for recordings.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablerecordingtranscription)

### Deep Link

#### getLink()

Get a link to a specific comment annotation.

* Params: [GetLinkRequest](/api-reference/sdk/models/api-request-objects#getlinkrequest)
* Returns: [GetLinkResponse](/api-reference/sdk/models/api-event-objects#getlinkresponse)
* React Hook: `useGetLink()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getlink)

#### copyLink()

Copy a link to a specific comment annotation to clipboard.

* Params: [CopyLinkRequest](/api-reference/sdk/models/api-request-objects#copylinkrequest)
* Returns: [CopyLinkEvent](/api-reference/sdk/models/api-event-objects#copylinkevent)
* React Hook: `useCopyLink()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#copylink)

### Navigation

#### scrollToCommentByAnnotationId()

Scroll the page to a comment's location.

* Params: `annotationId: string`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#scrolltocommentbyannotationid)

#### selectCommentByAnnotationId()

Programmatically select a comment annotation.

* Params: `annotationId: string`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#selectcommentbyannotationid)

#### onCommentSelectionChange()

Subscribe to comment selection changes.

* Params: none
* Returns: `Observable<CommentSelectionChangeData>`
* React Hook: `useCommentSelectionChangeHandler()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#oncommentselectionchange)

#### enablescrollToComment()

Enable automatic scrolling to comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablescrolltocomment)

### DOM Controls

#### allowedElementIds()

Set allowed element IDs for commenting.

* Params: `elementIds: string[]`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#allowedelementids)

#### allowedElementClassNames()

Set allowed element class names for commenting.

* Params: `classNames: string[]`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#allowedelementclassnames)

#### allowedElementQuerySelectors()

Set allowed element query selectors for commenting.

* Params: `selectors: string[]`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#allowedelementqueryselectors)

### AI Categorization

#### enableAutoCategorize()

Enable AI auto-categorization of comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableautocategorize)

#### setCustomCategory()

Set custom categories for comment categorization.

* Params: `categories: Array<{id: string, name: string, color: string}>`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setcustomcategory)

### UI

#### updateCommentDialogPosition()

Update position of comment dialog relative to pin.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatecommentdialogposition)

#### enableSidebarButtonOnCommentDialog()

Enable sidebar button on comment dialogs.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablesidebarbuttononcommentdialog)

#### onSidebarButtonOnCommentDialogClick()

Subscribe to clicks on comment dialog sidebar button.

* Params: none
* Returns: `Observable<any>`
* React Hook: `useCommentDialogSidebarClickHandler()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#onsidebarbuttononcommentdialogclick)

#### enableDeleteReplyConfirmation()

Enable confirmation dialog before deleting replies.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enabledeletereplyconfirmation)

#### enableMobileMode()

Enable mobile-optimized comment UI.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablemobilemode)

#### enableCommentPinHighlighter()

Enable highlighting outline around comment pins.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecommentpinhighlighter)

#### showCommentsOnDom()

Show comments on the DOM.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#showCommentsOnDom)

#### enableDialogOnHover()

Enable showing comment dialog on hover.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enabledialogonhover)

#### enableFloatingCommentDialog()

Enable floating comment dialog next to pins.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablefloatingcommentdialog)

#### showResolvedCommentsOnDom()

Show resolved comments on the DOM.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#showresolvedcommentsondom)

#### enableCollapsedComments()

Enable collapsing of comments in annotations.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecollapsedcomments)

#### enableShortUserName()

Enable shortening of long user names.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableshortusername)

#### enableSignInButton()

Enable sign in button on comment dialog when user is anonymous or signed out.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablesigninbutton)

#### onSignIn()

Handle sign in button click event.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#onsignin)

### Extra Information

#### enableCommentIndex()

Enable comment index indicators on pins and sidebar.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecommentindex)

#### enableDeviceInfo()

Enable device type indicators in comment threads.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enabledeviceinfo)

#### enableDeviceIndicatorOnCommentPins()

Enable device type indicators on comment pins.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enabledeviceindicatoroncommentpins)

#### enableGhostComments()

Enable showing ghost comments on the DOM.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableghostcomments)

#### enableGhostCommentsIndicator()

Enable ghost comment labels in the sidebar.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableghostcommentsindicator)

### Keyboard Controls

#### enableHotkey()

Enable hotkeys for comments (e.g. 'c' to enable comment mode).

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablehotkey)

#### enableEnterKeyToSubmit()

Enable using Enter key to submit comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableentertosubmit)

#### enableDeleteOnBackspace()

Enable deleting comments with backspace key.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enabledeleteonbackspace)

### Moderation

#### enableModeratorMode()

Enable moderator mode for comments requiring approval.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablemoderatormode)

#### enableResolveStatusAccessAdminOnly()

Restrict resolve action to admin users and comment authors.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableresolvestatusaccessadminonly)

#### approveCommentAnnotation()

Approve a comment annotation in moderator mode.

* Params: `ApproveCommentAnnotationRequest`
* Returns: `Promise<ApproveCommentAnnotationEvent>`
* React Hook: `useApproveCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#approvecommentannotation)

#### acceptCommentAnnotation()

Accept a comment annotation in suggestion mode.

* Params: `AcceptCommentAnnotationRequest`
* Returns: `Promise<AcceptCommentAnnotationEvent>`
* React Hook: `useAcceptCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#acceptcommentannotation)

#### rejectCommentAnnotation()

Reject a comment annotation in suggestion mode.

* Params: `RejectCommentAnnotationRequest`
* Returns: `Promise<RejectCommentAnnotationEvent>`
* React Hook: `useRejectCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#rejectcommentannotation)

#### enableSuggestionMode()

Enable suggestion mode for accepting/rejecting comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablesuggestionmode)

#### updateAccess()

Update access permissions for a comment annotation.

* Params: `UpdateAccessRequest`
* Returns: `Promise<UpdateAccessEvent>`
* React Hook: `useUpdateAccess()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updateaccess)

#### enablePrivateCommentMode()

Enable private comment mode for admin-only comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableprivatecomments)

### Comment Read Status

#### enableSeenByUsers()

Enable "Seen By" feature to show which users have seen each comment.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableseenbyusers)

#### setUnreadIndicatorMode()

Set unread indicator mode to either minimal (dot) or verbose (badge).

* Params: `mode: "minimal" | "verbose"`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setunreadindicatormode)

### Toggle Comment Types

#### enableAreaComment()

Enable area comments that allow drawing rectangles with comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableareacomment)

#### enableInboxMode()

Enable inbox mode for comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableinboxmode)

#### enablePopoverMode()

Enable popover mode for comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablepopovermode)

#### enableStreamMode()

Enable stream mode for comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablestreammode)

#### enableTextMode()

Enable text mode for comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enabletextmode)

#### enableInlineCommentMode()

Enable inline comment mode to show comments under associated text.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableinlinecommentmode)

#### enableMultithread()

Enable multithreaded comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablemultithread)

### Comment Tool

#### enableCommentMode()

Enable comment mode to allow attaching comments to DOM elements.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecommentmode)

#### onCommentModeChange()

Subscribe to changes in comment mode state.

* Params: none
* Returns: `Observable<boolean>`
* React Hook: `useCommentModeState()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#oncommentmodechange)

#### enableCommentTool()

Enable/disable the comment tool button.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablecommenttool)

#### enableChangeDetectionInCommentMode()

Enable DOM change detection while in comment mode.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablechangedetectionincommentmode)

#### enablePersistentCommentMode()

Enable persistent comment mode to continue leaving comments after finishing one.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablepersistentcommentmode)

#### setPinCursorImage()

Set custom cursor image for comment mode.

* Params: `base64ImageString: string`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#setpincursorimage)

### Minimap

#### enableMinimap()

Enable minimap showing comment locations on screen edge.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enableminimap)

### Popover Comments

#### enableDialogOnTargetElementClick()

Enable opening comment dialog on target element click in popover mode.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enabledialogontargetelementclick)

#### enablePopoverTriangleComponent()

Enable triangle indicator on popover comments.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablepoovertrianglecomponent)

### Video Timeline Comments

#### setTotalMediaLength()

Set the total length of media (in frames or seconds) for the timeline.

* Params: `length: number`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#settotalmediallength)

### Comment Pin

#### enableBubbleOnPin()

Show a Comment Bubble when hovering/clicking on Comment Pin instead of Comment Dialog.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablebubbleonpin)

#### enableBubbleOnPinHover()

Show Comment Bubble on hover vs click for Comment Pins.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#enablebubbleonpinhover)

# Comments Sidebar

### Custom filtering, sorting and grouping

#### enableSidebarCustomActions()

Enable custom filtering, sorting and grouping actions in the comments sidebar.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#custom-filtering-sorting-and-grouping)

#### setCommentSidebarData()

Set filtered/sorted/grouped data in the comments sidebar.

* Params: `data: CommentSidebarData[], options?: {grouping?: boolean}`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#custom-filtering-sorting-and-grouping)

### Navigation

#### onCommentClick()

Listen for comment click events in the sidebar.

* Params: `(event: {documentId: string, location: Object, targetElementId: string, context: Object, annotation: CommentAnnotation}) => void`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#oncommentclick)

#### enableSidebarUrlNavigation()

Enable automatic URL navigation when clicking comments in the sidebar.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#enablesidebarurlnavigation)

### UI

#### openCommentSidebar()

Open the comments sidebar.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#opencommentsidebar)

#### closeCommentSidebar()

Close the comments sidebar.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#openCommentSidebar)

#### toggleCommentSidebar()

Toggle the comments sidebar open/closed state.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#togglecommentsidebar)

#### excludeLocationIdsFromSidebar()

Filter out comments from specified locations in the sidebar.

* Params: `locationIds: string[]`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#excludelocationidsfromsidebar)

### System Filters, Sorting and Grouping

#### setCommentSidebarFilters()

Set filters for the comments sidebar programmatically.

* Params: `filters: {location?: {id: string}[], people?: ({userId: string} | {email: string})[], priority?: string[], status?: string[], category?: string[]}`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/comments-sidebar/customize-behavior#setcommentsidebarfilters)

# Notifications

#### getNotificationsData()

Get the notifications data for the current user.

* Params: none
* Returns: `Observable<Notification[]>`
* React Hook: `useNotificationsData()`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#getnotificationsdata)

#### onNotificationClick()

Listen for notification click events in the Notifications Panel.

* Params: `(notification: Notification) => void`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#onnotificationclick)

#### setTabConfig()

Customize notification tab names and visibility.

* Params: `tabConfig: TabConfig`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#settabconfig)

#### setMaxDays()

Set maximum age in days for displayed notifications.

* Params: `days: number`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#setmaxdays)

#### enableReadNotificationsOnForYouTab()

Show read notifications in the "For You" tab.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#enablereadnotificationsontheforyoutab)

#### getUnreadNotificationsCount()

Get count of unread notifications by tab.

* Params: none
* Returns: `Observable<{forYou: number, all: number}>`
* React Hook: `useUnreadNotificationsCount()`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#getunreadnotificationscount)

#### setAllNotificationsAsRead()

Mark all notifications as read globally or by tab.

* Params: `options?: {tabId?: string}`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#setallnotificationsasread)

#### markNotificationAsReadById()

Mark a specific notification as read.

* Params: `notificationId: string`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#marknotificationasreadbyid)

# Recorder

#### enableRecordingCountdown()

Controls whether to display a countdown timer before a recording starts.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#enablerecordingcountdown)

#### enableRecordingTranscription()

Controls whether to enable AI transcription for recordings.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#enablerecordingtranscription)

#### getRecordingData()

Fetches recording data (transcript, summary, and URLs) for the given recording IDs.

* Params: [RecorderRequestQuery](/api-reference/sdk/models/api-request-objects#recorderrequestquery)
* Returns: [`Promise<GetRecordingDataResponse>`](/api-reference/sdk/models/api-request-objects#getrecordingdataresponse)
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#getrecordingdata)

### Event Subscription

#### on()

Subscribe to Recorder events.

* Params: `RecorderEventType`. [Here](/api-reference/sdk/models/api-event-types-enum#recorder) is the list of events you can subscribe to.
* Returns: `Observable<RecorderEventTypesMap[T]>`. [Here](/api-reference/sdk/models/api-event-objects#recorder) is the list of events object types you can expect to receive.
* React Hook: `useRecorderEventCallback(RecorderEventType)`
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#on)

#### onDelete()

Handle deletion events for recordings.

* Params: `(data: {id: string}) => void`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#ondelete)

#### onRecordedData()

Subscribe to recording completion events.

* Params: none
* Returns: `Observable<RecorderData>`
* React Hook: `useRecorderAddHandler()`
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#onrecordeddata)

# Inline Reactions

#### setCustomReactions()

Set custom reaction emojis for inline reactions.

* Params: `customReactions: { [reactionId: string]: { url?: string, emoji?: string } }`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/async-collaboration/reactions/customize-behavior#setcustomreactions)

# View Analytics

#### getUniqueViewsByUser()

Get unique views by user, optionally filtered by location.

* Params: `locationId?: string`
* Returns: `Observable<ViewsByUser[]>`
* React Hook: `useUniqueViewsByUser()`
* [Full Documentation →](/async-collaboration/view-analytics/customize-behavior#getuniqueviewsbyuser)

#### getUniqueViewsByDate()

Get unique views by date, optionally filtered by location.

* Params: `locationId?: string`
* Returns: `Observable<ViewsByDate[]>`
* React Hook: `useUniqueViewsByDate()`
* [Full Documentation →](/async-collaboration/view-analytics/customize-behavior#getuniqueviewsbydate)

# Live State Sync

#### getLiveStateData()

Retrieves live state data as an observable based on the provided ID.

* Params: `liveStateDataId?: string`
* Returns: `Observable<any>`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/live-state-sync/setup)

#### setLiveStateData()

Sets live state data for the provided ID and data.

* Params: `liveStateDataId: string, liveStateData: any`
* Returns: `any`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/live-state-sync/setup)

# Single Editor Mode

#### enableSingleEditorMode()

Enables the single editor mode with an optional configuration.

* Params: `config?: SingleEditorConfig`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### disableSingleEditorMode()

Disables the single editor mode.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### isUserEditor()

Checks if the current user is an editor. Returns an observable.

* Params: none
* Returns: `Observable<UserEditorAccess | null>`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### getEditor()

Retrieves the current editor information.

* Params: none
* Returns: `Observable<User | null>`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### setUserAsEditor()

Sets the current user as an editor.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### resetUserAccess()

Resets the user access.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### singleEditorModeContainerIds()

Disables elements inside specific elements only when single editor mode is on.

* Params: `elementIds: string[]`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### enableAutoSyncState()

Enables the autosync state feature.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### requestEditorAccess()

Initiates a request for editor access.

* Params: none
* Returns: `Observable<boolean | null>`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### isEditorAccessRequested()

Checks if editor access has been requested.

* Params: none
* Returns: `Observable<{ requestStatus: string, requestedBy: User } | null>`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### acceptEditorAccessRequest()

Accepts an editor access request.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### rejectEditorAccessRequest()

Rejects an editor access request.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### cancelEditorAccessRequest()

Cancels an editor access request.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### editCurrentTab()

Edits the current tab.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### setEditorAccessTimeout()

Sets a timeout for editor access. (in milliseconds)

* Params: `timeout: number`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### enableEditorAccessTransferOnTimeOut()

Enables the transfer of editor access on timeout.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### enableDefaultSingleEditorUI()

Enables the default UI for single editor mode.

* Params: none
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

# Cursors

#### setInactivityTime()

Set the time it takes for a user's cursor to be marked as inactive.

* Params: `milliseconds: number`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/cursors/customize-behavior#setinactivitytime)

#### allowedElementIds()

Set specific element IDs where cursors should be shown.

* Params: `elementIds: string[]`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/cursors/customize-behavior#allowedelementids)

#### onCursorUserChange()

Subscribe to cursor position changes for all users.

* Params: `callback: (cursorUsers: CursorUser[]) => void`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/cursors/customize-behavior#oncursoruserchange)

# Presence

#### setInactivityTime()

Set the time it takes for a user to be marked as inactive.

* Params: `milliseconds: number`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/presence/customize-behavior#setinactivitytime)

#### enableSelf()

Include the current user in the list of presence users.

* Params: `none`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/presence/customize-behavior#self)

#### onPresenceUserChange()

Subscribe to presence changes for all users.

* Params: `callback: (presenceUsers: PresenceUser[]) => void`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/presence/customize-behavior#onpresenceuserchange)

#### onPresenceUserClick()

Handle click events on presence avatar circles.

* Params: `callback: (user: User) => void`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/presence/customize-behavior#onpresenceuserclick)

#### getOnlineUsersOnCurrentDocument()

Subscribe to a list of all online users who are either active or inactive on the current document.

* Params: `none`
* Returns: `Observable<PresenceUser[]>`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/presence/customize-behavior#getonlineusersoncurrentdocument)

# Follow Mode

#### enableFlockMode()

Enable Follow Me mode globally wherever Presence is shown.

* Params: `none`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/presence/customize-behavior#flockmode)

#### startFollowingUser()

Start following a specific user.

* Params: `userId: string`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/flock-mode/customize-behavior#startfollowinguser)

#### stopFollowingUser()

Stop following the current user.

* Params: `none`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/flock-mode/customize-behavior#stopfollowinguser)

#### onNavigate()

Handle navigation events during Follow Me sessions.

* Params: `callback: (pageInfo: PageInfo) => void`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/flock-mode/customize-behavior#onnavigate)

# Huddle

#### enableChat()

Enable the ephemeral chat feature in Huddle.

* Params: `none`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/huddle/customize-behavior#chat)

#### enableFlockModeOnAvatarClick()

Enable Follow Me mode when clicking on a user's avatar in Huddle.

* Params: `none`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/huddle/customize-behavior#flockmodedonavatarclick)

# Live Selection

#### enableDefaultElementsTracking()

Enable automatic tracking of user presence on default element types (input, textarea, button, contenteditable).

* Params: `none`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/live-selection/customize-behavior#enabledefaultelementstracking)

#### enableUserIndicator()

Enable the user indicator (avatar/name label) that appears near selected elements.

* Params: `none`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/live-selection/customize-behavior#enableuserindicator)

#### setUserIndicatorPosition()

Set the position of the user indicator globally.

* Params: `position: 'start' | 'end'`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/live-selection/customize-behavior#setuserindicatorposition)

#### setUserIndicatorType()

Set the type of user indicator globally.

* Params: `type: 'avatar' | 'label'`
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/realtime-collaboration/live-selection/customize-behavior#setuserindicatortype)

#### getLiveSelectionData()

Get the live selection data for the current document.

* Params: `none`
* Returns: `Observable<LiveSelectionData>`
* React Hook: `useLiveSelectionDataHandler()`
* [Full Documentation →](/realtime-collaboration/live-selection/customize-behavior#getliveselectiondata)

# AI

#### enableRewriter()

Enable the rewriter.

* **Signature**: `enableRewriter()`
* **Params**: `n/a`
* **Returns**: `void`
* **React Hook**: `n/a`

# Core

### Client

#### initConfig()

Set up initial configurations for the Velt SDK.

* Params: `apiKey: string, config?: Config`
* Returns: `void`
* React Hook: `n/a`

{/* - [Full Documentation →](/get-started/setup/initialize) */}

#### getVeltInitState()

Subscribe to detect whether Velt is initialized.

* Params: `void`
* Returns: `Observable<boolean>`
* React Hook: `useVeltInitState()`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getMetadata()

Get the currently set organization, document and location objects.

* Params: none
* Returns: `Promise<VeltEventMetadata>`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

### Authentication

#### identify()

Authenticate the client's user with the Velt SDK.

* Params: `user: User, userOptions?: UserOptions`
* Returns: `Promise<unknown>`
* React Hook: `useIdentify()`

{/* - [Full Documentation →](/get-started/setup/authenticate) */}

#### signOutUser()

To sign out a user.

* Params: `void`
* Returns: `any`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getUser()

Get the current authenticated user in Velt.

* Params: `void`
* Returns: `User`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

### Folders

#### fetchFolders()

Fetch folder metadata and subfolders by organizationId, folderId with pagination.

* Params: `fetchFoldersRequest: FetchFoldersRequest`
* Returns: `Observable<FetchFoldersResponse>`
* React Hook: `n/a`
* [Full Documentation →](/api-reference/sdk/api/api-methods#client)

### Documents

#### setDocuments()

Initialize and subscribe to multiple Documents at once.

* Params:
  * `documents`: [Document\[\]](/api-reference/sdk/models/data-models#document)
  * `options?`: [SetDocumentsRequestOptions](/api-reference/sdk/models/data-models#setdocumentsrequestoptions)
* Returns: `void`
* React Hook: `useSetDocuments()`
* [Full Documentation →](/key-concepts/documents/set-document#set-multiple-documents)

#### setDocument()

Initialize and subscribe to a single Document.

* Params:
  * `documentId`: string
  * `metadata?`: [DocumentMetadata](/api-reference/sdk/models/data-models#documentmetadata)
* Returns: `void`
* React Hook: `useSetDocument()`
* [Full Documentation →](/key-concepts/documents/set-document#set-a-single-document)

#### unsetDocuments()

Use this to unsubscribe from all documents at once.

* Params: `void`
* Returns: `void`
* React Hook: `useUnsetDocuments()`
* [Full Documentation →](/key-concepts/documents/set-document#unset-multiple-documents)

#### fetchDocuments()

Fetch document metadata by organizationId, folderId or documentIds with pagination.

* Params: `void`
* Returns: `Observable<DocumentMetadata>`
* React Hook: `n/a`
* [Full Documentation →](/key-concepts/documents/set-document#get-document-metadata)

### Location

#### setLocation()

Set the current location context. Used to define specific areas within a document.

* Params: `location: Location, isAdditional?: boolean`
  * `location`: Location object with:
    * `id`: Required unique identifier
    * `locationName?`: Optional display name for UI components
    * `version?`: Optional version object with:
      * `id`: Version identifier
      * `name`: Version display name
    * Additional custom key/value pairs
  * `isAdditional?`: Boolean to add additional locations
    * `false` (default): Set this as the root location
    * `true`: Add as additional location
* Returns: `void`
* React Hook: `useSetLocation()`
* [Full Documentation →](/key-concepts/locations/set-location#set-the-location)

#### removeLocation()

Remove locations from the current document context.

* Params: `location?: Location`
  * If no location provided, removes all locations
  * If location object provided, removes that specific location
* Returns: `void`
* React Hook: `n/a`
* [Full Documentation →](/key-concepts/locations/remove-locations)

### Event Subscription

#### on()

Subscribe to Velt core events

* Params: `eventType: string`. [Here](/api-reference/sdk/models/api-event-types-enum#core) is the list of events you can subscribe to.
* Returns: `Observable<VeltEventTypesMap[T]>`. It will return one of the objects from [here](/api-reference/sdk/models/api-event-objects#core)
* React Hook: `useVeltEventCallback()`

### UI

#### setUiState()

Set custom state data that can be used in Velt wireframes, Velt if and Velt data components.

* Params: `Record<string, any>`
  * Object containing key-value pairs of custom state data
* Returns: `void`
* React Hook: `n/a`

#### getUiState()

Get the custom UI state data.

* Params: `void`
* Returns: `Observable<Record<string, any>>`
  * Observable that emits the current UI state object
* React Hook: `n/a`

#### injectCustomCss()

To inject custom CSS within Components with Shadow DOM enabled.

* Params: `customCss: CustomCss`
* Returns: `void`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### removeVeltContent()

To remove Velt specific content from provided html content. This is useful when using Velt on a text editor or editable element.

* Params: `htmlContent: string`
* Returns: `string`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

### Feature Utilities

#### getPresenceElement()

Get the Presence Element Object to access the raw presence data.

* Params: `void`
* Returns: `PresenceElement`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getCursorElement()

Get the Cursor Element Object to access the raw cursor data.

* Params: `void`
* Returns: `CursorElement`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getCommentElement()

Get the Comment Element Object to access the raw comment data.

* Params: `void`
* Returns: `CommentElement`
* React Hook: `useCommentUtils()`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getSelectionElement()

Get the Selection Object to enable/disable the feature.

* Params: `void`
* Returns: `SelectionElement`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getRecorderElement()

Get the Recorder Object.

* Params: `void`
* Returns: `RecorderElement`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getContactElement()

Get the Contact Object.

* Params: `void`
* Returns: `ContactElement`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getRewriterElement()

Get the Rewriter Object.

* Params: `void`
* Returns: `RewriterElement`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getLiveStateSyncElement()

Get the LiveStateSync Object.

* Params: `void`
* Returns: `LiveStateSyncElement`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### getArrowElement()

Get the Arrow Object.

* Params: `void`
* Returns: `ArrowElement`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

### Feature Gating

#### isUserAllowed\$()

To check if user is allowed in provided document or not.

* Params: `void`
* Returns: `Observable<boolean>`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### disableFeatures()

Provide a list of features to disable. Provide an empty array to enable all the features.

* Params: `features: Array<FeatureType>`
* Returns: `void`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### isPlanExpired\$()

To check if plan is expired or not.

* Params: `void`
* Returns: `Observable<boolean>`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

### Localization

#### setLanguage()

To set the language.

* Params: `language: string`
* Returns: `void`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### setTranslations()

To set the translations for the language.

* Params: `language: string, translations: { [key: string]: string }`
* Returns: `void`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### enableAutoTranslation()

To enable automatic translation of text in Velt Components based on User's language preference.

* Params: `void`
* Returns: `void`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

### DOM Control

#### setScrollableElementsIds()

Tell us about the scrollable document ids to keep track on its scroll changes.

* Params: `ids: string[]`
* Returns: `void`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}

#### removeScrollableElementsIds()

To remove document params from a User.

* Params: `void`
* Returns: `void`
* React Hook: `n/a`

{/* - [Full Documentation →](/api-reference/sdk/api/api-methods#client) */}


# React Hooks Index
Source: https://docs.velt.dev/api-reference/sdk/api/react-hooks



# Comments

#### useCommentUtils()

Hook to access comment utilities

* Params: `void`
* Returns: `CommentElement`
* Related API Method: `client.getCommentElement()`
* [Full Documentation →](/api-reference/sdk/api/api-methods#client)

### Threads

#### useAddCommentAnnotation()

Hook to add a comment annotation

* Params: [AddCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#addcommentannotationrequest)
* Returns: `addCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addcommentannotation)

#### useDeleteCommentAnnotation()

Hook to delete a comment annotation

* Params: [DeleteCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#deletecommentannotationrequest)
* Returns: `deleteCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deletecommentannotation)

#### useCommentAnnotationsCount()

Hook to get total and unread comment annotations count

* Params: [CommentRequestQuery](/api-reference/sdk/models/api-request-objects#commentrequestquery) (optional)
* Returns: [GetCommentAnnotationsCountResponse](/api-reference/sdk/models/api-request-objects#getcommentannotationscountresponse)
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getcommentannotationscount)

#### useUnreadCommentAnnotationCountByLocationId()

Hook to get unread comment annotation count by location

* Params: `locationId: string`
* Returns: `UnreadCommentsCount | null`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getunreadcommentannotationcountbylocationid)

#### useGetCommentAnnotations()

Hook to get all the comment annotations for all the specified documents

* Params: [CommentRequestQuery](/api-reference/sdk/models/api-request-objects#commentrequestquery) (optional)
* Returns: [GetCommentAnnotationsResponse](/api-reference/sdk/models/api-request-objects#getcommentannotationsresponse)
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getcommentannotations)

#### useCommentAnnotationById()

Hook to get a specific comment annotation

* Params: `{ annotationId: string, documentId?: string }`
* Returns: `CommentAnnotation`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getcommentannotationbyid)

### Messages

#### useAddComment()

Hook to add a comment to a specific annotation

* Params: [AddCommentRequest](/api-reference/sdk/models/api-request-objects#addcommentrequest)
* Returns: `addComment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addcomment)

#### useUpdateComment()

Hook to update a comment in a specific annotation

* Params: [UpdateCommentRequest](/api-reference/sdk/models/api-request-objects#updatecommentrequest)
* Returns: `updateComment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatecomment)

#### useDeleteComment()

Hook to delete a comment from a specific annotation

* Params: [DeleteCommentRequest](/api-reference/sdk/models/api-request-objects#deletecommentrequest)
* Returns: `deleteComment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deletecomment)

#### useGetComment()

Hook to get comments from a specific annotation

* Params: [GetCommentRequest](/api-reference/sdk/models/api-request-objects#getcommentrequest)
* Returns: `getComment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getcomment)

#### useUnreadCommentCountOnCurrentDocument()

Hook to get number of unread comments on current document

* Params: `void`
* Returns: `UnreadCommentsCount | null`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getunreadcommentcountoncurrentdocument)

#### useUnreadCommentCountByLocationId()

Hook to get number of unread comments by location

* Params: `locationId: string`
* Returns: `UnreadCommentsCount | null`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getunreadcommentcountbylocationid)

#### useUnreadCommentCountByAnnotationId()

Hook to get number of unread comments by annotation

* Params: `annotationId: string`
* Returns: `number`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getunreadcommentcountbyannotationid)

### @Mentions

#### useContactUtils()

Hook to access contact utility methods

* Returns: `ContactElement` with methods for managing contacts
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatecontactlist)

#### useAssignUser()

Hook to assign a user to a comment annotation

* Params: [AssignUserRequest](/api-reference/sdk/models/api-request-objects#assignuserrequest)
* Returns: `assignUser()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#assignuser)

#### useContactSelected()

Hook to handle contact selection events

* Returns: `User`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#oncontactselected)

#### useSubscribeCommentAnnotation()

Hook to subscribe to a comment annotation

* Params: [SubscribeCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#subscribecommentannotationrequest)
* Returns: `subscribeCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#subscribecommentannotation)

#### useUnsubscribeCommentAnnotation()

Hook to unsubscribe from a comment annotation

* Params: [UnsubscribeCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#unsubscribecommentannotationrequest)
* Returns: `unsubscribeCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#unsubscribecommentannotation)

### Custom Lists

#### useAutocompleteUtils()

Hook to access autocomplete utilities for custom lists in comments

* Returns: `AutocompleteElement`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#createcustomlistdataoncomment)

#### useAutocompleteChipClick()

Hook to handle clicks on autocomplete chips in comments

* Returns: `AutocompleteItem` data when a chip is clicked
* [Full Documentation →](/async-collaboration/comments/customize-behavior#createcustomlistdataoncomment)

### Event Subscription

#### useCommentEventCallback()

Hook to subscribe to comment events

* Params: `eventType: string`. [Here](/async-collaboration/comments/customize-behavior#on) is the list of events you can subscribe to.
* Returns: Comment Event Object. It will return one of the objects from [here](/api-reference/sdk/models/api-event-objects#comments)
* [Full Documentation →](/async-collaboration/comments/customize-behavior#on)

### Attachments

#### useAddAttachment()

Hook to add an attachment to a comment annotation

* Params: [AddAttachmentRequest](/api-reference/sdk/models/api-request-objects#addattachmentrequest)
* Returns: `addAttachment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addattachment)

#### useDeleteAttachment()

Hook to delete an attachment from a comment annotation

* Params: [DeleteAttachmentConfig](/api-reference/sdk/models/api-request-objects#deleteattachmentconfig)
* Returns: `deleteAttachment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deleteattachment)

#### useGetAttachment()

Hook to get attachments from a comment annotation

* Params: [GetAttachmentRequest](/api-reference/sdk/models/api-request-objects#getattachmentrequest)
* Returns: `getAttachment()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getattachment)

### Reactions

#### useAddReaction()

Hook to add a reaction to a comment

* Params: [AddReactionRequest](/api-reference/sdk/models/api-request-objects#addreactionrequest)
* Returns: `addReaction()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#addreaction)

#### useDeleteReaction()

Hook to delete a reaction from a comment

* Params: [DeleteReactionRequest](/api-reference/sdk/models/api-request-objects#deletereactionrequest)
* Returns: `deleteReaction()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deletereaction)

#### useToggleReaction()

Hook to toggle a reaction on a comment

* Params: [ToggleReactionRequest](/api-reference/sdk/models/api-request-objects#togglereactionrequest)
* Returns: `toggleReaction()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#togglereaction)

### Status & Priority

#### useUpdateStatus()

Hook to update the status of a comment annotation

* Params: [UpdateStatusRequest](/api-reference/sdk/models/api-request-objects#updatestatusrequest)
* Returns: `updateStatus()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatestatus)

#### useResolveCommentAnnotation()

Hook to resolve a comment annotation

* Params: [ResolveCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#resolvecommentannotationrequest)
* Returns: `resolveCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#resolvecommentannotation)

#### useUpdatePriority()

Hook to update the priority of a comment annotation

* Params: [UpdatePriorityRequest](/api-reference/sdk/models/api-request-objects#updatepriorityrequest)
* Returns: `updatePriority()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updatepriority)

### Recording

#### useDeleteRecording()

Hook to delete a recording from a comment annotation

* Params: [DeleteRecordingRequest](/api-reference/sdk/models/api-request-objects#deleterecordingrequest)
* Returns: `deleteRecording()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#deleterecording)

#### useGetRecording()

Hook to get recordings from a comment annotation

* Params: [GetRecordingRequest](/api-reference/sdk/models/api-request-objects#getrecordingrequest)
* Returns: `getRecording()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getrecording)

### Deep Link

#### useGetLink()

Hook to get a link to a specific comment annotation

* Params: [GetLinkRequest](/api-reference/sdk/models/api-request-objects#getlinkrequest)
* Returns: `getLink()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#getlink)

#### useCopyLink()

Hook to copy a comment annotation link to clipboard

* Params: [CopyLinkRequest](/api-reference/sdk/models/api-request-objects#copylinkrequest)
* Returns: `copyLink()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#copylink)

### Navigation

#### useCommentSelectionChangeHandler()

Hook to subscribe to comment selection changes

* Returns: `CommentSelectionChangeData` with:
  * `selected: boolean`
  * `annotation: CommentAnnotation`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#oncommentselectionchange)

### UI

#### useCommentDialogSidebarClickHandler()

Hook to handle clicks on the sidebar button in the comment dialog

* Returns: Event data
* [Full Documentation →](/async-collaboration/comments/customize-behavior#onsidebarbuttononcommentdialogclick)

### Moderation

#### useApproveCommentAnnotation()

Hook to approve comment annotations in moderator mode

* Params: [ApproveCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#approvecommentannotationrequest)
* Returns: `approveCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#approvecommentannotation)

#### useAcceptCommentAnnotation()

Hook to accept comment annotations in suggestion mode

* Params: [AcceptCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#acceptcommentannotationrequest)
* Returns: `acceptCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#acceptcommentannotation)

#### useRejectCommentAnnotation()

Hook to reject comment annotations in suggestion mode

* Params: [RejectCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#rejectcommentannotationrequest)
* Returns: `rejectCommentAnnotation()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#rejectcommentannotation)

#### useUpdateAccess()

Hook to update access permissions for comment annotations

* Params: [UpdateAccessRequest](/api-reference/sdk/models/api-request-objects#updateaccessrequest)
* Returns: `updateAccess()`
* [Full Documentation →](/async-collaboration/comments/customize-behavior#updateaccess)

### Comment Tool

#### useCommentModeState()

Hook to track the current state of comment mode

* Returns: `boolean` indicating if comment mode is active
* Automatically updates when comment mode changes
* [Full Documentation →](/async-collaboration/comments/customize-behavior#oncommentmodechange)

# Notifications

#### useNotificationUtils()

Hook to access notification element for utility methods

* Returns: `NotificationElement`
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#settabconfig)

#### useNotificationsData()

Hook to access notifications data for the current user

* Returns: Array of [`Notification`](/api-reference/sdk/models/data-models#notification) objects
* Automatically updates when notifications change
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#getnotificationsdata)

#### useUnreadNotificationsCount()

Hook to get count of unread notifications

* Returns: Object with counts by tab
  ```typescript
  {
    forYou: number,  // Unread in "For You" tab
    all: number      // Unread in "All" tab
  }
  ```
* Automatically updates when unread status changes
* [Full Documentation →](/async-collaboration/notifications/customize-behavior#getunreadnotificationscount)

# Inline Reactions

#### useReactionElement()

Hook to access reaction element for utility methods

* Returns: `ReactionElement`
* [Full Documentation →](/async-collaboration/reactions/customize-behavior#setcustomreactions)

# Recorder

#### useRecorderUtils()

Hook to access recorder element for utility methods

* Returns: `RecorderElement`
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#enablerecordingcountdown)

#### useRecorderAddHandler()

Hook to handle new recording events

* Returns: Object containing:
  * `id`: string - Unique identifier for the recording
  * `tag`: string - HTML tag to embed the recording player
* Automatically updates when new recordings are added
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#onrecordeddata)

### Event Subscription

#### useRecorderEventCallback()

Hook to subscribe to recorder events

* Params: `eventType: string`. [Here](/api-reference/sdk/models/api-event-types-enum#recorder) is the list of events you can subscribe to.
* Returns: Recorder Event Object. It will return one of the objects from [here](/api-reference/sdk/models/api-event-objects#recorder)
* [Full Documentation →](/async-collaboration/recorder/customize-behavior#on)

# View Analytics

#### useViewsElement()

Hook to access views element for utility methods

* Returns: `ViewsElement`
* [Full Documentation →](/async-collaboration/view-analytics/customize-behavior)

#### useUniqueViewsByUser()

Hook to get unique views grouped by user

* Params: `locationId: string`
* Returns: Array of view analytics data by user
* [Full Documentation →](/async-collaboration/view-analytics/customize-behavior#getuniqueviewsbyuser)

#### useUniqueViewsByDate()

Hook to get unique views grouped by date

* Params: `locationId: string`
* Returns: Array of view analytics data by date
* [Full Documentation →](/async-collaboration/view-analytics/customize-behavior#getuniqueviewsbydate)

# Live State Sync

#### useLiveStateSyncUtils()

Hook to access live state sync utilities

* Params: `void`
* Returns: `LiveStateSyncElement`
* Related API Method: `client.getLiveStateSyncElement()`
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### useLiveStateData()

Hook to get live state data

* Params: `string`
* Returns: `any`
* Related API Method: `liveStateSyncElement.getLiveStateData()`
* [Full Documentation →](/realtime-collaboration/live-state-sync/setup)

#### useSetLiveStateData()

Hook to set live state data

* Params: `string, any`
* Returns: `void`
* Related API Method: `liveStateSyncElement.setLiveStateData()`
* [Full Documentation →](/realtime-collaboration/live-state-sync/setup)

#### useLiveState()

Hook to sync state variables across clients in real-time (similar to React's useState)

* Params:
  * `uniqueId`: string - Unique identifier to sync across screens
  * `initialValue`: any - Initial value of the state
  * `options?`: object
    * `syncDuration`: number - Debounce duration in ms (default: 50)
    * `resetLiveState`: boolean - Reset state on init (default: false)
    * `listenToNewChangesOnly`: boolean - Only listen to new changes (default: false)
* Returns: `[value, setValue, serverConnectionState]`
  * `value`: Current state value
  * `setValue`: Function to update state
  * `serverConnectionState`: Current server connection state
* [Full Documentation →](/realtime-collaboration/live-state-sync/setup)

#### useServerConnectionStateChangeHandler()

Hook to listen to server connection state changes

* Params: none
* Returns: `ServerConnectionState` - One of:
  * `'online'` - Server connection is active
  * `'offline'` - Server connection is lost
  * `'pendingInit'` - Connection initialization pending
  * `'pendingData'` - Waiting for data from server
* Related API Method: `liveStateSyncElement.onServerConnectionStateChange()`
* [Full Documentation →](/realtime-collaboration/live-state-sync/setup)

# Single Editor Mode

#### useUserEditorState()

Hook to check if current user is the editor

* Returns: `UserEditorAccess` object with:
  * `isEditor`: boolean indicating if user is editor
  * `isEditorOnCurrentTab`: boolean indicating if user is editor on current tab
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### useEditor()

Hook to get the current editor

* Returns: `User` object with editor details (email, name, photoUrl, userId)
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### useEditorAccessRequestHandler()

Hook to handle editor access requests

* Returns: Object with:
  * `requestStatus`: 'requested' when access is requested
  * `requestedBy`: User object of requester
* Returns `null` if user is not editor or request is canceled
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

#### useEditorAccessTimer()

Hook to track editor access request timer state

* Returns: Object with:
  * `state`: 'idle' | 'inProgress' | 'completed'
  * `durationLeft`: number of seconds remaining
* Useful for building custom UI for access requests
* [Full Documentation →](/realtime-collaboration/single-editor-mode/setup)

# Presence

#### usePresenceUtils()

Hook to access presence element for presence control methods

* Returns: `PresenceElement`
* [Full Documentation →](/realtime-collaboration/presence/customize-behavior#setinactivitytime)

#### usePresenceUsers()

Hook to get online users on the current document

* Returns: `User[]`
* Related API Method: `presenceElement.getOnlineUsersOnCurrentDocument()`
* [Full Documentation →](/realtime-collaboration/presence/customize-behavior#getonlineusersoncurrentdocument)

Note: Most presence functionality can also be controlled through `<VeltPresence>` props:

* `inactivityTime`: Set user inactivity timeout (default: 300000ms)
* `location`: Show presence for specific locations
* `maxUsers`: Limit number of displayed avatars
* `self`: Control visibility of current user (default: true)

# Cursor

#### useCursorUtils()

Hook to access cursor element for cursor utility methods

* Returns: `CursorElement`

#### useCursorUsers()

Hook to get online users with cursors activated

* Params: `void`
* Returns: `User[]`
* Related API Method: `cursorElement.getOnlineUsersOnCurrentDocument()`
* [Full Documentation →](/realtime-collaboration/cursors/customize-behavior#getonlineusersoncurrentdocument)

# Live Selection

#### useLiveSelectionUtils()

Hook to access live selection element for control methods

* Returns: `LiveSelectionElement`
* [Full Documentation →](/realtime-collaboration/live-selection/customize-behavior#enabledefaultelementsTracking)

#### useLiveSelectionDataHandler()

Hook to get live selection data for the current document

* Returns: `LiveSelectionData`
* Related API Method: `liveSelectionElement.getLiveSelectionData()`
* [Full Documentation →](/realtime-collaboration/live-selection/customize-behavior#getliveselectiondata)

# Huddle

#### useHuddleUtils()

Hook to access huddle utilities

* Params: `void`
* Returns: `HuddleElement`
* Related API Method: `client.getHuddleElement()`
* [Full Documentation →](/realtime-collaboration/huddle/customize-behavior)

# AI

#### useAIRewriterUtils()

Hook to access AI rewriter utilities

* Params: `void`
* Returns: `RewriterElement`
* Related API Method: `client.getRewriterElement()`

# Core

### Client

#### useVeltClient()

Hook to access the Velt client instance

* Returns: Object with:
  * `client`: Velt

#### useVeltInitState()

Hook to get Velt initialization state

* Params: `void`
* Returns: `boolean`
* Related API Method: `client.getVeltInitState()`
* [Full Documentation →](/get-started/setup/advanced)

### Authentication

#### useIdentify()

Hook to authenticate a user with Velt

* Params:
  * `user`: `User`
  * `options?`: Object:
    * `authToken?`: JWT token for additional security
    * `forceReset?`: Force re-login (default: false)
* Must be called within a child component of VeltProvider
* Asynchronous operation
* [Full Documentation →](/get-started/setup/authenticate)

### Document

#### useSetDocuments()

Hook to initialize multiple documents at once

* Params:
  * `documents`: [Document\[\]](/api-reference/sdk/models/data-models#document)
  * `options?`: [SetDocumentsRequestOptions](/api-reference/sdk/models/data-models#setdocumentsrequestoptions)
* [Full Documentation →](/key-concepts/documents/set-document#set-multiple-documents)

#### useSetDocument()

Hook to initialize a document for collaboration

* Params:
  * `documentId`: string
  * `metadata?`: [DocumentMetadata](/api-reference/sdk/models/data-models#documentmetadata)
* [Full Documentation →](/key-concepts/documents/set-document#set-a-single-document)

#### useUnsetDocuments()

Hook to unsubscribe from all documents at once.

* Use when Velt features are not needed
* Cleans up document-specific resources
* [Full Documentation →](/key-concepts/documents/set-document#unset-multiple-documents)

### Location

#### useSetLocation()

Hook to set the current location context. Used to define specific areas within a document.

* Params:
  * `location`: Location object with:
    * `id`: Required unique identifier
    * `locationName?`: Optional display name for UI components
    * `version?`: Optional version object with:
      * `id`: Version identifier
      * `name`: Version display name
    * Additional custom key/value pairs
  * `isAdditional?`: Boolean to add additional locations
    * `false` (default): Set this as the root location
    * `true`: Add as additional location
* [Full Documentation →](/key-concepts/locations/set-location#set-the-location)

### Event Subscription

#### useVeltEventCallback()

Hook to subscribe to Velt core events

* Params: `eventType: string`. [Here](/api-reference/sdk/models/api-event-types-enum#core) is the list of events you can subscribe to.
* Returns: `VeltEventTypesMap[T]`. It will return one of the objects from [here](/api-reference/sdk/models/api-event-objects#core)


# API Event Objects
Source: https://docs.velt.dev/api-reference/sdk/models/api-event-objects



# Comments

### Threads

#### AddCommentAnnotationEvent

***

| Property            | Type                     | Required | Description                                                 |
| ------------------- | ------------------------ | -------- | ----------------------------------------------------------- |
| `annotationId`      | `string`                 | Yes      | ID of the annotation                                        |
| `commentAnnotation` | `CommentAnnotation`      | Yes      | Comment annotation object                                   |
| `metadata`          | `VeltEventMetadata`      | Yes      | Event metadata                                              |
| `addContext`        | `(context: any) => void` | Yes      | Function to add custom metadata                             |
| `elementRef`        | `{ xpath: string }`      | No       | Reference to DOM element where comment annotation was added |

#### DeleteCommentAnnotationEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

### Messages

#### AddCommentEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `commentId`         | `number`            | Yes      | ID of the comment         |
| `comment`           | `Comment`           | Yes      | Comment Object            |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### UpdateCommentEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `commentId`         | `number`            | Yes      | ID of the comment         |
| `comment`           | `Comment`           | Yes      | Comment Object            |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### DeleteCommentEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `commentId`         | `number`            | Yes      | ID of the comment         |
| `comment`           | `Comment`           | Yes      | Comment Object            |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

### @Mentions

#### AssignUserEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `assignedTo`        | `UserContact`       | Yes      | User being assigned       |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `metadata`          | `VeltEventMetadata` | No       | Event metadata            |

#### SubscribeCommentAnnotationEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### UnsubscribeCommentAnnotationEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### AutocompleteSearchEvent

***

| Property     | Type                                   | Required | Description                                                          |
| ------------ | -------------------------------------- | -------- | -------------------------------------------------------------------- |
| `event`      | `KeyboardEvent \| InputEvent \| Event` | Yes      | The triggering event                                                 |
| `searchText` | `string`                               | Yes      | The search text entered                                              |
| `type`       | `'contact' \| 'custom'`                | No       | Type of autocomplete search. Whether is the @mentions or custom list |
| `metadata`   | `VeltEventMetadata`                    | No       | Event metadata                                                       |

### Custom List

#### AutocompleteSearchEvent

***

| Property     | Type                                   | Required | Description                                                          |
| ------------ | -------------------------------------- | -------- | -------------------------------------------------------------------- |
| `event`      | `KeyboardEvent \| InputEvent \| Event` | Yes      | The triggering event                                                 |
| `searchText` | `string`                               | Yes      | The search text entered                                              |
| `type`       | `'contact' \| 'custom'`                | No       | Type of autocomplete search. Whether is the @mentions or custom list |
| `metadata`   | `VeltEventMetadata`                    | No       | Event metadata                                                       |

### Attachments

#### AddAttachmentEvent

***

| Property            | Type                      | Required | Description                   |
| ------------------- | ------------------------- | -------- | ----------------------------- |
| `annotationId`      | `string`                  | Yes      | ID of the annotation          |
| `commentAnnotation` | `CommentAnnotation`       | Yes      | Comment annotation object     |
| `attachments`       | `AddAttachmentResponse[]` | Yes      | Array of attachment responses |
| `metadata`          | `VeltEventMetadata`       | Yes      | Event metadata                |

#### AddAttachmentResponse

***

| Property         | Type         | Required | Description                 |
| ---------------- | ------------ | -------- | --------------------------- |
| `valid`          | `boolean`    | Yes      | Whether attachment is valid |
| `file`           | `File`       | No       | File object                 |
| `maxAllowedSize` | `number`     | Yes      | Maximum allowed file size   |
| `error`          | `string`     | No       | Error message if invalid    |
| `attachment`     | `Attachment` | No       | Attachment object           |

#### DeleteAttachmentEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentId`         | `number`            | Yes      | ID of the comment         |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `attachment`        | `Attachment`        | Yes      | Attachment Object         |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

### Reactions

#### AddReactionEvent

***

| Property            | Type                 | Required | Description               |
| ------------------- | -------------------- | -------- | ------------------------- |
| `annotationId`      | `string`             | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation`  | Yes      | Comment annotation object |
| `commentId`         | `number`             | Yes      | ID of the comment         |
| `reaction`          | `ReactionAnnotation` | Yes      | Reaction Object           |
| `metadata`          | `VeltEventMetadata`  | Yes      | Event metadata            |

#### DeleteReactionEvent

***

| Property            | Type                 | Required | Description               |
| ------------------- | -------------------- | -------- | ------------------------- |
| `annotationId`      | `string`             | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation`  | Yes      | Comment annotation object |
| `commentId`         | `number`             | Yes      | ID of the comment         |
| `reaction`          | `ReactionAnnotation` | Yes      | Reaction Object           |
| `metadata`          | `VeltEventMetadata`  | Yes      | Event metadata            |

#### ToggleReactionEvent

***

| Property            | Type                 | Required | Description               |
| ------------------- | -------------------- | -------- | ------------------------- |
| `annotationId`      | `string`             | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation`  | Yes      | Comment annotation object |
| `commentId`         | `number`             | Yes      | ID of the comment         |
| `reaction`          | `ReactionAnnotation` | Yes      | Reaction Object           |
| `metadata`          | `VeltEventMetadata`  | Yes      | Event metadata            |

### Status & Priority

#### UpdateStatusEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `newStatus`         | `CustomStatus`      | Yes      | New status object         |
| `oldStatus`         | `CustomStatus`      | Yes      | Previous status object    |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### ResolveCommentEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### UpdatePriorityEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `newPriority`       | `CustomPriority`    | No       | New Priority object       |
| `oldPriority`       | `CustomPriority`    | No       | Previous Priority object  |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### ApproveCommentAnnotationEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### AcceptCommentAnnotationEvent

***

| Property             | Type                | Required | Description                   |
| -------------------- | ------------------- | -------- | ----------------------------- |
| `annotationId`       | `string`            | Yes      | ID of the annotation          |
| `commentAnnotation`  | `CommentAnnotation` | Yes      | Comment annotation object     |
| `metadata`           | `VeltEventMetadata` | Yes      | Event metadata                |
| `actionUser`         | `User`              | Yes      | User who performed the action |
| `replaceContentHtml` | `string`            | No       | HTML content to replace with  |
| `replaceContentText` | `string`            | No       | Text content to replace with  |

#### RejectCommentAnnotationEvent

***

| Property             | Type                | Required | Description                   |
| -------------------- | ------------------- | -------- | ----------------------------- |
| `annotationId`       | `string`            | Yes      | ID of the annotation          |
| `commentAnnotation`  | `CommentAnnotation` | Yes      | Comment annotation object     |
| `metadata`           | `VeltEventMetadata` | Yes      | Event metadata                |
| `actionUser`         | `User`              | Yes      | User who performed the action |
| `replaceContentHtml` | `string`            | No       | HTML content to replace with  |
| `replaceContentText` | `string`            | No       | Text content to replace with  |

### Recordings

#### DeleteRecordingEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `commentId`         | `number`            | Yes      | ID of the comment         |
| `recording`         | `RecordedData`      | Yes      | Recording data            |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

### Deep Links

#### CopyLinkEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `link`              | `string`            | Yes      | Copied link               |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

#### GetLinkResponse

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `link`              | `string \| null`    | Yes      | Generated link            |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

### Access

#### UpdateAccessEvent

***

| Property            | Type                | Required | Description               |
| ------------------- | ------------------- | -------- | ------------------------- |
| `annotationId`      | `string`            | Yes      | ID of the annotation      |
| `commentAnnotation` | `CommentAnnotation` | Yes      | Comment annotation object |
| `newAccessMode`     | `CommentAccessMode` | No       | New access mode           |
| `oldAccessMode`     | `CommentAccessMode` | No       | Previous access mode      |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata            |

### UI

#### ComposerClickedEvent

***

| Property            | Type                | Required | Description                                                                             |
| ------------------- | ------------------- | -------- | --------------------------------------------------------------------------------------- |
| `commentAnnotation` | `CommentAnnotation` | No       | Comment annotation object. This is `undefined` if it's a new comment annotation object. |
| `metadata`          | `VeltEventMetadata` | Yes      | Event metadata                                                                          |

### Comment Sidebar

#### CommentSidebarDataInitEvent

***

| Property                      | Type                                        | Required | Description                  |
| ----------------------------- | ------------------------------------------- | -------- | ---------------------------- |
| `buttonContext`               | `VeltButtonContext`                         | Yes      | Button context               |
| `metadata`                    | `VeltEventMetadata`                         | Yes      | Event metadata               |
| `commentAnnotation`           | `CommentAnnotation`                         | No       | Comment annotation object    |
| `comment`                     | `Comment`                                   | No       | Comment object               |
| `index`                       | `number`                                    | No       | Index value                  |
| `commentAnnotations`          | `CommentAnnotation[]`                       | No       | Array of comment annotations |
| `systemFilteredAnnotations`   | `CommentAnnotation[]`                       | No       | Filtered comment annotations |
| `unreadCommentAnnotationsMap` | `{ [commentAnnotationId: string]: number }` | No       | Map of unread comment counts |

#### CommentSidebarDataUpdateEvent

***

| Property                      | Type                                        | Required | Description                  |
| ----------------------------- | ------------------------------------------- | -------- | ---------------------------- |
| `buttonContext`               | `VeltButtonContext`                         | Yes      | Button context               |
| `metadata`                    | `VeltEventMetadata`                         | Yes      | Event metadata               |
| `commentAnnotation`           | `CommentAnnotation`                         | No       | Comment annotation object    |
| `comment`                     | `Comment`                                   | No       | Comment object               |
| `index`                       | `number`                                    | No       | Index value                  |
| `commentAnnotations`          | `CommentAnnotation[]`                       | No       | Array of comment annotations |
| `systemFilteredAnnotations`   | `CommentAnnotation[]`                       | No       | Filtered comment annotations |
| `unreadCommentAnnotationsMap` | `{ [commentAnnotationId: string]: number }` | No       | Map of unread comment counts |

# Recorder

#### TranscriptionDoneEvent

***

| Property | Type                                     | Required | Description                   |
| -------- | ---------------------------------------- | -------- | ----------------------------- |
| `data`   | `Record<string, RecorderData>` \| `null` | Yes      | Recording data object or null |

# Core

### Velt Button

#### VeltButtonClickEvent

***

| Property                      | Type                                        | Required | Description                                                                            |
| ----------------------------- | ------------------------------------------- | -------- | -------------------------------------------------------------------------------------- |
| `buttonContext`               | `VeltButtonContext`                         | Yes      | Button context                                                                         |
| `metadata`                    | `VeltEventMetadata`                         | Yes      | Event metadata                                                                         |
| `commentAnnotation`           | `CommentAnnotation`                         | No       | Comment annotation object                                                              |
| `comment`                     | `Comment`                                   | No       | Comment object                                                                         |
| `index`                       | `number`                                    | No       | Index of the repeated component the button is in. eg: Comment, Notification component. |
| `commentAnnotations`          | `CommentAnnotation[]`                       | No       | Array of comment annotations                                                           |
| `systemFilteredAnnotations`   | `CommentAnnotation[]`                       | No       | Filtered comment annotations                                                           |
| `unreadCommentAnnotationsMap` | `{ [commentAnnotationId: string]: number }` | No       | Map of unread comment counts                                                           |
| `notification`                | `Notification`                              | No       | Notification object                                                                    |
| `notifications`               | `Notification[]`                            | No       | Array of notifications                                                                 |


# API Event Types Enum
Source: https://docs.velt.dev/api-reference/sdk/models/api-event-types-enum



# Comments

### Threads

| Enum Name                   | Event Type                | Description                  |
| --------------------------- | ------------------------- | ---------------------------- |
| `ADD_COMMENT_ANNOTATION`    | `addCommentAnnotation`    | Add a new comment annotation |
| `DELETE_COMMENT_ANNOTATION` | `deleteCommentAnnotation` | Delete a comment annotation  |

### Messages

| Enum Name        | Event Type      | Description                |
| ---------------- | --------------- | -------------------------- |
| `ADD_COMMENT`    | `addComment`    | Add a new comment          |
| `UPDATE_COMMENT` | `updateComment` | Update an existing comment |
| `DELETE_COMMENT` | `deleteComment` | Delete a comment           |

### @Mentions

| Enum Name                        | Event Type                     | Description                                                        |
| -------------------------------- | ------------------------------ | ------------------------------------------------------------------ |
| `ASSIGN_USER`                    | `assignUser`                   | Assign a user to a comment                                         |
| `SUBSCRIBE_COMMENT_ANNOTATION`   | `subscribeCommentAnnotation`   | Subscribe to a comment annotation                                  |
| `UNSUBSCRIBE_COMMENT_ANNOTATION` | `unsubscribeCommentAnnotation` | Unsubscribe from a comment annotation                              |
| `AUTOCOMPLETE_SEARCH`            | `autocompleteSearch`           | When user starts searching for a contact in the @mentions dropdown |

### Custom Lists

| Enum Name             | Event Type           | Description                                                            |
| --------------------- | -------------------- | ---------------------------------------------------------------------- |
| `AUTOCOMPLETE_SEARCH` | `autocompleteSearch` | When user starts searching for a list item in the custom list dropdown |

### Attachments

| Enum Name           | Event Type         | Description                         |
| ------------------- | ------------------ | ----------------------------------- |
| `ADD_ATTACHMENT`    | `addAttachment`    | Add an attachment to a comment      |
| `DELETE_ATTACHMENT` | `deleteAttachment` | Delete an attachment from a comment |

### Reactions

| Enum Name         | Event Type       | Description                      |
| ----------------- | ---------------- | -------------------------------- |
| `ADD_REACTION`    | `addReaction`    | Add a reaction to a comment      |
| `DELETE_REACTION` | `deleteReaction` | Delete a reaction from a comment |
| `TOGGLE_REACTION` | `toggleReaction` | Toggle a reaction on a comment   |

### Status & Priority

| Enum Name                    | Event Type                 | Description                      |
| ---------------------------- | -------------------------- | -------------------------------- |
| `UPDATE_STATUS`              | `updateStatus`             | Update the status of a comment   |
| `RESOLVE_COMMENT`            | `resolveComment`           | Resolve a comment                |
| `UPDATE_PRIORITY`            | `updatePriority`           | Update the priority of a comment |
| `APPROVE_COMMENT_ANNOTATION` | `approveCommentAnnotation` | Approve a comment annotation     |
| `ACCEPT_COMMENT_ANNOTATION`  | `acceptCommentAnnotation`  | Accept a comment annotation      |
| `REJECT_COMMENT_ANNOTATION`  | `rejectCommentAnnotation`  | Reject a comment annotation      |

### Recordings

| Enum Name          | Event Type        | Description                       |
| ------------------ | ----------------- | --------------------------------- |
| `DELETE_RECORDING` | `deleteRecording` | Delete a recording from a comment |

### Deep Links

| Enum Name   | Event Type | Description                   |
| ----------- | ---------- | ----------------------------- |
| `COPY_LINK` | `copyLink` | Copy a deep link to a comment |

### Access

| Enum Name       | Event Type     | Description                          |
| --------------- | -------------- | ------------------------------------ |
| `UPDATE_ACCESS` | `updateAccess` | Update access settings for a comment |

### Comment Sidebar

| Enum Name                     | Event Type                 | Description                                         |
| ----------------------------- | -------------------------- | --------------------------------------------------- |
| `COMMENT_SIDEBAR_DATA_INIT`   | `commentSidebarDataInit`   | Triggered when comment sidebar data is first loaded |
| `COMMENT_SIDEBAR_DATA_UPDATE` | `commentSidebarDataUpdate` | Triggered when comment sidebar data is updated      |

### UI

| Enum Name          | Event Type        | Description                                |
| ------------------ | ----------------- | ------------------------------------------ |
| `COMPOSER_CLICKED` | `composerClicked` | Triggered when comment composer is clicked |

# Recorder

| Enum Name            | Event Type          | Description                                           |
| -------------------- | ------------------- | ----------------------------------------------------- |
| `TRANSCRIPTION_DONE` | `transcriptionDone` | Triggered when a transcription is generated and ready |

# Core

### Velt Button

| Enum Name           | Event Type        | Description                             |
| ------------------- | ----------------- | --------------------------------------- |
| `VELT_BUTTON_CLICK` | `veltButtonClick` | Triggered when a Velt Button is clicked |


# API Request Objects
Source: https://docs.velt.dev/api-reference/sdk/models/api-request-objects



# Comments

### Threads

#### AddCommentAnnotationRequest

***

| Property     | Type                | Required | Description        |
| ------------ | ------------------- | -------- | ------------------ |
| `annotation` | `CommentAnnotation` | Yes      | Comment annotation |
| `options`    | `RequestOptions`    | No       | Request options    |

#### DeleteCommentAnnotationRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

#### CommentRequestQuery

***

| Property      | Type       | Required | Description                        |
| ------------- | ---------- | -------- | ---------------------------------- |
| `documentIds` | `string[]` | Yes      | Array of document IDs to query     |
| `locationIds` | `string[]` | No       | Array of location IDs to filter by |
| `statusIds`   | `string[]` | No       | Array of status IDs to filter by   |

#### GetCommentAnnotationsCountResponse

***

| Property | Type                                              | Required | Description                                                     |
| -------- | ------------------------------------------------- | -------- | --------------------------------------------------------------- |
| `data`   | `Record<string, CommentAnnotationsCount> \| null` | Yes      | Map of document IDs to their comment counts. Null while loading |

#### GetCommentAnnotationsResponse

***

| Property | Type                                          | Required | Description                                                  |
| -------- | --------------------------------------------- | -------- | ------------------------------------------------------------ |
| `data`   | `Record<string, CommentAnnotation[]> \| null` | Yes      | Map of document IDs to their annotations. Null while loading |

#### FetchCommentAnnotationsRequest

***

| Property         | Type              | Required | Description                                      |
| ---------------- | ----------------- | -------- | ------------------------------------------------ |
| `createdAfter`   | `number`          | No       | Filter annotations created after this timestamp  |
| `createdBefore`  | `number`          | No       | Filter annotations created before this timestamp |
| `updatedAfter`   | `number`          | No       | Filter annotations updated after this timestamp  |
| `updatedBefore`  | `number`          | No       | Filter annotations updated before this timestamp |
| `statusIds`      | `string[]`        | No       | Filter annotations by status IDs                 |
| `order`          | `'asc' \| 'desc'` | No       | Sort order for annotations                       |
| `pageToken`      | `string`          | No       | Token for fetching next page of results          |
| `allDocuments`   | `boolean`         | No       | Whether to fetch annotations from all documents  |
| `pageSize`       | `number`          | No       | Number of results per page                       |
| `organizationId` | `string`          | No       | Organization ID to fetch annotations from        |
| `locationId`     | `string`          | No       | Location ID to filter annotations by             |
| `documentIds`    | `string[]`        | No       | Array of specific document IDs to fetch from     |
| `folderId`       | `string`          | No       | Folder ID to fetch annotations from              |

#### FetchCommentAnnotationsResponse

***

| Property        | Type                                          | Required | Description                                                    |
| --------------- | --------------------------------------------- | -------- | -------------------------------------------------------------- |
| `data`          | `Record<string, CommentAnnotation[]> \| null` | Yes      | Map of document IDs to their annotations. `Null` while loading |
| `nextPageToken` | `string`                                      | Yes      | Token for fetching next page of results                        |

#### GetCommentRequest

***

| Property               | Type       | Required | Description                                                          |
| ---------------------- | ---------- | -------- | -------------------------------------------------------------------- |
| `organizationId`       | `string`   | Yes      | Organization ID to fetch comments from                               |
| `commentAnnotationIds` | `string[]` | No       | Array of comment annotation IDs to fetch comments from               |
| `documentIds`          | `string[]` | No       | Array of document IDs to fetch comments from                         |
| `folderId`             | `string`   | No       | Folder ID to fetch comments from                                     |
| `allDocuments`         | `boolean`  | No       | Whether to fetch comments from all documents within the given folder |

#### SaveCommentRequest

***

| Property            | Type                                          | Required | Description                             |
| ------------------- | --------------------------------------------- | -------- | --------------------------------------- |
| `commentAnnotation` | `{ [key: string]: PartialCommentAnnotation }` | Yes      | Map of comment annotation data to save  |
| `event`             | `ResolverActions`                             | No       | Event name that caused the save request |
| `commentId`         | `string`                                      | No       | ID of the comment to save               |

#### DeleteCommentRequest

***

| Property              | Type              | Required | Description                               |
| --------------------- | ----------------- | -------- | ----------------------------------------- |
| `commentAnnotationId` | `string`          | Yes      | ID of the comment annotation to delete    |
| `metadata`            | `BaseMetadata`    | No       | Additional metadata for the request       |
| `event`               | `ResolverActions` | No       | Event name that caused the delete request |

### Messages

#### AddCommentRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `comment`      | `Comment`        | Yes      | Comment object       |
| `assignedTo`   | `User`           | No       | Assigned user        |
| `options`      | `RequestOptions` | No       | Request options      |

#### UpdateCommentRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `comment`      | `Comment`        | Yes      | Comment object       |
| `merge`        | `boolean`        | No       | Merge comments       |
| `options`      | `RequestOptions` | No       | Request options      |

#### DeleteCommentRequest

***

| Property                       | Type             | Required | Description              |
| ------------------------------ | ---------------- | -------- | ------------------------ |
| `annotationId`                 | `string`         | Yes      | ID of the annotation     |
| `commentId`                    | `number`         | Yes      | ID of the comment        |
| `skipDeleteThreadConfirmation` | `boolean`        | No       | Skip delete confirmation |
| `options`                      | `RequestOptions` | No       | Request options          |

#### GetCommentRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

### @Mentions

#### AssignUserRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `assignedTo`   | `UserContact`    | Yes      | User to assign       |
| `options`      | `RequestOptions` | No       | Request options      |

#### SubscribeCommentAnnotationRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

#### UnsubscribeCommentAnnotationRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

### Attachments

#### AddAttachmentRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `files`        | `File[]`         | Yes      | Array of files       |
| `options`      | `RequestOptions` | No       | Request options      |

#### DeleteAttachmentRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `commentId`    | `number`         | Yes      | ID of the comment    |
| `attachmentId` | `number`         | Yes      | ID of the attachment |
| `options`      | `RequestOptions` | No       | Request options      |

#### GetAttachmentRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `commentId`    | `number`         | Yes      | ID of the comment    |
| `options`      | `RequestOptions` | No       | Request options      |

#### AddAttachmentResponse

***

| Property         | Type         | Required | Description       |
| ---------------- | ------------ | -------- | ----------------- |
| `valid`          | `boolean`    | Yes      | Validity status   |
| `file`           | `File`       | No       | File object       |
| `maxAllowedSize` | `number`     | Yes      | Max allowed size  |
| `error`          | `string`     | No       | Error message     |
| `attachment`     | `Attachment` | No       | Attachment object |

### Reactions

#### AddReactionRequest

***

| Property       | Type                                                     | Required | Description                                                 |
| -------------- | -------------------------------------------------------- | -------- | ----------------------------------------------------------- |
| `annotationId` | `string`                                                 | Yes      | ID of the annotation                                        |
| `commentId`    | `number`                                                 | Yes      | ID of the comment                                           |
| `reaction`     | `{ reactionId: string; customReaction?: ReactionItem; }` | Yes      | Reaction object with reactionId and optional customReaction |
| `options`      | `RequestOptions`                                         | No       | Request options                                             |

#### DeleteReactionRequest

***

| Property       | Type                                                     | Required | Description                                                 |
| -------------- | -------------------------------------------------------- | -------- | ----------------------------------------------------------- |
| `annotationId` | `string`                                                 | Yes      | ID of the annotation                                        |
| `commentId`    | `number`                                                 | Yes      | ID of the comment                                           |
| `reaction`     | `{ reactionId: string; customReaction?: ReactionItem; }` | Yes      | Reaction object with reactionId and optional customReaction |
| `options`      | `RequestOptions`                                         | No       | Request options                                             |

#### ToggleReactionRequest

***

| Property       | Type                                                     | Required | Description                                                 |
| -------------- | -------------------------------------------------------- | -------- | ----------------------------------------------------------- |
| `annotationId` | `string`                                                 | Yes      | ID of the annotation                                        |
| `commentId`    | `number`                                                 | Yes      | ID of the comment                                           |
| `reaction`     | `{ reactionId: string; customReaction?: ReactionItem; }` | Yes      | Reaction object with reactionId and optional customReaction |
| `options`      | `RequestOptions`                                         | No       | Request options                                             |

#### ReactionItem

***

| Property | Type     | Required | Description               |
| -------- | -------- | -------- | ------------------------- |
| `url`    | `string` | No       | URL of the reaction image |
| `emoji`  | `string` | No       | Emoji character           |

#### GetReactionRequest

***

| Property                | Type       | Required | Description                                                         |
| ----------------------- | ---------- | -------- | ------------------------------------------------------------------- |
| `organizationId`        | `string`   | Yes      | ID of the organization to fetch reactions from                      |
| `reactionAnnotationIds` | `string[]` | No       | Array of reaction annotation IDs to fetch reactions from            |
| `documentIds`           | `string[]` | No       | Array of document IDs to fetch reactions from                       |
| `folderId`              | `string`   | No       | ID of the folder to fetch reactions from                            |
| `allDocuments`          | `boolean`  | No       | Whether to get reactions from all documents within the given folder |

#### SaveReactionRequest

***

| Property             | Type                                           | Required | Description                                               |
| -------------------- | ---------------------------------------------- | -------- | --------------------------------------------------------- |
| `reactionAnnotation` | `{ [key: string]: PartialReactionAnnotation }` | Yes      | Map of reaction annotation id to reaction annotation data |
| `event`              | `ResolverActions`                              | No       | Event name that caused the save request                   |

#### DeleteReactionRequest

***

| Property               | Type              | Required | Description                               |
| ---------------------- | ----------------- | -------- | ----------------------------------------- |
| `reactionAnnotationId` | `string`          | Yes      | ID of the reaction annotation             |
| `metadata`             | `BaseMetadata`    | No       | Base metadata                             |
| `event`                | `ResolverActions` | No       | Event name that caused the delete request |

### Status & Priority

#### UpdateStatusRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `status`       | `CustomStatus`   | Yes      | Status value         |
| `options`      | `RequestOptions` | No       | Request options      |

#### ResolveCommentAnnotationRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

#### UpdatePriorityRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `priority`     | `CustomPriority` | No       | Priority object      |
| `options`      | `RequestOptions` | No       | Request options      |

#### ApproveCommentAnnotationRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

#### AcceptCommentAnnotationRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

#### RejectCommentAnnotationRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

### Recordings

#### GetRecordingRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `commentId`    | `number`         | Yes      | ID of the comment    |
| `options`      | `RequestOptions` | No       | Request options      |

#### DeleteRecordingRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `commentId`    | `number`         | Yes      | ID of the comment    |
| `recorderId`   | `string`         | Yes      | ID of the recorder   |
| `options`      | `RequestOptions` | No       | Request options      |

### Deep Links

#### GetLinkRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

#### CopyLinkRequest

***

| Property       | Type             | Required | Description          |
| -------------- | ---------------- | -------- | -------------------- |
| `annotationId` | `string`         | Yes      | ID of the annotation |
| `options`      | `RequestOptions` | No       | Request options      |

### Access

#### UpdateAccessRequest

***

| Property       | Type                | Required | Description          |
| -------------- | ------------------- | -------- | -------------------- |
| `annotationId` | `string`            | Yes      | ID of the annotation |
| `accessMode`   | `CommentAccessMode` | Yes      | Access mode          |
| `options`      | `RequestOptions`    | No       | Request options      |

### RequestOptions

***

| Property     | Type     | Required | Description |
| ------------ | -------- | -------- | ----------- |
| `documentId` | `string` | No       | Document ID |

# Recorder

### Recorder Data

#### RecorderRequestQuery

***

| Property      | Type       | Required | Description                    |
| ------------- | ---------- | -------- | ------------------------------ |
| `recorderIds` | `string[]` | Yes      | Array of recorder IDs to query |

#### GetRecordingDataResponse

***

| Property | Type                                   | Required | Description                                                     |
| -------- | -------------------------------------- | -------- | --------------------------------------------------------------- |
| `data`   | `Record<string, RecorderData> \| null` | Yes      | Map of recorder IDs to their recording data. Null while loading |

# Core

### Folders

#### FetchFoldersRequest

***

| Property         | Type     | Required | Description                                  |
| ---------------- | -------- | -------- | -------------------------------------------- |
| `organizationId` | `string` | Yes      | Organization ID to fetch folders from        |
| `folderId`       | `string` | No       | Parent folder ID to fetch child folders from |

#### FetchFoldersResponse

***

| Property        | Type                                     | Required | Description                                               |
| --------------- | ---------------------------------------- | -------- | --------------------------------------------------------- |
| `data`          | `Record<string, FolderMetadata> \| null` | Yes      | Map of folder IDs to their metadata. `Null` while loading |
| `nextPageToken` | `string`                                 | Yes      | Token for fetching next page of results                   |

### Documents

### SetDocumentsRequestOptions

***

| Property         | Type      | Required | Description                                                                  |
| ---------------- | --------- | -------- | ---------------------------------------------------------------------------- |
| `organizationId` | `string`  | No       | Organization ID for the documents                                            |
| `folderId`       | `string`  | No       | Subscribe to all or provided documents in the given folder                   |
| `locationId`     | `string`  | No       | Filter and subscribe to document data for a specific location                |
| `allDocuments`   | `boolean` | No       | Subscribe to all documents in the folder. Use this when folderId is provided |

#### FetchDocumentsRequest

***

| Property         | Type       | Required | Description                                |
| ---------------- | ---------- | -------- | ------------------------------------------ |
| `organizationId` | `string`   | Yes      | Organization ID to fetch documents from    |
| `documentIds`    | `string[]` | No       | Array of specific document IDs to fetch    |
| `folderId`       | `string`   | No       | Folder ID to fetch documents from          |
| `allDocuments`   | `boolean`  | No       | Whether to fetch all documents from folder |

#### FetchDocumentsResponse

***

| Property        | Type                                       | Required | Description                                                                                                         |
| --------------- | ------------------------------------------ | -------- | ------------------------------------------------------------------------------------------------------------------- |
| `data`          | `Record<string, DocumentMetadata> \| null` | Yes      | Map of document IDs to their [metadata](/api-reference/sdk/models/data-models#documentmetadata). Null while loading |
| `nextPageToken` | `string`                                   | Yes      | Token for fetching next page of results. Default page size is 1000.                                                 |


# null
Source: https://docs.velt.dev/api-reference/sdk/models/data-models



### AutocompleteItem

***

| Property      | Type     | Required | Description               |
| ------------- | -------- | -------- | ------------------------- |
| `id`          | `string` | Yes      | Unique identifier         |
| `name`        | `string` | Yes      | Name of the item          |
| `description` | `string` | No       | Optional description      |
| `icon`        | `object` | No       | Optional icon information |
| `icon.url`    | `string` | No       | URL of the icon           |
| `link`        | `string` | No       | Link associated with item |

### Comment

***

| Property                | Type                                   | Required | Description                                                             |
| ----------------------- | -------------------------------------- | -------- | ----------------------------------------------------------------------- |
| `commentId`             | `number`                               | Yes      | Unique identifier for the comment pin annotation. Auto generated.       |
| `type`                  | `'text' \| 'voice'`                    | Yes      | This determines the comment content type. Default is 'text'.            |
| `commentText`           | `string`                               | Yes      | The actual text content of the comment.                                 |
| `commentHtml`           | `string`                               | No       | Same comment text but formatted in HTML.                                |
| `replaceContentHtml`    | `string`                               | No       | HTML content to replace the comment text when user accepts the comment. |
| `replaceContentText`    | `string`                               | No       | Text content to replace the comment text when user accepts the comment. |
| `commentVoiceUrl`       | `string`                               | No       | URL of the voice recording for the comment, if available.               |
| `from`                  | `User`                                 | Yes      | The user who created this comment.                                      |
| `to`                    | `User[]`                               | No       | List of users that were @mentioned in this comment.                     |
| `lastUpdated`           | `Date`                                 | No       | Timestamp of when this comment was last updated. Auto generated.        |
| `editedAt`              | `any`                                  | No       | Timestamp of when this comment was edited. Auto generated.              |
| `createdAt`             | `any`                                  | No       | Timestamp of when this comment was created. Auto generated.             |
| `isEdited`              | `boolean`                              | No       | Whether the comment has been edited. Auto generated.                    |
| `status`                | `'added' \| 'updated'`                 | Yes      | Status of the comment indicating whether it was newly added or updated. |
| `attachments`           | `Attachment[]`                         | Yes      | List of attachments associated with the comment.                        |
| `recorders`             | `RecordedData[]`                       | Yes      | List of recorded data associated with the comment.                      |
| `reactionAnnotationIds` | `string[]`                             | Yes      | List of annotation IDs for reactions to the comment.                    |
| `taggedUserContacts`    | `AutocompleteUserContactReplaceData[]` | Yes      | List of users that were @mentioned in this comment with UI metadata.    |
| `customList`            | `AutocompleteReplaceData[]`            | Yes      | List of custom list items added to the comment.                         |
| `isDraft`               | `boolean`                              | Yes      | Whether the comment is in draft state.                                  |

### AutocompleteUserContactReplaceData

***

| Property  | Type     | Required | Description                                                       |
| --------- | -------- | -------- | ----------------------------------------------------------------- |
| `text`    | `string` | Yes      | The text displayed in the comment that represents the tagged user |
| `userId`  | `string` | Yes      | The user ID of the tagged user                                    |
| `contact` | `User`   | No       | The user object of the tagged user                                |

### AutocompleteReplaceData

***

| Property | Type               | Required | Description                                                       |
| -------- | ------------------ | -------- | ----------------------------------------------------------------- |
| `text`   | `string`           | Yes      | The text displayed in the comment that represents the custom item |
| `custom` | `AutocompleteItem` | Yes      | The custom item object associated with this text                  |

### AutocompleteItem

***

| Property      | Type               | Required | Description                                         |
| ------------- | ------------------ | -------- | --------------------------------------------------- |
| `id`          | `string`           | Yes      | Unique identifier for the autocomplete item         |
| `name`        | `string`           | Yes      | Name or label of the autocomplete item              |
| `description` | `string`           | No       | Additional description of the autocomplete item     |
| `icon`        | `{ url?: string }` | No       | Icon associated with the autocomplete item          |
| `link`        | `string`           | No       | Optional link associated with the autocomplete item |

### AutocompleteData

***

| Property      | Type                               | Required | Description                                        |
| ------------- | ---------------------------------- | -------- | -------------------------------------------------- |
| `hotkey`      | `string`                           | Yes      | The hotkey or trigger for this autocomplete data   |
| `description` | `string`                           | No       | Optional description of the autocomplete data      |
| `type`        | `'custom' \| 'contact' \| 'group'` | Yes      | The type of autocomplete data. Default is 'custom' |
| `data`        | `AutocompleteItem[]`               | Yes      | An array of AutocompleteItem objects               |

### Attachment

***

| Property                   | Type     | Required | Description                                          |
| -------------------------- | -------- | -------- | ---------------------------------------------------- |
| `attachmentId`             | `number` | Yes      | Unique identifier for the attachment. Auto-generated |
| `name`                     | `string` | No       | File name of the attachment                          |
| `size`                     | `number` | No       | File size of the attachment                          |
| `type`                     | `string` | No       | File type of the attachment                          |
| `url`                      | `string` | No       | Download URL of the attachment                       |
| `thumbnail`                | `string` | No       | Thumbnail image in base64 format                     |
| `thumbnailWithPlayIconUrl` | `string` | No       | URL of the thumbnail with a play icon overlay        |
| `metadata`                 | `any`    | No       | Additional metadata of the attachment                |
| `mimeType`                 | `any`    | No       | MIME type of the attachment                          |

### CommentAnnotation

***

| Property                  | Type                                 | Required | Description                                                                          |
| ------------------------- | ------------------------------------ | -------- | ------------------------------------------------------------------------------------ |
| `annotationId`            | `string`                             | Yes      | Unique identifier for the comment pin annotation. Auto generated                     |
| `comments`                | `Comment[]`                          | Yes      | The list of all comments part of this annotation                                     |
| `commentCategories`       | `CustomCategory[]`                   | Yes      | The list of categories that this comment pin annotation belongs to                   |
| `from`                    | `User`                               | Yes      | The user who created this comment pin annotation                                     |
| `color`                   | `string`                             | No       | Color used for the comment pin annotation                                            |
| `resolved`                | `boolean`                            | No       | Whether the comment annotation is marked resolved. Deprecated                        |
| `inProgress`              | `boolean`                            | No       | Whether the comment annotation is marked as in progress. Deprecated                  |
| `lastUpdated`             | `any`                                | No       | Timestamp when the comment annotation was last updated. Auto generated               |
| `createdAt`               | `any`                                | No       | Timestamp when the comment annotation was created. Auto generated                    |
| `position`                | `CursorPosition \| null`             | No       | Cursor position relative to the comment annotation                                   |
| `locationId`              | `number \| null`                     | No       | Unique location id generated from provided location                                  |
| `location`                | `Location \| null`                   | No       | Set location to identify user on sub document                                        |
| `type`                    | `string`                             | No       | Type of the comment annotation                                                       |
| `selectAllContent`        | `boolean`                            | No       | If true, sets text comment annotation on all the text content                        |
| `approved`                | `boolean`                            | No       | Whether the comment annotation is approved                                           |
| `status`                  | `CustomStatus`                       | Yes      | Status of the comment annotation. Default: CommentAnnotationStatusMap.OPEN           |
| `annotationIndex`         | `number`                             | No       | Index of current annotation in the list                                              |
| `pageInfo`                | `PageInfo`                           | No       | Page information related to the comment annotation                                   |
| `assignedTo`              | `User`                               | No       | User to whom the comment annotation is assigned                                      |
| `priority`                | `CustomPriority`                     | No       | Priority level of the comment annotation                                             |
| `ghostComment`            | `GhostComment \| null`               | No       | Placeholder for a non-existing comment                                               |
| `context`                 | `any`                                | No       | Custom context data provided by the user                                             |
| `resolvedByUserId`        | `string`                             | No       | ID of the user who resolved the comment                                              |
| `subscribedUsers`         | `CommentAnnotationSubscribedUsers`   | No       | Users who explicitly subscribe to the comment                                        |
| `unsubscribedUsers`       | `CommentAnnotationUnsubscribedUsers` | No       | Users who explicitly unsubscribe to the comment                                      |
| `multiThreadAnnotationId` | `string`                             | No       | ID of the multithread annotation group it belongs to, if created in multithread mode |
| `isDraft`                 | `boolean`                            | No       | Indicates if the comment annotation is in draft state                                |
| `customList`              | `CustomAnnotationDropdownItem[]`     | No       | Custom list of items for the comment annotation                                      |
| `targetElementId`         | `string`                             | No       | ID of the target element for the comment annotation if available                     |

### CommentAnnotationSubscribedUsers

***

| Property     | Type                 | Required | Description                                                                                                                                                                   |
| ------------ | -------------------- | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `userIdHash` | `string`             | Yes      | The user ID of the subscribed user                                                                                                                                            |
| `user`       | `User`               | Yes      | The user object of the subscribed user                                                                                                                                        |
| `type`       | `'manual' \| 'auto'` | Yes      | Manual: if the user used the UI option to subscribe; Auto: When the system automatically adds the user to the subscribed list. eg: when the user creates a comment annotation |

### CommentAnnotationUnsubscribedUsers

***

| Property     | Type                 | Required | Description                                                                                                                                                                                   |
| ------------ | -------------------- | -------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `userIdHash` | `string`             | Yes      | The user ID of the unsubscribed user                                                                                                                                                          |
| `user`       | `User`               | Yes      | The user object of the unsubscribed user                                                                                                                                                      |
| `type`       | `'manual' \| 'auto'` | Yes      | Manual: if the user used the UI option to unsubscribe; Auto: When the system automatically removes the user from the unsubscribed list. eg: when the comment where user was tagged is deleted |

### CustomFilter

***

| Property | Type     | Required | Description                             |
| -------- | -------- | -------- | --------------------------------------- |
| `id`     | `string` | Yes      | Unique identifier for the custom filter |
| `color`  | `string` | Yes      | Color associated with the custom filter |
| `name`   | `string` | Yes      | Name or label of the custom filter      |

### CustomPriority

***

| Property     | Type     | Required | Description                                 |
| ------------ | -------- | -------- | ------------------------------------------- |
| `id`         | `string` | Yes      | Unique identifier for the custom priority   |
| `color`      | `string` | Yes      | Color associated with the custom priority   |
| `name`       | `string` | Yes      | Name or label of the custom priority        |
| `lightColor` | `string` | No       | Light color variant for the custom priority |

### CustomStatus

***

| Property     | Type         | Required | Description                                                    |
| ------------ | ------------ | -------- | -------------------------------------------------------------- |
| `id`         | `string`     | Yes      | Unique identifier for the custom status                        |
| `color`      | `string`     | Yes      | Text and comment pin color associated with the custom status   |
| `name`       | `string`     | Yes      | Name or label of the custom status                             |
| `type`       | `StatusType` | Yes      | Type of the status (`default`, `ongoing`, or `terminal`)       |
| `lightColor` | `string`     | No       | Background color on the status indicator for the custom status |
| `iconUrl`    | `string`     | No       | URL to an icon image for the custom status                     |

### CustomCategory

***

| Property | Type     | Required | Description                               |
| -------- | -------- | -------- | ----------------------------------------- |
| `id`     | `string` | Yes      | Unique identifier for the custom category |
| `color`  | `string` | Yes      | Color associated with the custom category |
| `name`   | `string` | Yes      | Name or label of the custom category      |

### CustomAnnotationDropdownData

***

| Property      | Type                             | Required | Description                                                 |
| ------------- | -------------------------------- | -------- | ----------------------------------------------------------- |
| `type`        | `'multi' \| 'single'`            | Yes      | The type of the custom annotation dropdown                  |
| `placeholder` | `string`                         | Yes      | The placeholder text for the dropdown. Defaults to 'Select' |
| `data`        | `CustomAnnotationDropdownItem[]` | Yes      | An array of dropdown items                                  |

### CustomAnnotationDropdownItem

***

| Property | Type     | Required | Description                                 |
| -------- | -------- | -------- | ------------------------------------------- |
| `id`     | `string` | Yes      | The unique identifier for the dropdown item |
| `label`  | `string` | Yes      | The display text for the dropdown item      |

### Default Status Object

The default status object is defined in the `CommentAnnotationStatusMap` constant. It includes three predefined statuses: OPEN, IN\_PROGRESS, and RESOLVED. Each status is an object with the following structure:

```js
{
  OPEN: {
    id: 'OPEN',
    name: 'Open',
    color: '#625DF5',
    lightColor: '#E7E8FA',
    type: 'default',
    iconUrl: 'url'
  },
  IN_PROGRESS: {
    id: 'IN_PROGRESS',
    name: 'In Progress',
    color: '#ECB000',
    lightColor: '#FEFCEA',
    type: 'ongoing',
    iconUrl: 'url'
  },
  RESOLVED: {
    id: 'RESOLVED',
    name: 'Resolved',
    color: '#00C48C',
    lightColor: '#E7FAF2',
    type: 'terminal',
    iconUrl: 'url'
  },
}
```

### CommentSelectionChangeData

***

| Property     | Type                | Required | Description                            |
| ------------ | ------------------- | -------- | -------------------------------------- |
| `selected`   | `boolean`           | Yes      | Whether a comment is selected          |
| `annotation` | `CommentAnnotation` | Yes      | Object data of the selected annotation |

### CommentSidebarFilterConfig

***

| Property      | Type               | Required | Description                                 |
| ------------- | ------------------ | -------- | ------------------------------------------- |
| `location`    | `FilterTypeConfig` | No       | Configuration for the location filter type. |
| `people`      | `FilterTypeConfig` | No       | Configuration for the people filter type.   |
| `tagged`      | `FilterTypeConfig` | No       | Configuration for the tagged filter type.   |
| `assigned`    | `FilterTypeConfig` | No       | Configuration for the assigned filter type. |
| `priority`    | `FilterTypeConfig` | No       | Configuration for the priority filter type. |
| `category`    | `FilterTypeConfig` | No       | Configuration for the category filter type. |
| `commentType` | `FilterTypeConfig` | No       | Configuration for the comment type filter.  |
| `version`     | `FilterTypeConfig` | No       | Configuration for the version filter type.  |
| `status`      | `FilterTypeConfig` | No       | Configuration for the status filter type.   |

### FilterTypeConfig

***

| Property         | Type      | Required | Description                                            |
| ---------------- | --------- | -------- | ------------------------------------------------------ |
| `name`           | `string`  | No       | The name of the filter type                            |
| `enable`         | `boolean` | No       | Enables or disables the filter type                    |
| `multiSelection` | `boolean` | No       | Allows multiple selections if set to true              |
| `enableGrouping` | `boolean` | No       | Enables grouping within the filter type if set to true |

### CommentSidebarGroupConfig

***

| Property | Type      | Required | Description                  |
| -------- | --------- | -------- | ---------------------------- |
| `enable` | `boolean` | No       | Enables or disables grouping |
| `name`   | `string`  | No       | The name of the group        |

### CommentSidebarFilters

***

| Property   | Type         | Required | Description                                                            |
| ---------- | ------------ | -------- | ---------------------------------------------------------------------- |
| `location` | `Location[]` | No       | Array of `Location` objects for the location filters                   |
| `people`   | `Object[]`   | No       | Array of objects with `userId`, `email`, and `name` for people filters |
| `priority` | `string[]`   | No       | Array of priority filters                                              |
| `status`   | `string[]`   | No       | Array of status filters                                                |
| `category` | `string[]`   | No       | Array of category filters                                              |
| `version`  | `Object[]`   | No       | Array of objects with `id` and optional `name` for version filters     |

### CommentSidebarData

***

| Property      | Type                  | Required | Description                                     |
| ------------- | --------------------- | -------- | ----------------------------------------------- |
| `groupId`     | `string`              | No       | ID of the group. Defaults to 'others'           |
| `groupName`   | `string`              | No       | Name of the group. Defaults to 'Others'         |
| `isExpanded`  | `boolean`             | No       | Whether the group is expanded. Defaults to true |
| `annotations` | `CommentAnnotation[]` | Yes      | List of CommentAnnotations in the group         |

### Options

***

| Property   | Type      | Required | Description                                 |
| ---------- | --------- | -------- | ------------------------------------------- |
| `grouping` | `boolean` | No       | Whether to group the data. Defaults to true |

### Config

| Property                | Type           | Required | Description                                                                                                              |
| ----------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------ |
| `urlAllowList`          | string\[]      | No       | Restricts Velt features to specific pages by specifying partial URL strings.                                             |
| `featureAllowList`      | FeatureType\[] | No       | Only allows the provided Velt features to run.                                                                           |
| `userPlanAllowList`     | string\[]      | No       | Restricts Velt features to specific user plans.                                                                          |
| `userIdAllowList`       | string\[]      | No       | Restricts Velt features to specific users.                                                                               |
| `usePrefersColorScheme` | boolean        | No       | If set to true, listens to changes on the `prefers-color-scheme` media query to set the global theme of Velt components. |

### ContactListScopeForOrganizationUsers Enum

***

| Enum Name                 | Event Type              | Description                    |
| ------------------------- | ----------------------- | ------------------------------ |
| `ALL`                     | `all`                   | Show all the contacts          |
| `ORGANIZATION`            | `organization`          | Show organization contacts.    |
| `ORGANIZATION_USER_GROUP` | `organizationUserGroup` | Show organization user groups. |
| `DOCUMENT`                | `document`              | Show document contacts.        |

### CursorUser

***

| Property       | Type                     | Required | Description                                                                             |
| -------------- | ------------------------ | -------- | --------------------------------------------------------------------------------------- |
| `userId`       | `string`                 | Yes      | Unique user identifier that you use to identify your user.                              |
| `name`         | `string`                 | No       | Your user's full name. Default: Random avatar name.                                     |
| `email`        | `string`                 | No       | Your user's email address.                                                              |
| `photoUrl`     | `string`                 | No       | Your user's display picture URL. Default: Random avatar image.                          |
| `comment`      | `string`                 | No       | Short comment that user can add to their live cursor.                                   |
| `onlineStatus` | `string`                 | Yes      | User's online status (active, inactive, offline). Auto generated.                       |
| `color`        | `string`                 | No       | A random color assigned to the user for the session, used on avatar border/live cursor. |
| `timestamp`    | `any`                    | Yes      | Server Timestamp.                                                                       |
| `type`         | `string`                 | No       | User type.                                                                              |
| `locationId`   | `number \| null`         | No       | Unique location id from provided location.                                              |
| `location`     | `Location \| null`       | No       | Location to identify user on sub document.                                              |
| `position`     | `CursorPosition \| null` | No       | User's cursor position on their screen.                                                 |
| `isReadOnly`   | `boolean`                | No       | Indicates if user is readonly.                                                          |
| `isAnonymous`  | `boolean`                | No       | Indicates if user is anonymous and can only view comments.                              |

### CustomCss

***

| Property | Type               | Required | Description                                                           |
| -------- | ------------------ | -------- | --------------------------------------------------------------------- |
| `type`   | 'link' \| 'styles' | Yes      | The type of custom CSS, either a link to a CSS file or inline styles. |
| `value`  | string             | Yes      | The value of the custom CSS, either a URL or CSS styles.              |

### CustomFilter

***

| Property | Type   | Required | Description                              |
| -------- | ------ | -------- | ---------------------------------------- |
| `id`     | string | Yes      | Unique identifier for the custom filter. |
| `color`  | string | Yes      | Color associated with the custom filter. |
| `name`   | string | Yes      | Name or label of the custom filter.      |

### CustomPriority

***

| Property     | Type   | Required | Description                                  |
| ------------ | ------ | -------- | -------------------------------------------- |
| `id`         | string | Yes      | Unique identifier for the custom priority.   |
| `color`      | string | Yes      | Color associated with the custom priority.   |
| `name`       | string | Yes      | Name or label of the custom priority.        |
| `lightColor` | string | No       | Light color variant for the custom priority. |

### CustomStatus

***

| Property     | Type       | Required | Description                                               |
| ------------ | ---------- | -------- | --------------------------------------------------------- |
| `id`         | string     | Yes      | Unique identifier for the custom status.                  |
| `color`      | string     | Yes      | Color associated with the custom status.                  |
| `name`       | string     | Yes      | Name or label of the custom status.                       |
| `type`       | StatusType | Yes      | Type of the status (`default`, `ongoing`, or `terminal`). |
| `lightColor` | string     | No       | Light color for the custom status.                        |
| `iconUrl`    | string     | No       | URL to an icon image for the custom status.               |

### CustomCategory

***

| Property | Type   | Required | Description                                |
| -------- | ------ | -------- | ------------------------------------------ |
| `id`     | string | Yes      | Unique identifier for the custom category. |
| `color`  | string | Yes      | Color associated with the custom category. |
| `name`   | string | Yes      | Name or label of the custom category.      |

### DocumentMetadata

***

| Property         | Type                                         | Required | Description                                          |
| ---------------- | -------------------------------------------- | -------- | ---------------------------------------------------- |
| `documentId`     | `string`                                     | Yes      | Unique document id generated from client document id |
| `documentName`   | `string`                                     | No       | Display name of the document                         |
| `folderId`       | `string`                                     | No       | ID of the folder containing this document            |
| `apiKey`         | `string`                                     | No       | API key associated with the document                 |
| `organizationId` | `string`                                     | Yes      | Organization ID that owns this document              |
| `locations`      | `{ [locationId: number]: LocationMetadata }` | No       | Location metadata for this document                  |

### EditorAccessTimer

***

| Property       | Type                                    | Required | Description                                                |
| -------------- | --------------------------------------- | -------- | ---------------------------------------------------------- |
| `state`        | `'idle' \| 'inProgress' \| 'completed'` | Yes      | The state of the Editor Access Request timer               |
| `durationLeft` | `number`                                | No       | Duration left for the editor access timer to be completed. |

### Features

***

| Property          | Type              | Required | Description                                        |
| ----------------- | ----------------- | -------- | -------------------------------------------------- |
| `AREA`            | `'area'`          | No       | Area feature for drawing areas/rectangles          |
| `ARROW`           | `'arrow'`         | No       | Arrow feature for drawing arrows                   |
| `AUDIO_HUDDLE`    | `'audioHuddle'`   | No       | Audio huddle feature for voice conversations       |
| `COMMENT`         | `'comment'`       | No       | Comment feature for adding comments                |
| `CURSOR`          | `'cursor'`        | No       | Cursor feature for showing user cursors            |
| `HUDDLE`          | `'huddle'`        | No       | Huddle feature for video conversations             |
| `LIVE_STATE_SYNC` | `'liveStateSync'` | No       | Live state sync feature                            |
| `PRESENCE`        | `'presence'`      | No       | Presence feature for showing online users          |
| `TAG`             | `'tag'`           | No       | Tag feature for adding tags                        |
| `RECORDER`        | `'recorder'`      | No       | Recorder feature for recording sessions            |
| `REWRITER`        | `'rewriter'`      | No       | Rewriter feature for text rewriting                |
| `LIVE_SELECTION`  | `'liveSelection'` | No       | Live selection feature for showing user selections |

### FlockOptions

***

| Property                   | Type                      | Required | Description                                                                                                                                                |
| -------------------------- | ------------------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `useHistoryAPI`            | `boolean`                 | Yes      | Indicates whether the application should use the HTML5 History API for navigation                                                                          |
| `onNavigate`               | `(url: PageInfo) => void` | No       | A callback function that is called when navigation occurs. It takes a `PageInfo` object as its argument, which contains details about the new page         |
| `disableDefaultNavigation` | `boolean`                 | Yes      | If `true`, the application's default navigation handling is disabled, perhaps to be managed manually or by another system                                  |
| `darkMode`                 | `boolean`                 | Yes      | A flag indicating whether the application should display in dark mode, a display preference that may be more comfortable for users in low-light conditions |

### LiveStateData

***

| Property          | Type                                  | Required | Description                                                                                             |
| ----------------- | ------------------------------------- | -------- | ------------------------------------------------------------------------------------------------------- |
| `id`              | `string`                              | Yes      | A unique identifier likely used for quick reference and indexing. It's an MD5 hash of `liveStateDataId` |
| `liveStateDataId` | `string`                              | Yes      | A unique identifier for the state data being synced                                                     |
| `data`            | `string \| number \| boolean \| JSON` | Yes      | The actual data you want to synchronize across clients                                                  |
| `lastUpdated`     | `any`                                 | Yes      | A timestamp or similar data indicating the last time the state data was updated                         |
| `updatedBy`       | `User`                                | Yes      | The user who last updated the state data                                                                |
| `tabId`           | `string \| null`                      | No       | An identifier that could be used to associate the state data with a specific tab or instance            |

### SingleEditorLiveStateData

***

| Property              | Type             | Required | Description                               |
| --------------------- | ---------------- | -------- | ----------------------------------------- |
| `editor`              | `User \| null`   | No       | The user who is currently editing, if any |
| `requestEditorAccess` | `Object \| null` | No       | Details about a request for editor access |
| `tabId`               | `string \| null` | No       | The identifier of the tab, if applicable  |

### RequestEditorAccess

***

| Property              | Type                                                   | Required | Description                                             |
| --------------------- | ------------------------------------------------------ | -------- | ------------------------------------------------------- |
| `user`                | `User`                                                 | Yes      | The user requesting editor access                       |
| `requestedAt`         | `any`                                                  | Yes      | The timestamp when the access was requested             |
| `status`              | `'pending' \| 'accepted' \| 'rejected' \| 'cancelled'` | Yes      | The status of the access request                        |
| `editorAccessTimeout` | `number`                                               | Yes      | Timeout duration for the editor access                  |
| `tabId`               | `string \| null`                                       | No       | The identifier of the tab related to the access request |

### SingleEditorConfig

***

| Property          | Type      | Required | Description                                                                                  |
| ----------------- | --------- | -------- | -------------------------------------------------------------------------------------------- |
| `customMode`      | `boolean` | No       | Enables/disables custom mode. In custom mode, input elements are not disabled for the viewer |
| `singleTabEditor` | `boolean` | Yes      | Enables/disables editor mode on a single tab only                                            |

### UserEditorAccess

***

| Property               | Type      | Required | Description                                                |
| ---------------------- | --------- | -------- | ---------------------------------------------------------- |
| `isEditor`             | `boolean` | No       | Indicates whether the user has editor privileges           |
| `isEditorOnCurrentTab` | `boolean` | No       | Indicates whether the user is an editor on the current tab |

### LiveStateDataMap

***

| Property                        | Type                                            | Required | Description                                                                             |
| ------------------------------- | ----------------------------------------------- | -------- | --------------------------------------------------------------------------------------- |
| `custom`                        | `{ [liveStateDataId: string]: LiveStateData; }` | No       | Map of all unique LiveStateData set by you on the given document.                       |
| `default`                       | Object                                          | No       | Map of all unique LiveStateData set by the default editor on the given document.        |
| `default.singleEditor`          | `SingleEditorLiveStateData`                     | No       | Part of `default`, representing single editor live state data.                          |
| `default.autoSyncState`         | Object                                          |          | Part of `default`, representing auto synchronization state.                             |
| `default.autoSyncState.current` | `LiveStateData`                                 | No       | Part of `autoSyncState`, current live state data.                                       |
| `default.autoSyncState.history` | `[liveStateDataId: string]: LiveStateData`      | No       | Part of `autoSyncState`, map of historical live state data keyed by live state data ID. |

### LiveStateData

***

| Property        | Type    | Required | Description                               |
| --------------- | ------- | -------- | ----------------------------------------- |
| `id`            | string  | Yes      | Unique identifier for the live state data |
| `locationName`  | string  | Yes      | Name of the location                      |
| `version`       | Version | Yes      | Version information                       |
| `[key: string]` | any     | Yes      | Additional dynamic properties             |

### Version

***

| Property | Type   | Required | Description                       |
| -------- | ------ | -------- | --------------------------------- |
| `id`     | string | Yes      | Unique identifier for the version |
| `name`   | string | Yes      | Name of the version               |

### LocationMetadata

***

| Property     | Type               | Required | Description                                                   |
| ------------ | ------------------ | -------- | ------------------------------------------------------------- |
| `locationId` | number             | No       | Unique location id generated from client location information |
| `location`   | `Location` \| null | No       | Location object provided by a client                          |

### MediaPreviewConfig

***

| Property         | Type        | Required | Description                       |
| ---------------- | ----------- | -------- | --------------------------------- |
| `audio`          | Object      | No       | Configuration for audio preview   |
| `audio.enabled`  | boolean     | No       | Whether audio preview is enabled  |
| `audio.deviceId` | string      | No       | Device ID for audio input         |
| `video`          | Object      | No       | Configuration for video preview   |
| `video.enabled`  | boolean     | No       | Whether video preview is enabled  |
| `video.deviceId` | string      | No       | Device ID for video input         |
| `screen`         | Object      | No       | Configuration for screen preview  |
| `screen.enabled` | boolean     | No       | Whether screen preview is enabled |
| `screen.stream`  | MediaStream | No       | MediaStream for screen sharing    |

### Notification

***

| Property                             | Type                                | Required | Description                                                                   |
| ------------------------------------ | ----------------------------------- | -------- | ----------------------------------------------------------------------------- |
| `id`                                 | `string`                            | Yes      | Notification ID                                                               |
| `notificationSource`                 | `string`                            | Yes      | Notification source. e.g., 'comment', 'custom', etc.                          |
| `actionType`                         | `string`                            | No       | Action that triggered the notification. e.g., 'added'                         |
| `isUnread`                           | `boolean`                           | No       | Whether the notification is unread for the user                               |
| `actionUser`                         | `User`                              | No       | The user who triggered the action                                             |
| `timestamp`                          | `number`                            | No       | Timestamp of the notification                                                 |
| `displayHeadlineMessage`             | `string`                            | No       | The headline message of the notification                                      |
| `displayBodyMessage`                 | `string`                            | No       | The body message of the notification                                          |
| `displayHeadlineMessageTemplate`     | `string`                            | No       | The template of the headline message                                          |
| `displayHeadlineMessageTemplateData` | `object`                            | No       | The data used to fill the headline message template                           |
| `forYou`                             | `boolean`                           | No       | Whether the notification is for the current logged-in user                    |
| `targetAnnotationId`                 | `string`                            | No       | ID of the annotation that triggered the notification                          |
| `notificationSourceData`             | `any`                               | No       | The data of the notification source. e.g., `CommentAnnotation`                |
| `metadata`                           | `NotificationMetadata`              | No       | Metadata for the current notification. e.g., `documentId`                     |
| `notifyUsers`                        | `{ [emailHash: string]: boolean }`  | No       | Map of email hashes to boolean values indicating whether to notify the user   |
| `notifyUsersByUserId`                | `{ [userIdHash: string]: boolean }` | No       | Map of user ID hashes to boolean values indicating whether to notify the user |

### displayHeadlineMessageTemplateData

***

| Property        | Type     | Required | Description                             |
| --------------- | -------- | -------- | --------------------------------------- |
| `actionUser`    | `User`   | No       | The user who performed the action       |
| `recipientUser` | `User`   | No       | The user receiving the notification     |
| `actionMessage` | `string` | No       | The message describing the action       |
| `project`       | `string` | No       | The project related to the notification |
| `[key: string]` | `any`    | No       | Any additional custom properties        |

### NotificationMetadata

***

| Property               | Type       | Required | Description                                        |
| ---------------------- | ---------- | -------- | -------------------------------------------------- |
| `apiKey`               | `string`   | No       | Your API key                                       |
| `clientOrganizationId` | `string`   | No       | The organization ID that you set                   |
| `organizationId`       | `string`   | No       | The organization ID generated by us                |
| `clientDocumentId`     | `string`   | No       | The document ID that you set                       |
| `documentId`           | `string`   | No       | The document ID generated by us                    |
| `locationId`           | `number`   | No       | The unique location ID                             |
| `location`             | `Location` | No       | The location object                                |
| `documentMetadata`     | `Object`   | No       | Contains the complete document metadata object     |
| `organizationMetadata` | `Object`   | No       | Contains the complete organization metadata object |

### PageInfo

***

| Property      | Type     | Required | Description                            |
| ------------- | -------- | -------- | -------------------------------------- |
| `url`         | `string` | No       | URL of the webpage                     |
| `path`        | `string` | No       | Path of the webpage excluding base url |
| `baseUrl`     | `string` | No       | Base URL (domain) of a webpage         |
| `title`       | `string` | No       | Title of the webpage                   |
| `commentUrl`  | `string` | No       | Reference url of a comment annotation  |
| `recorderUrl` | `string` | No       | Reference url of a recorder annotation |
| `screenWidth` | `number` | No       | User's screen width. Auto generated.   |

### PresenceUser

***

| Property           | Type               | Required | Description                                                |
| ------------------ | ------------------ | -------- | ---------------------------------------------------------- |
| `userId`           | `string`           | Yes      | Unique user identifier                                     |
| `name`             | `string`           | No       | User's full name (Default: Random avatar name)             |
| `email`            | `string`           | No       | User's email address                                       |
| `photoUrl`         | `string`           | No       | User's display picture URL (Default: Random avatar image)  |
| `onlineStatus`     | `string`           | Yes      | Online status (active, inactive, offline) (Auto generated) |
| `color`            | `string`           | No       | Assigned color for the user (Auto generated)               |
| `timestamp`        | `any`              | Yes      | Server Timestamp                                           |
| `type`             | `string`           | No       | User type                                                  |
| `selections`       | `any`              | No       | User selections                                            |
| `documentParamsId` | `number \| null`   | No       | Deprecated unique document params ID                       |
| `documentParams`   | `object \| null`   | No       | Deprecated document params                                 |
| `locationId`       | `number \| null`   | No       | Unique location ID                                         |
| `location`         | `Location \| null` | No       | Location of user on sub document                           |
| `isReadOnly`       | `boolean`          | No       | Indicates if user is readonly                              |
| `isAnonymous`      | `boolean`          | No       | If user can only view comments (Anonymous)                 |
| `pageInfo`         | `PageInfo`         | Yes      | Information about the page                                 |

### RecorderConfig

***

| Property          | Type                                                     | Required | Description                    |
| ----------------- | -------------------------------------------------------- | -------- | ------------------------------ |
| `type`            | `{ audio?: boolean, video?: boolean, screen?: boolean }` | Yes      | Types of media to be recorded  |
| `recorderOptions` | `MediaRecorderOptions`                                   | No       | Options for the media recorder |

### RecordedData

***

| Property                   | Type       | Required | Description                                                                                       |
| -------------------------- | ---------- | -------- | ------------------------------------------------------------------------------------------------- |
| `id`                       | `string`   | Yes      | Annotation ID of recorder annotation                                                              |
| `tag`                      | `string`   | Yes      | Recorder player tag containing recorder annotation id which can be added anywhere on the DOM      |
| `type`                     | `string`   | Yes      | Type of recorded data. Possible values are 'audio', 'video', and 'screen'                         |
| `thumbnailUrl`             | `string`   | No       | URL of the thumbnail image for the recorded data                                                  |
| `thumbnailWithPlayIconUrl` | `string`   | No       | URL of the thumbnail image with a play icon overlay                                               |
| `videoUrl`                 | `string`   | No       | URL of the recorded video                                                                         |
| `audioUrl`                 | `string`   | No       | URL of the recorded audio                                                                         |
| `videoPlayerUrl`           | `string`   | No       | URL of the hosted website to open video in a new tab                                              |
| `getThumbnailTag`          | `function` | Yes      | A method that returns an HTML string for displaying the thumbnail with a link to the video player |

### `getThumbnailTag` Method

The `getThumbnailTag` method takes an optional `url` parameter and returns an HTML string. It creates an anchor tag linking to the `videoPlayerUrl` and embeds an image tag using either the provided `url`, `thumbnailWithPlayIconUrl`, or `thumbnailUrl` (in that order of preference).

### RecorderAnnotation

***

| Property          | Type          | Required | Description                                                             |   |
| ----------------- | ------------- | -------- | ----------------------------------------------------------------------- | - |
| `annotationId`    | String        | Yes      | Unique identifier for the recorder annotation, automatically generated. |   |
| `from`            | `User`        | Yes      | The user who created the recorder annotation.                           |   |
| `color`           | String        | No       | Color used for the annotation.                                          |   |
| `lastUpdated`     | Any           | No       | Timestamp of the last update, automatically generated.                  |   |
| `locationId`      | Number        | No       | Unique location ID from provided location.                              |   |
| `location`        | `Location`    | No       | Location to identify user on sub document.                              |   |
| `type`            | String        | No       | Type of annotation.                                                     |   |
| `recordingType`   | String        | Yes      | Type of recording for the annotation.                                   |   |
| `mode`            | String        | Yes      | Mode of the recorder annotation, 'floating' or 'thread'.                |   |
| `approved`        | Boolean       | No       | Indicates if the annotation is approved.                                |   |
| `attachment`      | Attachment    | No       | Attachment for recorded media. Deprecated.                              |   |
| `attachments`     | Attachment\[] | Yes      | List of attachments for the annotation.                                 |   |
| `annotationIndex` | Number        | No       | Index of the annotation in a list.                                      |   |
| `pageInfo`        | PageInfo      | No       | Information about the page where the annotation is made.                |   |
| `recordedTime`    | Object        | No       | Recorded time details.                                                  |   |
| `transcription`   | Transcription | No       | Transcription of the recorded media.                                    |   |

### RecorderDataTranscriptSegment

***

| Property             | Type   | Required | Description                             |
| -------------------- | ------ | -------- | --------------------------------------- |
| `startTime`          | String | Yes      | Start time of the transcription segment |
| `endTime`            | String | Yes      | End time of the transcription segment   |
| `startTimeInSeconds` | Number | Yes      | Start time of the segment in seconds    |
| `endTimeInSeconds`   | Number | Yes      | End time of the segment in seconds      |
| `text`               | String | Yes      | Transcribed text content of the segment |

### RecorderDataTranscription

***

| Property             | Type                              | Required | Description                              |
| -------------------- | --------------------------------- | -------- | ---------------------------------------- |
| `transcriptSegments` | `RecorderDataTranscriptSegment[]` | No       | Array of transcription segments          |
| `vttFileUrl`         | String                            | No       | URL to the VTT format transcription file |
| `contentSummary`     | String                            | No       | Summary of the transcribed content       |

### RecorderDataAsset

***

| Property          | Type                               | Required | Description                        |
| ----------------- | ---------------------------------- | -------- | ---------------------------------- |
| `url`             | String                             | Yes      | URL to the recorded media          |
| `mimeType`        | String                             | No       | MIME type of the recorded media    |
| `fileName`        | String                             | No       | Name of the recorded file          |
| `fileSizeInBytes` | Number                             | No       | Size of the recorded file in bytes |
| `fileFormat`      | 'mp3' \| 'mp4' \| 'webm' \| String | No       | The format/extension of the file   |
| `thumbnailUrl`    | String                             | No       | URL to the thumbnail image         |

### RecorderData

***

| Property        | Type                        | Required | Description                                       |
| --------------- | --------------------------- | -------- | ------------------------------------------------- |
| `assets`        | `RecorderDataAsset[]`       | Yes      | Array of recording assets with metadata           |
| `transcription` | `RecorderDataTranscription` | Yes      | Transcription data including segments and summary |

### RewriterAnnotation

***

| Property                 | Type                    | Required | Description                                                                           |
| ------------------------ | ----------------------- | -------- | ------------------------------------------------------------------------------------- |
| `annotationId`           | String                  | Yes      | Unique identifier for the rewriter annotation, automatically generated.               |
| `from`                   | `User`                  | Yes      | The user who created this rewriter annotation.                                        |
| `color`                  | String                  | No       | Color used for the rewriter annotation.                                               |
| `lastUpdated`            | Any                     | No       | Timestamp when the rewriter annotation was last updated, automatically generated.     |
| `documentParamsId`       | Number \| null          | No       | Unique document params ID, deprecated, use `locationId` instead.                      |
| `documentParams`         | `Location` \| null      | No       | Document params to identify user on sub document, deprecated, use `location` instead. |
| `locationId`             | Number \| null          | No       | Unique location ID generated from provided location.                                  |
| `location`               | Location \| null        | No       | Set location to identify user on sub document.                                        |
| `type`                   | String                  | No       | Type of annotation.                                                                   |
| `rewriterType`           | String                  | Yes      | Type of rewriter for the annotation, either 'generic' or 'copywriter'.                |
| `targetTextRange`        | TargetTextRange \| null | No       | Selected text range of rewriter annotation.                                           |
| `annotationIndex`        | Number                  | No       | Index of the current annotation in the list of annotations.                           |
| `pageInfo`               | `PageInfo`              | No       | Information about the page where the annotation is made.                              |
| `selectedRewriterOption` | String                  | No       | Selected rewriter option used in the annotation.                                      |

### SyncVideoPlayer

***

| Property           | Type                 | Required | Description                                           |
| ------------------ | -------------------- | -------- | ----------------------------------------------------- |
| `playerId`         | String               | No       | The identifier for the video player instance.         |
| `src`              | String               | No       | The source URL of the video.                          |
| `sources`          | String\[]            | No       | An array of source URLs for the video.                |
| `lastUpdated`      | Number               | No       | The timestamp of when the player was last updated.    |
| `lastUpdatedBy`    | `User`               | No       | The user who last updated the player.                 |
| `lastUpdatedEvent` | String               | No       | The name of the event that triggered the last update. |
| `playerState`      | SyncVideoPlayerState | Yes      | The state object of the video player.                 |

### SyncVideoPlayerState

***

| Property      | Type    | Required | Description                                  |
| ------------- | ------- | -------- | -------------------------------------------- |
| `playing`     | Boolean | No       | Indicates if the video is currently playing. |
| `currentTime` | Number  | No       | The current playback time of the video.      |
| `muted`       | Boolean | No       | Indicates if the video is muted.             |
| `volume`      | Number  | No       | The volume level of the video.               |
| `speed`       | Number  | No       | The playback rate of the video.              |

### Toast

***

| Property   | Type                 | Required | Default Value | Description                                                              |
| ---------- | -------------------- | -------- | ------------- | ------------------------------------------------------------------------ |
| `id`       | Number               | No       | None          | A unique identifier for the toast notification.                          |
| `message`  | String               | Yes      | None          | The message content displayed in the toast notification.                 |
| `type`     | 'success' \| 'error' | Yes      | None          | The type of toast notification, indicating success or error.             |
| `duration` | Number               | No       | 3000          | The length of time the toast notification is displayed, in milliseconds. |

### Transcription

***

| Property           | Type   | Required | Description                                           |
| ------------------ | ------ | -------- | ----------------------------------------------------- |
| `from`             | User   | Yes      | The user who created the transcription.               |
| `lastUpdated`      | Number | No       | Timestamp of when the transcription was last updated. |
| `transcriptedText` | String | No       | The text that has been transcribed.                   |

### User

***

| Property               | Type    | Required | Description                                                                                                                       |
| ---------------------- | ------- | -------- | --------------------------------------------------------------------------------------------------------------------------------- |
| `userId`               | string  | Yes      | Unique user identifier used to identify your user.                                                                                |
| `name`                 | string  | No       | The full name of your user. Defaults to a random avatar name if not provided.                                                     |
| `photoUrl`             | string  | No       | The display picture URL of your user. Defaults to a random avatar image if not provided.                                          |
| `email`                | string  | No       | Required for sending email or Slack notifications to users about comments and mentions.                                           |
| `plan`                 | string  | No       | The product plan the user is on.                                                                                                  |
| `organizationId`       | string  | Yes      | Autogenerated organizationId based on the organizationId you provide.                                                             |
| `clientorganizationId` | string  | Yes      | The original organizationId provided by you.                                                                                      |
| `color`                | string  | No       | A color assigned to the user for the current session, used for avatar border, live cursor, selection etc.                         |
| `textColor`            | string  | No       | Used in the text color of the user's intial when photoUrl is not present.                                                         |
| `type`                 | string  | No       | The type of user.                                                                                                                 |
| `isReadOnly`           | boolean | No       | Indicates if the user has read-only access.                                                                                       |
| `isAnonymous`          | boolean | No       | Indicates if the user is anonymous and can only view comments.                                                                    |
| `isGuest`              | boolean | No       | Indicates if the user is a guest.                                                                                                 |
| `isAdmin`              | boolean | No       | Use this to set the user as an admin. You also need to ensure that the jwt token you generate also has this property set to true. |
| `groupId`              | string  | No       | \[DEPRECATED] A domain name or identifier used to cluster a group of users who work together.                                     |
| `clientGroupId`        | string  | No       | \[DEPRECATED] The original groupId provided by the user.                                                                          |
| `initial`              | string  | No       | First letter of the user's first name.                                                                                            |

### UserOptions

***

| Property          | Type    | Required | Description                                                                                    |
| ----------------- | ------- | -------- | ---------------------------------------------------------------------------------------------- |
| `replaceContacts` | boolean | No       | If set to true, it will replace the user's personal and group contacts with the ones provided. |
| `authToken`       | string  | No       | The authentication token of the user.                                                          |

### UserContactSelectedPayload

***

| Property                | Type        | Required | Description                           |
| ----------------------- | ----------- | -------- | ------------------------------------- |
| `contact`               | UserContact | Yes      | Selected user contact details.        |
| `isOrganizationContact` | boolean     | Yes      | Is user part of organization contact. |
| `isDocumentContact`     | boolean     | Yes      | Is user part of document contact.     |
| `documentAccessType`    | string      | Yes      | Document access type.                 |

### UserContactUs

***

| Property      | Type                     | Required | Description                                      |
| ------------- | ------------------------ | -------- | ------------------------------------------------ |
| `id`          | string                   | No       | Unique identifier of the feedback.               |
| `apiKey`      | string \| null           | No       | API key of the client.                           |
| `emailId`     | string                   | No       | Email address of the feedback provider.          |
| `message`     | string                   | No       | Content of the user's feedback message.          |
| `from`        | User \| null             | No       | User who submitted the feedback.                 |
| `lastUpdated` | any                      | No       | Timestamp of when the feedback was last updated. |
| `metadata`    | DocumentMetadata \| null | No       | Metadata associated with the document.           |
| `pageInfo`    | PageInfo                 | No       | Information about the user's current page.       |

### UserFeedback

***

| Property      | Type                     | Required | Description                                      |
| ------------- | ------------------------ | -------- | ------------------------------------------------ |
| `id`          | string                   | No       | Unique identifier of the feedback.               |
| `apiKey`      | string \| null           | No       | API key of the client.                           |
| `emailId`     | string                   | No       | Email address of the feedback provider.          |
| `message`     | string                   | No       | Content of the user's feedback message.          |
| `from`        | User \| null             | No       | User who submitted the feedback.                 |
| `lastUpdated` | any                      | No       | Timestamp of when the feedback was last updated. |
| `metadata`    | DocumentMetadata \| null | No       | Metadata associated with the document.           |
| `pageInfo`    | PageInfo                 | No       | Information about the user's current page.       |

### ServerConnectionState

***

| Property       | Type   | Required | Description                                                       |
| -------------- | ------ | -------- | ----------------------------------------------------------------- |
| `ONLINE`       | string | Yes      | Server connection is online and active. Value: 'online'           |
| `OFFLINE`      | string | Yes      | Server connection is offline. Value: 'offline'                    |
| `PENDING_INIT` | string | Yes      | Server connection initialization is pending. Value: 'pendingInit' |
| `PENDING_DATA` | string | Yes      | Server is waiting for data. Value: 'pendingData'                  |

### VeltEventMetadata

***

| Property               | Type                             | Required | Description           |
| ---------------------- | -------------------------------- | -------- | --------------------- |
| `organizationMetadata` | `OrganizationMetadata` \| `null` | No       | Organization metadata |
| `documentMetadata`     | `DocumentMetadata` \| `null`     | No       | Document metadata     |
| `location`             | `Location` \| `null`             | No       | Location information  |

### VeltButtonContext

***

| Property          | Type                                                               | Required | Description                                                                                                        |
| ----------------- | ------------------------------------------------------------------ | -------- | ------------------------------------------------------------------------------------------------------------------ |
| `type`            | `'button' \| 'button-toggle' \| 'multi-select' \| 'single-select'` | No       | Type of button (default: 'button')                                                                                 |
| `groupId`         | `string`                                                           | No       | ID of the button group                                                                                             |
| `selections`      | `VeltButtonSelectionMap`                                           | No       | Map of button selections grouped by button groupIds. For buttons without a group, the groupdId will be 'ungrouped' |
| `clickedButtonId` | `string`                                                           | No       | ID of the clicked button                                                                                           |

### VeltButtonSelectionMap

***

| Property            | Type                              | Required | Description                          |
| ------------------- | --------------------------------- | -------- | ------------------------------------ |
| `[groupId: string]` | `{ [buttonId: string]: boolean }` | No       | Map of button selections for a group |

### UnreadCommentsCount

***

| Property | Type     | Required | Description                               |
| -------- | -------- | -------- | ----------------------------------------- |
| `count`  | `number` | Yes      | The number of unread comments or threads. |

### Document

***

| Property   | Type               | Required | Description                           |
| ---------- | ------------------ | -------- | ------------------------------------- |
| `id`       | `string`           | Yes      | Unique identifier for the document    |
| `metadata` | `DocumentMetadata` | Yes      | Metadata associated with the document |

### SetDocumentsRequestOptions

***

| Property         | Type      | Required | Description                                                                  |
| ---------------- | --------- | -------- | ---------------------------------------------------------------------------- |
| `organizationId` | `string`  | No       | Organization ID for the documents                                            |
| `folderId`       | `string`  | No       | Subscribe to all or provided documents in the given folder                   |
| `locationId`     | `string`  | No       | Filter and subscribe to document data for a specific location                |
| `allDocuments`   | `boolean` | No       | Subscribe to all documents in the folder. Use this when folderId is provided |

### CommentRequestQuery

***

| Property      | Type       | Required | Description                    |
| ------------- | ---------- | -------- | ------------------------------ |
| `documentIds` | `string[]` | Yes      | List of document IDs to query  |
| `locationIds` | `string[]` | Yes      | List of location IDs to filter |
| `statusIds`   | `string[]` | Yes      | List of status IDs to filter   |

### GetCommentAnnotationsResponse

***

| Property | Type                                  | Required | Description                                      |
| -------- | ------------------------------------- | -------- | ------------------------------------------------ |
| `data`   | `Record<string, CommentAnnotation[]>` | Yes      | Map of document IDs to their comment annotations |

### CommentAnnotationsCount

***

| Property | Type     | Required | Description               |
| -------- | -------- | -------- | ------------------------- |
| `unread` | `number` | Yes      | Number of unread comments |
| `total`  | `number` | Yes      | Total number of comments  |

### GetCommentAnnotationsCountResponse

***

| Property | Type                                      | Required | Description                                 |
| -------- | ----------------------------------------- | -------- | ------------------------------------------- |
| `data`   | `Record<string, CommentAnnotationsCount>` | Yes      | Map of document IDs to their comment counts |

### FolderMetadata

***

| Property         | Type     | Required | Description                                |
| ---------------- | -------- | -------- | ------------------------------------------ |
| `folderId`       | `string` | No       | Unique identifier for the folder           |
| `parentFolderId` | `string` | No       | ID of the parent folder                    |
| `folderName`     | `string` | No       | Display name of the folder                 |
| `createdAt`      | `number` | No       | Timestamp when folder was created          |
| `lastUpdated`    | `number` | No       | Timestamp when folder was last updated     |
| `apiKey`         | `string` | No       | API key associated with the folder         |
| `organizationId` | `string` | No       | Organization ID that the folder belongs to |

### PartialReactionAnnotation

***

| Property       | Type           | Required | Description                   |
| -------------- | -------------- | -------- | ----------------------------- |
| `annotationId` | `string`       | Yes      | ID of the reaction annotation |
| `metadata`     | `BaseMetadata` | No       | Additional metadata           |
| `icon`         | `string`       | No       | Icon for the reaction         |

### ResolverActions

***

An enum that defines the different types of actions that can trigger resolver events.

| Name                        | Value                         | Description                                            |
| --------------------------- | ----------------------------- | ------------------------------------------------------ |
| `COMMENT_ANNOTATION_ADD`    | `'comment_annotation.add'`    | Triggered when a new comment annotation is added       |
| `COMMENT_ANNOTATION_DELETE` | `'comment_annotation.delete'` | Triggered when a comment annotation is deleted         |
| `COMMENT_ADD`               | `'comment.add'`               | Triggered when a new comment is added to an annotation |
| `COMMENT_DELETE`            | `'comment.delete'`            | Triggered when a comment is deleted from an annotation |
| `COMMENT_UPDATE`            | `'comment.update'`            | Triggered when a comment is updated                    |
| `REACTION_ADD`              | `'reaction.add'`              | Triggered when a reaction is added to a comment        |
| `REACTION_DELETE`           | `'reaction.delete'`           | Triggered when a reaction is removed from a comment    |

### PartialComment

***

| Property      | Type               | Required | Description                       |
| ------------- | ------------------ | -------- | --------------------------------- |
| `commentId`   | `string \| number` | Yes      | Unique identifier for the comment |
| `commentHtml` | `string`           | No       | HTML content of the comment       |
| `commentText` | `string`           | No       | Plain text content of the comment |

### PartialCommentAnnotation

***

| Property       | Type                             | Required | Description                                 |
| -------------- | -------------------------------- | -------- | ------------------------------------------- |
| `annotationId` | `string`                         | Yes      | ID of the comment annotation                |
| `metadata`     | `BaseMetadata`                   | No       | Additional metadata                         |
| `comments`     | `Record<string, PartialComment>` | Yes      | Map of comment IDs to partial comments data |

### VeltDataProvider

***

| Property   | Type                             | Required | Description                           |
| ---------- | -------------------------------- | -------- | ------------------------------------- |
| `comment`  | `CommentAnnotationDataProvider`  | No       | Provider for comment annotation data  |
| `user`     | `UserDataProvider`               | No       | Provider for user data                |
| `reaction` | `ReactionAnnotationDataProvider` | No       | Provider for reaction annotation data |

### ResolverConfig

***

| Property            | Type          | Required | Description                               |
| ------------------- | ------------- | -------- | ----------------------------------------- |
| `resolveTimeout`    | `number`      | No       | Timeout duration for resolver operations  |
| `saveRetryConfig`   | `RetryConfig` | No       | Retry configuration for save operations   |
| `deleteRetryConfig` | `RetryConfig` | No       | Retry configuration for delete operations |

### ResolverResponse

***

| Property     | Type      | Required | Description                          |
| ------------ | --------- | -------- | ------------------------------------ |
| `data`       | `T`       | No       | Response data of generic type T      |
| `success`    | `boolean` | Yes      | Whether the operation was successful |
| `message`    | `string`  | No       | Response message                     |
| `timestamp`  | `number`  | No       | Timestamp of the response            |
| `statusCode` | `number`  | Yes      | HTTP status code of the response     |

### RetryConfig

***

| Property          | Type      | Required | Description                                  |
| ----------------- | --------- | -------- | -------------------------------------------- |
| `retryCount`      | `number`  | No       | Number of retry attempts                     |
| `retryDelay`      | `number`  | No       | Delay between retry attempts in milliseconds |
| `revertOnFailure` | `boolean` | No       | Whether to revert changes on failure         |

### CommentAnnotationDataProvider

***

| Property | Type                                                                                                  | Required | Description                            |
| -------- | ----------------------------------------------------------------------------------------------------- | -------- | -------------------------------------- |
| `get`    | `(request: GetCommentRequest) => Promise<ResolverResponse<Record<string, PartialCommentAnnotation>>>` | Yes      | Function to fetch comment annotations  |
| `save`   | `(request: SaveCommentRequest) => Promise<ResolverResponse<T>>`                                       | Yes      | Function to save comment annotations   |
| `delete` | `(request: DeleteCommentRequest) => Promise<ResolverResponse<T>>`                                     | Yes      | Function to delete comment annotations |
| `config` | `ResolverConfig`                                                                                      | No       | Configuration for the data provider    |

### ReactionAnnotationDataProvider

***

| Property | Type                                                                                                    | Required | Description                             |
| -------- | ------------------------------------------------------------------------------------------------------- | -------- | --------------------------------------- |
| `get`    | `(request: GetReactionRequest) => Promise<ResolverResponse<Record<string, PartialReactionAnnotation>>>` | Yes      | Function to fetch reaction annotations  |
| `save`   | `(request: SaveReactionRequest) => Promise<ResolverResponse<T>>`                                        | Yes      | Function to save reaction annotations   |
| `delete` | `(request: DeleteReactionRequest) => Promise<ResolverResponse<T>>`                                      | Yes      | Function to delete reaction annotations |
| `config` | `ResolverConfig`                                                                                        | No       | Configuration for the data provider     |

### UserDataProvider

***

| Property         | Type                                                   | Required | Description                              |
| ---------------- | ------------------------------------------------------ | -------- | ---------------------------------------- |
| `get`            | `(userIds: string[]) => Promise<Record<string, User>>` | Yes      | Function to fetch user data by user IDs  |
| `resolveTimeout` | `number`                                               | No       | Timeout duration for resolver operations |


# Customize Behavior
Source: https://docs.velt.dev/async-collaboration/arrows/customize-behavior



## 1. Getting the Arrow Element

To get access to the Arrow Element APIs, you will first need to get the Arrow Element object from the client.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const arrowElement = client.getArrowElement();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const arrowElement = Velt.getArrowElement();
    ```
  </Tab>
</Tabs>

## 2. Set which elements Arrows can be added to

You can use the `allowedElementIds()` property to set an allowed list of elements the `Arrows` feature can be added to.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltArrows allowedElementIds={['ALLOWED_ID_1', 'ALLOWED_ID_2']} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-arrows allowed-element-ids="['ALLOWED_ID_1', 'ALLOWED_ID_2']"></velt-arrows>
    ```
  </Tab>
</Tabs>

API Methods:

You can use the `arrowElement.allowedElementIds()` method to set an allowed list of elements the `Arrows` feature can be added to.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    arrowElement.allowedElementIds(['ALLOWED_ID_1', 'ALLOWED_ID_2']);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    arrowElement.allowedElementIds(['ALLOWED_ID_1', 'ALLOWED_ID_2']);
    ```
  </Tab>
</Tabs>

## 3. Dark Mode

Whether dark mode is enabled.

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltArrows darkMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-arrows dark-mode="true"></velt-arrows>
    ```
  </Tab>
</Tabs>


# Arrows
Source: https://docs.velt.dev/async-collaboration/arrows/overview



<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=arrows" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="700px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=arrows)


# Setup
Source: https://docs.velt.dev/async-collaboration/arrows/setup



<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import the Arrow components from @veltdev/react">
        Import the `Arrow` components

        ```js
        import { VeltArrows, VeltArrowTool } from '@veltdev/react';
        ```
      </Step>

      <Step title="Place the VeltArrows component">
        Place the `VeltArrows` component at the root of your app.

        ```js
        <div>
          <VeltArrows/>
        </div>
        ```
      </Step>

      <Step title="Place the VeltArrowTool component">
        Place the `VeltArrowsTool` component wherever you want the invite button to appear.

        ```js
        <div className="toolbar">
          <VeltArrowTool />
        </div>
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Place the <velt-arrows> component">
        Place the `<velt-arrows>` component at the root of your app.

        ```html
        <div>
          <velt-arrows></velt-arrows>
        </div>
        ```
      </Step>

      <Step title="Place the <velt-arrow-tool> component">
        Place the component wherever you want the invite button to appear.

        ```html
        <div class="toolbar">
          <velt-arrow-tool></velt-arrow-tool>
        </div>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import { VeltArrows, VeltArrowTool } from '@veltdev/react';

  function YourComponent() {

    return (
      <div>
        <VeltArrows/>
        <div className="toolbar">
          <VeltArrowTool />
        </div>
        
      </div>
    )
    
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Collaboration App</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
      <script>
        async function loadVelt() {
          await Velt.init("YOUR_VELT_API_KEY");
        }
      </script>
    </head>
    <body>
      <velt-arrows></velt-arrows>
      <div class="toolbar">
        <velt-arrow-tool></velt-arrow-tool>
      </div>
      
    </body>
  </html>
  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/async-collaboration/comments-sidebar/customize-behavior



# Custom filtering, sorting and grouping

* Here is the overview on how it works:
  * Enable custom actions in the comments sidebar.
  * Add [Velt Button Wireframe](/ui-customization/custom-action-component) to the sidebar wireframe.
  * Handle click events and lifecycle events to apply custom filtering, sorting, and grouping logic.
  * Update sidebar data.
* Here are the steps to implement it:

<Steps titleSize="h2">
  <Step title="Enable Custom Actions">
    <Tabs>
      <Tab title="React / Next.js">
        Using Props:

        ```jsx
        <VeltCommentsSidebar customActions={true} />
        ```

        Using API:

        ```javascript
        const commentElement = client.getCommentElement();
        commentElement.enableSidebarCustomActions();
        commentElement.disableSidebarCustomActions();
        ```
      </Tab>

      <Tab title="Other Frameworks">
        Using Props:

        ```html
        <velt-comments-sidebar custom-actions="true"></velt-comments-sidebar>
        ```

        Using API:

        ```javascript
        const commentElement = Velt.getCommentElement();
        commentElement.enableSidebarCustomActions();
        commentElement.disableSidebarCustomActions();
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Add Velt Buttons and handle click events">
    * Learn more about how to setup [Velt Button Wireframe](/ui-customization/custom-action-component).
    * Set default state using the `active` prop.
    * Handle `veltButtonClick` event to implement custom filtering, sorting, and grouping logic. It returns [VeltButtonClickEvent](/api-reference/sdk/models/api-event-objects#veltbuttonclickevent).

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx {6-12}
        <VeltWireframe>
          <VeltCommentsSidebarWireframe.Panel>
              <VeltCommentsSidebarWireframe.Header />
              <div className="custom-filter-chip-container">

                  <VeltButtonWireframe id="unread" type="multi-select" group="custom-filter" active={true}>
                      <div className="custom-filter-chip-button">Unread</div>
                  </VeltButtonWireframe>

                  <VeltButtonWireframe id="mentions" type="multi-select" group="custom-filter">
                      <div className="custom-filter-chip-button">Mentions</div>
                  </VeltButtonWireframe>

              </div>
          </VeltCommentsSidebarWireframe.Panel>
        </VeltWireframe>
        ```

        **Handle the button click event:**

        ```jsx
        const veltButtonClickEventData = useVeltEventCallback('veltButtonClick');
        useEffect(() => {
          if (veltButtonClickEventData) {
            if (veltButtonClickEventData.buttonContext?.groupId === 'custom-filter') {
              const selections = veltButtonClickEventData.buttonContext?.selections?.['custom-filter'];
              if (selections?.unread) {
                // show unread comments
              }
              if (selections?.mentions) {
                // show comments with mentions
              }
            }
          }
        }, [veltButtonClickEventData]);
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html {6-12}
        <velt-wireframe style="display:none;">
          <velt-comments-sidebar-wireframe-panel>
            <velt-comments-sidebar-wireframe-header></velt-comments-sidebar-wireframe-header>
            <div class="custom-filter-chip-container">

                <velt-button-wireframe id="unread" type="multi-select" group="custom-filter" active="true">
                    <div class="custom-filter-chip-button">Unread</div>
                </velt-button-wireframe>

                <velt-button-wireframe id="mentions" type="multi-select" group="custom-filter">
                    <div class="custom-filter-chip-button">Mentions</div>
                </velt-button-wireframe>

            </div>
          </velt-comments-sidebar-wireframe-panel>
        </velt-wireframe>
        ```

        **Handle the button click event:**

        ```js
        Velt.on('veltButtonClick').subscribe(veltButtonClickEventData => {
          if (veltButtonClickEventData) {
            if (veltButtonClickEventData.buttonContext?.groupId === 'custom-filter') {
              const selections = veltButtonClickEventData.buttonContext?.selections?.['custom-filter'];
              if (selections?.unread) {
                // Custom Filtering | Sorting | Grouping Logic
              }
              if (selections?.mentions) {
                // Custom Filtering | Sorting | Grouping Logic
              }
            }
          }
        });
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Handle Sidebar data lifecycle events">
    * There are two lifecycle events you need to handle to implement custom filtering, sorting, and grouping logic:

      * `commentSidebarDataInit`: Triggered when comment sidebar data is first loaded. It returns [CommentSidebarDataInitEvent](/api-reference/sdk/models/api-event-objects#commentsidebardatainitevent)
      * `commentSidebarDataUpdate`: Triggered when comment sidebar data is updated. It returns [CommentSidebarDataUpdateEvent](/api-reference/sdk/models/api-event-objects#commentsidebardataupdateevent)
        * This event can trigger multiple times when either the comment data or unread comment count changes.

      <Tabs>
        <Tab title="React / Next.js">
          ```jsx
          const commentSidebarDataInitEvent: CommentSidebarDataInitEvent = useCommentEventCallback('commentSidebarDataInit');
          const commentSidebarDataUpdateEvent: CommentSidebarDataUpdateEvent = useCommentEventCallback('commentSidebarDataUpdate');

          useEffect(() => {
            if (commentSidebarDataInitEvent) {
              // Custom Filtering | Sorting | Grouping Logic
            }
          }, [commentSidebarDataInitEvent]);

          useEffect(() => {
            if (commentSidebarDataUpdateEvent) {
              // Custom Filtering | Sorting | Grouping Logic
            }
          }, [commentSidebarDataUpdateEvent]);
          ```
        </Tab>

        <Tab title="Other Frameworks">
          ```javascript
          const commentElement = Velt.getCommentElement();

          commentElement.on('commentSidebarDataInit').subscribe((data) => {
            // Custom Filtering | Sorting | Grouping Logic
          });

          commentElement.on('commentSidebarDataUpdate').subscribe((data) => {
            // Custom Filtering | Sorting | Grouping Logic
          });
          ```
        </Tab>
      </Tabs>
  </Step>

  <Step title="Update sidebar data based on custom logic">
    * Once you have applied your custom filtering, sorting, and grouping logic, create the data an **array** of [CommentSidebarData](/api-reference/sdk/models/data-models#commentsidebardata) objects and set it in the comments sidebar.
    * Use the `options` parameter to control if you want to group the comments or not.
      <Tabs>
        <Tab title="React / Next.js">
          ```jsx
          const options = {
            grouping: false
          };

          const customFilterData = [
            {
              "groupId": "group1",
              "groupName": "Group 1",
              "isExpanded": true,
              "annotations": [
                {
                    ...annotation1
                },
                {
                    ...annotation2
                },
              ]
            }
          ];

          const commentElement = client.getCommentElement();
          commentElement.setCommentSidebarData(customFilterData, options);
          ```
        </Tab>

        <Tab title="Other Frameworks">
          ```javascript
          const options = {
            grouping: false
          };
          const customFilterData = [
            {
              "groupId": "group1",
              "groupName": "Group 1",
              "isExpanded": true,
              "annotations": [
                {
                    ...annotation1
                },
                {
                    ...annotation2
                },
              ]
            }
          ];
          const commentElement = Velt.getCommentElement();
          commentElement.setCommentSidebarData(customFilterData, options);
          ```
        </Tab>
      </Tabs>
  </Step>
</Steps>

# Navigation

#### onCommentClick

* Listen for click events on comments in the sidebar to trigger actions like navigation.
* The event callback provides access to the clicked comment's annotation object, which includes `location` and `context` data.
* Use this data to update your app's state and navigate to the comment's location.

The event handler receives an object with the following properties:

| Property          | Type              | Description                                      |
| ----------------- | ----------------- | ------------------------------------------------ |
| `documentId`      | string            | ID of the document containing the comment        |
| `location`        | Object            | Location details of the comment                  |
| `targetElementId` | string            | DOM ID of the element the comment is attached to |
| `context`         | Object            | Custom context data associated with the comment  |
| `annotation`      | CommentAnnotation | The full comment annotation object               |

<Tabs>
  <Tab title="React / Next.js">
    ```js
     <VeltCommentsSidebar onCommentClick={onCommentClick} /> 

    // event handler for when a comment is clicked on 
    const onCommentClick = (event) => {
      //handle custom navigation by getting location if you have set custom locations
      const { pageId } = event.location;
      //handle custom navigation by getting context if you have added metadata using addContext()
      const { pageId } = event.context;
      yourNavigateToPageMethod(pageId);
    };
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js

    // event handler for when a comment is clicked on 
    const onCommentClick = (event) => {
      console.log('onCommentClick', event.detail);
      //handle custom navigation by getting location if you have set custom locations
      const { pageId } = event.detail.location;
      //handle custom navigation by getting context if you have added metadata using addContext()
      const { pageId } = event.detail.context;
      yourNavigateToPageMethod(pageId);
    };

    const commentElement = document.querySelector('velt-comments-sidebar');
    commentElement.addEventListener('onCommentClick', onCommentClick);
    ```
  </Tab>
</Tabs>

#### onCommentNavigationButtonClick

* This event is triggered when the navigation button in the comment dialog in the Sidebar is clicked.
* Use this event to implement custom navigation logic.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar onCommentNavigationButtonClick={onCommentNavigationButtonClick} />

      // event handler for when a comment is clicked on 
      const onCommentNavigationButtonClick = (event) => {
        console.log('onCommentNavigationButtonClick', event);
        //handle custom navigation by getting location if you have used Locations
        const { pageId } = event.location;
        //handle custom navigation by getting context if you have used addContext()
        const { pageId } = event.context;
        yourNavigateToPageMethod(pageId);
      };
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    const commentSidebarElement = document.querySelector('velt-comments-sidebar');
    commentSidebarElement.addEventListener('onCommentNavigationButtonClick', (event) => {
      console.log('onCommentNavigationButtonClick', event.detail);
    });
    ```
  </Tab>
</Tabs>

#### enableSidebarUrlNavigation

* By default, clicking a comment in the sidebar doesn't automatically update the page URL where the comment was added.
* Use this to enable automatic URL navigation when clicking comments in the sidebar.
* If your app's state is more complex, you might need to listen for `onCommentClick` events and implement custom navigation logic.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```jsx
    <VeltCommentsSidebar urlNavigation={true} />
    ```

    Using API method:

    ```js
    const commentElement = client.getCommentElement();
    // to enable sidebar url navigation
    commentElement.enableSidebarUrlNavigation();
    // to disable sidebar url navigation
    commentElement.disableSidebarUrlNavigation();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Props:

    ```js
    <velt-comments-sidebar url-navigation="false"></velt-comments-sidebar>
    ```

    Using API method:

    ```js
    const commentElement = Velt.getCommentElement();
    commentElement.enableSidebarUrlNavigation();
    commentElement.disableSidebarUrlNavigation();
    ```
  </Tab>
</Tabs>

# UI

#### currentLocationSuffix

* Adds "(this page)" suffix to the group name when the current location matches the group's location.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar currentLocationSuffix={true}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments-sidebar current-location-suffix="true"></velt-comments-sidebar>
    ```
  </Tab>
</Tabs>

#### embedMode

* By default, the sidebar will open up from the right corner of the page.
* With embed mode, you can add the sidebar in your component and it will take up the full width and height of its container.
* When in embed mode, the sidebar will not have the close button. You need to implement your own open and close functionality on the host component.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <div className="sidebar-container">
      <VeltCommentsSidebar embedMode={true} />
    </div>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <div className="sidebar-container">
      <velt-comments-sidebar embed-mode="true"></velt-comments-sidebar>
    </div>
    ```
  </Tab>
</Tabs>

#### excludeLocationIdsFromSidebar

* Use this to filter out comments from certain locations. These comments will not be displayed in the sidebar.

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```jsx
    <VeltCommentsSidebar excludeLocationIds={['location1', 'location2']} />
    ```

    Using API:

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.excludeLocationIdsFromSidebar(['location1', 'location2']);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Props:

    ```jsx
    <velt-comments-sidebar exclude-location-ids='["location1", "location2"]'></velt-comments-sidebar>
    ```

    Using API:

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.excludeLocationIdsFromSidebar(['location1', 'location2']);
    ```
  </Tab>
</Tabs>

#### filterPanelLayout

* Change the layout of the filter panel in the sidebar.
* Options: `menu` or `bottomSheet`
  `Default: bottomSheet`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar filterPanelLayout="menu"/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments-sidebar filter-panel-layout="menu"/>
    ```
  </Tab>
</Tabs>

#### filterOptionLayout

* Change the layout of the filter options in the sidebar filter panel.
* Options:
  * `checkbox`: (default) to show the filter options in a checkbox list
  * `dropdown`: to show the filter options in a searchable dropdown with checklist

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar filterOptionLayout="dropdown"/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments-sidebar filter-option-layout="dropdown"/>
    ```
  </Tab>
</Tabs>

#### filterCount

* Disable comment count on filter options. This leads to better performance.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar filterCount={false}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments-sidebar filter-count="false"></velt-comments-sidebar>
    ```
  </Tab>
</Tabs>

#### floatingMode

* This makes the sidebar open in an overlay panel over the sidebar button float over the page content.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltSidebarButton floatingMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-sidebar-button floating-mode="true"></velt-sidebar-button>
    ```
  </Tab>
</Tabs>

#### focusedThreadMode

* In this mode, when you click on a comment in the sidebar, it opens the thread in an expanded view within the sidebar itself.
* Other threads and actions like filters, search etc. are hidden behind a back button.
* Enabling this mode also adds a navigation button in the comment dialog. Clicking it will navigate to the comment and trigger a callback. Learn more about it [here](#oncommentnavigationbuttonclick).

<Warning>
  If you had previously used a wireframe for the comment dialog, you will need to add the [navigation button wireframe](/ui-customization/features/async/comments/comment-dialog/subcomponents/header) and the [focused thread wireframe](/ui-customization/features/async/comments/comments-sidebar/overview).
</Warning>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar focusedThreadMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments-sidebar focused-thread-mode="true"></velt-comments-sidebar>
    ```
  </Tab>
</Tabs>

#### pageMode

* This adds a composer in the sidebar where users can add comments without attaching them to any specific element.

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar pageMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments-sidebar page-mode="true"></velt-comments-sidebar>
    ```
  </Tab>
</Tabs>

#### position

* Change the default direction where the sidebar opens from.
* Options: `left` or `right`
* Default: `right`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar position="left"/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments-sidebar position="left"/>
    ```
  </Tab>
</Tabs>

#### openCommentSidebar

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.openCommentSidebar(); // opens the comments side bar
    commentElement.closeCommentSidebar(); // closes the comments side bar
    commentElement.toggleCommentSidebar(); // toggles the comments side bar
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.openCommentSidebar(); // opens the comments side bar
    commentElement.closeCommentSidebar(); // closes the comments side bar
    commentElement.toggleCommentSidebar(); // toggles the comments side bar
    ```
  </Tab>
</Tabs>

#### searchPlaceholder

* Customize the placeholder text shown in the search input of the comments sidebar.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
      <VeltCommentsSidebar searchPlaceholder="New placeholder" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments-sidebar search-placeholder="New placeholder"></velt-comments-sidebar>
    ```
  </Tab>
</Tabs>

# System Filters, Sorting and Grouping

#### filterConfig

* Customize the available system filters:

* `location`: Filter comments by location.

* `people`: Filter comments by author of comment annotation.

* `tagged`: Filter comments by users who were tagged in the comment. Only available in the latest SDK version.

* `assigned`: Filter comments by users who were assigned to the comment. Only available in the latest SDK version.

* `priority`: Filter comments by priority.

* `category`: Filter comments by category.

* `status`: Filter comments by status.

* You can rename, disable, configure grouping, and multi-select behavior of the filters as needed.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const filterConfig = {
      location: {
        enable: true,
        name: "Pages", // change the display name of the filter
        enableGrouping: true, // whether to enable grouping based on location filter
        multiSelection: true, // whether to enable multiselection for the filter
        order: ['locationId1', 'locationId2', 'locationId3'] // change the order of the filter options
      },
      people: {
        enable: true,
        name: "Author", // change the display name of the filter
        enableGrouping: true, // whether to enable grouping based on people filter
        multiSelection: true, // whether to enable multiselection for the filter
      },
      tagged: {
        enable: true,
        name: "Tagged", // change the display name of the filter
        enableGrouping: false, // whether to enable grouping based on tagged filter
        multiSelection: true, // whether to enable multiselection for the filter
      },
      assigned: {
        enable: true,
        name: "Assigned", // change the display name of the filter
        enableGrouping: false, // whether to enable grouping based on assigned filter
        multiSelection: true, // whether to enable multiselection for the filter
      },
      priority: {
        enable: true,
        name: "Priority", // change the display name of the filter
        enableGrouping: false, // whether to enable grouping based on priority filter
        multiSelection: true, // whether to enable multiselection for the filter
      },
      category: {
        enable: true,
        name: "Category", // change the display name of the filter
        enableGrouping: true, // whether to enable grouping based on category filter
        multiSelection: true, // whether to enable multiselection for the filter
      },
      status: {
        enable: true,
        name: "Status", // change the display name of the filter
        multiSelection: true, // whether to enable multiselection for the filter
      }
    }

    <VeltCommentsSidebar filterConfig={filterConfig} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const filterConfig = {
      location: {
        enable: true, // enable/disable location filter
        name: "Pages", // customize location filter heading
        enableGrouping: true, // to enable/disable grouping based on location filter
        multiSelection: true, // to enable/disable multiple selection
        order: ['locationId1', 'locationId2', 'locationId3'] // pass array of location ids here
      },
      people: {
        enable: true, // enable/disable people filter
        name: "People", // customize people filter heading
        enableGrouping: true, // to enable/disable grouping based on people filter
        multiSelection: true, // to enable/disable multiple selection
      },
      priority: {
        enable: true, // enable/disable priority filter
        name: "Priority", // customize priority filter heading
        enableGrouping: false, // to enable/disable grouping based on priority filter
        multiSelection: true, // to enable/disable multiple selection
      },
      category: {
        enable: true, // enable/disable category filter
        name: "Category", // customize category filter heading
        enableGrouping: true, // to enable/disable grouping based on category filter
        multiSelection: true, // to enable/disable multiple selection
      },
      status: {
        enable: true, // enable/disable status filter
        name: "Status", // customize status filter heading
        multiSelection: true, // to enable/disable multiple selection
      }
    };

    const commentsSidebar = document.querySelector(`velt-comments-sidebar`);
    commentsSidebar?.setAttribute("filter-config", JSON.stringify(filterConfig));
    ```
  </Tab>
</Tabs>

#### groupConfig

* Enable/disable the option to group comments in the sidebar with the `group config` attribute:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const groupConfig = {
      enable: true, // whether to enable group by option
      name: "Custom Group By", // change the display name of the group by option in the filter panel
    };

    <VeltCommentsSidebar groupConfig={groupConfig} />

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const groupConfig = {
      enable: true, // whether to enable group by option
      name: "Custom Group By", // change the display name of the group by option in the filter panel
    };


    const commentsSidebar = document.querySelector(`velt-comments-sidebar`);
    commentsSidebar?.setAttribute("group-config", JSON.stringify(groupConfig));

    ```
  </Tab>
</Tabs>

#### sortData

* Change the default sorting order of Comments in the Sidebar.
* Default: `desc`

There are three options for sorting:

* `asc` - to show comments in ascending order of when they were last updated
* `desc` - to show comments in descending order of when they were last updated
* `none` - to show comments in the sequence they were added

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentsSidebar sortData="asc" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments-sidebar sort-data="asc"></velt-comments-sidebar>
    ```
  </Tab>
</Tabs>

#### setCommentSidebarFilters

* Programmatically set the system filters on the sidebar:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const filters = {
    	location: [
    		{ id: 'location1Id' }, // id field is required
    		{ id: 'location2Id' }, // id field is required
    	],
    	people: [
    		{ userId: 'userIdToFilter' }, // userId or
    		{ email: 'userEmailToFilter' } // user email is required
    	],
    	priority: ['P0', 'P1', 'P2'], // default supported values
    	status: ['OPEN', 'IN_PROGRESS', 'RESOLVED'], // default supported values
    	category: ['bug', 'feedback', 'question'], // default supported values
    };


    <VeltCommentsSidebar filters={filters} />
    ```

    API Methods:

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setCommentSidebarFilters(filters);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const filters = {
    	location: [
    		{ id: 'location1Id' }, // id field is required
    		{ id: 'location2Id' }, // id field is required
    	],
    	people: [
    		{ userId: 'userIdToFilter' }, // userId or
    		{ email: 'userEmailToFilter' } // user email is required
    	],
    	priority: ['P0', 'P1', 'P2'], // default supported values
    	status: ['OPEN', 'IN_PROGRESS', 'RESOLVED'], // default supported values
    	category: ['bug', 'feedback', 'question'], // default supported values
    };

    const commentsSidebar = document.querySelector(`velt-comments-sidebar`);
    commentsSidebar?.setAttribute("filters", JSON.stringify(filters));
    ```

    API Methods:

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setCommentSidebarFilters(filters);
    ```
  </Tab>
</Tabs>


# Comments Sidebar
Source: https://docs.velt.dev/async-collaboration/comments-sidebar/overview

Provide a toggleable sidebar to view and filter comments.

The Velt SDK contains 4 components that can be used to control the Comments Sidebar functionality:

* `VeltComments` - Used to enable the Comments feature site wide
* `VeltCommentsSidebar` - The Sidebar that holds all existing comments
* `VeltSidebarButton` - A button that toggles the `VeltCommentsSidebar`on and off
* `VeltCommentTool` - A button that turns on the Comments functionality

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comments&type=sidebar" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="700px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comments\&type=sidebar)


# Setup
Source: https://docs.velt.dev/async-collaboration/comments-sidebar/setup



<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Comments Sidebar Components">
        Import the Comments Sidebar Components.

        ```jsx
        import { 
          VeltProvider, 
          VeltCommentsSidebar, 
          VeltSidebarButton,
          VeltCommentTool 
        } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add Comments and Sidebar components">
        Add the `VeltComments` and `VeltCommentsSidebar` components to the root of your app.

        ```jsx
        <div>
          <VeltComments />
          <VeltCommentsSidebar />
        </div>
        ```
      </Step>

      <Step title="Add Sidebar button and Comment Tool component">
        Add the Sidebar button to toggle the sidebar. Add the `VeltCommentTool` component to leave comments.

        ```jsx
        <div className="toolbar">
          <VeltSidebarButton />
          <VeltCommentTool />
        </div>
        ```

        This is completely optional and you can toggle the sidebar in the comment dialog as well.
      </Step>

      <Step title="Test Integration">
        Test it out by opening the sidebar.

        You should be able to click the `All comments` link in a comment dialog box on the bottom.
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Place the <velt-comments-sidebar> component">
        Place the `<velt-comments-sidebar>` component at the root of your app.

        ```html
        <velt-comments-sidebar></velt-comments-sidebar>
        ```
      </Step>

      <Step title="Place the <velt-sidebar-button> component">
        Place the `<velt-sidebar-button>` component wherever you want the toggle button to appear.

        ```html
        <velt-sidebar-button></velt-sidebar-button>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import { 
    VeltProvider, 
    VeltCommentsSidebar, 
    VeltSidebarButton,
    VeltCommentTool 
  } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">
        <VeltComments /> {/* Add VeltComments to the root of your app provider */}
        <VeltCommentsSidebar /> {/* Add VeltCommentsSidebar to the root of your app provider */}

        <div className="toolbar">
          <VeltCommentTool /> {/* Add VeltCommentTool wherever you want it to appear */}
          <VeltSidebarButton /> {/* Add VeltCommentSideBarButton wherever you want it to appear */}
        </div>

      </VeltProvider>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Collaboration App</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
      <script>
        async function loadVelt() {
          await Velt.init("YOUR_VELT_API_KEY");
        }
      </script>
    </head>
    <body>
      <velt-comments></velt-comments> <!-- add to the root of your app-->
      <velt-comments-sidebar></velt-comments-sidebar> <!-- add to the root of your app -->
      <div class="toolbar"> <!-- a component representing a toolbar-->
        <velt-comment-tool></velt-comment-tool> <!-- add wherever you want it to appear-->
        <velt-sidebar-button></velt-sidebar-button> <!-- add wherever you want it to appear -->
      </div>
      

    </body>
  </html>
  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/async-collaboration/comments/customize-behavior



# Threads

#### addCommentAnnotation

* Adds a new comment annotation.
* Params: [AddCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#addcommentannotationrequest)
* Returns: [AddCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#addcommentannotationevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentAnnotation = {
      comments: [
        {
          commentText: 'This is a comment',
          commentHtml: '<p>This is a comment</p>',
        }
      ]
    };
    const addCommentAnnotationRequest = {
      annotation: commentAnnotation
    };

    // Hook
    const { addCommentAnnotation } = useAddCommentAnnotation();
    const addCommentAnnotationEventData = await addCommentAnnotation(addCommentAnnotationRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const addCommentAnnotationEventData = await commentElement.addCommentAnnotation(addCommentAnnotationRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const commentAnnotation = {
      comments: [
        {
          commentText: 'This is a comment',
          commentHtml: '<p>This is a comment</p>',
        }
      ]
    };
    const addCommentAnnotationRequest = {
      annotation: commentAnnotation
    };

    const commentElement = Velt.getCommentElement();
    const addCommentAnnotationEventData = await commentElement.addCommentAnnotation(addCommentAnnotationRequest);
    ```
  </Tab>
</Tabs>

#### addCommentOnSelectedText

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/addCommentOnSelectedText.png)

By default, when you highlight over any text in `textMode` a Comment Tool button will appear. Clicking the button will add a comment on the highlighted text.

If you want to trigger the comment using an API method call instead of clicking the button, you can do the following:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    // to add comment on selected text
    commentElement.addCommentOnSelectedText();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    // to add comment on selected text
    commentElement.addCommentOnSelectedText();
    ```
  </Tab>
</Tabs>

#### addCommentOnElement

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/addCommentOnElement.png)

Adds a Comment on a specific element by ID.

To add a comment on a specific element through an API method, use the `addCommentOnElement()` method and pass in an object with the schema shows in the example:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx

    const element = {
      "targetElement": {
        "elementId": "element_id", // optional (pass elementId if you want to add comment on a specific element)
        "targetText": "target_text", // optional (pass targetText if you want to add comment on a specific text)
        "occurrence": 1, // optional (default: 1) This is relevant for text comment. By default, we will attach comment to the first occurence of the target text in your document. You can change this to attach your comment on a more specific text.
      	"selectAllContent": true, // Set to `true` if you want to select all the text content of the target element.
      },
      "commentData": [
        {
          "commentText": "This is awesome! Well done.", // To set plain text content
          "commentHtml": "This <span style=\"color: green; background-color: aliceblue; display: inline-block; padding: 4px; border-radius: 4px;\">is test</span> comment.", // To set HTML formatted content
          "replaceContentText": "This is new comment", // provide this replaceContentText to replace current text with
          "replaceContentHtml": "<span>This is <b>new</b> comment.</span>", // If replacement text contains html formatted text, then provide it here
        }
      ],
      "status": "open", // optional (default: open)
    }

    const commentElement = client.getCommentElement();
    commentElement.addCommentOnElement(element);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx

    const element = {
      "targetElement": {
        "elementId": "element_id", // optional (pass elementId if you want to add comment on a specific element)
        "targetText": "target_text", // optional (pass targetText if you want to add comment on a specific text)
        "occurrence": 1, // optional (default: 1) This is relevant for text comment. By default, we will attach comment to the first occurence of the target text in your document. You can change this to attach your comment on a more specific text.
      	"selectAllContent": true, // Set to `true` if you want to select all the text content of the target element.
      },
      "commentData": [
        {
          "commentText": "This is awesome! Well done.", // To set plain text content
          "commentHtml": "This <span style=\"color: green; background-color: aliceblue; display: inline-block; padding: 4px; border-radius: 4px;\">is test</span> comment.", // To set HTML formatted content
          "replaceContentText": "This is new comment", // provide this replaceContentText to replace current text with
          "replaceContentHtml": "<span>This is <b>new</b> comment.</span>", // If replacement text contains html formatted text, then provide it here
        }
      ],
      "status": "open", // optional (default: open)
    }

    const commentElement = Velt.getCommentElement();
    commentElement.addCommentOnElement(element);
    ```
  </Tab>
</Tabs>

#### addManualComment

* This feature is particularly useful for complex UIs where you need precise control over the placement of Comment Pins.
* Using this you can manually set the position of Comment Annotations.
* Handle click events on your canvas/document and use the this method to create a comment with custom metadata.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const context = {
      postion: {x: 200, y: 100},
    };
    const commentElement = client.getCommentElement();
    const config: ManualCommentAnnotationConfig = {
    	context: context, // your context here
    };
    commentElement.addManualComment(config);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const context = {
      postion: {x: 200, y: 100},
    };
    const commentElement = Velt.getCommentElement();
    const config: ManualCommentAnnotationConfig = {
    	context: context, // your context here
    };
    commentElement.addManualComment(config);
    ```
  </Tab>
</Tabs>

#### deleteCommentAnnotation

* Deletes a comment annotation
* Params: [DeleteCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#deletecommentannotationrequest)
* Returns: [DeleteCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#deletecommentannotationevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const deleteCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { deleteCommentAnnotation } = useDeleteCommentAnnotation();
    const deleteCommentAnnotationEvent = await deleteCommentAnnotation(deleteCommentAnnotationRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const deleteCommentAnnotationEvent = await commentElement.deleteCommentAnnotation(deleteCommentAnnotationRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const deleteCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const deleteCommentAnnotationEvent = await commentElement.deleteCommentAnnotation(deleteCommentAnnotationRequest);
    ```
  </Tab>
</Tabs>

#### deleteSelectedComment

To delete a comment using an API method, use the `deleteSelectedComment()` method.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    if (client) {
      const commentElement = client.getCommentElement();
      commentElement.deleteSelectedComment();
    }
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    if (Velt) {
      const commentElement = Velt.getCommentElement();
      commentElement.deleteSelectedComment();
    }
    ```
  </Tab>
</Tabs>

#### getCommentAnnotationsCount

* Get the total and unread comment annotations count of all the comment annotations for all the specified documents.
* If you don't specify any query, it will return data from the documents specified in the `setDocuments` method.
* You can specify 30 documents at a time.
* **Params:** (optional) [CommentRequestQuery](/api-reference/sdk/models/api-request-objects#commentrequestquery)
* **Returns:** [GetCommentAnnotationsCountResponse](/api-reference/sdk/models/api-request-objects#getcommentannotationscountresponse)

<Info>
  Avaiable on SDK version 4.0.0 and above.
</Info>

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    const { data } = useCommentAnnotationsCount(query);

    useEffect(() => {
      if (data) {
        // initial data value will be null while the request is in progress
        console.log("Comment Annotations Count:", data);
      }
    }, [data]);
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.getCommentAnnotationsCount(query).subscribe((response) => {
      // initial data value will be null while the request is in progress
      console.log("Comment Annotations Count:", response.data);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using API:**

    ```js
    const commentElement = Velt.getCommentElement();
    commentElement.getCommentAnnotationsCount(query).subscribe((response) => {
      // initial data value will be null while the request is in progress
      console.log("Comment Annotations Count:", response.data);
    });
    ```
  </Tab>
</Tabs>

#### getUnreadCommentAnnotationCountByLocationId

* Get the number of `CommentAnnotations` with at least 1 unread Comment by Location Id.

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    const count = useUnreadCommentAnnotationCountByLocationId(locationId);
    useEffect(() => {
      console.log(count, 'countObj')
    }, [count])
    ```

    **Using API:**

    ```jsx
    if (client) {
      const commentElement = client.getCommentElement();
      let subscription = commentElement.getUnreadCommentAnnotationCountByLocationId(locationId).subscribe((countObj) => {
        console.log(countObj);
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    if (Velt) {
      const commentElement = Velt.getCommentElement();
      let subscription = commentElement.getUnreadCommentAnnotationCountByLocationId(locationId).subscribe((countObj) => {
        console.log(countObj);
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

#### getCommentAnnotations

* Subscribe to the comment annotations for all the specified documents.
* If you don't specify any query, it will return data from the currently set `documents` and `locations`.
* You can specify 30 documents at a time.
* **Params:** (optional) [CommentRequestQuery](/api-reference/sdk/models/api-request-objects#commentrequestquery)
* **Returns:** [GetCommentAnnotationsResponse](/api-reference/sdk/models/api-request-objects#getcommentannotationsresponse)

<Info>
  Avaiable on SDK version 4.0.0 and above.
</Info>

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    const { data } = useGetCommentAnnotations(query);

    useEffect(() => {
      if (data) {
        // initial data value will be null while the request is in progress
        console.log("Comment Annotations:", data);
      }
    }, [data]);

    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.getCommentAnnotations(query).subscribe((response) => {
      // initial data value will be null while the request is in progress
      console.log("Comment Annotations:", response.data);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using API:**

    ```js
    const commentElement = Velt.getCommentElement();
    commentElement.getCommentAnnotations(query).subscribe((response) => {
      // initial data value will be null while the request is in progress
      console.log("Comment Annotations:", response.data);
    });
    ```
  </Tab>
</Tabs>

#### fetchCommentAnnotations

* Fetches comment annotations based on various criteria such as organizationId, folderId, or specific documentIds.
* It supports pagination and filtering options.
* This is different from the existing subscription API which susbcribes to realtime changes to the comments data.
* Params: [FetchCommentAnnotationsRequest](/api-reference/sdk/models/api-request-objects#fetchcommentannotationsrequest)
* Returns: [FetchCommentAnnotationsResponse](/api-reference/sdk/models/api-event-objects#fetchcommentannotationsresponse)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Get all annotations for a specific folder
    const commentElement = client.getCommentElement();
    const response = await commentElement.fetchCommentAnnotations({
      organizationId: 'org1', 
      folderId: 'folder1',
      allDocuments: true
    });

    // Get annotations for specific documents
    const response = await commentElement.fetchCommentAnnotations({
      organizationId: 'org1',
      documentIds: ['doc1', 'doc2']
    });

    // Get annotations with filters
    const response = await commentElement.fetchCommentAnnotations({
      organizationId: 'org1',
      documentIds: ['doc1', 'doc2'],
      createdAfter: 1234567890,
      statusIds: ['open'],
      pageSize: 20
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    // Get all annotations for a specific folder
    const commentElement = Velt.getCommentElement();
    const response = await commentElement.fetchCommentAnnotations({
      organizationId: 'org1', 
      folderId: 'folder1',
      allDocuments: true
    });

    // Get annotations for specific documents
    const response = await commentElement.fetchCommentAnnotations({
      organizationId: 'org1',
      documentIds: ['doc1', 'doc2']
    });

    // Get annotations with filters
    const response = await commentElement.fetchCommentAnnotations({
      organizationId: 'org1',
      documentIds: ['doc1', 'doc2'],
      createdAfter: 1234567890,
      statusIds: ['open'],
      pageSize: 20
    });
    ```
  </Tab>
</Tabs>

#### getSelectedComments

* Get the currently selected comment annotations.
* Returns: [`CommentAnnotation[]`](/api-reference/sdk/models/data-models#commentannotation).

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    const subscription = commentElement.getSelectedComments().subscribe((selectedComments) => {
      console.log('Selected comments:', selectedComments);
    });

    ```

    Unsubscribe from the subscription when you're done:

    ```jsx
    subscription?.unsubscribe()

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const commentElement = Velt.getCommentElement();
    const subscription = commentElement.getSelectedComments().subscribe((selectedComments) => {
      console.log('Selected comments:', selectedComments);
    });
    ```

    Unsubscribe from the subscription when you're done:

    ```js
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

#### getCommentAnnotationById

* Retrieve a specific comment annotation by its ID.
* By default, it will return the comment annotation for the current `documentId`.
* If you pass in a `documentId`, it will return the comment annotation for the given `documentId`.
* Returns: [CommentAnnotation](/api-reference/sdk/models/data-models#commentannotation)

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    const annotation = useCommentAnnotationById({
      annotationId: '-O6W3jD0Lz3rxuDuqQFx',  // AnnotationID
      documentId: 'document-id'              // DocumentId (Optional)
    });

    useEffect(() => {
      console.log('annotation', annotation);
    }, [annotation]);
    ```

    **Using API:**

    ```javascript
    const commentElement = client.getCommentElement();

    let subscription = commentElement.getCommentAnnotationById({
      annotationId: '-O6W3jD0Lz3rxuDuqQFx',  // AnnotationID
      documentId: 'document-id'              // DocumentId (Optional)
    }).subscribe((annotation) => {
      console.log('annotation', annotation);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using API:**

    ```javascript
    const commentElement = Velt.getCommentElement();

    let subscription = commentElement.getCommentAnnotationById({
      annotationId: '-O6W3jD0Lz3rxuDuqQFx',  // AnnotationID
      documentId: 'document-id'              // DocumentId (Optional)
    }).subscribe((annotation) => {
      console.log('annotation', annotation);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

#### getElementRefByAnnotationId

This will return the Xpath of the DOM element on which the comment was added.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    let elementRef = commentElement.getElementRefByAnnotationId('annotationId')

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    let elementRef = commentElement.getElementRefByAnnotationId('annotationId')
    ```
  </Tab>
</Tabs>

# Messages

#### addComment

* Add a comment to a specific comment annotation
* Params: [AddCommentRequest](/api-reference/sdk/models/api-request-objects#addcommentrequest)
* Returns: [AddCommentEvent](/api-reference/sdk/models/api-event-objects#addcommentevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const comment = {
        commentText: 'This is a comment',
        commentHtml: '<p>This is a comment</p>',
    };

    const addCommentRequest = {
      annotationId: 'ANNOTATION_ID',
      comment: comment
    };

    // Hook
    const { addComment } = useAddComment();
    const addCommentEventData = await addComment(addCommentRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const addCommentEventData = await commentElement.addComment(addCommentRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const comment = {
        commentText: 'This is a comment',
        commentHtml: '<p>This is a comment</p>',
    };

    const addCommentRequest = {
      annotationId: 'ANNOTATION_ID',
      comment: comment
    };

    const commentElement = Velt.getCommentElement();
    const addCommentEventData = await commentElement.addComment(addCommentRequest);
    ```
  </Tab>
</Tabs>

#### updateComment

* Update a comment in a specific comment annotation
* Params: [UpdateCommentRequest](/api-reference/sdk/models/api-request-objects#updatecommentrequest)
* Returns: [UpdateCommentEvent](/api-reference/sdk/models/api-event-objects#updatecommentevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const comment = {
        commentText: 'This is a comment',
        commentHtml: '<p>This is a comment</p>',
    };

    const updateCommentRequest = {
      annotationId: 'ANNOTATION_ID',
      comment: comment
    };

    // Hook
    const { updateComment } = useUpdateComment();
    const updateCommentEvent = await updateComment(updateCommentRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const updateCommentEvent = await commentElement.updateComment(updateCommentRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const comment = {
        commentText: 'This is a comment',
        commentHtml: '<p>This is a comment</p>',
    };

    const updateCommentRequest = {
      annotationId: 'ANNOTATION_ID',
      comment: comment
    };

    const commentElement = Velt.getCommentElement();
    const updateCommentEvent = await commentElement.updateComment(updateCommentRequest);
    ```
  </Tab>
</Tabs>

#### deleteComment

* Delete a comment from a specific comment annotation
* Params: [DeleteCommentRequest](/api-reference/sdk/models/api-request-objects#deletecommentrequest)
* Returns: [DeleteCommentEvent](/api-reference/sdk/models/api-event-objects#deletecommentevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const deleteCommentRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID
    };

    // Hook
    const { deleteComment } = useDeleteComment();
    const deleteCommentEvent = await deleteComment(deleteCommentRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const deleteCommentEvent = await commentElement.deleteComment(deleteCommentRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const deleteCommentRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID
    };

    const commentElement = Velt.getCommentElement();
    const deleteCommentEvent = await commentElement.deleteComment(deleteCommentRequest);
    ```
  </Tab>
</Tabs>

#### getComment

* Get comments from a specific comment annotation
* Params: [GetCommentRequest](/api-reference/sdk/models/api-request-objects#getcommentrequest)
* Returns: [Comment\[\]](/api-reference/sdk/models/api-event-objects#comment)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const getCommentRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { getComment } = useGetComment();
    const comments = await getComment(getCommentRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const comments = await commentElement.getComment(getCommentRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const getCommentRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const comments = await commentElement.getComment(getCommentRequest);
    ```
  </Tab>
</Tabs>

#### getUnreadCommentCountOnCurrentDocument

<Tabs>
  <Tab title="React / Next.js with Hooks">
    You can get the number of unread `Comments` on the current `Document` by using the `useUnreadCommentCountOnCurrentDocument()` hook:

    ```jsx
    const count = useUnreadCommentCountOnCurrentDocument();
    useEffect(() => {
      console.log(count, 'countObj')
    }, [count])
    ```
  </Tab>

  <Tab title="React / Next.js">
    You can get the number of unread `Comments` on the current `Document` by using the `getUnreadCommentCountOnCurrentDocument()` method:

    ```jsx
    if (client) {
      const commentElement = client.getCommentElement();
      let subscription = commentElement.getUnreadCommentCountOnCurrentDocument().subscribe((countObj) => {
        console.log(countObj);
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    You can get the number of unread `Comments` on the current `Document` by using the `getUnreadCommentCountOnCurrentDocument()` method:

    ```jsx
    if (Velt) {
      const commentElement = Velt.getCommentElement();
      let subscription = commentElement.getUnreadCommentCountOnCurrentDocument().subscribe((countObj) => {
        console.log(countObj);
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

#### getUnreadCommentCountByLocationId

<Tabs>
  <Tab title="React / Next.js with Hooks">
    You can get the number of unread `Comments` by `Location Id` by using the `useUnreadCommentCountByLocationId()` hook:

    ```jsx
    const count = useUnreadCommentCountByLocationId(locationId);
    useEffect(() => {
      console.log(count, 'countObj')
    }, [count])
    ```
  </Tab>

  <Tab title="React / Next.js">
    You can get the number of unread `Comments` by `Location Id` by using the `getUnreadCommentCountByLocationId()` method:

    ```jsx
    if (client) {
      const commentElement = client.getCommentElement();
      let subscription = commentElement.getUnreadCommentCountByLocationId(locationId).subscribe((countObj) => {
        console.log(countObj);
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="React / HTML">
    You can get the number of unread `Comments` by `Location Id` by using the `getUnreadCommentCountByLocationId()` method:

    ```jsx
    if (Velt) {
      const commentElement = Velt.getCommentElement();
      let subscription = commentElement.getUnreadCommentCountByLocationId(locationId).subscribe((countObj) => {
        console.log(countObj);
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

#### getUnreadCommentCountByAnnotationId

<Tabs>
  <Tab title="React / Next.js with Hooks">
    You can get the number of unread `Comments` by annotation id by using the `useUnreadCommentCountByAnnotationId()` hook:

    ```jsx
    const count = useUnreadCommentCountByAnnotationId(annotationId);
    useEffect(() => {
       console.log(count, 'countObj')
    }, [count])
    ```
  </Tab>

  <Tab title="React / Next.js">
    You can get the number of unread `Comments` by annotation id by subscribing to the `getUnreadCommentCountByAnnotationId()` method:

    ```jsx
    if (client) {
      const commentElement = client.getCommentElement();
      let subscription = commentElement.getUnreadCommentCountByAnnotationId(annotationId).subscribe((countObj) => {
        console.log(countObj);
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    You can get the number of unread `Comments` by annotation id by subscribing to the `getUnreadCommentCountByAnnotationId()` method:

    ```jsx
    if (Velt) {
      const commentElement = Velt.getCommentElement();
      let subscription = commentElement.getUnreadCommentCountByAnnotationId(annotationId).subscribe((countObj) => {
        console.log(countObj);
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

# @Mentions

#### updateContactList

* By default, the contact list is generated using the users in the organization and the document.
* However, if you do not want to use that feature or want to provide a custom list of contacts, you can use this method.
* By default, it will overwrite the current contact list. You can merge the provided contacts with the existing list by passing the merge flag as `{merge:true}`.
* This method will only update the contact list in the current user session. It doens't update the user contacts in the database or change the access control.

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    const contactElement = useContactUtils();

    useEffect(() => {
      contactElement.updateContactList([{userId: 'userId1', name: 'User Name', email: 'user1@velt.dev'}], {merge: false});
    }, [contactElement]);

    ```

    **Using API:**

    ```jsx
    const contactElement = client.getContactElement();
    contactElement.updateContactList([{userId: 'userId1', name: 'User Name', email: 'user1@velt.dev'}], {merge: false});
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const contactElement = Velt.getContactElement();
    contactElement.updateContactList([{userId: 'userId1', name: 'User Name', email: 'user1@velt.dev'}], {merge: false});
    ```
  </Tab>
</Tabs>

#### updateContactListScopeForOrganizationUsers

* Sometimes you may want to show only certain types of contacts in the contact dropdown.
* By default, organization users will see all contacts in the organization, any user groups and any contacts added to the document.
* Using this method, you can restrict the contacts shown in the dropdown to only certain types.
* This only affects the Organization Users and not the Document Users. Document Users will always only see contacts added to the document.

Here are the available options:

* `all`: Show all the contacts
* `organization`: Show organization contacts.
* `organizationUserGroup`: Show organization user groups.
* `document`: Show document contacts.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const contactElement = client.getContactElement();
    contactElement.updateContactListScopeForOrganizationUsers(['all', 'organization', 'organizationUserGroup', 'document']);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const contactElement = Velt.getContactElement();
    contactElement.updateContactListScopeForOrganizationUsers(['all', 'organization', 'organizationUserGroup', 'document']);
    ```
  </Tab>
</Tabs>

#### customAutocompleteSearch

* Handle autocomplete search for @mentions. You should use this if you have a large contact list that you want to plug into the autocomplete dropdown, and search directly your own data source.
* Event: [`AutocompleteSearchEvent`](/api-reference/sdk/models/api-event-objects#autocompletesearchevent)

<Tabs>
  <Tab title="React / Next.js">
    <Steps>
      <Step title="Enable the feature">
        ```jsx
        // Enable via props
        <VeltComments customAutocompleteSearch={true} />


        // Or, enable via Comment Element API
        const commentElement = client.getCommentElement();
        commentElement.enableCustomAutocompleteSearch();
        commentElement.disableCustomAutocompleteSearch();
        ```
      </Step>

      <Step title="Set initial list">
        ```jsx
        contactElement.updateContactList(users);
        ```
      </Step>

      <Step title="Handle search event">
        ```jsx
        commentElement.on('autocompleteSearch').subscribe(async (inputData) => {
            const searchText = inputData.searchText;

            if (inputData.type === 'contact') {
                const filteredUsersData = await __your_api_call__(searchText);
                contactElement.updateContactList(filteredUsersData, { merge: false });
            }
        });

        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps>
      <Step title="Enable the feature">
        ```js
        // Enable via attribute
        <velt-comments custom-autocomplete-search="true"></velt-comments>

        // Or, enable via Comment Element API
        const commentElement = Velt.getCommentElement();
        commentElement.enableCustomAutocompleteSearch();
        commentElement.disableCustomAutocompleteSearch();
        ```
      </Step>

      <Step title="Set initial list">
        ```js
        contactElement.updateContactList(users);
        ```
      </Step>

      <Step title="Handle search event">
        ```js
        commentElement.on('autocompleteSearch').subscribe(async (inputData) => {
            const searchText = inputData.searchText;

            if (inputData.type === 'contact') {
                const filteredUsersData = await __your_api_call__(searchText);
                contactElement.updateContactList(filteredUsersData, { merge: false });
            }
        });

        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

#### assignUser

* Assigns a user to a comment annotation
* Params: [AssignUserRequest](/api-reference/sdk/models/api-request-objects#assignuserrequest)
* Returns: [AssignUserEvent](/api-reference/sdk/models/api-event-objects#assignuserevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const assignUserRequest = {
      annotationId: 'ANNOTATION_ID',
      assignedTo: {
        userId: 'USER_ID',
        name: 'USER_NAME',
        email: 'USER_EMAIL'
      }
    };

    // Hook
    const { assignUser } = useAssignUser();
    const assignUserEventData = await assignUser(assignUserRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const assignUserEventData = await commentElement.assignUser(assignUserRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const assignUserRequest = {
      annotationId: 'ANNOTATION_ID',
      assignedTo: {
        userId: 'USER_ID',
        name: 'USER_NAME',
        email: 'USER_EMAIL'
      }
    };

    const commentElement = Velt.getCommentElement();
    const assignUserEventData = await commentElement.assignUser(assignUserRequest);
    ```
  </Tab>
</Tabs>

#### enableUserMentions

* This allows you to enable or disable user @mentions.

Whether user @mentions are enabled.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```jsx
    <VeltComments userMentions={false} />
    ```

    **Using Hooks:**

    ```jsx
    const contactElement = useContactUtils();

    useEffect(() => {
      contactElement.enableUserMentions();
      contactElement.disableUserMentions();
    }, [contactElement]);
    ```

    **Using API Method:**

    ```jsx
    const contactElement = client.getContactElement();
    contactElement.enableUserMentions();
    contactElement.disableUserMentions();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using props:**

    ```jsx
    <velt-comments user-mentions="false"></velt-comments>
    ```

    **Using API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableUserMentions(); // to enable user mentions
    commentElement.disableUserMentions(); // to disable user mentions
    ```
  </Tab>
</Tabs>

#### onContactSelected

* This event is triggered when a contact is selected from the contact dropdown in the Comment Dialog.
* Use the event object to determine if the selected contact has access to the document using fields like `isOrganizationContact`, `isDocumentContact` and `documentAccessType`.
* If the selected contact doesn't have access to the document, you can show an invite dialog to the user to invite the contact to the document.

The returned data will be in the following schema:

```jsx
export class UserContactSelectedPayload {
    contact!: UserContact; // Selected Contact.
    isOrganizationContact!: boolean; // Is user part of organization contact.
    isDocumentContact!: boolean; // Is user part of document contact.
    documentAccessType!: string; // Document access type.
}
```

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    const selectedContact = useContactSelected();

    useEffect(() => {
      console.log('selectedContact: ', selectedContact);
    }, [selectedContact]);

    ```

    **Using API:**

    ```jsx
    const contactElement = client.getContactElement();

    contactElement.onContactSelected().subscribe((selectedContact: any) => {
      console.log('selectedContact : ', selectedContact);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const contactElement = Velt.getContactElement();

    contactElement.onContactSelected().subscribe((selectedContact: any) => {
      console.log('selectedContact: ', selectedContact);
    });
    ```
  </Tab>
</Tabs>

#### enableAtHere

* This allows you to notify all the users explicitly added to the current document.
* It won't notify users in the organization who are not explicitly added to the document.

Default: Disabled.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/enable-@-here.png)

<Tabs>
  <Tab title="React / Next.js">
    **Hooks:**

    ```jsx
    const contactElement = useContactUtils();

    useEffect(() => {
      contactElement.enableAtHere();
      contactElement.disableAtHere();
    }, [contactElement]);

    ```

    **API:**

    ```jsx
    const contactElement = client.getContactElement();
    contactElement.enableAtHere();
    contactElement.disableAtHere();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const contactElement = Velt.getContactElement();
    contactElement.enableAtHere();
    contactElement.disableAtHere();
    ```
  </Tab>
</Tabs>

#### setAtHereLabel

* This allows you to modify the default text of the @here feature. eg: @all, @everyone, @team, etc.

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments atHereLabel='@all'>
    ```

    **Using Hooks:**

    ```jsx
    const contactElement = useContactUtils();

    useEffect(() => {
      contactElement.setAtHereLabel('@all');
    }, [contactElement]);
    ```

    **Using API Method:**

    ```jsx
    const contactElement = client.getContactElement();
    contactElement.setAtHereLabel('@all');
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```jsx
    <velt-comments at-here-label="@all">
    ```

    **Using API Method:**

    ```jsx
    const contactElement = Velt.getContactElement();
    contactElement.setAtHereLabel('@all');
    ```
  </Tab>
</Tabs>

#### setAtHereDescription

* Customize the description that appears for the @here mention.

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments atHereDescription="Notify all users in this document" />
    ```

    **Using Hooks:**

    ```jsx
    const contactElement = useContactUtils();

    useEffect(() => {
      contactElement.setAtHereDescription('Notify all users in this document');
    }, [contactElement]);
    ```

    **Using API Method:**

    ```jsx
    const contactElement = client.getContactElement();
    contactElement.setAtHereDescription('Notify all users in this document');
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments at-here-description="Notify all users in this document"></velt-comments>
    ```

    **Using API Method:**

    ```javascript
    const contactElement = Velt.getContactElement();
    contactElement.setAtHereDescription('Notify all users in this document');
    ```
  </Tab>
</Tabs>

#### subscribeCommentAnnotation

* Subscribes to a comment annotation
* Params: [SubscribeCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#subscribecommentannotationrequest)
* Returns: [SubscribeCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#subscribecommentannotationevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const subscribeCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { subscribeCommentAnnotation } = useSubscribeCommentAnnotation();
    const subscribeCommentAnnotationEvent = await subscribeCommentAnnotation(subscribeCommentAnnotationRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const subscribeCommentAnnotationEvent = await commentElement.subscribeCommentAnnotation(subscribeCommentAnnotationRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const subscribeCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const subscribeCommentAnnotationEvent = await commentElement.subscribeCommentAnnotation(subscribeCommentAnnotationRequest);
    ```
  </Tab>
</Tabs>

#### unsubscribeCommentAnnotation

* Unsubscribes from a comment annotation
* Params: [UnsubscribeCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#unsubscribecommentannotationrequest)
* Returns: [UnsubscribeCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#unsubscribecommentannotationevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const unsubscribeCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { unsubscribeCommentAnnotation } = useUnsubscribeCommentAnnotation();
    const unsubscribeCommentAnnotationEvent = await unsubscribeCommentAnnotation(unsubscribeCommentAnnotationRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const unsubscribeCommentAnnotationEvent = await commentElement.unsubscribeCommentAnnotation(unsubscribeCommentAnnotationRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const unsubscribeCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const unsubscribeCommentAnnotationEvent = await commentElement.unsubscribeCommentAnnotation(unsubscribeCommentAnnotationRequest);
    ```
  </Tab>
</Tabs>

#### expandMentionGroups

* Expand the user groups and show individual users inside the groups in the @mentions dropdown menu.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments expandMentionGroups={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments expand-mention-groups="true"></velt-comments>
    ```
  </Tab>
</Tabs>

#### showMentionGroupsFirst

* Show the user groups in the @mentions dropdown menu before the non-group users.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments showMentionGroupsFirst={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments show-mention-groups-first="true"></velt-comments>
    ```
  </Tab>
</Tabs>

#### showMentionGroupsOnly

* Show only the user groups in the @mentions dropdown menu and not the non-group users.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments showMentionGroupsOnly={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments show-mention-groups-only="true"></velt-comments>
    ```
  </Tab>
</Tabs>

# Metadata

#### addContext

Custom metadata allows you to add extra information to comments, enhancing their functionality. Here's what you can do with it:

* Render additional data on comments
* Position comment pins manually
* Create custom UI components
* Enable comment filtering on custom data

To add custom metadata, use the `event.addContext()` method when a comment is added. This method accepts an object with key-value pairs.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/addContext.png)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Hook
    const commentEventCallbackData = useCommentEventCallback('addCommentAnnotation');
    useEffect(() => {
      if (commentEventCallbackData) {
        commentEventCallbackData.addContext({ customKey: 'customValue' });
      }
    }, [commentEventCallbackData]);

    // API Method
    const commentElement = client.getCommentElement();
    commentElement.on('addCommentAnnotation').subscribe((event) => {
        event.addContext({ customKey: 'customValue' });
    });

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const commentElement = Velt.getCommentElement();
    commentElement.on('addCommentAnnotation').subscribe((event) => {
        event.addContext({ customKey: 'customValue' });
    });
    ```
  </Tab>
</Tabs>

#### updateContext

* Update the custom metadata associated with a comment annotation using the `updateContext` method.
* Utilize this method to update the context of a comment annotation at any time. For example, you might use this when the name of the dashboard containing the comment annotation changes.

The `commentElement.updateContext()` method accepts three parameters:

* The Comment Annotation ID
* The new metadata object
* An optional `updateContextConfig` object. Specify how the new metadata should be applied:
  * `{ merge: true }`: Merges the new metadata with the existing metadata
  * `{ merge: false }` or omitted: Replaces the existing metadata entirely (default behavior)

<Tabs>
  <Tab title="React / Next.js">
    Using API:

    ```js

    const updatedContext = { customKey: 'customValue' };
    const updateContextConfig = { merge: true };

    const commentElement = client.getCommentElement();
    commentElement.updateContext(COMMENT_ANNOTATION_ID, updatedContext, updateContextConfig);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using API method:

    ```js
    const updatedContext = { customKey: 'customValue' };
    const updateContextConfig = { merge: true };

    const commentElement = client.getCommentElement();
    commentElement.updateContext(COMMENT_ANNOTATION_ID, updatedContext, updateContextConfig);
    ```
  </Tab>
</Tabs>

# Custom Lists

#### createCustomListDataOnAnnotation

* Add a custom dropdown list at the Comment Annotation level.
* Use this to add custom tags or categories to the comment.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/comment-annotation-custom-list.png)

```jsx
let customList = [
    { id: 'violent', label: 'Violent' },
    { id: 'inappropriate', label: 'Inappropriate' },
    { id: 'robbery', label: 'Robbery' },
    { id: 'nsfw', label: 'NSFW' },
];

const customListDataOnCommentAnnotation = {
	  type: 'multi', // choose from 'multi' or 'single'
    placeholder: 'Select a category',
    data: customList, // your customList data here
};
```

<Tabs>
  <Tab title="React / Next.js with hooks">
    **Using Props:**

    ```jsx
    <VeltComments customListDataOnAnnotation={customListDataOnCommentAnnotation} />
    ```

    **API Method:**

    ```jsx
    const commentElement = useCommentUtils();		
    commentElement.createCustomListDataOnAnnotation(customListDataOnCommentAnnotation);
    ```
  </Tab>

  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments customListDataOnAnnotation={customListDataOnCommentAnnotation} />
    ```

    **API Method:**

    ```jsx
    const commentElement = client.getCommentElement();		
    commentElement.createCustomListDataOnAnnotation(customListDataOnCommentAnnotation);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();			
    commentElement.createCustomListDataOnAnnotation(customListDataOnCommentAnnotation);
    ```
  </Tab>
</Tabs>

#### createCustomListDataOnComment

You can have custom dropdown lists appear when certain `hotkeys` are pressed.

When you press a hotkey inside the Comment Dialog composer, it will open a dropdown list of items that you can select.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/custom-list-1.png)

Selecting an item frop the dropdown list will add a chip that inside the comment text.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/custom-list-2.png)

<Steps titleSize="h2">
  <Step title="Set hotkey and list data">
    <Warning> Make sure the hotkey is a single character such as `#` or `/`</Warning>

    * Create the list of data will be shown when the `hotkey` is pressed. Eg: When the user presses `#`, the list of files or links from other parts of your app is shown.
    * The items in the list must be in the following schema:

    ```jsx
    export class AutocompleteItem {
        id!: string; // Unique identifier
        name!: string; // Item name. This appears as the main item text in the UI.
        description?: string; // Item description. This appears as the secondary item text in the UI.
        icon?: { url?: string }; // Item icon. This appears as the icon in the UI.
        link?: string; // Item link. You can use this to open a link when the item is clicked. Check the event listener below for more details.
    }
    ```

    ```jsx
    let customList = [
        {
            id: '1',
            name: 'File 1',
            description: 'File Description 1',
            icon: {url: 'https://cdn-icons-png.flaticon.com/512/9496/9496432.png'}
        },
        {
            id: '2',
            name: 'File 2',
            description: 'File Description 2',
            icon: {url: 'https://cdn-icons-png.flaticon.com/512/11471/11471469.png'}
        },
        {
            id: '3',
            name: 'File 3',
            description: 'File Description 3',
            icon: {url: 'https://cdn-icons-png.flaticon.com/512/2656/2656402.png'}
        }
    ];

    const customListDataOnComment = {
    	hotkey: 'UNIQUE_HOTKEY', // only single charater is allowed. eg: '#'
    	type: 'custom',
        data: customList, // your customList data here
    };
    ```

    <Tabs>
      <Tab title="React / Next.js with hooks">
        **Using Props:**

        ```jsx
        <VeltComments customListDataOnComment={customListDataOnComment} />
        ```

        **API Method:**

        ```jsx
        const commentElement = useCommentUtils();		
        commentElement.createCustomListDataOnComment(customListDataOnComment);
        ```
      </Tab>

      <Tab title="React / Next.js">
        **Using Props:**

        ```jsx
        <VeltComments customListDataOnComment={customListDataOnComment} />
        ```

        **API Method:**

        ```jsx
        const commentElement = client.getCommentElement();		
        commentElement.createCustomListDataOnComment(customListDataOnComment);
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        const commentElement = Velt.getCommentElement();			
        commentElement.createCustomListDataOnComment(customListDataOnComment);
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Listen to click event data on chips">
    * After the comment is saved, the item will be rendered as a chip on the comment content.
    * When the user clicks on it, you will get an event callback with the data of the clicked chip (AutocompleteItem).

    <Info>This event will also be triggered when the user clicks on the contact chips added via the @mentions feature.</Info>

    <Tabs>
      <Tab title="React / Next.js with Hooks">
        ```jsx
        let autocompleteChipData = useAutocompleteChipClick(); 
        ```
      </Tab>

      <Tab title="React / Next.js">
        ```jsx
        const autocompleteElement = client.getAutocompleteElement();
        const subscription = autocompleteElement.onAutocompleteChipClick().subscribe(_data => {
            console.log(_data);
        })
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        const autocompleteElement = Velt.getAutocompleteElement();
        const subscription = autocompleteElement.onAutocompleteChipClick().subscribe(_data => {
            console.log(_data);
        })
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>

#### customAutocompleteSearch

* Handle autocomplete search for custom list. You should use this if you have a large list that you want to plug into the autocomplete dropdown, and search directly your own data source.
* Event: [`AutocompleteSearchEvent`](/api-reference/sdk/models/api-event-objects#autocompletesearchevent)

<Tabs>
  <Tab title="React / Next.js">
    <Steps>
      <Step title="Enable the feature">
        ```jsx
        // Enable via props
        <VeltComments customAutocompleteSearch={true} />


        // Or, enable via Comment Element API
        const commentElement = client.getCommentElement();
        commentElement.enableCustomAutocompleteSearch();
        commentElement.disableCustomAutocompleteSearch();
        ```
      </Step>

      <Step title="Set initial list">
        ```jsx
        // For @mentions feature
        contactElement.updateContactList(users);

        // For custom list feature
        commentElement.createCustomListDataOnComment({
            hotkey: "#",
            type: "custom",
            data: customListData,
        });
        ```
      </Step>

      <Step title="Handle search event">
        ```jsx
        commentElement.on('autocompleteSearch').subscribe(async (inputData) => {
            const searchText = inputData.searchText;

            // For @mentions feature
            if (inputData.type === 'contact') {
                const filteredUsersData = await __your_api_call__(searchText);
                contactElement.updateContactList(filteredUsersData, { merge: false });
            }

            // For custom list feature
            if (inputData.type === 'custom') {
                const filteredListData = await __your_api_call__(searchText, autocompleteData);
                commentElement.createCustomListDataOnComment({
                    hotkey: "#",
                    type: "custom",
                    data: filteredListData,
                });
            }
        });

        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps>
      <Step title="Enable the feature">
        ```js
        // Enable via attribute
        <velt-comments custom-autocomplete-search="true"></velt-comments>

        // Or, enable via Comment Element API
        const commentElement = Velt.getCommentElement();
        commentElement.enableCustomAutocompleteSearch();
        commentElement.disableCustomAutocompleteSearch();
        ```
      </Step>

      <Step title="Set initial list">
        ```js
        commentElement.createCustomListDataOnComment({
            hotkey: "#",
            type: "custom",
            data: customListData,
        });
        ```
      </Step>

      <Step title="Handle search event">
        ```js
        commentElement.on('autocompleteSearch').subscribe(async (inputData) => {
            const searchText = inputData.searchText;

            if (inputData.type === 'custom') {
                const filteredListData = await __your_api_call__(searchText, autocompleteData);
                commentElement.createCustomListDataOnComment({
                    hotkey: "#",
                    type: "custom",
                    data: filteredListData,
                });
            }
        });

        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

# Event Subscription

#### on

Subscribe to Comment Events. Here is the list of events you can subscribe to and the event objects you will receive.

| Category          | Event Type                     | Description                                                                                                       | Event Object                                                                                                       |
| ----------------- | ------------------------------ | ----------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------ |
| Threads           | `addCommentAnnotation`         | Add a new comment annotation                                                                                      | [AddCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#addcommentannotationevent)                 |
| Threads           | `deleteCommentAnnotation`      | Delete a comment annotation                                                                                       | [DeleteCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#deletecommentannotationevent)           |
| Messages          | `addComment`                   | Add a new comment                                                                                                 | [AddCommentEvent](/api-reference/sdk/models/api-event-objects#addcommentevent)                                     |
| Messages          | `updateComment`                | Update an existing comment                                                                                        | [UpdateCommentEvent](/api-reference/sdk/models/api-event-objects#updatecommentevent)                               |
| Messages          | `deleteComment`                | Delete a comment                                                                                                  | [DeleteCommentEvent](/api-reference/sdk/models/api-event-objects#deletecommentevent)                               |
| @Mentions         | `assignUser`                   | Assign a user to a comment                                                                                        | [AssignUserEvent](/api-reference/sdk/models/api-event-objects#assignuserevent)                                     |
| @Mentions         | `subscribeCommentAnnotation`   | Subscribe to a comment annotation                                                                                 | [SubscribeCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#subscribecommentannotationevent)     |
| @Mentions         | `unsubscribeCommentAnnotation` | Unsubscribe from a comment annotation                                                                             | [UnsubscribeCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#unsubscribecommentannotationevent) |
| @Mentions         | `autocompleteSearch`           | When user starts searching for a contact in the @mentions dropdown or for a list item in the custom list dropdown | [AutocompleteSearchEvent](/api-reference/sdk/models/api-event-objects#autocompletesearchevent)                     |
| Attachments       | `addAttachment`                | Add an attachment to a comment                                                                                    | [AddAttachmentEvent](/api-reference/sdk/models/api-event-objects#addattachmentevent)                               |
| Attachments       | `deleteAttachment`             | Delete an attachment from a comment                                                                               | [DeleteAttachmentEvent](/api-reference/sdk/models/api-event-objects#deleteattachmentevent)                         |
| Reactions         | `addReaction`                  | Add a reaction to a comment                                                                                       | [AddReactionEvent](/api-reference/sdk/models/api-event-objects#addreactionevent)                                   |
| Reactions         | `deleteReaction`               | Delete a reaction from a comment                                                                                  | [DeleteReactionEvent](/api-reference/sdk/models/api-event-objects#deletereactionevent)                             |
| Reactions         | `toggleReaction`               | Toggle a reaction on a comment                                                                                    | [ToggleReactionEvent](/api-reference/sdk/models/api-event-objects#togglereactionevent)                             |
| Status & Priority | `updateStatus`                 | Update the status of a comment                                                                                    | [UpdateStatusEvent](/api-reference/sdk/models/api-event-objects#updatestatusevent)                                 |
| Status & Priority | `resolveComment`               | Resolve a comment                                                                                                 | [ResolveCommentEvent](/api-reference/sdk/models/api-event-objects#resolvecommentevent)                             |
| Status & Priority | `updatePriority`               | Update the priority of a comment                                                                                  | [UpdatePriorityEvent](/api-reference/sdk/models/api-event-objects#updatepriorityevent)                             |
| Status & Priority | `approveCommentAnnotation`     | Approve a comment annotation                                                                                      | [ApproveCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#approvecommentannotationevent)         |
| Status & Priority | `acceptCommentAnnotation`      | Accept a comment annotation                                                                                       | [AcceptCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#acceptcommentannotationevent)           |
| Status & Priority | `rejectCommentAnnotation`      | Reject a comment annotation                                                                                       | [RejectCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#rejectcommentannotationevent)           |
| Recordings        | `deleteRecording`              | Delete a recording from a comment                                                                                 | [DeleteRecordingEvent](/api-reference/sdk/models/api-event-objects#deleterecordingevent)                           |
| Deep Links        | `copyLink`                     | Copy a deep link to a comment                                                                                     | [CopyLinkEvent](/api-reference/sdk/models/api-event-objects#copylinkevent)                                         |
| Access            | `updateAccess`                 | Update access settings for a comment                                                                              | [UpdateAccessEvent](/api-reference/sdk/models/api-event-objects#updateaccessevent)                                 |
| Comment Sidebar   | `commentSidebarDataInit`       | Triggered when comment sidebar data is first loaded                                                               | [CommentSidebarDataInitEvent](/api-reference/sdk/models/api-event-objects#commentsidebardatainitevent)             |
| Comment Sidebar   | `commentSidebarDataUpdate`     | Triggered when comment sidebar data is updated                                                                    | [CommentSidebarDataUpdateEvent](/api-reference/sdk/models/api-event-objects#commentsidebardataupdateevent)         |
| UI                | `composerClicked`              | Triggered when comment composer is clicked                                                                        | [ComposerClickedEvent](/api-reference/sdk/models/api-event-objects#composerclickedevent)                           |
| Recorder          | `transcriptionDone`            | Triggered when a transcription is generated and ready                                                             | [TranscriptionDoneEvent](/api-reference/sdk/models/api-event-objects#transcriptiondoneevent)                       |

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Hook
    const commentEventCallbackData = useCommentEventCallback('addCommentAnnotation');
    useEffect(() => {
      if (commentEventCallbackData) {
        // Handle comment action callback event response
      }
    }, [commentEventCallbackData]);

    // API Method
    const commentElement = client.getCommentElement();
    commentElement.on('addCommentAnnotation').subscribe((event) => {
        // Handle the event response
    });

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const commentElement = Velt.getCommentElement();
    commentElement.on('addCommentAnnotation').subscribe((event) => {
        // Handle the event response
    });
    ```
  </Tab>
</Tabs>

# Attachments

#### enableAttachments

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/file-attachment.png)

Whether file attachments are enabled.

Default: `true`

When this is on, users can attach image files to their comments. Users can download or delete an attachment. Users can attach multiple files at once.

Currently we support `.png`, `.jpg`, `.gif` (static & animated), `.svg` file types up to 15MB per file.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments attachments={true} />
    ```

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableAttachments();
    commentElement.disableAttachments();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments attachments="true"></velt-comments>
    ```

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableAttachments();
    commentElement.disableAttachments();
    ```
  </Tab>
</Tabs>

#### addAttachment

* Add an attachment to a specific comment annotation
* Params: [AddAttachmentRequest](/api-reference/sdk/models/api-request-objects#addattachmentrequest)
* Returns: Promise\<[AddAttachmentResponse\[\]](/api-reference/sdk/models/api-request-objects#addattachmentresponse)>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const addAttachmentRequest = {
      annotationId: 'ANNOTATION_ID',
      files: '<Files[]>'
    };

    // Hook
    const { addAttachment } = useAddAttachment();
    const attachmentResponses = await addAttachment(addAttachmentRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const attachmentResponses = await commentElement.addAttachment(addAttachmentRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const addAttachmentRequest = {
      annotationId: 'ANNOTATION_ID',
      files: '<Files[]>'
    };

    const commentElement = Velt.getCommentElement();
    const attachmentResponses = await commentElement.addAttachment(addAttachmentRequest);
    ```
  </Tab>
</Tabs>

#### deleteAttachment

* Delete an attachment from a specific comment annotation
* Params: [DeleteAttachmentConfig](/api-reference/sdk/models/api-request-objects#deleteattachmentconfig)
* Returns: Promise\<[DeleteAttachmentEvent](/api-reference/sdk/models/api-request-objects#deleteattachmentevent) | null>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const deleteAttachmentRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID,
      attachmentId: 'ATTACHMENT_ID'
    };

    // Hook
    const { deleteAttachment } = useDeleteAttachment();
    const deleteAttachmentEvent = await deleteAttachment(deleteAttachmentRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const deleteAttachmentEvent = await commentElement.deleteAttachment(deleteAttachmentRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const deleteAttachmentRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID,
      attachmentId: 'ATTACHMENT_ID'
    };

    const commentElement = Velt.getCommentElement();
    const deleteAttachmentEvent = await commentElement.deleteAttachment(deleteAttachmentRequest);
    ```
  </Tab>
</Tabs>

#### getAttachment

* Get attachments from a specific comment annotation
* Params: [GetAttachmentRequest](/api-reference/sdk/models/api-request-objects#getattachmentrequest)
* Returns: Promise\<[Attachment\[\]](/api-reference/sdk/models/api-event-objects#attachment)>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const getAttachmentRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID,
    };

    // Hook
    const { getAttachment } = useGetAttachment();
    const attachments = await getAttachment(getAttachmentRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const attachments = await commentElement.getAttachment(getAttachmentRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const getAttachmentRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID,
    };

    const commentElement = Velt.getCommentElement();
    const attachments = await commentElement.getAttachment(getAttachmentRequest);
    ```
  </Tab>
</Tabs>

# Reactions

#### enableReactions

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/reactions.png)

Whether emoji reactions are enabled.

Default: `true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments reactions={true} />
    ```

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableReactions();
    commentElement.disableReactions();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments reactions="true"></velt-comments>
    ```

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableReactions();
    commentElement.disableReactions();
    ```
  </Tab>
</Tabs>

#### setCustomReactions

* You can set custom reactions by passing a map that contains information about the reactions you want to add.
* The map keys should be the reaction ID, and the map value should contain an object with either an `url` or `emoji` field to represent the reaction icon you want to use.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();

    const customReactions = {
        "reactionId1": {
            "emoji": "🤣" // This will default to system emoji
        },
        "reactionId2": {
            "emoji": "🎉" // This will default to system emoji
        },
        "reactionId3": {
            "emoji": "🚀" // This will default to system emoji
        }
    }
    commentElement.setCustomReactions(customReactions);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();

    const customReactions = {
        "reactionId1": {
            "emoji": "🤣" // This will default to system emoji
        },
        "reactionId2": {
            "emoji": "🎉" // This will default to system emoji
        },
        "reactionId3": {
            "emoji": "🚀" // This will default to system emoji
        }
    }
    commentElement.setCustomReactions(customReactions);
    ```
  </Tab>
</Tabs>

#### addReaction

* Add a reaction to a specific comment annotation
* Params: [AddReactionRequest](/api-reference/sdk/models/api-request-objects#addreactionrequest)
* Returns: Promise\<[AddReactionEvent](/api-reference/sdk/models/api-event-objects#addreactionevent) | null>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const addReactionRequest = {
      annotationId: '-OCWolieeXVOfPqTa0G-',
      commentId: 384399,
      reaction: {
        reactionId: 'fire',
        customReaction: {
              "emoji": "🔥"
        }
      }
    };

    // Hook
    const { addReaction } = useAddReaction();
    const addReactionEvent = await addReaction(addReactionRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const addReactionEvent = await commentElement.addReaction(addReactionRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const addReactionRequest = {
      annotationId: '-OCWolieeXVOfPqTa0G-',
      commentId: 384399,
      reaction: {
        reactionId: 'fire',
        customReaction: {
              "emoji": "🔥"
        }
      }
    };

    const commentElement = Velt.getCommentElement();
    const addReactionEvent = await commentElement.addReaction(addReactionRequest);
    ```
  </Tab>
</Tabs>

#### deleteReaction

* Delete a reaction from a specific comment annotation
* Params: [DeleteReactionRequest](/api-reference/sdk/models/api-request-objects#deletereactionrequest)
* Returns: Promise\<[DeleteReactionEvent](/api-reference/sdk/models/api-event-objects#deletereactionevent) | null>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const deleteReactionRequest = {
      annotationId: '-OCWolieeXVOfPqTa0G-',
      commentId: 384399,
      reaction: {
        reactionId: 'fire'
      }
    };

    // Hook
    const { deleteReaction } = useDeleteReaction();
    const deleteReactionEvent = await deleteReaction(deleteReactionRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const deleteReactionEvent = await commentElement.deleteReaction(deleteReactionRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const deleteReactionRequest = {
      annotationId: '-OCWolieeXVOfPqTa0G-',
      commentId: 384399,
      reaction: {
        reactionId: 'fire'
      }
    };

    const commentElement = Velt.getCommentElement();
    const deleteReactionEvent = await commentElement.deleteReaction(deleteReactionRequest);
    ```
  </Tab>
</Tabs>

#### toggleReaction

* Toggle a reaction for a specific comment annotation
* Params: [ToggleReactionRequest](/api-reference/sdk/models/api-request-objects#togglereactionrequest)
* Returns: Promise\<[ToggleReactionEvent](/api-reference/sdk/models/api-event-objects#togglereactionevent) | null>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const toggleReactionRequest = {
      annotationId: '-OCWolieeXVOfPqTa0G-',
      commentId: 384399,
      reaction: {
        reactionId: 'fire'
      }
    };

    // Hook
    const { toggleReaction } = useToggleReaction();
    const toggleReactionEvent = await toggleReaction(toggleReactionRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const toggleReactionEvent = await commentElement.toggleReaction(toggleReactionRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const toggleReactionRequest = {
      annotationId: '-OCWolieeXVOfPqTa0G-',
      commentId: 384399,
      reaction: {
        reactionId: 'fire'
      }
    };

    const commentElement = Velt.getCommentElement();
    const toggleReactionEvent = await commentElement.toggleReaction(toggleReactionRequest);
    ```
  </Tab>
</Tabs>

# Status & Priority

#### enableStatus

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/status-default.png)

Whether to enable the default status dropdown & filters.

`Default: true`

When this is on, users can assign a status to each comment & filter comment by status in the sidebar. You can customize the list of status options as shown below on this page.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments status={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments status="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableStatus();
    commentElement.disableStatus();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableStatus();
    commentElement.disableStatus();
    ```
  </Tab>
</Tabs>

#### setCustomStatus

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/custom-status.png)

<Tabs>
  <Tab title="React / Next.js">
    Set custom statuses in the `customStatus` prop.

    `Default statuses: Open, In Progress, Resolved`

    With custom statuses, you can replace the default statuses with your own values. These statuses are also used in the comment sidebar to filter comments by status.

    Setting the Status type using the `type` property:

    * `default`: This will be the default status assigned to each comment.
    * `ongoing`: This is treated as an intermediary status, you can add as many statuses with type ongoing as you want.
    * `terminal`: This represents a status that is completed. Comments with this status type are no longer shown in the DOM.

    ```js
    <VeltComments customStatus={[
      {
        "id": "open",
        "name": "Open",
        "color": "white",
        "lightColor":"green",
        "type": "default",
        "iconUrl": "url" // Pass in a icon url
      }
    ]}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Set custom statuses in the `custom-status` prop.

    `Default statuses: Open, In Progress, Resolved`

    With custom statuses, you can replace the default statuses with your own values. These statuses are also used in the comment sidebar to filter comments by status.

    Setting the Status type using the `type` property:

    * `default`: This will be the default status assigned to each comment.
    * `ongoing`: This is treated as an intermediary status, you can add as many statuses with type ongoing as you want.
    * `terminal`: This represents a status that is completed. Comments with this status type are no longer shown in the DOM.

    ```js
    <velt-comments custom-status='[
      {
        "id": "open",
        "name": "Open",
        "color": "white",
        "lightColor":"green",
        "type": "default",
        "iconUrl": "url" // Pass in a icon url
      }
    ]'></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setCustomStatus([
      {
        "id": "open",
        "name": "Open",
        "color": "white",
        "lightColor":"green",
        "type": "default",
        "iconUrl": "url" // Pass in a icon url
      }
    ])
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.setCustomStatus([
      {
        "id": "open",
        "name": "Open",
        "color": "white",
        "lightColor":"green",
        "type": "default",
        "iconUrl": "url" // Pass in a icon url
      }
    ])
    ```
  </Tab>
</Tabs>

<Warning>
  Make sure to have at least 2 categories set.
</Warning>

#### enableResolveButton

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/resolve-button.png)

Whether to show resolve button on comments.

`Default: true`

This adds a tick mark button on the top right corner of the comment dialog. Clicking on this button will mark the comment as resolved.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments resolveButton={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments resolve-button="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableResolveButton();
    commentElement.disableResolveButton();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableResolveButton();
    commentElement.disableResolveButton();
    ```
  </Tab>
</Tabs>

#### updateStatus

* Updates the status of a comment annotation.
* Params: [UpdateStatusRequest](/api-reference/sdk/models/api-request-objects#updatestatusrequest)
* Returns: [UpdateStatusEvent](/api-reference/sdk/models/api-event-objects#updatestatusevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const updateStatusRequest = {
      annotationId: 'ANNOTATION_ID',
      status: {
        "id": "open",
        "name": "Open",
        "color": "white",
        "lightColor":"green",
        "type": "default"
      }
    };

    // Hook
    const { updateStatus } = useUpdateStatus();
    const updateStatusEvent = await updateStatus(updateStatusRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const updateStatusEvent = await commentElement.updateStatus(updateStatusRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const updateStatusRequest = {
      annotationId: 'ANNOTATION_ID',
      status: {
        "id": "open",
        "name": "Open",
        "color": "white",
        "lightColor":"green",
        "type": "default"
      }
    };

    const commentElement = Velt.getCommentElement();
    const updateStatusEvent = await commentElement.updateStatus(updateStatusRequest);
    ```
  </Tab>
</Tabs>

#### resolveCommentAnnotation

* Resolves a comment annotation
* Params: [ResolveCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#resolvecommentannotationrequest)
* Returns: [ResolveCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#resolvecommentannotationevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const resolveCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { resolveCommentAnnotation } = useResolveCommentAnnotation();
    const resolveCommentAnnotationEvent = await resolveCommentAnnotation(resolveCommentAnnotationRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const resolveCommentAnnotationEvent = await commentElement.resolveCommentAnnotation(resolveCommentAnnotationRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const resolveCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const resolveCommentAnnotationEvent = await commentElement.resolveCommentAnnotation(resolveCommentAnnotationRequest);
    ```
  </Tab>
</Tabs>

#### enablePriority

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/priority-default.png)

Whether to enable setting priority on comments.

`Default: false`

When this is on, users can assign a priority to each comment & filter comment by priority in the sidebar. You can customize the list of priority options as shown later on this page in the Set Custom Priorities section.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments priority={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments priority="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enablePriority();
    commentElement.disablePriority();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enablePriority();
    commentElement.disablePriority();
    ```
  </Tab>
</Tabs>

#### setCustomPriority

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/custom-priority.png)

<Tabs>
  <Tab title="React / Next.js">
    Pass custom priorities in the `customPriority` prop.

    `Default priorities: P0, P1, P2`

    With custom priorities, you can replace the default priorities with your own values. These priorities are also used in the comment sidebar to filter comments by priority.

    This will work if you have enabled the priority feature.

    The `color` property is used to set the priority pill background color.

    The `lightColor` property sets the background color of the filter.

    ```js

    <VeltComments customPriority={[
      {
        "id": "low",
        "name": "Low",
        "color": "red",
        "lightColor": "pink",
      },
    ]}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Pass custom priorities in the `custom-priority`.

    `Default priorities: P0, P1, P2`

    With custom priorities, you can replace the default priorities with your own values. These priorities are also used in the comment sidebar to filter comments by priority.

    This will work if you have enabled the priority feature.

    The `color` property is used to set the priority pill background color.

    The `lightColor` property sets the background color of the filter.

    ```js
    <velt-comments custom-priority='[
      {
        "id": "low",
        "name": "Low",
        "color": "red",
        "lightColor": "pink",
      }
    ]'></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setCustomPriority([
      {
        "id": "low",
        "name": "Low",
        "color": "red",
        "lightColor": "pink",
      },
    ])
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.setCustomPriority([
      {
        "id": "low",
        "name": "Low",
        "color": "red",
        "lightColor": "pink",
      },
    ])
    ```
  </Tab>
</Tabs>

<Warning>
  Make sure to have at least 2 categories set.
</Warning>

#### updatePriority

* Updates the priority of a comment annotation
* Params: [UpdatePriorityRequest](/api-reference/sdk/models/api-request-objects#updatepriorityrequest)
* Returns: [UpdatePriorityEvent](/api-reference/sdk/models/api-event-objects#updatepriorityevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const updatePriorityRequest = {
      annotationId: 'ANNOTATION_ID',
      priority: {
        "id": "low",
        "name": "Low",
        "color": "red",
        "lightColor": "pink",
      }
    };

    // Hook
    const { updatePriority } = useUpdatePriority();
    const updatePriorityEvent = await updatePriority(updatePriorityRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const updatePriorityEvent = await commentElement.updatePriority(updatePriorityRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const updatePriorityRequest = {
      annotationId: 'ANNOTATION_ID',
      priority: {
        "id": "low",
        "name": "Low",
        "color": "red",
        "lightColor": "pink",
      }
    };

    const commentElement = Velt.getCommentElement();
    const updatePriorityEvent = await commentElement.updatePriority(updatePriorityRequest);
    ```
  </Tab>
</Tabs>

# Recording

#### deleteRecording

* Delete a recording from a specific comment annotation
* Params: [DeleteRecordingRequest](/api-reference/sdk/models/api-request-objects#deleterecordingrequest)
* Returns: Promise\<[DeleteRecordingEvent](/api-reference/sdk/models/api-event-objects#deleterecordingevent) | null>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const deleteRecordingRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID,
      recordingId: 'RECORDING_ID'
    };

    // Hook
    const { deleteRecording } = useDeleteRecording();
    const deleteRecordingEvent = await deleteRecording(deleteRecordingRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const deleteRecordingEvent = await commentElement.deleteRecording(deleteRecordingRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const deleteRecordingRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID,
      recordingId: 'RECORDING_ID'
    };

    const commentElement = Velt.getCommentElement();
    const deleteRecordingEvent = await commentElement.deleteRecording(deleteRecordingRequest);
    ```
  </Tab>
</Tabs>

#### getRecording

* Get recordings from a specific comment annotation
* Params: [GetRecordingRequest](/api-reference/sdk/models/api-request-objects#getrecordingrequest)
* Returns: Promise\<[RecordedData\[\]](/api-reference/sdk/models/api-event-objects#recordeddata)>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const getRecordingRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID
    };

    // Hook
    const { getRecording } = useGetRecording();
    const recordings = await getRecording(getRecordingRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const recordings = await commentElement.getRecording(getRecordingRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const getRecordingRequest = {
      annotationId: 'ANNOTATION_ID',
      commentId: COMMENT_ID
    };

    const commentElement = Velt.getCommentElement();
    const recordings = await commentElement.getRecording(getRecordingRequest);
    ```
  </Tab>
</Tabs>

#### setAllowedRecordings

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/recorder.png)

Set the Recorder media options within Comments: (`audio`, `screen`, `video`, `all`).

* `audio`: enables audio recording
* `screen`: enables screen recording
* `video`: enables video recording
* `all`: enables all recording options
* `none`: disables all recording options

Default: `"audio"`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments recordings="video,screen" />
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setAllowedRecordings("video"); // set video mode only
    commentElement.setAllowedRecordings("audio,screen"); // set audio and screen mode only
    commentElement.setAllowedRecordings("all"); // set all modes
    commentElement.setAllowedRecordings("none"); // disable all modes
    ```
  </Tab>

  **Using Props:**

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments recordings="video,screen"></velt-comments>
    ```

    **Using API:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.setAllowedRecordings("video"); // set video mode only
    commentElement.setAllowedRecordings("audio,screen"); // set audio and screen mode only
    commentElement.setAllowedRecordings("all"); // set all modes
    commentElement.setAllowedRecordings("none"); // disable all modes
    ```
  </Tab>
</Tabs>

#### enableRecordingCountdown

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/recording-countdown.gif)

Whether the Recorder countdown is enabled.

Default: `true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments recordingCountdown={false} />
    ```

    ```jsx
    const recorderElement = client.getRecorderElement();
    recorderElement.enableRecordingCountdown();
    recorderElement.disableRecordingCountdown();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments recording-countdown="false"></velt-comments>
    ```

    ```jsx
    const recorderElement = Velt.getRecorderElement();
    recorderElement.enableRecordingCountdown();
    recorderElement.disableRecordingCountdown();
    ```
  </Tab>
</Tabs>

#### enableRecordingTranscription

Controls whether to enable AI transcription for recordings.

Default: `enabled`

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments recordingTranscription={false} />
    ```

    **Using API Methods:**

    ```javascript
    // Using comment element
    const commentElement = client.getCommentElement();
    commentElement.enableRecordingTranscription();
    commentElement.disableRecordingTranscription();

    // Or using recorder element 
    const recorderElement = client.getRecorderElement();
    recorderElement.enableRecordingTranscription();
    recorderElement.disableRecordingTranscription();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments recording-transcription="false"></velt-comments>
    ```

    **Using API Methods:**

    ```javascript
    // Using comment element
    const commentElement = Velt.getCommentElement();
    commentElement.enableRecordingTranscription();
    commentElement.disableRecordingTranscription();

    // Or using recorder element 
    const recorderElement = Velt.getRecorderElement();
    recorderElement.enableRecordingTranscription();
    recorderElement.disableRecordingTranscription();
    ```
  </Tab>
</Tabs>

# Deep Link

#### getLink

* Get a link to a specific comment annotation
* Params: [GetLinkRequest](/api-reference/sdk/models/api-request-objects#getlinkrequest)
* Returns: [GetLinkResponse](/api-reference/sdk/models/api-event-objects#getlinkresponse)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const getLinkRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { getLink } = useGetLink();
    const getLinkResponse = await getLink(getLinkRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const getLinkResponse = await commentElement.getLink(getLinkRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const getLinkRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const getLinkResponse = await commentElement.getLink(getLinkRequest);
    ```
  </Tab>
</Tabs>

#### copyLink

* Copy a link to a specific comment annotation to clipboard
* Params: [CopyLinkRequest](/api-reference/sdk/models/api-request-objects#copylinkrequest)
* Returns: [CopyLinkEvent](/api-reference/sdk/models/api-event-objects#copylinkevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const copyLinkRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { copyLink } = useCopyLink();
    const copyLinkEvent = await copyLink(copyLinkRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const copyLinkEvent = await commentElement.copyLink(copyLinkRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const copyLinkRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const copyLinkEvent = await commentElement.copyLink(copyLinkRequest);
    ```
  </Tab>
</Tabs>

# Navigation

#### scrollToCommentByAnnotationId

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/scroll-on-click.gif)

* This will scroll the page to the element directly. This will work if the element is present on the DOM.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.scrollToCommentByAnnotationId('annotationId')
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.scrollToCommentByAnnotationId('annotationId')
    ```
  </Tab>
</Tabs>

#### selectCommentByAnnotationId

* Use this to programatically select a comment annotation by its id.
* Example: If the user opens a comment url from an email notification,
  you can use this open the comment dialog after your page has finished rendering.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.selectCommentByAnnotationId("COMMENT_ANNOTATION_ID");
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.selectCommentByAnnotationId("COMMENT_ANNOTATION_ID");
    ```
  </Tab>
</Tabs>

#### onCommentSelectionChange

<Tabs>
  <Tab title="React / Next.js with Hooks">
    The `useCommentSelectionChangeHandler` hook can be used to subscribe to Comment selection changes.

    ```jsx
    import React, { useEffect } from 'react';
    import { useCommentSelectionChangeHandler } from '@veltdev/react';

    function YourComponent() {
        const commentSelectionChange = useCommentSelectionChangeHandler();

        useEffect(() => {
            console.log('commentSelectionChange', commentSelectionChange);
        }, [commentSelectionChange]);

        return (
            <>
                Selected Comment: {commentSelectionChange.annotation.id}
            </>
        );
    }
    ```
  </Tab>

  <Tab title="React / Next.js">
    The `onCommentSelectionChange()` method can be used to listen Comment selection changes.

    ```jsx
    const onCommentSelectionChange = (data) => {
      console.log('onCommentSelectionChange', data);
    }

    <VeltComments onCommentSelectionChange={(data) => onCommentSelectionChange(data)} />
    ```

    Callback response schema:

    ```jsx
    export class CommentSelectionChangeData {
      selected!: boolean;
      annotation!: CommentAnnotation;
    }
    ```

    **API Methods:**

    ```jsx
    const commentElement = client.getCommentElement();
    let subscription = commentElement.onCommentSelectionChange().subscribe((data) => {
      console.log('onCommentSelectionChange: ', data);
    });
    ```

    **To unsubscribe from the subscription:**

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    The `onCommentSelectionChange()` method can be used to listen Comment selection changes.

    ```jsx
    <velt-comments></velt-comments>
    <script>
    const commentTag = document.querySelector('velt-comments');
    commentTag.addEventListener('onCommentSelectionChange', (event) => {
    	console.log('onCommentSelectionChange event', event.detail);
    });
    </script>
    ```

    **Callback response schema:**

    ```jsx
    export class CommentSelectionChangeData {
      selected!: boolean;
      annotation!: CommentAnnotation;
    }
    ```

    **API Methods:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    let subscription = commentElement.onCommentSelectionChange().subscribe((data) => {
      console.log('onCommentSelectionChange: ', data);
    });
    ```

    **To unsubscribe from the subscription:**

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

#### enablescrollToComment

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/scroll-on-click.gif)

Whether, users will be scrolled to the location of a `Comment` when it is clicked.

`Default: true`

By default, users will be redirected to a `Comment` if the comment id is provided in the url. But sometimes this experience is annoying, so we have provided a way to disable the option to automatically scroll users to the location of the `Comment`.

<Tabs>
  <Tab title="React / Next.js">
    To disable the feature, set `scrollToComment` to `false`.

    ```html
    <VeltComments scrollToComment={false}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    To disable the feature, set `scroll-to-comment` to `false`.

    ```html
    <velt-comments scroll-to-comment="false"></velt-comments>
    ```
  </Tab>
</Tabs>

API methods:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    // To enable scroll to component
    commentElement.enablescrollToComment();
    // To disable scroll to component
    commentElement.disablescrollToComment();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    // To enable scroll to component
    commentElement.enablescrollToComment();
    // To disable scroll to component
    commentElement.disablescrollToComment();
    ```
  </Tab>
</Tabs>

# DOM Controls

#### allowedElementIds

#### allowedElementClassNames

#### allowedElementQuerySelectors

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/comment-area.gif)

Provide a list of element DOM IDs, class names, or query selectors where commenting should be allowed.

Comments will be disabled for all other elements. Note, this does not impact `Popover` mode.

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```js
    <VeltComments 
      allowedElementIds={['some-element']} 
      allowedElementClassNames={["class-name-1", "class-name-2"]}
      allowedElementQuerySelectors={["#id1.class-name-1"]}
    />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.allowedElementIds(['some-element']);
    commentElement.allowedElementClassNames(["class-name-1", "class-name-2"]);
    commentElement.allowedElementQuerySelectors(["#id1.class-name-1"]);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments 
      allowed-element-ids='["some-element"]'
      allowed-element-class-names='["class-name-1", "class-name-2"]'
      allowed-element-query-selectors='["#id1.class-name-1"]'
    >

    </velt-comments>
    ```

    **Using API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.allowedElementIds(['some-element']);
    commentElement.allowedElementClassNames(["class-name-1", "class-name-2"]);
    commentElement.allowedElementQuerySelectors(["#id1.class-name-1"]);
    ```
  </Tab>
</Tabs>

#### data-velt-comment-disabled

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/comment-area.gif)

Disable certain elements from being commented on.

Add the `data-velt-comment-disabled` attribute to elements where you want to disable commenting.

```html
<div data-velt-comment-disabled></div>
```

#### sourceId

* When you have multiple elements with the same DOM ID, you can use the `sourceId` attribute to control which element displays the comment dialog when adding a new comment.
* By default, comments appear on all matching elements.
* This is useful in cases where you have multiple instances of the same data component on a page and want the comment to appear on each instance, such as Popover comments on a table.
* You can randomly generate the `sourceId`. It just needs to be unique for each element in the current session.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentTool sourceId="sourceId1" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-tool source-id="sourceId1"></velt-comment-tool>
    ```
  </Tab>
</Tabs>

# AI Categorization

#### enableAutoCategorize

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/ai-categories.png)

Whether AI auto-categorization of comments is enabled.

`Default: false`

We use AI to analyze your comment content and auto-categorize it so users can filter comments easily. You can provide a list of custom categories that we should use to categorize the comments (shown below).

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments autoCategorize={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments auto-categorize="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableAutoCategorize();
    commentElement.disableAutoCategorize();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableAutoCategorize();
    commentElement.disableAutoCategorize();
    ```
  </Tab>
</Tabs>

#### setCustomCategory

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/custom-categories.png)

<Tabs>
  <Tab title="React / Next.js">
    Pass custom categories in the `customCategory` prop.

    `Default categories: Question, Feedback, Bug, Other.`

    With custom categories, you can replace the default categories with your own values.

    These categories are used in the `Comments Sidebar` to filter comments by category. The AI `autoCategorize` feature uses the list of categories to determine the closest category to choose from.

    The input format to the `customCategory` prop should be an array of objects with an `id`, `name`, and `color`.

    The `color` property is used to set the category pill background color.

    ```js
    <VeltComments customCategory={[
      {
        "id": "bug",
        "name": "Bug",
        "color": "red"
      }
    ]}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Pass custom categories in the `custom-category`.

    `Default categories: Question, Feedback, Bug, Other.`

    With custom categories, you can replace the default categories with your own values.

    These categories are used in the `Comments Sidebar` to filter comments by category. The AI `auto-categorize` uses the list of categories to determine the closest category to choose from.

    The input format to the `custom-category` should be an array of objects with an `id`, `name`, and `color`.

    The `color` property is used to set the category pill background color.

    ```js
    <velt-comments customCategory='[
      {
        "id": "bug",
        "name": "Bug",
        "color": "red"
      }
    ]'></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setCustomCategory([
      {
        "id": "bug",
        "name": "Bug",
        "color": "red"
      }
    ])
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.setCustomCategory([
      {
        "id": "bug",
        "name": "Bug",
        "color": "red"
      }
    ])
    ```
  </Tab>
</Tabs>

<Warning>
  Make sure to have at least 2 categories set.
</Warning>

# UI

#### composerMode

By default, the `Composer` in the `Comments Dialog` only shows the text input box and does not show the actions bar until the `Composer` is clicked on or the user starts typing.

You can modify this behavior by setting the `Composer Mode` prop to `"expanded"`. This will make the actions bar always visible.

To keep the default behavior you can set the property to `"default"`.

`Default: "default"`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments composerMode="expanded"/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments composer-mode="expanded"></velt-comments>
    ```
  </Tab>
</Tabs>

#### deleteThreadWithFirstComment

Whether deleting the first comment in a thread will delete the entire thread.

Default: `true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments deleteThreadWithFirstComment={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments delete-thread-with-first-comment="false"></velt-comments>
    ```
  </Tab>
</Tabs>

#### enableCollapsedComments

You can control whether comments inside the annotation should be collapsed.

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```jsx
    <VeltComments collapsedComments={true} />
    ```

    Using API:

    ```javascript
    const commentElement = client.getCommentElement();
    // To enable collapsed comments
    commentElement.enableCollapsedComments();
    // To disable collapsed comments
    commentElement.disableCollapsedComments();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Props:

    ```html
    <velt-comments collapsed-comments="true"></velt-comments>
    ```

    Using API:

    ```javascript
    const commentElement = Velt.getCommentElement();
    // To enable collapsed comments
    commentElement.enableCollapsedComments();
    // To disable collapsed comments
    commentElement.disableCollapsedComments();
    ```
  </Tab>
</Tabs>

#### enableShortUserName

You can control whether long user names should be shortened. For long names, this will first create an initial of the second name and if the name is still long, it will truncate it with ellipses.

Default: `true`

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments shortUserName={false} />
    ```

    **Using API:**

    ```javascript
    const commentElement = client.getCommentElement();
    commentElement.enableShortUserName();
    commentElement.disableShortUserName();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments short-user-name="false"></velt-comments>
    ```

    **Using API:**

    ```javascript
    const commentElement = Velt.getCommentElement();
    commentElement.enableShortUserName();
    commentElement.disableShortUserName();
    ```
  </Tab>
</Tabs>

#### enableSignInButton

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/sign-in-button.png)

Whether to enable Sign In button on comment dialog when user is anonymous or signed out.

`Default: false`

This allows anonymous or signed out users to still read the comments but encourages them to sign in if they want to respond to the comments.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments signInButton={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments sign-in-button="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableSignInButton();
    commentElement.disableSignInButton();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableSignInButton();
    commentElement.disableSignInButton();
    ```
  </Tab>
</Tabs>

#### enableSidebarButtonOnCommentDialog

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/sidebar-button-on-comment-dialog.png)

Whether the Sidebar Button on Comment Dialogs show up.

`Default: true`

By Default, each Comment Dialog has a button at the bottom that will open the Comments Sidebar when clicked.

To disable it, you can set it to false:

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments sidebarButtonOnCommentDialog={true} />
    ```

    **Using API methods:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableSidebarButtonOnCommentDialog()
    commentElement.disableSidebarButtonOnCommentDialog() 
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```jsx
    <velt-comments sidebar-button-comment-dialog="true"></velt-comments>
    ```

    **Using API methods:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableSidebarButtonOnCommentDialog()
    commentElement.disableSidebarButtonOnCommentDialog() 
    ```
  </Tab>
</Tabs>

#### enableDeleteReplyConfirmation

You can enable a confirmation dialog before deleting a reply in comment threads. This feature helps prevent accidental deletions and improves user experience.

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```jsx
    <VeltComments deleteReplyConfirmation={true} />
    ```

    Using API:

    ```javascript
    const commentElement = client.getCommentElement();
    commentElement.enableDeleteReplyConfirmation();
    commentElement.disableDeleteReplyConfirmation();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Props:

    ```html
    <velt-comments delete-reply-confirmation="true"></velt-comments>
    ```

    Using API:

    ```javascript
    const commentElement = Velt.getCommentElement();
    commentElement.enableDeleteReplyConfirmation();
    commentElement.disableDeleteReplyConfirmation();
    ```
  </Tab>
</Tabs>

#### enableMobileMode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/mobile-mode.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/mobile-mode-composer.png)

Whether mobile mode is enabled.

When mobile mode is enabled and the screen width is small enough, comment windows will appear fixed to the bottom of the screen and full width instead of the usual popup window.

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments mobileMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments mobile-mode="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableMobileMode();
    commentElement.disableMobileMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableMobileMode();
    commentElement.disableMobileMode();
    ```
  </Tab>
</Tabs>

#### enableCommentPinHighlighter

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/pin-highlighter-outline.png)

Wheter the pin highlighter outline is enabled or not.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments commentPinHighlighter={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments comment-pin-highlighter="false"></velt-comments>
    ```
  </Tab>
</Tabs>

API Methods:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableCommentPinHighlighter(); // to enable comment pin highlight
    commentElement.disableCommentPinHighlighter(); // to disable comment pin highlight
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableCommentPinHighlighter(); // to enable comment pin highlight
    commentElement.disableCommentPinHighlighter(); // to disable comment pin highlight
    ```
  </Tab>
</Tabs>

#### enableDialogOnHover

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/show-dialog-on-hover.gif)

Whether the comment dialog shows on hover over the comment pin or the target element.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments dialogOnHover={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments dialog-on-hover="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDialogOnHover();
    commentElement.disableDialogOnHover();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDialogOnHover();
    commentElement.disableDialogOnHover();
    ```
  </Tab>
</Tabs>

#### enableFloatingCommentDialog

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/floating-comment-dialog.gif)

Whether floating comment dialog is shown next to comment pin on hover or click.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments floatingCommentDialog={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments floating-comment-dialog="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableFloatingCommentDialog();
    commentElement.disableFloatingCommentDialog();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableFloatingCommentDialog();
    commentElement.disableFloatingCommentDialog();
    ```
  </Tab>
</Tabs>

#### excludeLocationIds

Use this to filter out Comments at a specific Location for certain Users.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const locationIds = ['location1', 'location2']; // list of location ids
    client.excludeLocationIds(locationIds);
    ```

    To reset it, you can pass an empty array:

    ```jsx
    client.excludeLocationIds([]);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const locationIds = ['location1', 'location2']; // list of location ids
    Velt.excludeLocationIds(locationIds);
    ```

    To reset it, you can pass an empty array:

    ```jsx
    Velt.excludeLocationIds([]);
    ```
  </Tab>
</Tabs>

#### onSidebarButtonOnCommentDialogClick

Use this to act on clicks on the Sidebar Button at the bottom of the Comment Dialog.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/async-collaboration/comments/images/customization/onSidebarOnCommentDialogClick.png)

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments onSidebarButtonOnCommentDialogClick={(event)=>yourMethod(event)} />
    ```

    **Using Hooks:**

    ```jsx
    const commentDialogSidebarClickEvent = useCommentDialogSidebarClickHandler();
    useEffect(() => {
      console.log('CommentDialog Sidebar button clicked');
    }, [commentDialogSidebarClickEvent]);
    ```

    **Using API methods:**

    ```jsx
    const commentElement = client.getCommentElement();
    let subscription = commentElement.onSidebarButtonOnCommentDialogClick().subscribe((event) => yourMethod(event));
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="HTML">
    **Using Props:**

    ```jsx
    <velt-comments onsidebarbuttononcommentdialogclick="yourMethod(event)"></velt-comments>
    ```

    **Using API Methods:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    let subscription = commentElement.onSidebarButtonOnCommentDialogClick().subscribe((event) => yourMethod(event));
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

#### onSignIn

When the user clicks on the sign in button, we will emit an `onSignIn` event that you can handle with your own sign in method.

No data is passed with the event.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments onSignIn={() => yourSignInMethod()} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const veltCommentsTag = document.querySelector('velt-comments');

    veltCommentsTag?.addEventListener('onSignIn', (event) => {
      console.log('*** onCommentSignIn ***');
      console.log(event.detail);
    });
    ```
  </Tab>
</Tabs>

#### showCommentsOnDom

Whether comments are shown on the DOM.

`Default: true`

By default, all the comments will be visible on DOM whenever we are able to detect to elements for that. But users can hide it from DOM if required.

There are 2 ways to show/hide comments on DOM:

Configuring attributes on the React Component:

<Tabs>
  <Tab title="React / Next.js">
    ```js
    {/* `true` to show comments, `false` to hide comments */}
    <VeltComments commentsOnDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <!-- `true` to show comments, `false` to hide comments -->
    <velt-comments comments-on-dom="false"></velt-comments>
    ```
  </Tab>
</Tabs>

Using API methods:

<Tabs>
  <Tab title="React / Next.js">
    ```js
    const commentElement = client.getCommentElement();
    // to show comments on DOM
    commentElement.showCommentsOnDom();
    // to hide comments on DOM
    commentElement.hideCommentsOnDom();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const commentElement = Velt.getCommentElement();
    // to show comments on DOM
    commentElement.showCommentsOnDom();
    // to hide comments on DOM
    commentElement.hideCommentsOnDom();
    ```
  </Tab>
</Tabs>

#### showResolvedCommentsOnDom

Whether to show resolved comments on the DOM.

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments resolvedCommentsOnDom={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments resolved-comments-on-dom="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Methods:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    // To show resolved comments on dom
    commentElement.showResolvedCommentsOnDom();
    // To hide resolved comments on dom
    commentElement.hideResolvedCommentsOnDom();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    // To show resolved comments on dom
    commentElement.showResolvedCommentsOnDom();
    // To hide resolved comments on dom
    commentElement.hideResolvedCommentsOnDom();
    ```
  </Tab>
</Tabs>

#### updateCommentDialogPosition

* Sometimes when you manually set the position of the Comment Pin, the Comment Dialog might not position itself near the pin in certain scenarios like scrolling, zooming the page when the comment dialog is open.
* Use this to manually trigger an update. The dialog will reposition itself near the pin.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.updateCommentDialogPosition();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.updateCommentDialogPosition();
    ```
  </Tab>
</Tabs>

You can add custom lists at two levels: a. on the CommentAnnotation and b. on the Comment.

# Extra Information

#### enableCommentIndex

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/index-indicator.png)

Whether comment index is enabled.

`Default: false`

This appears in the comment sidebar and on the comment pins. When this is on, we show a small icon indicating the comment index in the order of creation date. This enables users to find and navigate to the desired comment quickly.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments commentIndex={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments comment-index="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableCommentIndex();
    commentElement.disableCommentIndex();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableCommentIndex();
    commentElement.disableCommentIndex();
    ```
  </Tab>
</Tabs>

#### enableDeviceInfo

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/device-info.png)

Whether device type indicator is enabled.

`Default: false`

When this is on, we show additional information in the `Comment Thread` indicating which device the comment was created on. This is useful especially for design tools, where additional context is needed for debugging issues.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments deviceInfo={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments device-info="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDeviceInfo();
    commentElement.disableDeviceInfo();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDeviceInfo();
    commentElement.disableDeviceInfo();
    ```
  </Tab>
</Tabs>

#### enableDeviceIndicatorOnCommentPins

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/device-info-pin.png)

Whether the device type indicator on `Comment Pins` is enabled.

`Default: false`

When this is on, we show a small device type icon on the `Comment Pin` indicating which device the comment was created on. This is useful especially for design tools, where additional context is needed for debugging issues.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments deviceIndicatorOnCommentPins={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments device-indicator-on-comment-pins="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDeviceIndicatorOnCommentPins();
    commentElement.disableDeviceIndicatorOnCommentPins();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDeviceIndicatorOnCommentPins();
    commentElement.disableDeviceIndicatorOnCommentPins();
    ```
  </Tab>
</Tabs>

#### enableGhostComments

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/ghost-comment-pin.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/ghost-comment-dialog-box.png)

Whether to show ghost comments on the DOM.

`Default: false`

Ghost comments are comments that were once linked to certain content on the DOM but that content is no longer available. If this is on, we display ghost comments in gray, close to where they were originally positioned on the DOM.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments ghostComments={true} />
    ```

    **Using API methods:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableGhostComments();
    commentElement.disableGhostComments();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments ghost-comments="true"></velt-comments>
    ```

    **Using API methods:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableGhostComments();
    commentElement.disableGhostComments();
    ```
  </Tab>
</Tabs>

#### enableGhostCommentsIndicator

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/ghost-comment-sidebar.png)

Whether to show ghost comment labels in the comment sidebar.

`Default: true`

Ghost comments are always shown in the comments sidebar so that users can see the history of all comments. If this is on, we show a label on the comment in the sidebar indicating that the original content on which this comment was added is no longer available. This sets better expectations with the users.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments ghostCommentsIndicator={true} />
    ```

    **Using API methods:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableGhostCommentsIndicator();
    commentElement.disableGhostCommentsIndicator();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments ghost-comments-indicator="true"></velt-comments>
    ```

    **Using API methods:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableGhostCommentsIndicator();
    commentElement.disableGhostCommentsIndicator();
    ```
  </Tab>
</Tabs>

# Special File Type Support

#### Iframe Container Support

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/iframe-comment.png)

* To enable comments on an iframe, add `data-velt-iframe-container="true"` to the iframe's container element.
* Note this will not insert the comments inside the contents of the iframe, but rather on top of the iframe.

```html
<div data-velt-iframe-container="true">
	<iframe src="https://www.wikipedia.org/" width="500px" height="500px"></iframe>
</div>
```

#### data-velt-pdf-viewer

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/pdf-comments.png)

To support comments on top of a pdf viewer, add the `data-velt-pdf-viewer="true"` attribute in the container element of the pdf viewer.

```html
<!-- Add this attribute to the container of your pdf viewer -->
<div id="viewerContainer" data-velt-pdf-viewer="true">
    <!-- Your pdf viewer here -->
    <div id="viewer" class="pdfViewer"></div>
</div>
```

# Keyboard Controls

#### enableHotkey

Whether Hotkeys are enabled or not. For now, the only hotkey supported is pressing `c` to enable `comment mode`.

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments hotkey={false} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableHotkey();
    commentElement.disableHotkey();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments hotkey="true"></velt-comments>
    ```

    **Using API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableHotkey();
    commentElement.disableHotkey();
    ```
  </Tab>
</Tabs>

#### enableEnterKeyToSubmit

* By default, pressing `enter` will add a new line and pressing `shift` + `enter` will submit a comment.
* You can change this default behavior so that pressing `enter` will submit a comment by setting the `enterKeyToSubmit` property to `true`.

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments enterKeyToSubmit={true} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableEnterKeyToSubmit();
    commentElement.disableEnterKeyToSubmit();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```jsx
    <velt-comments enter-key-to-submit="true"></velt-comments>
    ```

    **Using API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableEnterKeyToSubmit();
    commentElement.disableEnterKeyToSubmit();
    ```
  </Tab>
</Tabs>

#### enableDeleteOnBackspace

* Use this to enable or disable deleting comments when backpsace key is pressed.

Default: `enabled`

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments deleteOnBackspace={false} />
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDeleteOnBackspace();
    commentElement.disableDeleteOnBackspace();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```jsx
    <velt-comments delete-on-backspace="false"></velt-comments>
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDeleteOnBackspace();
    commentElement.disableDeleteOnBackspace();
    ```
  </Tab>
</Tabs>

# Moderation

#### enableModeratorMode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/moderator-mode.png)

Whether comments require moderator approval.

`Default: false`

By default, when a user adds a comment it is visible to all authenticated users on the same `document`. Moderator mode makes visibility of all comments private to only `admin` users and the comment author. Admin users will see an approve button on the comment dialog. Once approved the comment will be visible to all users who can access the `document`.

You can set some users as `admin` by setting the `isAdmin` property in the User object, during the `identify()` call.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments moderatorMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments moderator-mode="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableModeratorMode();
    commentElement.disableModeratorMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableModeratorMode();
    commentElement.disableModeratorMode();
    ```
  </Tab>
</Tabs>

#### enableResolveStatusAccessAdminOnly

* Restrict the resolve action to admin users and the comment author only.

<Tabs>
  <Tab title="React / Next.js">
    **Using props:**

    ```jsx
    <VeltComments resolveStatusAccessAdminOnly={true} />
    ```

    **Using API:**

    ```javascript
    const commentElement = client.getCommentElement();
    // To enable resolve status access admin only
    commentElement.enableResolveStatusAccessAdminOnly();
    // To disable resolve status access admin only
    commentElement.disableResolveStatusAccessAdminOnly();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using props:**

    ```html
    <velt-comments resolve-status-access-admin-only="true"></velt-comments>
    ```

    **Using API:**

    ```javascript
    const commentElement = Velt.getCommentElement();
    // To enable resolve status access admin only
    commentElement.enableResolveStatusAccessAdminOnly();
    // To disable resolve status access admin only
    commentElement.disableResolveStatusAccessAdminOnly();
    ```
  </Tab>
</Tabs>

#### approveCommentAnnotation

* Approves a comment annotation in moderator mode
* Params: [ApproveCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#approvecommentannotationrequest)
* Returns: [ApproveCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#approvecommentannotationevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const approveCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { approveCommentAnnotation } = useApproveCommentAnnotation();
    const approveCommentAnnotationEvent = await approveCommentAnnotation(approveCommentAnnotationRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const approveCommentAnnotationEvent = await commentElement.approveCommentAnnotation(approveCommentAnnotationRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const approveCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const approveCommentAnnotationEvent = await commentElement.approveCommentAnnotation(approveCommentAnnotationRequest);
    ```
  </Tab>
</Tabs>

#### acceptCommentAnnotation

* Accepts a comment annotation in suggestion mode
* Params: [AcceptCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#acceptcommentannotationrequest)
* Returns: [AcceptCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#acceptcommentannotationevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const acceptCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { acceptCommentAnnotation } = useAcceptCommentAnnotation();
    const acceptCommentAnnotationEventData = await acceptCommentAnnotation(acceptCommentAnnotationRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const acceptCommentAnnotationEventData = await commentElement.acceptCommentAnnotation(acceptCommentAnnotationRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const acceptCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const acceptCommentAnnotationEventData = await commentElement.acceptCommentAnnotation(acceptCommentAnnotationRequest);
    ```
  </Tab>
</Tabs>

#### rejectCommentAnnotation

* Rejects a comment annotation in suggestion mode
* Params: [RejectCommentAnnotationRequest](/api-reference/sdk/models/api-request-objects#rejectcommentannotationrequest)
* Returns: [RejectCommentAnnotationEvent](/api-reference/sdk/models/api-event-objects#rejectcommentannotationevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const rejectCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    // Hook
    const { rejectCommentAnnotation } = useRejectCommentAnnotation();
    const rejectCommentAnnotationEventData = await rejectCommentAnnotation(rejectCommentAnnotationRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const rejectCommentAnnotationEventData = await commentElement.rejectCommentAnnotation(rejectCommentAnnotationRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const rejectCommentAnnotationRequest = {
      annotationId: 'ANNOTATION_ID'
    };

    const commentElement = Velt.getCommentElement();
    const rejectCommentAnnotationEventData = await commentElement.rejectCommentAnnotation(rejectCommentAnnotationRequest);
    ```
  </Tab>
</Tabs>

#### enableSuggestionMode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/accept-reject.png)

Whether to enable suggestion mode to accept or reject comments.

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    To accept comments, set the `suggestionMode` attribute to `true`.

    ```js
    <VeltComments suggestionMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    To accept comments, set the `suggestion-mode` attribute to `true`.

    ```js
    <velt-comments suggestion-mode="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableSuggestionMode();
    commentElement.disableSuggestionMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableSuggestionMode();
    commentElement.disableSuggestionMode();
    ```
  </Tab>
</Tabs>

#### updateAccess

* Updates access permissions for a comment annotation
* Params: [UpdateAccessRequest](/api-reference/sdk/models/api-request-objects#updateaccessrequest)
* Returns: [UpdateAccessEvent](/api-reference/sdk/models/api-event-objects#updateaccessevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const updateAccessRequest = {
      annotationId: 'ANNOTATION_ID',
      accessMode: 'private';
    };

    // Hook
    const { updateAccess } = useUpdateAccess();
    const updateAccessEvent = await updateAccess(updateAccessRequest);

    // API Method
    const commentElement = client.getCommentElement();
    const updateAccessEvent = await commentElement.updateAccess(updateAccessRequest);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const updateAccessRequest = {
      annotationId: 'ANNOTATION_ID',
      accessMode: 'private';
      }
    };

    const commentElement = Velt.getCommentElement();
    const updateAccessEvent = await commentElement.updateAccess(updateAccessRequest);
    ```
  </Tab>
</Tabs>

#### enablePrivateComments

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/private-comment.png)

* Private comment mode enables admin users to add comments that are only visible to other admin users.
* Use this to enable or disable private comment mode.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    To enable private comment mode, set the `privateCommentMode` attribute to `true`:

    ```html
    <VeltComments privateCommentMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    To enable private comment mode, set the `private-comment-mode` attribute to `true`:

    ```html
    <velt-comments private-comment-mode="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Methods:
API to enable/disable private comment mode:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    // To enable private comment mode
    commentElement.enablePrivateCommentMode();
    // To disable private comment mode
    commentElement.disablePrivateCommentMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    // To enable private comment mode
    commentElement.enablePrivateCommentMode();
    // To disable private comment mode
    commentElement.disablePrivateCommentMode();
    ```
  </Tab>
</Tabs>

#### enableReadOnly

Control whether comments are in read-only mode. When enabled, any features requiring user interaction (e.g., Composer, Reactions, Status) will be removed.

Default: `false`

<Tabs>
  <Tab title="React / Next.JS">
    Using Props:

    ```jsx
    <VeltComments readOnly={true} />
    ```

    Using API:

    ```js
      const commentElement = client.getCommentElement();
      commentElement.enableReadOnly();
      commentElement.disableReadOnly();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Props:

    ```html
    <velt-comments read-only="true"></velt-comments>
    ```

    Using API:

    ```js
      const commentElement = Velt.getCommentElement();
      commentElement.enableReadOnly();
      commentElement.disableReadOnly();
    ```
  </Tab>
</Tabs>

# Comment Read Status

#### enableSeenByUsers

Control whether the "Seen By" feature is enabled for comments. When enabled, it shows which users have seen each comment.

Default: `true`

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments seenByUsers={false} />
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableSeenByUsers();
    commentElement.disableSeenByUsers();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments seen-by-users="false"></velt-comments>
    ```

    **Using API:**

    ```javascript
    const commentElement = Velt.getCommentElement();
    commentElement.enableSeenByUsers();
    commentElement.disableSeenByUsers();
    ```
  </Tab>
</Tabs>

#### setUnreadIndicatorMode

Whether `verbose` mode is enabled for unread `Comments`.

`Default: 'minimal'`

Unread `Comments` can be in `minimal` mode or `verbose` mode.

In `minimal` mode, a small red dot indicator appears for unread `Comments`.

In `verbose` mode, a larger badge with the text "UNREAD" will appear for unread `Comments`.

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/unread-compare.png)
</Frame>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments unreadIndicatorMode={"verbose"} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments unread-indicator-mode="verbose"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setUnreadIndicatorMode("verbose"); // use badge with text UNREAD
    commentElement.setUnreadIndicatorMode("minimal"); // use small red dot indicator
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.setUnreadIndicatorMode("verbose"); // use badge with text UNREAD
    commentElement.setUnreadIndicatorMode("minimal"); // use small red dot indicator
    ```
  </Tab>
</Tabs>

# Toggle Comment Types

#### enableAreaComment

Area comments allows users to draw a rectangle and attach a comment to it.
Use this to enable or disable area comments.

Default: `true`

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/enable-disable-area-comments.png)

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments areaComment={false} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableAreaComment();
    commentElement.disableAreaComment();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```jsx
    <velt-comments area-comment="false"></velt-comments>
    ```

    Using API Method:

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableAreaComment();
    commentElement.disableAreaComment();
    ```
  </Tab>
</Tabs>

#### enableInboxMode

<Info>For a complete setup guide for Inbox mode, [read here](/async-collaboration/comments/setup/inbox).</Info>

Whether Inbox Mode is enabled.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments inboxMode={true} />
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableInboxMode();
    commentElement.disableInboxMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments inbox-mode="true"></velt-comments> 
    ```

    **Using API:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableInboxMode();
    commentElement.disableInboxMode();
    ```
  </Tab>
</Tabs>

#### enablePopoverMode

<Info>For a complete setup guide for Popover mode, [read here](/async-collaboration/comments/setup/popover).</Info>

Whether Popover Mode is enabled.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments popoverMode={true}/>
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enablePopoverMode();
    commentElement.disablePopoverMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments popover-mode="true"></velt-comments> 
    ```

    **Using API:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enablePopoverMode();
    commentElement.disablePopoverMode();
    ```
  </Tab>
</Tabs>

#### enableStreamMode

<Info>For a complete setup guide for Stream mode, [read here](/async-collaboration/comments/setup/stream).</Info>

Whether Stream Mode is enabled.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments streamMode={true}/>
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableStreamMode();
    commentElement.disableStreamMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments stream-mode="true"></velt-comments> 
    ```

    **Using API:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableStreamMode();
    commentElement.disableStreamMode();
    ```
  </Tab>
</Tabs>

#### enableTextMode

<Info>For a complete setup guide for Text mode, [read here](/async-collaboration/comments/setup/text).</Info>

Whether Text Mode is enabled.

Default: `true`

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/text-comment.png)

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments textMode={true}/>
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableTextComments();
    commentElement.disableTextComments();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments text-mode="true"></velt-comments> 
    ```

    **Using API:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableTextComments();
    commentElement.disableTextComments();
    ```
  </Tab>
</Tabs>

#### enableInlineCommentMode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/text-comment-opened.png)

Whether In-line comment mode is enabled.

When In-line comment mode is enabled, comments will appear under the text they are associated with in the DOM, instead of as a pop up window.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments inlineCommentMode={true}/>
    ```

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableInlineCommentMode();
    commentElement.disableInlineCommentMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments inline-comment-mode="true"></velt-comments> 
    ```

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableInlineCommentMode();
    commentElement.disableInlineCommentMode();
    ```
  </Tab>
</Tabs>

#### enableMultithread

* By default comments are single threaded.
* You can make it multithreaded by setting `multiThread` prop to `true`.
* If you had previously used a wireframe for the comment dialog, you will need to add the [multithread wireframe](/ui-customization/features/async/comments/multithread-comment-dialog/overview).
* Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments multiThread={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments multi-thread="true">
    </velt-comments>
    ```
  </Tab>
</Tabs>

# Comment Tool

#### enableCommentMode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-mode-on-off.png)

Turns Comment mode on or off.

When you click on the comment tool, it turns on comment mode and user can attach comment to any element on the DOM. Using this method you can programatically turn on the commenting mode.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableCommentMode();
    commentElement.disableCommentMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableCommentMode();
    commentElement.disableCommentMode();
    ```
  </Tab>
</Tabs>

#### onCommentModeChange

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/onCommentModeChange.png)

The comment mode is toggled on and off when you click on the Comment Tool.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    The `useCommentModeState()` hook can be used to get the Comment mode without having to subscribe to changes. When the Comment mode changes, the hook return value will update.

    The subscription is automatically unsubscribed when the component dismounts.

    ```jsx
    import { useCommentModeState } from '@veltdev/react';

    export default function YourDocument() {

      let commentModeState = useCommentModeState()

      return (
        <div>
           Comment Mode is turned on: {commentModeState}
        </div>
      )
    }

    ```
  </Tab>

  <Tab title="React / Next.js">
    To subscribe to changes in the comment mode, use the `onCommentModeChange()` method , as a property on `VeltCommentTool`:

    ```jsx
    <VeltCommentTool onCommentModeChange={(mode) => onCommentModeChange(mode)} />
    ```

    API method:

    ```jsx
    let subscription = commentElement.onCommentModeChange().subscribe((mode) => {
        //mode contains the state after change
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    API method:

    ```jsx
    const commentElement = Velt.getCommentElement();
    let subscription = commentElement.onCommentModeChange().subscribe((mode) => {
        //mode contains the state after change
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

#### enableCommentTool

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-disabled.png)

Whether the Comment Tool button is Enabled.

`Default: true`

When the Comment Tool is disabled, it can not be used to leave comments. Other ways to leave comments, such as highlighting text, will also be disabled.

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments commentTool={false} />
    ```

    Using API methods:

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableCommentTool();
    commentElement.disableCommentTool();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments comment-tool="false"></velt-comments>
    ```

    **Using API methods:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableCommentTool();
    commentElement.disableCommentTool();
    ```
  </Tab>
</Tabs>

#### enableChangeDetectionInCommentMode

* By default, DOM Change Detection is disabled in Comment Mode for better performance.
* You can enable it to automatically reposition comment pins when the DOM changes while in Comment Mode.

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments changeDetectionInCommentMode={true} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableChangeDetectionInCommentMode();
    commentElement.disableChangeDetectionInCommentMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comments change-detection-in-comment-mode="true"></velt-comments>
    ```

    **Using API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableChangeDetectionInCommentMode();
    commentElement.disableChangeDetectionInCommentMode();
    ```
  </Tab>
</Tabs>

#### enablePersistentCommentMode

* When Persistent comment mode is enabled, you can continue leave additional comments after finishing a comment.
* When it is disabled, you will need to reclick the Comment Tool every time when you want to make a comment.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments persistentCommentMode={true}/>
    ```

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enablePersistentCommentMode();
    commentElement.disablePersistentCommentMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments persistent-comment-mode="true"></velt-comments> 
    ```

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enablePersistentCommentMode();
    commentElement.disablePersistentCommentMode();
    ```
  </Tab>
</Tabs>

#### setPinCursorImage

You can set custom mouse cursor when the comment mode is on.
The custom cursor image must be **32 x 32 pixels**.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments pinCursorImage={BASE64_IMAGE_STRING} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments pin-cursor-image="BASE64_IMAGE_STRING"></velt-comments>
    ```
  </Tab>
</Tabs>

API Methods:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setPinCursorImage(BASE64_IMAGE_STRING);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.setPinCursorImage(BASE64_IMAGE_STRING);
    ```
  </Tab>
</Tabs>

# Minimap

#### enableMinimap

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/minimap.png)

* The minimap shows a bar on the edge of the screen with indicators that show where comments exist.
* Use this to enable/disable the minimap. By default it's disabled.
* It can be positioned `left` or `right`. By default, it's positioned on the right side of the screen.

**Option a. Enable using config:**

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments minimap={true} minimapPosition="left" />
    ```

    **API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableMinimap();
    commentElement.disableMinimap();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments minimap="true" minimap-position="left"></velt-comments>
    ```

    **API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableMinimap();
    commentElement.disableMinimap();
    ```
  </Tab>
</Tabs>

**Option b. Enable using Minimap Component:**
This offers greater flexibility to customize and position the minimap.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <div className="relative-container">
      <VeltCommentsMinimap targetScrollableElementId="scrollableElement" position="left" />
      <div id="scrollableElement">
          {/* scrollable content */}
      </div>
    </div>

    <style>
      .relative-container {
        position: relative;
      }

      #scrollableElement {
        width: 100%;
        height: 200px; /* or any value */
        overflow: auto;
      }
    </style>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <div class="relative-container">
      <velt-comments-minimap target-scrollable-element-id="scrollableElement" position="left"></velt-comments-minimap>
      <div id="scrollableElement">
          <!-- scrollable content -->
      </div>
    </div>

    <style>
      .relative-container {
        position: relative;
      }

      #scrollableElement {
        width: 100%;
        height: 200px; /* or any value */
        overflow: auto;
      }
    </style>
    ```
  </Tab>
</Tabs>

# Inline Comments

#### sortBy and sortOrder

* Change the default sorting order of Comments in the Inline Comments Section.

* Params:
  * `sortBy`: The field to sort by. Currently supports `createdAt` and `lastUpdated`. Default: `lastUpdated` for multithread and `createdAt` for single thread.
  * `sortOrder`: The order to sort by. It can be `asc` or `desc`. Default: `desc` for multithread and `asc` for single thread.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
      <VeltInlineCommentsSection 
        sortBy="createdAt" 
        sortOrder="desc"
      />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
      <velt-inline-comments-section
        sort-by="createdAt"
        sort-order="desc"
      ></velt-inline-comments-section>
    ```
  </Tab>
</Tabs>

#### multiThread

* By default [inline comment section](/async-collaboration/comments/setup/inline-comments) is multithreaded.
* You can make it single threaded by setting `multiThread` prop to `false`.
* Default: `true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltInlineCommentsSection multiThread={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-inline-comments-section multi-thread="false">
    </velt-inline-comments-section>
    ```
  </Tab>
</Tabs>

#### composerPosition

* Change the position of the comment composer in the inline comments section to `top` or `bottom`.
* Default: `bottom`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltInlineCommentsSection composerPosition="top" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-inline-comments-section composer-position="top">
    </velt-inline-comments-section>
    ```
  </Tab>
</Tabs>

# Popover Comments

#### enableDialogOnTargetElementClick

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/hover-cell-comment.gif)

Whether the comment dialog opens when target element is clicked. This is relevant only for Popover mode.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltComments dialogOnTargetElementClick={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comments dialog-on-hover="true"></velt-comments>
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDialogOnTargetElementClick();
    commentElement.disableDialogOnTargetElementClick();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDialogOnTargetElementClick();
    commentElement.disableDialogOnTargetElementClick();
    ```
  </Tab>
</Tabs>

#### enablePopoverTriangleComponent

Whether the popover triangle appears when Popover Mode is enabled.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments popoverTriangleComponent={true}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comments popover-triangle-component="true"></velt-comments> 
    ```
  </Tab>
</Tabs>

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enablePopoverTriangleComponent();
    commentElement.disablePopoverTriangleComponent();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enablePopoverTriangleComponent();
    commentElement.disablePopoverTriangleComponent();
    ```
  </Tab>
</Tabs>

# Comment Bubble

#### commentCountType

Whether to show unread or total comment replies count on Comment Bubble Component.

* `total`: Shows the total number of replies. (default)
* `unread`: Shows the number of unread replies.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentBubble commentCountType={"unread"} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comment-bubble comment-count-type="unread">
    </velt-comment-bubble>
    ```
  </Tab>
</Tabs>

# Video Timeline Comments

#### setTotalMediaLength

Set the total length of media (in frames or seconds) for the timeline.

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltCommentPlayerTimeline totalMediaLength={120} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.setTotalMediaLength(120);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-comment-player-timeline total-media-length="120"></velt-comment-player-timeline>
    ```

    **Using API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.setTotalMediaLength(120);
    ```
  </Tab>
</Tabs>

#### offset

* Allows comment bubbles to be positioned relative to both parent and child video clips by specifying an offset value.
* Default: `0`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentPlayerTimeline offset={10} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-player-timeline offset="10"></velt-comment-player-timeline>
    ```
  </Tab>
</Tabs>

# Comment Pin

#### enableBubbleOnPin

Show a Comment Bubble when user hovers or clicks on the Comment Pin vs showing the Comment Dialog.
The comment dialog will open only on clicking the comment bubble.

`Default: 'false'`

<Tabs>
  <Tab title="React / Next.js with Hooks">
    **Using Props:**

    ```jsx
    <VeltComments bubbleOnPin={true} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = useCommentUtils();
    commentElement.enableBubbleOnPin();
    commentElement.disableBubbleOnPin();
    ```
  </Tab>

  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments bubbleOnPin={true} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableBubbleOnPin();
    commentElement.disableBubbleOnPin();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```jsx
    <velt-comments bubble-on-pin="true">
    </velt-comments>
    ```

    **Using API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableBubbleOnPin();
    commentElement.disableBubbleOnPin();
    ```
  </Tab>
</Tabs>

#### enableBubbleOnPinHover

Show a Comment Bubble when user hovers on the Comment Pin vs clicks on it.

`Default: 'true'`

<Tabs>
  <Tab title="React / Next.js with Hooks">
    **Using Props:**

    ```jsx
    <VeltComments bubbleOnPin={true} bubbleOnPinHover={false} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = useCommentUtils();

    // To enable/disable showing bubble on pin
    commentElement.enableBubbleOnPin();
    commentElement.disableBubbleOnPin();

    // To enable/disable showing bubble on hover
    commentElement.enableBubbleOnPinHover();
    commentElement.disableBubbleOnPinHover();
    ```
  </Tab>

  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments bubbleOnPin={true} bubbleOnPinHover={false} />
    ```

    **Using API Method:**

    ```jsx
    const commentElement = client.getCommentElement();
    // To enable/disable showing bubble on pin
    commentElement.enableBubbleOnPin();
    commentElement.disableBubbleOnPin();

    // To enable/disable showing bubble on hover
    commentElement.enableBubbleOnPinHover();
    commentElement.disableBubbleOnPinHover();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```jsx
    <velt-comments bubble-on-pin="true" bubble-on-pin-hover="false"></velt-comments>
    ```

    **Using API Method:**

    ```jsx
    const commentElement = Velt.getCommentElement();
    // To enable/disable showing bubble on pin
    commentElement.enableBubbleOnPin();
    commentElement.disableBubbleOnPin();

    // To enable/disable showing bubble on hover
    commentElement.enableBubbleOnPinHover();
    commentElement.disableBubbleOnPinHover();
    ```
  </Tab>
</Tabs>

# Legacy Methods

#### onCommentAdd

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```js
    <VeltComments onCommentAdd={(event) => yourMethod(event)} />

    const yourMethod = (event) => {
      event?.addContext({ customKey: 'customValue' });
    }
    ```

    Using Hooks:

    ```jsx
    import { useCommentAddHandler} from '@veltdev/react';

    export default function YourDocument() {

      const commentAddEvent = useCommentAddHandler();

      useEffect(() => {
        console.log('commentAddEvent', commentAddEvent);
      }, [commentAddEvent]);

      return (
        <div></div>
      )
    }
    ```

    Using API:

    ```js
    const commentElement = client.getCommentElement();

    commentElement.onCommentAdd().subscribe((event) => {
      console.log('commentAddEvent', event);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Event listener:

    ```js
    const veltCommentsTag = document.querySelector('velt-comments');

    veltCommentsTag?.addEventListener('onCommentAdd', (event) => {
      console.log('*** onCommentAdd ***');
      console.log(event.detail);
      event.detail?.addContext({ customKey: 'customValue' });
    });
    ```

    Using API method:

    ```js
    const commentElement = Velt.getCommentElement();

    commentElement.onCommentAdd().subscribe((event) => {
      event?.addContext({ customKey: 'customValue' });
    });
    ```
  </Tab>
</Tabs>

**onCommentAdd Event Data Schema**

| Field Name         | Type              | Description                                                         |
| ------------------ | ----------------- | ------------------------------------------------------------------- |
| addContext         | Function          | Use this to set custom data on the comment                          |
| annotation         | CommentAnnotation | The annotation that is associated with the comment that was updated |
| documentId         | string            | The document ID where the comment was added                         |
| location           | Object            | The location where the comment was added                            |
| targetAnnotationId | string            | The id of the target annotation                                     |

#### onCommentUpdate

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```js
    <VeltComments onCommentUpdate={(event) => yourMethod(event)} />

    const yourMethod = (event) => {
      console.log('commentUpdateEvent', event);
    }
    ```

    Using Hooks:

    ```jsx
    import { useCommentUpdateHandler} from '@veltdev/react';

    export default function YourDocument() {

      const commentUpdateEvent = useCommentUpdateHandler();
      useEffect(() => {
        console.log('commentUpdateEvent', commentUpdateEvent);
      }, [commentUpdateEvent]);

      return (
        <div></div>
      )
    }
    ```

    Using API:

    ```js
    const commentElement = client.getCommentElement();

    commentElement.onCommentUpdate().subscribe((event) => {
      console.log('commentUpdateEvent', event);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Event Listener:

    ```js
    const veltCommentsTag = document.querySelector('velt-comments');

    veltCommentsTag?.addEventListener('onCommentUpdate', (event) => {
      console.log('*** onCommentUpdate ***');
      console.log(event.detail);
    });
    ```

    Using API method:

    ```js
    const commentElement = Velt.getCommentElement();

    commentElement.onCommentUpdate().subscribe((event) => {
      console.log('commentUpdateEvent', event);
    });
    ```
  </Tab>
</Tabs>

**onCommentUpdate Event Data Schema**

| Field Name         | Type              | Description                                                                |
| ------------------ | ----------------- | -------------------------------------------------------------------------- |
| annotation         | CommentAnnotation | The annotation that is associated with the comment that was updated        |
| type               | string            | The type of comment that was updated                                       |
| targetAnnotationId | string            | The ID of the target annotation that contains the comment that was updated |
| targetCommentId    | number            | The ID of the target comment that was updated                              |
| updateContext      | Function          | Use this to update the custom metadata on the comment annotation.          |

#### getAllCommentAnnotations

* Get all comment annotations for a given document and location.
* By default, it will return data for the current `documentId` and `location`.
* Params (optional):
  * `documentId`: string; it will return all comments in the given `documentId`.
  * `location`: Object; it will return all comments in the given `location`.

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
      const commentAnnotations = useCommentAnnotations();
      useEffect(() => {
        if (commentAnnotations) {
          console.log('commentAnnotations', commentAnnotations);
        }
      }, [commentAnnotations]);
    ```

    **Using API:**

    ```js
    const commentElement = client.getCommentElement();
    let subscription = commentElement.getAllCommentAnnotations().subscribe((comments) => {
      console.log('commentAnnotations', comments);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    if (Velt) {
      const commentElement = Velt.getCommentElement();
      let subscription = commentElement.getAllCommentAnnotations().subscribe((comments) => {
        // Do something with comments
      });
    }
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>


# Comments Notifications
Source: https://docs.velt.dev/async-collaboration/comments/notifications

There are several options to send notifications to your users.

<CardGroup cols={3}>
  <Card title="In-app notifications" href="/async-collaboration/notifications/overview" icon="bell" color="#FAA356" iconType="light">
    Add notifications component within your app.
  </Card>

  <Card title="Email notifications" href="/notifications/email/overview" icon="envelope" color="#FAA356" iconType="light">
    Send email notifications to your users.
  </Card>

  <Card title="Webhooks" href="/webhooks/overview" icon="webhook" color="#FAA356" iconType="light">
    Send notifications to other channels like Slack.
  </Card>
</CardGroup>


# Comments
Source: https://docs.velt.dev/async-collaboration/comments/overview

Your users can add comments in context to ask questions, leave feedback, report bugs etc. We handle all complexity to ensure the comments are robust against content changes. We support many types of comment UX patterns as illustrated below.

<Tabs>
  <Tab title="Freestyle">
    With `Freestyle` comments, you can pin `Comments` on any elements on the page or draw area comments.

    [Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comments\&type=freestyle)

    <Frame>
      <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comments&type=freestyle" allow="camera; microphone" scrolling="no" frameBorder="0" height="500px" className="w-full" />
    </Frame>
  </Tab>

  <Tab title="Popover">
    With `Popover` comments, you can add `Comments` on table cells, like in Google Sheets.

    [Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comments\&type=popover)

    <Frame>
      <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comments&type=popover" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="500px" />
    </Frame>
  </Tab>

  <Tab title="Stream">
    With `Stream` mode, your `Comments` will appear in a column on the right side.

    [Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comments\&type=stream)

    <Frame>
      <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comments&type=stream" allow="camera; microphone" frameBorder="0" height="500px" className="w-full" />
    </Frame>
  </Tab>

  <Tab title="Text">
    With `Text` comments, you can leave `Comments` as text highlights.

    [Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comments\&type=text)

    <Frame>
      <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comments&type=text" allow="camera; microphone" scrolling="no" frameBorder="0" height="500px" className="w-full" />
    </Frame>
  </Tab>

  <Tab title="Tiptap">
    Add comments to your Tiptap editor.

    [Open in larger window](https://documentation-app-demo.vercel.app/)

    <Frame>
      <iframe src="https://documentation-app-demo.vercel.app/" allow="camera; microphone" scrolling="no" frameBorder="0" height="500px" className="w-full" />
    </Frame>
  </Tab>

  <Tab title="Inline">
    With `Inline` comments, you can add a more traditional style of comments.

    [Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comments\&type=inline)

    <Frame>
      <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comments&type=inline" allow="camera; microphone" scrolling="no" frameBorder="0" height="500px" className="w-full" />
    </Frame>
  </Tab>

  <Tab title="Inbox">
    With `Inbox` mode, your focused comments appear in a sidebar on the right.

    [Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comments\&type=inbox)

    <Frame>
      <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comments&type=inbox" allow="camera; microphone" scrolling="no" frameBorder="0" height="500px" className="w-full" />
    </Frame>
  </Tab>

  <Tab title="Page">
    With `Page` comments, you can leave `Comments` at the page level.

    [Open in larger window](https://docs-mini-demo.vercel.app/comments-page-mode)

    <Frame>
      <iframe src="https://docs-mini-demo.vercel.app/comments-page-mode" allow="camera; microphone" scrolling="no" frameBorder="0" height="500px" className="w-full" />
    </Frame>
  </Tab>

  <Tab title="Chart">
    With `Chart` comments, you can leave `Comments` on popular charting libraries.

    {/* [Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=nivo-charts) */}

    [Open in larger window](https://velt-chart-js-demo.vercel.app)

    <Frame>
      {/* <iframe
          src="https://landing-page-demo-velt.vercel.app/?feature=nivo-charts"
          allow="camera; microphone"
          scrolling="no"
          frameBorder="0"
          className="w-full"
          height="700px"
        ></iframe> */}

      <iframe src="https://velt-chart-js-demo.vercel.app" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="700px" />
    </Frame>
  </Tab>

  <Tab title="Video">
    With `Video` comments, you can leave frame by frame `Comments` on videos.

    [Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=video-player)

    <Frame>
      <iframe src="https://landing-page-demo-velt.vercel.app/?feature=video-player" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="510px" />
    </Frame>
  </Tab>

  <Tab title="Lottie">
    With `Lottie` comments, you can leave frame by frame `Comments` on Lottie animations.

    [Open in larger window](https://lottiefiles-velt-integration-2.web.app/)

    <Frame>
      <iframe src="https://lottiefiles-velt-integration-2.web.app/" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="700px" />
    </Frame>
  </Tab>
</Tabs>

There are several customizable components that work as part of the `Comments` feature set.

<Tabs>
  <Tab title="Comment Dialog">
    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-1.png)
    </Frame>
  </Tab>

  <Tab title="Comment Pin">
    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-pin-1.png)
    </Frame>
  </Tab>

  <Tab title="Text Comment Tool">
    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-text-comment-1.png)
    </Frame>
  </Tab>

  <Tab title="Comment Tool">
    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-tool-1.png)
    </Frame>
  </Tab>
</Tabs>


# ChartJS Comments Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/chart-comments-setup/chartjs



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/velt-chartjs-barchart.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Components from Chart.js">
        ```jsx
        import { Chart as ChartJS, BarElement } from 'chart.js';
        import { Bar } from 'react-chartjs-2'
        ```
      </Step>

      <Step title="Import Comments Components and Hooks from Velt">
        * Add `VeltComments` to the root of your app. This component is required to render comments in your app.
        * Add the `VeltCommentTool` component wherever you want to show the comment tool button. Clicking on it initiates comment mode & changes your mouse cursor to a comment pin.
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool.png)

        ```jsx
        import { useCommentModeState, VeltCommentPin, VeltCommentTool, VeltComments } from '@veltdev/react';
        ```
      </Step>

      <Step title="Create a ref for the ChartJS component">
        * Create a `ref` and pass it into the `ref` property of the `ChartJS` component.

        ```jsx
        const chartRef = useRef(null);

        <Bar data={data} options={options} ref={chartRef} />
        ```
      </Step>

      <Step title="Add a container div for the ChartJS component">
        1. Apply `position: relative` style to the div. This ensures accurate positioning of Velt Comment Pins.
        2. Set `data-velt-manual-comment-container` to `true`. This:

        * informs Velt which div to use for positioning
        * disables Velt's automatic comment positioning system within this div, allowing for manual positioning of comment pins

        3. Give a unique ID to the chart to scope comments to the specific chart, isolating them from other charts.

        ```jsx
        const chartId = 'dataAnalyticsChart'; // Unique ID for the chart
        ```

        ```jsx
        return (
          <div style={{ position: 'relative' }}
            onClick={handleChartClick}
            data-velt-manual-comment-container="true">

            <Bar data={data} options={options} ref={chartRef} />
          </div>
        );
        ```
      </Step>

      <Step title="Add a Comment when the user clicks on the chart">
        1. Handle chart click to find nearest data point and add a comment. *(Check `handleChartClick() method` on the right)*
        2. Create `context` object which contains the information about the series, x-axis value, y-axis value, chartId and anything else that's relevant. This will be used when rendering the comment pin. *(Check `handleChartClick() method` on the right)*
        3. Add comment with the `context` data. *(Check `addManualComment() method` on the right)*

        * Only add a comment if the Velt `commentModeState` is true and the Velt `client` is available.

        {/* TODO: Create a hook for adding manual comments */}
      </Step>

      <Step title="Render the Velt Comment Pins and set its position">
        1. Get all comment annotations.
        2. Loop through it and render the comment pin.
        3. Use the `context` data in `CommentAnnotation`, to set the position of the comment pin. *(Check `showCommentPin() method` on the right)*

        ```jsx
        const commentAnnotations = useCommentAnnotations(); // Get Velt comment annotations
        const [chartCommentAnnotations, setChartCommentAnnotations] = React.useState([]); // Store annotations for this chart

        useEffect(() => {
          // Filter and store comments for the current chart, using unique chart ID
          const chartCommentAnnotations = commentAnnotations?.filter((comment) => comment.context?.chartId === chartId); 
          setChartCommentAnnotations(chartCommentAnnotations as any || []);
        }, [commentAnnotations]);

        return (
            ... {/* Rest of the container code. */}

            {/* Loop through comment annotations and render the comment pin. */}
            {chartCommentAnnotations.map((comment, index) => showCommentPin(comment))}

            ... {/* Rest of the container code. */}
        );
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="HTML (coming soon)">
    Coming Soon
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import React, { useEffect, useRef, useMemo } from 'react';
  import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, BarElement, Title, Tooltip, Legend, Filler,} from 'chart.js';
  import { Bar } from 'react-chartjs-2';
  import { useVeltClient, useCommentAnnotations, useCommentModeState, VeltCommentPin } from '@veltdev/react';

  // Register the necessary Chart.js components
  ChartJS.register(CategoryScale, LinearScale, PointElement, BarElement, Title, Tooltip, Legend, Filler);

  // Define the data for the chart
  const scores = [6, 5, 5, 5, 3, 4, 6, 4, 5];
  const labels = [100, 200, 300, 400, 500, 600, 700];

  // Set the options for the chart
  const options: any = {
  // your chart options
  };

  const BarChart = () => {
    const chartId = 'dataAnalyticsChart'; // Unique ID for the chart
    const chartRef = useRef(null); // Reference to the chart instance
    const { client } = useVeltClient(); // Get Velt client
    const commentModeState = useCommentModeState(); // Get Velt comment mode state
    const commentAnnotations = useCommentAnnotations(); // Get Velt comment annotations
    const [chartCommentAnnotations, setChartCommentAnnotations] = React.useState([]); // State for chart comments

    // Update chart comments when annotations change
    useEffect(() => {
      // Filter comments for the current chart, using unique chart ID
      const chartCommentAnnotations = commentAnnotations?.filter((comment) => comment.context?.chartId === chartId); 
      setChartCommentAnnotations(chartCommentAnnotations as any || []);
    }, [commentAnnotations]);

    // Handle chart clicks to find nearest data point and add a comment
    const handleChartClick = (event: any) => {
      const chart: any = chartRef.current;
      if (chart) {
        // Get the nearest element to the click event
        const elements = chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', { intersect: true }, false);
        if (elements.length > 0) {
          const element = elements[0];
          const datasetIndex = element.datasetIndex;
          const index = element.index;
          const dataset = chart.data.datasets[datasetIndex];
          const xValue = chart.data.labels[index];
          const yValue = dataset.data[index];
          const context = { seriesId: dataset.label, xValue, yValue, chartId };
          addManualComment(context); // Add a comment at the nearest data point with the context data
        }
      }
    };

    // Add a manual comment to the chart
    const addManualComment = (context: any) => {
      try {
        if (client && commentModeState) {
          const commentElement = client.getCommentElement();
          commentElement.addManualComment({ context }); // Add a Velt comment
        }
      } catch (error) {
        console.error('Error adding manual comment', error);
      }
    };

    // Find the exact point on the chart to place a comment pin
    const findPoint = (seriesId: any, xValue: any, yValue: any) => {
      const chart: any = chartRef.current;
      if (chart) {
        const dataset = chart.data.datasets.find((dataset: any) => dataset.label === seriesId);
        const index = chart.data.labels.indexOf(xValue);
        if (dataset && index !== -1) {
          const yValueInDataset = dataset.data[index];
          if (yValueInDataset === yValue) {
            return { x: chart.scales.x.getPixelForValue(index), y: chart.scales.y.getPixelForValue(yValue) }; // Set the x, y position for the comment pin
          }
        }
      }
      return null;
    };

    // Show the comment pin on the chart at the specified point
    const showCommentPin = (commentAnnotation: any) => {
      const context = commentAnnotation.context || {};
      const point = findPoint(context.seriesId, context.xValue, context.yValue);
      if (point) {
        const { x, y } = point;
        return (
          <div
            key={commentAnnotation.annotationId}
            style={{
              left: `${x}px`,
              top: `${y}px`,
              position: 'absolute',
              transform: 'translate(0%, -100%)',
              zIndex: 1000,
            }}
          >
            <VeltCommentPin annotationId={commentAnnotation.annotationId} /> {/* Velt comment pin component */}
          </div>
        );
      }
      return null;
    };

    // Memoize the chart data
    const data = useMemo(() => {
      return {
        datasets: [
          {
            label: 'Mis datos',
            tension: 0.3,
            data: scores,
            borderColor: 'rgb(75, 192, 192)',
            backgroundColor: 'rgba(75, 192, 192, 0.3)',
          },
        ],
        labels,
      };
    }, []);

    return (
      <div className="dashlet-card">
        <div className="dashlet-card-header">Bar Chart With Comments</div>
        {/* Keep the parent div as relative, as comment pin will be placed with absolute position */}
        {/* Set "data-velt-manual-comment-container" to true, so that comment pin will know which div to consider while positioning */}
        <div style={{ position: 'relative' }} onClick={handleChartClick} data-velt-manual-comment-container="true"> 
          <Bar data={data} options={options} ref={chartRef} /> {/* Render the Bar chart */}
          {chartCommentAnnotations.map((comment, index) => showCommentPin(comment))} {/* Show all comment pins */}
        </div>
      </div>
    );
  };

  export default BarChart;
  ```
</RequestExample>


# Custom Charts Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/chart-comments-setup/custom-charts



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/velt-chartjs-barchart.gif)

<Info>Here we have used ChartJS as an example library, you can follow the approach for any other charting library</Info>

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Components from your Charts Library">
        ```jsx
        import { Chart as ChartJS, BarElement } from 'chart.js';
        import { Bar } from 'react-chartjs-2'
        ```
      </Step>

      <Step title="Import Comments Components and Hooks from Velt">
        * Add `VeltComments` to the root of your app. This component is required to render comments in your app.
        * Add the `VeltCommentTool` component wherever you want to show the comment tool button. Clicking on it initiates comment mode & changes your mouse cursor to a comment pin.
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool.png)

        ```jsx
        import { useCommentModeState, VeltCommentPin, VeltCommentTool, VeltComments } from '@veltdev/react';
        ```
      </Step>

      <Step title="Create a ref for the Chart component">
        * Create a `ref` and pass it into the `ref` property of the `ChartJS` component.

        ```jsx
        const chartRef = useRef(null);

        <Bar data={data} options={options} ref={chartRef} />
        ```
      </Step>

      <Step title="Add a container div for the Chart component">
        1. Apply `position: relative` style to the div. This ensures accurate positioning of Velt Comment Pins.
        2. Set `data-velt-manual-comment-container` to `true`. This:

        * informs Velt which div to use for positioning
        * disables Velt's automatic comment positioning system within this div, allowing for manual positioning of comment pins

        3. Give a unique ID to the chart to scope comments to the specific chart, isolating them from other charts.

        ```jsx
        const chartId = 'dataAnalyticsChart'; // Unique ID for the chart
        ```

        ```jsx
        return (
          <div style={{ position: 'relative' }}
            onClick={handleChartClick}
            data-velt-manual-comment-container="true">

            <Bar data={data} options={options} ref={chartRef} />
          </div>
        );
        ```
      </Step>

      <Step title="Add a Comment when the user clicks on the chart">
        1. Handle chart click to find nearest data point and add a comment. *(Check `handleChartClick() method` on the right)*
        2. Create `context` object which contains the information about the series, x-axis value, y-axis value, chartId and anything else that's relevant. This will be used when rendering the comment pin. *(Check `handleChartClick() method` on the right)*
        3. Add comment with the `context` data. *(Check `addManualComment() method` on the right)*

        * Only add a comment if the Velt `commentModeState` is true and the Velt `client` is available.

        {/* TODO: Create a hook for adding manual comments */}
      </Step>

      <Step title="Render the Velt Comment Pins and set its position">
        1. Get all comment annotations.
        2. Loop through it and render the comment pin.
        3. Use the `context` data in `CommentAnnotation`, to set the position of the comment pin. *(Check `showCommentPin() method` on the right)*

        ```jsx
        const commentAnnotations = useCommentAnnotations(); // Get Velt comment annotations
        const [chartCommentAnnotations, setChartCommentAnnotations] = React.useState([]); // Store annotations for this chart

        useEffect(() => {
          // Filter and store comments for the current chart, using unique chart ID
          const chartCommentAnnotations = commentAnnotations?.filter((comment) => comment.context?.chartId === chartId); 
          setChartCommentAnnotations(chartCommentAnnotations as any || []);
        }, [commentAnnotations]);

        return (
            ... {/* Rest of the container code. */}

            {/* Loop through comment annotations and render the comment pin. */}
            {chartCommentAnnotations.map((comment, index) => showCommentPin(comment))}

            ... {/* Rest of the container code. */}
        );
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="HTML (coming soon)">
    Coming Soon
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import React, { useEffect, useRef, useMemo } from 'react';
  import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, BarElement, Title, Tooltip, Legend, Filler,} from 'chart.js';
  import { Bar } from 'react-chartjs-2';
  import { useVeltClient, useCommentAnnotations, useCommentModeState, VeltCommentPin } from '@veltdev/react';

  // Register the necessary Chart.js components
  ChartJS.register(CategoryScale, LinearScale, PointElement, BarElement, Title, Tooltip, Legend, Filler);

  // Define the data for the chart
  const scores = [6, 5, 5, 5, 3, 4, 6, 4, 5];
  const labels = [100, 200, 300, 400, 500, 600, 700];

  // Set the options for the chart
  const options: any = {
  // your chart options
  };

  const BarChart = () => {
    const chartId = 'dataAnalyticsChart'; // Unique ID for the chart
    const chartRef = useRef(null); // Reference to the chart instance
    const { client } = useVeltClient(); // Get Velt client
    const commentModeState = useCommentModeState(); // Get Velt comment mode state
    const commentAnnotations = useCommentAnnotations(); // Get Velt comment annotations
    const [chartCommentAnnotations, setChartCommentAnnotations] = React.useState([]); // State for chart comments

    // Update chart comments when annotations change
    useEffect(() => {
      // Filter comments for the current chart, using unique chart ID
      const chartCommentAnnotations = commentAnnotations?.filter((comment) => comment.context?.chartId === chartId); 
      setChartCommentAnnotations(chartCommentAnnotations as any || []);
    }, [commentAnnotations]);

    // Handle chart clicks to find nearest data point and add a comment
    const handleChartClick = (event: any) => {
      const chart: any = chartRef.current;
      if (chart) {
        // Get the nearest element to the click event
        const elements = chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', { intersect: true }, false);
        if (elements.length > 0) {
          const element = elements[0];
          const datasetIndex = element.datasetIndex;
          const index = element.index;
          const dataset = chart.data.datasets[datasetIndex];
          const xValue = chart.data.labels[index];
          const yValue = dataset.data[index];
          const context = { seriesId: dataset.label, xValue, yValue, chartId };
          addManualComment(context); // Add a comment at the nearest data point with the context data
        }
      }
    };

    // Add a manual comment to the chart
    const addManualComment = (context: any) => {
      try {
        if (client && commentModeState) {
          const commentElement = client.getCommentElement();
          commentElement.addManualComment({ context }); // Add a Velt comment
        }
      } catch (error) {
        console.error('Error adding manual comment', error);
      }
    };

    // Find the exact point on the chart to place a comment pin
    const findPoint = (seriesId: any, xValue: any, yValue: any) => {
      const chart: any = chartRef.current;
      if (chart) {
        const dataset = chart.data.datasets.find((dataset: any) => dataset.label === seriesId);
        const index = chart.data.labels.indexOf(xValue);
        if (dataset && index !== -1) {
          const yValueInDataset = dataset.data[index];
          if (yValueInDataset === yValue) {
            return { x: chart.scales.x.getPixelForValue(index), y: chart.scales.y.getPixelForValue(yValue) }; // Set the x, y position for the comment pin
          }
        }
      }
      return null;
    };

    // Show the comment pin on the chart at the specified point
    const showCommentPin = (commentAnnotation: any) => {
      const context = commentAnnotation.context || {};
      const point = findPoint(context.seriesId, context.xValue, context.yValue);
      if (point) {
        const { x, y } = point;
        return (
          <div
            key={commentAnnotation.annotationId}
            style={{
              left: `${x}px`,
              top: `${y}px`,
              position: 'absolute',
              transform: 'translate(0%, -100%)',
              zIndex: 1000,
            }}
          >
            <VeltCommentPin annotationId={commentAnnotation.annotationId} /> {/* Velt comment pin component */}
          </div>
        );
      }
      return null;
    };

    // Memoize the chart data
    const data = useMemo(() => {
      return {
        datasets: [
          {
            label: 'Mis datos',
            tension: 0.3,
            data: scores,
            borderColor: 'rgb(75, 192, 192)',
            backgroundColor: 'rgba(75, 192, 192, 0.3)',
          },
        ],
        labels,
      };
    }, []);

    return (
      <div className="dashlet-card">
        <div className="dashlet-card-header">Bar Chart With Comments</div>
        {/* Keep the parent div as relative, as comment pin will be placed with absolute position */}
        {/* Set "data-velt-manual-comment-container" to true, so that comment pin will know which div to consider while positioning */}
        <div style={{ position: 'relative' }} onClick={handleChartClick} data-velt-manual-comment-container="true"> 
          <Bar data={data} options={options} ref={chartRef} /> {/* Render the Bar chart */}
          {chartCommentAnnotations.map((comment, index) => showCommentPin(comment))} {/* Show all comment pins */}
        </div>
      </div>
    );
  };

  export default BarChart;
  ```
</RequestExample>


# Highcharts Comments Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/chart-comments-setup/highcharts



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Charts-Comments.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import components from Highcharts">
        ```jsx
        import Highcharts from 'highcharts';
        import HighchartsReact from 'highcharts-react-official';
        ```
      </Step>

      {/* bar/column, line */}

      <Step title="Import Comment components from Velt">
        * Add `VeltComments` once to the root of your app. This component is required to render comments in your app.

        ```jsx
        import { VeltHighChartComments, VeltComments } from '@veltdev/react';
        ```
      </Step>

      <Step title="Create a ref for the HighchartsReact component">
        * Create a `ref` and pass it into the `ref` property of the `HighchartsReact` component.
        * This ref object will be used by Velt to get the Chart data and add comment pin to it.

        ```jsx
        const chartComponentRef = useRef(null);

        <HighchartsReact
            highcharts={Highcharts}
            options={options}
            ref={chartComponentRef}
        />
        ```
      </Step>

      <Step title="Add a container div for the HighchartsReact component">
        * Give it a `position: relative` style. This will help position the Velt Comment Pins accurately.

        ```jsx
        <div style={{ position: 'relative' }}>
            <HighchartsReact
                highcharts={Highcharts}
                options={options}
                ref={chartComponentRef}
            />
        </div>
        ```
      </Step>

      <Step title="Add VeltHighChartComments component in the same container">
        * Conditionally render `VeltHighChartsComments` in the same container div as the `HighchartsReact` component.
        * Set a unique `id` in the VeltHighChartsComments component to scope comments to the specific chart, isolating them from other charts.
        * Pass the `chartComputedData` prop with the `ref` you created earlier.

        ```jsx
        <div style={{ position: 'relative' }}>
            <HighchartsReact
                highcharts={Highcharts}
                options={options}
                ref={chartComponentRef}
            />
            {
                chartComponentRef.current && <VeltHighChartComments id="HighChartsLineChartExample" chartComputedData={chartComponentRef.current} />
            }
        </div>
        ```
      </Step>

      <Step title="(Optional) Customize the Chart Metadata displayed in the Comment Dialog">
        * Pass an array to the `dialogMetadataTemplate` prop in the VeltHighChartsComments component.
        * This array determines the chart metadata displayed in the comment dialog, representing the data point (e.g., x-axis and y-axis values) on which the comment was added.
        * Customize the order of the keys or remove unnecessary keys to control how the metadata is presented in the comment dialog.

        `Default: ['groupId', 'label', 'value']`

        For example:

        ```jsx
        <VeltHighChartComments
            id="HighChartsLineChartExample"
            chartComputedData={chartComputedData}
            dialogMetadataTemplate={['label', 'value', 'groupId']} />
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="HTML (coming soon)">
    Coming Soon
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import React, { useEffect, useRef, useState } from 'react';
  import { VeltHighChartComments } from '@veltdev/react';
  import Highcharts from 'highcharts';
  import HighchartsReact from 'highcharts-react-official';

  function HighChartsLineChartExample() {

      const [data, setData] = useState(CHART_DATA);
      const chartComponentRef = useRef(null);
      const options = {
          // your chart options
      };

      return (
          <div style={{ position: 'relative' }}>
              <HighchartsReact
                  highcharts={Highcharts}
                  options={options}
                  ref={chartComponentRef}
              />
              {
                  chartComponentRef.current && <VeltHighChartComments id="HighChartsLineChartExample" chartComputedData={chartComponentRef.current as any} />
              }
          </div>
      );
  }

  ```
</RequestExample>


# NivoCharts Comments Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/chart-comments-setup/nivo-charts



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Charts-Comments.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import components from Nivo Charts">
        ```jsx
        import { ResponsiveLine } from '@nivo/line';
        ```
      </Step>

      <Step title="Import VeltNivoChartComments component from Velt">
        * Add `VeltComments` once to the root of your app. This component is required to render comments in your app.

        ```jsx
        import { VeltNivoChartComments, VeltComments } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add a container div for the Nivo Chart component">
        * Add a `nivo-chart-container` class to it. This will help us position the Velt Comment Pins accurately.

        ```jsx
        <div style={{ height: 400, width: '100%' }} className='nivo-chart-container'>
          <ResponsiveLine
            data={data}
            layers={[ 
                'grid', 'markers', 'axes', 'areas', 'crosshair',
                'lines', 'slices', 'legends', 'points',
            ]}
            />
        </div>
        ```
      </Step>

      <Step title="Add VeltNivoChartComments to the Nivo Chart component">
        * Add a custom function as a layer inside your Nivo Chart component and return `VeltNivoChartComments` component.
        * Set a unique `id` in the VeltNivoChartComments component to scope comments to the specific chart, isolating them from other charts.
        * Pass the `chartComputedData` props to it.

        {/* bar, line, pie */}

        ```jsx
        <ResponsiveLine
          data={data}
          layers={[ 
            'grid', 'markers', 'axes', 'areas', 'crosshair',
            'lines', 'slices', 'legends', 'points',
            // Add this function with VeltNivoChartComments
            // component to allow Velt comments inside the Chart
            (chartComputedData) => {
                return (
                    <VeltNivoChartComments id="NivoLineChartExample" chartComputedData={chartComputedData} />
                )
            }
          ]}
        />
        ```
      </Step>

      <Step title="(Optional) Customize the Chart Metadata displayed in the Comment Dialog">
        * Pass an array to the `dialogMetadataTemplate` prop in the VeltHighChartsComments component.
        * This array determines the chart metadata displayed in the comment dialog, representing the data point (e.g., x-axis and y-axis values) on which the comment was added.
        * Customize the order of the keys or remove unnecessary keys to control how the metadata is presented in the comment dialog.

        `Default: ['groupId', 'label', 'value']`

        For example:

        ```jsx
        <VeltNivoChartComments
          id="NivoLineChartExample"
          chartComputedData={chartComputedData}
          dialogMetadataTemplate={['label', 'value', 'groupId']} />
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="HTML (coming soon)">
    Coming Soon
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import { ResponsiveLine } from '@nivo/line';
  import { VeltNivoChartComments } from '@veltdev/react';
  import { useState } from 'react'

  function YourComponent() {
    const [data, setData] = useState(CHART_DATA);

    return (
      // add nivo-chart-container class to the parent element of your NivoChart
      <div style={{ height: 400, width: '100%' }} className='nivo-chart-container'>
          <ResponsiveLine
              data={data}
              layers={[ 
                  'grid', 'markers', 'axes', 'areas', 'crosshair',
                  'lines', 'slices', 'legends', 'points',
                  // Add this function with VeltNivoChartComments
                  // component to allow Velt comments inside Chart
                  (chartComputedData) => {
                      return (
                          <VeltNivoChartComments id="NivoLineChartExample" chartComputedData={chartComputedData} dialogMetadataTemplate={['label', 'value', 'groupId']} />
                      )
                  }
              ]}
          />
  	</div>
    )  
  }
  ```
</RequestExample>


# Freestyle Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/freestyle



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Freestyle-Comment.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Comment components">
        Import the `VeltComments` component and the `VeltCommentTool` component.

        ```js
        import {
          VeltProvider,
          VeltComments,
          VeltCommentTool
        } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add Comments component">
        Add the `VeltComments` component to the root of your app.

        This component is required to render comments in your app.

        ```js
        <VeltProvider apiKey="API_KEY">
          <VeltComments />
        </VeltProvider>
        ```
      </Step>

      <Step title="Add Comment Tool component">
        Add the `VeltCommentTool` component wherever you want to show the comment tool button.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool.png)

        Clicking on it initiates comment mode & changes your mouse cursor to a comment pin. Now you can click anywhere on the document to attach comments to any elements.

        ```js
        <div className="toolbar">
          <VeltCommentTool />
        </div>
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by opening the page with Velt components in your browser.

        Click on the `Comment Tool` and click anywhere on the page to add a comment.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/standard-comment.png)
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Add Comment component">
        Add the comment component to your template. Try to put it as close to the root level of your `<body>`.

        This component is required to render comments in your app.

        ```html
        <body>
          <velt-comments></velt-comments>
        </body>
        ```
      </Step>

      <Step title="Add Comment Tool component">
        Add the `<velt-comment-tool>` component wherever you want to show the comment tool button.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool.png)

        Clicking on it initiates comment mode & changes your mouse cursor to a comment pin. Now you can click anywhere on the document to attach comments to any elements.

        ```js
        <div class="toolbar">
          <velt-comment-tool></velt-comment-tool>
        </div>
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by adding a comment.

        You should be able to leave comments using the `Comment Tool`.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/standard-comment.png)
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import {
    VeltProvider,
    VeltComments,
    VeltCommentTool
  } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">
        <VeltComments />

        <div className="toolbar">
          <VeltCommentTool />
        </div>
      </VeltProvider>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Comment documentation</title>
    </head>
    <body>
      <velt-comments></velt-comments>

      <div class="toolbar">
        <velt-comment-tool></velt-comment-tool>
      </div>
    </body>
  </html>
  ```
</RequestExample>


# Inbox Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/inbox



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Inbox-Comment.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Comment components">
        Import the `VeltComments` component and the `VeltCommentTool` component.

        ```js
        import {
          VeltProvider,
          VeltComments,
          VeltCommentTool
        } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add Comment component with Inbox mode">
        Add the `VeltComments` component to the root of your app and mark the `inboxMode` property as true.

        This component is required to render comments in your app.

        This mode enable a more focused inbox style UI for each comment on the right side. Instead of showing a comment dialog box, it shows the given comment in a sidebar.

        You can combine this with Freestyle, Popover, or Text mode.

        ```js
        <VeltProvider apiKey="API_KEY">
          <VeltComments inboxMode={true}/>
        </VeltProvider>
        ```
      </Step>

      <Step title="Add Comment Tool component">
        Add the `VeltCommentTool` component wherever you want to show the comment tool button.

        Clicking on it initiates comment mode & changes your mouse cursor to a comment pin. Now you can click anywhere on the document to attach comments to any elements.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool.png)

        ```jsx
        <div className="toolbar">
          <VeltCommentTool />
        </div>
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by opening the page with Velt components in your browser.

        You should be able to leave a comment by selecting some text or using the `Comment Tool`.
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Add Comment component with Inbox mode">
        Add the comment component to your template. Try to put it as close to the root level of your `<body>`.

        Set the `inbox-mode` attribute to `true`.

        This component is required to render comments in your app.

        This mode enable a more focused inbox style UI for each comment on the right side. Instead of showing a comment dialog box, it shows the given comment in a sidebar.

        You can combine this with Freestyle, Popover, or Text mode.

        ```html
        <body>
          <velt-comments inbox-mode="true"></velt-comments>
        </body>
        ```
      </Step>

      <Step title="Add the Comment tool component">
        The comment tool allows you to add comments.

        When you click on the comment tool, it initiates comment mode. In Freestyle mode, you can attach comments to any elements on the page.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool.png)

        ```html
        <div class="toolbar">
          <velt-comment-tool></velt-comment-tool>
        </div>
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by opening the page with Velt components in your browser.

        You should be able to leave a comment by selecting some text or using the `Comment Tool`.
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import { VeltProvider, VeltComments, VeltCommentTool } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">

        <VeltComments inboxMode={true} />

        <div className="toolbar">
          <VeltCommentTool />
        </div>

      </VeltProvider>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Comment documentation</title>
    </head>
    <body>
      <velt-comments inbox-mode="true"></velt-comments>
      <div class="toolbar">
        <velt-comment-tool></velt-comment-tool>
      </div>
    </body>
  </html>
  ```
</RequestExample>


# Inline Comments Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/inline-comments



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/inline-comment.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Comment components">
        Import the `VeltProvider`, `VeltComments`, and `VeltInlineCommentsSection` component.

        ```js
        import { VeltProvider, VeltComments, VeltInlineCommentsSection } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add VeltComments component">
        * Add the `VeltComments` component to the root of your app where your `VeltProvider` is.
        * This component is required to render comments in your app.

        ```js
        <VeltProvider apiKey="API_KEY">
          <VeltComments />
        </VeltProvider>
        ```
      </Step>

      <Step title="Add container to hold Inline Comments component">
        * Create an element to hold your Inline Comments component, such as a `div` or `section`.
        * Add a unique element `id` to it.
        * (optional) Set the same id to the `data-velt-target-inline-comment-element-id` attribute.
          This is used in advanced scenarios, eg: This ensures that if you add a freestyle or text comment within this container, it will appear in inline comments component too.

        ```jsx
        <section id="container-id" data-velt-target-inline-comment-element-id="container-id">
        	<div>Your Article</div>
        </section>
        ```
      </Step>

      <Step title="Add VeltInlineCommentsSection component">
        * Add `VeltInlineCommentsSection` component inside your container.
        * Add `targetElementId` property to the Velt Inline Comments component. This needs to match the id you set to the container. This binds the Inline Comments component with the desired container.

        ```jsx
        <VeltInlineCommentsSection
          targetElementId="container-id"
        />
        ```
      </Step>

      <Step title="(Optional) Make it single threaded or multithreaded">
        * Default: `true`
        * By default inline comment section is multithreaded.
        * You can make it single threaded by setting `multiThread` attribute to `false`.

        ```jsx
        <VeltInlineCommentsSection multiThread={false} />
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Add velt-comments component">
        * Add the Velt Comments component to the root of your app.
        * This component is required to render comments in your app.

        ```html
        <body>
          <velt-comments></velt-comments>
        </body>
        ```
      </Step>

      <Step title="Add container to hold Inline Comments component">
        * Create an element to hold your Inline Comments component, such as a `div` or `section`.
        * Add a unique element `id` to it.
        * (optional) Set the same id to the `data-velt-target-inline-comment-element-id` attribute.
          This is used in advanced scenarios, eg: This ensures that if you add a freestyle or text comment within this container, it will appear in inline comments component too.

        ```html
        <section id="container-id" data-velt-target-inline-comment-element-id="container-id">
        	<div>Your Article</div>
        </section>
        ```
      </Step>

      <Step title="Add velt-inline-comments-section component">
        * Add `velt-inline-comments-section` component inside your container.
        * Add `target-element-id` property to the Velt Inline Comments component. This needs to match the id you set to the container. This binds the Inline Comments component with the desired container.

        ```jsx
        <velt-inline-comments-section
        		target-element-id="container-id"
        		shadow-dom="false"
        		dialog-variant="dialog-variant"
        		variant="inline-section-variant"
        		dark-mode="true"
        >
        </velt-inline-comments-section>
        ```
      </Step>

      <Step title="(Optional) Make it single threaded or multithreaded">
        * Default: `true`
        * By default inline comments are multithreaded.
        * You can make it single threaded by setting `multi-thread` attribute to `false`.

        ```html
          <velt-inline-comments-section multi-thread="false">
          </velt-inline-comments-section>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import { VeltProvider, VeltComments } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">

        <VeltComments />

        <section id="container-id" data-velt-target-inline-comment-element-id="container-id">
          <div>Your Article</div>

          <VeltInlineCommentsSection
            targetElementId="container-id"
            shadowDom={false}
            dialogVariant="dialog-variant"
            variant="inline-section-variant"
            darkMode={true}
          />
        </section>


      </VeltProvider>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Comment documentation</title>
    </head>
    <body>
      <velt-comments></velt-comments>
      <section id="container-id" data-velt-target-inline-comment-element-id="container-id">
        <div>Your Article</div>

        <velt-inline-comments-section
          target-element-id="container-id"
          shadow-dom="false"
          dialog-variant="dialog-variant"
          variant="inline-section-variant"
          dark-mode="true"
        >
        </velt-inline-comments-section>
      </section>

    </body>
  </html>
  ```
</RequestExample>


# Lottie Player Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/lottie-player-setup



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Lottie-Comment.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Warning>Make sure you turn React strict mode off.</Warning>

    <Steps>
      <Step title="Add Velt Components in your app">
        ### a. Add the `VeltComments` component in the root of your app

        Add the `VeltComments` component to enable the Comment feature in your app.

        Enable the follow attributes to be `true`:

        * `priority`: allows user to P0, P1, or P2 as priority. You can customize this list.
        * `autoCategorize`: allows AI to categorize comment as Question, Feedback, Bug, Other. You can customize this list.
        * `commentIndex`: shows a small icon showing index of the comment in order of creation.

        ```jsx
        <VeltComments priority={true} autoCategorize={true} commentIndex={true}/>
        ```

        ### b. Add the `VeltCommentTool` component wherever you want your render the comment tool.

        Note you can also provide your own button to this component.

        ```jsx
        <VeltCommentTool>
          <button slot="button">
            {/* your custom button (optional) */}
          </button>
        </VeltCommentTool>
        ```

        ### c. Place the `VeltCommentPlayerTimeline` component as a sibling to your video player.

        To show comment bubbles on your player seek bar, add the `<VeltCommentPlayerTimeline>` component as a sibling to your video player component.

        It will auto adjust to the same width as your video player.

        ```jsx
        <div>
          <YourVideoPlayer/>
          <VeltCommentPlayerTimeline/>
        </div>
        ```

        <Info>
          Right now we assume you have a maximum of one `<VeltCommentPlayerTimeline>` component and one sibling video player component per `documentID`
        </Info>

        <Warning>
          Ensure that the parent container of `<VeltCommentPlayerTimeline>` doesnt have CSS position value as 'static'.
        </Warning>

        ### d. Add the `<VeltCommentsSidebar>` component.

        (Optional) To embed the sidebar in your existing component, set `embedMode` prop as `true`.

        ```jsx
        <VeltCommentsSidebar embedMode={true}/>
        ```

        ### e. Add the `<VeltSidebarButton>` component.

        This will open or close the Comment Sidebar.
        Note you can also provide your own button to this component.

        ```jsx
        <VeltSidebarButton>
          <div className='sidebar-custom-btn'>
            {/* your custom button (optional) */}
          </div>
        </VeltSidebarButton>
        ```
      </Step>

      <Step title="Set the `totalMediaLength` on the `VeltCommentPlayerTimeline`">
        You can pass an integer to `totalMediaLength` using props to represent the total number of frames or seconds in the video:

        ```jsx
        <VeltCommentPlayerTimeline totalMediaLength={120} />
        ```

        Alternatively, you can set this using API method call. This is useful if you first need to grab the total frames from another method before setting it.

        ```jsx
        const commentElement = client.getCommentElement();
        commentElement.setTotalMediaLength(120);
        ```
      </Step>

      <Step title="Subscribe to when the Comment Tool is activated by the User.">
        Add an event handler on where you originally placed `<VeltCommentTool>` to handle `onCommentModeChange` events.

        Use this whenever the user clicks on the comment tool, to pause your player and set a new `Location` in the Velt SDK.

        Setting a `Location` in the Velt SDK ensures that the comments are tied to that particular media frame or timestamp.

        ```jsx

        <VeltCommentTool onCommentModeChange={(mode) => onCommentModeChange(mode)} />

        const onCommentModeChange = (mode) => {
            // mode will be `true` if the user has activated the comment tool
            // If the comment tool is active, pause the player and set the "location".
            if (mode) {
                // pause player
                // See step 8 below for details 
                setLocation()
            }
        });

        ```
      </Step>

      <Step title="Set Velt Location">
        You can pass in a key value pair object that represents the current state of your player. If you are using the `VeltCommentPlayerTimeline` component, ensure to set the current rounded frame or second in the special key `currentMediaPosition`.

        <Info>`currentMediaPosition` is a protected keyword that is used to arrange the comment bubbles on top of the video player timeline in the correct spot</Info>

        ```jsx
        const setLocation = (client) => {
            
            // set currentMediaPosition property on a Location object to represent the current frame
            let location = {
              currentMediaPosition : 120
            }
            //set the Location using the client
            client.setLocation(location)
            
        }
        ```
      </Step>

      <Step title="When the player is played, remove Velt `Location` to remove comments from the media.">
        Call `removeLocation()` when your player starts playing:

        ```jsx
        const removeLocation = () => {
            //remove the location, so the video player can play without comments appearing in frames
            client.removeLocation()
        }
        ```
      </Step>

      <Step title="Set your player's state when the user clicks on the comment.">
        Add the `onCommentClick` event handler on the `VeltCommentsSidebar` & `VeltCommentPlayerTimeline` components you added earlier.
        The event will give you back the `location` object that you had set earlier.

        You can use this object to update your player state and also update the SDK's `location` so that we can start rendering the comments associated with that `location`.

        ### a. Handle it on the `VeltCommentsSidebar`:

        ```jsx
        <VeltCommentsSidebar embedMode={true} onCommentClick={(event) => onCommentClick(event)} />

        const onCommentClick = (event) => {
            if (event) {
              // Get the location object from the event.
              const { location } = event;
              if (location) {
                  // Get the media position where the comment was added.
                  const { currentMediaPosition } = location;
                  if (currentMediaPosition) {
                      // Pause the player.

                      // Seek to the given comment media position.

                      // Set the Velt Location to the clicked comment location.
                      client.setLocation(location);
                  }
              }
          }
        }
        ```

        ### b. Handle it on the `VeltCommentPlayerTimeline`:

        ```jsx
        <VeltCommentPlayerTimeline onCommentClick={(event) => onTimelineCommentClick(event)} />

        const onTimelineCommentClick = (event) => {
          if (event) {
              // Get the location object from the event.
              const { location } = event;
              if (location) {
                  // Get the media position where the comment was added.
                  const { currentMediaPosition } = location;
                  if (currentMediaPosition) {
                      // Pause the player.

                      // Seek to the given comment media position.

                      // Set the Velt Location to the clicked comment location.
                      client.setLocation(location);
                  }
              }
          }
        }
        ```

        The clicked Comment data will be in the following format:

        | property          | type   | description                                                     |
        | ----------------- | ------ | --------------------------------------------------------------- |
        | `documentId`      | string | The document ID where the comment was added                     |
        | `location`        | object | The location where the comment was added                        |
        | `targetElementId` | string | The DOM ID of the target element on which the comment was added |
        | `context`         | Object | Any context data passed when the comment was added              |
      </Step>
    </Steps>

    # Additional Configurations

    ## Allow comments only on certain elements

    Provide a list of element DOM IDs where commenting should be allowed.
    Comments will be disabled for all other elements.

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.allowedElementIds(['lottiePlayerContainer']);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    <Steps>
      <Step title="Add Velt Components in your app">
        ### a. Add the `VeltComments` component in the root of your app

        Add the `VeltComments` component to enable the Comment feature in your app.

        Enable the follow attributes to be `true`:

        * `priority`: allows user to P0, P1, or P2 as priority. You can customize this list.
        * `auto-categorize`: allows AI to categorize comment as Question, Feedback, Bug, Other. You can customize this list.
        * `comment-index`: shows a small icon showing index of the comment in order of creation.

        ```jsx
        <velt-comments priority="true" auto-categorize="true" commentIndex="true"></velt-comments>
        ```

        ### b. Add the `velt-comment-tool` component wherever you want your render the comment tool.

        Note you can also provide your own button to this component.

        ```jsx
        <velt-comment-tool>
          <button slot="button">
            <!-- your custom button (optional) -->
          </button>
        </velt-comment-tool>
        ```

        ### c. Place the `velt-commen-player-timeline` component as a sibling to your video player.

        To show comment bubbles on your player seek bar, add the `<velt-comment-player-timeline>` component as a sibling to your video player component.

        It will auto adjust to the same width as your video player.

        ```jsx
        <div>
          <your-video-player></your-video-player>
          <velt-comment-player-timeline></velt-comment-player-timeline>
        </div>
        ```

        <Info>
          Right now we assume you have a maximum of one `<velt-comment-player-timeline>` component and one sibling video player component per `documentID`
        </Info>

        <Warning>
          Ensure that the parent container of `<velt-comment-player-timeline>` doesnt have CSS position value as 'static'.
        </Warning>

        ### d. Add the `<velt-comments-sidebar>` component.

        (Optional) To embed the sidebar in your existing component, set `embed-mode` prop as `true`.

        ```jsx
        <velt-comments-sidebar embed-mode="true"></velt-comments-sidebar>
        ```

        ### e. Add the `<velt-sidebar-button>` component.

        This will open or close the Comment Sidebar.
        Note you can also provide your own button to this component.

        ```jsx
        <velt-sidebar-button>
          <div class='sidebar-custom-btn'>
            <!-- your custom button (optional) -->
          </div>
        </velt-sidebar-button>
        ```
      </Step>

      <Step title="Set the `total-media-length` on the `velt-comment-player-timeline`">
        You can pass an integer to `total-media-length` using props to represent the total number of frames or seconds in the video:

        ```jsx
        <velt-comment-player-timeline total-media-length="120"></velt-comment-player-timeline total-media-length="120">
        ```

        Alternatively, you can set this using API method call. This is useful if you first need to grab the total frames from another method before setting it.

        ```jsx
        const commentElement = Velt.getCommentElement();
        commentElement.setTotalMediaLength(120);
        ```
      </Step>

      <Step title="Subscribe to when the Comment Tool is activated by the User.">
        Add an event handler to handle `onCommentModeChange` events.

        Use this whenever the user clicks on the comment tool, to pause your player and set a new `Location` in the Velt SDK.

        Setting a `Location` in the Velt SDK ensures that the comments are tied to that particular media frame or timestamp.

        ```jsx
        const commentElement = Velt.getCommentElement();
        let subscription = commentElement.onCommentModeChange().subscribe((mode) => {
            // mode will be `true` if the user has activated the comment tool
            // If the comment tool is active, pause the player and set the "location".
            if (mode) {
                // pause player
                // See step 8 below for details 
                setLocation()
            }
        });
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Step>

      <Step title="Set Velt Location">
        You can pass in a key value pair object that represents the current state of your player. If you are using the `velt-comment-player-timeline` component, ensure to set the current rounded frame or second in the special key `current-media-position`.

        <Info>`current-media-position` is a protected keyword that is used to arrange the comment bubbles on top of the video player timeline in the correct spot</Info>

        ```jsx
        const setLocation = (client) => {
            
            // set currentMediaPosition property on a Location object to represent the current frame
            let location = {
              currentMediaPosition : 120
            }
            //set the Location using the client
            Velt.setLocation(location)
            
        }
        ```
      </Step>

      <Step title="When the player is played, remove Velt `Location` to remove comments from the media.">
        Call `removeLocation()` when your player starts playing:

        ```jsx
        const removeLocation = () => {
            //remove the location, so the video player can play without comments appearing in frames
            Velt.removeLocation()
        }
        ```
      </Step>

      <Step title="Set your player's state when the user clicks on the comment.">
        Add the `onCommentClick` event handler on the `VeltCommentsSidebar` & `VeltCommentPlayerTimeline` components you added earlier.
        The event will give you back the `location` object that you had set earlier.
        You can use this object to update your player state and also update the SDK's `location` so that we can start rendering the comments associated with that `location`.

        ### a. Handle it on the `velt-comments-sidebar`:

        ```jsx
        <velt-comments-sidebar embed-mode="true"></velt-comments-sidebar>

        const onCommentClick = (event) => {
            if (event) {
              // Get the location object from the event.
              const { location } = event;
              if (location) {
                  // Get the media position where the comment was added.
                  const { currentMediaPosition } = location;
                  if (currentMediaPosition) {
                      // Pause the player.

                      // Seek to the given comment media position.

                      // Set the Velt Location to the clicked comment location.
                      client.setLocation(location);
                  }
              }
          }
        }

        const commentElement = Velt.getCommentElement();
        let subscription = commentElement.onSidebarButtonOnCommentDialogClick().subscribe((event) => onCommentClick(event));
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```

        ### b. Handle it on the `<velt-comment-player-timeline>`:

        ```html
        <velt-comment-player-timeline></velt-comment-player-timeline>
        <script>
            const playerTimelineElement = document.querySelector('velt-comment-player-timeline');
            if (playerTimelineElement) {
                playerTimelineElement.addEventListener('onCommentClick', (event) => {
                    console.log("onCommentClick: ", event.detail);
                });
            }
        </script>
        ```

        The clicked Comment data will be in the following format:

        | property          | type   | description                                                     |
        | ----------------- | ------ | --------------------------------------------------------------- |
        | `documentId`      | string | The document ID where the comment was added                     |
        | `location`        | object | The location where the comment was added                        |
        | `targetElementId` | string | The DOM ID of the target element on which the comment was added |
        | `context`         | Object | Any context data passed when the comment was added              |
      </Step>
    </Steps>

    # Additional Configurations

    ## Allow comments only on certain elements

    Provide a list of element DOM IDs where commenting should be allowed.
    Comments will be disabled for all other elements.

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.allowedElementIds(['lottiePlayerContainer']);
    ```
  </Tab>
</Tabs>


# Page Mode Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/page



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Page-Comments.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import CommentsSidebar Components">
        Import the Comments Sidebar Components.

        ```jsx
        import { 
          VeltProvider, 
          VeltCommentsSidebar, 
          VeltSidebarButton,
        } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add Comments and Sidebar components">
        Add the `VeltComments` and `VeltCommentsSidebar` components to the root of your app.

        ```jsx
        <div>
          <VeltComments />
          <VeltCommentsSidebar />
        </div>
        ```
      </Step>

      <Step title="Enable Page Mode">
        Set the `pageMode` attribute to true on the `VeltCommentsSidebar` component.

        ```js App.js
          <VeltCommentsSidebar pageMode={true}/>
        ```
      </Step>

      <Step title="Add Sidebar button component">
        Add the Sidebar button to toggle the sidebar.

        ```jsx
        <div className="toolbar">
          <VeltSidebarButton />
        </div>
        ```
      </Step>

      <Step title="Test Page Mode">
        Test Page Mode out by opening the sidebar. You should be able to leave Page Mode comments at the bottom of the Comments Sidebar.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/page-comment.png)
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Place the `<velt-comments-sidebar>` component">
        Place the `<velt-comments-sidebar>` component at the root of your app.

        ```html
        <velt-comments-sidebar></velt-comments-sidebar>
        ```
      </Step>

      <Step title="Enable Page Mode">
        Enable Page Mode by setting the `page-mode` attribute to `true` on the `<velt-comments-sidebar>` component.

        ```html
        <velt-comments-sidebar page-mode="true"></velt-comments-sidebar>
        ```
      </Step>

      <Step title="Place the `<velt-sidebar-button>` component">
        Place the `<velt-sidebar-button>` component wherever you want the toggle button to appear.

        ```html
        <velt-sidebar-button></velt-sidebar-button>
        ```
      </Step>

      <Step title="Test Page Mode">
        Test Page Mode out by opening the sidebar. You should be able to leave Page Mode comments at the bottom of the Comments Sidebar.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/page-comment.png)
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import { 
    VeltProvider, 
    VeltCommentsSidebar, 
    VeltSidebarButton,
  } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">
        <VeltComments /> {/* Add VeltComments to the root of your app provider */}
        <VeltCommentsSidebar pageMode={true} /> {/* Add VeltCommentsSidebar to the root of your app provider */}

        <div className="toolbar">
          <VeltSidebarButton /> {/* Add VeltCommentSideBarButton wherever you want it to appear */}
        </div>

      </VeltProvider>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Collaboration App</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
      <script>
        async function loadVelt() {
          await Velt.init("YOUR_VELT_API_KEY");
        }
      </script>
    </head>
    <body>
      <velt-comments></velt-comments> <!-- add to the root of your app-->
      <velt-comments-sidebar page-mode="true"></velt-comments-sidebar> <!-- add to the root of your app -->
      <div class="toolbar"> <!-- a component representing a toolbar-->
        <velt-sidebar-button></velt-sidebar-button> <!-- add wherever you want it to appear -->
      </div>
      

    </body>
  </html>
  ```
</RequestExample>


# Popover Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/popover



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Cell-Comment.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Comment components">
        Import the `VeltComments`, `VeltCommentTool`, and `VeltCommentBubble` components.

        ```js
        import {
          VeltProvider,
          VeltComments,
          VeltCommentTool,
          VeltCommentBubble
        } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add Comments component with Popover mode">
        Add the `VeltComments` component to the root of your app and mark the `popoverMode` property as `true`.

        This component is required to render comments in your app.

        Popover mode means that comments can be attached to specific target elements. The UX pattern is very similar to commenting in Google Sheets.

        ```js
        <VeltProvider apiKey="API_KEY">
          <VeltComments popoverMode={true}/>
        </VeltProvider>
        ```
      </Step>

      <Step title="Add the Comment Tool component">
        There are two patterns to add the `Comment Tool` component with `Popover` comments:

        * Add a `Comment Tool` next to each element you want to have `Popover` comments
        * Have a single `Comment Tool` and use it to pin a `Popover `comment on a particular element

        ### a. Comment Tool next to each element

        * Add a `Comment Tool` near each cell or element you want to comment on. For example, in a table you could add this tool to each cell and show it on hover or right click context menu.
        * Add unique DOM ID to each cell or element component.
        * Set the value of the `targetElementId` prop on Comment Tool as the same unique ID that you added to the cell or element component.
        * When users click on the `Comment Tool`, it will attach a `Comment` to the target element.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool.png)

        Once the `Comment` is added, you will notice a triangle on the top right corner of the element indicating that a `Comment` is present on this element.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/popover-comment-show.png)

        ```jsx
        <div className="table">
          <div className="cell" id="cell-id-1">
            <VeltCommentTool
              targetElementId="cell-id-1"
            />
          </div>
          <div className="cell" id="cell-id-2">
            <VeltCommentTool
              targetElementId="cell-id-2"
            />
          </div>
        </div>
        ```

        ### b. Single Comment Tool

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/freestyle-popover.gif)

        * Add a `Comment Tool` in a single location such as the navigation bar.
        * Add unique DOM ID and `data-velt-target-comment-element-id` attribute to each cell or element component. Both should have the same value.
        * When users click on the `Comment Tool` and click on the target element, it will attach a `Comment` to it.
        * You can now only add one `Comment Annotation` per element.

        <Warning>
          If you don't add the `data-velt-target-comment-element-id` attribute, you will be adding multiple `Comment Annotations` on the same element.
        </Warning>

        ```jsx
        <div>
          <VeltCommentTool />
          <div className="table">
            <div className="cell" id="cell-id-A" data-velt-target-comment-element-id="cell-id-A">

            </div>
            <div className="cell" id="cell-id-B" data-velt-target-comment-element-id="cell-id-B">

            </div>
          </div>
        </div>
        ```
      </Step>

      <Step title="Add the Comment Bubble component (optional)">
        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/popover-bubble.png)

        <Warning>
          Either use this or the default triangle component. Using both could cause some visual ux issues. You can turn off the triangle component by setting the `popoverTriangleComponent` prop to `false` in the `Velt Comments` component.
        </Warning>

        The Comment Bubble component:

        * Displays a count of replies for a comment thread
        * Must have the same `targetElementId` as its associated element
        * Can be configured to show either total replies or only unread replies
        * Can be placed anywhere in your UI

        **Props:** `commentCountType`: This prop allows you to decide which count to display.

        * `total`: Shows the total number of replies. (default)
        * `unread`: Shows the number of unread replies.

        ```js
        <div className="table">
          <div className="cell" id="cell-id-1">
            <VeltCommentTool
              targetElementId="cell-id-1"
            />
            <VeltCommentBubble
              commentCountType={"unread"}
              targetElementId="cell-id-1"
            />
          </div>
          <div className="cell" id="cell-id-2">
            <VeltCommentTool
              targetElementId="cell-id-2"
            />
            <VeltCommentBubble
              commentCountType={"unread"}
              targetElementId="cell-id-2"
            />
          </div>
        </div>
        ```
      </Step>

      <Step title="Remove Popover Mode Triangle (optional)">
        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/popover-comment-pin.png)

        You can choose to remove the triangle that appears in `Popover` mode.

        By default, the triangle is enabled.

        ```jsx
        <VeltComments popoverTriangleComponent={false}/>
        ```

        API Method:

        ```jsx
        const commentElement = client.getCommentElement();
        commentElement.enablePopoverTriangleComponent();
        commentElement.disablePopoverTriangleComponent();
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by opening the page with Velt components in your browser.

        Click on the `Comment Tool` and leave a comment on the target element.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/popover-comment-pin.png)
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Add Comment component with Popover mode">
        Add the comment component to your template. Try to put it as close to the root level of your `<body>`.

        This component is required to render comments in your app.

        ```html
        <body>
            <velt-comments popover-mode="true"></velt-comments>
        </body>
        ```
      </Step>

      <Step title="Add the Comment Tool component">
        There are two patterns to add the `Comment Tool` component with `Popover` comments:

        * Add a `Comment Tool` next to each element you want to have `Popover` comments
        * Have a single `Comment Tool` and use it to pin a `Popover `comment on a particular element

        ### Comment Tool next to each element

        In `Popover Mode`, you can add a `Comment Tool` near each cell or element you want to comment on.

        Add the `<velt-comment-tool>`component on each component where you want to enable commenting.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool.png)

        For example, in a table you could add this tool to each cell and show it on hover or right click context menu.

        You must specify a target element ID which binds the tool to that element. When users click on the `Comment Tool`, it will attach a `Comment` to the target element.

        Once the `Comment` is saved, you will notice a triangle on the top right corner of the element indicating that a `Comment` is present on this element.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/popover-comment-show.png)

        ```html
        <div class="table">
          <div class="cell" id="cell-id-1">
            <velt-comment-tool
              target-element-id="cell-id-1"
            ></velt-comment-tool>
          </div>
          <div class="cell" id="cell-id-2">
            <velt-comment-tool
              target-element-id="cell-id-2"
            ></velt-comment-tool>
          </div>
        </div>
        ```

        ### Single Comment Tool

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/freestyle-popover.gif)

        If you want to have a single `Comment Tool` in a single location such as the navigation bar, you can do so as well.

        To do this, add `data-velt-target-comment-element-id` as an attribute on each element you want to add comments on.

        Now, when you click on the `Comment Tool` and click on the target element, it will attach a `Popover` comment to the element.

        You will now notice that you can only add one `Comment Annotation` per element.

        <Warning>
          If you don't add the `data-velt-target-comment-element-id` attribute, you will be adding multiple `Comment Annotations` on the same element.
        </Warning>

        ```jsx
        <div>
          <velt-comment-tool></velt-comment-tool>
          <div class="table">
            <div class="cell" data-velt-target-comment-element-id="cell-id-A" id="cell-id-A">

            </div>
            <div class="cell" data-velt-target-comment-element-id="cell-id-B" id="cell-id-B">

            </div>
          </div>
        </div>
        ```
      </Step>

      <Step title="Add the Comment Bubble component (optional)">
        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/popover-bubble.png)

        This component accepts a target element ID & binds the comment annotation to it.

        It shows the total number of replies in the given comment annotation.
        You also have the option to choose whether to display the total number of replies or just the unread replies.

        This gives you a lot of flexibility as you can place this component anywhere and provides a more obvious affordance to your users.

        **Props:** `comment-count-type`: This prop allows you to decide which count to display.

        * `total`: Shows the total number of replies. (default)
        * `unread`: Shows the number of unread replies.

        ```html
        <div class="table">
          <div class="cell" id="cell-id-1">
            <velt-comment-tool
              target-element-id="cell-id-1"
            ></velt-comment-tool>
            <velt-comment-bubble
              comment-count-type="unread"
              target-element-id="cell-id-1"
            ><velt-comment-bubble>
          </div>
          <div class="cell" id="cell-id-2">
            <velt-comment-tool
              target-element-id="cell-id-2"
            ></velt-comment-tool>
            <velt-comment-bubble
              comment-count-type="unread"
              target-element-id="cell-id-2"
            ><velt-comment-bubble>
          </div>
        </div>
        ```
      </Step>

      <Step title="Remove Popover Mode Triangle (optional)">
        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/popover-comment-pin.png)

        You can choose to remove the triangle that appears in `Popover` mode.

        By default, the triangle is enabled.

        ```jsx
        <velt-comments popover-triangle-component="false"></velt-comments>
        ```

        API Method:

        ```jsx
        const commentElement = client.getCommentElement();
        commentElement.enablePopoverTriangleComponent();
        commentElement.disablePopoverTriangleComponent();
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by adding a comment.

        You should be able to leave a comment on the target element using the `Comment Tool`.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/popover-comment-pin.png)
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import {
    VeltProvider,
    VeltComments,
    VeltCommentTool,
    VeltCommentBubble
  } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">
        <VeltComments popoverMode={true} popoverTriangleComponent={true} />


        {/* Comment Tool next to each element */}
        <div className="table">
          <div className="cell" id="cell-id-1">
            <VeltCommentTool
              targetElementId="cell-id-1"
            />
          </div>
          <div className="cell" id="cell-id-2">
            <VeltCommentBubble
              targetElementId="cell-id-2"
            />
          </div>
        </div>

        {/* Single Comment Tool */}
        <div>
          <VeltCommentTool/>
          <div className="table">
            <div className="cell" data-velt-target-comment-element-id="cell-id-A" id="cell-id-A">

            </div>
            <div className="cell" data-velt-target-comment-element-id="cell-id-B" id="cell-id-B">

            </div>
          </div>
        </div>

      </VeltProvider>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Comment documentation</title>
    </head>
    <body>
      <velt-comments popover-triangle-component="true"></velt-comments>


      <!-- Comment Tool next to each element -->
      <div class="table">
        <div class="cell" id="cell-id-1">
          <velt-comment-tool
            target-element-id="cell-id-1"
          ></velt-comment-tool>
        </div>
        <div class="cell" id="cell-id-2">
          <velt-comment-bubble
            target-element-id="cell-id-2"
          ></velt-comment-bubble>
        </div>
      </div>


      <!-- Single Comment Tool -->
      <div>
          <velt-comment-tool></velt-comment-tool>
          <div class="table">
            <div class="cell" data-velt-target-comment-element-id="cell-id-A" id="cell-id-A">

            </div>
            <div class="cell" data-velt-target-comment-element-id="cell-id-B" id="cell-id-B">

            </div>
          </div>
      </div>


    </body>
  </html>
  ```
</RequestExample>


# Stream Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/stream



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/View-Stream-Comments.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Comment components">
        Import the `VeltComments` component.

        ```js
        import {
          VeltProvider,
          VeltComments,
        } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add `VeltComments` component with Stream mode">
        Add the `VeltComments` component inside a scrolling container. Make it a sibling to the element that contains the content you want to be commented.

        In the `VeltComments` component, mark the `streamMode` attribute as `true`.

        Also set the `streamViewContainerId` attribute to the id of the scrolling container.

        Stream mode renders all comment dialog boxes in a column on the right side similar to Google Docs. It works well with Text mode, which is enabled by default.

        Setting a reference to the container ID helps us position & scroll the comment stream as the user scrolls more robustly.

        ```js
        <VeltProvider apiKey="API_KEY">
          <div id="scrolling-container-id">
            //This element is scrollable
            <div className="target-content">
              //This element contains the content that you want to be commented.
            </div>
            <VeltComments
              streamMode={true}
              streamViewContainerId="scrolling-container-id"
            />
          </div>
        </VeltProvider>

        ```
      </Step>

      <Step title="Test Integration">
        Test it out by adding a comment.

        Select any text, a `Comment Tool` button will appear near the highlighted text.

        Click on it to add a comment and see the comment appear in the comment stream.
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Add the velt-comments component with Stream mode">
        Add the `<velt-comments>`  component inside a scrolling container. Make it a sibling to the element that contains the content you want to be commented.

        In the `<velt-comments>`  component, mark the `stream-mode` attribute as `true`.

        Also set the `stream-view-container-id` attribute to the id of the scrolling container.

        Stream mode renders all comment dialog boxes in a column on the right side similar to Google Docs. It works well with Text mode, which is enabled by default.

        Setting a reference to the container ID helps us position & scroll the comment stream as the user scrolls more robustly.

        ```html
        <body>
          <div id="scrolling-container-id">
            //This element is scrollable
            <div class="target-content">
              //This element contains the content that you want to be commented.
            </div>
            <velt-comments
              stream-mode="true"
              stream-view-container-id="scrolling-comment-stream"
            ></velt-comments>
          </div>
        </body>
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by adding a comment.

        Select any text, a `Comment Tool` button will appear near the highlighted text.

        Click on it to add a comment and see the comment appear in the comment stream.
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import { VeltProvider, VeltComments, VeltCommentTool } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">

        <div id="scrolling-container-id">

          //This element is scrollable
          <div className="target-content">
            //This element contains the content that you want to be commented.
          </div>

          <VeltComments
            streamMode={true}
            streamViewContainerId="scrolling-container-id"
          />

        </div>

      </VeltProvider>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Comment documentation</title>
    </head>
    <body>
      <div id="scrolling-container-id">
        //This element is scrollable
        <div class="target-content">
          //This element contains the content that you want to be commented.
        </div>
        <velt-comments
          stream-mode="true"
          stream-view-container-id="scrolling-comment-stream"
        ></velt-comments>
      </div>
    </body>
  </html>
  ```
</RequestExample>


# Text Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/text



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Text-Comments.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Comment components">
        Import the `VeltComments` component.

        ```js
        import { VeltProvider, VeltComments } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add Comment component with Text mode">
        Add the `VeltComments` component to the root of your app.

        This component is required to render comments in your app.

        Text mode is enabled by default. To disable it, set the `textMode` attribute to `false`.

        Text mode allows users to select any text and attach comments to it similar to Google Docs.

        ```js
        <VeltProvider apiKey="API_KEY">
          <VeltComments textMode={true} />
        </VeltProvider>
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by opening the page with Velt components in your browser.

        Select any text, a `Comment Tool` button will appear near the highlighted text. Click on it to add a comment.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/text-comment.png)
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Add Comment component with Text mode">
        Add the comment component to your template. Try to put it as close to the root level of your `<body>`.

        This component is required to render comments in your app. Text mode allows users to attach comments to highlighted text.

        ```html
        <body>
          <velt-comments text-mode="true"></velt-comments>
        </body>
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by opening the page with Velt components in your browser.

        Select any text, a `Comment Tool` button will appear near the highlighted text. Click on it to add a comment.

        ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/text-comment.png)
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import { VeltProvider, VeltComments } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">

        <VeltComments textMode={true} />

      </VeltProvider>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Comment documentation</title>
    </head>
    <body>
      <velt-comments text-mode="true"></velt-comments>
    </body>
  </html>
  ```
</RequestExample>


# Tiptap Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/tiptap



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/Add-Text-Comments.gif)

<Steps titleSize="h2">
  <Step title="Add Comment components">
    * Add the `Velt Comments` component to the root of your app.
    * This component is required to render comments in your app.
    * Set the `text mode` prop to `false` to hide the default text comment tool.

    <Tabs>
      <Tab title="React / Next.js">
        ```js
        <VeltProvider apiKey="API_KEY">
          <VeltComments textMode={false} />
        </VeltProvider>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <body>
          <velt-comments text-mode="false"></velt-comments>
        </body>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Install the Velt Tiptap extension">
    ```bash
    npm i @veltdev/tiptap-velt-comments
    ```
  </Step>

  <Step title="Import and add the extension to your Tiptap editor">
    <Tabs>
      <Tab title="React / Next.js">
        ```js
        import { TiptapVeltComments } from '@veltdev/tiptap-velt-comments';

        const editor = new Editor({
          extensions: [
            TiptapVeltComments,
            // ... other extensions
          ],
        });
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```js
        import { TiptapVeltComments } from '@veltdev/tiptap-velt-comments';

        const editor = new Editor({
          extensions: [
            TiptapVeltComments,
            // ... other extensions
          ],
        });
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Add a comment button to your Tiptap editor">
    * Add a button that appears in the context menu of your Tiptap editor when the user selects text. Refer to the [Tiptap documentation](https://tiptap.dev/docs/editor/getting-started/style-editor/custom-menus) to learn more about custom menus.
    * This button will be used to add a comment to the selected text.
  </Step>

  <Step title="Call `triggerAddComment` to add a comment">
    * Call this method to add a comment to selected text in the Tiptap editor. You can use this when the user clicks on the comment button in context menu or presses a keyboard shortcut.

    * Args:
      * `editor`: instance of the Tiptap editor.
      * `tiptapVeltCommentConfig`: optional object to set the Comment Annotation's [custom metadata](/async-collaboration/comments/customize-behavior#metadata).

    * Example:
      <Tabs>
        <Tab title="React / Next.js">
          ```js
          import { triggerAddComment } from '@veltdev/tiptap-velt-comments';

          const tiptapVeltCommentConfig = {
            context: {
              storyId: 'story-id',
              storyName: 'story-name',
            },
          };

          triggerAddComment(editor, tiptapVeltCommentConfig);
          ```
        </Tab>

        <Tab title="Other Frameworks">
          ```js
          import { triggerAddComment } from '@veltdev/tiptap-velt-comments';

          const tiptapVeltCommentConfig = {
            context: {
              storyId: 'story-id',
              storyName: 'story-name',
            },
          };

          triggerAddComment(editor, tiptapVeltCommentConfig);
          ```
        </Tab>
      </Tabs>
  </Step>

  <Step title="Render Comments in Tiptap Editor">
    * Get the comment data.
    * Render the comments in the tiptap editor.
      <Tabs>
        <Tab title="React / Next.js">
          ```js
          import { highlightComments } from '@veltdev/tiptap-velt-comments';

          const commentAnnotations = useCommentAnnotations();

          useEffect(() => {
            if (editor && commentAnnotations?.length) {
              highlightComments(editor, commentAnnotations);
            }
          }, [editor, commentAnnotations]);
          ```
        </Tab>

        <Tab title="Other Frameworks">
          ```js
          import { highlightComments } from '@veltdev/tiptap-velt-comments';

          const commentElement = Velt.getCommentElement();
          const commentAnnotations = commentElement.getCommentAnnotations();
          if (commentAnnotations) {
            highlightComments(editor, commentAnnotations);
          }
          ```
        </Tab>
      </Tabs>
  </Step>

  <Step title="Style the commented text">
    * You can style the commented text by adding a CSS class to the `velt-comment-text` element.
    * By using the `comment-available` attribute, you can apply styles only when the comment data has loaded.

    ```css
    velt-comment-text[comment-available="true"] {
      background-color: #ffff00;
    }
    ```
  </Step>
</Steps>


# Custom Video Player Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/video-player-setup/custom-video-player-setup

Use this guide to add collaboration into your own custom video player.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/custom-video-player.gif)

<Steps>
  <Step title="Set up Velt Components in your app">
    You will be using the following components:

    * `Velt Comments`: Renders comments on the DOM.
    * `Velt Comment Tool`: Enables or disables adding comments.
    * `Velt Reaction Tool`: Enables or disables adding reactions.
    * `Velt Comment Player Timeline`: Adds comments bubble over your player seek bar.
    * `Velt Comments Sidebar`: Adds a sidebar that shows all comments. Users can also search, filter & navigate to the comments from here.
    * `Velt Sidebar Button`: Toggles the sidebar on/off.

    ### Add the `Velt Comments` component in the root of your app

    Add the `Velt Comments` component to the root of your app.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltComments />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comments></velt-comments>
        ```
      </Tab>
    </Tabs>

    ### Add the `Velt Comment Tool` component wherever you want your render the comment tool.

    Note you can also provide your own button to this component.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentTool>
          <button>
            {/* your custom button (optional) */}
          </button>
        </VeltCommentTool>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <velt-comment-tool>
          <button>
            <!-- your custom button (optional) -->
          </button>
        </velt-comment-tool>
        ```
      </Tab>
    </Tabs>

    ### Add the `Velt Reaction Tool` component wherever you want your render the reaction tool.

    * Provide the video player ID on which you want the reactions to be added.
    * Add an event handler to handle `onReactionToolClick` events.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltReactionTool videoPlayerId={videoPlayerId}
          onReactionToolClick={() => onReactionToolClick()}>
        </VeltReactionTool>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <div>
          <velt-reaction-tool video-player-id="videoPlayerId"></velt-reaction-tool>
        </div>
        ```

        ```js
        const reactionToolTag = document.querySelector('velt-reaction-tool');
        reactionToolTag.addEventListener('onReactionToolClick', (event) => {
          console.log('reaction tool clicked', event.detail);
        });
        ```
      </Tab>
    </Tabs>

    ### Place the `Velt Comment Player Timeline` component as a sibling to your video player.

    * To show comment bubbles on your player seek bar, add the `Velt Comment Player Timeline` component as a sibling to your video player component.
    * It will auto adjust to the same width as your video player.

    <Info>
      Right now we assume you have a maximum of one `velt comment player timeline` component and one sibling video player component per `documentID`
    </Info>

    <Warning>
      Ensure that the parent container of `velt comment player timeline` doesnt have CSS position value as 'static'.
    </Warning>

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <div>
          <YourVideoPlayer id="videoPlayerId"/>
          <VeltCommentPlayerTimeline videoPlayerId="videoPlayerId"/>
        </div>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <div>
          <your-video-player id="videoPlayerId"></your-video-player>
          <velt-comment-player-timeline video-player-id="videoPlayerId"></velt-comment-player-timeline>
        </div>
        ```
      </Tab>
    </Tabs>

    ### Add `id` to the video player or its parent element.

    * If you don't have access to the raw `<video>` player, you can add an `id` to the parent element of the video player.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <div id="videoPlayerId">
          <YourVideoPlayer />
          <VeltCommentPlayerTimeline videoPlayerId="videoPlayerId"/>
        </div>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <div id="videoPlayerId">
          <your-video-player></your-video-player>
          <velt-comment-player-timeline video-player-id="videoPlayerId"></velt-comment-player-timeline>
        </div>
        ```
      </Tab>
    </Tabs>

    ### Add the `Velt Comments Sidebar` component.

    (Optional) To embed the sidebar in your existing component, set `embedMode` prop as `true`.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentsSidebar embedMode={true}/>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <velt-comments-sidebar embed-mode="true"></velt-comments-sidebar>
        ```
      </Tab>
    </Tabs>

    ### Add the `Velt Sidebar Button` component.

    This will open or close the Comment Sidebar.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltSidebarButton>
        </VeltSidebarButton>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <velt-sidebar-button>
        </velt-sidebar-button>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Set the `total media length` on the `Velt Comment Player Timeline`">
    You can pass an integer to `total media length` using props to represent the total number of frames or seconds in the video:

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentPlayerTimeline videoPlayerId="videoPlayerId" totalMediaLength={120} />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <velt-comment-player-timeline video-player-id="videoPlayerId" total-media-length="120"></velt-comment-player-timeline>
        ```
      </Tab>
    </Tabs>

    Alternatively, you can set this using API method call.
    This is useful if you first need to grab the total frames from another method before setting it.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        const commentElement = client.getCommentElement();
        commentElement.setTotalMediaLength(120);
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        const commentElement = Velt.getCommentElement();
        commentElement.setTotalMediaLength(120);
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Detect Comment Tool Activation and Set Media Location">
    * Detect when the user activates the comment tool by adding an event handler to the `onCommentModeChange` event.
    * Pause your player and set a new `Location` in the Velt SDK.
    * This ensures that the comments are tied to that particular media frame or timestamp.
    * You can pass in a key value pair object that represents the current state of your player.

    If you are using the `Velt Comment Player Timeline` component, ensure to set the current rounded frame or second in the special key `currentMediaPosition`.
    <Info>`currentMediaPosition` is a protected keyword that is used to arrange the comment bubbles on top of the video player timeline in the correct spot</Info>

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentTool onCommentModeChange={(mode) => onCommentModeChange(mode)} />

        const onCommentModeChange = (mode) => {
            // mode will be `true` if the user has activated the comment tool
            // If the comment tool is active, pause the player and set the "location".
            if (mode) {
                // pause player
                setLocation()
            }
        });

        const setLocation = (client) => {
            
            // set currentMediaPosition property on a Location object to represent the current frame
            let location = {
              currentMediaPosition : 120,
              videoPlayerId : "videoPlayerId"
            }
            //set the Location using the client
            client.setLocation(location)
            
        }
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        const commentElement = Velt.getCommentElement();
        let subscription = commentElement.onCommentModeChange().subscribe((mode) => {
            // mode will be `true` if the user has activated the comment tool
            // If the comment tool is active, pause the player and set the "location".
            if (mode) {
                // pause player
                setLocation()
            }
        });

        const setLocation = (client) => {
          // set currentMediaPosition property on a Location object to represent the current frame
          let location = {
            currentMediaPosition : 120,
            videoPlayerId : "videoPlayerId"
          }
          //set the Location using the client
          Velt.setLocation(location)
        }
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Detect Reaction Tool Activation and Set Media Location">
    * Detect when the user activates the reaction tool by adding an event handler to the `onReactionToolClick` event.
    * Pause your player and set a new `Location` in the Velt SDK.
    * This ensures that the reactions are tied to that particular media frame or timestamp.
    * You can pass in a key value pair object that represents the current state of your player.
      If you are using the `Velt Comment Player Timeline` component, ensure to set the current rounded frame or second in the special key `currentMediaPosition`.
      <Info>`currentMediaPosition` is a protected keyword that is used to arrange the comment bubbles on top of the video player timeline in the correct spot</Info>

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx

        <VeltReactionTool videoPlayerId={videoPlayerId}
          onReactionToolClick={() => onReactionToolClick()}>
        </VeltReactionTool>

        const onReactionToolClick = () => {
            // pause player
            setLocation()
        });

        const setLocation = () => {
            // set currentMediaPosition property on a Location object to represent the current frame
            let location = {
              currentMediaPosition : 120,
              videoPlayerId : "videoPlayerId"
            }
            //set the Location using the client
            client.setLocation(location)
            
        }
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <velt-reaction-tool video-player-id="videoPlayerId"></velt-reaction-tool>

        const reactionToolTag = document.querySelector('velt-reaction-tool');
        reactionToolTag.addEventListener('onReactionToolClick', (event) => {
            console.log('reaction tool clicked', event.detail);
        });
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="When the player is played, remove Velt `Location` to remove comments from the media.">
    Call `removeLocation()` when your player starts playing:

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        const removeLocation = () => {
            //remove the location, so the video player can play without comments appearing in frames
            client.removeLocation()
        }
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        const removeLocation = () => {
            //remove the location, so the video player can play without comments appearing in frames
            Velt.removeLocation()
        }
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Navigate to the comment's location in the player from the Sidebar or Timeline.">
    Add the `onCommentClick` event handler on the `Velt Comments Sidebar` & `Velt Comment Player Timeline` components you added earlier.
    The event will give you back the `location` object that you had set on the comment.

    Use this object to:

    * update your player state
    * update the SDK's `location` so the comments associated with that `location` are rendered.

    ### Handle click on the `Velt Comments Sidebar`:

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentsSidebar embedMode={true} onCommentClick={(event) => onCommentClick(event)} />

        const onCommentClick = (event) => {
            if (event) {
              // Get the location object from the event.
              const { location } = event;
              if (location) {
                  // Get the media position where the comment was added.
                  const { currentMediaPosition } = location;
                  if (currentMediaPosition) {
                      // Pause the player.

                      // Seek to the given comment media position.

                      // Set the Velt Location to the clicked comment location.
                      client.setLocation(location);
                  }
              }
          }
        }
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        const commentElement = document.querySelector('velt-comments-sidebar');
        commentElement.addEventListener('onCommentClick', onCommentClick);

        // event handler for when a comment is clicked on 
        const onCommentClick = (event) => {
          if (event) {
            // Get the location object from the event.
            const { location } = event;
            if (location) {
              // Get the media position where the comment was added.
              const { currentMediaPosition } = location;
              if (currentMediaPosition) {
                // Pause the player.

                // Seek to the given comment media position.

                // Set the Velt Location to the clicked comment location.
                client.setLocation(location);
              }
            }
          }
        };

        ```
      </Tab>
    </Tabs>

    ### Handle click on the `Velt Comment Player Timeline`:

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentPlayerTimeline videoPlayerId="videoPlayerId" onCommentClick={(event) => onTimelineCommentClick(event)} />

        const onTimelineCommentClick = (event) => {
          if (event) {
              // Get the location object from the event.
              const { location } = event;
              if (location) {
                  // Get the media position where the comment was added.
                  const { currentMediaPosition } = location;
                  if (currentMediaPosition) {
                      // Pause the player.

                      // Seek to the given comment media position.

                      // Set the Velt Location to the clicked comment location.
                      client.setLocation(location);
                  }
              }
          }
        }
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```js
        const playerTimelineElement = document.querySelector('velt-comment-player-timeline');
        if (playerTimelineElement) {
          playerTimelineElement.addEventListener('onCommentClick', (event) => {
            console.log("onCommentClick: ", event.detail);
          });
        }
        ```
      </Tab>
    </Tabs>

    The clicked Comment data will be in the following format:

    | property          | type   | description                                                     |
    | ----------------- | ------ | --------------------------------------------------------------- |
    | `documentId`      | string | The document ID where the comment was added                     |
    | `location`        | object | The location where the comment was added                        |
    | `targetElementId` | string | The DOM ID of the target element on which the comment was added |
    | `context`         | Object | Any context data passed when the comment was added              |
  </Step>
</Steps>

{/* # Additional Configurations

  ## Allow comments only on certain elements

  Provide a list of element DOM IDs where commenting should be allowed.
  Comments will be disabled for all other elements.

  ```jsx
  const commentElement = client.getCommentElement();
  commentElement.allowedElementIds(['custom-video-player-container']);
  ``` */}


# Prebuilt Video Player Setup
Source: https://docs.velt.dev/async-collaboration/comments/setup/video-player-setup/video-player-setup

Use this guide if you want to set up a prebuilt video player from our SDK with collaborative features built in.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/video-comment.gif)

<Tabs>
  <Tab title="React / Next.js">
    <Steps>
      <Step title="Import VeltVideoPlayer component">
        Import the `VeltVideoPlayer` component.

        ```jsx
        import { VeltVideoPlayer} from '@veltdev/react'
        ```
      </Step>

      <Step title="Add src to VeltVideoPlayer">
        Add your video src URL to the `src` attribute of the `VeltVideoPlayer` component.

        There are a few other properties:

        * `darkMode` - boolean to enable dark mode
        * `sync` - boolean to enable sync mode

        ```jsx
        <VeltVideoPlayer 
          src={"https://firebasestorage.googleapis.com/v0/b/snippyly.appspot.com/o/external%2Fvelt.mp4?alt=media&token=d8af2697-c797-4610-b886-ca510b231097"} 
          darkMode={false}
          sync={true}
        />
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    Add your video src URL to the `src` attribute of the `<velt-video-player>` component.

    There are a few other properties:

    * `dark-mode` - boolean to enable dark mode
    * `sync` - boolean to enable sync mode

    ```html
    <!-- dark-mode="false" - to disable dark mode -->
    <!-- sync="true" - to enable sync mode -->
    <velt-video-player 
      src="http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4"
      dark-mode="false"
      sync="true"
    >
    </velt-video-player>

    ```
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import {
    VeltVideoPlayer
  } from '@veltdev/react';

  export default function App() {

    return (
      <div>
        <VeltVideoPlayer 
          src={"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4"} 
          darkMode={false}
          sync={true}
        />
      </div>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Video Player documentation</title>
    </head>
    <body>
      <!-- dark-mode="false" - to disable dark mode -->
      <!-- sync="true" - to enable sync mode -->
      <velt-video-player 
          src="http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4"
          dark-mode="false"
          sync="true"
      >
      </velt-video-player>
    </body>
  </html>

  ```
</RequestExample>


# Comment Standalone Composer
Source: https://docs.velt.dev/async-collaboration/comments/standalone-components/comment-composer/overview



The Comment Standalone Composer enables you to add comments anywhere in your application. It's designed to work seamlessly with other Velt components and APIs:

* [Comment Data APIs](/async-collaboration/comments/customize-behavior#getcommentannotations): Fetch and submit comment data.
* [Comment Thread](/async-collaboration/comments/standalone-components/comment-thread/overview): Render comment threads using fetched data.
* [Comment Pin](/async-collaboration/comments/standalone-components/comment-pin/overview): Display and position comment pins based on fetched data.

By combining these components, you can create custom comment interfaces such as sidebars, overlays, popovers, or inline comments. This approach offers greater flexibility and control over your comment system's design and functionality.


# Setup
Source: https://docs.velt.dev/async-collaboration/comments/standalone-components/comment-composer/setup



## Add Comment Composer Component

The Comment Composer component allows you to add a comment composer anywhere in your app. You can:

* Display it on a hotkey press
* Embed it in your custom sidebar
* Place it below an article
* Overlay it on an image
* and more...

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentComposer />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-composer></velt-comment-composer>
    ```
  </Tab>
</Tabs>


# Comment Pin
Source: https://docs.velt.dev/async-collaboration/comments/standalone-components/comment-pin/overview



The Comment Pin component allows you to manually set the position of Comment Annotations.
This feature is particularly useful for complex UIs where you need precise control over the placement of Comment Pins.

Implementing this feature involves:

**1. Adding comment:** You have two options for adding comments with custom positioning:

* **a. Velt-Managed Click Events:** Use the `onCommentAdd` method to incorporate custom metadata into the comment object. This metadata will be used later to position the Comment Pin. [Learn more](/async-collaboration/comments/customize-behavior#event-subscription#oncommentadd-event-data-schema)

* **b. Custom Click Event Handling:** Handle click events on your canvas and use the `addManualComment` method to create a comment with custom metadata. [Learn more](/async-collaboration/comments/customize-behavior#addmanualcomment)

**2. Retrieving comments data:** Use the `getAllCommentAnnotations` method to fetch all Comment Annotations with their associated custom metadata.
For React developers, we provide hooks for easier integration. [Learn more](/async-collaboration/comments/customize-behavior#getcommentannotations)

**3. Rendering comments Pins:**
Iterate through the retrieved annotations and render the Comment Pin component, using the custom metadata to set each pin's position.


# Setup
Source: https://docs.velt.dev/async-collaboration/comments/standalone-components/comment-pin/setup



<Steps titleSize="h2">
  <Step title="Add custom metadata when comment is added">
    You have two options for adding comments with custom positioning metadata:

    **Option A: Velt-Managed Click Events**

    * Use the `onCommentAdd` prop of the VeltComments component to add custom metadata when a comment is added.
    * You need to set the mandatory `commentType: 'manual'` property to the metadata object.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltComments onCommentAdd={(event) => yourMethod(event)} />

        const yourMethod = (event) => {
          event?.addContext({ postion: {x: 200, y: 100}, commentType: 'manual'});
        }
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```js
        const veltCommentsTag = document.querySelector('velt-comments');

        veltCommentsTag?.addEventListener('onCommentAdd', (event) => {
          console.log('*** onCommentAdd ***');
          console.log(event.detail);
          event.detail?.addContext({ postion: {x: 200, y: 100}, commentType: 'manual'});
        });

        ```
      </Tab>
    </Tabs>

    **Option B: Custom Click Event Handling**

    * Handle click events on your canvas and use the `addManualComment` method to create a comment with custom metadata.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        const context = {
          postion: {x: 200, y: 100},
        };
        const commentElement = useCommentUtils();
        commentElement.addManualComment({ context });
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```js
        const context = {
          postion: {x: 200, y: 100},
        };
        const commentElement = Velt.getCommentElement();
        commentElement.addManualComment({ context: context});
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Retrieve all Comment Annotations">
    Retrieve all `Comment Annotations` using the `useCommentAnnotations()` hook.

    To learn more about the `useCommentAnnotations()` hook, [read here](/api-reference/sdk/api/react-hooks#usegetcommentannotations).

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        let commentAnnotations = useCommentAnnotations()
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```js
        const commentElement = Velt.getCommentElement();
        let subscription = commentElement.getAllCommentAnnotations().subscribe((commentAnnotations) => {
          // console.log(commentAnnotations);
        });
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Render the Velt Comment Pin component and set the position">
    Add the `Velt Comment Pin` component and pass in the `Comment Annotation Id`.
    Now retrieve the `context` to retrieve the custom metadata you set earlier and use it to set the position of the `Comment Pin`.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx

        let commentAnnotations = useCommentAnnotations()

        return (
        <div className='comments-container'>
          {
            commentAnnotations.map((commentAnnotation) => {
              return (
                <div key={commentAnnotation.annotationId} style={{
                  position: 'absolute',
                  left: commentAnnotation.context.position.x + dragPosition.x,
                  top: commentAnnotation.context.position.y + dragPosition.y,
                  transform: 'translate(0%, -100%)'
                }}>
                  <VeltCommentPin annotationId={commentAnnotation.annotationId}></VeltCommentPin>
                </div>
              )
            })
          }
        </div>
        )
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```js
        const commentElement = Velt.getCommentElement();

        let subscription = commentElement.getAllCommentAnnotations().subscribe((commentAnnotations) => {
          renderCommentAnnotations(commentAnnotations);
        });

        const commentsContainer = document.getElementById('comments-container');

        function renderCommentAnnotations(commentAnnotations) {
          commentAnnotations.forEach((commentAnnotation) => {
            if (!document.getElementById(`comment-pin-container-${commentAnnotation.annotationId}`)) {
              // Add Comment Pin if it doesn't exist
              const { x, y } = commentAnnotation.context.position;
              var commentPinContainer = document.createElement('div');
              commentPinContainer.className = 'comment-pin-container';
              commentPinContainer.id = `comment-pin-container-${commentAnnotation.annotationId}`;
              commentPinContainer.style.left = x + 'px';
              commentPinContainer.style.top = y + 'px';
              commentPinContainer.innerHTML = `<velt-comment-pin annotation-id="${commentAnnotation?.annotationId}"></velt-comment-pin>`;
              commentsContainer?.appendChild(commentPinContainer);
            }
          });
        }

        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>

<RequestExample>
  ```jsx React / Next.js
  import { VeltCommentPin, useCommentAnnotations } from '@veltdev/react';

  export default function YourDocument() {

    const yourMethod = (event) => {
      event?.addContext({ postion: {x: 200, y: 100}, commentType: 'manual'});
    }

    let commentAnnotations = useCommentAnnotations()

    return (

      <VeltComments onCommentAdd={(event) => yourMethod(event)} />

      <div className='comments-container'>
        {
          commentAnnotations.map((commentAnnotation) => {
            return (
              <div key={commentAnnotation.annotationId} style={{
                position: 'absolute',
                left: commentAnnotation.context.position.x + dragPosition.x,
                top: commentAnnotation.context.position.y + dragPosition.y,
                transform: 'translate(0%, -100%)'
              }}>
                <VeltCommentPin annotationId={commentAnnotation.annotationId}></VeltCommentPin>
              </div>
            )
          })
        }
      </div>
    )
  }
  ```

  ```html HTML
  <script>
  const veltCommentsTag = document.querySelector('velt-comments');

  veltCommentsTag?.addEventListener('onCommentAdd', (event) => {
    console.log('*** onCommentAdd ***');
    console.log(event.detail);
    event.detail?.addContext({ postion: {x: 200, y: 100}, commentType: 'manual'});
  });

  const commentElement = Velt.getCommentElement();

  let subscription = commentElement.getAllCommentAnnotations().subscribe((commentAnnotations) => {
    renderCommentAnnotations(commentAnnotations);
  });

  const commentsContainer = document.getElementById('comments-container');

  function renderCommentAnnotations(commentAnnotations) {
    commentAnnotations.forEach((commentAnnotation) => {
      if (!document.getElementById(`comment-pin-container-${commentAnnotation.annotationId}`)) {
        // Add Comment Pin if it doesn't exist
        const { x, y } = commentAnnotation.context.position;
        var commentPinContainer = document.createElement('div');
        commentPinContainer.className = 'comment-pin-container';
        commentPinContainer.id = `comment-pin-container-${commentAnnotation.annotationId}`;
        commentPinContainer.style.left = x + 'px';
        commentPinContainer.style.top = y + 'px';
        commentPinContainer.innerHTML = `<velt-comment-pin annotation-id="${commentAnnotation?.annotationId}"></velt-comment-pin>`;
        commentsContainer?.appendChild(commentPinContainer);
      }
    });
  }

  </script>
  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/async-collaboration/comments/standalone-components/comment-thread/customize-behavior



## 1. `onCommentClick` Callback

* When the user clicks on the comment thread, you can listen to it using this method.
* Example: Use this to fetch the context and make the necessary app state changes to navigate to the comment.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentThread
        annotationId="COMMENT_ANNOTATION_ID"
        onCommentClick={(data) => handleOnCommentClick(data)}
    />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comment-thread annotation-id="COMMENT_ANNOTATION_ID"></velt-comment-thread>
    <script>
        const commentThreadTag = document.querySelector("velt-comment-thread");
        commentThreadTag.addEventListener('onCommentClick', (event) => {
            console.log('onCommentClick', event.detail);
        });
    </script>
    ```
  </Tab>
</Tabs>

## 2. Pass Comment Annotation Object

* You can pass a Comment Annotation object directly to render the comment thread
* When using annotations from other documents:
  * Comments will be read-only
  * Reactions and recordings will not be rendered
* This enables creating Kanban boards by fetching comment annotations from multiple documents using our REST APIs

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentThread annotation={COMMENT_ANNOTATION_OBJECT} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-thread annotation="STRINGIFIED_COMMENT_ANNOTATION_OBJECT"></velt-comment-thread>
    ```
  </Tab>
</Tabs>


# Standalone Comment Thread
Source: https://docs.velt.dev/async-collaboration/comments/standalone-components/comment-thread/overview



* You can use the Standalone Comment Thread component to build things such as:
  * a kanban board
  * your own version of the `Comments Sidebar` component

* This component does not add any additional functionality. It is just used to render existing comment data.

* This is a thin wrapper around the [Comment Dialog component](/ui-customization/features/async/comments/comment-dialog/overview).

* Get the Comment Annotations data using the APIs.

* Use this component to render the Comment Annotations data.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comment-thread" allow="camera; microphone" className="w-full" height="700px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comment-thread)


# Setup
Source: https://docs.velt.dev/async-collaboration/comments/standalone-components/comment-thread/setup



<Steps titleSize="h2">
  <Step title="Retrieve Comment Annotations">
    * Retrieve all comment annotations data.
    * [Learn more](/async-collaboration/comments/customize-behavior#getcommentannotations).

    <Tabs>
      <Tab title="React / Next.js">
        Using Hooks:

        ```jsx
        let commentAnnotations = useCommentAnnotations()
        ```

        Using API:

        ```js
        const commentElement = client.getCommentElement();
        let subscription = commentElement.getAllCommentAnnotations().subscribe((commentAnnotations) => {
          // console.log(commentAnnotations);
        });
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```js
        const commentElement = Velt.getCommentElement();
        let subscription = commentElement.getAllCommentAnnotations().subscribe((commentAnnotations) => {
          // console.log(commentAnnotations);
        });
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Add the Velt Comment Thread component">
    * Iterate over the `Comment Annotations` array and add the `Velt Comment Thread` component.
    * Pass the `annotation Id` prop to set the specific Comment Thread data.

    Here's an improved example:

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx

        let commentAnnotations = useCommentAnnotations()

        return (
          <div>
            {commentAnnotations.map((x,i) => <VeltCommentThread key={i} annotationId={x.annotationId}/>)}
          </div>
        )
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <!-- 
          If you are using pure html, inject <velt-comment-thread annotation-id="ANNOTATION_ID"></velt-comment-thread>
          In other frameworks, you can loop over the comments inside the template itself
        -->
        <velt-comment-thread annotation-id="ANNOTATION_ID"></velt-comment-thread>
        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>

<RequestExample>
  ```jsx React / Next.js
  import { VeltCommentThread, useCommentAnnotations } from '@veltdev/react';

  export default function YourDocument() {

    let commentAnnotations = useCommentAnnotations()

    return (
      <div>
        {commentAnnotations.map((x,i) => <VeltCommentThread key={i} annotationId={x.annotationId}/>)}
      </div>
    )
  }
  ```

  ```js Other Frameworks
  const commentElement = client.getCommentElement();
  let subscription = commentElement.getAllCommentAnnotations().subscribe((comments) => {
      // If you are using pure html, inject <velt-comment-thread annotation-id="ANNOTATION_ID"></velt-comment-thread>
      // In other frameworks, you can loop over the comments inside the template itself
  });

  //To unsubscribe from the subscription:
  subscription?.unsubscribe()
  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/async-collaboration/notifications/customize-behavior



## getNotificationsData

* Get the notifications data for the current user.
* Returns [`Notification[]`](/api-reference/sdk/models/data-models#notification)

<Tabs>
  <Tab title="React / Next.js with Hooks">
    ```jsx
    const notificationData = useNotificationsData();
    ```
  </Tab>

  <Tab title="React / Next.js">
    ```jsx
    const notificationElement = client.getNotificationElement();

    let subscription = notificationElement.getNotificationsData().subscribe((notifications) => {
        console.log("Notifications: ", notifications)
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const notificationElement = Velt.getNotificationElement();

    let subscription = notificationElement.getNotificationsData().subscribe((notifications) => {
        console.log("Notifications: ", notifications)
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

## onNotificationClick

* The `onNotificationClick` event fires when a notification is clicked in the Notifications Panel.
* It returns a [`Notification`](/api-reference/sdk/models/data-models#notification) object with details about the clicked notification.
* Listen to this event via either the Notification Tool or the Notification Panel, but not both.
* Use this event to implement custom actions in response to notification clicks, such as navigating to a specific part of the app.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltNotificationsTool onNotificationClick={(notification) => onNotificationClickEvent(notification)} />

    <VeltNotificationsPanel onNotificationClick={(notification) => onNotificationClickEvent(notification)} />

    const onNotificationClickEvent = (notification) => {
    	console.log('onNotificationClick: ', notification);
    }
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
      const notificationsTool = document.querySelector('velt-notifications-tool');
    	notificationsTool?.addEventListener('onNotificationClick', (event) => {
    	  console.log('onNotificationClick from Tool: ', event.detail);
      });

      const notificationsPanel = document.querySelector('velt-notifications-panel');
    	notificationsPanel?.addEventListener('onNotificationClick', (event) => {
    	  console.log('onNotificationClick from Panel: ', event.detail);
      });
    ```
  </Tab>
</Tabs>

## setTabConfig

* Using this config, you can customize the name of the tabs or disable them altogether.
* By default, all the three tabs are enabled.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    You can set it on Notifications Tool:

    ```jsx
    <VeltNotificationsTool tabConfig={{
        "forYou": {
            name: 'Custom For You',
            enable: true,
        },
        "documents": {
            name: 'Custom Document',
            enable: false,
        },
        "all": {
            name: 'Custom All',
            enable: true,
        },
    }
    } />
    ```

    You can alternatively set it on Notifications Panel if you have directly embedded it:

    ```jsx
    <VeltNotificationsPanel tabConfig={{
        "forYou": {
            name: 'Custom For You',
            enable: true,
        },
        "documents": {
            name: 'Custom Document',
            enable: false,
        },
        "all": {
            name: 'Custom All',
            enable: true,
        },
    }
    } />
    ```

    **Using APIs:**

    ```jsx
    const notificationElement = useNotificationUtils();

    ​​const tabConfig = {
    	"forYou": {
    		name: 'Custom For You',
    		enable: true,
    	},
    	"documents": {
    		name: 'Custom Document',
    		enable: false,
    	},
    	"all": {
    		name: 'Custom All',
    		enable: true,
    	},
    };

    notificationElement.setTabConfig(tabConfig);
    ```
  </Tab>

  <Tab title="React / Next.js">
    You can set it on Notifications Tool:

    ```jsx
    <VeltNotificationsTool tabConfig={{
        "forYou": {
            name: 'Custom For You',
            enable: true,
        },
        "documents": {
            name: 'Custom Document',
            enable: false,
        },
        "all": {
            name: 'Custom All',
            enable: true,
        },
    }
    } />
    ```

    You can alternatively set it on Notifications Panel if you have directly embedded it:

    ```jsx
    <VeltNotificationsPanel tabConfig={{
        "forYou": {
            name: 'Custom For You',
            enable: true,
        },
        "documents": {
            name: 'Custom Document',
            enable: false,
        },
        "all": {
            name: 'Custom All',
            enable: true,
        },
    }
    } />
    ```

    **Using APIs:**

    ```jsx
    const notificationElement = client.getNotificationElement();

    ​​const tabConfig = {
    	"forYou": {
    		name: 'Custom For You',
    		enable: true,
    	},
    	"documents": {
    		name: 'Custom Document',
    		enable: false,
    	},
    	"all": {
    		name: 'Custom All',
    		enable: true,
    	},
    };

    notificationElement.setTabConfig(tabConfig);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const tabConfig = {
    	"forYou": {
    		name: 'Custom For You',
    		enable: true,
    	},
    	"documents": {
    		name: 'Custom Document',
    		enable: false,
    	},
    	"all": {
    		name: 'Custom All',
    		enable: true,
    	},
    };

    // Set it using Notifications Tool
    const notificationsTool = document.querySelector('velt-notifications-tool');
    notificationsTool?.setAttribute("tab-config", JSON.stringify(tabConfig));

    // Or, set it using Notifications Panel
    const notificationsPanel = document.querySelector('velt-notifications-panel');
    notificationsPanel?.setAttribute("tab-config", JSON.stringify(tabConfig));
    ```

    **Using APIs:**

    ```jsx
    const notificationElement = Velt.getNotificationElement();

    ​​const tabConfig = {
    	"forYou": {
    		name: 'Custom For You',
    		enable: true,
    	},
    	"documents": {
    		name: 'Custom Document',
    		enable: false,
    	},
    	"all": {
    		name: 'Custom All',
    		enable: true,
    	},
    };

    notificationElement.setTabConfig(tabConfig);
    ```
  </Tab>
</Tabs>

## setMaxDays

Notifications older than the specified number of days will not be displayed.

Default: 15 days.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    ```jsx
    <VeltNotificationsTool maxDays={15} />
    ```

    **Using API:**

    ```jsx
    const notificationElement = useNotificationUtils();
    notificationElement.setMaxDays(15);
    ```
  </Tab>

  <Tab title="React / Next.js">
    ```jsx
    <VeltNotificationsTool maxDays={15} />
    ```

    **Using API:**

    ```jsx
    const notificationElement = client.getNotificationElement();
    notificationElement.setMaxDays(15);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-notifications-tool max-days="15"></velt-notifications-tool>
    ```

    **Using APIs:**

    ```jsx
    const notificationElement = Velt.getNotificationElement();
    notificationElement.setMaxDays(15);
    ```
  </Tab>
</Tabs>

## panelOpenMode

Notificaitons Panel opens in one of the following ways:

* `popover`: It opens as a popover on the Notification Tool.
* `sidebar`: It opens as a sidebar from the right edge of the screen.

Default: `popover`.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    ```jsx
    <VeltNotificationsTool panelOpenMode={'sidebar'} />
    ```
  </Tab>

  <Tab title="React / Next.js">
    ```jsx
    <VeltNotificationsTool panelOpenMode={'sidebar'} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-notifications-tool panel-open-mode="sidebar"></velt-notifications-tool>
    ```
  </Tab>
</Tabs>

## enableReadNotificationsOnForYouTab

* You can control whether read notifications are displayed in the "For You" tab. By default, read notifications are removed from this tab.
* This feature allows you to customize the visibility of read notifications in the "For You" tab, providing more flexibility in how notifications are displayed to users.

Default: `false`.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    Using Props:

    ```jsx
    <VeltNotificationsTool readNotificationsOnForYouTab={true} />
    <VeltNotificationsPanel readNotificationsOnForYouTab={true} />
    ```

    Using APIs:

    ```jsx
    const notificationElement = useNotificationUtils();
    // Enable to keep read notifications in the for you tab
    notificationElement.enableReadNotificationsOnForYouTab();
    // Disable to hide read notifications in the for you tab
    notificationElement.disableReadNotificationsOnForYouTab();
    ```
  </Tab>

  <Tab title="React / Next.js">
    Using Props:

    ```jsx
    <VeltNotificationsTool readNotificationsOnForYouTab={true} />
    <VeltNotificationsPanel readNotificationsOnForYouTab={true} />
    ```

    Using APIs:

    ```jsx
    const notificationElement = client.getNotificationElement();
    // Enable to keep read notifications in the for you tab
    notificationElement.enableReadNotificationsOnForYouTab();
    // Disable to hide read notifications in the for you tab
    notificationElement.disableReadNotificationsOnForYouTab();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Props:

    ```html
    <velt-notifications-tool read-notifications-on-for-you-tab="true">
    </velt-notifications-tool>
    <velt-notifications-panel read-notifications-on-for-you-tab="true">
    </velt-notifications-panel>
    ```

    Using API:

    ```html
    <script>
      // Using APIs
      const notificationElement = Velt.getNotificationElement();
      // Enable to keep read notifications in the for you tab
      notificationElement.enableReadNotificationsOnForYouTab();
      // Disable to hide read notifications in the for you tab
      notificationElement.disableReadNotificationsOnForYouTab();
    </script>
    ```
  </Tab>
</Tabs>

## getUnreadNotificationsCount

* Retrieve the count of unread notifications, which includes a breakdown for different tabs.
* The 'Document' tab is not included in the response because it contains all the notifications present in the 'All' tab.

**Sample response:**

```javascript
{ 
  forYou: 4, // # of unread notifications in the "For You" tab
  all: 5     // # of unread notifications in the "All" or "Document" tab
}
```

<Tabs>
  <Tab title="React / Next.js">
    Using Hooks:

    ```jsx
    const unreadCount = useUnreadNotificationsCount();

    useEffect(() => {
      console.log('Unread Count', unreadCount);
    }, [unreadCount]);
    ```

    Using API:

    ```javascript
    const notificationElement = client.getNotificationElement();
    notificationElement.getUnreadNotificationsCount().subscribe((data) => {
      console.log('Unread notifications count:', data);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    const notificationElement = Velt.getNotificationElement();
    notificationElement.getUnreadNotificationsCount().subscribe((data) => {
      console.log('Unread notifications count:', data);
    });
    ```
  </Tab>
</Tabs>

## setAllNotificationsAsRead

* Mark all notifications as read, either globally or for a specific tab.
* Using 'all' or 'document' as the `tabId` marks all notifications as read across all tabs (equivalent to calling `setAllNotificationsAsRead()` without arguments).
* Using 'for-you' as the `tabId` only marks notifications in the 'for-you' tab as read.

<Tabs>
  <Tab title="React / Next.js">
    ```javascript
    const notificationElement = client.getNotificationElement();

    // Mark all notifications as read
    notificationElement.setAllNotificationsAsRead();

    // Mark all notifications as read for a specific tab
    notificationElement.setAllNotificationsAsRead({ tabId: 'for-you' });
    notificationElement.setAllNotificationsAsRead({ tabId: 'all' });
    notificationElement.setAllNotificationsAsRead({ tabId: 'document' });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    const notificationElement = Velt.getNotificationElement();

    // Mark all notifications as read
    notificationElement.setAllNotificationsAsRead();

    // Mark all notifications as read for a specific tab
    notificationElement.setAllNotificationsAsRead({ tabId: 'for-you' });
    notificationElement.setAllNotificationsAsRead({ tabId: 'all' });
    notificationElement.setAllNotificationsAsRead({ tabId: 'document' });
    ```
  </Tab>
</Tabs>

## markNotificationAsReadById

* Mark a single notification as read using its notificationId.
* The notification will be marked as read in all tabs.

<Tabs>
  <Tab title="React / Next.js">
    ```javascript
    const notificationElement = client.getNotificationElement();
    notificationElement.markNotificationAsReadById("notificationId");
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    const notificationElement = Velt.getNotificationElement();
    notificationElement.markNotificationAsReadById("notificationId");
    ```
  </Tab>
</Tabs>


# In-app Notifications
Source: https://docs.velt.dev/async-collaboration/notifications/overview



There are two components associated with In-app Notifications feature:

* `Velt Notifications Tool`: This opens the Notifications Panel.
* `Velt Notifications Panel`: This shows all the `Notifications` grouped in categories.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=notifications" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="700px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=notifications)


# Setup
Source: https://docs.velt.dev/async-collaboration/notifications/setup



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/Notification_Dialog_Box.png)

<Steps titleSize="h2">
  <Step title="Enable Notifications in the Velt Console">
    * Go to the [Notifications section](https://console.velt.dev/dashboard/config/notification) in the Configurations section of the Velt Console and enable Notifications.

    <Warning> Notifications will not work if you do not enable this first.</Warning>
  </Step>

  <Step title="Add the Notifications Tool component">
    * Place the `Velt Notifications Tool` component wherever you want the Notifications button to appear.

    ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/Notification_Dialog_Box.png)

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <div className="toolbar">
          <VeltNotificationsTool/>
        </div>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <div className="toolbar">
          <velt-notifications-tool></velt-notifications-tool>
        </div>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="(optional) Embed Notifications Panel">
    * By default, the Velt Notifications Panel is automatically added or removed when you use the `Velt Notifications Tool`.
    * However, if you want to create a dedicated page or dedicated section for Notifications, you can embed the Velt Notifications Panel component directly there.

    ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/Notification_Dialog_Box.png)

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <div className="toolbar">
          <VeltNotificationsPanel />
        </div>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        <div className="toolbar">
          <velt-notifications-panel></velt-notifications-panel>
        </div>
        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>

<RequestExample>
  ```jsx React / Next.js
  import { VeltNotificationsTool } from '@veltdev/react';

  function YourComponent() {

    return (
      <div className="toolbar">
        <VeltNotificationsTool />
      </div>
    )
    
  }
  ```

  ```html HTML
  <div className="toolbar">
    <velt-notifications-tool></velt-notifications-tool>
  </div>
  ```
</RequestExample>


# Inline Reactions
Source: https://docs.velt.dev/async-collaboration/reactions/overview



This allows users to add emoji reactions to specific parts of your UI (eg: posts, images etc). This is great for quick emotional responses or feedback.

Add `Velt Inline Reactions Section` component to your app to enable Inline Reactions.

<Frame>
  <iframe src="https://docs-mini-demo.vercel.app/reactions-inline" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="300px" />
</Frame>

[Open in larger window](https://docs-mini-demo.vercel.app/reactions-inline)


# Setup
Source: https://docs.velt.dev/async-collaboration/reactions/setup



<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Velt Inline Reactions Section component">
        Import the `VeltInlineReactionsSection` component.

        ```js
        import { VeltInlineReactionsSection } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add container to hold Inline Reactions component">
        * Create an element to hold your Inline Reactions component, such as a `div` or `section`.
        * Add a unique element `id` to it.

        ```jsx
        <section id="container-id">
        	<div>Your Article</div>
        </section>
        ```
      </Step>

      <Step title="Add VeltInlineReactionsSection component">
        * Add `VeltInlineReactionsSection` component inside your container.
        * Add `targetReactionElementId` property to the Velt Inline Reactions component. This needs to match the id you set to the container. This binds the Inline Reactions component with the desired container.

        ```jsx
        <section id="container-id">
        	<div>Your Article</div>

        	<VeltInlineReactionsSection
        		targetReactionElementId="container-id"
        	/>

        </section>
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Add container to hold Inline Reactions component">
        * Create an element to hold your Inline Reactions component, such as a `div` or `section`.
        * Add a unique element `id` to it.

        ```html
        <section id="container-id">
        	<div>Your Article</div>
        </section>
        ```
      </Step>

      <Step title="Add Velt Inline Reactions Section component">
        * Add `velt-inline-reactions-section` component inside your container.
        * Add `target-reaction-element-id` property to the Velt Inline Reactions component. This needs to match the id you set to the container. This binds the Inline Reactions component with the desired container.

        ```jsx

        <section id="container-id">
        	<div>Your Article</div>

        	<velt-inline-reactions-section
        		target-reaction-element-id="container-id">
        	</velt-inline-reactions-section>

        </section>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  import { VeltInlineReactionsSection } from '@veltdev/react';

  export default function App() {

    return (
        <section id="container-id">
          <div>Your Article</div>

          <VeltInlineReactionsSection
            targetReactionElementId="container-id"
          />

        </section>  
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <body>

      <section id="container-id">
        <div>Your Article</div>

        <velt-inline-reactions-section
          target-reaction-element-id="container-id">
        </velt-inline-reactions-section>

      </section>

    </body>
  </html>
  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/async-collaboration/recorder/customize-behavior



# AI

#### enableRecordingTranscription

Controls whether to enable AI transcription for recordings.

Default: `enabled`

<Tabs>
  <Tab title="React / Next.js">
    ```javascript
    const recorderElement = client.getRecorderElement();
    recorderElement.enableRecordingTranscription();
    recorderElement.disableRecordingTranscription();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    const recorderElement = Velt.getRecorderElement();
    recorderElement.enableRecordingTranscription();
    recorderElement.disableRecordingTranscription();
    ```
  </Tab>
</Tabs>

#### summary

Controls whether to display a summary transcript of the recording. When enabled, an AI-generated summary of the recording's content will be shown.

Default: `true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltRecorderPlayer summary={true}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-recorder-player summary={true}></velt-recorder-player>
    ```
  </Tab>
</Tabs>

# Data

#### getRecordingData

Fetches recording data (transcript, summary, and URLs) for the given recording IDs.

* **Params:** [RecorderRequestQuery](/api-reference/sdk/models/api-request-objects#recorderrequestquery)
* **Returns:** [`Promise<GetRecordingDataResponse>`](/api-reference/sdk/models/api-request-objects#getrecordingdataresponse)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const recorderElement = client.getRecorderElement();
    const recorderData = await recorderElement.getRecordingData({
        recorderIds: ['RECORDER_ID']
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const recorderElement = Velt.getRecorderElement();
    const recorderData = await recorderElement.getRecordingData({
        recorderIds: ['RECORDER_ID']
    });
    ```
  </Tab>
</Tabs>

# Event Subscription

#### on

* Subscribe to Recorder Events.
* [Here](/api-reference/sdk/models/api-event-types-enum#recorder) is the list of events you can subscribe to.
* [Here](/api-reference/sdk/models/api-event-objects#recorder) is the list of objects you will receive in the callback.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Hook
    const recorderEventCallbackData = useRecorderEventCallback('transcriptionDone');
    useEffect(() => {
      if (recorderEventCallbackData) {
        // Handle recorder action callback event response
      }
    }, [recorderEventCallbackData]);

    // API Method
    const recorderElement = client.getRecorderElement();
    recorderElement.on('transcriptionDone').subscribe((event) => {
        // Handle the event response
    });

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const recorderElement = Velt.getRecorderElement();
    recorderElement.on('transcriptionDone').subscribe((event) => {
        // Handle the event response
    });
    ```
  </Tab>
</Tabs>

#### onDelete

When a recording is deleted by its creator, the `Velt Recorder Player` component emits an `onDelete` event containing the recorder ID. You can listen for this event to perform any necessary cleanup.

The event returns an object with the following field:

| Field | Type   | Description                    |
| ----- | ------ | ------------------------------ |
| id    | string | The ID of the deleted recorder |

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltRecorderPlayer recorderId={RECORDER_ID} onDelete={(data) => yourDeleteMethod(data)} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const recorderPlayer = document.querySelector('velt-recorder-player');
    recorderPlayer?.addEventListener('onDelete', (s) => {
        console.log('onDelete', s.detail);
    });
    ```
  </Tab>
</Tabs>

#### onRecordedData

The `onRecordedData` callback is triggered when a recording is completed. It provides the following data:

| Field | Type   | Description                                                                                                     |
| ----- | ------ | --------------------------------------------------------------------------------------------------------------- |
| id    | string | Unique identifier for the recording                                                                             |
| tag   | string | HTML tag to embed the recording player (e.g. `<velt-recorder-player recorder-id="123"></velt-recorder-player>`) |

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
      const recorderAddEvent = useRecorderAddHandler();

      useEffect(() => {
        console.log('recorderAddEvent', recorderAddEvent);
      }, [recorderAddEvent]);
    ```

    **Using API:**

    ```jsx
      const recorderElement = client.getRecorderElement();
      recorderElement.onRecordedData().subscribe((recorderAddEvent) => {
        console.log(recorderAddEvent);
      });
    ```

    **Using Event Listener:**

    ```jsx
      const onRecordedData = (recorderAddEvent) => {
        console.log(recorderAddEvent);
      }
      return (
        <VeltRecorderControlPanel mode="thread" onRecordedData={onRecordedData} />
      )

    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using API:**

    ```jsx
      const recorderElement = Velt.getRecorderElement();
      recorderElement.onRecordedData().subscribe((recorderAddEvent) => {
        console.log(recorderAddEvent);
      });
    ```

    **Using Event Listener:**

    ```js
    const recorderControlPanel = document.querySelector('velt-recorder-control-panel');
    recorderControlPanel?.addEventListener('onRecordedData', (s) => {
        console.log('onRecordedData', s.detail);
    });
    ```
  </Tab>
</Tabs>

# Editor

#### videoEditor

* Controls whether to enable the video editor for the `Velt Recorder Player`.
* Works for Video and Screen Recordings.

Default: `false`

<Tabs>
  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltRecorderNotes videoEditor={true} />
    ```

    **Using API:**

    ```jsx
    const recorderElement = client.getRecorderElement();
    recorderElement.enableVideoEditor();
    recorderElement.disableVideoEditor();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using Props:**

    ```html
    <velt-recorder-notes video-editor="true"></velt-recorder-notes>
    ```

    **Using API:**

    ```html
    const recorderElement = Velt.getRecorderElement();
    recorderElement.enableVideoEditor();
    recorderElement.disableVideoEditor();
    ```
  </Tab>
</Tabs>

# UI/UX

#### buttonLabel

Sets a custom label for the `Velt Recorder Tool`.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltRecorderTool buttonLabel="Your Label Text" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-recorder-tool buttonLabel="Your Label Text"></velt-recorder-tool>
    ```
  </Tab>
</Tabs>

#### enableRecordingCountdown

Controls whether to display a countdown timer before a recording starts.

Default: `enabled`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    const recorderElement = client.getRecorderElement();
    recorderElement.enableRecordingCountdown();
    recorderElement.disableRecordingCountdown();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const recorderElement = Velt.getRecorderElement();
    recorderElement.enableRecordingCountdown();
    recorderElement.disableRecordingCountdown();
    ```
  </Tab>
</Tabs>

#### mode

The `Velt Recorder Control Panel` has two display modes:

* `floating`: Shows a preview in the bottom left corner of the page, regardless of component placement
* `thread`: Displays the component at its placed location in the DOM

Default: `floating`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltRecorderControlPanel mode="floating" />
    <VeltRecorderControlPanel mode="thread" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-recorder-control-panel mode="floating"></velt-recorder-control-panel>
    <velt-recorder-control-panel mode="thread"></velt-recorder-control-panel>
    ```
  </Tab>
</Tabs>

#### type

Sets the recording mode for the `Velt Recorder Tool`.

Available modes:

* `all` - Records audio, video and screen
* `audio` - Records audio only
* `video` - Records video only
* `screen` - Records screen only

Default: `audio`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltRecorderTool type='all' />
    <VeltRecorderTool type='audio' />
    <VeltRecorderTool type='video' />
    <VeltRecorderTool type='screen' />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-recorder-tool type='all'></velt-recorder-tool>
    <velt-recorder-tool type='audio'></velt-recorder-tool>
    <velt-recorder-tool type='video'></velt-recorder-tool>
    <velt-recorder-tool type='screen'></velt-recorder-tool>
    ```
  </Tab>
</Tabs>


# Recorder
Source: https://docs.velt.dev/async-collaboration/recorder/overview

The Recorder allows your users to create audio, screen, and video recordings.

The Velt Recorder consists of 4 key components:

* **Velt Recorder Notes**: Enables pinning recordings to specific locations on the screen
* **Velt Recorder Tool**: A button to initiate recordings
* **Velt Recorder Control Panel**: Controls for managing active recordings (start/stop/pause)
* **Velt Recorder Player**: Plays back recordings using their unique ID

<Tabs>
  <Tab title="All">
    <Frame>
      <iframe src="https://recorder-landing-page-demo.vercel.app/?type=all&backgroundColor=black&darkMode=true" allow="camera; microphone" className="w-full" height="500px" />
    </Frame>

    [Open in larger window](https://recorder-landing-page-demo.vercel.app/?type=all\&backgroundColor=black\&darkMode=true)
  </Tab>

  <Tab title="Audio">
    <Frame>
      <iframe src="https://recorder-landing-page-demo.vercel.app/?type=audio&backgroundColor=black&darkMode=true" allow="camera; microphone" className="w-full" height="500px" />
    </Frame>

    [Open in larger window](https://recorder-landing-page-demo.vercel.app/?type=audio\&backgroundColor=black\&darkMode=true)
  </Tab>

  <Tab title="Video">
    <Frame>
      <iframe src="https://recorder-landing-page-demo.vercel.app/?type=video&backgroundColor=black&darkMode=true" allow="camera; microphone" className="w-full" height="500px" />
    </Frame>

    [Open in larger window](https://recorder-landing-page-demo.vercel.app/?type=video\&backgroundColor=black\&darkMode=true)
  </Tab>

  <Tab title="Screen">
    <Frame>
      <iframe src="https://recorder-landing-page-demo.vercel.app/?type=screen&backgroundColor=black&darkMode=true" allow="camera; microphone" className="w-full" height="500px" />
    </Frame>

    [Open in larger window](https://recorder-landing-page-demo.vercel.app/?type=screen\&backgroundColor=black\&darkMode=true)
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/async-collaboration/recorder/setup



<Steps>
  <Step title="Add the Velt Recorder Tool component">
    * Add the `Velt Recorder Tool` component wherever you want the recorder button to appear.
    * Set the `type` attribute of the `Velt Recorder Tool` component to one of the following:
      * `all`
      * `audio`
      * `video`
      * `screen`

    <Tabs>
      <Tab title="React / Next.js">
        ```js
        <div className="toolbar">
          <VeltRecorderTool type='all' />
        </div>
        ```
      </Tab>

      <Tab title="HTML/ Other frameworks">
        ```html
        <div className="toolbar">
          <velt-recorder-tool type='all'></velt-recorder-tool>
        </div>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Add the Velt Recorder Control Panel component">
    * Add the `Velt Recorder Control Panel` component wherever you want the control panel to appear.
    * When a user clicks on the `Velt Recorder Tool` button, the `Velt Recorder Control Panel` component will show the recording preview with options to save, pause, or delete the recording.
    * Set the `mode` attribute on the `VeltRecorderControlPanel` component to either `floating` (default) or `thread`.

    To  learn more about `floating` or `thread` mode [read here](/async-collaboration/recorder/customize-behavior#mode).

    <Tabs>
      <Tab title="React / Next.js">
        ```js
        <div className="toolbar">
          <VeltRecorderTool type='all' />
          <VeltRecorderControlPanel mode="thread" />
        </div>
        ```
      </Tab>

      <Tab title="HTML/ Other frameworks">
        ```html
        <div className="toolbar">
          <velt-recorder-tool type='all'></velt-recorder-tool>
          <velt-recorder-control-panel mode="thread"></velt-recorder-control-panel>
        </div>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Render recorded data in Velt Recorder Player">
    * After a user has finished recording, you will receive the recorded data in an event callback.
    * Add the `Velt Recorder Player` component with the `recorderId` from the event callback.
    * It displays the recorded data with controls such as pause, play, edit and delete.

    <Tabs>
      <Tab title="React / Next.js">
        ```js
        const recorderAddEvent = useRecorderAddHandler();
        const [recorderId, setRecorderId] = useState(null);
        useEffect(() => {
          setRecorderId(recorderAddEvent.id);
        }, [recorderAddEvent]);

        <div className="video-player">
          {recorderId && <VeltRecorderPlayer recorderId={recorderId} />}
        </div>
        ```
      </Tab>

      <Tab title="HTML/ Other frameworks">
        ```js
        const recorderElement = Velt.getRecorderElement();
        recorderElement.onRecordedData().subscribe((recorderAddEvent) => {
          setRecorderId(recorderAddEvent.id);
        });
        ```

        ```html
        <div className="video-player">
          <velt-recorder-player recorderId="RECORDER_ID"></velt-recorder-player>
        </div>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Enable Recording Editor">
    * Recording Editor is currently in beta and is not enabled by default.
    * It is only available for video and screen recordings.

    <Tabs>
      <Tab title="React / Next.js">
        ```js
        const recorderElement = client.getRecorderElement();
        recorderElement.enableVideoEditor();
        ```
      </Tab>

      <Tab title="HTML/ Other frameworks">
        ```js
        const recorderElement = Velt.getRecorderElement();
        recorderElement.enableVideoEditor();
        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>

<RequestExample>
  ```js React / Next.js
  import { VeltRecorderTool, VeltRecorderControlPanel, VeltRecorderPlayer } from '@veltdev/react'

  function TaskInputBox() {
      return (
        <div className="toolbar">
          <VeltRecorderTool type='all' />
          <VeltRecorderControlPanel mode="floating" />
        </div>
        <div className="video-player">
          <VeltRecorderPlayer recorderId={RECORDER_ID} />
        </div>
      )
  }
  ```

  ```html HTML
  <div>
        <div class="toolbar"> 
          <velt-recorder-tool type='all'></velt-recorder-tool>
          <velt-recorder-control-panel mode="floating"></velt-recorder-control-panel>
        </div>
        <div class="video-player">
          <velt-recorder-player recorderId="RECORDER_ID"></velt-recorder-player>
        </div>
  </div>
  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/async-collaboration/view-analytics/customize-behavior



## getUniqueViewsByUser

* Get unique views by user.
* You can optionally filter by location.

<Tabs>
  <Tab title="React / Next.js">
    Props:

    ```jsx
    <VeltViewAnalytics />
    // or
    <VeltViewAnalytics type="location" location-id="MY_LOCATION_ID" />
    ```

    Using Hooks:

    ```jsx
    const viewsByUser = useUniqueViewsByUser();
    const viewsByUserForLocation = useUniqueViewsByUser('your-location-id');
    ```

    API Methods:

    ```jsx
    const viewsElement = client.getViewsElement();
    // to get unique views by user
    let subscription = viewsElement.getUniqueViewsByUser().subscribe((viewsByUser) => {
    	console.log('Unique views by user: ', viewsByUser);
    });
    // you can optionally pass client-location-id to get unique views by users for that location
    let subscription = viewsElement.getUniqueViewsByUser('your-location-id').subscribe((viewsByUser) => {
    	console.log('Unique views by date for location: ', viewsByUser);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Props:

    ```html
    <velt-view-analytics></velt-view-analytics>
    <!-- or -->
    <velt-view-analytics
    	type="location"
    	location-id="your-location-id">
    </velt-view-analytics>
    ```

    Using Hooks:

    ```jsx
    const viewsByUser = useUniqueViewsByUser();
    const viewsByUserForLocation = useUniqueViewsByUser('your-location-id');
    ```

    API Methods:

    ```jsx
    const viewsElement = client.getViewsElement();
    // to get unique views by user
    let subscription = viewsElement.getUniqueViewsByUser().subscribe((viewsByUser) => {
    	console.log('Unique views by user: ', viewsByUser);
    });
    // you can optionally pass client-location-id to get unique views by users for that location
    let subscription = viewsElement.getUniqueViewsByUser('your-location-id').subscribe((viewsByUser) => {
    	console.log('Unique views by date for location: ', viewsByUser);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

## getUniqueViewsByDate

* Get unique views by date.
* You can optionally filter by location.

<Tabs>
  <Tab title="React / Next.js">
    Props:

    ```jsx
    <VeltViewAnalytics />
    // or
    <VeltViewAnalytics type="location" location-id="MY_LOCATION_ID" />
    ```

    Using Hooks:

    ```jsx
    const viewsByDate = useUniqueViewsByDate();
    const viewsByDateForLocation = useUniqueViewsByDate('your-location-id');
    ```

    API Methods:

    ```jsx
    const viewsElement = client.getViewsElement();
    // to get unique views by date
    let subscription = viewsElement.getUniqueViewsByDate().subscribe((viewsByDate) => {
    	console.log('Unique views by date: ', viewsByDate);
    });
    // you can optionally pass client-location-id to get unique views by date for that location
    let subscription = viewsElement.getUniqueViewsByDate('your-location-id').subscribe((viewsByDate) => {
    	console.log('Unique views by date for location: ', viewsByDate);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Props:

    ```html
    <velt-view-analytics></velt-view-analytics>
    <!-- or -->
    <velt-view-analytics
    	type="location"
    	location-id="your-location-id">
    </velt-view-analytics>
    ```

    Using Hooks:

    ```jsx
    const viewsByDate = useUniqueViewsByDate();
    const viewsByDateForLocation = useUniqueViewsByDate('your-location-id');
    ```

    API Methods:

    ```jsx
    const viewsElement = client.getViewsElement();
    // to get unique views by date
    let subscription = viewsElement.getUniqueViewsByDate().subscribe((viewsByDate) => {
    	console.log('Unique views by date: ', viewsByDate);
    });
    // you can optionally pass client-location-id to get unique views by date for that location
    let subscription = viewsElement.getUniqueViewsByDate('your-location-id').subscribe((viewsByDate) => {
    	console.log('Unique views by date for location: ', viewsByDate);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>


# View Analytics
Source: https://docs.velt.dev/async-collaboration/view-analytics/overview



<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=view-analytics" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="700px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=view-analytics)


# Setup
Source: https://docs.velt.dev/async-collaboration/view-analytics/setup



![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/Trends.png)

<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import the VeltViewAnalytics component from @veltdev/react">
        Import the `VeltViewAnalytics` component

        ```jsx
        import { VeltViewAnalytics } from '@veltdev/react';
        ```
      </Step>

      <Step title="Place the VeltViewAnalytics component">
        Place the `VeltViewAnalytics` component wherever you want the View Analytics component to appear.

        ```jsx
        <div className="toolbar">
          <VeltViewAnalytics />
        </div>
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Place the velt-view-analytics component">
        Place the `<velt-view-analytics>` component wherever you want the View Analytics component to appear.

        ```jsx
        <div className="toolbar">
          <velt-view-analytics></velt-view-analytics>
        </div>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import { VeltViewAnalytics } from '@veltdev/react';

  function YourComponent() {

    return (
      <div className="toolbar">
        <VeltViewAnalytics />
      </div>
    )
    
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Collaboration App</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
      <script>
        async function loadVelt() {
          await Velt.init("YOUR_VELT_API_KEY");
        }
      </script>
    </head>
    <body>
      <div className="toolbar">
        <velt-view-analytics></velt-view-analytics>
      </div>
      
    </body>
  </html>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/get-started/overview



## Getting Started

<CardGroup cols={2}>
  <Card title="Quickstart" href="/get-started/quickstart" icon="circle-play" color="#7CE38B" iconType="light">
    Set up Velt with a fresh App
  </Card>

  <Card title="Setup" href="/get-started/setup" icon="gear" color="#77BDFB" iconType="light">
    Integrate Velt with an existing app
  </Card>
</CardGroup>

## Popular Features

<CardGroup cols={2}>
  <Card title="Comments" href="/async-collaboration/comments/overview" icon="comment" color="#FAA356" iconType="light">
    Enable contextual discussions within your app
  </Card>

  <Card title="In-app Notifications" href="/async-collaboration/notifications/overview" icon="bell" color="#FAA356" iconType="light">
    Notify users about comment updates or add custom app notifications
  </Card>

  <Card title="Recorder" href="/async-collaboration/recorder/overview" icon="video" color="#FAA356" iconType="light">
    Loom-style audio, video & screen recording with AI transcription
  </Card>

  <Card title="Huddle" href="/realtime-collaboration/huddle/overview" icon="headphones" color="#FAA356" iconType="light">
    Slack-style huddle calls within your app
  </Card>
</CardGroup>

## Async Collaboration

<CardGroup cols={3}>
  <Card title="Comments" href="/async-collaboration/comments/overview" icon="comment" color="#77BDFB" iconType="light">
    Leave a comment anywhere
  </Card>

  <Card title="Comments Sidebar" href="/async-collaboration/comments-sidebar/overview" icon="sidebar" color="#77BDFB" iconType="light">
    A sidebar that holds your comments
  </Card>

  <Card title="In-app Notifications" href="/async-collaboration/notifications/overview" icon="bell" color="#FAA356" iconType="light">
    Notification center in your app
  </Card>

  <Card title="Recorder" href="/async-collaboration/recorder/overview" icon="video" color="#FAA356" iconType="light">
    Embeddable audio, video & screen recording
  </Card>

  <Card title="Media Player Comments" href="/async-collaboration/comments/setup/video-player-setup/custom-video-player-setup" icon="circle-play" color="#77BDFB" iconType="light">
    Frame.io style comments on video
  </Card>

  <Card title="System Comments" href="/api-reference/rest-apis/comments-feature/comment-annotations/add-comment-annotations" icon="server" color="#77BDFB" iconType="light">
    Leave comments using an API
  </Card>

  <Card title="Reactions" href="/async-collaboration/reactions/overview" icon="heart" color="#FAA356" iconType="light">
    Add reactions to components
  </Card>

  <Card title="View Analytics" href="/async-collaboration/view-analytics/overview" icon="chart-line" color="#FAA356" iconType="light">
    Show which users viewed a document
  </Card>

  <Card title="Arrows" href="/async-collaboration/arrows/overview" icon="arrow-up-right" color="#77BDFB" iconType="light">
    Point at what is important
  </Card>
</CardGroup>

## Realtime Collaboration

<CardGroup cols={3}>
  <Card title="Live State Sync" href="/realtime-collaboration/live-state-sync/overview" icon="rotate" color="#7CE38B" iconType="light">
    Sync the state of your app realtime
  </Card>

  <Card title="Single Editor Mode" href="/realtime-collaboration/single-editor-mode/overview" icon="lock" color="#7CE38B" iconType="light">
    Lock access to a single editor
  </Card>

  <Card title="Presence" href="/realtime-collaboration/presence/overview" icon="circle-user" color="#7CE38B" iconType="light">
    See who else is browsing online
  </Card>

  <Card title="Cursors" href="/realtime-collaboration/cursors/overview" icon="arrow-pointer" color="#7CE38B" iconType="light">
    See where everyone else is browsing
  </Card>

  <Card title="Follow Me Mode" href="/realtime-collaboration/flock-mode/overview" icon="bird" color="#7CE38B" iconType="light">
    Let others follow along your screen
  </Card>

  <Card title="Huddle" href="/realtime-collaboration/huddle/overview" icon="headphones" color="#7CE38B" iconType="light">
    Hop on a group call with everyone
  </Card>

  <Card title="Live Selection" href="/realtime-collaboration/live-selection/overview" icon="square-dashed" color="#7CE38B" iconType="light">
    See what others are editing
  </Card>
</CardGroup>

## Advanced

<CardGroup cols={2}>
  <Card title="Webhooks" href="/webhooks/overview" icon="webhook" color="#CEA5FB" iconType="light">
    Call a webhook when a comment is added
  </Card>

  <Card title="Email Notifications" href="/notifications/email/overview" icon="envelope" color="#CEA5FB" iconType="light">
    Set up email notifications
  </Card>

  <Card title="REST APIs" href="/api-reference/rest-apis" icon="server" color="#CEA5FB" iconType="light">
    Retrieve or modify data
  </Card>

  <Card title="UI Customization" href="/ui-customization/overview" icon="paintbrush" color="#CEA5FB" iconType="light">
    Fully customize Velt Components
  </Card>
</CardGroup>


# Quickstart
Source: https://docs.velt.dev/get-started/quickstart

Quickstart for React. For other frameworks like `vue`, `angular`, `svelte`, `vanilla js` etc. check out the setup guide.

<Steps titleSize="h2">
  <Step title="Create a React app">
    Create a new React app [using any method](https://react.dev/learn/start-a-new-react-project) you prefer.

    {/* ```bash Terminal
      npx create-next-app@latest
      ``` */}
  </Step>

  <Step title="Install the Velt React package onto your app">
    ```bash Terminal
    cd my-app && npm install @veltdev/react
    ```
  </Step>

  <Step title="Install types (optional)">
    If you're using TypeScript, you can install the types package.

    ```bash Terminal
    npm install --save-dev @veltdev/types
    ```
  </Step>

  <Step title="Grab your Velt API Key">
    Go to [console.velt.dev](https://console.velt.dev) and grab your Velt API Key

    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-api-key.png)
    </Frame>
  </Step>

  <Step title="Safelist your domain">
    In the Velt console, add the URL where your app is deployed to the list of Managed Domains.

    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-add-website.png)
    </Frame>
  </Step>

  <Step title="Configure the VeltProvider">
    In **App.js**, add the `VeltProvider` component to the root of your app with your Velt API Key.

    ```js App.js
    <VeltProvider apiKey="YOUR_API_KEY">
      <YourAuthComponent/>
      <YourDocument/>
    </VeltProvider>
    ```
  </Step>

  <Step title="Identify your user">
    In **YourAuthComponent.js**, use the `useIdentify()` hook from the Velt SDK to identify your user.

    ```js YourAuthComponent.js
    import { useIdentify } from '@veltdev/react';

    useIdentify(user)
    ```

    <Warning>Make sure to call `useIdentify()` within a child component of the Velt Provider. Otherwise, it will not work.</Warning>
  </Step>

  <Step title="Set the Document ID">
    In **YourDocument.js**, use the `useSetDocumentId()` hook from the Velt SDK to set the Document ID.

    ```js YourDocument.js
    import { useSetDocumentId } from '@veltdev/react';

    useSetDocumentId("my-document-id")
    ```
  </Step>

  <Step title="Add the VeltComments, VeltCommentTool and VeltPresence components">
    In **App.js**, add `VeltComments` to enable the `Comments` functionality.

    ```js App.js
    <VeltProvider apiKey="YOUR_API_KEY">
      <VeltComments/>
      <YourAuthComponent/>
      <YourDocument/>
    </VeltProvider>
    ```

    In **YourDocument.js**, add the `VeltCommentTool` and `VeltPresence` components to test out the `Comments` and `Presence` functionality.

    ```js YourDocument.js
    <div>
      <VeltPresence/>
      <VeltCommentTool/>
    </div>
    ```
  </Step>

  <Step title="Test out the Presence and Comments functionality">
    ### Comments

    * Click the `VeltCommentTool` button, then hover over any element on the page to leave a comment.
    * Click the `VeltCommentTool` button, then try to draw a box on the page to leave a comment.
    * You can also highlight any text to leave a comment.

    ### Presence

    * Open two browser tabs side by side with one in Incognito mode. You should see a bubble showing the other browser's profile avatar pop up.
  </Step>

  {/* <Step title="Need an example?">
    Fork this repo if you want all the steps above done for you. You will still need to use your own Velt API Key.


    [Github Repo](https://github.com/Snippyly-Docs/velt-quickstart-hooks-demo)

    [CodeSandBox Link](https://codesandbox.io/embed/github/Snippyly-Docs/velt-quickstart-hooks-demo?fontsize=14&hidenavigation=1&module=%2Fsrc%2FApp.tsx&theme=dark&view=editor)


    [View Demo in Larger Window](https://velt-quickstart-hooks-demo.vercel.app/)

    [![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/Snippyly-Docs/velt-quickstart-hooks-demo)


    <Frame>
    <iframe 
      src="https://velt-quickstart-hooks-demo.vercel.app/"
      className="w-full"
      scrolling="no"
      height="500px">
    </iframe>
    </Frame>
    </Step> */}

  <Step title="Need more details on how to integrate this into an existing app?">
    Check out this guide on [how to set up Velt with your existing app](/get-started/setup/install)
  </Step>
</Steps>

<RequestExample>
  ```jsx App.js
  import { VeltProvider, VeltComments, VeltPresence } from '@veltdev/react';
  import YourAuthComponent from './YourAuthComponent';
  import YourDocument from './YourDocument';

  export default function App() {

    return (
      <VeltProvider apiKey="YOUR_API_KEY">
        <VeltComments/>
        <VeltPresence/>
        <YourAuthComponent/>
        <YourDocument/>
      </VeltProvider>
    );
  }
  ```

  ```jsx YourAuthComponent.js
  import { useIdentify} from "@veltdev/react";
  import { useState } from "react";

  export default function YourAuthComponent() {

    const userService = () => {
      return {
        uid: "user1",
        displayName: "User 1",
        email: "user1@velt.dev",
        photoURL: "https://i.pravatar.cc/301"
      };
    };

    // Fetch user data from user service
    let yourAuthenticatedUser = userService();
    const { uid, displayName, email, photoURL } = yourAuthenticatedUser;

    // Create the Velt user object
    let veltUser = {
      userId: uid,
      name: displayName,
      email: email,
      photoUrl: photoURL,
    };

    //identify Velt user
    useIdentify(veltUser)

    let [user,setUser] = useState(veltUser)

    return <div>User: {user?.userId}</div>;
  }
  ```

  ```jsx YourDocument.js
  import {  useSetDocumentId, VeltCommentTool, VeltPresence } from '@veltdev/react';
  import { useEffect, useState } from 'react';

  export default function YourDocument() {

    useSetDocumentId('my-document-id')

    return (
      <div>
        <VeltCommentTool/>
      </div>
      
    );
  }
  ```
</RequestExample>


# Advanced Setup Options
Source: https://docs.velt.dev/get-started/setup/advanced



<Tabs>
  <Tab title="React / Next.js with Hooks">
    ## Advanced Set Up options

    This section includes a list of optional advanced set up options.

    ## Location

    Users logged into the same **Document** ID can see each other's `Presence`, `Cursors`, `Comments` etc.

    However, if you want to add another layer of categorization to organize users together, you can use **Location**.

    <Tip> If a **Document** is like a house, a **Location** is like a room within the house. </Tip>

    To learn more about `Locations`, check out its dedicated section [here](/key-concepts/overview#locations).

    ## Contacts

    When you reply to a comment, you can `@mention` other teammates that are added to a `User's Contacts List`.

    To learn more about creating a `User's Contacts List`, [read here](/key-concepts/users/contact-list).

    ## Detect if Velt SDK is initialized

    This returns true when both the Velt User and Document are initialized:

    ```jsx
    let subscription = client.getVeltInitState().subscribe((veltInitState: boolean | undefined) => {
    	console.log('Velt Init State:', veltInitState);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```

    You can also the use `useVeltInitState()` hook:

    ```jsx
    import { useVeltInitState } from '@veltdev/react';

    function YourComponent() {
        const veltInitState = useVeltInitState();
        useEffect(() => {
            console.log('Velt Init State:', veltInitState);
            if (veltInitState) {
                // Velt state is initialized, so user can perform any action here
            }
        }, [veltInitState]);
    }

    ```
  </Tab>

  <Tab title="React / Next.js">
    ## Advanced Set Up options

    This section includes a list of optional advanced set up options.

    ## Location

    Users logged into the same **Document** ID can see each other's `Presence`, `Cursors`, `Comments` etc.

    However, if you want to add another layer of categorization to organize users together, you can use **Location**.

    <Tip> If a **Document** is like a house, a **Location** is like a room within the house. </Tip>

    To learn more about `Locations`, check out its dedicated section [here](/key-concepts/overview#locations).

    ## Contacts

    When you reply to a comment, you can `@mention` other teammates that are added to a `User's Contacts List`.

    To learn more about creating a `User's Contacts List`, [read here](/key-concepts/users/contact-list).

    ## Detect if Velt SDK is initialized

    This returns true when both the Velt User and Document are initialized:

    ```jsx
    let subscription = client.getVeltInitState().subscribe((veltInitState: boolean | undefined) => {
    	console.log('Velt Init State:', veltInitState);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="HTML">
    ## Advanced Set Up options

    This section includes a list of optional advanced set up options.

    ## Location

    Users logged into the same **Document** ID can see each other's `Presence`, `Cursors`, `Comments` etc.

    However, if you want to add another layer of categorization to organize users together, you can use **Location**.

    <Tip> If a **Document** is like a house, a **Location** is like a room within the house. </Tip>

    To learn more about `Locations`, check out its dedicated section [here](/key-concepts/overview#locations).

    ## Contacts

    When you reply to a comment, you can `@mention` other teammates that are added to a `User's Contacts List`.

    To learn more about creating a `User's Contacts List`, [read here](/key-concepts/users/contact-list).

    ## Detect if Velt SDK is initialized

    This returns true when both the Velt User and Document are initialized:

    ```jsx
    let subscription = Velt.getVeltInitState().subscribe((veltInitState: boolean | undefined) => {
    	console.log('Velt Init State:', veltInitState);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Angular">
    ## Advanced Set Up options

    This section includes a list of optional advanced set up options.

    ## Location

    Users logged into the same **Document** ID can see each other's `Presence`, `Cursors`, `Comments` etc.

    However, if you want to add another layer of categorization to organize users together, you can use **Location**.

    <Tip> If a **Document** is like a house, a **Location** is like a room within the house. </Tip>

    To learn more about `Locations`, check out its dedicated section [here](/key-concepts/overview#locations).

    ## Contacts

    When you reply to a comment, you can `@mention` other teammates that are added to a `User's Contacts List`.

    To learn more about creating a `User's Contacts List`, [read here](/key-concepts/users/contact-list).

    ## Detect if Velt SDK is initialized

    This returns true when both the Velt User and Document are initialized:

    ```jsx
    let subscription = this.client.getVeltInitState().subscribe((veltInitState: boolean | undefined) => {
    	console.log('Velt Init State:', veltInitState);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Vue.js">
    ## Advanced Set Up options

    This section includes a list of optional advanced set up options.

    ## Location

    Users logged into the same **Document** ID can see each other's `Presence`, `Cursors`, `Comments` etc.

    However, if you want to add another layer of categorization to organize users together, you can use **Location**.

    <Tip> If a **Document** is like a house, a **Location** is like a room within the house. </Tip>

    To learn more about `Locations`, check out its dedicated section [here](/key-concepts/overview#locations).

    ## Contacts

    When you reply to a comment, you can `@mention` other teammates that are added to a `User's Contacts List`.

    To learn more about creating a `User's Contacts List`, [read here](/key-concepts/users/contact-list).

    ## Detect if Velt SDK is initialized

    This returns true when both the Velt User and Document are initialized:

    ```jsx
    let subscription = client.getVeltInitState().subscribe((veltInitState: boolean | undefined) => {
    	console.log('Velt Init State:', veltInitState);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>


# 2. Authenticate
Source: https://docs.velt.dev/get-started/setup/authenticate

Autheticate your logged in users with the SDK.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    <Warning>It is critical that you do the following steps within a child component and not within the same root component where you placed the VeltProvider.</Warning>
    <Info>Realistically, these steps should be done inside your component that handles authentication.</Info>

    <Steps titleSize="h2">
      <Step title="Import the useIdentify Hook">
        Import the `useIdentify` hook.

        ```js
          import { useIdentify } from '@veltdev/react'
        ```
      </Step>

      <Step title="Fetch relevant user info">
        Create a Velt `User` object.

        ```js

          // Fetch the relevant user info from `yourAuthenticatedUser`
          const { uid, displayName, email, photoURL, organizationId, colorCode } = yourAuthenticatedUser;

          // Create the Velt user object
          const user = {
            userId: uid,
            organizationId: organizationId, // this is the organization id the user belongs to. You should always use this.
            name: displayName,
            email: email,
            photoUrl: photoURL,
            color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
            textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
          };
        ```

        <Info>
          To enable `@mention` in the comments, you need to pass the user's contacts. Learn more about how it works [here](/key-concepts/users/contact-list).
        </Info>
      </Step>

      <Step title=" Pass the User object to the SDK">
        Call the `useIdentify()` hook and pass in the Velt `User` object.

        ```js
          useIdentify(user);
        ```

        <Info>The `useIdentify()` method is asynchronous.</Info>
        <Warning>You must call `useIdentify` within a child component of the `VeltProvider`, or else it will not work.</Warning>
        <Info>Provide an initial within the user object. If the initial is not provided in the identify call, then we will automatically create it using the name. </Info>
      </Step>

      <Step title="(Optional) - Add JWT Tokens for additional security">
        The second parameter of the `useIdentify()` method is an optional configuration object that has a `JWT Token` as a field.

        This can be used to add an additional layer of security to prevent user impersonation.

        ```js
          useIdentify(user, {
            authToken: authToken,
          });
        ```

        See [JWT Tokens](/security/jwt-tokens) for more information on how to generate a `JWT Token` with the Velt SDK.
      </Step>

      <Step title="(Optional) - Force re-login user on identify call">
        `Default: false`

        By default when you identify a **User**, we maintain the user auth in the browser unless you explicitly sign out the logged in user.

        If you are changing a User's access or any metadata and want those changes to be reflected immediately,
        then you should re-call the `identify` method with `forceReset` option set to `true`.

        ```js
        useIdentify(user, {
          forceReset: true
        });

        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="React / Next.js">
    <Note>We recommend following the setup guide that uses `React / Next.js with Hooks` for a cleaner experience.</Note>
    <Warning>It is critical that you do the following steps within a child component and not within the same root component where you placed the VeltProvider.</Warning>
    <Info>Realistically, these steps should be done inside your component that handles authentication.</Info>

    <Steps titleSize="h2">
      <Step title="Get the Velt client">
        Import the `useVeltClient` React hook. You can use this hook within your
        component to fetch the Velt client.

        ```js
        import { useVeltClient } from '@veltdev/react';
        ```

        ```js
        const { client } = useVeltClient();
        ```
      </Step>

      <Step title="Create a useEffect hook">
        The code in the following steps will go inside this `useEffect` hook.

        ```js
          useEffect(() => {
            if (client && yourAuthenticatedUser) {
              // Fetch the relevant user info from your authenticated user object.
            }
          }, [client, yourAuthenticatedUser]);
        ```
      </Step>

      <Step title="Fetch relevant user info">
        Create a Velt `User` object by taking the relevant fields from `yourAuthenticatedUser`.

        ```js

          // Fetch the relevant user info from `yourAuthenticatedUser`
          const { uid, displayName, email, photoURL, organizationId, colorCode } = yourAuthenticatedUser;

          // Create the Velt user object
          const user = {
            userId: uid,
            organizationId: organizationId, // this is the organization id the user belongs to. You should always use this.
            name: displayName,
            email: email,
            photoUrl: photoURL,
            color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
            textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
          };
        ```

        <Info>
          To enable `@mention` in the comments, you need to pass the user's contacts. Learn more about how it works [here](/key-concepts/users/contact-list).
        </Info>
      </Step>

      <Step title=" Pass the User object to the SDK">
        Call the `identify()` method and pass in the Velt `User` object.

        ```js
          await client.identify(user);
        ```

        <Info>The `client.identify()` method is asynchronous.</Info>
        <Warning>You must call `client.identify` within a child component of the `VeltProvider`, or else it will not work.</Warning>
        <Info>Provide an initial within the user object. If the initial is not provided in the identify call, then we will automatically create it using the name. </Info>
      </Step>

      <Step title="(Optional) - Add JWT Tokens for additional security">
        The second parameter of the `client.identify()` method is an optional configuration object that has a `JWT Token` as a field.

        This can be used to add an additional layer of security to prevent user impersonation.

        ```js
          await client.identify(user, {
            authToken: authToken,
          });
        ```

        <Info> We will use the `email` address and `organizationId` passed in the identify call to validate the user later to prevent unauthorized access. </Info>

        See [JWT Tokens](/security/jwt-tokens) for more information on how to generate a `JWT Token` with the Velt SDK.
      </Step>

      <Step title="(Optional) - Force re-login user on identify call">
        `Default: false`

        By default when you identify a **User**, we maintain the user auth in the browser unless you explicitly sign out the logged in user.

        If you are changing a User's access or any metadata and want those changes to be reflected immediately,
        then you should re-call the `identify` method with `forceReset` option set to `true`.

        ```js
        await client.identify(user, {
          forceReset: true
        });

        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="HTML">
    <Steps titleSize="h2">
      <Step title="Fetch relevant user info">
        Create a Velt `User` object.

        ```js
        // Fetch the relevant user info from `yourAuthenticatedUser`
          const { uid, displayName, email, photoURL, organizationId, colorCode } = yourAuthenticatedUser;

          // Create the Velt user object
          const user = {
            userId: uid,
            organizationId: organizationId, // this is the organization id the user belongs to. You should always use this.
            name: displayName,
            email: email,
            photoUrl: photoURL,
            color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
            textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
          };
        ```

        <Info>
          To enable `@mention` in the comments, you need to pass the user's contacts. Learn more about how it works [here](/key-concepts/users/contact-list).
        </Info>
      </Step>

      <Step title="Identify the Logged In User">
        Call this function in the component where you authenticate your `Users` once your Velt client and your `User` object is available.

        If your `.js` files are all in one file, you will need to include the `.js` file on every html page you want the features to be enabled on.

        Make sure you pass the `User` with the fields defined in the `User` object or refer to the example below.

        ```js
        await Velt.identify(yourLoggedInUser)
        ```

        <Info>The `Velt.identify()` method is asynchronous</Info>
        <Warning>You must call `client.identify` within a child component of the `VeltProvider`, or else it will not work.</Warning>
        <Info>Provide an initial within the user object. If the initial is not provided in the identify call, then we will automatically create it using the name. </Info>
      </Step>

      <Step title="(Optional) - Add JWT Tokens for additional security">
        The second parameter of the `client.identify()` method is an optional configuration object that has a `JWT Token` as a field.

        This can be used to add an additional layer of security to prevent user impersonation.

        ```js
        await Velt.identify(user, {
          authToken: authToken,
        });
        ```

        See [JWT Tokens](/security/jwt-tokens) for more information on how to generate a `JWT Token` with the Velt SDK.
      </Step>

      <Step title="(Optional) - Force re-login user on identify call">
        `Default: false`

        By default when you identify a **User**, we maintain the user auth in the browser unless you explicitly sign out the logged in user.

        If you are changing a User's access or any metadata and want those changes to be reflected immediately,
        then you should re-call the `identify` method with `forceReset` option set to `true`.

        ```js
        await Velt.identify(user, {
          forceReset: true
        });

        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Angular">
    <Warning>It is critical that you do the following steps within a child component and not within the same root component where you placed the VeltProvider.</Warning>
    <Info>Realistically, these steps should be done inside your component that handles authentication.</Info>

    <Steps titleSize="h2">
      <Step title="Get User Info">
        Create a Velt User object.

        ```jsx
          // Fetch the relevant user info from `yourAuthenticatedUser`
          const { uid, displayName, email, photoURL, organizationId, colorCode } = yourAuthenticatedUser;

          // Create the Velt user object
          const user = {
            userId: uid,
            organizationId: organizationId, // this is the organization id the user belongs to. You should always use this.
            name: displayName,
            email: email,
            photoUrl: photoURL,
            color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
            textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
          };
        ```
      </Step>

      <Step title="Identify your user">
        ```jsx
        this.client.identify(user);
        ```

        <Info>The `this.client.identify()` method is asynchronous.</Info>
        <Info>Provide an initial within the user object. If the initial is not provided in the identify call, then we will automatically create it using the name. </Info>
      </Step>

      <Step title="(Optional) - Add JWT Tokens for additional security">
        The second parameter of the `useIdentify()` method is an optional configuration object that has a `JWT Token` as a field.

        This can be used to add an additional layer of security to prevent user impersonation.

        ```js
        this.client.identify(user, {
          authToken: authToken,
        });
        ```

        See [JWT Tokens](/security/jwt-tokens) for more information on how to generate a `JWT Token` with the Velt SDK.
      </Step>

      <Step title="(Optional) - Force re-login user on identify call">
        `Default: false`

        By default when you identify a **User**, we maintain the user auth in the browser unless you explicitly sign out the logged in user.

        If you are changing a User's access or any metadata and want those changes to be reflected immediately,
        then you should re-call the `identify` method with `forceReset` option set to `true`.

        ```js
        this.client.identify(user, {
          forceReset: true
        });

        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Vue.js">
    <Warning>It is critical that you do the following steps within a child component and not within the same root component where you placed the VeltProvider.</Warning>
    <Info>Realistically, these steps should be done inside your component that handles authentication.</Info>

    <Steps titleSize="h2">
      <Step title="Get User Info">
        Create a Velt User object.

        ```jsx
          // Fetch the relevant user info from `yourAuthenticatedUser`
          const { uid, displayName, email, photoURL, organizationId, colorCode } = yourAuthenticatedUser;

          // Create the Velt user object
          const user = {
            userId: uid,
            organizationId: organizationId, // this is the organization id the user belongs to. You should always use this.
            name: displayName,
            email: email,
            photoUrl: photoURL,
            color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
            textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
          };
        ```
      </Step>

      <Step title="Identify your user">
        ```jsx
        client.identify(user);
        ```

        <Info>The `client.identify()` method is asynchronous.</Info>
        <Warning>You must call `client.identify()` within a child component of the `VeltProvider`, or else it will not work.</Warning>

        <Info>Provide an initial within the user object. If the initial is not provided in the identify call, then we will automatically create it using the name. </Info>
      </Step>

      <Step title="(Optional) - Add JWT Tokens for additional security">
        The second parameter of the `useIdentify()` method is an optional configuration object that has a `JWT Token` as a field.

        This can be used to add an additional layer of security to prevent user impersonation.

        ```js
        client.identify(user, {
          authToken: authToken,
        });
        ```

        See [JWT Tokens](/security/jwt-tokens) for more information on how to generate a `JWT Token` with the Velt SDK.
      </Step>

      <Step title="(Optional) - Force re-login user on identify call">
        `Default: false`

        By default when you identify a **User**, we maintain the user auth in the browser unless you explicitly sign out the logged in user.

        If you are changing a User's access or any metadata and want those changes to be reflected immediately,
        then you should re-call the `identify` method with `forceReset` option set to `true`.

        ```js
        client.identify(user, {
          forceReset: true
        });

        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js with Hooks
  //Warning: Make sure this is a child component to VeltProvider 
  //and not within the same file where VeltProvider is placed.

  // 1) Import the useIdentify hook
  import { useIdentify } from '@veltdev/react';

  export default function YourAuthComponent() {

    const userService = () => {
      return {
        uid:"123",
        organizationId: "organizationId123", // this is the organization id the user belongs to. You should always use this.
        displayName:"Bob",
        email:"bob@gmail.com",
        photoURL:'https://i.pravatar.cc/300',
        color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
        textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
      }
    }

    let yourAuthenticatedUser = userService()

    // 2) Fetch the relevant User info from yourAuthenticatedUser
    const { uid, displayName, email, photoURL, organizationId, colorCode } = yourAuthenticatedUser;

    // Create the Velt user object
    const user = {
      userId: uid,
      organizationId: organizationId, // this is the organization id the user belongs to. You should always use this.
      name: displayName,
      email: email,
      photoUrl: photoURL,
      color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
      textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
    };

    //3) Pass the user object to the SDK
    useIdentify(user)
        

    return (
      <div>
      // Your auth component template
      </div>
    );
  }

  ```

  ```js React / Next.js
  //Warning: Make sure this is a child component to VeltProvider 
  //and not within the same file where VeltProvider is placed.

  // 1) Get the Velt Client
  import { useVeltClient } from '@veltdev/react';
  import { useEffect } from 'react';


  export default function YourAuthComponent() {

    const userService = () => {
      return {
        uid:"123",
        organizationId: "organizationId123", // this is the organization id the user belongs to. You should always use this.
        displayName:"Bob",
        email:"bob@gmail.com",
        photoURL:'https://i.pravatar.cc/300',
        color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
        textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
      }
    }

    let yourAuthenticatedUser = userService()

    const { client } = useVeltClient();

    // 2) Create a useEffect hook
    useEffect(() => {
      const initVelt = async () => {
        if (client && yourAuthenticatedUser) {

          // 3) Fetch the relevant user info from yourAuthenticatedUser
          const { uid, displayName, email, photoURL, organizationId, colorCode } = yourAuthenticatedUser;

          // Create the Velt user object
          const user = {
            userId: uid,
            organizationId: organizationId, // this is the organization id the user belongs to. You should always use this.
            name: displayName,
            email: email,
            photoUrl: photoURL,
            color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
            textColor: textColor, // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
          };

          //4) Pass the user object to the SDK
          await client.identify(user)
        }
      }
      initVelt().catch(console.error)
    }, [client, yourAuthenticatedUser]);

    return (
      <div>
      // Your auth component template
      </div>
    );
  }

  ```

  ```html HTML

  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Collaboration App</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
      <script>
        async function loadVelt() {
          await Velt.init("YOUR_VELT_API_KEY");
          if (Velt) {
            // You need to pass these fields about your logged in user to us.
            const yourLoggedInUser = {
              userId: '9snk30djks9e4mndk',
              organizationId: 'organizationId123', // this is the organization id the user belongs to. You should always use this.
              name: 'John Doe',
              photoUrl: 'https://i.pravatar.cc/300', //(optional)
              color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
              textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
              email: 'jdoe@xyz.com',
              plan: 'free' //(optional)
            }
            // 1) Identify the Logged In User
            await Velt.identify(yourLoggedInUser)
          }       
        }
      </script>
    </head>
    <body>
      
    </body>
  </html>
  ```

  ```jsx Angular
  import { Component } from '@angular/core';
  import { initVelt } from '@veltdev/client';
  import { Velt } from '@veltdev/types';

  @Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.scss']
  })
  export class AppComponent {
    client?: Velt;

    constructor() {
      this.initVelt();
    }

    // Initialize velt sdk
    async initVelt() {
      this.client = await initVelt('YOUR_APIKEY');
      this.setUser();
    }



    // login with your user in velt
    setUser() {
      if (this.client) {
        const user = {
          userId: uid,
          organizationId: 'organizationId123', // this is the organization id the user belongs to. You should always use this.
          name: displayName,
          email: email,
          photoUrl: photoURL,
          color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
          textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
        }; // Your user object here 
        this.client.identify(user);
      }
    }
  }
  ```

  ```html Vue.js
  <script>
  import Vue from "vue";
  import { initVelt } from "@veltdev/client";

  var client;

  const initializeVelt = async () => {
    client = await initVelt("YOUR_APIKEY");
    setUser();
  }


  const setUser = () => {
    if (client) {
      const user = {
        userId: uid,
        organizationId: 'organizationId123', // this is the organization id the user belongs to. You should always use this.
        name: displayName,
        email: email,
        photoUrl: photoURL,
        color: colorCode, // Use valid Hex code value. Used in the background color of the user's avatar.
        textColor: textColor // Use valid Hex code value. Used in the text color of the user's intial when photoUrl is not present.
      }; // Your user object here
      client.identify(user);
    }
  }

  export default Vue.extend({
    name: "App",
    mounted() {
      initializeVelt();
    },
  });
  </script>
  ```
</RequestExample>


# 3. Initialize Document
Source: https://docs.velt.dev/get-started/setup/initialize-document



A **Document** represents a shared collaborative space where users can interact. Documents live inside the Organization.

Learn more about documents [here](/key-concepts/documents).

The Set Document method takes two parameters:

* `documentId`: The unique identifier for the document.
* `metadata`: (optional) This is a key/value pair object where you can set metadata about the document such as `documentName`. documentName is a special field that we use to display the document name in some Velt Components.

<Warning>The SDK will not work without this call.</Warning>

## 1. Initialize Document for the current Organization

* By default, users can only access documents within their own organization. Use this to set the document for the current organization the user is logged into.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    <Warning>It is critical that you do the following steps within a child component and not within the same root component where you placed the VeltProvider.</Warning>
    <Info>Realistically, these steps should be done inside your component that represents your document.</Info>

    ```jsx
    import { useSetDocument } from '@veltdev/react';
    useSetDocument('unique-document-id', {documentName: 'Document Name'});
    ```
  </Tab>

  <Tab title="React / Next.js">
    <Warning>It is critical that you do the following steps within a child component and not within the same root component where you placed the VeltProvider.</Warning>
    <Info>Realistically, these steps should be done inside your component that represents your document.</Info>

    ```jsx
    const { client } = useVeltClient();

    useEffect(() => {
        if (client) {
            client.setDocument('unique-document-id', {documentName: 'Document Name'});
        }
    }, [client]);
    ```
  </Tab>

  <Tab title="HTML">
    ```jsx
    if(Velt){
        Velt.setDocument('unique-document-id', {documentName: 'Document Name'});
    }
    ```
  </Tab>

  <Tab title="Angular">
    ```jsx
    if (this.client) {
      this.client.setDocument('unique-document-id', {documentName: 'Document Name'});
    }
    ```
  </Tab>

  <Tab title="Vue.js">
    ```jsx
    if (client) {
      client.setDocument('unique-document-id', {documentName: 'Document Name'});
    }
    ```
  </Tab>
</Tabs>

## 2. Initialize Document for a different Organization

* Use this to access a document from an organization different than the one the user is logged into.
* You can enable cross-organization access by specifying the `organizationId` of the target document in the document metadata.
* Ensure that the user has access to the target document in the target organization.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    <Warning>It is critical that you do the following steps within a child component and not within the same root component where you placed the VeltProvider.</Warning>
    <Info>Realistically, these steps should be done inside your component that represents your document.</Info>

    ```jsx
    import { useSetDocument } from '@veltdev/react';
    useSetDocument('unique-document-id', {organizationId: 'ANOTHER_ORGANIZATION_ID'});
    ```
  </Tab>

  <Tab title="React / Next.js">
    <Warning>It is critical that you do the following steps within a child component and not within the same root component where you placed the VeltProvider.</Warning>
    <Info>Realistically, these steps should be done inside your component that represents your document.</Info>

    ```jsx
    const { client } = useVeltClient();

    useEffect(() => {
        if (client) {
            client.setDocument('unique-document-id', {organizationId: 'ANOTHER_ORGANIZATION_ID'});
        }
    }, [client]);
    ```
  </Tab>

  <Tab title="HTML">
    ```jsx
    if(Velt){
        Velt.setDocument('unique-document-id', {organizationId: 'ANOTHER_ORGANIZATION_ID'});
    }
    ```
  </Tab>

  <Tab title="Angular">
    ```jsx
    if (this.client) {
      this.client.setDocument('unique-document-id', {organizationId: 'ANOTHER_ORGANIZATION_ID'});
    }
    ```
  </Tab>

  <Tab title="Vue.js">
    ```jsx
    if (client) {
      client.setDocument('unique-document-id', {organizationId: 'ANOTHER_ORGANIZATION_ID'});
    }
    ```
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js with Hooks
  // 1) Create a component that will represent your document 

  //Warning: Make sure this is a child component to VeltProvider 
  //and not within the same file where VeltProvider is placed.

  // 2) Import the useSetDocument hook
  import { useSetDocument } from '@veltdev/react';

  export default function YourDocument() {

    // 3) Set a document ID
    useSetDocument('unique-document-id', {documentName: 'Document Name'});

    return (
      <div>
        //your document template - add Velt Components here
      </div>
      
    );
  }
  ```

  ```js React / Next.js
  // 1) Create a component that will represent your document 

  //Warning: Make sure this is a child component to VeltProvider 
  //and not within the same file where VeltProvider is placed.

  // 2) Get the Velt client
  import { useVeltClient } from '@veltdev/react';
  import { useEffect, useState } from 'react';

  export default function YourDocument() {

    const { client } = useVeltClient();

    // 3) Create a useEffect hook

    useEffect(() => {
      if (client) {
        // 4) Set a document ID
        client.setDocument('unique-document-id', {documentName: 'Document Name'});
      }
    }, [client]);

    return (
      <div>
        //your document template - add Velt Components here
      </div>
      
    );
  }
  ```

  ```html HTML

  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Collaboration App</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
      <script>
        async function loadVelt() {
          if (Velt) {
            await Velt.init("YOUR_VELT_API_KEY");
            Velt.setDocument('CUSTOM_DOCUMENT_ID', {documentName: 'Document Name'});
          }       
        }
      </script>
    </head>
    <body>
      //your document template - add Velt Components here
    </body>
  </html>
  ```

  ```jsx Angular
  import { Component } from '@angular/core';
  import { initVelt } from '@veltdev/client';
  import { Velt } from '@veltdev/types';

  @Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.scss']
  })
  export class AppComponent {
    client?: Velt;

    constructor() {
      this.initVelt();
    }

    // Initialize velt sdk
    async initVelt() {
      this.client = await initVelt('YOUR_APIKEY');
      this.setDocument();
    }

    // set document in velt
    setDocument() {
      if (this.client) {
        this.client.setDocument('YOUR_DOCUMENT_ID', {documentName: 'Document Name'});
      }
    }

  }


  //                 Your HTML File                   //

  <div>
    // to add comments (ideally add to root component ex: AppComponent)
    <velt-comments></velt-comments>

    // comment tool
    <velt-comment-tool></velt-comment-tool>

    // comment sidebar
    <velt-comments-sidebar></velt-comments-sidebar>

    // Add other feature tags ...
  </div>

  ```

  ```html Vue.js
  <template>
  	... your html
  	<velt-comments></velt-comments>
  <velt-presence></velt-presence>
    ... Add other velt elements as required
  </template>

  <script>
  import Vue from "vue";
  import { initVelt } from "@veltdev/client";

  var client;

  const initializeVelt = async () => {
    client = await initVelt("YOUR_APIKEY");
    setDocument();
  }

  const setDocument = () => {
    if (client) {
      client.setDocument("YOUR_DOCUMENT_ID", { documentName: "Document Name" });
    }
  }


  export default Vue.extend({
    name: "App",
    mounted() {
      initializeVelt();
    },
  });
  </script>
  ```
</RequestExample>


# 1. Install
Source: https://docs.velt.dev/get-started/setup/install

Steps to integrate Velt into an existing app

<Tabs>
  <Tab title="React / Next.js with Hooks">
    <Steps titleSize="h2">
      <Step title="Install React package">
        npm:

        ```bash
        npm install @veltdev/react
        ```

        yarn:

        ```bash
        $ yarn add @veltdev/react
        ```
      </Step>

      <Step title="Install types (optional)">
        If you're using TypeScript, you can install the types package.

        ```bash
        npm install --save-dev @veltdev/types
        ```
      </Step>

      <Step title="Grab your Velt API Key">
        Go to [console.velt.dev](https://console.velt.dev) and grab your Velt API Key

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-api-key.png)
        </Frame>
      </Step>

      <Step title="Safelist your domain">
        In the Velt console, add the URL where your app is deployed to the list of Managed Domains.

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-add-website.png)
        </Frame>
      </Step>

      <Step title="Add the VeltProvider">
        Add the VeltProvider component to the root of your app.

        Add your Velt API key.

        ```js
        import { VeltProvider } from '@veltdev/react';
        ```

        ```js
        <VeltProvider apiKey="YOUR_API_KEY">
          <YourRootComponent/>
        </VeltProvider>
        ```
      </Step>

      <Step title="(Next.js only) Add 'use client' to your root component">
        ```js
        'use client'

        import { VeltProvider } from '@veltdev/react';

        <VeltProvider apiKey="YOUR_API_KEY">
          <YourRootComponent/>
        </VeltProvider>
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="React / Next.js">
    <Note>We recommend following the setup guide that uses `React / Next.js with Hooks` for a cleaner experience.</Note>

    <Steps titleSize="h2">
      <Step title="Install React package">
        npm:

        ```bash
        npm install @veltdev/react
        ```

        yarn:

        ```bash
        $ yarn add @veltdev/react
        ```
      </Step>

      <Step title="Install types (optional)">
        If you're using TypeScript, you can install the types package.

        ```bash
        npm install --save-dev @veltdev/types
        ```
      </Step>

      <Step title="Grab your Velt API Key">
        Go to [console.velt.dev](https://console.velt.dev) and grab your Velt API Key

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-api-key.png)
        </Frame>
      </Step>

      <Step title="Safelist your domain">
        In the Velt console, add the URL where your app is deployed to the list of Managed Domains.

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-add-website.png)
        </Frame>
      </Step>

      <Step title="Add the VeltProvider">
        Add the VeltProvider component to the root of your app.

        Add your Velt API key.

        ```js
        import { VeltProvider } from '@veltdev/react';
        ```

        ```js
        <VeltProvider apiKey="YOUR_API_KEY">
          <YourRootComponent/>
        </VeltProvider>
        ```
      </Step>

      <Step title="(Next.js only) Add 'use client' to your root component">
        ```js
        'use client'

        import { VeltProvider } from '@veltdev/react';

        <VeltProvider apiKey="YOUR_API_KEY">
          <YourRootComponent/>
        </VeltProvider>
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="HTML">
    <Steps titleSize="h2">
      <Step title="Grab your Velt API Key">
        Go to [console.velt.dev](https://console.velt.dev) and grab your Velt API Key

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-api-key.png)
        </Frame>
      </Step>

      <Step title="Safelist your domain">
        In the Velt console, add the URL where your app is deployed to the list of Managed Domains.

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-add-website.png)
        </Frame>
      </Step>

      <Step title="Import the Velt Script tag">
        ```html
        <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
        ```
      </Step>

      <Step title="Initialize with your API Key">
        Put this in your root app script:

        ```js
        async function loadVelt() {
            await Velt.init("YOUR_VELT_API_KEY");
        }
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Angular">
    <Steps>
      <Step title="Install client library">
        ```jsx
        npm i @veltdev/client
        ```
      </Step>

      <Step title="Install types library (optional)">
        If you are using Typescript, install the types library:

        ```jsx
        npm i @veltdev/types --save-dev
        ```
      </Step>

      <Step title="Grab your Velt API Key">
        Go to [console.velt.dev](https://console.velt.dev) and grab your Velt API Key

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-api-key.png)
        </Frame>
      </Step>

      <Step title="Safelist your domain">
        In the Velt console, add the URL where your app is deployed to the list of Managed Domains.

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-add-website.png)
        </Frame>
      </Step>

      <Step title="Add Custom Elements Schema in App Module">
        Add `schemas: [CUSTOM_ELEMENTS_SCHEMA]` to your App Module:

        ```jsx
        import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';
        import { BrowserModule } from '@angular/platform-browser';

        import { AppRoutingModule } from './app-routing.module';
        import { AppComponent } from './app.component';

        @NgModule({
          declarations: [
            AppComponent
          ],
          imports: [
            BrowserModule,
            AppRoutingModule
          ],
          providers: [],
          bootstrap: [AppComponent],
          schemas: [CUSTOM_ELEMENTS_SCHEMA], // Add this line
        })
        export class AppModule { }
        ```
      </Step>

      <Step title="Get the Velt Client ">
        ```jsx
        import { initVelt } from '@veltdev/client';
        ```

        ```jsx
        this.client = await initVelt('YOUR_APIKEY');
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Vue.js">
    <Steps>
      <Step title="Install client library">
        ```jsx
        npm i @veltdev/client
        ```
      </Step>

      <Step title="Install types library (optional)">
        If you are using Typescript, install the types library:

        ```jsx
        npm i @veltdev/types --save-dev
        ```
      </Step>

      <Step title="Grab your Velt API Key">
        Go to [console.velt.dev](https://console.velt.dev) and grab your Velt API Key

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-api-key.png)
        </Frame>
      </Step>

      <Step title="Safelist your domain">
        In the Velt console, add the URL where your app is deployed to the list of Managed Domains.

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/velt-console-add-website.png)
        </Frame>
      </Step>

      <Step title="Allow Velt Elements in Main.js">
        In main.js, add the following code to allow Velt elements in your Vue app:

        ```html
        Vue.config.ignoredElements = [
          /velt-*/
        ]
        ```
      </Step>

      <Step title="Get the Velt Client ">
        ```jsx
        import { initVelt } from '@veltdev/client';
        ```

        ```jsx
        client = await initVelt("YOUR_APIKEY");
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js with Hooks

  'use client' // Add this line for Next.js only

  import { VeltProvider } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="YOUR_API_KEY">
        <YourRootComponent/>
      </VeltProvider>
    );
  }
  ```

  ```jsx React / Next.js
  'use client' // Add this line for Next.js only

  import { VeltProvider } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="YOUR_API_KEY">
        <YourRootComponent/>
      </VeltProvider>
    );
  }
  ```

  ```html HTML

  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Collaboration App</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
      <script>
        async function loadVelt() {
          await Velt.init("YOUR_VELT_API_KEY");
        }
      </script>
    </head>
    <body>
      
    </body>
  </html>
  ```

  ```jsx Angular
  import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';
  import { BrowserModule } from '@angular/platform-browser';

  import { AppRoutingModule } from './app-routing.module';
  import { AppComponent } from './app.component';

  @NgModule({
    declarations: [
      AppComponent
    ],
    imports: [
      BrowserModule,
      AppRoutingModule
    ],
    providers: [],
    bootstrap: [AppComponent],
    schemas: [CUSTOM_ELEMENTS_SCHEMA], // Add this line
  })
  export class AppModule { }


  // App Component

  import { initVelt } from '@veltdev/client';
  @Component({
    selector: 'app-root',
  })
  export class AppComponent implements OnInit {
    client: any;
    async ngOnInit() {
      this.client = await initVelt('YOUR_APIKEY');
    }
  }

  ```

  ```js Vue.js
  // main.js
  Vue.config.ignoredElements = [
    /velt-*/
  ]

  // App.vue
  import { initVelt } from '@veltdev/client';

  export default {
    name: 'App',
    async mounted() {
      client = await initVelt('YOUR_APIKEY');
    }
  }
  ```
</RequestExample>


# AG Grid
Source: https://docs.velt.dev/integrations/ag-grid



## How to add Velt attributes to AG Grid cells?

Some Velt features like live selection require adding Velt specific attributes to the cell elements. Here's how you can do it:

1. In your AG Grid column definitions, use the `cell renderer` property to customize the cell rendering.
2. Within the `cell renderer`, add the necessary Velt attributes to the cell element.

Here's a code sample that shows how to add the `data-velt-live-selection-enabled` attribute and other required attributes to AG Grid cell div tags:

```jsx
colDefs: ColDef[] = [
  {
    field: "FIELD_NAME",
    cellRenderer: (params: any) => {
      // Let AG Grid render the default cell, then modify the outer div
      setTimeout(() => {
        const cellElement = params.eGridCell;
        // Add Velt attributes to the parent cell div
        cellElement.setAttribute('data-velt-live-selection-enabled', 'true');
        // Add other Velt attributes as required
      }, 0);  // Timeout to wait for the DOM to be ready
      return params.value;  // Use the default renderer, which is the text value
    },
    editable: true, // Set to true if the column is editable
  },
];
```


# null
Source: https://docs.velt.dev/key-concepts/access-control/overview



### Overview

Access Control is maintained at two levels:

1. Organization level
2. Document level

### 1. Organization Level

Here are some properties of Organization level access control:

* Access to an Organization can be granted or revoked by adding or removing a User from an organization. A user can be added to multiple organizations but can only log in to one organization at a time.
* By default all organization users have access to all organization data including documents, locations and user contacts.
* Access to documents can be restricted by setting permissions at the document level. (more below)

### 2. Document Level

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/key-concepts/document-access.png)
Here are some properties of Organization level access control:

* A document has three types of access:
  * `public`: `default` Any user who logs into the given document id can access the document whether or not they are part of the organization or the document.
  * `organizationPrivate`: Only all organization users have access to the document.
  * `restricted`: Only users explicitly added to the document have access. Organization users not explicitly added will not have access.

* Access to a Document can be granted or revoked by adding or removing a User from a document. Document level access overrides organization level access. Eg: if a document is restricted, only users explicitly added to the document will have access to it.

* Access can also be granted or revoked by adding or removing organization user groups. `(coming soon)`

* Organization users can access the entire Organization contact list in the Document.

* Guest (Non-organization) users who have access to the document cannot access the Organization contact list. If you want to show some organization contacts to these guest users, then you need to explicitly add those contacts to the document.


# Setup
Source: https://docs.velt.dev/key-concepts/documents/set-document



A **Document** represents a shared collaborative space where users can interact. Documents live inside the Organization.

Documents contain:

* All feature data (e.g., Comments, Presence, Cursors, etc.).
* Locations
* Users: These are different from Organization Users. (more details in Access Control section)

Users logged into the same `Document ID` can see each other's `Presence`, `Cursors`, `Comments` etc.

For example, in a slide presentation application, the entire slide deck is a document.

## Set a Single Document

* Use this to initialize and subscribe to a single Document.
* Once you set the document, you will start receiving realtime updates from the document.
* Params:
  * `documentId`: The unique identifier for the document.
  * `metadata`: (optional) This is a key/value pair object where you can set metadata about the document such as `documentName`. documentName is a special field that we use to display the document name in some Velt Components.

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    useSetDocument('unique-document-id', {documentName: 'Document Name'});
    ```

    **Using API:**

    ```jsx
    const { client } = useVeltClient();

    useEffect(() => {
        if (client) {
            client.setDocument('unique-document-id', {documentName: 'Document Name'});
        }
    }, [client]);
    ```
  </Tab>

  <Tab title="HTML">
    ```jsx
    if(Velt){
        Velt.setDocument('unique-document-id', {documentName: 'Document Name'});
    }
    ```
  </Tab>

  <Tab title="Angular">
    ```jsx
    this.client.setDocument('unique-document-id', {documentName: 'Document Name'});
    ```
  </Tab>

  <Tab title="Vue.js">
    ```jsx
    client.setDocument('unique-document-id', {documentName: 'Document Name'});
    ```
  </Tab>
</Tabs>

## Set Multiple Documents

* Use this to set and subscribe to multiple documents at the same time.
* You can specify 30 documents at a time.
* The first document in the list will be considered as the root document.
* For features like comments, notifications, recorder, reactions etc. you will be able to read and write to multiple documents at the same time.
* For features like cursors, presence, huddle, live state sync etc. it will default to the root document.
* Sidebar will automatically show data from all the documents.

Params:

* `documents`: [Document\[\]](/api-reference/sdk/models/data-models#document)
* `options?`: [SetDocumentsRequestOptions](/api-reference/sdk/models/data-models#setdocumentsrequestoptions)

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    const documents = [
      {
        id: 'document-1',
        metadata: {
          documentName: 'Document 1'
        }
      },
      {
        id: 'document-2',
        metadata: {
          documentName: 'Document 2'
        }
      }
    ];
    const { setDocuments } = useSetDocuments();
    setDocuments(documents);
    ```

    **Using API:**

    ```jsx
    const documents = [
      {
        id: 'document-1',
        metadata: {
          documentName: 'Document 1'
        }
      },
      {
        id: 'document-2',
        metadata: {
          documentName: 'Document 2'
        }
      }
    ];
    client.setDocuments(documents);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using API:**

    ```js
    const documents = [
      {
        id: 'document-1',
        metadata: {
          documentName: 'Document 1'
        }
      },
      {
        id: 'document-2',
        metadata: {
          documentName: 'Document 2'
        }
      }
    ];
    Velt.setDocuments(documents);
    ```
  </Tab>
</Tabs>

### Read/Write data from multiple documents on the same page

* If you want to display data (eg: comments) from multiple documents on the same page, add `data-velt-document-id` attribute to the container that contains the `document`.
* It will be used to identify which part of the DOM belongs to which document.

```html
<div class="document-container" data-velt-document-id="document-1">
  ...
</div>

<div class="document-container" data-velt-document-id="document-2">
  ...
</div>

<div class="document-container" data-velt-document-id="document-3">
  ...
</div>
```

## Unset a Single Document

* Use this to unsubscribe from the root Document
* Once you unset the document, you will no longer receive realtime updates from the document.
* For some parts of your app, you may not need Velt. In such cases, you can unset the document.

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    useUnsetDocumentId();
    ```

    **Using API:**

    ```jsx
    const { client } = useVeltClient();

    useEffect(() => {
        if (client) {
            client.unsetDocumentId();
        }
    }, [client]);
    ```
  </Tab>

  <Tab title="HTML">
    ```jsx
    Velt.unsetDocumentId();
    ```
  </Tab>

  <Tab title="Angular">
    ```jsx
    this.client.unsetDocumentId();
    ```
  </Tab>

  <Tab title="Vue.js">
    ```jsx
    client.unsetDocumentId();
    ```
  </Tab>
</Tabs>

## Unset Multiple Documents

* Use this to unsubscribe from all documents at once.

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    useUnsetDocuments();
    ```

    **Using API:**

    ```jsx
    const { client } = useVeltClient();

    useEffect(() => {
        if (client) {
            client.unsetDocuments();
        }
    }, [client]);
    ```
  </Tab>

  <Tab title="HTML">
    ```jsx
    Velt.unsetDocuments();
    ```
  </Tab>

  <Tab title="Angular">
    ```jsx
    this.client.unsetDocuments();
    ```
  </Tab>

  <Tab title="Vue.js">
    ```jsx
    client.unsetDocuments();
    ```
  </Tab>
</Tabs>

## Get Document Metadata

* Use this to get the metadata of a Document.
* This is useful when you want to display the document name in your app or any custom metadata that you have set.
* This returns a subscription with [`DocumentMetadata`](/api-reference/sdk/models/data-models#documentmetadata) object.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const { client } = useVeltClient();

    useEffect(() => {
        if (client) {
            client.getDocumentMetadata().subscribe((documentMetadata) => {
                console.log("Current document metadata: ", documentMetadata);
            });
        }
    }, [client]);
    ```
  </Tab>

  <Tab title="HTML">
    ```jsx
    Velt.getDocumentMetadata().subscribe((documentMetadata) => {
        console.log("Current document metadata: ", documentMetadata);
    });
    ```
  </Tab>

  <Tab title="Angular">
    ```jsx
    this.client.getDocumentMetadata().subscribe((documentMetadata) => {
        console.log("Current document metadata: ", documentMetadata);
    });
    ```
  </Tab>

  <Tab title="Vue.js">
    ```jsx
    client.getDocumentMetadata().subscribe((documentMetadata) => {
        console.log("Current document metadata: ", documentMetadata);
    });
    ```
  </Tab>
</Tabs>

## Access Documents from Other Organizations

* By default, users can only access documents within their own organization.
* Enable cross-organization access by specifying the `organizationId` of the target document in the document metadata.
* Ensure that the user has access to the target document in the target organization.

<Tabs>
  <Tab title="React / Next.js">
    **Using Hook:**

    ```jsx
    {/* Single Document */}
    useSetDocument("DOCUMENT_ID", {
      organizationId: 'ANOTHER_ORGANIZATION_ID'
    });

    {/* Multiple Documents */}
    const documents = [
      {
        id: 'document-1',
        metadata: {
          documentName: 'Document 1'
        }
      },
      {
        id: 'document-2',
        metadata: {
          documentName: 'Document 2'
        }
      }
    ];
    useSetDocuments(documents, {
      organizationId: 'ANOTHER_ORGANIZATION_ID'
    });
    ```

    **Using API:**

    ```jsx
    {/* Single Document */}
    client.setDocument("DOCUMENT_ID", {
      organizationId: 'ANOTHER_ORGANIZATION_ID'
    });

    {/* Multiple Documents */}
    const documents = [
      {
        id: 'document-1',
        metadata: {
          documentName: 'Document 1'
        }
      },
      {
        id: 'document-2',
        metadata: {
          documentName: 'Document 2'
        }
      }
    ];
    client.setDocuments(documents, {
      organizationId: 'ANOTHER_ORGANIZATION_ID'
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    {/* Single Document */}
    Velt.setDocument(DOCUMENT_ID, {
      organizationId: 'ANOTHER_ORGANIZATION_ID'
    });

    {/* Multiple Documents */}
    const documents = [
      {
        id: 'document-1',
        metadata: {
          documentName: 'Document 1'
        }
      },
      {
        id: 'document-2',
        metadata: {
          documentName: 'Document 2'
        }
      }
    ];
    Velt.setDocuments(documents, {
      organizationId: 'ANOTHER_ORGANIZATION_ID'
    });
    ```
  </Tab>
</Tabs>


# Use Multiple Locations at once
Source: https://docs.velt.dev/key-concepts/locations/multiple-locations



There are three main steps to adding multiple locations:

1. Add a root location
2. Add additional locations
3. Bind elements containers to `locations`

<Steps>
  <Step title="Add a root location">
    <Tabs>
      <Tab title="React / Next.js with Hooks">
        ```jsx
        useSetDocument('some_document_id');

        useSetLocation({ 
          'id': 'locationRoot',
          'locationName': 'PageWithVideo',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
        })
        ```
      </Tab>

      <Tab title="React / Next.js">
        ```jsx
        client.setDocument('some_document_id');

        client.setLocation({ 
          'id': 'locationRoot',
          'locationName': 'PageWithVideo',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
        });
        ```
      </Tab>

      <Tab title="HTML">
        ```jsx
        Velt.setDocument('some_document_id');

        Velt.setLocation({ 
          'id': 'locationRoot',
          'locationName': 'PageWithVideo',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
        });
        ```
      </Tab>

      <Tab title="Angular">
        ```jsx
        this.client.setDocument('some_document_id');

        this.client.setLocation({ 
          'id': 'locationRoot',
          'locationName': 'PageWithVideo',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
        })
        ```
      </Tab>

      <Tab title="Vue.js">
        ```jsx
        client.setDocument('some_document_id');

        client.setLocation({ 
          'id': 'locationRoot',
          'locationName': 'PageWithVideo',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
        })
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Add additional locations">
    Add additional locations on the page by using set location with the `true` parameter:

    <Tabs>
      <Tab title="React / Next.js with Hooks">
        ```jsx
        useSetLocation({ 
          'id': 'locationId1',
          'locationName': 'Scene1LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '120'
        }, true)

        useSetLocation({
          'id': 'locationId2',
          'locationName': 'Scene2LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '50'
        }, true)

        useSetLocation({
          'id': 'locationId3',
          'locationName': 'Scene3LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '80'
        }, true)
        ```
      </Tab>

      <Tab title="React / Next.js">
        ```jsx
        client.setLocation({ 
          'id': 'locationId1',
          'locationName': 'Scene1LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '120'
        }, true)

        client.setLocation({
          'id': 'locationId2',
          'locationName': 'Scene2LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '50'
        }, true)

        client.setLocation({
          'id': 'locationId3',
          'locationName': 'Scene3LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '80'
        }, true)
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx
        Velt.setLocation({ 
          'id': 'locationId1',
          'locationName': 'Scene1LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'page': 'scene1',
          'videoFrame': '120'
        }, true)

        Velt.setLocation({
          'id': 'locationId2',
          'locationName': 'Scene2LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'page': 'scene2',
          'videoFrame': '50'
        }, true)

        Velt.setLocation({
          'id': 'locationId3',
          'locationName': 'Scene3LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'page': 'scene3',
          'videoFrame': '80'
        }, true)
        ```
      </Tab>

      <Tab title="Angular">
        ```jsx
        this.client.setLocation({ 
          'id': 'locationId1',
          'locationName': 'Scene1LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '120'
        }, true)

        this.client.setLocation({
          'id': 'locationId2',
          'locationName': 'Scene2LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '50'
        }, true)

        this.client.setLocation({
          'id': 'locationId3',
          'locationName': 'Scene3LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '80'
        }, true)
        ```
      </Tab>

      <Tab title="Vue.js">
        ```jsx
        client.setLocation({ 
          'id': 'locationId1',
          'locationName': 'Scene1LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '120'
        }, true)

        client.setLocation({
          'id': 'locationId2',
          'locationName': 'Scene2LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '50'
        }, true)

        client.setLocation({
          'id': 'locationId3',
          'locationName': 'Scene3LocationName',
          'version': {
        		'id': 'v1.0',
        		'name': 'Version Name'
        	},
          'videoFrame': '80'
        }, true)
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Bind element containers to locations">
    * When you render multiple elements representing different locations on the same page,
      then you can bind each element container to the correct `location` by adding the `data-velt-location-id` attribute.

    * This ensures that the comment added within the location is associated with the correct location.

    <Tabs>
      <Tab title="React / Next.js with Hooks">
        ```jsx
        <div class="page">
          <div id="location1-id" data-velt-location-id="location1-id">
            <div class="card">
              // any content
            </div>
          </div>
          <div id="location2-id" data-velt-location-id="location2-id">
            <div class="card">
              // any content
            </div>
          </div>
        </div>
        ```
      </Tab>

      <Tab title="React / Next.js">
        ```jsx
        <div class="page">
          <div id="location1-id" data-velt-location-id="location1-id">
            <div class="card">
              // any content
            </div>
          </div>
          <div id="location2-id" data-velt-location-id="location2-id">
            <div class="card">
              // any content
            </div>
          </div>
        </div>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```jsx

        <div class="page">
          <div id="location1-id" data-velt-location-id="location1-id">
            <div class="card">
              // any content
            </div>
          </div>
          <div id="location2-id" data-velt-location-id="location2-id">
            <div class="card">
              // any content
            </div>
          </div>
        </div>
        ```
      </Tab>

      <Tab title="Angular">
        ```jsx
        <div class="page">
          <div id="location1-id" data-velt-location-id="location1-id">
            <div class="card">
              // any content
            </div>
          </div>
          <div id="location2-id" data-velt-location-id="location2-id">
            <div class="card">
              // any content
            </div>
          </div>
        </div>
        ```
      </Tab>

      <Tab title="Vue.js">
        ```jsx
        <div class="page">
          <div id="location1-id" data-velt-location-id="location1-id">
            <div class="card">
              // any content
            </div>
          </div>
          <div id="location2-id" data-velt-location-id="location2-id">
            <div class="card">
              // any content
            </div>
          </div>
        </div>
        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>

<RequestExample>
  ```js React / Next.js with Hooks
  import { useSetDocument, useSetLocation } from '@veltdev/react';

  export default function YourDocument() {


    //Set Document ID
    useSetDocument('some_document_id');

    //Set Root Location
    useSetLocation({
        'id': 'locationId1',
        'locationName': 'Scene1LocationName',
        'version': {
          'id': 'v1.0',
          'name': 'Version Name'
        },
        'page': 'mainPage',
        'videoFrame': '120'
        // You can keep adding more field to make the location very specific.
        // The field names can be anything.
    })

    //Add another Location
    useSetLocation({
        'id': 'locationId2',
        'locationName': 'Scene2LocationName',
        'version': {
          'id': 'v1.0',
          'name': 'Version Name'
        },
        'page': 'mainPage',
        'videoFrame': '240'
        // You can keep adding more field to make the location very specific.
        // The field names can be anything.
    },true)


    return (
      <div>
        <div class="page">
          <div id="location1-id" data-velt-location-id="location1-id">
            <div class="card">
              // any content
            </div>
          </div>
          <div id="location2-id" data-velt-location-id="location2-id">
            <div class="card">
              // any content
            </div>
          </div>
        </div>
      </div>
      
    );
  }
  ```

  ```js React / Next.js
  import { useVeltClient } from '@veltdev/react';
  import { useEffect, useState } from 'react';

  export default function YourDocument() {

    const { client } = useVeltClient();

    useEffect(() => {
      
      if (client) {
          //Set Document ID
          client.setDocument('some_document_id');

          //Set Root Location
          client.setLocation({
              'id': 'locationId1',
              'locationName': 'Scene1LocationName',
              'version': {
                'id': 'v1.0',
                'name': 'Version Name'
              },
              'page': 'mainPage',
              'videoFrame': '120'
              // You can keep adding more field to make the location very specific.
              // The field names can be anything.
          })

          //Add another Location
          client.setLocation({
              'id': 'locationId2',
              'locationName': 'Scene2LocationName',
              'version': {
                'id': 'v1.0',
                'name': 'Version Name'
              },
              'page': 'mainPage',
              'videoFrame': '240'
              // You can keep adding more field to make the location very specific.
              // The field names can be anything.
          },true)
      }
    }, [client]);

    return (
      <div>
        <div class="page">
          <div id="location1-id" data-velt-location-id="location1-id">
            <div class="card">
              // any content
            </div>
          </div>
          <div id="location2-id" data-velt-location-id="location2-id">
            <div class="card">
              // any content
            </div>
          </div>
        </div>
      </div>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Collaboration App</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>
      <script>
        async function loadVelt() {
          await Velt.init("YOUR_VELT_API_KEY");

          if (Velt) {
            //Set Document ID
            Velt.setDocument('some_document_id'); 

            // Set Root Location
            Velt.setLocation({ 
              'id': 'locationId1',
              'locationName': 'Scene1LocationName',
              'version': {
                'id': 'v1.0',
                'name': 'Version Name'
              },
              'page': 'mainPage',
              'videoFrame': '120'
              // You can keep adding more field to make the location very specific.
              // The field names can be anything.
            })

            //Add another Location
            Velt.setLocation({
                'id': 'locationId2',
                'locationName': 'Scene2LocationName',
                'version': {
                  'id': 'v1.0',
                  'name': 'Version Name'
                },
                'page': 'mainPage',
                'videoFrame': '240'
                // You can keep adding more field to make the location very specific.
                // The field names can be anything.
            },true)
          }
        }
      </script>
    </head>
    <body>
      <div>
        <div class="page">
          <div id="location1-id" data-velt-location-id="location1-id">
            <div class="card">
              // any content
            </div>
          </div>
          <div id="location2-id" data-velt-location-id="location2-id">
            <div class="card">
              // any content
            </div>
          </div>
        </div>
      </div>
    </body>
  </html>
  ```

  ```js Angular
  import { Component } from '@angular/core';
  import { initVelt } from '@veltdev/client';
  import { Velt } from '@veltdev/types';

  @Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.scss']
  })
  export class AppComponent {
    client?: Velt;

    constructor() {
      this.initVelt();
    }

    // Initialize velt sdk
    async initVelt() {
      this.client = await initVelt('YOUR_APIKEY');
      this.setDocument();
    }

    // set document id in velt
    setDocument() {
      if (this.client) {
        //Set Document ID
        this.client.setDocument('some_document_id');

        //Set Root Location
        this.client.setLocation({
            'id': 'locationId1',
            'locationName': 'Scene1LocationName',
            'version': {
              'id': 'v1.0',
              'name': 'Version Name'
            },
            'page': 'mainPage',
            'videoFrame': '120'
            // You can keep adding more field to make the location very specific.
            // The field names can be anything.
        })

        //Add another Location
        this.client.setLocation({
            'id': 'locationId2',
            'locationName': 'Scene2LocationName',
            'version': {
              'id': 'v1.0',
              'name': 'Version Name'
            },
            'page': 'mainPage',
            'videoFrame': '240'
            // You can keep adding more field to make the location very specific.
            // The field names can be anything.
        },true)
      }
    }
  }

  //                 Your HTML File                   //

  <div>
    <div class="page">
      <div id="location1-id" data-velt-location-id="location1-id">
        <div class="card">
          // any content
        </div>
      </div>
      <div id="location2-id" data-velt-location-id="location2-id">
        <div class="card">
          // any content
        </div>
      </div>
    </div>
  </div>
  ```

  ```js Vue.js
  <template>
    <div>
      <div class="page">
        <div id="location1-id" data-velt-location-id="location1-id">
          <div class="card">
            // any content
          </div>
        </div>
        <div id="location2-id" data-velt-location-id="location2-id">
          <div class="card">
            // any content
          </div>
        </div>
      </div>
    </div>
  </template>

  <script>
  import Vue from "vue";
  import { initVelt } from "@veltdev/client";

  var client;

    // Initialize velt sdk
    const initializeVelt = async () => {
      client = await initVelt("YOUR_APIKEY");
      setDocument();
    }

    const setDocument = () => {
      if (client) {
        client.setDocument("YOUR_DOCUMENT_ID");
      }
    }

    //Set Root Location
    client.setLocation({
        'id': 'locationId1',
        'locationName': 'Scene1LocationName',
        'version': {
          'id': 'v1.0',
          'name': 'Version Name'
        },
        'page': 'mainPage',
        'videoFrame': '120'
        // You can keep adding more field to make the location very specific.
        // The field names can be anything.
    })

    //Add another Location
    client.setLocation({
        'id': 'locationId2',
        'locationName': 'Scene2LocationName',
        'version': {
          'id': 'v1.0',
          'name': 'Version Name'
        },
        'page': 'mainPage',
        'videoFrame': '240'
        // You can keep adding more field to make the location very specific.
        // The field names can be anything.
    })


    export default Vue.extend({
      name: "App",
      mounted() {
        initializeVelt();
      },
    });
  </script>
  ```
</RequestExample>


# Remove Locations
Source: https://docs.velt.dev/key-concepts/locations/remove-locations



<Tabs>
  <Tab title="React / Next.js">
    <Steps>
      <Step title="Removing all Locations">
        To remove all locations, use the `client.removeLocation()` method.

        ```jsx
        client.removeLocation()
        ```
      </Step>

      <Step title="Removing specific Locations">
        If you have added multiple locations and only want to remove one of them, you can remove it by using `client.removeLocation()` and by passing in the exact location object you want to remove.

        ```jsx
        // remove specific location
        const locationToRemove = {
        	// your custom location object
        }
        client.removeLocation(locationToRemove);
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="HTML">
    <Steps>
      <Step title="Removing all Locations">
        To remove all locations, use the `client.removeLocation()` method.

        ```jsx
        Velt.removeLocation()
        ```
      </Step>

      <Step title="Removing specific Locations">
        If you have added multiple locations and only want to remove one of them, you can remove it by using `client.removeLocation()` and by passing in the exact location object you want to remove.

        ```jsx
        // remove specific location
        const locationToRemove = {
        	// your custom location object
        }
        Velt.removeLocation(locationToRemove);
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Angular">
    <Steps>
      <Step title="Removing all Locations">
        To remove all locations, use the `client.removeLocation()` method.

        ```jsx
        this.client.removeLocation()
        ```
      </Step>

      <Step title="Removing specific Locations">
        If you have added multiple locations and only want to remove one of them, you can remove it by using `client.removeLocation()` and by passing in the exact location object you want to remove.

        ```jsx
        // remove specific location
        const locationToRemove = {
        	// your custom location object
        }
        this.client.removeLocation(locationToRemove);
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Vue.js">
    <Steps>
      <Step title="Removing all Locations">
        To remove all locations, use the `client.removeLocation()` method.

        ```jsx
        client.removeLocation()
        ```
      </Step>

      <Step title="Removing specific Locations">
        If you have added multiple locations and only want to remove one of them, you can remove it by using `client.removeLocation()` and by passing in the exact location object you want to remove.

        ```jsx
        // remove specific location
        const locationToRemove = {
        	// your custom location object
        }
        client.removeLocation(locationToRemove);
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js
  //Set Location
  client.setLocation({
  	'id': 'locationId1',
  	'locationName': 'Scene1LocationName'
  })

  //Add another Location
  client.setLocation({
  	'id': 'locationId2',
  	'locationName': 'Scene2LocationName'
  },true)

  //Remove first Location
  client.removeLocation({
  	'id': 'locationId1',
  	'locationName': 'Scene1LocationName'
  });
  ```

  ```jsx HTML
  //Set Location
  Velt.setLocation({
  	'id': 'locationId1',
  	'locationName': 'Scene1LocationName',
  })

  //Add another Location
  Velt.setLocation({
  	'id': 'locationId2',
  	'locationName': 'Scene2LocationName'
  },true)

  //Remove first Location
  Velt.removeLocation({
  	'id': 'locationId1',
  	'locationName': 'Scene1LocationName'
  });
  ```

  ```jsx Angular
  //Set Location
  this.client.setLocation({
  	'id': 'locationId1',
  	'locationName': 'Scene1LocationName'
  })

  //Add another Location
  this.client.setLocation({
  	'id': 'locationId2',
  	'locationName': 'Scene2LocationName'
  },true)

  //Remove first Location
  this.client.removeLocation({
  	'id': 'locationId1',
  	'locationName': 'Scene1LocationName'
  });
  ```

  ```jsx Vue.js
  //Set Location
  client.setLocation({
  	'id': 'locationId1',
  	'locationName': 'Scene1LocationName'
  })

  //Add another Location
  client.setLocation({
  	'id': 'locationId2',
  	'locationName': 'Scene2LocationName'
  },true)

  //Remove first Location
  client.removeLocation({
  	'id': 'locationId1',
  	'locationName': 'Scene1LocationName'
  });
  ```
</RequestExample>


# Setup
Source: https://docs.velt.dev/key-concepts/locations/set-location



A **Location** is a JSON object that represents a specific area or context in your application.

Locations can represent:

* Pages
* Sections
* Video frames
* Data points on maps/charts
* Any other contextual area

The location object has three special fields:

* `id` (required): A unique identifier for the location that can be used to reference it later
* `locationName` (recommended): A human-readable name displayed in Velt components like the `VeltCommentsSideBar`
* `version` (optional): An object with `id` and `name` fields to track different versions of the location

<Tabs>
  <Tab title="React / Next.js">
    **Using Hooks:**

    ```jsx
    useSetLocation({
      'id': 'locationId1',
      'locationName': 'MainVideoPlayer',
      'page': 'mainPage',
      'version': {
        'id': 'v2.3',
        'name': 'Version Name'
      },
      'videoFrame': '120'
      // You can keep adding more field to make the location very specific.
      // The field names can be anything.
    })
    ```

    **Using API:**

    ```jsx
    client.setLocation({
      'id': 'locationId1',
      'locationName': 'MainVideoPlayer',
      'page': 'mainPage',
      'version': {
        'id': 'v2.3',
        'name': 'Version Name'
      },
      'videoFrame': '120'
      // You can keep adding more field to make the location very specific.
      // The field names can be anything.
    })
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    Velt.setLocation({
      'id': 'locationId1',
      'locationName': 'MainVideoPlayer',
      'page': 'mainPage',
      'version': {
        'id': 'v2.3',
        'name': 'Version Name'
      },
      'videoFrame': '120'
      // You can keep adding more field to make the location very specific.
      // The field names can be anything.
    })
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/key-concepts/organizations/setup



### Create an Organization

#### Client side

When the user signs into an organization as described below,
if an organization is not present then it will be created automatically.

#### Server side

Using our REST APIs, you will be able to create an organization and also set metadata like name, description, etc.

### Add or Remove Users to an Organization to provision access

* You will need to explicitly [add](/api-reference/rest-apis/users/add-users) or [delete](/api-reference/rest-apis/users/delete-users) users from the organization to provision or revoke access.
* As users are added or removed in your app, you can use our API to sync that information on Velt as well.
* Learn more about [User Management](/api-reference/rest-apis/users/add-users).

<Warning> If users are not added to the Organization, they will not be able to access the data inside it.</Warning>

### Sign in User into an Organization

* In the [identify()](/get-started/setup/authenticate) method, set the `organizationId` and also add it to the [auth token](/security/jwt-tokens).
* If you want the user to log into another organization, call the identify method again with the new organizationId and new auth token.

### Access Controls for Organizations

You can set up granular access controls for users within an organization. Learn more [here](/key-concepts/access-control/overview).


# null
Source: https://docs.velt.dev/key-concepts/overview



## Overview

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/key-concepts/overview-concepts.png)

Velt uses Organizations, Documents, and Locations to organize data and users into the same shared spaces and subspaces, enabling granular access controls. The data hierarchy in Velt follows this structure:
Organization -> Documents -> Locations.

## Organizations

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/key-concepts/organizations.png)

An **Organization** is the top-level entity.

* It contains documents, locations, and users.
* Within an organization, you can create multiple documents, and each document can contain several locations.

<Info>Think of an `organization` as a Google Account belonging to a company (e.g., Company A). This account may have several `users` (Company A employees). A `document` will be any file created within the organization (e.g., document, spreadsheet, slides, etc.). A `location` will be any child section within the document (e.g., slide within a presentation).</Info>

## Documents

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/key-concepts/documents.png)

A **Document** represents a shared collaborative space where users can interact. Documents live inside the Organization.
Documents contain:

* All feature data (e.g., Comments, Presence, Cursors, etc.).
* Locations
* Users: These are different from Organization Users. (more details in Access Control section)

Users logged into the same `Document ID` can see each other's `Presence`, `Cursors`, `Comments` etc.

For example, in a slide presentation application, the entire slide deck is a document.

## Locations

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/key-concepts/locations.png)

**Locations** are optional subspaces within a document, providing finer partitioning of data.
For instance:

* In a slide presentation, the entire slide presentation will be a document each individual slide will be a location.
* In a dashboard, the entire dashboard is a document but various filters applied will be locations;
* In a video player, the entire video will be the document and timestamps will be locations.

<Tip> If a **Document** is like a house, a **Location** is like a room within the house. </Tip>

**Locations** are *completely optional*, you can opt to use them or not. If the complexity of your application does not require the use of **Locations**, you can use **Documents** by themselves to group your users together.

If you opt to use **Locations**, users in the same **Document** must also be in the same **Location** now to interact.

## Users

A `User` represents a person who has been authenticated with the Velt SDK.

Once a `User` has been authenticated, their profile can be seen within Velt's collaboration features.

For example in the `Comments` feature, the `User's` name is shown by their comment and in `@mentions`.

Additionally in the `Presence` and in `Cursors` features, the `User's` name is shown by their avatar bubble and mouse cursors.

There can be two categories of users:

1. **Organization Users**: These belong to the organization and by default have access to organization documents and locations. You can control access to documents and locations at a more granular level for these users.
2. **Guest Users**: For some use cases, you may want non-organization users to access and collaborate on a document within the organization. Using our access control features, you can provide access to guest users to only certain documents and user contacts within the organization.

### Contact List for @mention

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/key-concepts/mentions-users.png)

When the user is on a document, they can `@mention` other users. By default, the contact list for the @mention feature includes users from:

* Organization users.
* Guest users explicitly added to the current document.
* Organization User Groups.
* `@here`: This is a special group that includes only the users explicitly added on the document. This doesn't include organization users or organization user groups.

**Contact list is automatically updated:**

* as users are added or removed from the organization or the document.
* organization user groups are created or updated.

<Info>
  **Access Control:**
  Using the access control features, you can control which users are visible on the contact list on a given document.

  * Organization users can access the entire Organization contact list on a given organization document.
  * Guest (Non-organization) users who were granted access to an organization document cannot access the Organization contact list. If you want to show some organization contacts to these guest users, then you need to explicitly add them to the document.
</Info>

### Organization User Groups

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/key-concepts/mentions-groups.png)

You can create custom collection of users such as engineering, marketing etc to group organization users and manage access effectively.

* This can be used to @mention a team group versus just individuals (just like in Slack).
* This can also be used to provision access to documents.
* Organization users can belong to multiple organization user groups.
* Non-organization users can't be part of organization user groups.


# null
Source: https://docs.velt.dev/key-concepts/users/contact-list



### Overview

When the user is on a document, they can `@mention` other users. By default, the contact list for the `@mention` feature includes users from:

* Organization users.
* Guest users explicitly added to the current document.
* Organization User Groups.
* `@here`: This is a special group that includes only the users explicitly added on the document. This doesn't include organization users or organization user groups.

**Contact list is automatically updated:**

* as users are [added](/api-reference/rest-apis/users/add-users) or [deleted](/api-reference/rest-apis/users/delete-users) from the organization or the document.
* users are [added](/api-reference/rest-apis/organization-user-groups/add-users-to-group) or [deleted](/api-reference/rest-apis/organization-user-groups/delete-users-from-group) from organization user groups.
* organization user groups are [added](/api-reference/rest-apis/organization-user-groups/add-groups) or updated.

<Info>
  **Access Control:**
  Using the access control features, you can control which users are visible on the contact list on a given document.

  * Organization users can access the entire Organization contact list on a given organization document.
  * Guest (Non-organization) users who were granted access to an organization document cannot access the Organization contact list. If you want to show some organization contacts to these guest users, then you need to explicitly add them to the document.
</Info>


# null
Source: https://docs.velt.dev/key-concepts/users/organization-user-groups



### Overview

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/key-concepts/mentions-groups.png)
You can create custom collection of users such as engineering, marketing etc to group organization users and manage access effectively.

* This can be used to @mention a team group versus just individuals (just like in Slack).
* This can also be used to provision access to documents. (coming soon)
* Organization users can belong to multiple organization user groups.
* Non-organization users can't be part of organization user groups.

Learn more:

* [Add Organization User Groups](/api-reference/rest-apis/organization-user-groups/add-groups)
* [Add Users to Organization User Groups](/api-reference/rest-apis/organization-user-groups/add-users-to-group)
* [Delete Users from Organization User Groups](/api-reference/rest-apis/organization-user-groups/delete-users-from-group)


# null
Source: https://docs.velt.dev/key-concepts/users/sign-in-user



To sign in a user call the `identify()` method with the `userId` and `authToken` as described [here](get-started/setup/authenticate).

<Tip>Even though using JWT Auth token is optional, we recommend using it for additional security.</Tip>

Once a `User` has been authenticated, their profile can be seen within Velt's collaboration features.

For example in the Comments feature, the User's name is shown by their comment and in `@mentions`.

Additionally in the Presence and in Cursors features, the User's name is shown by their avatar bubble and mouse cursors.

### Sign in with force reset

By default when you identify a **User**, we maintain the user auth in the browser unless you explicitly sign out the logged in user.

If you are changing a User's access or any metadata and want those changes to be reflected immediately,
then you should re-call the `identify` method with `forceReset` option set to `true`.

Learn more [here](get-started/setup/authenticate).


# null
Source: https://docs.velt.dev/key-concepts/users/sign-out-user



In a given session or browser tab, if you want to switch users,
you need to first signout the current user and then sign in using `identify` method again.
This will ensure we clean up the current user session and start a new session with the new user.

```jsx
client.signOutUser();
```


# Export Cord Data for Migration
Source: https://docs.velt.dev/migration/cord-migration/export-cord-data-for-migration



<Warning>
  ### Note:

  * These APIs have pagination built-in and return 1000 entries by default. Either extend the limit or loop over the pages to get all the data.
  * Send data pulled from each API in a separate JSON file.
</Warning>

## Comments

Use the following Cord REST APIs to pull all the comments-related data and export it as a JSON file:

• [Threads](https://docs.cord.com/rest-apis/threads)

• [Messages](https://docs.cord.com/rest-apis/messages)

• [Users](https://docs.cord.com/rest-apis/users)

• [Groups](https://docs.cord.com/rest-apis/groups)

## Comment File Attachments

When you pull thread and message data using the above APIs, the file attachment URL is also present in the data. However, those URLs expire. You have two options for migration:

**Option 1**: You can use the URL to download the files and upload them to your cloud. Send us the new file attachment URLs in the following format in a JSON file:

Sample Format:

```jsx
[{
    "documentId": "<ID>",
    "userId": "<ID>",
    "messageId": "<ID>",
    "type": "file",
    "fileData": {
        "id": "<ID>",
        "type": "file",
        "name": "<FILE_NAME>",
        "url": "<URL>",
        "mimeType": "MIME_TYPE",
        "size": 6278949,
        "uploadStatus": "uploaded"
    },
    "fileUrl": "<URL>"
}]
```

**Option 2**: Schedule file migration date with us so you can pull the latest comments data, which will have fresh file access tokens. Then we can download/store it on our end, and update the URLs ourselves.

## Notifications

Given the ephemeral nature of notifications, we don't think you need to migrate them. However, if you do want us to migrate your notifications data, you could use this API to get the notifications data from Cord:

* [Notifications](https://docs.cord.com/rest-apis/notifications)


# Overview
Source: https://docs.velt.dev/migration/cord-migration/migration-process-overview



Cord has shut down their service. We are providing a migration path for all the Cord users to migrate to Velt.

## Migration Process Overview

* Download the cord data in JSON format using their REST APls. Send it to us using a secure file-sharing system.
* We have an internal service written to transform that data and add it to your Velt account. You need not use our APls for this. We will do it for you.
* It will take about a week for the end-to-end migration process. We can expedite it to be 1-2 days if it's more urgent for you.
* If you prefer, we can also help you migrate over to Velt on production over a weekend so that your customers don't notice any changes.

## Migration Steps

<Steps titleSize="h2">
  <Step title="Step 1: Provide Test Account Access">
    Give us access to a test account in your app where Cord is implemented. It should contain some cord comments.
  </Step>

  <Step title="Step 2: Export Test Data">
    Export the Cord data from the above test account and send it to us. [Learn more](https://docs.velt.dev/migration/cord-migration/export-cord-data-for-migration)
  </Step>

  <Step title="Step 3: Sample Migration">
    We will migrate that small sample first and verify it with you.
  </Step>

  <Step title="Step 4: Full Data Export">
    Once everything looks good, you will send all of the Cord data as JSON files. We will do a test run on the entire dataset.
  </Step>

  <Step title="Step 5: Schedule Migration">
    Schedule a migration date: On this date, all your cord production data (as of this date) with Velt implemented in your app will go live.
  </Step>
</Steps>


# Overview
Source: https://docs.velt.dev/notifications/email/overview



You can enable email notifications to send out emails whenever you `@mention` a user in the Comments feature or when another user replies to your comment.

There are two ways to trigger email notifications: Webhooks and SendGrid.

### 1. Webhooks

To learn how to trigger email notifications via Webhooks please refer [here](https://docs.velt.dev/webhooks/overview).

### 2. SendGrid Integration

To enable Email Notifications, go to the Configurations -> Email Service in the Velt Console, or [click here](https://console.velt.dev/dashboard/config/email).

For SendGrid integration, provide the following details:

* SendGrid API Key
* SendGrid Email Template ID for Comments feature
* 'From' Email Address

<Warning> The 'From' Email Address needs to be whitelisted from your SendGrid account or else it will not work.</Warning>

## Email Template Data

The following fields are sent to Sendgrid:

| Field                      | Type                                                                         | Description                                                                                                                                          |
| -------------------------- | ---------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |
| firstComment               | [Comment](/api-reference/sdk/models/data-models#comment)                     | First message in the thread. **Only Contains** `commentId`, `commentText` and `from` properties derived from Comment class.                          |
| latestComment              | [Comment](/api-reference/sdk/models/data-models#comment)                     | Latest message in the thread that prompted the email. **Only Contains** `commentId`, `commentText` and `from` properties derived from Comment class. |
| prevComment                | [Comment](/api-reference/sdk/models/data-models#comment)                     | Previous message to the latestMessage. **Only Contains** `commentId`, `commentText` and `from` properties derived from Comment class.                |
| commentsCount              | string                                                                       | Total number of comments in the comment annotation                                                                                                   |
| commentsCountMoreThanThree | string                                                                       | Total number of remaining comments in the comment annotation beyond the three that this payload contains                                             |
| fromUser                   | [User](/api-reference/sdk/models/data-models#user)                           | Action user's object                                                                                                                                 |
| commentAnnotation          | [CommentAnnotation](/api-reference/sdk/models/data-models#commentannotation) | The comment annotation object without the `comments` field                                                                                           |
| actionType                 | string                                                                       | The action that resulted in the notification. You can find the list of action types [here](/webhooks/comments-webhooks#list-of-action-types)         |
| documentMetadata           | [DocumentMetadata](/api-reference/sdk/models/data-models#documentmetadata)   | The document metadata object                                                                                                                         |

These are the older fields that will be deprecated soon. These are already contained in the fields above:

| Field           | Type   | Description                                                                                                                                                                                                                    |
| --------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| message         | string | the message of the email                                                                                                                                                                                                       |
| messageFromName | string | the name of whoever wrote the message that the email is referencing. If name is not found then it will contain the email.                                                                                                      |
| name            | string | the name of the person who performed the action that triggered the email. If name is not found then it will contain the email. Sometimes a notification can be triggered without a message. For those cases, you can use this. |
| fromEmail       | string | email address of the user who performed the action                                                                                                                                                                             |
| photoUrl        | string | avatar URL of user                                                                                                                                                                                                             |
| pageUrl         | string | url of the page the comment is on                                                                                                                                                                                              |
| pageTitle       | string | title of the web page                                                                                                                                                                                                          |
| deviceInfo      | Object | contains browser, OS and device info                                                                                                                                                                                           |
| subject         | string | subject of the email                                                                                                                                                                                                           |

## Sample Payload sent to SendGrid

```json
{
  "fromName": "Tony via ",
  "fromEmail": "noreply@example.com", 
  "replyTo": "tony@example.com",
  "templateId": "d-60ba77a7a42a4e55803487b40982b499",
  "toEmail": "jess@example.com",
  "properties": {
    "message": "@Jess",
    "messageFromName": "Tony",
    "name": "Tony",
    "fromName": "Tony via ",
    "fromEmail": "tony@trysnippyly.com",
    "photoUrl": "PHOTO_URL",
    "pageUrl": "https://example.com/?scommentId=4Fnt7zTvPv9ggE7OOTVG",
    "pageTitle": "Example Title", 
    "deviceInfo": {...},
    "subject": "added you to a comment on Example Title",
    "actionType": "newlyAdded",
    "fromUser": {...}, // User Object
    "commentAnnotation": {...}, // CommentAnnotation Object
    "commentsCount": 1,
    "firstComment": {...}, // Comment Object
    "prevComment": {...}, // Comment Object
    "commentsCountMoreThanThree": 0,
    "latestComment": {...}, // Comment Object
    "documentMetadata": {...} // DocumentMetadata Object
  }
}
```

## Download Sample Email Template

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/email-template.png)

We have provided this sample HTML email template you can use for your SendGrid email template:

[Download Link](https://firebasestorage.googleapis.com/v0/b/snippyly.appspot.com/o/external%2Femail-template.html?alt=media\&token=16a17614-70ca-464c-b6f4-2b2b097b0007)

```html
<html lang="en" style="">
<link type="text/css" rel="stylesheet" id="dark-mode-custom-link">
<link type="text/css" rel="stylesheet" id="dark-mode-general-link">
<style lang="en" type="text/css" id="dark-mode-custom-style"></style>
<style lang="en" type="text/css" id="dark-mode-native-style"></style>
<style lang="en" type="text/css" id="dark-mode-native-sheet"></style>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Email Template</title>
</head>

<body style="" data-new-gr-c-s-check-loaded="14.1185.0">
  <div style="margin:0;background-color:#fcfcfd;padding:0">
    <div style="display:none;max-height:0px;overflow:hidden">@here testing here functionality</div>
    <div style="display:none;max-height:0px;overflow:hidden">&nbsp;&nbsp;&nbsp;&nbsp;</div>
    <table width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background-color:#fcfcfd">
      <tbody>
        <tr>
          <td>
            <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation" style="color:#000;width:600px;margin:0 auto"
                      width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1" width="100%"
                            style="font-weight:400;text-align:left;padding-left:15px;padding-right:15px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089image_block m_6043557393601287089block-1" width="100%"
                              border="0" cellpadding="0" cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad"
                                    style="padding-bottom:24px;padding-top:24px;width:100%;padding-right:0;padding-left:0">
                                    <div align="center" style="line-height:10px">
                                      <div style="max-width:142.5px"><svg width="122" height="40" viewBox="0 0 122 40"
                                          fill="none" xmlns="http://www.w3.org/2000/svg">
                                          <rect width="120.125" height="39" transform="translate(0.9375 0.5)"
                                            fill="#FCFCFD"></rect>
                                          <circle cx="16.875" cy="20" r="15.9375" fill="#1E1E1E"></circle>
                                          <path
                                            d="M51.3704 31.5V8.75H55.3354V27.535H64.8092V31.5H51.3704ZM74.1991 31.9225C72.7041 31.9225 71.3391 31.5379 70.1041 30.7687C68.88 29.9996 67.8995 28.9704 67.1629 27.6812C66.437 26.3812 66.0741 24.9458 66.0741 23.375C66.0741 22.1833 66.2854 21.0729 66.7079 20.0437C67.1304 19.0037 67.71 18.0937 68.4466 17.3137C69.1941 16.5229 70.0608 15.9054 71.0466 15.4612C72.0325 15.0171 73.0833 14.795 74.1991 14.795C75.6941 14.795 77.0537 15.1796 78.2779 15.9487C79.5129 16.7179 80.4933 17.7525 81.2191 19.0525C81.9558 20.3525 82.3241 21.7933 82.3241 23.375C82.3241 24.5558 82.1129 25.6608 81.6904 26.69C81.2679 27.7192 80.6829 28.6292 79.9354 29.42C79.1987 30.2 78.3375 30.8121 77.3516 31.2562C76.3766 31.7004 75.3258 31.9225 74.1991 31.9225ZM74.1991 27.9575C74.99 27.9575 75.6995 27.7462 76.3279 27.3238C76.9562 26.9012 77.4491 26.3433 77.8066 25.65C78.175 24.9567 78.3591 24.1983 78.3591 23.375C78.3591 22.53 78.1695 21.7608 77.7904 21.0675C77.422 20.3633 76.9183 19.8054 76.2791 19.3937C75.6508 18.9712 74.9575 18.76 74.1991 18.76C73.4191 18.76 72.715 18.9712 72.0866 19.3937C71.4583 19.8162 70.96 20.3796 70.5916 21.0837C70.2233 21.7879 70.0391 22.5517 70.0391 23.375C70.0391 24.2308 70.2287 25.0054 70.6079 25.6987C70.987 26.3921 71.4908 26.9446 72.1191 27.3562C72.7583 27.7571 73.4516 27.9575 74.1991 27.9575ZM96.9753 15.25H100.94V31.8088C100.94 32.9788 100.702 34.0404 100.225 34.9938C99.7486 35.9579 99.0986 36.7813 98.2753 37.4638C97.4519 38.1571 96.5094 38.6879 95.4478 39.0563C94.3861 39.4354 93.2703 39.625 92.1003 39.625C90.9628 39.625 89.8686 39.3921 88.8178 38.9263C87.7669 38.4604 86.8353 37.8213 86.0228 37.0088C85.2211 36.2071 84.609 35.2917 84.1865 34.2625L87.8103 32.6213C88.0269 33.2171 88.3519 33.7371 88.7853 34.1813C89.2294 34.6363 89.7386 34.9883 90.3128 35.2375C90.8869 35.4975 91.4828 35.6275 92.1003 35.6275C92.7286 35.6275 93.3299 35.5408 93.904 35.3675C94.489 35.1942 95.0144 34.9396 95.4803 34.6038C95.9461 34.2788 96.309 33.8779 96.569 33.4013C96.8399 32.9354 96.9753 32.4046 96.9753 31.8088V29.5175C96.4661 30.2325 95.8269 30.8121 95.0578 31.2562C94.2886 31.7004 93.4003 31.9225 92.3928 31.9225C91.2228 31.9225 90.1286 31.7004 89.1103 31.2562C88.0919 30.8121 87.1928 30.2 86.4128 29.42C85.6436 28.6292 85.0369 27.7192 84.5928 26.69C84.1594 25.6608 83.9428 24.5558 83.9428 23.375C83.9428 22.1942 84.1594 21.0892 84.5928 20.06C85.0369 19.0308 85.6436 18.1262 86.4128 17.3462C87.1928 16.5554 88.0919 15.9379 89.1103 15.4937C90.1286 15.0496 91.2228 14.8275 92.3928 14.8275C93.4003 14.8275 94.2886 15.0496 95.0578 15.4937C95.8269 15.9271 96.4661 16.5012 96.9753 17.2162V15.25ZM92.4415 28.1037C93.2757 28.1037 94.0124 27.8925 94.6515 27.47C95.3015 27.0367 95.8107 26.4625 96.179 25.7475C96.5474 25.0217 96.7315 24.2308 96.7315 23.375C96.7315 22.5083 96.5419 21.7175 96.1628 21.0025C95.7944 20.2875 95.2853 19.7133 94.6353 19.28C93.9961 18.8467 93.2649 18.63 92.4415 18.63C91.629 18.63 90.8869 18.8467 90.2153 19.28C89.5436 19.7025 89.0074 20.2712 88.6065 20.9862C88.2057 21.7012 88.0053 22.4975 88.0053 23.375C88.0053 24.2525 88.2057 25.0487 88.6065 25.7637C89.0074 26.4787 89.5436 27.0475 90.2153 27.47C90.8869 27.8925 91.629 28.1037 92.4415 28.1037ZM111.619 31.9225C110.124 31.9225 108.759 31.5379 107.524 30.7687C106.299 29.9996 105.319 28.9704 104.582 27.6812C103.856 26.3812 103.494 24.9458 103.494 23.375C103.494 22.1833 103.705 21.0729 104.127 20.0437C104.55 19.0037 105.129 18.0937 105.866 17.3137C106.614 16.5229 107.48 15.9054 108.466 15.4612C109.452 15.0171 110.503 14.795 111.619 14.795C113.114 14.795 114.473 15.1796 115.697 15.9487C116.932 16.7179 117.913 17.7525 118.639 19.0525C119.375 20.3525 119.744 21.7933 119.744 23.375C119.744 24.5558 119.532 25.6608 119.11 26.69C118.687 27.7192 118.102 28.6292 117.355 29.42C116.618 30.2 115.757 30.8121 114.771 31.2562C113.796 31.7004 112.745 31.9225 111.619 31.9225ZM111.619 27.9575C112.409 27.9575 113.119 27.7462 113.747 27.3238C114.376 26.9012 114.869 26.3433 115.226 25.65C115.594 24.9567 115.779 24.1983 115.779 23.375C115.779 22.53 115.589 21.7608 115.21 21.0675C114.841 20.3633 114.338 19.8054 113.699 19.3937C113.07 18.9712 112.377 18.76 111.619 18.76C110.839 18.76 110.134 18.9712 109.506 19.3937C108.878 19.8162 108.379 20.3796 108.011 21.0837C107.643 21.7879 107.459 22.5517 107.459 23.375C107.459 24.2308 107.648 25.0054 108.027 25.6987C108.406 26.3921 108.91 26.9446 109.539 27.3562C110.178 27.7571 110.871 27.9575 111.619 27.9575Z"
                                            fill="#1E1E1E"></path>
                                        </svg>


                                      </div>
                                    </div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                            <table width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div align="center">
                                      <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                                        width="100%">
                                        <tbody>
                                          <tr>
                                            <td style="font-size:1px;line-height:1px;border-top:1px solid #d9d9d9">
                                              <span> </span>
                                            </td>
                                          </tr>
                                        </tbody>
                                      </table>
                                    </div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="border-radius:0;color:#000;width:600px;margin:0 auto" width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1" width="100%"
                            style="font-weight:400;text-align:left;padding-bottom:20px;padding-top:20px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation"
              style="background-color:#fcfcfd">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="border-radius:0;color:#000;width:600px;margin:0 auto" width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1"
                            width="33.333333333333336%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                          <td class="m_6043557393601287089column m_6043557393601287089column-2"
                            width="33.333333333333336%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div style="font-family:Arial,Helvetica Neue,Helvetica,sans-serif;text-align:center"
                                      align="center">
                                      <img src="{{photoUrl}}"
                                        style="width:120px;height:120px;object-fit:cover;border-radius:60px"
                                        class="CToWUd" data-bit="iit">
                                    </div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                          <td class="m_6043557393601287089column" width="33.333333333333336%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="border-radius:0;color:#000;width:600px;margin:0 auto" width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1"
                            width="16.666666666666668%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                          <td class="m_6043557393601287089column m_6043557393601287089column-2"
                            width="66.66666666666667%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089heading_block m_6043557393601287089block-1" width="100%"
                              border="0" cellpadding="0" cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad"
                                    style="padding-top:12px;text-align:center;width:100%">
                                    <h1
                                      style="margin:0;color:#141416;direction:ltr;font-family:Arial,Helvetica Neue,Helvetica,sans-serif;font-size:28px;font-weight:700;letter-spacing:normal;line-height:120%;text-align:center;margin-top:0;margin-bottom:0">
                                      <span>{{messageFromName}} mentioned you on <span
                                          style="color:#625df5">{{pageTitle}}</span></span>
                                    </h1>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                          <td class="m_6043557393601287089column" width="16.666666666666668%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation"
              style="background-color:#fcfcfd">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="background-color:#fcfcfd;border-radius:0;color:#000;width:600px;margin:0 auto" width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1" width="100%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation" style="word-break:break-word">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad"
                                    style="padding-bottom:10px;padding-left:10px;padding-right:10px;padding-top:5px">
                                    <div
                                      style="color:#777e90;direction:ltr;font-family:Arial,Helvetica Neue,Helvetica,sans-serif;font-size:16px;font-weight:400;letter-spacing:0;line-height:150%;text-align:center">
                                      <p style="margin:0"><a href="{{pageUrl}}"
                                          style="text-decoration:underline;color:#777e90" rel="noopener"
                                          target="_blank">{{pageUrl}}</a>
                                      </p>
                                    </div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="border-radius:0;color:#000;width:600px;margin:0 auto" width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1" width="100%"
                            style="font-weight:400;text-align:left;padding-bottom:12px;padding-left:12px;padding-right:12px;padding-top:12px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table class="m_6043557393601287089row-8" align="center" width="100%" border="0" cellpadding="0"
              cellspacing="0" role="presentation" style="background-color:#fcfcfd">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content" align="center" border="0" cellpadding="0"
                      cellspacing="0" role="presentation"
                      style="background-color:#fff;border-bottom:1px solid #e6e8ec;border-left:1px solid #e6e8ec;border-radius:20px;border-right:1px solid #e6e8ec;border-top:1px solid #e6e8ec;color:#000;width:600px;margin:0 auto"
                      width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1"
                            width="16.666666666666668%"
                            style="font-weight:400;text-align:left;padding-left:24px;vertical-align:middle;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                          <td class="m_6043557393601287089column m_6043557393601287089column-2"
                            width="66.66666666666667%"
                            style="font-weight:400;text-align:left;padding-bottom:24px;padding-top:24px;vertical-align:middle;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089heading_block m_6043557393601287089block-1" width="100%"
                              border="0" cellpadding="0" cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad" style="text-align:center;width:100%">
                                    <h2
                                      style="margin:0;color:#23262f;direction:ltr;font-family:Arial,Helvetica Neue,Helvetica,sans-serif;font-size:18px;font-weight:400;letter-spacing:normal;line-height:180%;text-align:center;margin-top:0;margin-bottom:0">
                                      <span>{{message}}</span>
                                    </h2>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                          <td class="m_6043557393601287089column" width="16.666666666666668%"
                            style="font-weight:400;text-align:left;padding-right:24px;vertical-align:middle;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="border-radius:0;color:#000;width:600px;margin:0 auto" width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1"
                            width="33.333333333333336%"
                            style="font-weight:400;text-align:left;vertical-align:middle;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div style="font-family:Arial,Helvetica Neue,Helvetica,sans-serif;text-align:center"
                                      align="center"><img width="20px" align="right"
                                        src="https://ci3.googleusercontent.com/meips/ADKq_Na5Ar6lpj8J11QBnXruiVXOyHIrHcvB96ZKd3ArstcM-s6ykE728bQGkZhA7AiE3rUGviILT9XvMOUCFNyk3zHdfdcen07yk1cPKt6QM6tFGsf2xPE5-tVjw7yxxjGpa040LhIFdkfmQLDOaLp40tNKxfC_O3sFf2IWXOgejd5FxUkPMjhpSeqbsUfQbA=s0-d-e1-ft#https://userimg-assets.customeriomail.com/images/client-env-130244/1708534324378_Devices_01HQ699Q8RBX2NETB0H7ECFBQC.png"
                                        class="CToWUd" data-bit="iit"></div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                          <td class="m_6043557393601287089column m_6043557393601287089column-2" width="50%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:middle;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation" style="word-break:break-word">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad"
                                    style="padding-bottom:20px;padding-left:10px;padding-right:10px;padding-top:20px">
                                    <div
                                      style="color:#515151;direction:ltr;font-family:Arial,Helvetica Neue,Helvetica,sans-serif;font-size:14px;font-weight:400;letter-spacing:0;line-height:120%;text-align:left">
                                      <p style="margin:0"><span style="color:#000101">{{deviceInfo.deviceType}} •
                                          {{deviceInfo.screenWidth}}
                                          x {{deviceInfo.screenHeight}}</span>&nbsp;<span
                                          style="color:#8b8b8b">{{deviceInfo.browserName}}</span></p>
                                    </div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                          <td class="m_6043557393601287089column" width="16.666666666666668%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:middle;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="10"
                              cellspacing="0" role="presentation" style="word-break:break-word">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div
                                      style="color:#838383;direction:ltr;font-family:Arial,Helvetica Neue,Helvetica,sans-serif;font-size:14px;font-weight:400;letter-spacing:0;line-height:120%;text-align:left">
                                      &nbsp;</div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table class="m_6043557393601287089row-10" align="center" width="100%" border="0" cellpadding="0"
              cellspacing="0" role="presentation" style="background-color:#fcfcfd">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="background-color:#fcfcfd;border-left:0 solid #e6e8ec;border-radius:0;border-right:0 solid #e6e8ec;color:#000;width:600px;margin:0 auto"
                      width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1" width="100%"
                            style="font-weight:400;text-align:left;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089button_block m_6043557393601287089block-1" width="100%"
                              border="0" cellpadding="0" cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad"
                                    style="padding-bottom:35px;padding-left:10px;padding-right:10px;padding-top:12px;text-align:center">
                                    <div align="center"><a href="{{pageUrl}}"
                                        style="text-decoration:none;display:inline-block;color:#fff;background-color:#625df5;border-radius:50px;width:auto;border-top:0 solid transparent;font-weight:700;border-right:0 solid transparent;border-bottom:0 solid transparent;border-left:0 solid transparent;padding-top:16px;padding-bottom:16px;font-family:Arial,Helvetica Neue,Helvetica,sans-serif;font-size:16px;text-align:center;word-break:keep-all"
                                        target="_blank"><span
                                          style="padding-left:24px;padding-right:24px;font-size:16px;display:inline-block;letter-spacing:normal"><span
                                            style="word-break:break-word;line-height:24px">View
                                            the <span class="il">comment</span></span></span></a>
                                    </div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table class="m_6043557393601287089row-11" align="center" width="100%" border="0" cellpadding="0"
              cellspacing="0" role="presentation">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="border-left:0 solid #e6e8ec;border-radius:0;border-right:0 solid #e6e8ec;color:#000;width:600px;margin:0 auto"
                      width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1" width="100%"
                            style="font-weight:400;text-align:left;padding-bottom:35px;padding-left:15px;padding-right:15px;padding-top:60px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089block-1" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad">
                                    <div align="center">
                                      <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                                        width="100%">
                                        <tbody>
                                          <tr>
                                            <td style="font-size:1px;line-height:1px;border-top:1px solid #d9d9d9">
                                              <span> </span>
                                            </td>
                                          </tr>
                                        </tbody>
                                      </table>
                                    </div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
            <table class="m_6043557393601287089row-12" align="center" width="100%" border="0" cellpadding="0"
              cellspacing="0" role="presentation">
              <tbody>
                <tr>
                  <td>
                    <table class="m_6043557393601287089row-content m_6043557393601287089stack" align="center" border="0"
                      cellpadding="0" cellspacing="0" role="presentation"
                      style="border-radius:0;color:#000;width:600px;margin:0 auto" width="600">
                      <tbody>
                        <tr>
                          <td class="m_6043557393601287089column m_6043557393601287089column-1" width="100%"
                            style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0">
                            <table class="m_6043557393601287089image_block m_6043557393601287089block-1" width="100%"
                              border="0" cellpadding="0" cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad"
                                    style="width:100%;padding-right:0;padding-left:0">
                                    <div align="center" style="line-height:10px">
                                      <div style="max-width:138px"><svg width="122" height="40" viewBox="0 0 122 40"
                                          fill="none" xmlns="http://www.w3.org/2000/svg">
                                          <rect width="120.125" height="39" transform="translate(0.9375 0.5)"
                                            fill="#FCFCFD"></rect>
                                          <circle cx="16.875" cy="20" r="15.9375" fill="#1E1E1E"></circle>
                                          <path
                                            d="M51.3704 31.5V8.75H55.3354V27.535H64.8092V31.5H51.3704ZM74.1991 31.9225C72.7041 31.9225 71.3391 31.5379 70.1041 30.7687C68.88 29.9996 67.8995 28.9704 67.1629 27.6812C66.437 26.3812 66.0741 24.9458 66.0741 23.375C66.0741 22.1833 66.2854 21.0729 66.7079 20.0437C67.1304 19.0037 67.71 18.0937 68.4466 17.3137C69.1941 16.5229 70.0608 15.9054 71.0466 15.4612C72.0325 15.0171 73.0833 14.795 74.1991 14.795C75.6941 14.795 77.0537 15.1796 78.2779 15.9487C79.5129 16.7179 80.4933 17.7525 81.2191 19.0525C81.9558 20.3525 82.3241 21.7933 82.3241 23.375C82.3241 24.5558 82.1129 25.6608 81.6904 26.69C81.2679 27.7192 80.6829 28.6292 79.9354 29.42C79.1987 30.2 78.3375 30.8121 77.3516 31.2562C76.3766 31.7004 75.3258 31.9225 74.1991 31.9225ZM74.1991 27.9575C74.99 27.9575 75.6995 27.7462 76.3279 27.3238C76.9562 26.9012 77.4491 26.3433 77.8066 25.65C78.175 24.9567 78.3591 24.1983 78.3591 23.375C78.3591 22.53 78.1695 21.7608 77.7904 21.0675C77.422 20.3633 76.9183 19.8054 76.2791 19.3937C75.6508 18.9712 74.9575 18.76 74.1991 18.76C73.4191 18.76 72.715 18.9712 72.0866 19.3937C71.4583 19.8162 70.96 20.3796 70.5916 21.0837C70.2233 21.7879 70.0391 22.5517 70.0391 23.375C70.0391 24.2308 70.2287 25.0054 70.6079 25.6987C70.987 26.3921 71.4908 26.9446 72.1191 27.3562C72.7583 27.7571 73.4516 27.9575 74.1991 27.9575ZM96.9753 15.25H100.94V31.8088C100.94 32.9788 100.702 34.0404 100.225 34.9938C99.7486 35.9579 99.0986 36.7813 98.2753 37.4638C97.4519 38.1571 96.5094 38.6879 95.4478 39.0563C94.3861 39.4354 93.2703 39.625 92.1003 39.625C90.9628 39.625 89.8686 39.3921 88.8178 38.9263C87.7669 38.4604 86.8353 37.8213 86.0228 37.0088C85.2211 36.2071 84.609 35.2917 84.1865 34.2625L87.8103 32.6213C88.0269 33.2171 88.3519 33.7371 88.7853 34.1813C89.2294 34.6363 89.7386 34.9883 90.3128 35.2375C90.8869 35.4975 91.4828 35.6275 92.1003 35.6275C92.7286 35.6275 93.3299 35.5408 93.904 35.3675C94.489 35.1942 95.0144 34.9396 95.4803 34.6038C95.9461 34.2788 96.309 33.8779 96.569 33.4013C96.8399 32.9354 96.9753 32.4046 96.9753 31.8088V29.5175C96.4661 30.2325 95.8269 30.8121 95.0578 31.2562C94.2886 31.7004 93.4003 31.9225 92.3928 31.9225C91.2228 31.9225 90.1286 31.7004 89.1103 31.2562C88.0919 30.8121 87.1928 30.2 86.4128 29.42C85.6436 28.6292 85.0369 27.7192 84.5928 26.69C84.1594 25.6608 83.9428 24.5558 83.9428 23.375C83.9428 22.1942 84.1594 21.0892 84.5928 20.06C85.0369 19.0308 85.6436 18.1262 86.4128 17.3462C87.1928 16.5554 88.0919 15.9379 89.1103 15.4937C90.1286 15.0496 91.2228 14.8275 92.3928 14.8275C93.4003 14.8275 94.2886 15.0496 95.0578 15.4937C95.8269 15.9271 96.4661 16.5012 96.9753 17.2162V15.25ZM92.4415 28.1037C93.2757 28.1037 94.0124 27.8925 94.6515 27.47C95.3015 27.0367 95.8107 26.4625 96.179 25.7475C96.5474 25.0217 96.7315 24.2308 96.7315 23.375C96.7315 22.5083 96.5419 21.7175 96.1628 21.0025C95.7944 20.2875 95.2853 19.7133 94.6353 19.28C93.9961 18.8467 93.2649 18.63 92.4415 18.63C91.629 18.63 90.8869 18.8467 90.2153 19.28C89.5436 19.7025 89.0074 20.2712 88.6065 20.9862C88.2057 21.7012 88.0053 22.4975 88.0053 23.375C88.0053 24.2525 88.2057 25.0487 88.6065 25.7637C89.0074 26.4787 89.5436 27.0475 90.2153 27.47C90.8869 27.8925 91.629 28.1037 92.4415 28.1037ZM111.619 31.9225C110.124 31.9225 108.759 31.5379 107.524 30.7687C106.299 29.9996 105.319 28.9704 104.582 27.6812C103.856 26.3812 103.494 24.9458 103.494 23.375C103.494 22.1833 103.705 21.0729 104.127 20.0437C104.55 19.0037 105.129 18.0937 105.866 17.3137C106.614 16.5229 107.48 15.9054 108.466 15.4612C109.452 15.0171 110.503 14.795 111.619 14.795C113.114 14.795 114.473 15.1796 115.697 15.9487C116.932 16.7179 117.913 17.7525 118.639 19.0525C119.375 20.3525 119.744 21.7933 119.744 23.375C119.744 24.5558 119.532 25.6608 119.11 26.69C118.687 27.7192 118.102 28.6292 117.355 29.42C116.618 30.2 115.757 30.8121 114.771 31.2562C113.796 31.7004 112.745 31.9225 111.619 31.9225ZM111.619 27.9575C112.409 27.9575 113.119 27.7462 113.747 27.3238C114.376 26.9012 114.869 26.3433 115.226 25.65C115.594 24.9567 115.779 24.1983 115.779 23.375C115.779 22.53 115.589 21.7608 115.21 21.0675C114.841 20.3633 114.338 19.8054 113.699 19.3937C113.07 18.9712 112.377 18.76 111.619 18.76C110.839 18.76 110.134 18.9712 109.506 19.3937C108.878 19.8162 108.379 20.3796 108.011 21.0837C107.643 21.7879 107.459 22.5517 107.459 23.375C107.459 24.2308 107.648 25.0054 108.027 25.6987C108.406 26.3921 108.91 26.9446 109.539 27.3562C110.178 27.7571 110.871 27.9575 111.619 27.9575Z"
                                            fill="#1E1E1E"></path>
                                        </svg>
                                      </div>
                                    </div>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                            <table class="m_6043557393601287089heading_block" width="100%" border="0" cellpadding="0"
                              cellspacing="0" role="presentation">
                              <tbody>
                                <tr>
                                  <td class="m_6043557393601287089pad"
                                    style="padding-bottom:20px;padding-top:30px;text-align:center;width:100%">
                                    <h1
                                      style="margin:0;color:#94959a;direction:ltr;font-family:Arial,Helvetica Neue,Helvetica,sans-serif;font-size:14px;font-weight:400;letter-spacing:normal;line-height:120%;text-align:center;margin-top:0;margin-bottom:0">
                                      <span>© 2022 Copyright by
                                        App</span>
                                    </h1>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </td>
                </tr>
              </tbody>
            </table>
          </td>
        </tr>
      </tbody>
    </table><img
      src="https://ci3.googleusercontent.com/meips/ADKq_NYM51xIFNwXihKgeLlqyVP97ulnam3VRxruLR0Ara84A14_WErGd9ykG7JDdnAgugP8jqQEweCGvvMIpGvGEawL0d4GJ7YUsmQuJQ0YB4vJk5Bl2toU80GONxy-HGPQvUnOX_kaLV-9X05YoL6VMwePfm6IFGcnTQ=s0-d-e1-ft#http://email.usesuperflow.com/e/o/eyJlbWFpbF9pZCI6IlJNVDVCd1VBQVk4enNRWGk4LXVFRHVCOWdXdG9mQT09In0="
      style="height:1px!important;max-height:1px!important;max-width:1px!important;width:1px!important;display:none!important"
      alt="" class="CToWUd" data-bit="iit" jslog="138226; u014N:xr6bB; 53:WzAsMl0.">

    <img
      src="https://ci3.googleusercontent.com/meips/ADKq_NbgCaKQqeUeI8KB87L2bph8vRubUY2YNAke4I50mlNuZUz1H6ou__qBq0qRUQLwsSTOfEWMoXzKFcYDVLE3lOR8Wai2u5RQ7jPYpKTxnes1mfcPaWOxI7X3KvUS15N0UDtv8TBj9SM1Nf3uKdvduN4PZMu_qotMqMwvpUoVoS_KODRaQ1RjvbYHYrjLoW1nGU_RJcQrCHMcL_hAEfl3xFoXmWWtFH346jT6gJCplDpnJV6gnGPPhE-LvTUMWYCw16Sg00L_4QnhbBwP9GwaQzL9arU0dcjJRA40XAEevlTNVyBiVnAn06Ur9KBNXJlOunu01iwggTUy5WoouYzUhnrKaeEcL9AQISFgcG-T5YMkgqYSm3tr14pIsT8-CBOwIka9Suq1v874DfbJ4euHqdzY7PdH3SaDJDw8-qxG6naEgnhgpOpo1BPhQHXZTTzUIRdE6_jxjFAZfMUdv-AxGeRAtXNg56dqV8Vukz-7rN8dIRo9ljmyPvQYsotPCG6AG9yN8Rg=s0-d-e1-ft#http://url3921.usesuperflow.com/wf/open?upn=u001.Dc4eXJJC3dnABjL2PM3i-2BxAbjHZZmw-2FIX9dDzjMpNLfr94HZvqwfrTJfOIes5K6ZAOurKf1fJN30gg6rr9Vu-2Bw3YqgdsWUYdhTyfETJ5HllIOeIqyl1ZAYmaWazHIwK0FMF7ujoQDxwnooMMBUdRIes68yAT4jzh-2BemnBuqBU7b2F6Eu1oof-2Flow7-2BhB7UnM6ciOJQbkmwUWeLzFCH2r0uUQiZDrLC4uWmqslfC1hFxKufd3V7e48vdI9q-2BgES1GFyHlU7DPs2nA4P31FehS0AFYN7MeMA4gYuUM7bvzq1M-3D"
      alt="" width="1" height="1" border="0"
      style="height:1px!important;width:1px!important;border-width:0!important;margin-top:0!important;margin-bottom:0!important;margin-right:0!important;margin-left:0!important;padding-top:0!important;padding-bottom:0!important;padding-right:0!important;padding-left:0!important"
      class="CToWUd" data-bit="iit" jslog="138226; u014N:xr6bB; 53:WzAsMl0.">
  </div>
</body>
</html>
```


# Customize Behavior
Source: https://docs.velt.dev/realtime-collaboration/cursors/customize-behavior



## avatarMode

* Show the user's avatar floating next to their cursor instead of their name.
* Enabling this mode will allow you to show the user's avatar in context with the cursor.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltCursor avatarMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-cursor avatar-mode="true"></velt-cursor>
    ```
  </Tab>
</Tabs>

## setInactivityTime

* Set the time it takes for a user to go inactive in milliseconds.
* By default we mark a user as inactive if they do not take any action on the document within a 5 mins timeframe.
* If they unfocus the tab, we mark them inactive immediately.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltCursor inactivityTime={300000} />
    ```

    Using API:

    ```js
    const cursorElement = client.getCursorElement();
    cursorElement.setInactivityTime(300000);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-cursor inactivity-time="300000"></velt-cursor>
    ```

    Using API:

    ```js
    const cursorElement = Velt.getCursorElement();
    cursorElement.setInactivityTime(300000);
    ```
  </Tab>
</Tabs>

## allowedElementIds

* Provide a list of element IDs where the cursors should show.
* If you provide a list of element IDs, we will only show cursors that hover over those specific elements.
* For eg: For an app with canvas and tool picker: You can whitelist the canvas ID so that the cursors are only visible on the canvas and not the tool picker.

<Warning>You must pass a string into allowedElementIds instead of an object</Warning>

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltCursor allowedElementIds={JSON.stringify(['element-1', 'element-2'])} />
    ```

    Using API:

    ```js
    const cursorElement = client.getCursorElement();
    cursorElement.allowedElementIds(['element-1', 'element-2']);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-cursor allowed-element-ids='["element-1", "element-2"]'></velt-cursor>
    ```

    Using API:

    ```js
    const cursorElement = Velt.getCursorElement();
    cursorElement.allowedElementIds(['element-1', 'element-2']);
    ```
  </Tab>
</Tabs>

## onCursorUserChange

* Whenever the cursor for any user changes, we emit this event with the updated list of users currently online on this document with their cursor positions.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltCursor onCursorUserChange={(cursorUsers) => yourMethod(cursorUsers)} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    if(Velt){
      const cursorTag = document.querySelector('velt-cursor');
    	cursorTag.addEventListener('onCursorUserChange', (event) => {
          console.log("onCursorUserChange", event.detail);
      });
    }
    ```
  </Tab>
</Tabs>

## getOnlineUsersOnCurrentDocument

* Subscribe to a list of all online users who are either active or inactive on the current document.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const cursorElement = client.getCursorElement();
    cursorElement.getOnlineUsersOnCurrentDocument().subscribe((cursorUsers) => {
      console.log("Online users: ", cursorUsers);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const cursorElement = Velt.getCursorElement();
    cursorElement.getOnlineUsersOnCurrentDocument().subscribe((cursorUsers) => {
      console.log("Online users: ", cursorUsers);
    });
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/realtime-collaboration/cursors/overview

Your users can view each other's cursors when interacting on the same document. This makes your app more alive. We handle the complexity of adapting the cursors to different screen sizes, differences in content etc.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=cursors" scrolling="no" frameBorder="0" className="w-full" height="500px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=cursors)


# null
Source: https://docs.velt.dev/realtime-collaboration/cursors/setup



<Tabs>
  <Tab title="React / Next.js">
    <Steps>
      <Step title="Import the VeltCursor Component">
        Import the `VeltCursor` component.

        ```js
        import { VeltProvider, VeltCursor } from '@veltdev/react'
        ```
      </Step>

      <Step title="Add the VeltCursor Component">
        Add the `VeltCursor` component to the root of your app.

        ```js
        <VeltProvider apiKey="API_KEY">
              <VeltCursor />
              {/* ... */}
        </VeltProvider>
        ```

        This component renders the cursors of users on the same document and location in your web app.

        <Info>
          Note that we automatically assign different colors to users & adapt the cursors to different screen sizes and to what's actually present on the screen. So you don't have to worry about building this logic.
        </Info>
      </Step>

      <Step title="Test Integration">
        Test it out by opening the target page in two browsers (with one in incognito) with two different users logged in.

        You should see the cursors of the users rendered as you move mouse around.
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps>
      <Step title="Place the <velt-cursor> component">
        Add the `<velt-cursor>` component to the root of your app.

        ```html
        <body>
          <velt-cursor></velt-cursor>
        </body>
        ```

        This component renders the cursors of users on the same document and location in your web app.

        <Info>
          Note that we automatically assign different colors to users & adapt the cursors to different screen sizes and to what's actually present on the screen. So you don't have to worry about building this logic.
        </Info>
      </Step>

      <Step title="Test Integration">
        Test it out by opening the target page in two browsers (with one in incognito) with two different users logged in.

        You should see the cursors of the users rendered as you move mouse around.
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import { VeltProvider, VeltCursor } from '@veltdev/react';

  export default function App() {

    return (
      <VeltProvider apiKey="API_KEY">
        <VeltCursor />
        {/* ... */}
      </VeltProvider>
    );
  }
  ```

  ```js HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Cursors documentation</title>
    </head>
    <body>
      <velt-cursor></velt-cursor>
    </body>
  </html>

  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/realtime-collaboration/flock-mode/customize-behavior



## flockMode

* To enable `Follow Me` Mode, set the `flockMode` attribute to `true`.
* This will enable `Follow Me mode` as an option for your `Users` globally, wherever Presence is shown.
* To start the shared flock session, click on a `User's` avatar to start following them.
* Learn more about it in the [Flock Mode feature section](/realtime-collaboration/flock-mode/overview).

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/presence/Flock_Mode.png)

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltPresence flockMode={true} />
    ```

    Using API:

    ```js
    const presenceElement = client.getPresenceElement();
    presenceElement.enableFlockMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-presence flock-mode="true"></velt-presence>
    ```

    Using API:

    ```js
    const presenceElement = Velt.getPresenceElement();
    presenceElement.enableFlockMode();
    ```
  </Tab>
</Tabs>

## onNavigate

* Use a callback for custom navigation or side-effects.
* When the leader of a `Follow Me` session navigates, we can use the React Router to update the follower's position. In the callback you will receive a `PageInfo` object.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltPresence onNavigate={(pageInfo) => navigate(pageInfo.path)} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    let onNavigateHandler = (pageInfo) => navigate(pageInfo.path);

    if (presenceDOMElement) {
      presenceDOMElement.addEventListener("onNavigate", onNavigateHandler);
    }
    ```
  </Tab>
</Tabs>

## defaultFlockNavigation

* Disable default `Follow Me` navigation.
* Our default navigation uses window\.location.href to detect navigation. If you are handling navigation using the callback method above, you should disable our default navigation.
* Default: `true`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltPresence defaultFlockNavigation={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-presence disable-flock-navigation="true"></velt-presence>
    ```
  </Tab>
</Tabs>

## startFollowingUser()

* Start following a user by passing in their user ID.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    // Start following the user
    presenceElement.startFollowingUser(userId);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    presenceElement.startFollowingUser(userId);
    ```
  </Tab>
</Tabs>

## stopFollowingUser()

* Stop following a user.
* If the current user is in a `Follow Me` session, they will be removed from that session. If there are no more followers in the session, the session will be destroyed.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    // Stop following the user
    presenceElement.stopFollowingUser();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    presenceElement.stopFollowingUser();
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/realtime-collaboration/flock-mode/overview

This is like Figma's follow along feature. Start a shared session in a click. One person is the leader, and whatever they do - like clicking, scrolling, or navigating - happens automatically on everyone else's screen.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=flock" scrolling="no" frameBorder="0" className="w-full" height="500px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=flock)


# Setup
Source: https://docs.velt.dev/realtime-collaboration/flock-mode/setup



<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Enable Follow Me mode on Presence">
        Enable `Follow Me` mode feature.

        ```js
         <VeltPresence flockMode={true} />
        ```

        You need to add the [Presence feature](/realtime-collaboration/presence/overview) to trigger `Follow Me` mode. This will enable `Follow Me` mode as an option for your users globally, wherever `Presence` is shown.

        To start the shared `Follow Me` session, click on a user's avatar to start following them.
      </Step>

      <Step title="Test Integration">
        Test it out by opening the target page in two browsers with two different users logged in.

        You should see the avatars of the users rendered where you added the `Presence` component. Now click on any avatar to start following them.
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Enable Follow Me mode on Presence">
        Enable `Follow Me` mode feature.

        ```html
        <velt-presence flock-mode="true"></velt-presence>
        ```

        You need to add [Presence feature](/realtime-collaboration/presence/overview) to trigger `Follow Me` mode. This will enable `Follow Me` mode as an option for your users globally, wherever Presence is shown.

        To start the shared `Follow Me` session, click on a user's avatar to start following them.
      </Step>

      <Step title="Test Integration">
        Test it out by opening the target page in two browsers with two different users logged in.

        You should see the avatars of the users rendered where you added the presence component. Now click on any avatar to start following them.
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import { VeltPresence } from '@veltdev/react';

  export default function App() {

    return (
      <div className="toolbar">
        <VeltPresence
          flockMode={true} {/* 1) Enable Follow Me Mode */}
        />
      </div>
    );
  }
  ```

  ```html HTML
  <velt-presence flock-mode="true"></velt-presence> <!-- Enable Follow Me Mode -->
  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/realtime-collaboration/huddle/customize-behavior



## type

* Sets the type of the `Huddle`:
  * `audio`
  * `video`
  * `screen`
  * `all`

Default: `all`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltHuddleTool type="audio"/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-huddle-tool type="audio"></velt-huddle-tool>
    ```
  </Tab>
</Tabs>

## chat

* Whether the ephemeral Chat feature is enabled in Huddle.
* Default: `true`
  ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/chat-in-huddle.png)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltHuddle chat={false} />
    ```

    Using API:

    ```jsx
    const huddleElement = client.getHuddleElement();
    huddleElement.enableChat();
    huddleElement.disableChat();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-huddle chat="false"></velt-huddle>
    ```

    Using API:

    ```js
    const huddleElement = Velt.getHuddleElement();
    huddleElement.enableChat();
    huddleElement.disableChat();
    ```
  </Tab>
</Tabs>

## flockModeOnAvatarClick

* Whether `Follow Me` Mode should start when clicking on a user's avatar in Huddle.
* Default: `false`

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/huddle-flock.gif)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltHuddle flockModeOnAvatarClick={true} />
    ```

    Using API:

    ```jsx
    const huddleElement = client.getHuddleElement();
    huddleElement.enableFlockModeOnAvatarClick();
    huddleElement.disableFlockModeOnAvatarClick();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-huddle flock-mode-onavatar-click="true"></velt-huddle>
    ```

    Using API:

    ```js
    const huddleElement = Velt.getHuddleElement();
    huddleElement.enableFlockModeOnAvatarClick();
    huddleElement.disableFlockModeOnAvatarClick();
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/realtime-collaboration/huddle/overview

Enable slack-style effortless audio, video and screen sharing discussions inside your own product. It even comes with built in chat.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=huddle" scrolling="no" frameBorder="0" className="w-full" height="500px" allow="display-capture; camera; microphone;displayCapture;" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=huddle)


# Setup
Source: https://docs.velt.dev/realtime-collaboration/huddle/setup



<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Huddle Component">
        Import the `Huddle` component from the React library.

        ```js
        import { VeltHuddle, VeltHuddleTool } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add Huddle Component">
        Add the `VeltHuddle` component to the root of your app.

        ```js
        <VeltHuddle />
        ```

        This component is required to render `Huddle` UI components and `Huddle` users in your app.
      </Step>

      <Step title="Add Huddle Tool Component">
        Add the `VeltHuddleTool` component wherever you want to show the `Huddle` tool button.

        Clicking on it initiates a huddle.

        ```js
        <div className="toolbar">
              <VeltHuddleTool type='all' />
        </div>
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Place the <velt-huddle> component">
        Add the `VeltHuddle` component to the root of your app.

        This component is required to render `Huddle` UI components and `Huddle` users in your app.

        ```html
        <div>
          <velt-huddle></velt-huddle>
        </div>
        ```
      </Step>

      <Step title="Place the <velt-huddle-tool> component">
        Add the `VeltHuddleTool` component wherever you want to show the `Huddle` tool button.

        Clicking on it initiates a `Huddle`.

        ```html
        <div>
          <velt-huddle-tool></velt-huddle-tool>
        </div>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import { VeltHuddle, VeltHuddleTool} from '@veltdev/react';

  export default function App() {

    return (
      <VeltHuddle /> {/* Add VeltHuddle at the root of your app */}

      <div className="toolbar">
        <VeltHuddleTool type='all' /> {/* Add VeltHuddleTool where you want the huddle button to appear */}
      </div>
    );
  }
  ```

  ```html HTML
  <div>
    <velt-huddle></velt-huddle> <!-- Add velt-huddle component at the root of your app -->
    <velt-huddle-tool></velt-huddle-tool> <!-- Add velt-huddle-tool where you want the huddle button to appear-->
  </div>

  ```
</RequestExample>


# Customize Behavior
Source: https://docs.velt.dev/realtime-collaboration/live-selection/customize-behavior



## enableDefaultElementsTracking

* When **enabled**,
  * the SDK will track User's presence on these elements types automatically: `input`, `textarea`, `button`, `contenteditable`.
  * to disable tracking on certain elements, you need to manually add an attribute `data-velt-live-selection-enabled="false"` to those elements.

* When **disabled**,
  * the SDK will not track User's presence on any elements.
  * to enable tracking on certain elements, you need to manually add an attribute `data-velt-live-selection-enabled="true"` to those elements.

* Default: `Enabled`.

<Tabs>
  <Tab title="React / Next.js">
    ```javascript
    const selectionElement = client.getSelectionElement();

    selectionElement.enableDefaultElementsTracking();
    selectionElement.disableDefaultElementsTracking();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    const selectionElement = Velt.getSelectionElement();

    selectionElement.enableDefaultElementsTracking();
    selectionElement.disableDefaultElementsTracking();
    ```
  </Tab>
</Tabs>

## enableUserIndicator

* User indicator is the user avatar or their name label that appears on the top left or top right of the selected element.
* Default: `Enabled`.

<Tabs>
  <Tab title="React / Next.js">
    ```javascript
    const selectionElement = client.getSelectionElement();

    selectionElement.enableUserIndicator();
    selectionElement.disableUserIndicator();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    const selectionElement = Velt.getSelectionElement();

    selectionElement.enableUserIndicator();
    selectionElement.disableUserIndicator();
    ```
  </Tab>
</Tabs>

## setUserIndicatorPosition

* User indicator position can be set to `start` or `end`.

* You can set it globally using API or set it locally on individual elements using attributes.

* Default: `end`.

<Tabs>
  <Tab title="React / Next.js">
    Set globally using API:

    ```javascript
    const selectionElement = client.getSelectionElement();

    selectionElement.setUserIndicatorPosition('start');
    ```

    Set locally on individual elements using attributes:

    ```html
    <div data-velt-live-selection-user-indicator-position="start">...</div>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Set globally using API:

    ```javascript
    const selectionElement = Velt.getSelectionElement();

    selectionElement.setUserIndicatorPosition('start');
    ```

    Set locally on individual elements using attributes:

    ```html
    <div data-velt-live-selection-user-indicator-position="start">...</div>
    ```
  </Tab>
</Tabs>

## setUserIndicatorType

* User indicator type can be set to `avatar` or `label`.
  * `avatar`: Displays the user avatar.
  * `label`: Displays the user's name.

* You can set the type globally using API or set it locally on individual elements using attributes.

* Default: `avatar`.

<Tabs>
  <Tab title="React / Next.js">
    Set globally using API:

    ```javascript
    const selectionElement = client.getSelectionElement();

    selectionElement.setUserIndicatorType('label');
    ```

    Set locally on individual elements using attributes:

    ```html
    <div data-velt-live-selection-user-indicator-type="label">...</div>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Set globally using API:

    ```javascript
    const selectionElement = Velt.getSelectionElement();

    selectionElement.setUserIndicatorType('label');
    ```

    Set locally on individual elements using attributes:

    ```html
    <div data-velt-live-selection-user-indicator-type="label">...</div>
    ```
  </Tab>
</Tabs>

## getLiveSelectionData

* Get the live selection data for the current document.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Hook:**

      ```jsx
        const liveSelectionData = useLiveSelectionDataHandler();

        useEffect(() => {
          console.log('liveSelectionData', liveSelectionData);
        }, [liveSelectionData]);
      ```

      **Using API:**

      ```javascript
        const selectionElement = client.getSelectionElement();
        selectionElement.getLiveSelectionData().subscribe((liveSelectionData: LiveSelectionData) => {
          console.log("liveSelectionData: ", liveSelectionData);
        });
      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Using API:**

      ```javascript
        const selectionElement = Velt.getSelectionElement();
        selectionElement.getLiveSelectionData().subscribe((liveSelectionData: LiveSelectionData) => {
          console.log("liveSelectionData: ", liveSelectionData);
        });
      ```
    </Tab>
  </Tabs>


# Overview
Source: https://docs.velt.dev/realtime-collaboration/live-selection/overview

Your users can see what part of the document others are interacting with in real-time.

When Live Selection is enabled, users will see the users' avatar or name, and a highlight box around the element they are interacting with.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=live-selection" className="w-full" height="500px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=live-selection)


# null
Source: https://docs.velt.dev/realtime-collaboration/live-selection/setup



## Get the Live Selection Element and enable it

When enabled, Live Selection will automatically detect and highlight user's presence on the following elements:

* `input`
* `textarea`
* `button`
* `contenteditable`

You can learn more about customizing and controlling which elements are highlighted and its styling [here](/realtime-collaboration/live-selection/customize-behavior).

<Tabs>
  <Tab title="React / Next.js">
    ```js
    const { client } = useVeltClient();
    useEffect(() => {
      if (client) {
        const selectionElement = client.getSelectionElement();
        selectionElement.enableLiveSelection();
        selectionElement.disableLiveSelection();
      }
    }, [client]);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    if (Velt) {
      const selectionElement = Velt.getSelectionElement();
      selectionElement.enableLiveSelection();
      selectionElement.disableLiveSelection();
    }
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/realtime-collaboration/live-state-sync/overview

Sync and broadcast data in real-time across all connected clients.

Live State Sync allows you to share and synchronize data in real-time across all connected clients. This feature is useful for building collaborative features like shared forms, whiteboards, or any real-time state that needs to be synced across all users.

## Latency

* Extremely low latency, with typical response times no greater than 10 ms.

## Offline Support

* Optimistic local‑first reads and writes.
* Full offline support with automatic syncing when reconnected.

## Conflict Resolution

* Server timestamp-based last-write-wins strategy for automatic conflict resolution.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=live-state-sync&layout=horizontal" className="w-full" height="500px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=live-state-sync\&layout=horizontal)


# Redux Middleware
Source: https://docs.velt.dev/realtime-collaboration/live-state-sync/redux-middleware



If you are using Redux, you can use our middleware to sync state changes directly into your Redux store.

<Steps>
  <Step title="Import the middleware">
    To get started import the `createLiveStateMiddleware` middleware from the Velt SDK.

    ```jsx
    import { createLiveStateMiddleware } from "@veltdev/react";
    ```
  </Step>

  <Step title="Add the middleware to your Redux store configuration">
    Use `createLiveStateMiddleware` to create a `middleware` and a `updateLiveStateDataId` method.

    Then add the created `middleware` to your Redux store configuration.

    You can also export the `updateLiveStateDataId` method from your Redux store. This method will be used to dynamically set the `liveStateDataId`.

    **store.js**:

    ```jsx
    import { configureStore } from "@reduxjs/toolkit";
    import { createLiveStateMiddleware } from "@veltdev/react";

    //create middleware
    const { middleware, updateLiveStateDataId } = createLiveStateMiddleware();

    //add middleware to your Redux store configuration
    export const store = configureStore({
      reducer: {
    	... your reducers here
      },
      // You just have to concat our liveStateMiddleware in store
      middleware: getDefaultMiddleware => getDefaultMiddleware().concat(middleware)
    });

    // optionally export updateLiveStateDataId method if you want to set liveStateDataId dynamically
    export { updateLiveStateDataId };
    ```
  </Step>

  <Step title="Optional Configurations">
    `createLiveStateMiddleware` takes in an optional configuration object with the following schema:

    ```tsx
    type LiveStateMiddlewareConfig = {
        allowedActionTypes?: Set<string>,
        disabledActionTypes?: Set<string>,
        allowAction?: (action: any) => boolean,
        liveStateDataId?: string,
    };
    ```

    You can use it to define the following fields:

    * `allowedActionTypes` - allow live state syncing on specific action types only
    * `disabledActionTypes` - restrict live state syncing on specific action types
    * `allowAction` - custom callback method to dynamically decide to allow or disable syncing for that action. Return `true` to allow the action and `false` to restrict the action.
    * `liveStateDataId` - used to set a custom string value as live state data key. If not provided, we will store data in default key.

    Example:

    ```jsx
    const { middleware, updateLiveStateDataId } = createLiveStateMiddleware({
    	allowedActionTypes: new Set(['action1', 'action2']),
    	disabledActionTypes: new Set(['disabledAction1', 'disabledAction2']),
    	allowAction: (action) => {
    		// return true to allow this action, false to restrict this action from syncing
        },
        liveStateDataId: 'custom-live-state-data-id'
    });
    ```

    <Info>
      It is recommended to first set a custom `liveStateDataId` in the middleware configuration. You can then change it dynamically later using the `updateLiveStateDataId` method.
    </Info>

    To set `liveStateDataId` dynamically, call the `updateLiveStateDataId` method that was previously created and exported from your store.

    ```jsx
    import { updateLiveStateDataId } from 'path-to-store.js';

    function YourComponent() {
    	
    	// You can update liveStateDataId any time based on your requirements and all the actions called after that will be synced on new ID path.
    	const setLiveStateDataId = (id) => {
    		updateLiveStateDataId(id);
        }

    	return (
            <div>Your HTML Template</div>
        );
    }
    ```
  </Step>
</Steps>

<RequestExample>
  ```jsx React / Next.js

  // store.js
  import { configureStore } from "@reduxjs/toolkit";
  import { createLiveStateMiddleware } from "@veltdev/react";

  //create middleware and updateLiveStateDataId method
  const { middleware, updateLiveStateDataId } = createLiveStateMiddleware({
  	allowedActionTypes: new Set(['action1', 'action2']),
  	disabledActionTypes: new Set(['disabledAction1', 'disabledAction2']),
  	allowAction: (action) => {
  		// return true to allow this action, false to restrict this action from syncing
      },
      liveStateDataId: 'custom-live-state-data-id'
  });

  //add middleware to your Redux store configuration
  export const store = configureStore({
    reducer: {
  	... your reducers here
    },
    // You just have to concat our liveStateMiddleware in store
    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(middleware)
  });

  // you can optionally export the updateLiveStateDataId method if you want to set liveStateDataId dynamically
  export { updateLiveStateDataId };

  ```
</RequestExample>


# Setup
Source: https://docs.velt.dev/realtime-collaboration/live-state-sync/setup



# Getter and Setter Methods

### Set Live Data

The Live State Sync feature allows you to set and update shared data that syncs in real-time across all connected clients.

**Params**

* `liveStateDataId` (`string`, required) - A unique string ID to identify the data
* `liveStateData` (`any serializable type`, required) - The data to sync (objects, arrays, strings, numbers)

When setting data with an existing ID, it updates that data. All subscriptions are automatically managed and cleaned up.

<Info>Live State data persists indefinitely until manually removed - there is no automatic cleanup.</Info>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateDataId = 'uniqueId'; // A unique string identifier for the data
    const liveStateData = { 'key': 'value' }; // The data to be synced (can be any serializable type)

    // Using Hooks
    useSetLiveStateData(liveStateDataId, liveStateData);

    // Using API
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.setLiveStateData(liveStateDataId, liveStateData);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateDataId = 'uniqueId';
    const liveStateData = { 'key': 'value' }; // any type of data

    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.setLiveStateData(liveStateDataId, liveStateData);
    ```
  </Tab>
</Tabs>

### Get Live Data

Get live state data by providing the unique ID used when setting the data.

**Params**

* `liveStateDataId` (`string`, required) - A unique string ID to identify the data to retrieve
* `liveStateDataConfig` (`object`, optional) - Configuration object for controlling data retrieval behavior
  * `listenToNewChangesOnly` (`boolean`, optional) - Whether to only receive new changes from when the client subscribed (default: `false`)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateDataConfig = {
    	listenToNewChangesOnly: true // default is false
    };
    const liveStateDataId = 'uniqueId';

    // Using Hooks
    const liveStateData = useLiveStateData(liveStateDataId, liveStateDataConfig);

    // Using API
    const liveStateSyncElement = useLiveStateSyncUtils();
    let subscription = liveStateSyncElement.getLiveStateData(liveStateDataId, liveStateDataConfig).subscribe((data) => {
    		// your logic here...
    });
    ```

    If using API, you can unsubscribe from the subscription after you are done:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateDataConfig = {
    	listenToNewChangesOnly: true // default is false
    };
    const liveStateDataId = 'uniqueId';

    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    let subscription = liveStateSyncElement.getLiveStateData(liveStateDataId, liveStateDataConfig).subscribe((data) => {
    		// your logic here...
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

### Alternative: useLiveState()

The `useLiveState()` hook provides a familiar React's `useState()` like API while automatically syncing state changes across all connected clients in real-time.

The hook accepts the following parameters:

* `id` (string, required): Unique identifier for syncing this state across clients
* `initialValue` (any, required): Initial state value
* `options` (object, optional): Configuration object with the following properties:
  * `syncDuration` (number, optional): Debounce delay in milliseconds before syncing. Defaults to 50ms.
  * `resetLiveState` (boolean, optional): Whether to reset server state when the hook initializes. Defaults to false.
  * `listenToNewChangesOnly` (boolean, optional): When true, only receives changes that occur after subscribing and discards historical changes. Defaults to false.

**Returns**

* `[value, setValue, connectionState]`
  * `value`: Current value of the data you set
  * `setValue`: Function to update the data
  * `connectionState`: Current server connection status

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    import { useLiveState } from "@veltdev/react";

    export function MyReactComponent() {
      const [counter, setCounter, serverConnectionStateInLiveState] = useLiveState<number> ("counter", 0, {
        syncDuration: 100,
        resetLiveState: true,
        listenToNewChangesOnly: true // receive only new changes from when the client subscribed
      });

      useEffect(() => {
        console.log('serverConnectionStateInLiveState:', serverConnectionStateInLiveState);
      }, [serverConnectionStateInLiveState]);

      return (
        <div>
          <button onClick={() => setCounter((counter || 0) - 1)}>-</button>
          <span>Counter: {counter}</span>
          <button onClick={() => setCounter((counter || 0) + 1)}>+</button>
        </div>
      );
    }
    ```
  </Tab>
</Tabs>

# Server Connection State

The server connection state indicates the current status of the connection to Velt's servers. The possible states are:

```jsx
enum ServerConnectionState {
  ONLINE = 'online', // Connected to Velt's servers
  OFFLINE = 'offline', // Not connected to Velt's servers
  PENDING_INIT = 'pendingInit', // Pending SDK Initialization
  PENDING_DATA = 'pendingData', // Pending receiving data from server
}
```

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Using Hooks
    const serverConnectionState = useServerConnectionStateChangeHandler();

    useEffect(() => {
      console.log('serverConnectionState', serverConnectionState);
    }, [serverConnectionState]);

    // Using API
    const liveStateSyncElement = useLiveStateSyncUtils();
    let subscription = liveStateSyncElement.onServerConnectionStateChange().subscribe((data) => {
      console.log('server connection state change: ', data);
    });
    ```

    If using API, you can unsubscribe from the subscription after you are done:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    let subscription = liveStateSyncElement.onServerConnectionStateChange().subscribe((data) => {
      console.log('server connection state change: ', data);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

# Best Practices

* Keep your state data structures simple and flat when possible
* Use meaningful IDs that reflect the purpose of the data
* If using APIs, clean up subscriptions when components unmount
* Consider network latency when setting `syncDuration`
* Sync only what you need, not the entire state
* Use `listenToNewChangesOnly` when appropriate


# Customize Behavior
Source: https://docs.velt.dev/realtime-collaboration/presence/customize-behavior



## setInactivityTime

* Set the time it takes for a `User` to go inactive in milliseconds.
* By default we mark a `User` as inactive if they do not take any action on the document within a 5 mins timeframe.
* If they unfocus the tab, we mark them inactive immediately.

Default: `300000ms (5 min)`
![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/presence/inactivity.png)

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltPresence inactivityTime={30000} />
    ```

    Using API:

    ```js
    const presenceElement = client.getPresenceElement();
    presenceElement.setInactivityTime(30000);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-presence inactivity-time="30000"></velt-presence>
    ```

    Using API:

    ```js
    const presenceElement = Velt.getPresenceElement();
    presenceElement.setInactivityTime(30000);
    ```
  </Tab>
</Tabs>

## location

* Show  `Presence` on a `Location`.
* Set the `location` attribute on the `Presence` element. When there are `Users` at that location, their avatars will show in this `Presence` element.
* Eg: For a Presentation tool, you can add `Presence` component at the main `document` level and add another `Presence` component on the slide thumbnails. This will render avatars at both presentation level & slide thumbnail level. For slide thumbnails, it will only show `Users` active on that slide.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/presence/Location.png)

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltPresence location={{page: 1}}/>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-presence location='{"page": 1}'></velt-presence>
    ```
  </Tab>
</Tabs>

## maxUsers

* Set how many `Presence` avatars to display at a time.
* You can set this via the `maxUsers` attribute. Any extra avatars will be hidden and shown in an avatar which indicates the number of extra `Users`.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/presence/Presence_Max_Users.png)

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltPresence maxUsers={3} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-presence max-users="3"></velt-presence>
    ```
  </Tab>
</Tabs>

## onPresenceUserChange

* Whenever the `Presence` for any `User` changes, we emit this event with the updated list of `Users` currently online on this document.

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltPresence onPresenceUserChange={(presenceUsers) => yourMethod(presenceUsers)} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    if(Velt){
      const presenceElement = client.getPresenceElement();
      presenceElement.addEventListener('onPresenceUserChange', (event) => {
        console.log("onPresenceUserChange", event.detail);
      });
    }
    ```
  </Tab>
</Tabs>

## self

* Whether to include yourself in the list of `Presence` users.
* Default: `true`

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/presence/self.png)

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltPresence self={false} />
    ```

    API Method:

    ```jsx
    const presenceElement = client.getPresenceElement();
    presenceElement.enableSelf();
    presenceElement.disableSelf();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-presence self="false"></velt-presence>
    ```

    API Method:

    ```jsx
    const presenceElement = Velt.getPresenceElement();
    presenceElement.enableSelf();
    presenceElement.disableSelf();
    ```
  </Tab>
</Tabs>

## onPresenceUserClick

* To handle click events on `Presence` avatar circles, pass an event handler to the  `onPresenceUserClick` event.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/presence/onPresenceUserClick.png)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const onPresenceUserClickEvent = (user) => {
      console.log("Clicked presence user: ", user);
    }
    	
    <VeltPresence onPresenceUserClick={(user) => onPresenceUserClickEvent(user)} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const presenceTag = document.querySelector('velt-presence');
    	presenceTag.addEventListener('onPresenceUserClick', (event) => {
    		console.log("Clicked presence user: ", event.detail);
    });
    ```
  </Tab>
</Tabs>

## getOnlineUsersOnCurrentDocument

* Subscribe to a list of all online users who are either active or inactive on the current document.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const presenceElement = client.getPresenceElement();
    presenceElement.getOnlineUsersOnCurrentDocument().subscribe((presenceUsers) => {
      console.log("Online users: ", presenceUsers);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const presenceElement = Velt.getPresenceElement();
    presenceElement.getOnlineUsersOnCurrentDocument().subscribe((presenceUsers) => {
      console.log("Online users: ", presenceUsers);
    });
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/realtime-collaboration/presence/overview

Your users can see other users online on the document. This makes your app feel alive.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=presence" scrolling="no" frameBorder="0" className="w-full" height="500px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=presence)


# Setup
Source: https://docs.velt.dev/realtime-collaboration/presence/setup



<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Import Presence Component">
        Import the `Presence` component from the React library.

        ```js
        import { VeltPresence } from '@veltdev/react';
        ```
      </Step>

      <Step title="Add Presence Component">
        Add it anywhere you want to see the `User` avatars.

        ```js
        <VeltPresence />
        ```

        This component renders the avatars of `Users` on the same document in your web app. We automactically detect when `Users` are active on the document and render their avatars.
      </Step>

      <Step title="Test Integration">
        Test it out by opening the target page in two browsers with two different `Users` logged in.

        You should see the avatars of the `Users` rendered where you added the `Presence` component.
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Place the <velt-presence> component">
        Place the component wherever you want the avatars to appear.

        ```html
        <velt-presence></velt-presence>
        ```
      </Step>

      <Step title="Test Integration">
        Test it out by opening the target page in two browsers with two different `Users` logged in.

        You should see the avatars of the `Users` rendered where you added the `Presence` component.
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```js React
  import { VeltPresence } from '@veltdev/react';

  export default function App() {

    return (
      <div className="toolbar">
        <VeltPresence />
      </div>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Presence documentation</title>
    </head>
    <body>
      <div class="toolbar">
        <velt-presence></velt-presence>
      </div>
    </body>
  </html>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/realtime-collaboration/single-editor-mode/overview

Allow only one user to edit at a time but still allow everyone to see the changes as they happen.

## Latency

* Extremely low latency, with typical response times no greater than 10 ms.

## Offline Support

* Optimistic local‑first reads and writes.
* Full offline support with automatic syncing when reconnected.

## Conflict Resolution

* Server timestamp-based last-write-wins strategy for automatic conflict resolution.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=single-editor-mode&layout=horizontal" scrolling="no" frameBorder="0" className="w-full" height="500px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=single-editor-mode\&layout=horizontal)


# Setup
Source: https://docs.velt.dev/realtime-collaboration/single-editor-mode/setup



# Core Configurations

### enableSingleEditorMode

Enables single editor mode, allowing only one user to edit the document at a time while others remain in read-only mode.

**Params**

* `config`: (`object`, optional). Configuration object for controlling single editor mode behavior
  * `customMode`: (`boolean`, optional). When true, SDK won't automatically make HTML elements read-only for viewers. You need to handle this manually with the help of other APIs listed here. (default: `false`)
  * `singleTabEditor`: (`boolean`, optional). When enabled, restricts the editor to edit in only one browser tab at a time, preventing them from making changes across multiple tabs simultaneously (default: `true`)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();

    // Basic usage
    liveStateSyncElement.enableSingleEditorMode();

    // With configuration
    liveStateSyncElement.enableSingleEditorMode({ 
        customMode: true,
        singleTabEditor: false 
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    // Get LiveStateSyncElement from Velt Client
    const liveStateSyncElement = Velt.getLiveStateSyncElement();

    // Basic usage
    liveStateSyncElement.enableSingleEditorMode();

    // With configuration
    liveStateSyncElement.enableSingleEditorMode({
        customMode: true,
        singleTabEditor: false
    });
    ```
  </Tab>
</Tabs>

### disableSingleEditorMode

Disables single editor mode and returns to normal editing.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.disableSingleEditorMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.disableSingleEditorMode();
    ```
  </Tab>
</Tabs>

### Define Single Editor Mode Elements

#### Restrict to specific containers

* Restrict Single Editor Mode to specific containers.
* By default Single Editor Mode is enabled at the entire DOM level. You can restrict this feature to only certain HTML containers & their children by using this.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.singleEditorModeContainerIds(["rightPanel", "editor"]);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.singleEditorModeContainerIds(["rightPanel", "editor"]);
    ```
  </Tab>
</Tabs>

#### Fine tune elements control

Control which elements are controlled by Single Editor Mode.

<Warning>
  You must add the data-velt-sync-access-\* attributes to native HTML elements (e.g. button, input). It will not work directly on React components.
</Warning>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Enable sync access on custom elements
    return (
        <div data-velt-sync-access="true">
            Controlled by Single Editor Mode
        </div>
    );

    // Exclude elements from sync access
    return (
        <button data-velt-sync-access-disabled="true">
            Not controlled by Single Editor Mode
        </button>
    );
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <!-- Enable sync access on custom elements -->
    <div data-velt-sync-access="true">
        Controlled by Single Editor Mode
    </div>

    <!-- Exclude elements from sync access -->
    <button data-velt-sync-access-disabled="true">
        Not controlled by Single Editor Mode
    </button>
    ```
  </Tab>
</Tabs>

### enableDefaultSingleEditorUI

* Control the visibility of the default Single Editor Mode System UI.
* The default UI shows:
  * Current user's editor/viewer status
  * Editor access requests
  * Request timeout countdown
  * Request rejection options
* If you disable the default UI, you'll need to implement your own UI for these features.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();

    // Enable default UI (enabled by default)
    liveStateSyncElement.enableDefaultSingleEditorUI();

    // Disable default UI for custom implementation
    liveStateSyncElement.disableDefaultSingleEditorUI();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();

    // Enable default UI (enabled by default)
    liveStateSyncElement.enableDefaultSingleEditorUI();

    // Disable default UI for custom implementation
    liveStateSyncElement.disableDefaultSingleEditorUI();
    ```
  </Tab>
</Tabs>

### Timeout Configuration

#### setEditorAccessTimeout

* Configure automatic editor access timeout.
* Default: `5 seconds`.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.setEditorAccessTimeout(15); // in seconds
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.setEditorAccessTimeout(15); // in seconds
    ```
  </Tab>
</Tabs>

#### enableEditorAccessTransferOnTimeOut

* When editor access timeout is reached, automatically transfer editor access to the next user in the queue.
* Enabled by default.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.enableEditorAccessTransferOnTimeOut();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.enableEditorAccessTransferOnTimeOut();
    ```
  </Tab>
</Tabs>

#### disableEditorAccessTransferOnTimeOut

* When editor access timeout is reached, do not automatically transfer editor access to the next user in the queue.
* Enabled by default.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.disableEditorAccessTransferOnTimeOut();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.disableEditorAccessTransferOnTimeOut();
    ```
  </Tab>
</Tabs>

#### getEditorAccessTimer

Track the state of editor access request timeout.

**Returns**

* `EditorAccessTimer` object:
  * `state` (`'idle'` | `'inProgress'` | `'completed'`)
  * `durationLeft` (`number`)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Using Hooks
    const editorAccessTimer = useEditorAccessTimer();

    useEffect(() => {
        if (editorAccessTimer?.state === 'completed') {
            // Handle timeout completion
            if (isEditor) {
                acceptEditorAccessRequest();
            } else if (isRequester) {
                setUserAsEditor();
            }
        }
    }, [editorAccessTimer]);

    return (
        <div>
            Status: {editorAccessTimer?.state}
            Time Left: {editorAccessTimer?.durationLeft}s
        </div>
    );


    // Using API
    const liveStateSyncElement = useLiveStateSyncUtils();
    let subscription = liveStateSyncElement.getEditorAccessTimer().subscribe((editorAccessTimer) => {
        console.log('Editor Access Timer:', editorAccessTimer);
    });

    ```
  </Tab>
</Tabs>

### Auto-Sync Text Elements

* Enable automatic syncing of text element contents across all users.
* Supported elements:
  * `<input>`
  * `<textarea>`
  * ContentEditable `<div>`
* First enable the feature and then define which elements should sync realtime.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();

    // Enable auto-sync state
    liveStateSyncElement.enableAutoSyncState();

    // In your JSX
    return (
        <textarea id="uniqueId" data-velt-sync-state="true"></textarea>
    );
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <script>
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.enableAutoSyncState();
    </script>

    <body>
        <!-- Enable auto-sync on text elements -->
        <textarea id="uniqueId" data-velt-sync-state="true"></textarea>
    </body>
    ```
  </Tab>
</Tabs>

# Editor

### setUserAsEditor

Sets the current user as the editor, making all other users read-only.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.setUserAsEditor();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.setUserAsEditor();
    ```
  </Tab>
</Tabs>

### isUserEditor

Get the current user's editor status.

**Returns**

* `UserEditorAccess` object:
  * `isEditor` (`boolean`) - Whether the user is the editor
  * `isEditorOnCurrentTab` (`boolean`) - Whether the user is editor on current tab

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Using Hooks
    const { isEditor, isEditorOnCurrentTab } = useUserEditorState();

    // Using API
    const liveStateSyncElement = useLiveStateSyncUtils();
    let subscription = liveStateSyncElement.isUserEditor().subscribe((userEditorAccess) => {
        console.log('Is Editor:', userEditorAccess.isEditor);
        console.log('Is Editor on Current Tab:', userEditorAccess.isEditorOnCurrentTab);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    let subscription = liveStateSyncElement.isUserEditor().subscribe((userEditorAccess) => {
        console.log('Is Editor:', userEditorAccess.isEditor);
        console.log('Is Editor on Current Tab:', userEditorAccess.isEditorOnCurrentTab);
    });

    // To unsubscribe from the subscription:
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

### getEditor

Get information about the current editor.

**Returns**

* `User` object:
  * `email` (`string`) - Editor's email
  * `name` (`string`) - Editor's name
  * `photoUrl` (`string`) - Editor's photo URL
  * `userId` (`string`) - Editor's unique ID

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Using Hooks
    const editor = useEditor();

    // Using API
    const liveStateSyncElement = useLiveStateSyncUtils();
    let subscription = liveStateSyncElement.getEditor().subscribe((user) => {
        console.log('Editor:', user);
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    let subscription = liveStateSyncElement.getEditor().subscribe((user) => {
        console.log('Editor:', user);
    });

    // To unsubscribe from the subscription:
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

### isEditorAccessRequested

Check if any viewer has requested editor access.

**Returns**

* `null` - User is not editor or request was canceled
* `EditorRequest` object:
  * `requestStatus` (`string`) - 'requested' for active requests
  * `requestedBy` (`User`) - User object of the requester

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Using Hooks
    const editorAccessRequested = useEditorAccessRequestHandler();

    // Using API
    const liveStateSyncElement = useLiveStateSyncUtils();
    let subscription = liveStateSyncElement.isEditorAccessRequested().subscribe((data) => {
        if (data === null) {
            console.log('No active requests or user is not editor');
        } else {
            console.log('Request from:', data.requestedBy.name);
        }
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    let subscription = liveStateSyncElement.isEditorAccessRequested().subscribe((data) => {
        if (data === null) {
            console.log('No active requests or user is not editor');
        } else {
            console.log('Request from:', data.requestedBy.name);
        }
    });

    // To unsubscribe from the subscription:
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

### acceptEditorAccessRequest

Accept editor access requests.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.acceptEditorAccessRequest();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.acceptEditorAccessRequest();
    ```
  </Tab>
</Tabs>

### rejectEditorAccessRequest

Reject editor access requests.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.rejectEditorAccessRequest();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.rejectEditorAccessRequest();
    ```
  </Tab>
</Tabs>

### editCurrentTab

Make current tab editable when editor has multiple tabs open.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.editCurrentTab();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.editCurrentTab();
    ```
  </Tab>
</Tabs>

# Viewer

### requestEditorAccess

Request editor access from the current editor.

**Returns**

* `null` - Request is pending
* `true` - Request accepted
* `false` - Request rejected

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    let subscription = liveStateSyncElement.requestEditorAccess().subscribe((status) => {
        if (status === null) console.log('Request pending');
        else if (status === true) console.log('Request accepted');
        else console.log('Request rejected');
    });
    ```

    To unsubscribe from the subscription:

    ```jsx
    subscription?.unsubscribe()
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    let subscription = liveStateSyncElement.requestEditorAccess().subscribe((status) => {
        if (status === null) console.log('Request pending');
        else if (status === true) console.log('Request accepted');
        else console.log('Request rejected');
    });

    // To unsubscribe from the subscription:
    subscription?.unsubscribe()
    ```
  </Tab>
</Tabs>

### cancelEditorAccessRequest

Cancel the editor access request.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.cancelEditorAccessRequest();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.cancelEditorAccessRequest();
    ```
  </Tab>
</Tabs>

### resetUserAccess

Reset editor access for all users.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const liveStateSyncElement = useLiveStateSyncUtils();
    liveStateSyncElement.resetUserAccess();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const liveStateSyncElement = Velt.getLiveStateSyncElement();
    liveStateSyncElement.resetUserAccess();
    ```
  </Tab>
</Tabs>

# Best Practices

* Use `singleTabEditor` to prevent confusion when users have multiple tabs open
* Add IDs to HTML elements with sync attributes for more robust syncing
* Only apply sync attributes to native HTML elements, not framework components


# null
Source: https://docs.velt.dev/realtime-collaboration/video-player-sync/overview



## Video Player Sync

`Video Player Sync` allows users to sync their video player with other `Users` in the same document.

This lets all `Users` watch the same video at the same time.


# Setup
Source: https://docs.velt.dev/realtime-collaboration/video-player-sync/setup



<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step title="Add the data-sync-video-player attribute to your video player">
        To enable `Video Player Sync` in any video, add the `data-sync-video-player="true"` attribute to your video player.

        ```html
        <div>
            <video data-sync-video-player="true"></video>
        </div>
        ```
      </Step>

      <Step title="Test it out">
        Test out `Video Player Sync` by opening two clients side-by-side and having one client play the video player.
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step title="Add the data-sync-video-player attribute to your video player">
        To enable `Video Player Sync` in any video, add the `data-sync-video-player="true"` attribute to your video player.

        ```html
        <div>
            <video data-sync-video-player="true"></video>
        </div>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js

  export default function App() {
    return (
      <div>
          <video data-sync-video-player="true"></video>
      </div>
    );
  }
  ```

  ```html HTML
  <div>
      <video data-sync-video-player="true"></video>
  </div>

  ```
</RequestExample>


# Version 3.0.0
Source: https://docs.velt.dev/release-notes/3-0-0



## Change Log

<Update label="3.0.87" description="Dec 17 2024">
  ### Improvements

  * \[**Comments**]: Added pagination in autocomplete option dropdown for improved performance.
  * \[**Comments**]: Added "Edit Comment" option in header options dropdown menu for editing the first comment. Only visible to comment author and admins. [Learn more](/ui-customization/features/async/comments/comment-dialog/subcomponents/options-dropdown).
  * \[**Recorder**]: Added `shadow dom` prop in Recorder Player component to control shadow DOM encapsulation.

  <Tabs>
    <Tab title="React / Next.js">
      Using Props:

      ```jsx
      <VeltRecorderPlayer recorderId="-OEIX04CL_jGATT_zunp" shadowDom={false} />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using Props:

      ```html
        <velt-recorder-player recorder-id="-OEIX04CL_jGATT_zunp" shadow-dom="false"></velt-recorder-player>
      ```
    </Tab>
  </Tabs>

  ### Bug Fixes

  * \[**Recorder**]: Fixed an issue where `summary` prop was not working in Recorder Player component.
</Update>

<Update label="3.0.86" description="Dec 17 2024">
  ### Improvements

  * \[**Core**]: Added updates to the core library packages.
</Update>

<Update label="3.0.85" description="Dec 16 2024">
  ### Improvements

  * \[**Core**]: Added accessibility props and test ids for most Velt components within Comments, Notifications, Live Selection features.
</Update>

<Update label="3.0.84" description="Dec 12 2024">
  ### Features

  * \[**UI Customization**]: Added additional CSS variables for z-index customization. [Learn more](/ui-customization/customize-css/themes#available-theme-variables).
    * `--velt-comment-pin-z-index: 2147483557`: For Components like Comment Pin, Triangle, etc.
    * `--velt-arrow-z-index: 2147483557`: For Arrow Component.
    * `--velt-recorder-player-z-index: 2147483557`: For Recorder Player Component.
    * `--velt-cursor-z-index: 2147483647`: For Cursor Component.
    * `--velt-persistent-comment-frame-z-index: 2147483647`: For Persistent Comment Frame Component.
    * `--velt-toast-popup-z-index: 2147483647`: For Toast Popup Component.
    * `--velt-live-state-sync-overlay-z-index: 2147483647`: For Live State Sync Overlay Component.
    * `--velt-follow-mode-overlay-z-index: 2147483647`: For Follow Mode Overlay Component.
    * `--velt-comments-minimap-z-index: 2147483637`: For Comments Minimap Component.
    * `--velt-global-overlay-z-index: 2147483637`: For Global Overlay Component.

  ### Improvements

  * \[**Comments**]: Improved comment annotation view count logic.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where default custom status was not applied when adding new comment annotation.
  * \[**Comments**]: Added support for setting dynamic `targetElementId` value asynchronously in comment tool.
  * \[**Comments**]: Fixed an issue where assign dropdown input wasn't closing after user selection.
  * \[**Comments**]: Fixed padding around assign dropdown.
  * \[**Comments**]: Fixed horizontal scroll and overflow issues for longer emails in assign dropdown input and assign banner.
</Update>

<Update label="3.0.83" description="Dec 11 2024">
  <Warning>
    This release changes how users navigate to comments from the sidebar. We've made navigation more explicit by requiring users to click a dedicated button rather than the comment itself.
  </Warning>

  ### Improvements

  * \[**Comments**]: Added navigation button as default in Comments Sidebar.
    * Now just clicking on a comment doesn't open the comment on the DOM.
    * A lot of users reported this behaviour as frustrating. That's why now there is an explicit navigation button for that.
    * You will still get the [`onCommentClick`](/async-collaboration/comments-sidebar/customize-behavior#oncommentclick) event. You can still use that to maintain the old behavior [using this](/async-collaboration/comments/customize-behavior#selectcommentbyannotationid).
    * If you had previously used a wireframe for the comment dialog, you will need to add the [navigation button wireframe](/ui-customization/features/async/comments/comment-dialog/subcomponents/header) to show the navigation button.
  * \[**Comments**]: Added feature to show resolved comments on for inline comments section.
  * \[**Comments**]: Disabled collapsed comments by default. Most customers don't want to show collapsed comments by default so we disabled it. You can enable it by setting using [this](/async-collaboration/comments/customize-behavior#enablecollapsedcomments).
  * \[**Comments**]: Disabled auto-focus on new comments in inline comments section and sidebar page mode.

  ### Bug Fixes

  * \[**Comments**]: Fixed inline comment section horizontal scroll issue when the available width is too narrow.
  * \[**Comments**]: Fixed Composer Send Button vertical alignment.
  * \[**Comments**]: Removed autofocus for inline comments section when the page loads.
  * \[**Comments**]: Fixed issue where clicking composer in edit mode was passing clicks through to the sidebar.
  * \[**Comments**]: Fixed copy paste replace issue in the composer where pasting text over selected text was not working correctly.
  * \[**Comments**]: Fixed Velt Button Sidebar wireframe loading default UI initially.
  * \[**Comments**]: Fixed unread comments count APIs to return correct values on document switch.
</Update>

<Update label="3.0.82" description="Dec 10 2024">
  ### Improvements

  * \[**Core**]: Added library upgrades to the SDK.
</Update>

<Update label="3.0.81" description="Dec 9 2024">
  ### Improvements

  * \[**Comments**]: Added `readOnly` property in comment sidebar context so that it's available in `Velt Data` and `Velt If` features.
</Update>

<Update label="3.0.80" description="Dec 9 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the Comments Sidebar was emitting multiple update calls.
  * \[**UI Customization**]: Updated border radius for the status component in the Comment Dialog.
</Update>

<Update label="3.0.79" description="Dec 6 2024">
  ### Features

  * \[**Velt Button**]: Added a customizable button component that can be used to add custom actions and extend the functionality of any Velt component. [Learn more](/ui-customization/custom-action-component). Some examples include:
    * Add custom filtering, sorting and grouping to the Comment Sidebar.
    * Add custom actions to each item in the Notifications panel.
    * Add custom actions to the Comment Dialog.

  * \[**Theme Playground**]: Added a new [Theme Playground](https://playground.velt.dev/themes). You can customize and test your themes. It will generate CSS variables that you can just copy and paste into your app.
</Update>

<Update label="3.0.78" description="Dec 5 2024">
  ### Improvements

  * \[**Comments**]: Added additional wireframes for Comment Dialog Toggle Reply Component. [Learn more](/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/togglereply).
  * \[**Comments**]: Now users can't submit empty comments during editing.
  * \[**Comments**]: Improved the padding on the @mention autocomplete dropdown.
  * \[**Ergonomics**]: Updated `useCommentActionCallback` to `useCommentEventCallback`. The old hook name will continue to work.
  * \[**Ergonomics**]: For Sidebar Custom actions and filters, updated APIs and Hooks:
    * `onCommentSidebarInit` can now be also be accessed with `useCommentEventCallback('commentSidebarDataInit')` or `commentElement.on('commentSidebarDataInit')`
    * `onCommentSidebarData` can now be also be accessed with `useCommentEventCallback('commentSidebarDataUpdate')` or `commentElement.on('commentSidebarDataUpdate')`

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the Comment sidebar group count was not updated correctly.
  * \[**Comments**]: Fixed an issue where attached files were not displayed on the very first comment in inline and page mode comments.
  * \[**Comments**]: Fixed a UI issue where attachments were misaligned when a comment was edited.
  * \[**Comments**]: Fixed a UX issue where the comment composer did not scroll into view when comment edit button was clicked.
  * \[**Comments**]: Resolved a UI issue where the Page Mode composer in the comment sidebar during embed mode was not taking the full width of the parent container.
</Update>

<Update label="3.0.77" description="Dec 3 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the Comment Annotation unread count was not updated correctly.
</Update>

<Update label="3.0.76" description="Dec 2 2024">
  ### Features

  * \[**Comments**]: Added ability to make comments read-only. When comments are made read-only, any features requiring user interaction (e.g., Composer, Reactions, Status) will be removed.

  <Tabs>
    <Tab title="React / Next.JS">
      Using Props:

      ```jsx
      <VeltComments readOnly={true} />
      ```

      Using API:

      ```js
        const commentElement = client.getCommentElement();
        commentElement.enableReadOnly();
        commentElement.disableReadOnly();
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using Props:

      ```html
      <velt-comments read-only="true"></velt-comments>
      ```

      Using API:

      ```js
        const commentElement = Velt.getCommentElement();
        commentElement.enableReadOnly();
        commentElement.disableReadOnly();
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="3.0.75" description="Nov 29 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed image lightbox CSS related issue
</Update>

<Update label="3.0.74" description="Nov 29 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed undefined value error while updating context.
</Update>

<Update label="3.0.73" description="Nov 28 2024">
  ### Bug Fixes

  * \[**Comments**]: Added `composerVariant` prop to `VeltInlineCommentsSection` component to support inline composer variant

  <Tabs>
    <Tab title="React / Next.JS">
      ```jsx
      <VeltInlineCommentsSection composerVariant='inline' />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-inline-comments-section composer-variant='inline'></velt-inline-comments-section>
      ```
    </Tab>
  </Tabs>

  * \[**UI**]: Minor CSS fixes and improvements
</Update>

<Update label="3.0.74" description="Nov 29 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed undefined value error while updating context.
</Update>

<Update label="3.0.72" description="Nov 26 2024">
  ### Improvements

  * \[**Comments**]: Added support for programatic selection and scrolling to comments in the `velt-comment-text` component used in Tiptap Comments.
</Update>

<Update label="3.0.71" description="Nov 25 2024">
  ### Features

  * \[**Comments**]: Added ability to customize the placeholder text shown in the search input of the comments sidebar:

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltWireframe>
          <VeltCommentsSidebarWireframe.Header>
              ...
              <VeltCommentsSidebarWireframe.Search placeholder="Search Comments" />
              ...
          </VeltCommentsSidebarWireframe.Header>
      </VeltWireframe>
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-wireframe style="display:none;">
          <velt-comments-sidebar-header-wireframe>
              ...
              <velt-comments-sidebar-search-wireframe placeholder="Search Comments"></velt-comments-sidebar-search-wireframe>
              ...
          </velt-comments-sidebar-header-wireframe>
      </velt-wireframe>
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="3.0.70" description="Nov 22 2024">
  ### Features

  * \[**Comment**]: Added [new APIs, hooks and event callbacks](/async-collaboration/comments/customize-behavior) for each action that the user can perform on the Comment's Feature Components or API:
    * **APIs & Hooks**:
      * **Comment Annotation**: addCommentAnnotation, deleteCommentAnnotation
      * **Comment**: addComment, deleteComment, updateComment, getComment
      * **@Mention**: subscribeCommentAnnotation, unsubscribeCommentAnnotation, assignUser
      * **Reaction**: addReaction, deleteReaction, toggleReaction
      * **Attachment**: addAttachment, deleteAttachment, getAttachment
      * **Status & Priority**: updateStatus, updatePriority, resolveCommentAnnotation
      * **Recording**: getRecording, deleteRecording
      * **Deep Link**: getLink, copyLink
      * **Moderation**: approveCommentAnnotation, acceptCommentAnnotation, rejectCommentAnnotation, updateAccess
    * **More Event Callbacks**:
      * [On](/async-collaboration/comments/customize-behavior#on)
      * [Here](/async-collaboration/comments/customize-behavior#on) is the list of events you can subscribe to.

  * \[**Metadata**]: Get the currently set organization, document and location objects:
    ```jsx
    const metadata = await client.getMetadata();
    ```

  * \[**UI Customization**]: Added ability to customize comment sidebar search placeholder:

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
        <VeltCommentsSidebar searchPlaceholder="New placeholder" />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-comments-sidebar search-placeholder="New placeholder"></velt-comments-sidebar>
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="3.0.69" description="Nov 21 2024">
  ### Features

  * \[**UI Customization**]: Extended themes to include more components:
    * Comments:
      * Autocomplete
      * Tooltip
      * Chart Comments
      * Text Comment Toolbar
      * Comment Inbox
      * Comment Text Portal
      * Persistent Comment Mode
      * Minimap
      * Inline Comment Section
      * Multi Thread Comments
    * Notifications
      * Notifications Panel
      * Notification Tool
</Update>

<Update label="3.0.67" description="Nov 20 2024">
  ### Features

  * \[**UI Customization**]: Introducing Themes! Now you can customize the look and feel of Velt components using CSS variables. This enables you to match Velt's UI with your application's design system.

    * The following components now support theming (others will be added soon):
      * Comment Components
      * Recording Components
      * Reactions

    * You can customize:
      * Border radius
      * Spacing
      * Typography
      * Colors for light and dark modes
        * Base Colors
        * Accent Colors
        * Text Shades
        * Background Shades
        * Border Shades
        * Status Colors (error, warning, success)
        * Transparent colors

    * Learn more about UI Customization [here](/ui-customization/overview).

  <Tabs>
    <Tab title="Border Radius">
      ```css
      --velt-border-radius-2xs: 0.125rem; // 2px
      --velt-border-radius-xs: 0.25rem; // 4px
      --velt-border-radius-sm: 0.5rem; // 8px
      --velt-border-radius-md: 0.75rem; // 12px
      --velt-border-radius-lg: 1rem; // 16px
      --velt-border-radius-xl: 1.25rem; // 20px
      --velt-border-radius-2xl: 1.5rem; // 24px
      --velt-border-radius-3xl: 2rem; // 32px
      --velt-border-radius-full: 5rem; // 80px
      ```
    </Tab>

    <Tab title="Spacing">
      ```css
        --velt-spacing-2xs: 0.125rem; // 2px
        --velt-spacing-xs: 0.25rem; // 4px
        --velt-spacing-sm: 0.5rem; // 8px
        --velt-spacing-md: 0.75rem; // 12px
        --velt-spacing-lg: 1rem; // 16px
        --velt-spacing-xl: 1.25rem; // 20px
        --velt-spacing-2xl: 1.5rem; // 24px
      ```
    </Tab>

    <Tab title="Typography">
      ```css
        --velt-default-font-family: sans-serif;
        --velt-font-size-2xs: 0.625rem; // 10px
        --velt-font-size-xs: 0.75rem; // 12px
        --velt-font-size-sm: 0.875rem; // 14px
        --velt-font-size-md: 1rem; // 16px
        --velt-font-size-lg: 1.5rem; // 24px
        --velt-font-size-xl: 1.75rem; // 28px
        --velt-font-size-2xl: 2rem; // 32px
      ```
    </Tab>

    <Tab title="Colors - Light Mode">
      ```css
        /* Base Colors */
        --velt-light-mode-green: #0DCF82;
        --velt-light-mode-magenta: #A259FE;
        --velt-light-mode-amber: #FF7162;
        --velt-light-mode-purple: #625DF5;
        --velt-light-mode-cyan: #4BC9F0;
        --velt-light-mode-orange: #FE965C;
        --velt-light-mode-black: #080808;
        --velt-light-mode-white: #FFFFFF;
        --velt-light-mode-gray: #EBEBEB;

        /* Accent Colors */
        --velt-light-mode-accent: #625DF5;
        --velt-light-mode-accent-text: #9491F8;
        --velt-light-mode-accent-hover: #534FCF;
        --velt-light-mode-accent-foreground: #FFFFFF;
        --velt-light-mode-accent-light: #F2F2FE;
        --velt-light-mode-accent-transparent: rgba(148, 145, 248, 0.08);

        /* Text Shades */
        --velt-light-mode-text-0: #0A0A0A;
        --velt-light-mode-text-1: #141414;
        --velt-light-mode-text-2: #1F1F1F;
        --velt-light-mode-text-3: #292929;
        --velt-light-mode-text-4: #3D3D3D;
        --velt-light-mode-text-5: #525252;
        --velt-light-mode-text-6: #666666;
        --velt-light-mode-text-7: #7A7A7A;
        --velt-light-mode-text-8: #858585;
        --velt-light-mode-text-9: #999999;
        --velt-light-mode-text-10: #B8B8B8;
        --velt-light-mode-text-11: #A3A3A3;
        --velt-light-mode-text-12: #8F8F8F;

        /* Background Shades */
        --velt-light-mode-background-0: #FFFFFF;
        --velt-light-mode-background-1: #FAFAFA;
        --velt-light-mode-background-2: #F5F5F5;
        --velt-light-mode-background-3: #F0F0F0;
        --velt-light-mode-background-4: #EBEBEB;
        --velt-light-mode-background-5: #E5E5E5;
        --velt-light-mode-background-6: #E0E0E0;
        --velt-light-mode-background-7: #DBDBDB;
        --velt-light-mode-background-8: #D6D6D6;
        --velt-light-mode-background-9: #D1D1D1;
        --velt-light-mode-background-10: #CCCCCC;

        /* Border Shades */
        --velt-light-mode-border-0: #FFFFFF;
        --velt-light-mode-border-1: #FAFAFA;
        --velt-light-mode-border-2: #F5F5F5;
        --velt-light-mode-border-3: #F0F0F0;
        --velt-light-mode-border-4: #EBEBEB;
        --velt-light-mode-border-5: #E5E5E5;
        --velt-light-mode-border-6: #E0E0E0;
        --velt-light-mode-border-7: #DBDBDB;
        --velt-light-mode-border-8: #D6D6D6;
        --velt-light-mode-border-9: #D1D1D1;
        --velt-light-mode-border-10: #CCCCCC;

        /* Status Colors */
        /* Error */
        --velt-light-mode-error: #FF7162;
        --velt-light-mode-error-hover: #DE5041;
        --velt-light-mode-error-foreground: #FFFFFF;
        --velt-light-mode-error-light: #FFF4F2;
        --velt-light-mode-error-transparent: rgba(255, 113, 98, 0.08);

        /* Warning */
        --velt-light-mode-warning: #FFCD2E;
        --velt-light-mode-warning-hover: #C69400;
        --velt-light-mode-warning-foreground: #474747;
        --velt-light-mode-warning-light: #FFFBEE;
        --velt-light-mode-warning-transparent: rgba(255, 205, 46, 0.08);

        /* Success */
        --velt-light-mode-success: #198F65;
        --velt-light-mode-success-hover: #006B41;
        --velt-light-mode-success-foreground: #FFFFFF;
        --velt-light-mode-success-light: #EDF6F3;
        --velt-light-mode-success-transparent: rgba(25, 143, 101, 0.08);

        /* Transparent Colors */
        --velt-light-mode-background-transparent: rgba(255, 255, 255, 0.80);
        --velt-light-mode-border-transparent: rgba(0, 0, 0, 0.16);
        --velt-light-mode-animation-transparent: rgba(255, 255, 255, 0.2);
      ```
    </Tab>

    <Tab title="Colors - Dark Mode">
      ```css
        /* Base Colors */
        --velt-dark-mode-green: #0DCF82;
        --velt-dark-mode-magenta: #A259FE;
        --velt-dark-mode-amber: #FF7162;
        --velt-dark-mode-purple: #625DF5;
        --velt-dark-mode-cyan: #4BC9F0;
        --velt-dark-mode-orange: #FE965C;
        --velt-dark-mode-black: #080808;
        --velt-dark-mode-white: #FFFFFF;
        --velt-dark-mode-gray: #EBEBEB;

        /* Accent Colors */
        --velt-dark-mode-accent: #625DF5;
        --velt-dark-mode-accent-text: #9491F8;
        --velt-dark-mode-accent-hover: #534FCF;
        --velt-dark-mode-accent-foreground: #FFFFFF;
        --velt-dark-mode-accent-light: #F2F2FE;
        --velt-dark-mode-accent-transparent: rgba(148, 145, 248, 0.08);

        /* Text Shades */
        --velt-dark-mode-text-0: #FFFFFF;
        --velt-dark-mode-text-1: #F5F5F5;
        --velt-dark-mode-text-2: #EBEBEB;
        --velt-dark-mode-text-3: #E0E0E0;
        --velt-dark-mode-text-4: #D6D6D6;
        --velt-dark-mode-text-5: #C2C2C2;
        --velt-dark-mode-text-6: #ADADAD;
        --velt-dark-mode-text-7: #8F8F8F;
        --velt-dark-mode-text-8: #7A7A7A;
        --velt-dark-mode-text-9: #666666;
        --velt-dark-mode-text-10: #525252;
        --velt-dark-mode-text-11: #474747;
        --velt-dark-mode-text-12: #3D3D3D;

        /* Background Shades */
        --velt-dark-mode-background-0: #0F0F0F;
        --velt-dark-mode-background-1: #1A1A1A;
        --velt-dark-mode-background-2: #1F1F1F;
        --velt-dark-mode-background-3: #242424;
        --velt-dark-mode-background-4: #292929;
        --velt-dark-mode-background-5: #2E2E2E;
        --velt-dark-mode-background-6: #333333;
        --velt-dark-mode-background-7: #383838;
        --velt-dark-mode-background-8: #3D3D3D;
        --velt-dark-mode-background-9: #424242;
        --velt-dark-mode-background-10: #474747;

        /* Border Shades */
        --velt-dark-mode-border-0: #0F0F0F;
        --velt-dark-mode-border-1: #1A1A1A;
        --velt-dark-mode-border-2: #1F1F1F;
        --velt-dark-mode-border-3: #242424;
        --velt-dark-mode-border-4: #292929;
        --velt-dark-mode-border-5: #2E2E2E;
        --velt-dark-mode-border-6: #333333;
        --velt-dark-mode-border-7: #383838;
        --velt-dark-mode-border-8: #3D3D3D;
        --velt-dark-mode-border-9: #424242;
        --velt-dark-mode-border-10: #474747;

        /* Status Colors */
        /* Error */
        --velt-dark-mode-error: #FF7162;
        --velt-dark-mode-error-hover: #DE5041;
        --velt-dark-mode-error-foreground: #FFFFFF;
        --velt-dark-mode-error-light: #FFF4F2;
        --velt-dark-mode-error-transparent: rgba(255, 113, 98, 0.08);

        /* Warning */
        --velt-dark-mode-warning: #FFCD2E;
        --velt-dark-mode-warning-hover: #C69400;
        --velt-dark-mode-warning-foreground: #474747;
        --velt-dark-mode-warning-light: #FFFBEE;
        --velt-dark-mode-warning-transparent: rgba(255, 205, 46, 0.08);

        /* Success */
        --velt-dark-mode-success: #198F65;
        --velt-dark-mode-success-hover: #006B41;
        --velt-dark-mode-success-foreground: #FFFFFF;
        --velt-dark-mode-success-light: #EDF6F3;
        --velt-dark-mode-success-transparent: rgba(25, 143, 101, 0.08);

        /* Transparent Colors */
        --velt-dark-mode-background-transparent: rgba(0, 0, 0, 0.80);
        --velt-dark-mode-border-transparent: rgba(255, 255, 255, 0.16);
        --velt-dark-mode-animation-transparent: rgba(255, 255, 255, 0.2);
      ```
    </Tab>
  </Tabs>

  * Example of theme customisation:
    * You can update the following variables in `<body>` tag to change the theme.
    * For testing, try copy pasting the following sample themes in body tag:
    ```css
    body {
      --velt-light-mode-accent: #0BA528;
      --velt-light-mode-accent-text: #0BA528;
      --velt-light-mode-accent-hover: #08841F;
      --velt-light-mode-accent-foreground: #FFFFFF;
      --velt-light-mode-accent-light: #DFF9E4;
      --velt-light-mode-accent-transparent: rgba(11, 165, 40, 0.08);

      --velt-dark-mode-accent: #0BA528;
      --velt-dark-mode-accent-text: #0BA528;
      --velt-dark-mode-accent-hover: #08841F;
      --velt-dark-mode-accent-foreground: #FFFFFF;
      --velt-dark-mode-accent-light: #DFF9E4;
      --velt-dark-mode-accent-transparent: rgba(11, 165, 40, 0.08);

      --velt-border-radius-2xs: 2px;
      --velt-border-radius-xs: 2px;
      --velt-border-radius-sm: 2px;
      --velt-border-radius-md: 2px;
      --velt-border-radius-lg: 2px;
      --velt-border-radius-xl: 2px;
      --velt-border-radius-2xl: 2px;
      --velt-border-radius-3xl: 2px;
      --velt-border-radius-full: 2px;
    }
    ```
</Update>

<Update label="3.0.66" description="Nov 18 2024">
  ### Features

  * \[**Comments**]: Added support for passing Comment Annotation objects to Standalone Comment Thread component.

    * When using annotations from other documents:
      * Comments will be read-only
      * Reactions and recordings will not be rendered
    * This enables creating Kanban boards by fetching comment annotations from multiple documents using our REST APIs.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentThread annotation={COMMENT_ANNOTATION_OBJECT} />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comment-thread annotation="STRINGIFIED_COMMENT_ANNOTATION_OBJECT"></velt-comment-thread>
        ```
      </Tab>
    </Tabs>

  * \[**Comments**]: Added `shortUserName` feature to control display of user names.

    * For long names, this will first create an initial of the second name and if the name is still long, it will truncate it with ellipses.
    * It's enabled by default.

    <Tabs>
      <Tab title="React / Next.js">
        **Using Props:**

        ```jsx
        <VeltComments shortUserName={false} />
        ```

        **Using API:**

        ```js
        const commentElement = client.getCommentElement();
        commentElement.enableShortUserName();
        commentElement.disableShortUserName();
        ```
      </Tab>

      <Tab title="Other Frameworks">
        **Using Props:**

        ```html
        <velt-comments short-user-name="false"></velt-comments>
        ```

        **Using API:**

        ```js
        const commentElement = Velt.getCommentElement();
        commentElement.enableShortUserName();
        commentElement.disableShortUserName();
        ```
      </Tab>
    </Tabs>
</Update>

<Update label="3.0.65" description="Nov 15 2024">
  ### Improvements

  * \[**Comments**]: Added support for light mode in the contact chip tooltip.
  * \[**Comments**]: Removed unnecessary filtering in the sidebar when comment annotation selection changes.
</Update>

<Update label="3.0.64" description="Nov 13 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where `onCommentSidebarData` event was getting triggered multiple times on sidebar clicks.
  * \[**Comments**]: Fixed an issue where empty placeholder was not being displayed in the sidebar for page mode and custom action filters.
</Update>

<Update label="3.0.63" description="Nov 12 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed issue where bottom sheet was incorrectly opening in the sidebar on mobile devices.
</Update>

<Update label="3.0.62" description="Nov 12 2024">
  ### Features

  * \[**Comments**]: Fixed issue where edit comment composer was not appearing in the sidebar.

  * \[**Comments**]: Added offset property to Comment Player Timeline. This allows comment bubbles to be positioned relative to both parent and child video clips.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentPlayerTimeline offset={10} />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comment-player-timeline offset="10"></velt-comment-player-timeline>
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Dynamic Hooks**]: Now the LiveStateSync and Views hooks support dynamic input parameters for non-primitive data types.

  ### Bug Fixes

  * \[**Comments**]: Fixed issue where edit comment composer was not appearing in the sidebar.
</Update>

<Update label="3.0.61" description="Nov 9 2024">
  ### Features

  * \[**REST APIs**]: Added advanced queries and pagination for GET endpoints.
    * You need to upgrade to version 3.0.61 and enable this in your developer console.
    * Check out the [V2 REST APIs endpoints](/api-reference/rest-apis/comments-feature/comment-annotations/get-comment-annotations-v2) for more information.
</Update>

<Update label="3.0.60" description="Nov 9 2024">
  ### Features

  * \[**Comments**]: Added ability to enable/disable recording transcription feature on recorder:

    <Tabs>
      <Tab title="React / Next.js">
        **Using Props:**

        ```jsx
        <VeltComments recordingTranscription={false} />
        ```

        **Using API Methods:**

        ```javascript
        // Using comment element
        const commentElement = client.getCommentElement();
        commentElement.enableRecordingTranscription();
        commentElement.disableRecordingTranscription();

        // Or using recorder element 
        const recorderElement = client.getRecorderElement();
        recorderElement.enableRecordingTranscription();
        recorderElement.disableRecordingTranscription();
        ```
      </Tab>

      <Tab title="Other Frameworks">
        **Using Props:**

        ```html
        <velt-comments recording-transcription="false"></velt-comments>
        ```

        **Using API Methods:**

        ```javascript
        // Using comment element
        const commentElement = Velt.getCommentElement();
        commentElement.enableRecordingTranscription();
        commentElement.disableRecordingTranscription();

        // Or using recorder element 
        const recorderElement = Velt.getRecorderElement();
        recorderElement.enableRecordingTranscription();
        recorderElement.disableRecordingTranscription();
        ```
      </Tab>
    </Tabs>

  ### Bug Fixes

  * \[**Comments**]: Fixed range error that occurred when recording without comment text.
</Update>

<Update label="3.0.59" description="Nov 8 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed several issues with the comment dialog and inline comments:
    * Fixed cursor position not being set correctly when focusing comment input
    * Fixed an issue where editing a comment and saving it as a draft created a new comment
    * Fixed an issue where sometimes comment pin was visible on the inline comments section
</Update>

<Update label="3.0.58" description="Nov 6 2024">
  ### Improvements

  * \[**Comments**]: Added ability to sort inline comments:

    * `asc`: Show comments in ascending order of last updated timestamp
    * `desc`: Show comments in descending order of last updated timestamp
    * `none`: Show comments in order of creation (default)

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltInlineCommentsSection sortData="desc" />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-inline-comments-section sort-data="asc"></velt-inline-comments-section> 
        ```
      </Tab>
    </Tabs>

  * \[**Comments**]: Further improved how empty comments are handled:
    * Empty comments are now hidden from the sidebar and sidebar button count
    * In popover mode, clicking a new comment button discards any previous empty comment

  * \[**Comments**]: Added delete option for each comment in annotations when user has admin privileges.
</Update>

<Update label="3.0.57" description="Nov 5 2024">
  ### Bug Fixes

  * \[**Notifications**]: Optimized and fixed issues related to loading notifications on `documentId` and `organizationId` change.
</Update>

<Update label="3.0.56" description="Nov 1 2024">
  ### Improvements

  * \[**Comments**]: Improved the system grouping logic for locations.
  * \[**Comments**]: Enhanced `updateContext` logic to prevent unnecessary updates if the passed context object remains unchanged.
  * \[**Comments**]: Exposed `commentAnnotations` variable in the comments sidebar so that it can be used in `Velt Data` and `Velt If` Components.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where adding the `Copy Link` wireframe component in the header options menu generated undefined Comment URLs.
</Update>

<Update label="3.0.54" description="Oct 30 2024">
  ### Improvements

  * \[**Comments**]: The "clear filter" button in the sidebar now only appears when comments are hidden due to active filters, not when there are no comments on the document.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue with the Assign feature across different comment modes:
    * Page mode
    * Inline mode
    * Multi-thread mode

  * \[**Comments**]: Fixed an issue where reactions were not updated in focused thread mode.
</Update>

<Update label="3.0.53" description="Oct 29 2024">
  ### New Features

  * \[**Comments**]: Now comments are supported on elements with duplicate DOM IDs.
    * This is useful in cases where you have multiple instances of the same data component on a page and want the comment to appear on each instance, eg: Popover comments on a table.
    * By default, comments appear on all matching elements. Use the `sourceId` attribute to control which element displays the comment dialog when adding a new comment.
    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentTool sourceId="sourceId1" />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comment-tool source-id="sourceId1"></velt-comment-tool>
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Comments**]: In multithread mode, now you can deselect a thread by clicking on the header of the multi-thread dialog.
  * \[**Comments**]: Removed self user from the list of users in the "Seen By" dropdown.
  * \[**Comments**]: Removed users without name and email from the list of users in the "Seen By" dropdown.

  ### Bug Fixes

  * \[**Tiptap Comments**]: Removed `data-velt-content` attribute. Now the highlighted text styling is only applied to text when there are comments available.
  * \[**Comments**]: Fixed an issue where undefined and null string values appeared in individual and group contact lists.
</Update>

<Update label="3.0.52" description="Oct 25 2024">
  ### Bug Fixes

  * \[**Security**]: Added security updates.
</Update>

<Update label="3.0.51" description="Oct 25 2024">
  ### New Features

  * \[**Recorder**]: Added `getRecordingData` API to fetch [recording data](/api-reference/models/RecorderData) including transcript, summary, and recording URLs.

    <Tabs>
      <Tab title="React / Next.js">
        **Using Hook:**

        ```jsx
        const recorderData = useRecordingDataByRecorderId('-O9yTMWmEe5u6YGX8EFV');

        useEffect(() => {
            console.log('Recorder Data: ', recorderData);
        }, [recorderData]);
        ```

        **Using API:**

        ```jsx
        const recorderElement = client.getRecorderElement();

        recorderElement.getRecordingDataByRecorderId("-O9yGiYS8lehOXMpQf4j").subscribe((recorderData) => {
            console.log('Recorder Data: ', recorderData);
        });
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```javascript
        const recorderElement = Velt.getRecorderElement();

        recorderElement.getRecordingDataByRecorderId("-O9yGiYS8lehOXMpQf4j").subscribe((recorderData) => {
            console.log('Recorder Data: ', recorderData);
        });
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Comments**]: In the sidebar, changed default `isExpanded` behavior in custom filtering. If not explicitly set, the first group will be expanded while remaining groups are collapsed.
</Update>

<Update label="3.0.50" description="Oct 24 2024">
  ### New Features

  * \[**Comments**]: Added variant support to the `Velt Comment Pin` component. This is useful for customizing how the pin looks on different elements like charts, tables, etc.
    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentPin variant="CUSTOM_VARIANT" />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comment-pin variant="CUSTOM_VARIANT"></velt-comment-pin>
        ```
      </Tab>
    </Tabs>

  * \[**Access Control**]: Enabled users logged in with "Org A" to access documents belonging to "Org B".
    * By default, users can only access documents within their own organization.
    * You can enable cross-organization access by specifying the `organizationId` of the target document in the document metadata.
    * Ensure that the user has access to the target document in the target organization.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Hook:**

      ```jsx
      useSetDocument(DOCUMENT_ID, {
        organizationId: 'ANOTHER_ORGANIZATION_ID'
      });
      ```

      **Using API:**

      ```jsx
      client.setDocument(DOCUMENT_ID, {
        organizationId: 'ANOTHER_ORGANIZATION_ID'
      });
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```javascript
      Velt.setDocument(DOCUMENT_ID, {
        organizationId: 'ANOTHER_ORGANIZATION_ID'
      });
      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added ability to toggle the "Seen By" feature:
    <Tabs>
      <Tab title="React / Next.js">
        **Using Props:**

        ```jsx
        <VeltComments seenByUsers={false} />
        ```

        **Using API:**

        ```jsx
        const commentElement = client.getCommentElement();
        commentElement.enableSeenByUsers();
        commentElement.disableSeenByUsers();
        ```
      </Tab>

      <Tab title="Other Frameworks">
        **Using Props:**

        ```html
        <velt-comments seen-by-users="false"></velt-comments>
        ```

        **Using API:**

        ```javascript
        const commentElement = Velt.getCommentElement();
        commentElement.enableSeenByUsers();
        commentElement.disableSeenByUsers();
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Live Selection**]: Improved the live selection UI.

  * \[**Recording**]: Added new wireframes for the recording feature:
    * Media Source Settings
    * Recorder All Tool
    * Recorder All Tool Menu
    * Recorder Audio Tool
    * Recorder Video Tool
    * Recorder Screen Tool
    * Recording Preview Steps Dialog
    * Recorder Control Panel
    * Recorder Player
    * Video Player
    * Subtitles
    * Transcription

  * \[**Comments**]: Updated the empty state UI and added a clear filter button in the sidebar.

  * \[**Comments**]: The "Custom filters" applied by the user are now stored in session storage just like the System filters.

  ### Improvements

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue in TipTap editor where the comment dialog closed prematurely after adding a comment in single-thread mode.
  * \[**Comments**]: Fixed an issue on minimap where clicking on it was not navigating to the comment location.
  * \[**Comments**]: Fixed an issue where image attachments in comments were not opening in the lightbox.
  * \[**Comments**]: Fixed an issue where the "AtHere" was not working when the label was set to "all".
</Update>

<Update label="3.0.49" description="Oct 17 2024">
  ### Improvements

  * \[**Security**]: Added security updates.
</Update>

<Update label="3.0.48" description="Oct 17 2024">
  ### Improvements

  * \[**Comments**]: Added dark mode support for the "Seen By" dropdown in the comment dialog.
</Update>

<Update label="3.0.47" description="Oct 16 2024">
  ### New Features

  * \[**Webhooks**]: Added configuration option to encrypt webhook payloads using a secret key.
    * Configure this option in the [Velt Console](https://console.velt.dev/dashboard/config/webhook).
    * Encryption details:
      * Payload encryption: AES-256-CBC
      * Key encryption: RSA with PKCS1 OAEP padding and SHA-256 hash
    * Public key format:
      * Provide only the base64-encoded key string, without PEM headers/footers
      * Recommended key size: 2048 bits
    * Example of setting up encryption for Node.js:

  <Tabs>
    <Tab title="Sample Encrypted Payload">
      ```js
      {
        "encryptedData": "1rtsa9UVvXzkP+u0ax2TOlz6xKcwKXhmtHyQF1I4II8X4n9uYb944Q/6AfUNFc2zQj9+AWJIV1Gtoo0j+j5VI8qS4kCVnP4In6v0I3wVECldgZsNAwwD4wKp85OJZUJL4scQmJJK+XXmMNGOW094BcIIa6zKRqYKja5RBm5zEj3k1qsP3WZkUXpggJ4FNuHkWX2nkoDLP5Rby6CY186TEeBIxY+aKS6FyWmOiDDC6ZfuY++BFNJbksNvsbBogDqHB2qa30nK9oEcOKSsXdU4AYof/mPOG01fK2diK3vyk4qcL83mJ0cXm7+SbM+FBFeJpdR+A7iIez1XrdnGlAqppnSfDoNBv2WZ/lRyZJWOyW7QHySMNTn746+JDr8oltIBDVUx5c2m8A/YeQ6E3wWEjjRZcfz3GNSzpEx+jqeNxS0StN7BUXUyHt3786EaXiUtjb2OtrP56mlidXytdHhPZPOy7stRwHnwgXfm5aLsS2yJSs3gSSUubL+ka4fhaJsqxtgXQATSh0RtNXSmAbx930DKn2DipbP23fJRduju/GP1nHnKuy8bOuyB5Du//RrysvKVC4+lMd4mVIc7cSXe25qcPjJFZGpJtJdkNwOZoWCmxMSdR32HBgo7KWJeOWqnWyuLdjQOaxol+JtTu8lopeQk7qfncEXMLcT7YRVQ4t1LZ5T9o4pZEtaOg1LwyX58VQS1OHvgBFWlEPxLfdS1r4c1YzMXLNA4sfYEp06Z11IlEFVCtWobK5//tLc+sIpwfMzdJ3VtVl9Z2XB9kASlnHf88eOdtzvn5A0CRhVBY/v855CttAy/WlPINtXxXSxm9oVMjrBFueWAZ3LQiXDl25to62L5i0NR93zEBKj1BG8egy3F27o8s5kcvrwpc3NGrmDe7x3S11noDAFsxZRWpHnRIapHcsrLWOjWVEumvUxlApKGKL3Ax80XBoN+aTNG4SXGq3dRHSneIs/MNSb0BGWoOD5U5ow58R1tvpzJHtLLnmesL1Vhr23Cug8KHU2q7+e8AnGGPTJIRKfVXjocMDclhDAk5/nuvtUTYG/hRZEQ1yCx3T7H08I6GvyOv4ErtKr+r883hXSYzf1K9eqk7de5mnmxwSEiAh0zagvZ+lMYhWpayeo+xHvtoyzfTsLNyXKc6AYZxfoIVK6UuBfkDnXiAh+NuJDa3wKwig13gQX8GmdJXeSSatI6uuXI1IU5xKIXysaHeAOaHfni+cfDgvUZTtVbWc1qDcNOVEUSl9KsjOUUgdzvST1tJ1ezMNZFbhlrPB3t5y0XvM9QQh1GyyeABxHl8nH/Icrp2Shf5vBntNbRZ3PlzK7nVtgTxXaKhZnGobwY7uruPpahNfkEi83JvOOnHeHBMXrVMAr8GHDRi8099wzvJRHYcb2p6eWocQsDV1X6tcTLuxj3EHGwykWREkkTDQ5C/F40n97PP0U2cxSGJIMePUwgAYw5OFo0dJMsU1HvXjm+2JoO8DkdwPl3Bc9F22trvsA3QecUCKQDGMTuFrFxtlubtJYtVl7w3pBST0SCKx3G2QiycRz0FMWv2FJpazQl6jE4xEqeKf7fiUn/QIo4Levk745LPhfr2tzlXbkdZ2q9TtmSAs5hjpK7ndswbIbvV8Ju5V8mDJXSR0y0NKG2C/8/vTB0xfqYtW/Bv3cXj6do9UQzP6fOFC4SGvYh/l8yohJmCTFq0tETqvZr9Atw9ZOz2cIBFx76wlS/eR9iB/JZ3DGM+2THC6Mjv70ipWX32UW7620Bb5KONm3Vw0eeIHckUn6QaHGfFL/URT6mr7YCJhG5lZynWYZcLv/ffWuFcSmO9p0xCrwqqPEjdaaGs52mqmA4Ikt9MulKAEp6p65V1vxt7Tdy6m9UVjzbEy1zFuU9iOHBAAaj6A8Mj1EEUe6sNx3fLHnC2c0+2Zf3eUxMZPm5dQZPOUXLI28yoCliBIhTYTSh7ATULDDvcnNMs/ziuG7WT/U1wuIHkT5kEE73tnG1EZY4RDODbQobmpBegcuUEh64HEGS7+aK/KPYWxFxWW5oVd0Dc7kvpariXqEhlNdDY65b2T8uBw8bI/HrfvT8d0EnsPz26B1xKZYqyusWnlR+10KdYzPNoupx8vWk74PW8zI5qlcV497SPtvn12a3wvZ8adJzMuP4hsBoKHG/M2nf0lOMbo1gcbHbT0FqcHE3mixY3lU+UnNC5jpmNCs1tK8yqeQdVtHE3YM4Y5SsnBTJddUWVpUxZ6rlU+H2NW/uGcDLBs3HmERTn1l6E1mmqKB2kPA/+Y/YbILXNojbkgRE/3lki5kX4+pjHDxF/mWEEeXpjIl4yKG97mVS2J0dGoJ5CqLv6/CdHhtwu35UydBVDVGHywufVLwPgEiDA9RklM/bQw3ojdlTrn6+irDcz8/Tj7KmK2votLaN6yIEM8Ex2htyBlyX/47eEsh63nSNwSx+uPcTxjH9N5cJpWzJ2KcBMIqZsWOTgISBUndgRdoVTFySY2XwbHlDjh8RCLLBsYRhvOK+nvNqEBnrfzz81B/sqDO1whQDTKT3ZcFnZouaVImRGHcOt0sRioq/JGHAHzRjyc/V9Gb/zTlI8QQob5y5k7dfReAy1rGdkeIa3LXSwWGz8hDjEnGsGGIC4evdiefgoJHkhzEywi/QUEOOnqms/0BzexbLP+89qMgGMlEbA9iLAW/BZgsAkxm+NHqGNtz9HDJStpqewElgjMQ+wV3TUGbrmY0O/FyQn/CXyhXjdRC0/5S1tZnzBMyolHF2a5L5EAzGck2MuV7TgLs6LcvGm7kIeq0vmBCkiUB4IBHMhraU7Ba+cC+CW7tDK0Tkanri5KSMXSXamJpU869Jcsk1JLm69ATMl3eIb5rPx5+GbPUrRogEUP3HQeLMQP8jjq6fVwzGPQByF70t0fE+Z23NuCLzhVss0YkMmzcKK8GjKCJ0vnCA0qanxovpDgCOHjgxvy44N+QNWfUynIKVHS9m7FDE3RgKf7rOfSM9vJ7F/KWo7kywi36ajuFbWcON/MTvlpPUhGm5dboiz3vyfpTWkQbd9XX7SPVBWCkvGg+A87R7RSN8bsWbmYm5m2wt3jrkBVSDn5FV3rek6X0GSpTDTWJ9ktmjKtshplXn7fx7XAKtS4hpEMGhZwi/LWvfTsGqOJlqi2FwYPLI7SVunch2VSfssejrfwxJHPqF50wTv6ax28lp7wToqsVunZprdhyY++gds/LAz083dZLM3EYcbHuGVXiNRFxptpiQNjEnyjZX0fc8UF1W2icDt7Gd5Pp2ckaPERLE+tJ+ackMxomH2/HjFB3XRXlDCoKuljtJ2cbw/gVPmHtV7Qw2w6tWaCzYP3g1D47BlrIqBV4RWjcPRjthfcWPnwUSSHwlJ4dLMQ+cJ402ol+HUukAKpkh5lcjME0uaD8KKReD/Ee9r4kubIR7z9JViXjnJJl3Jxr6KtK3abrg8cG8qVFRr5NDhxbfs9NY/zGDvbgt0GMWXRTi4oMrSkDKthZSWjVezDzPk11AMQ1E+SJSoSXgwUl1rbWPg0O29prkQdfdKQmZcaO5oj7+f3kSPsIOE9+Qn43VOxOWWybkCzSvEbzLgmuov5C8EWYeJgh13qDcNSwNdt4PgAqIq+tikKNUo9qeM9/q20an+i20fatPAcvrRes+xxnIBXmlPDCj02THjX4EulV2KE+nNxFnCrNvFKYp2bEAegJ2neqfeefDDDhn+t7OK9/73v3O3qnEwSyBlt+pEyHfLjv3Cm7Ik7JA5NUQ/nsS3JdC8OYy2i1DWSvi1qsP3ixAVCR7qBVdoOF2Lv5y2GWrJ0EvVcGqaPBnUezMGMdozNjreschNJvRlp3D72dGGQgs00GHyHbIQ5wicC5p+PiZ2z1EUBN7DiDy9ShQPKEDJtISiSrSaPkDPKpW7SxmSfDaLOIxEy4daAupV0gj7yTtrkpEvJjRECpa0kuKFP3/eFVVp/nIjWDzFASfDvYiry90dDrvLxO3tosuvMVfhXcOy/zbyeCkObaFgc3OkO4z2r4X4Vwt18BoRAammiEfgCbnhywl/CmLrSwV1qSjUgALh/XUPkqXCkqerNjYTlZw5NdRUKmheUXHYGwo4Z+xPfDtiHk1N5vRgNL9/qXsgt813spju9kDMGQGiXlrOgIyhArHR5p2B4S3FjRQ/lEoP5+5wN+9tBKYrR79sZXNS8CwR0BPrOoY9GQCYFdxrBtyH6KOWg29FVXNodt2Yvot7ktofcen1zwQJOAr0KTyqF9/TIltO+hS7swSzZMjV368SEPYjrtXfnXNWYltOS2zJAWYeqr0XLrL+iHbbOQLC7Rk0mnizmUt9wdefz4MtfXZNcdKR4LPsOqYyIz5ux90XiCbvcNZJaRa2/dzecv/koLQPbKzFPGxKiUOsHAa5SEGgbWFZE4Y9CBFS4nCuEOgUnVz9XtFAEP4dazc2cxjYLVzaG5msOiOY1O5ZygYMeVZfdKaITg7gMPbkL3Lpzo7QBMXcHmT5YAUeNaSbHxvgg45Jn8r7W72EQP9tF7SPKiPvxo91xkB7MA3JOcZXC1qymTUWqjO038wSShK48kE+qgu7V9rjP5fOCDW3+3338eifxqS7Zq6FSO053c5W2c8wFR4iw==",
        "encryptedKey": "OzSHFXzrXFC5wDvM5NPRkriY/NaC/USvFUPE+f4NZ30tiD2qb8sJM2XT2K7uNIZ05uDLfsJ6/BbEoYC1SOPXcFJMYqRiYFiI9RWrNgR4EtPWZ84RgrmxGcZZjzSqHzjuls8g++cuqJGRV+ePbTRH+z2OuZZu0vMKZiemaZpHL46Ewi9HUnbRDXvOlKFFHmQm5tayZ7m7Mv5iu4T5R3DPEAHlZnGqtP98ToLxUJUS2Eku/iLHXRmhmZXn55Qt5GYiyss8P5/miPqJCu1QG0CStn5Nsl4KvU+I4QYAOcMFWWUAGofOwPWtt8vPh8Bx+7t7BbayKpA4ZUEWWAjC+zASxg==",
        "iv": "SHM0UHU5WXoyTG03TnExWA=="
      }
      ```
    </Tab>

    <Tab title="Sample Decryption Code">
      ```javascript
          const crypto = require('crypto');

          /**
           * Decrypts the symmetric key using the provided private key.
           * @param {string} encryptedKey - Base64 encoded encrypted symmetric key
           * @param {string} privateKey - RSA private key
           * @returns {Buffer} Decrypted symmetric key
           */
          function decryptSymmetricKey(encryptedKey, privateKey) {
              try {
                  const encryptedSymmetricKey = Buffer.from(encryptedKey, 'base64');
                  const decryptedSymmetricKey = crypto.privateDecrypt(
                      {
                          key: `-----BEGIN RSA PRIVATE KEY-----\n${privateKey}\n-----END RSA PRIVATE KEY-----`,
                          padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
                          oaepHash: 'sha256',
                      },
                      encryptedSymmetricKey
                  );
                  return decryptedSymmetricKey;
              } catch (error) {
                  console.error('Error decrypting symmetric key:', error);
                  throw new Error('Failed to decrypt symmetric key');
              }
          }

          /**
           * Decrypts the webhook data using the provided symmetric key and IV.
           * @param {string} encryptedWebhookData - Base64 encoded encrypted webhook data
           * @param {Buffer} symmetricKey - Decrypted symmetric key
           * @param {string} payloadIv - Base64 encoded initialization vector
           * @returns {Object} Decrypted webhook data as a JSON object
           */
          function decryptWebhookData(encryptedWebhookData, symmetricKey, payloadIv) {
              try {
                  const iv = Buffer.from(payloadIv, 'base64');
                  const decipher = crypto.createDecipheriv('aes-256-cbc', symmetricKey, iv);
                  let decryptedData = decipher.update(encryptedWebhookData, 'base64', 'utf8');
                  decryptedData += decipher.final('utf8');
                  return JSON.parse(decryptedData);
              } catch (error) {
                  console.error('Error decrypting webhook data:', error);
                  throw new Error('Failed to decrypt webhook data');
              }
          }

          // Example usage:
          // const decryptedKey = decryptSymmetricKey(encryptedKey, privateKey);
          // const decryptedData = decryptWebhookData(encryptedWebhookData, decryptedKey, payloadIv);
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Comments**]: Improved time display in comment dialog by removing "just" from timeago text to make it more concise.
</Update>

<Update label="3.0.46" description="Oct 16 2024">
  ### New Features

  * \[**Comments**]: Added "Seen" Feature in the comment dialog. It shows which users have seen the comments. It's automatically enabled in the default component.
    * If you had previously used a wireframe for the comment dialog, you will need to add the [seen component wireframe](/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/threadcard).

  <Frame>
    ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/seen-feature.png)
  </Frame>

  * \[**Comments**]: Added a dynamic attribute to identify if the current user is the author of a comment inside the comment thread:
    * Use the `velt-current-user-author` attribute to conditionally hide options for non-authors:
      ```css
      [velt-current-user-author='false'] app-comment-dialog-thread-card-options {
        display: none;
      }
      ```
</Update>

<Update label="3.0.45" description="Oct 15 2024">
  ### New Features

  * \[**Comments**]: Added config to restrict resolve action to admin users only:
    <Tabs>
      <Tab title="React / Next.js">
        **Using props:**

        ```jsx
        <VeltComments resolveStatusAccessAdminOnly={true} />
        ```

        **Using API:**

        ```javascript
        const commentElement = client.getCommentElement();
        // To enable resolve status access admin only
        commentElement.enableResolveStatusAccessAdminOnly();
        // To disable resolve status access admin only
        commentElement.disableResolveStatusAccessAdminOnly();
        ```
      </Tab>

      <Tab title="Other Frameworks">
        **Using props:**

        ```html
        <velt-comments resolve-status-access-admin-only="true"></velt-comments>
        ```

        **Using API:**

        ```javascript
        const commentElement = Velt.getCommentElement();
        // To enable resolve status access admin only
        commentElement.enableResolveStatusAccessAdminOnly();
        // To disable resolve status access admin only
        commentElement.disableResolveStatusAccessAdminOnly();
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Comments**]: Added ability to @mention emails not present in the contact list.
  * \[**Comments**]: Implemented focus on composer when clicked anywhere within the composer.
</Update>

<Update label="3.0.44" description="Oct 14 2024">
  ### Improvements

  * \[**Comments**]: Added "This page" label to the sidebar filters.
  * \[**Comments**]: Added React wireframe component for Navigation button:

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltCommentDialogWireframe.NavigationButton />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-comment-dialog-navigation-button-wireframe></velt-comment-dialog-navigation-button-wireframe>
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="3.0.43" description="Oct 14 2024">
  ### New Features

  * \[**Comments**]: Added "focused thread mode" in the comments sidebar:
    * In this mode, when you click on a comment in the sidebar, it will open the thread in expanded view within the sidebar itself.
    * Other threads and actions like filters, search etc are hidden behind a back button.
    * Turning this on also adds a navigation button in the comment dialog. Clicking it will navigate to the comment and also trigger a callback.
    * If you had previously used a wireframe for the comment dialog, you will need to add the [navigation button wireframe](/ui-customization/features/async/comments/comment-dialog/subcomponents/navigation-button) and the [focused thread wireframe](/ui-customization/features/async/comments/comments-sidebar/subcomponents/focused-thread).

      <Tabs>
        <Tab title="React / Next.js">
          ```jsx
          <VeltCommentsSidebar focusedThreadMode={true} />
          ```

          **Handling the navigation button click:**

          ```jsx
          <VeltCommentsSidebar onCommentNavigationButtonClick={onCommentNavigationButtonClick} />

            // event handler for when a comment is clicked on 
            const onCommentNavigationButtonClick = (event) => {
              console.log('onCommentNavigationButtonClick', event);
              //handle custom navigation by getting location if you have used Locations
              const { pageId } = event.location;
              //handle custom navigation by getting context if you have used addContext()
              const { pageId } = event.context;
              yourNavigateToPageMethod(pageId);
            };
          ```
        </Tab>

        <Tab title="Other Frameworks">
          ```html
          <velt-comments-sidebar focused-thread-mode="true"></velt-comments-sidebar>
          ```

          **Handling the navigation button click:**

          ```javascript
          const commentSidebarElement = document.querySelector('velt-comments-sidebar');
          commentSidebarElement.addEventListener('onCommentNavigationButtonClick', (s) => {
            console.log('onCommentNavigationButtonClick', s.detail);
          });
          ```
        </Tab>
      </Tabs>

  * \[**Comments**]: Added standalone thread wireframe component:
    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltWireframe>
          <VeltCommentThreadWireframe>
            {/* Velt Comment Dialog Wireframe */}
          </VeltCommentThreadWireframe>
        </VeltWireframe>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-wireframe style="display: none;">
          <velt-comment-thread-wireframe>
            <!-- Velt Comment Dialog Wireframe -->
          </velt-comment-thread-wireframe>
        </velt-wireframe>
        ```
      </Tab>
    </Tabs>

  * \[**Live Selection**]: Add ability to get live selection data for the document:
    <Tabs>
      <Tab title="React / Next.js">
        **Using Hook:**

        ```jsx
          const liveSelectionData = useLiveSelectionDataHandler();

          useEffect(() => {
            console.log('liveSelectionData', liveSelectionData);
          }, [liveSelectionData]);
        ```

        **Using API:**

        ```javascript
          const selectionElement = client.getSelectionElement();
          selectionElement.getLiveSelectionData().subscribe((liveSelectionData: LiveSelectionData) => {
            console.log("liveSelectionData: ", liveSelectionData);
          });
        ```
      </Tab>

      <Tab title="Other Frameworks">
        **Using API:**

        ```javascript
          const selectionElement = Velt.getSelectionElement();
          selectionElement.getLiveSelectionData().subscribe((liveSelectionData: LiveSelectionData) => {
            console.log("liveSelectionData: ", liveSelectionData);
          });
        ```
      </Tab>
    </Tabs>

  * \[**Comments**]: Added standalone `Velt Comment Text` component:

    * When you put any text inside this component and provide an annotationId, it will automatically highlight the text and attach the comment to it.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentText multiThreadAnnotationId='MULTI_THREAD_ANNOTATION_ID'>
          {/* your content here */}
        </VeltCommentText>

        <VeltCommentText annotationId='ANNOTATION_ID'>
          {/* your content here */}
        </VeltCommentText>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comment-text multi-thread-annotation-id="MULTI_THREAD_ANNOTATION_ID">
          <!-- your content here -->
        </velt-comment-text>

        <velt-comment-text annotation-id="ANNOTATION_ID">
          <!-- your content here -->
        </velt-comment-text>
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Notifications**]: Changed the default maximum days for which Notifications should be displayed from 30 days to 15 days.
  * \[**Notifications**]: Added complete document and organization metadata objects to the Notification metadata object.
</Update>

<Update label="3.0.42" description="Oct 11 2024">
  ### New Features

  * \[**Live Selection**]: Added new configurations to customize the UI and behavior of the live selection feature:
    * Enable/disable user indicator
    * Set user indicator position
    * Set user indicator type
    * Enable/disable default elements tracking
    * Enable/disable default styling
    * Earlier the live selection was triggered on click, now it is triggered on keyboard actions as well.
    * [Learn more](/realtime-collaboration/live-selection/customize-behavior).
</Update>

<Update label="3.0.41" description="Oct 11 2024">
  ### New Features

  * \[**Comments**]: Added ability to apply custom filtering, sorting and grouping in comments sidebar.
    * Here is the overview on how it works:
      * Enable custom actions in the comments sidebar.
      * Add action buttons to the sidebar wireframe.
      * Implement callback and event handlers to handle custom filtering, sorting, and grouping logic.
      * Set custom filtered data in the comments sidebar.
    * [Learn more](/async-collaboration/comments-sidebar/customize-behavior#2-custom-filtering-sorting-and-grouping).
</Update>

<Update label="3.0.40" description="Oct 10 2024">
  ### Bug Fixes

  * \[**Mentions**]: Resolved an issue where `atHereDescription` was not rendering for non-organization users.
</Update>

<Update label="3.0.39" description="Oct 10 2024">
  ### New Features

  * \[**Notifications**]: Added API to mark a single notification as read by notificationId.

    <Tabs>
      <Tab title="React / Next.js">
        ```javascript
        const notificationElement = client.getNotificationElement();
        notificationElement.markNotificationAsReadById("notificationId");
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```javascript
        const notificationElement = Velt.getNotificationElement();
        notificationElement.markNotificationAsReadById("notificationId");
        ```
      </Tab>
    </Tabs>

  * \[**Debugger**]: Added call to `setDocument` method to the debugger.

  ### Improvements

  * \[**Mentions**]: Added `atHereDescription` to the `description` field of the @mention data object.

  ### Bug Fixes

  * \[**Notifications**]: Fixed an issue where the "For You" tab was not displaying the updated document name on initial load.
</Update>

<Update label="3.0.38" description="Oct 10 2024">
  ### New Features

  * \[**Mentions**]: Added styling for @mention in the composer when adding or editing a comment.

  ### Improvements

  * \[**React Hooks**]: Updated client and comment related hooks to support dynamic input values.

  ### Bug Fixes

  * \[**Mentions**]: Fixed an issue in the `updateContactList` API where the passed contact list data was being mutated directly.
  * \[**Mentions**]: Resolved an issue where @mentions with special characters were not working correctly.
</Update>

<Update label="3.0.37" description="Oct 9 2024">
  ### Bug Fixes

  * \[**Notifications**]: Fixed an issue where the `unreadCommentsMap` count was not updating correctly when switching between documents with no unread comments.
</Update>

<Update label="3.0.36" description="Oct 9 2024">
  ### New Features

  * \[**Comments**]: Added shadowDOM, dark mode, and variant support in standalone Comment Thread component.
    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentThread 
          darkMode={true}
          shadowDom={false}
          variant="component-variant" 
          dialogVariant="dialog-variant"
        />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comment-thread 
          dark-mode="true" 
          shadow-dom="false"
          dialog-variant="dialog-variant"
          variant="component-variant"
        ></velt-comment-thread> 
        ```
      </Tab>
    </Tabs>

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where scroll was causing the "Add reply" button to hide.
  * \[**Comments**]: Fixed an issue where the assign to dialog was not closing after assigning a user using the keyboard.
</Update>

<Update label="3.0.35" description="Oct 8 2024">
  ### Bug Fixes

  * \[**Notifications**]: Fixed an issue where the `document` tab was not visible when user email was not set.
</Update>

<Update label="3.0.34" description="Oct 8 2024">
  ### New Features

  * \[**Comments**]: Added support for overlay text commenting in Tiptap editor.
    * It works with all frontend frameworks that are supported by Tiptap.
    * You can find the extension [here](https://www.npmjs.com/package/@veltdev/tiptap-velt-comments).

  <Steps titleSize="h2">
    <Step title="Install the Velt Tiptap extension">
      ```bash
      npm i @veltdev/tiptap-velt-comments
      ```
    </Step>

    <Step title="Import and add the extension to your Tiptap editor">
      ```javascript
      import { TiptapVeltComments } from '@veltdev/tiptap-velt-comments';

      const editor = new Editor({
        extensions: [
          TiptapVeltComments,
          // ... other extensions
        ],
      });
      ```
    </Step>

    <Step title="Add a comment using the `addTiptapVeltComment` method">
      * Call this method to add a comment to selected text in the Tiptap editor. You can use this when the user clicks on the comment button in context menu or presses a keyboard shortcut.

      * Args:
        * `editor`: instance of the Tiptap editor.
        * `tiptapVeltCommentConfig`: optional object to set the Comment Annotation's custom metadata.

      * Example:
        ```javascript
        import { addTiptapVeltComment } from '@veltdev/tiptap-velt-comments';

        addTiptapVeltComment(editor, tiptapVeltCommentConfig);
        ```
    </Step>
  </Steps>

  ### Improvements

  * \[**Console Debugger**]: Added logs for the `updateContactList` method to improve debugging.
</Update>

<Update label="3.0.33" description="Oct 7 2024">
  ### Improvements

  * \[**Console Debugger**]: Added logs for `addContext` and `updateContext` methods. The context object is now included in the log event properties for better debugging and tracking.
  * \[**Comments**]: Now comments will be marked as read if opened via the `selectCommentByAnnotationId()` API.

  ### Bug Fixes

  * \[**Comment Display**]: Improved comment rendering performance for Comments Sidebar.
</Update>

<Update label="3.0.32" description="Oct 7 2024">
  ### New Features

  * \[**Comments Sidebar**]: Added a reset filter button to easily clear all applied filters.
    * This new button allows users to quickly reset all filters in the comments sidebar when no comments are available for the applied filters.
    * Here is the wireframe for the reset filter button:

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltCommentsSidebarWireframe.ResetFilterButton />
      ```
    </Tab>

    <Tab title="HTML">
      ```html
      <velt-comments-sidebar-reset-filter-button-wireframe></velt-comments-sidebar-reset-filter-button-wireframe>
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="3.0.31" description="Oct 4 2024">
  ### Improvements

  * \[**Notifications**]: Improved loading state for API calls, now returns null until data is fully loaded.
</Update>

<Update label="3.0.30" description="Oct 4 2024">
  ### New Features

  * \[**Notifications**]: Added API to get unread notifications count.
    * **Sample response:**
    ```javascript
    { 
      forYou: 4, // # of unread notifications in the "For You" tab
      all: 5     // # of unread notifications in the "All" or "Document" tab
    }
    ```

  <Tabs>
    <Tab title="React / Next.js">
      Using Hooks:

      ```jsx
      const unreadCount = useUnreadNotificationsCount();

      useEffect(() => {
        console.log('Unread Count', unreadCount);
      }, [unreadCount]);
      ```

      Using API:

      ```javascript
      const notificationElement = client.getNotificationElement();
      notificationElement.getUnreadNotificationsCount().subscribe((data) => {
        console.log('Unread notifications count:', data);
      });
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```javascript
      const notificationElement = Velt.getNotificationElement();
      notificationElement.getUnreadNotificationsCount().subscribe((data) => {
        console.log('Unread notifications count:', data);
      });
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Comments**]: Improved search functionality in @mentions to support spaces in search queries.
</Update>

<Update label="3.0.29" description="Oct 3 2024">
  ### New Features

  * \[**Comments**]: Added ability to control whether comments inside the annotation should be collapsed.

  <Tabs>
    <Tab title="React / Next.js">
      Using Props:

      ```jsx
      <VeltComments collapsedComments={false} />
      ```

      Using API:

      ```javascript
      const commentElement = client.getCommentElement();
      commentElement.enableCollapsedComments();
      commentElement.disableCollapsedComments();
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using Props:

      ```html
      <velt-comments collapsed-comments="false"></velt-comments>
      ```

      Using API:

      ```javascript
      const commentElement = Velt.getCommentElement();
      commentElement.enableCollapsedComments();
      commentElement.disableCollapsedComments();
      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added ability to get comment annotation by ID.

  <Tabs>
    <Tab title="React / Next.js">
      Using Hooks:

      ```jsx
      const annotation = useCommentAnnotationById({
        annotationId: '-O6W3jD0Lz3rxuDuqQFx',  // AnnotationID
        documentId: 'document-id'              // DocumentId (Optional)
      });

      React.useEffect(() => {
        console.log('annotation', annotation);
      }, [annotation]);
      ```

      Using API:

      ```javascript
      const commentElement = client.getCommentElement();

      commentElement.getCommentAnnotationById({
        annotationId: '-O6W3jD0Lz3rxuDuqQFx',  // AnnotationID
        documentId: 'document-id'              // DocumentId (Optional)
      }).subscribe((annotation) => {
        console.log('annotation', annotation);
      });
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using API:

      ```javascript
      const commentElement = Velt.getCommentElement();

      commentElement.getCommentAnnotationById({
        annotationId: '-O6W3jD0Lz3rxuDuqQFx',  // AnnotationID
        documentId: 'document-id'              // DocumentId (Optional)
      }).subscribe((annotation) => {
        console.log('annotation', annotation);
      });
      ```
    </Tab>
  </Tabs>

  * \[**Notifications**]: Added API to mark all notifications as read.
    * Mark all notifications as read, either globally or for a specific tab.
    * Using 'all' or 'document' as the `tabId` marks all notifications as read across all tabs (equivalent to calling `setAllNotificationsAsRead()` without arguments).
    * Using 'for-you' as the `tabId` only marks notifications in the 'for-you' tab as read.

  <Tabs>
    <Tab title="React / Next.js">
      ```javascript
      const notificationElement = client.getNotificationElement();

      // Mark all notifications as read
      notificationElement.setAllNotificationsAsRead();

      // Mark all notifications as read for a specific tab
      notificationElement.setAllNotificationsAsRead({ tabId: 'for-you' });
      notificationElement.setAllNotificationsAsRead({ tabId: 'all' });
      notificationElement.setAllNotificationsAsRead({ tabId: 'document' });
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```javascript
      const notificationElement = Velt.getNotificationElement();

      // Mark all notifications as read
      notificationElement.setAllNotificationsAsRead();

      // Mark all notifications as read for a specific tab
      notificationElement.setAllNotificationsAsRead({ tabId: 'for-you' });
      notificationElement.setAllNotificationsAsRead({ tabId: 'all' });
      notificationElement.setAllNotificationsAsRead({ tabId: 'document' });
      ```
    </Tab>
  </Tabs>

  ### Bug Fixes

  * \[**UI Customization**]: Fixed an issue in `velt if` where string comparisions were not working as expected.
</Update>

<Update label="3.0.28" description="Oct 3 2024">
  ### New Features

  * \[**Comments**]: Added a reset filter button wireframe in multithread comment dialog.

  * \[**Notifications**]: Added a notifications panel loading state skeleton with wireframes.

  <Tabs>
    <Tab title="React / Next.js">
      ```javascript
      <VeltNotificationsPanelWireframe.Skeleton />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-notifications-panel-skeleton></velt-notifications-panel-skeleton>
      ```
    </Tab>
  </Tabs>

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where draft comments were not being saved for multithread comments in some cases.
  * \[**Comments**]: Fixed an issue where in inline mode, when editing a comment, the annotation was not being selected.
</Update>

<Update label="3.0.27" description="Oct 1 2024">
  ### New Features

  * \[**Comments**]: Added a prop to enable confirmation before deleting a reply.

  <Tabs>
    <Tab title="React / Next.js">
      Using Props:

      ```jsx
      <VeltComments deleteReplyConfirmation={true} />
      ```

      Using API:

      ```javascript
      const commentElement = client.getCommentElement();
      commentElement.enableDeleteReplyConfirmation();
      commentElement.disableDeleteReplyConfirmation();
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using Props:

      ```html
      <velt-comments delete-reply-confirmation="true"></velt-comments>
      ```

      Using API:

      ```javascript
      const commentElement = Velt.getCommentElement();
      commentElement.enableDeleteReplyConfirmation();
      commentElement.disableDeleteReplyConfirmation();
      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added a callback method for when a comment link is copied. You can use this to track when a comment link is copied or show a confirmation toast.

  <Tabs>
    <Tab title="React / Next.js with Hooks">
      Using Hooks:

      ```jsx
        const commentLink = useCommentCopyLinkHandler();
        useEffect(() => {
          console.log('commentLink', commentLink);
        }, [commentLink]);
      ```

      Using API:

      ```jsx
      const commentElement = client.getCommentElement();
      commentElement.onCopyLink().subscribe((commentLink) => {
        console.log(commentLink);
      });
      ```
    </Tab>

    <Tab title="React / Next.js">
      Using API:

      ```jsx
      const commentElement = client.getCommentElement();
      commentElement.onCopyLink().subscribe((commentLink) => {
        console.log(commentLink);
      });
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using API:

      ```javascript
      const commentElement = Velt.getCommentElement();
      commentElement.onCopyLink().subscribe((commentLink) => {
        console.log(commentLink);
      });
      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added a minimal Actions Dropdown in Multithread comment dialog. It contains actions like 'Mark all as read', 'Mark all as resolved'.

  ### Improvements

  * \[**UI Customization**]: Renamed the `velt data` prop to `field` (old: `path`) to improve readability. This is backward compatible.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltData field='userContact.name' />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```jsx
      <velt-data field="userContact.name"></velt-data>
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="3.0.26" description="Sept 30 2024">
  ### Improvements

  * \[**Comments**]: Renamed `multiThreadMode` prop to `multiThread` for improved clarity and consistency.
  * \[**Comments**]: Removed the "0 comments" from the multithread container header, when the first thread is created.
  * \[**Comments**]: The comment pin bubble count in multithread mode would sync with the number of unresolved comments in the multithread container.
  * \[**Comments**]: Added an unread indicator on the comment pin bubble in multithread mode to help users quickly identify new or unread comments.
  * \[**UI Customization**]: Added improvements to the `velt if` conditional rendering logic.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the menu trigger button would hide when the mouse moved on the menu.
  * \[**Notifications**]: Resolved an issue where `documentName` wasn't displayed on the notification item in the notification panel.
</Update>

<Update label="3.0.25" description="Sept 28 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the composer would throw a console error on Firefox. This didn't have any impact on functionality or UX.
  * \[**Comments**]: Fixed reply button toggle issue.
</Update>

<Update label="3.0.24" description="Sept 28 2024">
  ### Improvements

  * \[**Comments**]: Improvements to the comments UX in multithread mode.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where sign in button was showing up for logged in users on mobile. This only impacted customers where signIn button was enabled.
</Update>

<Update label="3.0.23" description="Sept 26 2024">
  ### New Features

  * \[**Webhooks**]: Added configuration option for base64 encoding of webhook payloads (disabled by default).
    * Addresses issues with payloads containing HTML tags that may fail due to strict endpoint policies.
    * Ensures payload validity and processability by your endpoint.
    * Example of decoding a base64 encoded payload:

  ```js
  const encodedData="eyJ0ZXN0IjoxLCJ0ZXN0MSI6IjxkaXY+PC9kaXY+In0="
  const decodedData = Buffer.from(encodedData, 'base64').toString('utf-8');
  console.log(JSON.parse(decodedData));
  ```

  ### Improvements

  * \[**Comments**]: Significant enhancements to the comments UX in multithread mode:
    * Implemented smooth auto-scroll animation to new threads for improved visibility
    * Added a new comment button to the header for easier thread creation
    * Refined composer show/hide logic for a more intuitive user experience
    * Shortened the displayed timestamp format

  * \[**Comments**]: Improved the UI for [custom autocomplete dropdown chip](async-collaboration/comments/customize-behavior/custom-lists#2-add-custom-lists-on-comment).

  * \[**Notifications**]: Notifications feature and API no longer require documentId to be set for initialization.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the custom autocomplete chip would fail to render if the same chip is added multiple times.
</Update>

<Update label="3.0.22" description="Sept 25 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed a bug where clicking on one's own reaction on the [Velt Comment Player Timeline](/async-collaboration/comments/setup/video-player-setup/custom-video-player-setup) didn't toggle it correctly.
</Update>

<Update label="3.0.21" description="Sept 25 2024">
  ### Improvements

  * \[**Comments**]: Added `createdAt` field for [CommentAnnotation](/api-reference/models/CommentAnnotation) model. This can now be used to sort annotations in ascending order of creation.
  * \[**Comments**]: Added `isEdited` and `editedAt` fields in [Comment](/api-reference/models/Comment) model. This can now used to indicate if and when a comment is edited.
  * \[**Comments**]: In multithread mode, the count on the header is now synced with the total threads visible after all the fitlers are applied.
  * \[**Comments**]: Inline and multi-thread comments are now sorted in ascending order by the `createdAt` field, maintaining backward compatibility.
  * \[**Comments**]: Improved the behavior where the mutlthread container was auto-closing when one of the threads was deleted or resolved.

  ### Bug Fixes

  * \[**Comments**]: Fixed a bug where deleting a recording in a single-comment thread incorrectly triggered the Delete Thread dialog.
  * \[**Comments**]: Fixed a bug where resolved comment threads weren't disappearing in [inline comment mode](/async-collaboration/comments/setup/inline-comments).
</Update>

<Update label="3.0.20" description="Sept 25 2024">
  ### New Features

  * \[**Notifications**]: Added a configurable option to show read notifications in the "For You" tab. By default, read notifications are removed from the "For You" tab.

  <Tabs>
    <Tab title="React / Next.js with Hooks">
      Using Props:

      ```jsx
      <VeltNotificationsTool readNotificationsOnForYouTab={true} />
      <VeltNotificationsPanel readNotificationsOnForYouTab={true} />
      ```

      Using APIs:

      ```jsx
      const notificationElement = useNotificationUtils();
      // Enable to keep read notifications in the for you tab
      notificationElement.enableReadNotificationsOnForYouTab();
      // Disable to hide read notifications in the for you tab
      notificationElement.disableReadNotificationsOnForYouTab();
      ```
    </Tab>

    <Tab title="React / Next.js">
      Using Props:

      ```jsx
      <VeltNotificationsTool readNotificationsOnForYouTab={true} />
      <VeltNotificationsPanel readNotificationsOnForYouTab={true} />
      ```

      Using APIs:

      ```jsx
      const notificationElement = client.getNotificationElement();
      // Enable to keep read notifications in the for you tab
      notificationElement.enableReadNotificationsOnForYouTab();
      // Disable to hide read notifications in the for you tab
      notificationElement.disableReadNotificationsOnForYouTab();
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using Props:

      ```html
      <velt-notifications-tool read-notifications-on-for-you-tab="true">
      </velt-notifications-tool>
      <velt-notifications-panel read-notifications-on-for-you-tab="true">
      </velt-notifications-panel>
      ```

      Using API:

      ```html
      <script>
        // Using APIs
        const notificationElement = Velt.getNotificationElement();
        // Enable to keep read notifications in the for you tab
        notificationElement.enableReadNotificationsOnForYouTab();
        // Disable to hide read notifications in the for you tab
        notificationElement.disableReadNotificationsOnForYouTab();
      </script>
      ```
    </Tab>
  </Tabs>

  For more details on customizing notifications behavior, refer to the [Notifications Behavior](/async-collaboration/notifications/customize-behavior) section.

  ### Improvements

  * \[**REST API**]: Added advanced querying and pagination on REST APIs for improved performance and functionality.
  * \[**Comments**]: Made the rendering of comment dialog action buttons configurable via CSS on hover or selection.

  ### Bug Fixes

  * \[**Comments**]: Resolved a rare bug where the triangle pin component would cause the comment dialog to flicker on hover in popover comment mode.
  * \[**Autocomplete dropdowns**]: Fixed a bug where the autocomplete dropdown component would not apply the `--velt-default-font-family`.
  * \[**Notifications**]: Fixed a bug occurring when marking all notifications as read in large notification data sets.
</Update>

<Update label="3.0.19" description="Sept 25 2024">
  ### New Features

  * \[**Comments**]: Added a standalone Comment Composer component. Now you can use this in combination with [Velt Comment Threads](/async-collaboration/comments/standalone-components/comment-thread/overview) component to embed commenting experiences in custom ways.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentComposer />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comment-composer></velt-comment-composer>
        ```
      </Tab>
    </Tabs>

  * \[**Inline Comments**]: Added single thread option to inline comments. By default, it will be in multithread mode.
    Default value: `true`
    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltInlineCommentsSection multiThread={false} />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-inline-comments-section multi-thread="false">
        </velt-inline-comments-section>
        ```
      </Tab>
    </Tabs>
</Update>

<Update label="3.0.18" description="Sept 24 2024">
  ### New Features

  * \[**Comments**]: Added a new prop to control the use of ShadowDOM for [Persistent Comment Mode](/async-collaboration/comments/customize-behavior/modes#persistent-comment-mode) banner.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltComments persistentCommentShadowDom={false} />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comments persistent-comment-shadow-dom="false"></velt-comments>
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Comments**]: Action buttons are now consistently displayed across all states (default, hover, selection) of the comment dialog and can be customized via CSS alone.

  ### Bug Fixes

  * \[**Notifications**]: Fixed an issue where the `tabConfig` React props was not working as expected.
</Update>

<Update label="3.0.17" description="Sept 23 2024">
  ### Improvements

  * \[**Notifications**]: Added an empty state for the document and all tabs in the notification panel.
  * \[**Notifications**]: Added type definition for the `tabConfig` prop to improve TypeScript support.

  ### Bug Fixes

  * \[**Notifications**]: Fixed an issue where React props for customizing the notification panel were not working as expected.
</Update>

<Update label="3.0.16" description="Sept 20 2024">
  ### New Features

  * \[**Comments**]: Added a new `atHereDescription` prop to customize the description that appears for the @here mention.

  <Tabs>
    <Tab title="React / Next.js with Hooks">
      Using Props:

      ```jsx
      <VeltComments atHereDescription="Notify all users in this document" />
      ```

      Using API Method:

      ```jsx
      const contactElement = useContactUtils();

      useEffect(() => {
        contactElement.setAtHereDescription('Notify all users in this document');
      }, [contactElement]);
      ```
    </Tab>

    <Tab title="React / Next.js">
      Using Props:

      ```jsx
      <VeltComments atHereDescription="Notify all users in this document" />
      ```

      Using API Method:

      ```jsx
      const contactElement = client.getContactElement();
      contactElement.setAtHereDescription('Notify all users in this document');
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using Props:

      ```html
      <velt-comments at-here-description="Notify all users in this document"></velt-comments>
      ```

      Using API Method:

      ```javascript
      const contactElement = Velt.getContactElement();
      contactElement.setAtHereDescription('Notify all users in this document');
      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added the `getSelectedComments()` API to get the currently selected comment annotations.
    * This returns an array of [`CommentAnnotation`](/api-reference/models/CommentAnnotation) objects.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      const commentElement = client.getCommentElement();
      const subscription = commentElement.getSelectedComments().subscribe((selectedComments) => {
        console.log('Selected comments:', selectedComments);
      });

      ```

      Unsubscribe from the subscription when you're done:

      ```jsx
      subscription?.unsubscribe()

      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      const commentElement = Velt.getCommentElement();
      const subscription = commentElement.getSelectedComments().subscribe((selectedComments) => {
        console.log('Selected comments:', selectedComments);
      });
      ```

      Unsubscribe from the subscription when you're done:

      ```js
      subscription?.unsubscribe()
      ```
    </Tab>
  </Tabs>

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the [custom list](/async-collaboration/comments/customize-behavior/custom-lists#1-add-custom-lists-on-comment-annotation) chip tooltip icon was not displayed.
  * \[**Comments**]: Fixed an issue where the reaction tooltip in the [comment player timeline component](/async-collaboration/comments/setup/video-player-setup/custom-video-player-setup) was getting distorted on hover.
  * \[**Comments**]: Fixed an issue where the reaction bubble on the [comment player timeline component](/async-collaboration/comments/setup/video-player-setup/custom-video-player-setup) had a transparent background.
</Update>

<Update label="3.0.15" description="Sept 20 2024">
  ### New Features

  * \[**Comments**]: Added a Minimal Filter Dropdown Component for the Multithread Comment Dialog. This provides basic filtering and sorting options, including:
    * Sorting: by date, by unread status
    * Filtering: unread comments, read comments, resolved comments

  ### Improvements

  * \[**Comments**]: Updated multithread behavior to ensure only one composer is open at a time.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the Floating Mode Comment Sidebar would not close when clicked outside.
  * \[**Comments**]: Resolved a problem where sidebar dropdowns were not closing when clicked on the trigger button again.
  * \[**Comments**]: Fixed an issue where the Add Reply button wasn't working in Inline Comment Section.
</Update>

<Update label="3.0.14" description="Sept 18 2024">
  ### Bug Fixes

  * \[**Comments**]: Fixed a bug related to updating comment annotations.
</Update>

<Update label="3.0.13" description="Sept 18 2024">
  ### New Features

  * \[**Comments**]: Added Draft State:
    * Empty comments are no longer saved.
    * Partial comments are saved as drafts, visible only to the author.
    * Draft creation:
      * Comment is saved as draft when the user adds text, recording, or attachment and closes the comment dialog without submitting.
      * On first attempt to close: Dialog shakes to indicate draft status.
      * On second attempt: the comment is saved as draft and the dialog closes.
    * Added a visual indicator for draft comments in the dialog.
    * If you had previously used a wireframe for the comment dialog, you will need to add the [draft wireframe](/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/threadcard).
</Update>

<Update label="3.0.12" description="Sept 18 2024">
  ### Improvements

  * \[**UI Customization**]: Refactored `velt if` and `velt data` logic for improved performance.
</Update>

<Update label="3.0.13" description="Sept 18 2024">
  ### New Features

  * \[**Comments**]: Added Draft State:
    * Empty comments are no longer saved.
    * Partial comments are saved as drafts, visible only to the author.
    * Draft creation:
      * Comment is saved as draft when the user adds text, recording, or attachment and closes the comment dialog without submitting.
      * On first attempt to close: Dialog shakes to indicate draft status.
      * On second attempt: the comment is saved as draft and the dialog closes.
    * Added a visual indicator for draft comments in the dialog.
    * If you had previously used a wireframe for the comment dialog, you will need to add the [draft wireframe](/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/threadcard).
</Update>

<Update label="3.0.11" description="Sept 14 2024">
  ### New Features

  * \[**UI Customization**]: Added **Conditional Templates**! These let you conditionally show or hide parts of the Velt Component Wireframes.

    * You can add conditions based on the same data models available in [Template Variables](/ui-customization/template-variables).

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltIf condition="{annotation.status.id} === 'OPEN' && {annotation.comments.length} === 3">
          {/* Content to render if condition is true */}
        </VeltIf>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-if condition="{annotation.status.id} === 'OPEN' && {annotation.comments.length} === 3">
          <!-- Content to render if condition is true -->
        </velt-if>
        ```
      </Tab>
    </Tabs>

  * \[**UI Customization**]: You can now customize confirmation dialogs (eg: Delete thread, Delete recorder etc) for each feature by defining variants.
    * Supported variants: `recorder`, `comment`, `arrow`, `area`.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
        <VeltWireframe>
          <VeltConfirmDialogWireframe variant="comment">
            <div>
              <VeltConfirmDialogWireframe.Title>
                Custom Title
              </VeltConfirmDialogWireframe.Title>

              <VeltConfirmDialogWireframe.Message>
                Custom Message
              </VeltConfirmDialogWireframe.Message>

              <VeltConfirmDialogWireframe.RejectButton>
                Custom Reject Button
              </VeltConfirmDialogWireframe.RejectButton>

              <VeltConfirmDialogWireframe.ApproveButton>
                Custom Approve Button
              </VeltConfirmDialogWireframe.ApproveButton>
            </div>
          </VeltConfirmDialogWireframe>
        </VeltWireframe>
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
        <velt-wireframe style="display:none">
          <velt-confirm-dialog-wireframe variant="comment">
            <div>
              <velt-confirm-dialog-title-wireframe>
                Custom Title
              </velt-confirm-dialog-title-wireframe>

              <velt-confirm-dialog-message-wireframe>
                Custom Message
              </velt-confirm-dialog-message-wireframe>

              <velt-confirm-dialog-reject-button-wireframe>
                Custom Reject Button
              </velt-confirm-dialog-reject-button-wireframe>

              <velt-confirm-dialog-approve-button-wireframe>
                Custom Approve Button
              </velt-confirm-dialog-approve-button-wireframe>
            </div>
          </velt-confirm-dialog-wireframe>
        </velt-wireframe>
      ```
    </Tab>
  </Tabs>

  * \[**UI Customization**]: Added two new global [Template Variables](/ui-customization/template-variables):
    * `unreadCommentAnnotationCount`: Number of unread comment annotations on the current document.
    * `unreadCommentCount`: Total number of unread comments on the current document.

  * \[**Comments**]: Added `updateContext` method for updating custom metadata (`context`) on comment annotations. [Learn more](/async-collaboration/comments/customize-behavior#metadata#2-update-custom-metadata-on-comment-annotation). This method is available in two scenarios:

    1. **In the `onCommentUpdate` event callback:**
       Use this to update the context when a comment is modified.

    2. **Via the `updateContext` API method:**
       Utilize this method to update the context of a comment annotation at any time. For example, you might use this when the name of the dashboard containing the comment annotation changes.

  ### Improvements

  * \[**Comments**]: Updated the icon for the Unresolve button.
  * \[**Comments**]: Whenever the comment sidebar is opened using the button or the api, any open comment dialog will be closed.
  * \[**Comments**]: Made position of the reaction tool consistent across different states and content types in the comment dialog.

  ### Bug Fixes

  * \[**Comments**]: Fixed the flicker issue when new popover comment thread was created. This only happened when the triangle component was disabled.
  * \[**Comments**]: Fixed minor rendering issue with the @mention chip when it was added at the end of the content.
  * \[**Velt Components**]: Reduced the default z-index for all Velt Components to prevent them from going over the host app's header or any other important UI elements.
  * \[**Comments**]: Fixed menu overlay positioning to stay with its trigger during page scrolling.
</Update>

<Update label="3.0.10" description="Sept 13 2024">
  ### Bug Fixes

  * \[**Comments**]: Reverted comment sidebar button wireframe changes.
</Update>

<Update label="3.0.9" description="Sept 12 2024">
  ### New Features

  * \[**Inline Reactions**]: Added `customReactions` prop for `VeltInlineReactionsSection` component in React, allowing custom emoji definitions:

    ```jsx
    const customReactions = {
      "EMOJI_ID_1": {
        "emoji": "🔥" // You could also set emoji using a url or raw svg definition
      },
      "EMOJI_ID_2": {
        "emoji": "🙌" // You could also set emoji using a url or raw svg definition
      },
      "EMOJI_ID_3": {
        "emoji": "💪" // You could also set emoji using a url or raw svg definition
      }
    }
    <VeltInlineReactionsSection customReactions={customReactions} />
    ```

  * \[**Comments**]: Added `multiThreadMode` prop for `VeltComments` component in React:

    ```jsx
    <VeltComments multiThreadMode={true} />
    ```

  ### Improvements

  * \[**Comments**]: Updated the unresolved button icon for better understanding.
  * \[**Comments**]: Added types for `enableMultiThreadMode` and `disableMultiThreadMode` API methods.
</Update>

<Update label="3.0.8" description="Sept 12 2024">
  ### New Features

  * \[**Comments**]: Added multi-thread support for Comments:

  <Tabs>
    <Tab title="Other Frameworks">
      Using Props:

      ```html
      <velt-comments multi-thread-mode="true"></velt-comments>
      ```

      Using API Method:

      ```javascript
      const commentElement = Velt.getCommentElement();
      // To enable multi-thread mode
      commentElement.enableMultiThreadMode();
      // To disable multi-thread mode
      commentElement.disableMultiThreadMode();
      ```
    </Tab>
  </Tabs>

  * \[**Inline Reactions**]: Added ability to add list of custom reactions:

  <Tabs>
    <Tab title="Other Frameworks">
      Using API Method:

      ```javascript
        const reactionElement = client.getReactionElement();
        const customReactions = {
          "EMOJI_ID_1": {
            "emoji": "🔥" // You could also set emoji using a url or raw svg definition
          },
          "EMOJI_ID_2": {
            "emoji": "🙌" // You could also set emoji using a url or raw svg definition
          },
          "EMOJI_ID_3": {
            "emoji": "💪" // You could also set emoji using a url or raw svg definition
          }
        };
        reactionElement.setCustomReactions(customReactions);
      ```
    </Tab>
  </Tabs>

  * \[**UI Customization**]: Added wireframe for MultiThreaded Comment Dialog.
  * \[**UI Customization**]: Added wireframe for Comment Sidebar Button with the new name.

  ### Improvements

  * \[**Comments**]: Made element binding consistent by using common `targetElementId` attribute in comment feature components:

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
        <VeltCommentTool targetElementId={'yourTargetElementId'} />
        <VeltCommentBubble targetElementId={'yourTargetElementId'} />
        <VeltInlineCommentsSection targetElementId={'yourTargetElementId'} />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
        <velt-comment-tool target-element-id="yourTargetElementId"></velt-comment-tool>
        <velt-comment-bubble target-element-id="yourTargetElementId"></velt-comment-bubble>
        <velt-inline-comments-section target-element-id="yourTargetElementId"></velt-inline-comments-section>
      ```
    </Tab>
  </Tabs>

  ### Bug Fixes

  * \[**Notifications**]: Fixed an issue where unread icon was not showing up when a comment was added by the user themselves.
  * \[**Notifications**]: Resolved a UI issue where the "All Read" container was showing up while the data was still loading.
  * \[**Notifications**]: Fixed the load more button on all notifications tabs.
  * \[**Notifications**]: Fixed an issue where using the "assign to" options from the thread options menu wasn't generating a notification.
  * \[**Recorder**]: Fixed an issue where recording was saved when minimizing the preview panel.
</Update>

<Update label="3.0.7" description="Sept 10 2024">
  ### Improvements

  * \[**Comments**]: Pass the `id` attribute on either the `<video>` tag or its parent element. This simplifies the implementation of comments on custom video players.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
        <div id="videoPlayerId">
          <YourVideoPlayerComponent></YourVideoPlayerComponent>
          <VeltCommentPlayerTimeline videoPlayerId="videoPlayerId" totalMediaLength="12"></VeltCommentPlayerTimeline>
          <VeltReactionTool videoPlayerId="videoPlayerId"></VeltReactionTool>
        </div>
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
        <div id="videoPlayerId">
          <your-video-player-component></your-video-player-component>
          <velt-comment-player-timeline video-player-id="videoPlayerId" total-media-length="12"></velt-comment-player-timeline>
          <velt-reaction-tool video-player-id="videoPlayerId"></velt-reaction-tool>
        </div>
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="3.0.6" description="Sept 10 2024">
  ### New Features

  * \[**Comments**]: Added an "Unresolve Comment" button component in the comment dialog. This button is used to unresolve a comment that was previously marked as resolved.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltCommentDialogWireframe.UnresolveButton />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-comment-dialog-unresolve-button-wireframe></velt-comment-dialog-unresolve-button-wireframe>
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Comments**]: Improved comment text handling by trimming whitespace from `commentText` and `commentHtml` in the comment dialog.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue with autocomplete chip shadowDOM not being updated.
  * \[**Notifications**]: Resolved an issue where documents with empty notifications were still being rendered.
  * \[**Users**]: Fixed a bug related to special characters in user names.
  * \[**Comments**]: Fixed an issue where the checkbox in the location filter dropdown in sidebar wasn't updating on selection.
  * \[**Comments**]: Fixed an issue where the status filter menu in the sidebar wasn't closing properly.
  * \[**Recorder**]: Resolved a problem where the device list wasn't updating correctly in the recording settings menu in certain scenarios.
</Update>

<Update label="3.0.5" description="Sept 7 2024">
  ### New Features

  * \[**Comments**]: Added a minimal location filter in the sidebar wireframe for basic location based filtering. By default it's not enabled. You need to explicitly add the wireframe to the sidebar.
  * \[**Sidebar**]: Added `Floating Mode` for Comments Sidebar. This allows the sidebar panel to appear as an overlay on top of the sidebar button when clicked.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltSidebarButton floatingMode={true} />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-sidebar-button floating-mode="true"></velt-sidebar-button>
        ```
      </Tab>
    </Tabs>

  ### Bug Fixes

  * \[**Comments**]: Fixed a bug where clicking the "replies" button in the sidebar comment dialog incorrectly opened the comment dialog on the DOM. This issue only affected implementations using the sidebar comment dialog wireframe.
</Update>

<Update label="3.0.4" description="Sept 5 2024">
  ### New Features

  * \[**Comments**]: Added persistent comment mode banner wireframe.

  * \[**API**]: Added `getDocumentMetadata` method to get the current document's metadata. It returns a subscription with [`DocumentMetadata`](/api-reference/sdk/models/data-models#documentmetadata) object.

  <Tabs>
    <Tab title="React / Next.js">
      ```javascript
      client.getDocumentMetadata().subscribe((documentMetadata) => {
          console.log("Current document metadata: ", documentMetadata);
      });
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      Velt.getDocumentMetadata().subscribe((documentMetadata) => {
        console.log("Current document metadata: ", documentMetadata);
      });
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Comments**]: The persistent comment banner now inherits the shadow DOM property from `Velt Comments`.
</Update>

<Update label="3.0.3" description="Sept 4 2024">
  ### New Features

  * \[**Comments**]: Added a minimal filtering and sorting dropdown in the sidebar wireframe. By default it's not enabled. You need to explicitly add the wireframe to the sidebar. It includes options like:
  * Filter by `All`
  * Filter by `Unread`
  * Filter by `Read`
  * Filter by `Resolved`
  * Sort by `Unread`
  * Sort by `Last Updated Timestamp`

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the dialog was overflowing out of the screen in some cases.
</Update>

<Update label="3.0.2" description="Sept 3 2024">
  ### New Features

  * \[**Reactions**]: Added [inline reaction section](/async-collaboration/reactions/setup) feature component.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltInlineReactionsSection 
          targetReactionElementId="containerId"
        />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-inline-reactions-section target-reaction-element-id="containerId"></velt-inline-reactions-section>
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Comments**]: Truncated video timeline comment card to 100 characters for improved readability.
  * \[**Users**]: Limited user names to a maximum of 20 characters and disallowed URLs in names for security purposes.

  ### Bug Fixes

  * \[**Comments**]: Resolved an issue with the unread indicator in the comment dialog.
</Update>

<Update label="3.0.1" description="Aug 31 2024">
  ### New Features

  * \[**Comments**]: Added feature to render a comment bubble on the comment pin or triangle instead of the comment dialog. Hovering or clicking the bubble will open the comment dialog.

    * `bubbleOnPin`: Whether to show bubble on pin \[default: false]
    * `bubbleOnPinHover`: If the above is true, whether to show bubble when the pin is hovered over or clicked \[default: true]

    <Tabs>
      <Tab title="React / Next.js">
        Using Props:

        ```jsx
        <VeltComments bubbleOnPin={true} bubbleOnPinHover={false} />
        ```

        Using API:

        ```javascript
        const commentElement = client.getCommentElement();

        // To enable showing bubble on pin
        commentElement.enableBubbleOnPin();

        // To disable showing bubble on pin
        commentElement.disableBubbleOnPin();

        // To enable option to show bubble on pin hover vs only on click
        commentElement.enableBubbleOnPinHover();

        // To disable option to show bubble on pin hover
        commentElement.disableBubbleOnPinHover();
        ```
      </Tab>

      <Tab title="Other Frameworks">
        Using Props:

        ```html
        <velt-comments bubble-on-pin="true" bubble-on-pin-hover="false"></velt-comments>
        ```

        Using API:

        ```javascript
        const commentElement = Velt.getCommentElement();

        // To enable showing bubble on pin
        commentElement.enableBubbleOnPin();

        // To disable showing bubble on pin
        commentElement.disableBubbleOnPin();

        // To enable option to show bubble on pin hover vs only on click
        commentElement.enableBubbleOnPinHover();

        // To disable option to show bubble on pin hover
        commentElement.disableBubbleOnPinHover();
        ```
      </Tab>
    </Tabs>

  ### Improvements

  * \[**Comments**]: Increased the max allowed size of attachments in composer from 2MB to 15MB.
  * \[**Comments**]: Decreased the size of triangle in comment pin from 15px to 10px.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the comment dialog composer user avatar wireframe was not working.
  * \[**Comments**]: Resolved minor signal-related issues.
  * \[**Comments**]: Fixed Comment Dialog Attachments and Recording UI for inline comment mode, addressing aspect ratio issues.
</Update>

<Update label="3.0.0" description="Aug 30 2024">
  ### Improvements

  * \[**Performance**]: Rewrote change detection and state management for the entire SDK to make it more performant. This is a major update and will benefit all developers.
</Update>


# null
Source: https://docs.velt.dev/release-notes/archive/april-16-2024



## Versions

* Latest SDK: [1.0.107](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.119](https://www.npmjs.com/package/@veltdev/types)

## Method to Hide Comments from Users on specific Locations

The [client.excludeLocationIds()](https://docs.velt.dev/async-collaboration/comments/customize-behavior/general-controls) method can be used to hide `Comments` at specific `Locations` from `Users`.

```jsx
const locationIds = ['location1', 'location2']; // list of location ids
client.excludeLocationIds(locationIds);
```

## Configuration to Disable Recording Summaries

If you want to [disable the Recording summaries](https://docs.velt.dev/async-collaboration/comments/customize-behavior/multimedia) that appear when you record you audio, voice or screen, you can can now do so.

Example:

```jsx
<VeltComments recordingSummary={false} />
```

API Methods:

```jsx
const commentElement = client.getCommentElement();
// to show recording summary
commentElement.enableRecordingSummary();
// to hide recording summary
commentElement.disableRecordingSummary();
```

## Configuration to Disable Recording countdown

If you want to [disable the countdown](https://docs.velt.dev/async-collaboration/comments/customize-behavior/multimedia) that appears when you begin recording your audio, voice, or screen, you can now do so. When the countdown is disabled, recordings will begin instantly.

Example

```jsx
<VeltComments recordingCountdown={false} />
```

API Methods:

```jsx
// API method - comment element
const commentElement = client.getCommentElement();
// To enable recording countdown
commentElement.enableRecordingCountdown();
// To disable recording countdown
commentElement.disableRecordingCountdown();

// API method - recorder element
const recorderElement = client.getRecorderElement();
// To enable recording countdown
recorderElement.enableRecordingCountdown();
// To disable recording countdown
recorderElement.disableRecordingCountdown();
```

## Method to Remove the Document ID

You can now unset the `Document Id` to pause the Velt SDK functions.

```jsx
client.unsetDocumentId()
```

## More File Type Support in Comment attachments

We've added support for more file types in `Comment` attachments (`csv`, `docx`, `pptx`, `xlsx`, `webp`, `mp4` etc.).


# null
Source: https://docs.velt.dev/release-notes/archive/april-24-2024



## Versions

* Latest SDK: [1.0.112](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.127](https://www.npmjs.com/package/@veltdev/types)

## Option to Disable ShadowDOM

We've added an option for you to [disable the ShadowDOM on certain components](https://docs.velt.dev/async-collaboration/comments/customize-behavior/ui-controls).

By default, a ShadowDOM is used with certain components to ensure that your application's CSS does not interfere with the styling of the SDK components.

If you want your application's CSS to affect the styling of the SDK components, you can disable the ShadowDOM.

```jsx
<VeltComments pinShadowDom={false} dialogShadowDom={false} />
<VeltCommentsSidebar shadowDom={false} />
```

API methods:

```jsx
const commentElement = client.getCommentElement();
commentElement.enablePinShadowDOM();
commentElement.disablePinShadowDOM();
commentElement.enableDialogShadowDOM();
commentElement.disableDialogShadowDOM();
commentElement.enableSidebarShadowDOM();
commentElement.disableSidebarShadowDOM();
```

## Method to Unsubscribe from Subscriptions

We added an `unsubscribe()` method to unsubscribe from any event subscriptions.

Example subscription:

```jsx
let subscription = commentElement.getAllCommentAnnotations().subscribe((comments) => {
// Do something with comments
});
```

To unsubscribe from the subscription:

```jsx
subscription?.unsubscribe()
```

## Added webhook notifications for `Huddle` Create and Join Events

Your users will now receive [webhook notifications](https://docs.velt.dev/webhooks/huddle-webhooks) when a `Huddle` is created or joined.

Example notification schema:

```jsx
{
  "from": {
      // UserObject
  },
  "projectName": "string",
  "projectUrl": "string",
  "actionType": "string", // created | joined
  "notificationSource": "huddle",
  "documentId": "string",
  "clientDocumentId": "string",
  "id": "string",
  "timestamp": 1234567890,
  "actionUser": {
      // UserObject
  },
}
```

Click here to see the [Notification](https://docs.velt.dev/api-reference/sdk/models/data-models#notification) schema.

## Added Validations to check for Audio and Video permissions on `Huddles`

Your users will now be prompted to check for Audio and Video permissions on `Huddles`

## Option to disable `Chat` feature on `Huddles`

You can now [disable the Chat feature](https://docs.velt.dev/realtime-collaboration/huddle/customize-behavior) that is enabled by default on `Huddle` component.

## Option to disable `flockMode` feature on `Huddles`

You can now [disable the flockMode feature](https://docs.velt.dev/realtime-collaboration/huddle/customize-behavior) that is enabled by default on `Huddle` component when clicking on another user's Avatar.

## Added support to set a custom order of locations to sort by in the `Comments Sidebar`.

You can now define the [order in which locations appear](https://docs.velt.dev/async-collaboration/comments-sidebar/customize-behavior) in the `Comments Sidebar` filter through the 'order' field in the `filterConfig` object.

```jsx
<VeltCommentsSidebar
  filterConfig={{
    location: {
      enable: true,
      name: 'Pages',
      enableGrouping: true,
      multiSelection: true,
      order: ['locationId1', 'locationId2', 'locationId3'] // pass array of location ids here
    },
  }}
/>
```

## Added configuration for Unread Comments Indicator

You can now configure the [Unread Comments Indicator](https://docs.velt.dev/async-collaboration/comments/customize-behavior/display-metadata) to be either `minimal` or `verbose`.

In `minimal` mode unread comments will be indicated by a small red dot.

In `verbose` mode unread comments will be indicated by a larger badge that says UNREAD

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/verbose-mode-comments.png)
</Frame>

## Added hook for `useUnsetDocumentId`

There is now a hook called [useUnsetDocumentId()](https://docs.velt.dev/api-reference/hooks/hooks#useunsetdocumentid) that calls [client.unsetDocumentId()](https://docs.velt.dev/api-reference/sdk/api/api-methods#client)

```jsx
import { useUnsetDocumentId} from '@veltdev/react'
import React from 'react'

export default function YourComponent() {

  useUnsetDocumentId();

  return (
    <div>...</div>
  )
}
```

## Added option to use a specific version of the Velt React SDK.

You can now use a [specific version of the Velt React SDK](https://docs.velt.dev/get-started/setup/advanced).

To do so, in your `VeltProvider` component, set the `config` props object to `{ version: '1.0.XYZ' }`.

Example:

```jsx
<VeltProvider apiKey='YOUR_API_KEY' config={{ version: '1.0.126' }}>
	...
</VeltProvider>
```


# null
Source: https://docs.velt.dev/release-notes/archive/aug-12-2024



# 2.0.30

### New Features

* \[**Comments**]: Added `resolvedByUserId` field on comment resolve. This allows tracking which user resolved a comment thread.

* \[**Comments**]: Added a configuration on sidebar to open the filter panel as a bottom sheet (default) or overlap on the filter button.
  * Prop: `filterPanelLayout`. Values: `'menu' | 'bottomSheet'` (default)
  * Usage:

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentsSidebar filterPanelLayout="menu" />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comments-sidebar filter-panel-layout="menu"></velt-comments-sidebar>
        ```
      </Tab>
    </Tabs>


# null
Source: https://docs.velt.dev/release-notes/archive/aug-13-2024



# 2.0.31

### New Features

* \[**UI Customization**]: Added [Confirm Dialog Wireframe](/ui-customization/features/async/comments/confirm-dialog/overview) and added support for light and dark modes.
  * This is a common UI component used for multiple features like deleting comment thread, deleting a recorded content and more.
  * It will automatically inherit the light or dark mode property from the parent feature.


# null
Source: https://docs.velt.dev/release-notes/archive/aug-14-2024



# 2.0.33

### New Features

* \[**UI Customization**]: Added conditional dynamic classes for different states of various interactive components:
  * `velt-sidebar-tool-open`: For the sidebar button when the sidebar is open.
  * `velt-notification-tool-open`: For the notification tool when the notification panel is open.
  * `velt-comments-sidebar-status-open`: For the status dropdown trigger when the dropdown is open.
  * `velt-comments-sidebar-filter-button-open`: For the filter button when the filter panel is open.

### Bug Fixes

* \[**Comments**]: Fixed an issue where after adding '@here' the cursor position was incorrectly placed at the start of the text.

# 2.0.32

### New Features

* \[**UI Customization**]: Added conditional classes for different states of various interactive components:
  * `velt-comment-pin-open`: For the comment pin when the pin is selected.
  * `velt-dropdown-open`: For the dropdown trigger when the dropdown is open.
  * `velt-assign-dropdown-open`: For the assign dropdown trigger when the dropdown is open.
  * `velt-custom-dropdown-open`: For the custom dropdown trigger when the dropdown is open.
  * `velt-options-dropdown-open`: For the options dropdown trigger when the dropdown is open.
  * `velt-priority-dropdown-open`: For the priority dropdown trigger when the dropdown is open.
  * `velt-status-dropdown-open`: For the status dropdown trigger when the dropdown is open.
  * `velt-reaction-tool-open`: For the reaction tool when the tool is open.
  * `velt-comment-bubble-open`: For the comment bubble when the bubble is selected.
  * `velt-comment-bubble-hover`: For the comment bubble when the bubble is hovered over.

* \[**Comments**]: Added configuration for customizing the '@here' mention label. eg: @all, @everyone, @team, etc:

  <Tabs>
    <Tab title="React / Next.js">
      Using Props:

      ```jsx
      <VeltComments atHereLabel="@all" />
      ```

      Using API:

      ```javascript
      const contactElement = client.getContactElement();
      contactElement.setAtHereLabel('@all');
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using Props:

      ```html
      <velt-comments at-here-label="@all"></velt-comments>
      ```

      Using API:

      ```javascript
      const contactElement = Velt.getContactElement();
      contactElement.setAtHereLabel('@all');
      ```
    </Tab>
  </Tabs>

### Improvements

* \[**Notifications**]: Various UI improvements on the notification panel.

### Bug Fixes

* \[**Comments**]: Fixed a bug where email contacts could have an invalid character ('.') at the end.
* \[**Comments**]: Resolved an issue where the comment sidebar filter wouldn't be sticky on page refresh.
* \[**Debugger**]: Fixed typo with event name `commentMoreReplayOptionClicked` and updated it to `commentMoreReplyOptionClicked`.


# null
Source: https://docs.velt.dev/release-notes/archive/aug-16-2024



# 2.0.35

### Improvements

* \[**Comments**]: Added dynamic `velt-composer-input-focused` class on the composer container whenever the input is focused.
  This provides more control over the styling of the composer input when it is focused.

# 2.0.34

### Improvements

* \[**Comments**]: Added dynamic `velt-composer-open` class on the composer container whenever the composer is opened.

* \[**Comments**]: Improved contact and reaction tooltips:
  * Inherited shadow DOM property from parent's shadow DOM property.
  * Added light mode and dark mode support.

### Bug Fixes

* \[**Comments**]: Fixed user avatar background color in autocomplete chip tooltip to match the color assigned to the user in the SDK.


# null
Source: https://docs.velt.dev/release-notes/archive/aug-21-2024



# 2.0.39

### Bug Fixes

* \[**Comments**]: Fixed a css padding issue related to the action buttons in the comment dialog composer.

# 2.0.38

## Bug Fixes

* \[**Comments**]: Fixed an issue with the user-avatar component, ensuring it's consistently used across all the components.

# 2.0.37

### New Features

* \[**Comments**]: Added the ability to exclude specific location IDs from the comments sidebar. This provides more control over the displayed content.

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```jsx
    <VeltCommentsSidebar excludeLocationIds={['location1', 'location2']} />
    ```

    Using API:

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.excludeLocationIdsFromSidebar(['location1', 'location2']);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Props:

    ```html
    <velt-comments-sidebar exclude-location-ids='["location1", "location2"]'></velt-comments-sidebar>
    ```

    Using API:

    ```javascript
    const commentElement = Velt.getCommentElement();
    commentElement.excludeLocationIdsFromSidebar(['location1', 'location2']);
    ```
  </Tab>
</Tabs>

# 2.0.36

### Improvements

* \[**Comments**]: Applied `location` filters to the inline-comments-section component as well, following the same pattern like other comment components.
* \[**UI Customization**]: Removed `!important` declarations from some component CSS, improving overall style flexibility and reducing potential conflicts.

### Bug Fixes

* \[**Comments**]: Resolved an issue related to calculating comment pin positions, ensuring more accuracy and robustness.


# null
Source: https://docs.velt.dev/release-notes/archive/aug-22-2024



# 2.0.40

### Bug Fixes

* \[**Comments**]: Fixed an issue related to `addContext` in the `onCommentAdd` event. This ensures that context is consistently added when a new comment is created.


# null
Source: https://docs.velt.dev/release-notes/archive/aug-6-2024



# 2.0.27

### Bug Fixes

* \[**Comments**]: Fixed an issue with changes detection in the text comment feature.

# 2.0.26

### Improvements

* \[**Notifications**]: Renamed Notification panel "all read" container wireframe components for better clarity and consistency:
  <Warning>This is a breaking change.</Warning>
  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      // Old
      <VeltNotificationsPanelWireframe.AllReadContainer />

      // New
      <VeltNotificationsPanelWireframe.Content.AllReadContainer />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <!-- Old -->
      <velt-notifications-panel-all-read-container-wireframe></velt-notifications-panel-all-read-container-wireframe>

      <!-- New -->
      <velt-notifications-panel-content-all-read-container-wireframe></velt-notifications-panel-content-all-read-container-wireframe>
      ```
    </Tab>
  </Tabs>

# 2.0.25

### New Features

* \[**Comments**]: For [Custom Comment Annotation dropdown](/async-collaboration/comments/customize-behavior/custom-lists#1-add-custom-lists-on-comment-annotation) on comment dialog:
  * Added a default placeholder for the custom dropdown and made it configurable.
  * Added it to the composer by default.

```jsx
let customList = [
    { id: 'violent', label: 'Violent' },
    { id: 'inappropriate', label: 'Inappropriate' },
    { id: 'robbery', label: 'Robbery' },
    { id: 'nsfw', label: 'NSFW' },
];

const customListDataOnCommentAnnotation = {
	type: 'multi', // choose from 'multi' or 'single'
    placeholder: 'Custom Placeholder',
    data: customList, // your customList data here
};
```

<Tabs>
  <Tab title="React / Next.js with hooks">
    **Using Props:**

    ```jsx
    <VeltComments customListDataOnAnnotation={customListDataOnCommentAnnotation} />
    ```

    **Using API:**

    ```jsx
    const commentElement = useCommentUtils();		
    commentElement.createCustomListDataOnAnnotation(customListDataOnCommentAnnotation);
    ```

    Using Wireframe:

    ```jsx
    <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.Placeholder>
      Custom Placeholder
    </VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.Placeholder>
    ```
  </Tab>

  <Tab title="React / Next.js">
    **Using Props:**

    ```jsx
    <VeltComments customListDataOnAnnotation={customListDataOnCommentAnnotation} />
    ```

    **Using API:**

    ```jsx
    const commentElement = client.getCommentElement();		
    commentElement.createCustomListDataOnAnnotation(customListDataOnCommentAnnotation);
    ```

    Using Wireframe:

    ```jsx
    <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.Placeholder>
      Custom Placeholder
    </VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.Placeholder>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    **Using API:**

    ```jsx
    const commentElement = Velt.getCommentElement();			
    commentElement.createCustomListDataOnAnnotation(customListDataOnCommentAnnotation);
    ```

    **Using Wireframe:**

    ```html
    <velt-comment-dialog-custom-annotation-dropdown-trigger-placeholder-wireframe>
      Custom Placeholder
    </velt-comment-dialog-custom-annotation-dropdown-trigger-placeholder-wireframe>
    ```
  </Tab>
</Tabs>

### Bug Fixes

* \[**Comments**]: Fixed an issue related to `disableReactions` in comment dialog customization.


# null
Source: https://docs.velt.dev/release-notes/archive/aug-8-2024



# 2.0.29

### New Features

* \[**Comments**]: Added feature to render a comment bubble on the comment pin or triangle instead of the comment dialog. Hovering or clicking the bubble will open the comment dialog.

  <Tabs>
    <Tab title="React / Next.js">
      Using props:

      ```jsx
      <VeltComments bubbleOnHover={true} />
      ```

      Using API:

      ```javascript
      const commentElement = client.getCommentElement();
      commentElement.showBubbleOnHover(); // Enable bubble on hover
      commentElement.hideBubbleOnHover(); // Disable bubble on hover
      ```
    </Tab>

    <Tab title="Other Frameworks">
      Using props:

      ```html
      <velt-comments bubble-on-hover="true"></velt-comments>
      ```

      Using API:

      ```javascript
      const commentElement = Velt.getCommentElement();
      commentElement.showBubbleOnHover(); // Enable bubble on hover
      commentElement.hideBubbleOnHover(); // Disable bubble on hover
      ```
    </Tab>
  </Tabs>

* \[**Location**]: For multiple location setup, added support for using `data-velt-location-id` vs full location object for marking additional locations.

### Improvements

* \[**Comments**]:Refactored comment components code for better maintainability.

### Bug Fixes

* \[**Comments**]: Fixed an issue where assignee banner text color was not being applied correctly for custom statuses.
* \[**Notifications**]: Fixed an issue where the document name in the notifications documents tab was not being displayed correctly.

# 2.0.28

### New Features

* \[**Notifications**]: Added ability to customize tabs on the Notifications Panel.

  <Tabs>
    <Tab title="React / Next.js with Hooks">
      ```jsx
      <VeltNotificationsTool tabConfig={{
          "forYou": {
              name: 'Custom For You',
              enable: true,
          },
          "documents": {
              name: 'Custom Documents',
              enable: true,
          },
          "all": {
              name: 'Custom All',
              enable: false,
          },
      }} />
      ```

      Using APIs:

      ```jsx
      const notificationElement = useNotificationUtils();

      const tabConfig = {
        "forYou": {
          name: 'Custom For You',
          enable: true,
        },
        "documents": {
          name: 'Custom Documents',
          enable: true,
        },
        "all": {
          name: "Custom All",
          enable: false,
        },
      };

      notificationElement.setTabConfig(tabConfig);
      ```
    </Tab>

    <Tab title="React / Next.js">
      ```jsx
      <VeltNotificationsTool tabConfig={{
          "forYou": {
              name: 'Custom For You',
              enable: true,
          },
          "documents": {
              name: 'Custom Documents',
              enable: true,
          },
          "all": {
              name: 'Custom All',
              enable: false,
          },
      }} />
      ```

      Using APIs:

      ```jsx
      const notificationElement = client.getNotificationElement();

      const tabConfig = {
        "forYou": {
          name: 'Custom For You',
          enable: true,
        },
        "documents": {
          name: 'Custom Documents',
          enable: true,
        },
        "all": {
          name: 'Custom All',
          enable: false,
        },
      };

      notificationElement.setTabConfig(tabConfig);
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      const tabConfig = {
        "forYou": {
          name: 'Custom For You',
          enable: true,
        },
        "documents": {
          name: 'Custom Documents',
          enable: true,
        },
        "all": {
          name: 'Custom All',
          enable: false,
        },
      };

      const notificationsTool = document.querySelector('velt-notifications-tool');
      notificationsTool?.setAttribute("tab-config", JSON.stringify(tabConfig));
      ```

      Using APIs:

      ```jsx
      const notificationElement = Velt.getNotificationElement();

      const tabConfig = {
        "forYou": {
          name: 'Custom For You',
          enable: true,
        },
        "documents": {
          name: 'Custom Documents',
          enable: true,
        },
        "all": {
          name: 'Custom All',
          enable: false,
        },
      };

      notificationElement.setTabConfig(tabConfig);
      ```
    </Tab>
  </Tabs>

* \[**@ mention**]: Added ability to override contact list on the client side. [Learn more](/async-collaboration/comments/customize-behavior/@mentions).
  * The `merge` parameter is used to determine if the new contact list should be merged with the existing contact list or replaced. Default: `false`.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    ```jsx
    const contactElement = useContactUtils();

    useEffect(() => {
      contactElement.updateContactList([{userId: 'userId1', name: 'User Name', email: 'user1@velt.dev'}], {merge: true});
    }, [contactElement]);

    ```
  </Tab>

  <Tab title="React / Next.js">
    ```jsx
    const contactElement = client.getContactElement();
    contactElement.updateContactList([{userId: 'userId1', name: 'User Name', email: 'user1@velt.dev'}], {merge: true});
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const contactElement = Velt.getContactElement();
    contactElement.updateContactList([{userId: 'userId1', name: 'User Name', email: 'user1@velt.dev'}], {merge: true});
    ```
  </Tab>
</Tabs>

* \[**Document**]: Added ability to set metadata on the document while setting the `documentId`.
  * You can set any key/value pair in the metadata object. `documentName` is a special field that we use to display the document name in some Velt Components.

<Tabs>
  <Tab title="React / Next.js with Hooks">
    ```jsx
    useSetDocument('unique-document-id', {documentName: 'Document Name'});
    ```
  </Tab>

  <Tab title="React / Next.js">
    ```jsx
    const { client } = useVeltClient();

    useEffect(() => {
        if (client) {
            client.setDocument('unique-document-id', {documentName: 'Document Name'});
        }
    }, [client]);
    ```
  </Tab>

  <Tab title="HTML">
    ```jsx
    if(Velt){
        Velt.setDocument('unique-document-id', {documentName: 'Document Name'});
    }
    ```
  </Tab>

  <Tab title="Angular">
    ```jsx
    this.client.setDocument('unique-document-id', {documentName: 'Document Name'});
    ```
  </Tab>

  <Tab title="Vue.js">
    ```jsx
    client.setDocument('unique-document-id', {documentName: 'Document Name'});
    ```
  </Tab>
</Tabs>

### Improvements

* \[**Comments**]: Improved the get comment annotations API to determine data loading state in React:
  ```jsx
  const [loading, setLoading] = useState(true);
  const commentAnnotations = useCommentAnnotations();

  useEffect(() => {
    if (commentAnnotations) {
      setLoading(false);
    } else {
      setLoading(true);
    }
  }, [commentAnnotations]);
  ```
* \[**Core**]:Updated SDK CDN URL in React and Client libraries to point to `cdn.velt.dev`.


# null
Source: https://docs.velt.dev/release-notes/archive/dec-28-2023



## Summary

The new features in this release give you more control over the sidebar button, Recorder media options, reactions, and contact list.

## Enable Sidebar Button on Comment Dialog

By default, each Comment Dialog has a button at the bottom that will open the Comments Sidebar when clicked. You can now disable this button by setting the sidebarButtonOnCommentDialog prop to false.

## Subscribe to Sidebar Button Clicks on Comment Dialog

You can now subscribe to clicks on the Sidebar Button at the bottom of the Comment Dialog by passing a callback to the onSidebarButtonOnCommentDialogClick event handler.

## Set Recorder Media Options

You can now set the Recorder media options within Comments: (audio, screen, video, all, or none). By default, only audio recording is enabled. To set the Recorder media options, pass in a comma separated string of the features you want to enable.

## Enable Reactions

You can now enable or disable emoji reactions in Comments. By default, reactions are enabled.

## Add Comments on specific elements

You can now add a Comment on a specific element by ID. To do this, use the addCommentOnElement() API method and pass in an object with a specific schema.

## Reset Contact List using POST Method API

You can also replace an entire Group Ids contact list using a POST Method on the following API endpoint: `https://updatecontactlist-4mfhcuyw2q-uc.a.run.app`


# null
Source: https://docs.velt.dev/release-notes/archive/feb-13-2024



## Versions

* Latest SDK: 1.0.83
* Latest Types: 1.0.100

## Location Support in System Comments

Users can now specify location when adding a new comment using [System Comments](/api-reference/rest-apis/comments-feature/comment-annotations/add-comment-annotations).

```jsx
{
  "data": {
    "apiKey": "YOUR_API_KEY",
    "authToken": "YOUR_AUTH_TOKEN",
    "documentId": "snippyly-tinymce-13-oct",

		// You can pass location object to set comment to any specific location
		"location": {
			"locationName": "YOUR_LOCATION",
			// You can optionally pass version in location object
			// to show comment on specific version only
			// Note: if you set version then id and name fields are mandatory
			"version": {
				"id": "v1",
				"name": "Version 1"
			}
		},

    "targetElement": {
      "elementId": "systemCommentTest",
      "targetText": "we want our custom elements",
      "occurrence": 1
    },
    "commentData": [
      {
        "commentText": "Replace: dolor sit amet consectetur adipisicing elit with this is test comment",
        "replaceContentHtml": "this is <strong style='color: blue'>bold text</strong> test comment",
        "from": {
          "email": "test@velt.dev",
          "name": "Test User"
        }
      }
    ]
  }
}
```

## Comment Read Receipts

Newly added comments that have not been seen by Users will now display with a small red dot.

<Frame>
  <iframe width="700px" height="400px" src="https://www.youtube.com/embed/u2VcZe5QKA8?si=qyzP4CVuAt9wVz_l" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" />
</Frame>

## Specifying where comments are allowed using Class Names and Query Selectors

Expanded options for specifying where comments are allowed using class names and query selectors in addition to ids.

Added the `allowedElementClassNames` and `allowedElementQuerySelectors` properties on the `<VeltComments/>` component to provide more flexibility in determining where comments can be placed.

[See Docs](/async-collaboration/comments/customize-behavior/general-controls)

HTML:

```html
<velt-comments
  allowed-element-class-names='["class-name-1", "class-name-2"]'
  allowed-element-query-selectors='["#id1.class-name-1"]'
></velt-comments>
```

React:

```jsx
<VeltComments
  allowedElementClassNames={["class-name-1", "class-name-2"]}
  allowedElementQuerySelectors={["#id1.class-name-1"]}
/>;
```

API Methods:

```jsx
const commentElement = client.getCommentElement();
commentElement.allowedElementClassNames(["class-name-1", "class-name-2"]);
commentElement.allowedElementQuerySelectors(["#id1.class-name-1"]);
```

<Frame>
  <iframe width="700px" height="400px" src="https://www.youtube.com/embed/ERs2BYP84RA?si=O2qnAlNDhdFvIJQA" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" />
</Frame>


# null
Source: https://docs.velt.dev/release-notes/archive/feb-20-2024



## Versions

* Latest SDK: 1.0.84
* Latest Types: 1.0.101

## Option to Remove Comment Tool from Velt Video Player

We have introduced a new option to the [Velt Video Player](/async-collaboration/comments/setup/video-player-setup/video-player-setup) component, allowing users to remove the Comment Tool. This feature offers greater flexibility in customizing the player interface according to your specific needs.

<Frame caption="Velt Video Player with Comment Tool Enabled">
  ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool-velt-video-player.png)
</Frame>

To remove the `Comment Tool` from the `VeltVideoPlayer` control panel, set the `commentTool` property to `false`.

```jsx
<VeltVideoPlayer commentTool={false} />
```

## View Analytics Component

Introducing the [View Analytics](/async-collaboration/view-analytics/overview) component, a powerful tool for tracking visitor engagement with your documents. Simply integrate this component into your project to gain insights into document viewership. Customize it to display visitor data tailored to specific locations, enhancing your analytics capabilities.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=view-analytics" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="400px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=view-analytics)

## React Hooks Integration

We're excited to announce the addition of custom [React Hooks](/api-reference/hooks/hooks) to our SDK, streamlining the development process for our users. These hooks provide an alternative method for interacting with the SDK, offering a smoother developer experience. By utilizing hooks, you can access SDK functionalities without the need for additional wrappers, such as useEffect hooks. This enhancement simplifies your codebase and improves overall efficiency.

<Tabs>
  <Tab title="Example with Hooks">
    ```jsx
    import { useSetDocumentId } from '@veltdev/react';

    export default function YourDocument() {

      useSetDocumentId("my-document-id")

      return (
        <div>
            Your Document Template
        </div>
      )
    }
    ```
  </Tab>

  <Tab title="Example without Hooks">
    ```jsx

    import { useVeltClient } from '@veltdev/react';
    import { useEffect, useState } from 'react';

    export default function YourDocument() {

      const { client } = useVeltClient();


      useEffect(() => {
        if (client) {
          client.setDocumentId('unique-document-id');
        }
      }, [client]);

      return (
        <div>
          Your Document Template 
        </div>
        
      );
    }
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/release-notes/archive/feb-27-2024



## Versions

* Latest SDK: [1.0.87](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.103](https://www.npmjs.com/package/@veltdev/types)

## Comment Thread Component

We've abstacted out the UI we use for the threads in our `Comments`component into its own component. Now you can use our [Comment Thread](/async-collaboration/comment-thread/overview) component with your comment data to create your own custom UIs.

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=comment-thread" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="700px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=comment-thread)

## Update Contact List

The [Contact List](/users/client-side/setup) is the list of emails you see when you try to `@mention` one of your teammates in a comment thread.

We now have two ways for you to keep your users' contact lists up to date.

* [Server Side](/users/server-side/api-reset-contact-list): Implement updates to your contact lists directly through a server-side API call. This method ensures that your contact lists are always synchronized with the latest data.
* [Client Side](/users/client-side/setup): For more dynamic updates, the client-side `identify()` method can be re-called with a configuration object to reinitialize your logged in users' contact list.

## PDF Viewer Support

We've added support for you to [leave comments on PDF Viewers](/async-collaboration/comments/customize-behavior/general-controls). To enable this, simply add the `data-velt-pdf-viewer` attribute on the element containing your PDF.

```jsx
<!-- Add data-velt-pdf-viewer="true" attribute at container level of your pdf viewer -->
<div id="viewerContainer" data-velt-pdf-viewer="true">
    <!-- Your pdf viewer here -->
    <div id="viewer" class="pdfViewer"></div>
</div>
```


# null
Source: https://docs.velt.dev/release-notes/archive/jan-14-2024



## Summary

These new features are designed to improve the collaboration experience in Velt by making it easier for users to work together on documents. Single Editor Mode can be used to prevent conflicts when multiple users are editing the same document, and Text Element Sync can be used to keep everyone in sync with the latest changes to text-based elements. These features are in beta.

## Single Editor Mode

### This feature allows you to make it so that only one user can be editing elements on the document at the same time.

* To enable single editor mode, use the enableSingleEditorMode() method.
* To disable single editor mode, use the disableSingleEditorMode() method.
* To check if the current user is the editor in single editor mode, subscribe to the isUserEditor\$() event.
* To set the current user as the editor in single editor mode, use the setUserAsEditor() method.
* To reset editor access in single editor mode, use the resetUserAccess() method.

## Text Element Sync

### This feature allows you to sync Input-type elements so when one user types, it gets filled for other users viewing the element.

* To allow Input, Textarea or Contentedible elements to sync across clients, set the data-velt-sync-state attribute to true on the element you are trying to sync.
* To disable clicks on elements, set the data-velt-sync-access attribute to false on the element you are trying to disable.


# null
Source: https://docs.velt.dev/release-notes/archive/july-02-2024



## Versions

* Latest React SDK: [1.0.160](https://www.npmjs.com/package/@veltdev/react)
* Latest Non-React SDK: [1.0.160](https://www.npmjs.com/package/@veltdev/client)
* Latest Types:  [1.0.178](https://www.npmjs.com/package/@veltdev/types)

## Added Email ID Validation in Token

We have introduced email ID validation. This enhancement ensures that the email provided in the token matches the email used during the user identification process (identify call), adding an extra layer of security to prevent user impersonation.


# null
Source: https://docs.velt.dev/release-notes/archive/july-03-2024



## Versions

* Latest React SDK: [1.0.162](https://www.npmjs.com/package/@veltdev/react)
* Latest Non-React SDK: [1.0.162](https://www.npmjs.com/package/@veltdev/client)
* Latest Types:  [1.0.180](https://www.npmjs.com/package/@veltdev/types)

## Added "velt-comment-pin" Component

We have introduced the velt-comment-pin component. You can use the Comment Pin component to manually set the position of a Comment Annotation.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentPin annotationId="-O0OL9H7ukfuXQe4Xtgk" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comment-pin annotation-id="-O0OL9H7ukfuXQe4Xtgk"></velt-comment-pin>
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/release-notes/archive/july-04-2024



## Versions

* Latest React SDK: [2.0.0](https://www.npmjs.com/package/@veltdev/react)
* Latest Non-React SDK: [2.0.0](https://www.npmjs.com/package/@veltdev/client)
* Latest Types:  [2.0.0](https://www.npmjs.com/package/@veltdev/types)

## Added Shadow Dom Support in Notification and Video Component

We have now added Shadow DOM support in both the notification (for notification panel and notification tool) and video components.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltNotificationsTool shadowDom={false} panelShadowDom={false} />

    <VeltNotificationsPanel shadowDom={false} />

    <VeltVideoPlayer shadowDom={false} />

    <VeltCommentPlayerTimeline shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-video-player shadow-dom="false"></velt-video-player>

    <velt-comment-player-timeline shadow-dom="false"></velt-comment-player-timeline>

    <velt-notifications-tool shadow-dom="false" panel-shadow-dom="false"></velt-notifications-tool>

    <velt-notifications-panel shadow-dom="false"></velt-notifications-panel>
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/release-notes/archive/july-09-2024



## Versions

* Latest React SDK: [2.0.3](https://www.npmjs.com/package/@veltdev/react)
* Latest Non-React SDK: [2.0.3](https://www.npmjs.com/package/@veltdev/client)
* Latest Types:  [2.0.3](https://www.npmjs.com/package/@veltdev/types)

## Added `selectCommentByAnnotationId` Method in Comment Element

A new method [`selectCommentByAnnotationId`](/api-reference/api-methods/comments#selectcommentbyannotationid) has been added to the comment element, allowing you to select a comment based on its annotation ID.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.selectCommentByAnnotationId("COMMENT_ANNOTATION_ID");
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.selectCommentByAnnotationId("COMMENT_ANNOTATION_ID");
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/release-notes/archive/june-10-2024



## Versions

* Latest SDK: [1.0.147](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.164](https://www.npmjs.com/package/@veltdev/types)

## Updated JWT Token to include user properties such as groupId and isAdmin

We updated the body that is sent to the `https://api.velt.dev/v1/auth/token/get` [JWT Token endpoint](/security/jwt-tokens) to include user properties such as `groupId` and `isAdmin`.

The `groupId` field is used to validate that the `groupId` provided in the `identify` call is the same as the one passed to the JWT Token.

The `isAdmin` field is used to set a user as an `admin`.

| Field                    | Required | Description                                                                                                                          |
| ------------------------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| `apiKey`                 | Yes      | Velt API Key                                                                                                                         |
| `authToken  `            | Yes      | Auth Token from the Velt console                                                                                                     |
| `userId `                | Yes      | Unique user id of the user                                                                                                           |
| `userProperties.groupId` | No       | If `groupId` is provided, it will be validated with the groupId used in the identify call. Recommended if you are setting `groupIds` |
| `userProperties.isAdmin` | No       | Set to `true` if you want to set user as `admin`. This is the only way to set a user as an `admin` User                              |

```jsx
{
  "data": {
    "apiKey": "YOUR_API_KEY", //Velt API Key
    "authToken": "YOUR_AUTH_TOKEN", // Auth Token from the Velt console
    "userId": "yourUserId", // unique user id of the user you are generating a JWT Token for
    "userProperties": {
        groupId: "YOUR_USER_GROUP_ID", // If groupId is provided here then we will validate it with the groupId used in the identify call
        isAdmin: true, // Set to true if you want to set user as admin
    }
  }
}
```

## Option to force re-login user on identify call

By default when you [identify](/get-started/setup/authenticate) a user, we maintain the user auth in the browser unless you explicitly change the logged in user with another identify call.

If you are granting a user additional access or have changed some metadata about the user and want those changes to be reflected immediately, then you should re-call the identify method with `forceReset` set to `true`.

```jsx
await client.identify(user, {
  forceReset: true
});
```


# null
Source: https://docs.velt.dev/release-notes/archive/june-24-2024



## Versions

* Latest React SDK: [1.0.158](https://www.npmjs.com/package/@veltdev/react)
* Latest Non-React SDK: [1.0.158](https://www.npmjs.com/package/@veltdev/client)
* Latest Types: [1.0.178](https://www.npmjs.com/package/@veltdev/types)

## Added `onContactSelected` API Method

We have introduced the [`onContactSelected`](/api-reference/sdk/api/api-methods#client#oncontactselected) API method in the Contact Element. This new method allows organization clients to add selected users to their organization or document-level IAM directly.

API Method:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const contactElement = client.getContactElement();

    contactElement.onContactSelected().subscribe((data: any) => {
      console.log('contact selected: ', data);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const contactElement = Velt.getContactElement();

    contactElement.onContactSelected().subscribe((data: any) => {
      console.log('contact selected: ', data);
    });
    ```
  </Tab>
</Tabs>

React Hook:

```jsx
import React, { useEffect } from 'react';
import { useContactUtils, useContactSelected } from '@veltdev/react';

function YourComponent() {

  const contactUtils = useContactUtils();

  useEffect(() => {
    console.log('contactUtils: ', contactUtils);
  }, [contactUtils]);

  const onContactSelected = useContactSelected();

  useEffect(() => {
    console.log('onContactSelected: ', onContactSelected);
  }, [onContactSelected]);

  return (
    // Your component code
  );

}
```

API Method Response Payload:

```jsx
export class UserContactSelectedPayload {
    /**
     * Selected user contact details.
     */
    contact!: UserContact;
    /**
     * Is user part of organization contact.
     */
    isOrganizationContact!: boolean;
    /**
     * Is user part of document contact.
     */
    isDocumentContact!: boolean;
    /**
     * Document access type.
     */
    documentAccessType!: string;
}
```


# null
Source: https://docs.velt.dev/release-notes/archive/june-29-2024



## Versions

* Latest React SDK: [1.0.159](https://www.npmjs.com/package/@veltdev/react)
* Latest Non-React SDK: [1.0.159](https://www.npmjs.com/package/@veltdev/client)
* Latest Types: [1.0.177](https://www.npmjs.com/package/@veltdev/types)

## Added `organizationGroups` Support in Contacts and Autocomplete Feature

Within the contacts and autocomplete features we have added the support for `organizationGroups`.

## Added Various Methods in Contact Element

We have introduced three new methods in the Contact Element: [`enableAtHere`](/api-reference/sdk/api/api-methods#client#enableathere), [`disableAtHere`](/api-reference/sdk/api/api-methods#client#disableathere), and [`updateContactListScopeForOrganizationUsers`](/api-reference/sdk/api/api-methods#client#updatecontactlistscopefororganizationusers).

API Methods:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const contactElement = client.getContactElement();
    // To enable @here for contact list
    contactElement.enableAtHere();
    // To disable @here for contact list
    contactElement.disableAtHere();
    /**
     * Update contact list scope for organization users.
     * @param scope ContactListScopeForOrganizationUsers[]
     */
    contactElement.updateContactListScopeForOrganizationUsers(['all', 'organization', 'organizationUserGroup', 'document']);
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const contactElement = Velt.getContactElement();
    // To enable @here for contact list
    contactElement.enableAtHere();
    // To disable @here for contact list
    contactElement.disableAtHere();
    /**
     * Update contact list scope for organization users.
     * @param scope ContactListScopeForOrganizationUsers[]
     */
    contactElement.updateContactListScopeForOrganizationUsers(['all', 'organization', 'organizationUserGroup', 'document']);
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/release-notes/archive/june-30-2024



## Versions

* Latest React SDK: [2.0.4](https://www.npmjs.com/package/@veltdev/react)
* Latest Non-React SDK: [2.0.4](https://www.npmjs.com/package/@veltdev/client)
* Latest Types: [2.0.4](https://www.npmjs.com/package/@veltdev/types)

## Added REST APIs

We have added REST APIs so that developers have more control when it comes to accessing and setting data.

REST APIs is a featureset that will have continued expansion but the current REST APIs give improved control over **Organizations**, **Documents**, **Users**, **Organization User Groups**, and **Comments**.

More REST APIs will be coming soon!

### [Organizations APIs](/api-reference/rest-apis/organizations/add-organizations)

1. Add Organizations
2. Update Organizations
3. Delete Organizations
4. Get Organizations
5. Update Disabled State for Organizations

### [Documents APIs](/api-reference/rest-apis/documents/add-documents)

1. Add Documents
2. Update Documents
3. Delete Documents
4. Get Documents
5. Update Access for Documents
6. Update Disabled State for Documents

### [Users APIs](/api-reference/rest-apis/users/add-users)

1. Add Users
2. Update Users
3. Delete Users
4. Get Users

### [Organization User Groups APIs](/api-reference/rest-apis/users/add-users)

1. Add User Groups
2. Add Users to Groups
3. Delete Users from Groups

### [Commenting APIs](/api-reference/rest-apis/comments-feature/comment-annotations/add-comment-annotations)

1. Add Comment Annotations
2. Update Comment Annotations
3. Delete Comment Annotations
4. Get Comment Annotations
5. Add Comments
6. Update Comments
7. Delete Comments
8. Get Comments


# null
Source: https://docs.velt.dev/release-notes/archive/june-6-2024



## Versions

* Latest SDK: [1.0.144](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.161](https://www.npmjs.com/package/@veltdev/types)

# 1. Major Improvements to Comments Sidebar Customization

In this update, we made several improvements to the `Customization` of the `Comments Sidebar` and `Sidebar Button`

## Support for customizing additional Subcomponents within the Comments Sidebar and Sidebar Button

We modified or added support for customizing the following `subcomponents` of the `Comments Sidebar`:

* [Filter](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/overview)
* [Filter Category](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/category)
* [Filter Close Button](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/close-button)
* [Filter Done Button](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/done-button)
* [Filter Item](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
* [Filter Groupby](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/groupby)
* [Filter Location](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/location)
* [Filter People](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/people)
* [Filter Priority](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/priority)
* [Filter Title](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/title)
* [Filter Versions](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/versions)
* [Header](/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/overview)
* [Header Status](/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/status/overview)
* [Header Status Trigger](/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/status/subcomponents/trigger)
* [Header Status Content](/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/status/subcomponents/content)
* [List](/ui-customization/features/async/comments/comments-sidebar/subcomponents/list/overview)
* [List Dialog Container](/ui-customization/features/async/comments/comments-sidebar/subcomponents/list/subcomponents/dialog-container)
* [List Group](/ui-customization/features/async/comments/comments-sidebar/subcomponents/list/subcomponents/group)

We modified or added support for customizing the following `subcomponents` of the `Sidebar Button`:

* [Sidebar Button](/ui-customization/features/async/comments/comments-sidebar/sidebar-button/overview)
* [Sidebar Button Icon](/ui-customization/features/async/comments/comments-sidebar/sidebar-button/subcomponents/icon)

## Subcomponent Name Changes

We changed the names of several subcomponents:

* `<VeltCommentsSidebarWireframe.List.Item.Annotation />` -> `<VeltCommentsSidebarWireframe.List.Item.DialogContainer />`

* `<velt-comments-sidebar-list-item-annotation-wireframe>` -> `<velt-comments-sidebar-list-item-dialog-container-wireframe>`

The `Private Badge` subcomponent was moved from being a child of `Comment Dialog` to being a child of the `Comment Dialog Composer`:

* `<VeltCommentDialogWireframe.PrivateBadge />`  -> `<VeltCommentDialogWireframe.Composer.PrivateBadge>`

* `<velt-comment-dialog-private-badge-wireframe>` -> `<velt-comment-dialog-composer-private-badge-wireframe>`

# 2. Live State Sync changes

## `getLiveStateData()` now has a config option to only subscribe to new changes

By default, the [getLiveStateData()](/realtime-collaboration/live-state-sync/setup) subscription will return all changes to the shared live data object including changes that occured when the current client was not subscribed.

If you want to only receive changes starting from when the client subscribed to `getLiveStateData()`, you can pass a config object as shown below:

```jsx
const liveStateDataConfig = {
	listenToNewChangesOnly: true  // default is false
};

let subscription = liveStateSyncElement.getLiveStateData(LIVE_STATE_DATA_KEY, liveStateDataConfig).subscribe((data) => {
	console.log('[Debug] getLiveStateData 31-05-2024-2 in html', data);
});
```

This also applies to the `useLiveStateData()` hook:

```jsx
const liveStateDataConfig = {
	listenToNewChangesOnly: true // default is false
};

const liveStateData = useLiveStateData(LIVE_STATE_DATA_KEY, liveStateDataConfig)
```

As well as the `useLiveState()` hook:

```jsx
const [counter, setCounter] = useLiveState < number > ("counter", 0, {
  syncDuration: 100,
  resetLiveState: true,
  listenToNewChangesOnly: true // default is false
});
```

## Method to listen to changes in server connection state

You can listen to changes in the server connection state with the [onServerConnectionStateChange()](/realtime-collaboration/live-state-sync/setup) method:

```jsx
const liveStateSyncElement = client.getLiveStateSyncElement();
let subscription = liveStateSyncElement.onServerConnectionStateChange().subscribe((data) => {
  console.log('server connection state change: ', data);
});
```

To unsubscribe from the subscription:

```jsx
subscription?.unsubscribe()
```

The server connection state will be an ENUM with the following states:

```jsx
export enum ServerConnectionState {
  ONLINE = 'online',
  OFFLINE = 'offline',
  PENDING_INIT = 'pendingInit',
  PENDING_DATA = 'pendingData',
}
```

You can also listen to changes in the server connection state using the `useServerConnectionStateChangeHandler()` hook as well:

```jsx
const serverConnectionState = useServerConnectionStateChangeHandler();
```

# 3. Updates to Popover Comments

## Added support for Popover comments using Single Comment Tool

There are now two patterns to add the `Comment Tool` component with [Popover comments](/async-collaboration/comments/setup/popover):

* (Already Existed) Add a `Comment Tool` next to each element you want to have `Popover` comments
* (New) Have a single `Comment Tool` and use it to pin a `Popover `comment on a particular element

### Single Comment Tool

If you want to have a single `Comment Tool` in a single location such as the navigation bar, you can do so as well.

To do this, add `data-velt-target-comment-element-id` as an attribute on each element you want to add comments on.

Now, when you click on the `Comment Tool` and click on the target element, it will attach a `Popover` comment to the element.

You will now notice that you can only add one `Comment Annotation` per element.

<Warning>
  If you don't add the `data-velt-target-comment-element-id` attribute, you will be adding multiple `Comment Annotations` on the same element.
</Warning>

```jsx
<div>
  <velt-comment-tool></velt-comment-tool>
  <div class="table">
    <div class="cell" data-velt-target-comment-element-id="cell-id-A" id="cell-id-A">

    </div>
    <div class="cell" data-velt-target-comment-element-id="cell-id-B" id="cell-id-B">

    </div>
  </div>
</div>
```


# null
Source: https://docs.velt.dev/release-notes/archive/march-14-2024



## Versions

* Latest SDK: [1.0.96](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.111](https://www.npmjs.com/package/@veltdev/types)

## Notifications Component

The [Notifications](/async-collaboration/notifications/setup) component can be used to notify your users in-app when they receive a reply to a comment or are `@mentioned` by a teammate.

<Info>
  You will need to [enable Notifications in your console](https://console.velt.dev/dashboard/config/notification) in order for Notifications component to work.
</Info>

<Frame>
  <iframe src="https://landing-page-demo-velt.vercel.app/?feature=notifications" allow="camera; microphone" scrolling="no" frameBorder="0" className="w-full" height="700px" />
</Frame>

[Open in larger window](https://landing-page-demo-velt.vercel.app/?feature=notifications)

To implement `Notifications`, simply add it to your app like this:

```jsx React / Next.js
import { VeltNotificationsTool, VeltNotificationsHistoryPanel} from '@veltdev/react';

function YourComponent() {

  return (
    <div className="toolbar">
      <VeltNotificationsTool />
      <VeltNotificationsHistoryPanel />
    </div>
  )
  
}
```

## Custom Notifications

Additionally, you can [send custom notifications](/async-collaboration/notifications/api-add-notification) to this component using our  `https://api.velt.dev/v1/notifications/add` API end point.

Sample Post Request:

```jsx
const options = {method: 'POST', body: JSON.stringify(body)};

fetch('https://api.velt.dev/v1/notifications/add', options)
  .then(response => response.json())
  .then(response => console.log(response))
  .catch(err => console.error(err));
```

Sample Body:

```jsx
{
    "data": {
        "apiKey": "YOUR_API_KEY",
        "authToken": "YOUR_AUTH_TOKEN",
        "documentId": "YOUR_DOCUMENT_ID", 
        "actionUser": {
            "email": "actionuseremail@domain", // required
            "name": "Action Username", // optional
            "photoUrl": "Action User Photo URL", // optional
            "userId": "User ID", // required
        },
        "displayHeadlineMessageTemplate": "This is main template, you can pass variables using curly brackets like this: {actionUser}, {recipientUser}, {yourCustomVariableWithStringValue}",
        "displayHeadlineMessageTemplateData": {
            "actionUser": {
                "email": "actionuseremail@domain", // required
                "name": "Action Username", // optional
                "photoUrl": "Action User Photo URL", // optional
                "userId": "User ID", // required
            },
            "recipientUser": {
                "email": "recipientuseremail@domain", // required
                "name": "Recipient Username", // optional
                "photoUrl": "Recipient User Photo URL", // optional
                "userId": "User ID", // required
            },
            "yourCustomVariableWithStringValue": "Variable will be replaced with this text"
        },
        "displayBodyMessage": "This is body message (Secondary message)",

	 // Pass list of users who should be notified, notification will be shown to all the users in all section in notification panel and notification history panel, but it will be shown in 'forYou' section also to notifyUsers.
        "notifyUsers": [
            {
                "email": "notifyuseremail@domain", // required
                "name": "Notify User Name", // optional
                "photoUrl": "Notify User Photo URL", // optional
                "userId": "User ID", // required
            }
        ]
    }
}
```

## Dark Mode on All Tool and Button Components

You can now configure Dark Mode individually on all Tool and Button Components in the Velt SDK.

Example:

```jsx
<VeltCommentTool darkMode={true} />
<VeltSidebarButton darkMode={true} />
<VeltHuddleTool darkMode={true} />
<VeltRecorderTool darkMode={true} />
<VeltUserInviteTool darkMode={true} />
<VeltArrowTool darkMode={true} />
<VeltNotificationsTool darkMode={true} />
<VeltNotificationsPanel darkMode={true} />
<VeltNotificationsHistoryPanel darkMode={true} />
```

If you want to configure Dark Mode globally, you can also use:

```jsx
client.setDarkMode(true)
```

## Bug Fixes

* Fixed bug where you could still drag comments into restricted areas
* Fixed user email related issue for admin users in invite dialog
* Fixed typed related issues in darkMode
* Added option to disable live selection with disableFeatures()


# null
Source: https://docs.velt.dev/release-notes/archive/march-5-2024



## Versions

* Latest SDK: [1.0.91](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.106](https://www.npmjs.com/package/@veltdev/types)

## Method to return the XPath of the DOM element where a Comment was added.

Introducing the [getElementRefByAnnotationId()](/async-collaboration/comments/customize-behavior/action-methods) method that returns the XPath of the DOM element where the specified comment was added.

```jsx
const commentElement = client.getCommentElement();
let elementRef = commentElement.getElementRefByAnnotationId('annotationId')
```

## Method to scroll the page to a specific Comment

Added the [scrollToCommentByAnnotationId()](/async-collaboration/comments/customize-behavior/action-methods) method that scrolls the page to the specified element where the comment was added. This functionality is contingent upon the presence of the element in the DOM.

```jsx
const commentElement = client.getCommentElement();
commentElement.scrollToCommentByAnnotationId('annotationId')
```

## Live selection style configuration

Added the ability to [customize the styling of Live Selection](/realtime-collaboration/live-selection/customize-behavior) by passing a style object to the `data-live-selection-config` attribute.

```jsx
/**
 * live selection configuration:
 * position:
 * - horizontal: 'left'
 * border:
 * - border: false
 */
<p data-live-selection-enabled="true" 
   data-live-selection-config='{ "horizontal": "left", "border": false }' 
   contenteditable="true">
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Dolorum, consequatur.
</p>
```

## Event Handler for Click Events on Presence Users

Implemented the [onPresenceUserClick](/realtime-collaboration/presence/customize-behavior) event handler for click events on Presence avatar circles.

```jsx
const onPresenceUserClickEvent = (user) => {
  console.log("Clicked presence user: ", user);
}	

<VeltPresence onPresenceUserClick={(user) => onPresenceUserClickEvent(user)} />
```

## Option to disclude current user from list of Presence Users

The [self](/realtime-collaboration/presence/customize-behavior) property can be used to include or disclude the current user from the list of Presence users. By default the current user is added.

```js
<VeltPresence self={false} />
```

API Method:

```jsx
const presenceElement = client.getPresenceElement();
presenceElement.enableSelf();
presenceElement.disableSelf();
```


# null
Source: https://docs.velt.dev/release-notes/archive/may-10-2024



## Versions

* Latest SDK: [1.0.119](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.135](https://www.npmjs.com/package/@veltdev/types)

## Updates to `useLiveState` Hook

The [useLiveState()](https://docs.velt.dev/realtime-collaboration/live-state-sync/setup) Hook was updated to include a config object as a third parameter.

Some background on the `useLiveState()` Hook:

If you are familiar with React's `useState()` hook, we have a similar hook called `useLiveState()`  that can be used to sync data realtime for specific state variables in your code.

Hook syntax:

```jsx
const [value, setValue] = useLiveState(UNIQUE_ID, INITIAL_VALUE, OPTIONS);
```

The hook takes in 3 parameters:

* `UNIQUE_ID` -> unique id in string to be synced across the screens
* `INITIAL_VALUE` -> initial value of the state
* `OPTIONS` (object)
  * `syncDuration` -> debounce duration in milliseconds to sync realtime (optional, default value 50ms)
  * `resetLiveState` -> Boolean to reset locatl state value on server side on initiatlize of hook (default: `false`)

The hook returns a setter and getter:

* `value` -> current state value (similar to useState hook)
* `setValue` -> function to be called to set next value (similar to useState hook)

Example:

```tsx
import { useLiveState } from "@veltdev/react";

export function MyReactComponent() {
  const [counter, setCounter] = useLiveState < number > ("counter", 0, {
    syncDuration: 100,
    resetLiveState: true
  });

  return (
    <div>
      <button onClick={() => setCounter((counter || 0) - 1)}>-</button>
      <span>Counter: {counter}</span>
      <button onClick={() => setCounter((counter || 0) + 1)}>+</button>
    </div>
  );
}
```

## Option to [Enable DOM Change Detection in Comment Mode](https://docs.velt.dev/async-collaboration/comments/customize-behavior/general-controls)

By default, we skip `Comment` `DOM Change Detection` when users are in `Comment Mode` to improve performance.

However, you can turn `Comment` `DOM Change Detection` back on with the `changeDetectionInCommentMode` property.

This will make `Comment's` reposition themselves if the DOM happens to change while in `Comment Mode`.

`Default: false`

```jsx
<VeltComments changeDetectionInCommentMode={true} />
```

API Methods:

```jsx
const commentElement = client.getCommentElement();
// To enable change detection when comment mode is on
commentElement.enableChangeDetectionInCommentMode();
// To disable change detection when comment mode is on
commentElement.disableChangeDetectionInCommentMode();
```

## Option to [Sort Order of Comments in Sidebar](http://localhost:3000/async-collaboration/comments-sidebar/customize-behavior)

By default, the `Comments` in the `Sidebar` are ordered in descending order of when they were last updated.

You can change this sorting order with the `sort-data` property.

There are three options for sorting:

* `asc` - to show comments in descendending order of when they were last updated
* `desc` - to show comments in ascending order of when they were last updated
* `none` - to show comments in the sequence they were added

```jsx
<VeltCommentsSidebar sortData="asc" />
```


# null
Source: https://docs.velt.dev/release-notes/archive/may-17-2024



## Versions

* Latest SDK: [1.0.129](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.146](https://www.npmjs.com/package/@veltdev/types)

## Added Variant support in customization

If you want to have multiple versions of customized components that you can swap between, you can use [variants](/ui-customization/layout#variants).

To define multiple `variants`, add multiple templates of the same component `wireframe` to the `VeltWireframe` component and give them each a `variant` name.

```jsx
<VeltWireframe>
    <VeltCommentsSidebarWireframe variant="sidebar1">
        #Your wireframe for variant sidebar1
    </VeltCommentsSidebarWireframe>

    <VeltCommentsSidebarWireframe variant="sidebar2">
        #Your wireframe for variant sidebar2
    </VeltCommentsSidebarWireframe>
</VeltWireframe>
```

To use a specific variant, define it on the `variant` props when using the Velt component in your app.

```jsx
<div>
    <VeltCommentsSidebar variant="sidebar2"/>
</div>
```

## Added Custom Dropdown Lists

You can have [custom dropdown lists](/async-collaboration/comments/customize-behavior/autocomplete) appear when certain `hotkeys` are pressed.

When you press a `hotkey` inside the `Comment Dialog` composer, it will open a dropdown list of items that you can select.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/custom-dropdown.png)

Selecting an item frop the dropdown list will create a `chip` that is placed in the comment text.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/chip.png)

## Merged useSetLocation and useAddLocation hook

The second parameter of `useSetLocation` can be set to `true` to add additional locations instead of using `useAddLocation`.

```jsx
import { useSetLocation } from "@veltdev/react";

function YourComponent() {

	// to set main location
	useSetLocation(YOUR_LOCATION_OBJECT);
	
	// to set extra location
	useSetLocation(YOUR_EXTRA_LOCATION_OBJECT, true);
}
```

## Option to submit Comment on Enter Key Press

By default, pressing `enter` will add a new line and pressing `shift` + `enter` will submit a comment.

If you want to [change this default behavior](/async-collaboration/comments/customize-behavior/general-controls) so that pressing `enter` will submit a comment, you can set the `enterKeyToSubmit` property to `true`.

```jsx
<VeltComments enterKeyToSubmit={true} />
```

```jsx
// API methods
const commentElement = client.getCommentElement();
// To enable enter key to submit a comment
commentElement.enableEnterKeyToSubmit();
// To disable enter key to submit a comment
commentElement.disableEnterKeyToSubmit();
```

## Added support to disable Shadow DOM on a few more components

There are now a few more components that can have the [Shadow DOM disabled](/ui-customization/customize-css/remove-shadow-dom).

```jsx
<VeltComments
  shadowDom={false}
  dialogShadowDom={false}
  pinShadowDom={false}
  textCommentToolShadowDom={false}
  textCommentToolbarShadowDom={false}
/>


<VeltCommentBubble shadowDom={false} />
<VeltCommentTool shadowDom={false} />
<VeltSidebarButton shadowDom={false} />
<VeltCommentsSidebar shadowDom={false} />
```


# null
Source: https://docs.velt.dev/release-notes/archive/may-23-2024



## Versions

* Latest SDK: [1.0.130](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.147](https://www.npmjs.com/package/@veltdev/types)

## Changes to Wireframe Subcomponent Names

### Comment Dialog

`VeltCommentDialogWireframe.ThreadCard.Files` -> `VeltCommentDialogWireframe.ThreadCard.Attachments`

`VeltCommentDialogWireframe.Composer.Files` -> `VeltCommentDialogWireframe.Composer.Attachments`

`VeltCommentDialogWireframe.CommentCount` -> `VeltCommentDialogWireframe.CommentIndex`

### Comments Sidebar

`VeltCommentsSidebarWireframe.PageMode` -> `VeltCommentsSidebarWireframe.PageModeComposer`

### Text Comment Toolbar

`VeltTextCommentToolbarWireframe.Seperator` -> `VeltTextCommentToolbarWireframe.Divider`

### Options Dropdown

`VeltOptionsDropdownContent.MakePrivate.On` -> `VeltOptionsDropdownContent.MakePrivate.Enable`
`VeltOptionsDropdownContent.MakePrivate.Off` -> `VeltOptionsDropdownContent.MakePrivate.Disable`

### Comments Sidebar

`VeltCommentsSidebarWireframe.PageMode` -> `VeltCommentsSidebarWireframe.PageModeComposer`


# null
Source: https://docs.velt.dev/release-notes/archive/may-24-2024



## Versions

* Latest SDK: [1.0.133](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.150](https://www.npmjs.com/package/@veltdev/types)

## Added Skeleton loader subcomponent to Comments Sidebar Wireframe

The Comments Sidebar Wireframe now has a [Skeleton loader subcomponent](/ui-customization/features/async/comments/comments-sidebar/overview) that you can modify.

## Added functionality to search by name in @mention dropdown

You can now search by name, in addition to just email, in the `@mention` dropdown

## Added option to show resolved Comments on DOM

By default, resolved Comments are not shown on the DOM.

There is now an option to [show resolved Comments on the DOM](/async-collaboration/comments/customize-behavior/visibility-controls).

```jsx
// Html
<velt-comments resolved-comments-on-dom="true"></velt-comments>

// React
<VeltComments resolvedCommentsOnDom={true} />

// API Methods
const commentElement = client.getCommentElement();
// To show resolved comments on dom
commentElement.showResolvedCommentsOnDom();
// To hide resolved comments on dom
commentElement.hideResolvedCommentsOnDom();
```

## User background color

You can now pass in a color when you identify a user using [client.identify()](/get-started/setup/authenticate)

```jsx
const user = {
    userId: uid,
    name: displayName,
    email: email,
    photoUrl: photoURL,
    color: colorCode, // Hex code value goes in the place of colorCode
    groupId: groupId // this is the organization id the user belongs to.
};

await client.identify(user);
```

## Added additional subcomponents to the Comments Dialog Wireframe

The following subcomponents were added to the Comments Dialog Wireframe:

* [Priority Dropdown](/ui-customization/features/async/comments/comment-dialog/subcomponents/priority-dropdown)
* [Status Dropdown](/ui-customization/features/async/comments/comment-dialog/subcomponents/status-dropdown)
* [Options Dropdown](/ui-customization/features/async/comments/comment-dialog/subcomponents/options-dropdown)
* [Reaction Tool](/ui-customization/features/async/comments/comment-dialog/subcomponents/reaction-tool)
* [Reaction Pin](/ui-customization/features/async/comments/comment-dialog/subcomponents/reaction-pin)
* [Reactions Panel](/ui-customization/features/async/comments/comment-dialog/subcomponents/reactions-panel)
* [Reactions Pin Tooltip](/ui-customization/features/async/comments/comment-dialog/subcomponents/reaction-pin-tooltip)
* [Autocomplete Option](/ui-customization/features/async/comments/comment-dialog/subcomponents/autocomplete-option)
* [Autocomplete Chip Tooltip](/ui-customization/features/async/comments/comment-dialog/subcomponents/autocomplete-chip-tooltip)

## Added support to set custom reactions

You can [set custom reactions](/async-collaboration/comments/customize-behavior/multimedia) by passing a map that contains information about the reactions you want to add.

The map keys should be the reaction ID, and the map value should contain an object with either an `url`, `svg`, or `emoji` field to represent the reaction icon you want to use.

```jsx
const customReactions = {
    "URL_EMOJI_ID": {
        "url": "EMOJI_URL"
    },
    "SVG_EMOJI_ID": {
        "svg": "EMOJI_SVG"
    },
    "TEXT_EMOJI_ID": {
        "emoji": "🤣" // emoji as a text
    }
};

<VeltComments customReactions={customReactions} />
```

API Methods:

```jsx
const commentElement = client.getCommentElement();

const customReactions = {
    "URL_EMOJI_ID": {
        "url": "EMOJI_URL"
    },
    "SVG_EMOJI_ID": {
        "svg": "EMOJI_SVG"
    },
    "TEXT_EMOJI_ID": {
        "emoji": "🤣" // emoji as a text
    }
}
commentElement.setCustomReactions(customReactions);
```

## Changed  type in VeltCommentDialogWireframe.Composer.ActionButton from `file` to `attachments`. Keeping legacy support for `file`.

In the [Comment Dialog Wireframe](/ui-customization/features/async/comments/comment-dialog/overview), we changed the type from `file`  to `attachments`

`<VeltCommentDialogWireframe.Composer.ActionButton type="file" />` ->  `<VeltCommentDialogWireframe.Composer.ActionButton type="attachments" />`

## Added support for customizing attachments in Comment Dialog

The `VeltCommentDialogWireframe.Composer.Attachments` and `VeltCommentDialogWireframe.ThreadCard.Attachments` subcomponents within the [Comment Dialog Wireframe](/ui-customization/features/async/comments/comment-dialog/overview) now support customization.

## Added method listen to Comment Selection changes.

The [onCommentSelectionChange()](/async-collaboration/comments/customize-behavior#event-subscription) method can be used to listen to Comment selection changes.

```jsx
const onCommentSelectionChange = (data) => {
  console.log('onCommentSelectionChange', data);
}

<VeltComments onCommentSelectionChange={(data) => onCommentSelectionChange(data)} />
```

Callback response schema:

```jsx
export class CommentSelectionChangeData {
  selected!: boolean;
  annotation!: CommentAnnotation;
}
```

API Methods:

```jsx
const commentElement = client.getCommentElement();
let subscription = commentElement.onCommentSelectionChange().subscribe((data) => {
  console.log('onCommentSelectionChange: ', data);
});
```

To unsubscribe from the subscription:

```jsx
subscription?.unsubscribe()
```

Using Hooks:

The `useCommentSelectionChangeHandler` hook can be used to subscribe to Comment selection changes.

```jsx
import React, { useEffect } from 'react';
import { useCommentSelectionChangeHandler } from '@veltdev/react';

function YourComponent() {
    const commentSelectionChange = useCommentSelectionChangeHandler();

    useEffect(() => {
        console.log('commentSelectionChange', commentSelectionChange);
    }, [commentSelectionChange]);

    return (
        <>
            Selected Comment: {commentSelectionChange.annotation.id}
        </>
    );
}
```

## Added prop to enable or disable Comment Pin Highlighter

The API Methods already existed, but we added a prop to enable or disable the [Comment Pin Highlighter](/async-collaboration/comments/customize-behavior/ui-controls)

```jsx
<velt-comments comment-pin-highlighter="false"></velt-comments>

// React
<VeltComments commentPinHighlighter={false} />

// API method was already added before, adding here just for refernece purpose
const commentElement = client.getCommentElement();
// To enable comment pin highlighter
commentElement.enableCommentPinHighlighter();
// To disable comment pin highlighter
commentElement.disableCommentPinHighlighter();
```

## Added flag to merge location in `updateLocation` cloud function

You can [update a Location's object fields](/key-concepts/locations/setup/api-update-location) while keeping the location id the same using an api call.

Set the `merge` flag to `true` if you want to merge the new `location` fields into the old `location` fields.

Set the flag to `false` if you want the new `location` object to completely replace the old `location` object.

```jsx
{
    "data": {
        "apiKey": "YOUR_API_KEY",
        "authToken": "YOUR_AUTH_TOKEN",
        "documentId": "YOUR_DOCUMENT_ID",
        "migrate": {
            "oldLocation": YOUR_OLD_LOCATION_OBJECT_HERE,
            "newLocation": YOUR_NEW_LOCATION_OBJECT_HERE
        },
        "merge" : true
    }
}
```


# null
Source: https://docs.velt.dev/release-notes/archive/may-29-2024



## Versions

* Latest SDK: [1.0.137](https://www.npmjs.com/package/@veltdev/react)
* Latest Types: [1.0.157](https://www.npmjs.com/package/@veltdev/types)

## Simplified way to modify wireframe subcomponents

You can now modify subcomponent wireframes using two patterns:

#### a. `Parentless` - Modifying the subcomponent without its parent within the `<VeltWireframe />` component. (recommended)

In this example, we modify the Header subcomponent, which is a subcomponent of the Velt Comment Dialog. In this pattern, we just put the Header subcomponent in the root of `<VeltWireframe />` and modify it. We do not need to add its parent component or any of its siblings.

Example:

```jsx
<VeltWireframe>
    <VeltCommentsSidebarWireframe.Header>
        <div>
            Custom HTML
        </div>
        <VeltCommentsSidebarWireframe.CloseButton/>
        <VeltCommentsSidebarWireframe.Search/>
        <VeltCommentsSidebarWireframe.Status/>
        <VeltCommentsSidebarWireframe.FilterButton/>
    </VeltCommentsSidebarWireframe.Header>
</VeltWireframe>
```

#### a. `With Parent` - Modifying the subcomponent within the context of its parent within the `<VeltWireframe />` component. (not recommended)

In this example, we modify the Header subcomponent, which is a subcomponent of the Velt Comment Dialog component. In this pattern, we include its parent component and siblings. This makes it easier to modify several sibling components at once.

Example:

```jsx
<VeltWireframe>
   <VeltCommentsSidebarWireframe>
        {/* Skeleton */}
        ...
        <VeltCommentsSidebarWireframe.Panel>
            {/* Header */}
            <VeltCommentsSidebarWireframe.Header>
                <div>
                    Custom HTML
                </div>
                <VeltCommentsSidebarWireframe.CloseButton/>
                <VeltCommentsSidebarWireframe.Search/>
                <VeltCommentsSidebarWireframe.Status/>
                <VeltCommentsSidebarWireframe.FilterButton/>
            </VeltCommentsSidebarWireframe.Header>
            {/* Filter */}
            ...
            {/* List */}
            <VeltCommentsSidebarWireframe.List/>
            {/* Empty Placeholder */}
            ...
            {/* Page Mode Composer */}
            ...
        <VeltCommentsSidebarWireframe.Panel/>
    </VeltCommentsSidebarWireframe>
</VeltWireframe>
```

<Note> If you modify the component in both the `Parentless` and `With Parent` pattern, the `With Parent` pattern will override the `Parentless` pattern. </Note>

## Detect if Velt SDK is initialized

[To detect if the Velt SDK is initialized](/get-started/setup/advanced), subscribe using the following method:

```jsx
let subscription = client.getVeltInitState().subscribe((veltInitState: boolean | undefined) => {
	console.log('Velt Init State:', veltInitState);
});
```

To unsubscribe from the subscription:

```jsx
subscription?.unsubscribe()
```

You can also the use `useVeltInitState()` hook:

```jsx
import { useVeltInitState } from '@veltdev/react';

function YourComponent() {
    const veltInitState = useVeltInitState();
    useEffect(() => {
        console.log('Velt Init State:', veltInitState);
        if (veltInitState) {
            // Velt state is initialized, so user can perform any action here
        }
    }, [veltInitState]);
}

```


# null
Source: https://docs.velt.dev/release-notes/version-4/changelog



<Update label="4.3.0-beta.4" description="Apr 14 2025">
  ### New Features

  * \[**Comments**]: Added a config to show expanded user groups inside the @mentions dropdown menu.
    * Added [new wireframes](/ui-customization/features/async/comments/comment-dialog/subcomponents/autocomplete-group-option) to customize the display of user groups.
    * Here are some props to control the display of user groups:
      * `expandMentionGroups`: Whether to expand the user groups and show individual users inside the groups in the @mentions dropdown menu.
      * `showMentionGroupsFirst`: Whether to show the user groups in the @mentions dropdown menu before the non-group users.
      * `showMentionGroupsOnly`: Whether to show only the user groups in the @mentions dropdown menu and not the non-group users.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltComments 
            expandMentionGroups={true} 
            showMentionGroupsFirst={false} 
            showMentionGroupsOnly={false} 
      />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-comments 
           expand-mention-groups="true" 
           show-mention-groups-first="false"
           show-mention-groups-only="true"
      ></velt-comments>
      ```
    </Tab>
  </Tabs>

  * \[**Comments Sidebar**]: Added two new default system filters and their wireframes to the sidebar:

    * `Tagged`: Filter comments by specifying the user who was tagged in the comment. ([Wireframe](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/tagged))
    * `Assigned`: Filter comments by specifying the user who was assigned to the comment. ([Wireframe](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/assigned))

    ```typescript
    class CommentSidebarFilterConfig {
        // ... existing properties ...
        tagged?: FilterTypeConfig;
        assigned?: FilterTypeConfig;
        // ... existing properties ...
    }
    ```
  * \[**Comments Sidebar**]: Added another UI pattern for fitlers options: searchable dropdown with checklist. ([Example Wireframe](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/tagged))

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltCommentsSidebar filterOptionLayout="dropdown | checkbox"/>
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-comments-sidebar filter-option-layout="dropdown | checkbox"></velt-comments-sidebar>
      ```
    </Tab>
  </Tabs>

  * \[**Comments Sidebar**]: Added a reset filter button. ([Wireframe](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/reset-button))
  * \[**Comments Sidebar**]: Added prop to disable count calculation for sidebar filter options.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltCommentsSidebar filterCount={false}/>
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-comments-sidebar filter-count="false"></velt-comments-sidebar>
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="4.3.0-beta.3" description="Apr 11 2025">
  ### Improvements

  * \[**Comments**]: Updated `getCommentAnnotations()` method to now [query](/api-reference/sdk/models/api-request-objects#commentrequestquery) and subscribe to comments data even if its not the currently set document.
  * \[**Comments**]: Improved comment dialog positioning on text comments when the text is at the bottom edge of the page.
  * \[**Notifications**]: Added support in `getNotificationsData()` for retrieving custom notifications created with `notifyAll: false`.
  * \[**REST API**]: Improved the performance of [GDPR Delete API](/api-reference/rest-apis/users/delete-all-user-data-gdpr) and made it 90%+ faster and more efficient.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue with SlateJS comments where comment was not being added when the text was selected from right to left.
</Update>

<Update label="4.3.0-beta.2" description="Apr 7 2025">
  ### Improvements

  * \[**Recorder**]: Optimized the video recording performance: 50% smaller files with 90% faster uploads!
</Update>

<Update label="4.3.0-beta.1" description="Apr 7 2025">
  ### Improvements

  * \[**Core**]: Upgraded several dependency pacakges to new versions.
</Update>

<Update label="4.2.1-beta.11" description="Apr 4 2025">
  ### Improvements

  * \[**REST API**]: Added support to get all user data for GDPR requests. [Learn more](/api-reference/rest-apis/users/get-all-user-data-gdpr).
</Update>

<Update label="4.2.1-beta.11" description="Apr 3 2025">
  ### Improvements

  * \[**Localization**]: Added additional null checks for provided localization strings.
  * \[**REST API**]: Added support for special characters (`_`, `-`) while creating custom notifications.
</Update>

<Update label="4.2.1-beta.10" description="Apr 3 2025">
  ### New Features

  * \[**Localization**]: Added support for localization for all static strings visible in the SDK Components.
    * You can get the complete list of strings that can be localized [here](https://firebasestorage.googleapis.com/v0/b/snippyly.appspot.com/o/external%2Flocalization-strings-map.json?alt=media\&token=0cdd2b52-10ed-4033-a08a-5c2b622ce7df).

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      // Provide the localization object for the languages you want to support.
      client.setTranslations({
        'en': {
          'All comments': 'All comments',
        },
        'fr': {
          'All comments': 'Tous les commentaires',
        },
        // Add more languages as needed.
      });

      // Set one of the languages you've provided the translations for.
      client.setLanguage('en');
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      // Provide the localization object for the languages you want to support.
      Velt.setTranslations({
        'en': {
          'All comments': 'All comments',
        },
        'fr': {
          'All comments': 'Tous les commentaires',
        },
        // Add more languages as needed.
      });

      // Set one of the languages you've provided the translations for.
      Velt.setLanguage('en');
      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added support for `.txt` file attachments in Comments.
</Update>

<Update label="4.2.1-beta.9" description="Apr 2 2025">
  ### New Features

  * \[**Comments, Notifications**]: Added a first-party [extension](https://www.npmjs.com/package/@veltdev/slate-velt-comments) for [SlateJS](https://www.slatejs.org/) to allow comments and notifications on text content.
</Update>

<Update label="4.2.1-beta.8" description="Apr 2 2025">
  ### Bug Fixes

  * \[**UI Customization**]: Fixed an issue where empty wireframes for repeated components were not being rendered in some scenarios.

  ### Improvements

  * \[**Comments**]: Changed default value of `pin-highlighter` to false for better initial experience.
  * \[**REST API**]: Added `deleteAll` parameter to [`/v1/organizations/usergroups/users/delete`](/api-reference/rest-apis/organization-user-groups/delete-users-from-group) remove all users from a group.
  * \[**REST API**]: Added `metadata` field on the returned comment annotation objects. It will contain documentId, organizationId, folderId, etc.
</Update>

<Update label="4.2.1-beta.7" description="Mar 31 2025">
  ### Improvements

  * \[**Recorder**]: Improved the video editor to be smoother and enabled "select and delete" feature.
  * \[**Recorder**]: Added support for audio waveform visualization in video recordings.
  * \[**Recorder**]: Reduced the size of the video recordings by 50%.
</Update>

<Update label="4.2.1-beta.6" description="Mar 28 2025">
  ### New Features

  * \[**Reactions**]: Added support for self hosting reactions data.

  ### Improvements

  * \[**Core**]: Improved signature of User Resolver (used for self hosting user PII) for better consistency with backward compatibility.
  * \[**Core**]: Extended data resolvers with an option to configure retries and optimized operation order to prioritize client-side execution. Learn more [here](/api-reference/sdk/models/data-models#resolverconfig).
  * \[**REST API**]: Added support for updating users in existing comment annotations via REST APIs. Learn more [here](/api-reference/rest-apis/comments-feature/comment-annotations/update-comment-annotations#param-update-users).
</Update>

<Update label="4.2.1-beta.5" description="Mar 26 2025">
  ### Improvements

  * \[**Core**]: Added support for automatic folder creation from the frontend when folders don't exist. New documents without existing data are now automatically added to the currently set folder.
  * \[**REST API**]: Added support for user mentions via REST APIs. Learn more [here](/api-reference/rest-apis/comments-feature/comment-annotations/add-comment-annotations).

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where deleting inline comments in multi-document scenarios wasn't always updating the UI state.
</Update>

<Update label="4.2.1-beta.4" description="Mar 21 2025">
  ### New Features

  * \[**Core**]: Added `updateLocations` method to update location(s) metadata. Previously this could only be done via REST APIs.

  ```js
  client.updateLocations({
    organizationId: 'org1', 
    documentIds: ['doc1', 'doc2'], 
    locations: [{
      id: 'location1', 
      locationName: 'MyLocation'
    }]
  })

  export interface UpdateLocationsRequest<T = unknown> {
      organizationId?: string;
      documentIds?: string[];
      locations?: UpdateLocationMetadata<T>[];
  }

  export interface UpdateLocationMetadata<T = unknown> {
      id: string;
      [key: string]: T | string;
  }
  ```

  ### Improvements

  * \[**Core**]: Improved types for `updateDocuments` method.

  ```js
  client.updateDocuments({
    organizationId: 'org1', 
    documents: [{
      documentId: 'doc1', 
      documentName: 'MyDoc'
    }]
  })

  export interface UpdateDocumentsRequest<T = unknown> {
      organizationId?: string;
      documents?: UpdateDocumentMetadata<T>[];
  }

  export interface UpdateDocumentMetadata<T = unknown> {
      documentId: string;
      [key: string]: T | string;
  }
  ```

  * \[**Core**]: Added support for location persistence by after debounced document updates.
  * \[**Core**]: Show the most updated location metadata in features like sidebar and notifications even if the features have stale data.
  * \[**Core**]: `client.getMetadata()` method now provides most updated information about organization, folders documents and locations for debugging purposes.
  * \[**Core**]: Added logs for get API methods like `fetchCommentAnnotations` if it's called without an authenticated user.
  * \[**Core**]: SDK state and location are preserved after auto-relogin when browser extensions clear indexedDb during idle periods of >1hr.
  * \[**Core**]: Enhanced `disableLogs` method with more granular control:
    * `disableLogs()`: turns off only warnings
    * `disableLogs({suppressAll: true})`: turns off all logs
    * `disableLogs({warning: false, suppressAll: true})`: Keeps the warning logs but turns off all other logs
</Update>

<Update label="4.2.1-beta.3" description="Mar 20 2025">
  ### Improvements

  * \[**Core**]: Auto-relogin user in rare scenarios where after an hour of idle time indexedDb is cleared by browser extensions.
</Update>

<Update label="4.2.1-beta.2" description="Mar 20 2025">
  ### New Features

  * \[**Comments**]: Added `svgAsImg` configuration in comments to treat SVGs as images instead layered elements. Default is `false`.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Props:**

      ```jsx
      <VeltComments svgAsImg={true} />
      ```

      **Using API:**

      ```jsx
      const commentElement = client.getCommentElement();
      commentElement.enableSvgAsImg();
      commentElement.disableSvgAsImg();
      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Using Props:**

      ```html
      <velt-comments svg-as-img="true"></velt-comments>
      ```

      **Using API:**

      ```html
      const commentElement = client.getCommentElement();
      commentElement.enableSvgAsImg();
      commentElement.disableSvgAsImg();
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Comments**]: Added `data-velt-comment-dialog-comments-priority` attribute in comment dialog if a comment priority is set. This can be used to style comments differently based on their priority.
  * \[**Notifications**]: Changed min height to 300px in Notification panel.
  * \[**Comments**]: Added ability to apply filters via API before mounting the Sidebar (in embed mode).
</Update>

<Update label="4.2.1-beta.1" description="Mar 19 2025">
  ### Improvements

  * \[**Comments**]: Now, if both inline and popover comments are used, clicking on a comment in the inline comments section will not activate comment bubble.
  * \[**Comments**]: Added additional classes to inline comments section's container divs to allow for more precise custom styling.
  * \[**Core**]: Added configuration options to aggressively suppress error messages especially on Safari related to index db and network errors.

  ```js
  client.disableLogs({suppressAll:true})
  ```

  ### Bug Fixes

  * \[**Comments**]: Added missing type for `placeholder` field in `createCustomListDataOnAnnotation` in React.
  * \[**Comments**]: Fixed minor bugs with Custom Lists wireframes.
</Update>

<Update label="4.2.0" description="Mar 18 2025">
  ### Improvements

  * \[**Notifications**]: Added minimum height to notification panel to prevent layout shift when there is just one notification.
  * \[**Notifications**]: Removed default styling from notifications tool when Wireframe is used.
  * \[**Comments**]: Added active state support in Tiptap comments mark tags.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue with `onCommentAdd` event that was not triggered once the comments component was unmounted and remounted during the session.
</Update>

<Update label="4.2.0-beta.5" description="Mar 13 2025">
  ### New Features

  * \[**Debugging**]: Added events for `unsetDocuments` and `unsetLocations`.
  * \[**Comments**]: Added type for `fetchCommentAnnotations` in `CommentElement` for React.
  * \[**Documents**]: Added `updateDocuments` method to update document(s) metadata.

  ```js
  client.updateDocuments({
    organizationId: 'org1',
    documents: [
      {
        documentId: 'document-id',
        documentName: 'document-name'
      }, 
      {
        documentId: 'document-id-2',
        documentName: 'document-name-2'
      }
    ]
  });

  export interface UpdateDocumentsRequest {
      organizationId?: string;
      documents?: {documentId: string; [key: string]: any}[];
  }
  ```

  * \[**Debugging**]: Added `folderId` property in `Velt.getMetadata()` response.
</Update>

<Update label="4.2.0-beta.4" description="Mar 12 2025">
  ### Improvements

  * \[**Notifications**]: Improved the notification tool component to prevent layout shift when notification count was updated.

  ### Bug Fixes

  * \[**Comments**]: Added missing type definition for Sidebar Filter Config in React to include status property.
</Update>

<Update label="4.2.0-beta.3" description="Mar 11 2025">
  ### Improvements

  * \[**Comments**]: Improved type names for comment resolver.

  ```ts
  // Data models
  export interface VeltDataProvider {
      comment?: CommentAnnotationDataProvider;
      user?: UserDataProvider;
  }

  export interface CommentAnnotationDataProvider {
      get: (request: GetCommentRequest) => Promise<Record<string, PartialCommentAnnotation>>;
      save: (request: SaveCommentRequest) => Promise<void>;
      delete: (request: DeleteCommentRequest) => Promise<void>;
      resolveTimeout?: number; // optional. In milliseconds. Expected timeout to get a response from your API.
  }

  export interface CommentAnnotationRequest {
      organizationId: string;
      commentAnnotationIds?: string[];
      documentIds?: string[];
      folderId?: string;
      allDocuments?: boolean;
  }

  export interface SaveCommentRequest {
      commentAnnotation: { [key: string]: PartialCommentAnnotation };
  }

  export interface PartialComment {
      commentId: string | number;
      commentHtml?: string;
      commentText?: string;
  }

  export interface PartialCommentAnnotation {
      annotationId: string;
      metadata?: VeltMetadata;
      comments: {
          [commentId: string]: PartialComment;
      };
  }
  ```
</Update>

<Update label="4.2.0-beta.2" description="Mar 7 2025">
  ### New Features

  * \[**Recorder**]: Added Video Editing feature allowing users to edit recorded videos.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Props:**

      ```jsx
      <VeltRecorderNotes videoEditor={true} />
      ```

      **Using API:**

      ```jsx
      const recorderElement = client.getRecorderElement();
      recorderElement.enableVideoEditor();
      recorderElement.disableVideoEditor();
      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Using Props:**

      ```html
      <velt-recorder-notes video-editor="true"></velt-recorder-notes>
      ```

      **Using API:**

      ```html
      const recorderElement = Velt.getRecorderElement();
      recorderElement.enableVideoEditor();
      recorderElement.disableVideoEditor();
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Recorder**]: Improved Recorder player UX.
</Update>

<Update label="4.2.0-beta.1" description="Mar 7 2025">
  ### New Features

  * \[**Comments**]: Comments Self Hosting now available. Store and retrieve comment and notification text on your own backend while using Velt's UI components.
    * Combined with existing user PII self hosting, you can now store all sensitive data on your infrastructure.
    * Support for self-hosted attachments and recordings coming soon.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      // Define your comment data provider
      const commentDataProvider = {
        get: async (request) => {
          const result = await getDataFromYourServer(request);
          // Ensure the result is in the required format
          return result;
        },
        save: async (request) => {
          const result = await saveDataOnYourServer(request);
          return result;
        },
        delete: async (request) => {
          await deleteDataFromYourServer(request.commentAnnotationId);
        },
      };

      // Set the data provider
      <VeltProvider
        apiKey="YOUR_API_KEY_HERE"
        dataProviders={{ comment: commentDataProvider }}>
        {/* Your app content */}
      </VeltProvider>
      ```

      **Request Objects:**

      ```js
      // GET Request:
      {
          organizationId: string;
          commentAnnotationIds?: string[];
          documentIds?: string[];
          folderId?: string;
          allDocuments?: boolean;
      }

      // Save Request:
      {
          commentAnnotation: { [key: string]: IStrippedCommentAnnotation };
      }

      // IStrippedCommentAnnotation:
      {
          annotationId: string;
          metadata?: any;
          comments: {
              [commentId: string]: StrippedComment;
          };
      }

      // StrippedComment:
      {
          commentId: string | number;
          commentHtml?: string;
          commentText?: string;
      }

      // Delete Request:
      {
          commentAnnotationId: string;
          metadata?: any;
      }
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      // Define your comment data provider
      const commentDataProvider = {
        get: async (request) => {
          const result = await getDataFromYourServer(request);
          // Ensure the result is in the required format
          return result;
        },
        save: async (request) => {
          const result = await saveDataOnYourServer(request);
          return result;
        },
        delete: async (request) => {
          await deleteDataFromYourServer(request.commentAnnotationId);
        },
      };

      // Set the data provider
      client.setDataProviders({
        comment: commentDataProvider,
      });
      ```

      **Request Objects:**

      ```js
      // GET Request:
      {
          organizationId: string;
          commentAnnotationIds?: string[];
          documentIds?: string[];
          folderId?: string;
          allDocuments?: boolean;
      }

      // Save Request:
      {
          commentAnnotation: { [key: string]: IStrippedCommentAnnotation };
      }

      // IStrippedCommentAnnotation:
      {
          annotationId: string;
          metadata?: any;
          comments: {
              [commentId: string]: StrippedComment;
          };
      }

      // StrippedComment:
      {
          commentId: string | number;
          commentHtml?: string;
          commentText?: string;
      }

      // Delete Request:
      {
          commentAnnotationId: string;
          metadata?: any;
      }
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="4.1.1" description="Mar 5 2025">
  ### Improvements

  * \[**Comments**]: Added mobile support for inline comment section, improving the user experience on smaller screens.
  * \[**Debugging**]: Now `client.getMetadata()` method only returns the currently set documents instead of all documents used in the current session.
</Update>

<Update label="4.1.0" description="Mar 4 2025">
  ### New Features

  * \[**Comments**]: Tiptap comments marks are now persisted automatically by default. This simplifies implementation as you no longer need to store marks yourself or modify your editor's content handling.
  * \[**Comments**]: Added Sorting Dropdown Wireframe support for inline comments section. [Learn more](/ui-customization/features/async/comments/inline-comments-section/subcomponents/panel/sorting-dropdown)

  ### Improvements

  * \[**Comments**]: Made the freestyle comment pins adapt to DOM elements with complex layouts.
  * \[**Comments**]: Improved loading skeleton in inline comments section to match comment card width and adapt responsively to smaller widths.
  * \[**Comments**]: Improved the alignment of the assign to dropdown in inline comments section when the width of the section is large.
  * \[**Comments**]: Added dark mode styling for the new sorting dropdown in inline comments section.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the comment bubble was not keeping the dialog open when a fresh annotation was added.
</Update>

<Update label="4.0.0-beta.27" description="Feb 28 2025">
  ### New Features

  * \[**Comments**]: Added a default sorting UI component in the inline comments section. This was one of the most requested features.
  * \[**Comments**]: Added config to prevent deleting the entire thread when the first comment is deleted.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      <VeltComments deleteThreadWithFirstComment={false} />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      <velt-comments delete-thread-with-first-comment="false"></velt-comments>
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Comments**]: Improved the overall UI/UX of the inline comments section based on user feedback, including: loading state, inner padding, layout shift etc.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where inline comments sorting was not working when the prop was changed dynamically.
  * \[**Comments**]: Fixed issue in single-threaded mode where delete thread label now correctly appears on the root comment regardless of sorting order.
</Update>

<Update label="4.0.0-beta.26" description="Feb 25 2025">
  ### New Features

  * \[**Core**]: Added ability to enable or disable Velt's logs/warnings in Browser Console.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      client.enableLogs();
      client.disableLogs();
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      Velt.enableLogs();
      Velt.disableLogs();
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Core**]: Added performance improvements for scenarios where the user accesses and switches between large number of documents at a high frequency.
</Update>

<Update label="4.0.0-beta.25" description="Feb 20 2025">
  ### Improvements

  * \[**Recording**]: Improved [`TranscriptionDoneEvent`](/api-reference/sdk/models/api-event-objects#transcriptiondoneevent) object.

  * \[**Comments**]: Fixed `useSetDocuments` hook to properly support `setDocuments` method in dependency array in React `useEffect`:

  ```jsx
  const { setDocuments } = useSetDocuments();
  useEffect(() => {
      setDocuments(yourDocuments);
  }, [setDocuments]);
  ```

  * \[**Comments**]: Made small UI improvements:
    * Removed 0 from Velt bubble count.
    * Fixed Velt bubble wireframe layout shift issue.

  ### Bug Fixes

  * \[**Comments**]: Fixed small UI issues:
    * Fixed an issue where draft comments were showing up when reaction was updated.
    * Fixed an issue where selecting a comment in inline comment section was also opening the Velt Comment bubble.
    * Fixed an issue where focused thread mode scroll was not working as expected.
</Update>

<Update label="4.0.0-beta.24" description="Feb 17 2025">
  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the SeenBy dropdown wasn't opening on the first click.
  * \[**Comments**]: Fixed an issue where clicking @mention button was not opening the mention dropdown. Typing @ was working as expected.
  * \[**Comments**]: Fixed a re-rendering issue when adding reactions.
</Update>

<Update label="4.0.0-beta.23" description="Feb 15 2025">
  ### New Features

  * \[**Core**]: Added `getUser` method to get the current user.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      const user = client.getUser();
      console.log(user);
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      const user = Velt.getUser();
      console.log(user);
      ```
    </Tab>
  </Tabs>

  * \[**UI Customization**]: Simplified how UI can be customized using wireframes.
    * Conditional Component Rendering: Conditionally render any component directly without needing to specify parent or sibling wireframes.
    * Conditional CSS Classes: Classes can now be conditionally applied to components based on the data in the component.
    * Wireframe CSS Classes Support: CSS Classes added to wireframes components are automatically applied to the related rendered components.

  <Tabs>
    <Tab title="React / Next.js">
      **Conditional Component Rendering:**

      ```jsx
      // Old
      <VeltCommentDialogWireframe.Header>
        <VeltIf condition="{annotation.status.id} === 'OPEN'" >
            <VeltCommentDialogWireframe.Status />
        </VeltIf>
      </VeltCommentDialogWireframe.Header>


      // New
      <VeltCommentDialogWireframe.Status veltIf="{annotation.status.id} === 'OPEN'" />
      ```

      **Conditional CSS Classes:**

      ```jsx
      <VeltCommentDialogWireframe.ThreadCard.Message veltClass="'color-yellow': {annotation.status.id} === 'in_progress'" />
      ```

      **Wireframe CSS Classes Support:**

      ```jsx
      <VeltCommentDialogWireframe.ThreadCard.Message className="color-yellow" />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Conditional Component Rendering:**

      ```html
      <!-- Old -->
      <velt-comment-dialog-header-wireframe>
        <velt-if condition="{annotation.status.id} === 'OPEN'" >
            <velt-comment-dialog-status-wireframe></velt-comment-dialog-status-wireframe>
        </velt-if>
      </velt-comment-dialog-header-wireframe>


      <!-- New -->
      <velt-comment-dialog-status-wireframe velt-if="{annotation.status.id} === 'OPEN'" >
      </velt-comment-dialog-status-wireframe>
      ```

      **Conditional CSS Classes:**

      ```jsx
      <velt-comment-dialog-thread-card-message-wireframe velt-class="'color-yellow': {annotation.status.id} === 'in_progress'" > </velt-comment-dialog-thread-card-message-wireframe>
      ```

      **Wireframe CSS Classes Support:**

      ```html
      <velt-comment-dialog-thread-card-message-wireframe class="color-yellow"> </velt-comment-dialog-thread-card-message-wireframe>
      ```
    </Tab>
  </Tabs>

  * \[**UI Customization**]: Set and render custom state data into Velt components. This data is available in all Velt Wireframes, Velt If and Velt Data components.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      // Setter
      client.setUiState({
          dashboardName: 'MRR Growth',
          anyKey: 'anyValue'
      });

      // Getter
      client.getUiState().subscribe((data) => {
          console.log('UI State: ', data);
      });

      // Use it in Velt Wireframe
      <VeltCommentDialogWireframe.Header>
          <VeltData field={dashboardName} />
      </VeltCommentDialogWireframe.Header>

      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      // Setter
      Velt.setUiState({
          dashboardName: 'MRR Growth',
          anyKey: 'anyValue'
      });

      // Getter
      Velt.getUiState().subscribe((data) => {
          console.log('UI State: ', data);
      });

      // Use it in Velt Wireframe
      <velt-wireframe style="display:none;">
          <velt-comment-dialog-wireframe.header>
              <velt-data field={dashboardName}></velt-data>
          </velt-comment-dialog-wireframe.header>
      </velt-wireframe>
      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added support for custom autocomplete search for contact list or [custom lists](/async-collaboration/comments/customize-behavior#createcustomlistdataoncomment). You should use this if you have a large dataset that you want to plug into the autocomplete dropdown, and search directly your own data source.

  <Tabs>
    <Tab title="React / Next.js">
      **Enable the feature:**

      ```jsx
      // Enable via props
      <VeltComments customAutocompleteSearch={true} />


      // Or, enable via Comment Element API
      const commentElement = client.getCommentElement();
      commentElement.enableCustomAutocompleteSearch();
      commentElement.disableCustomAutocompleteSearch();
      ```

      **Set initial list:**

      ```jsx
      // For @mentions feature
      contactElement.updateContactList(users);

      // For custom list feature
      commentElement.createCustomListDataOnComment({
          hotkey: "#",
          type: "custom",
          data: customListData,
      });
      ```

      **Handle search event:**

      ```jsx
      commentElement.on('autocompleteSearch').subscribe(async (inputData) => {
          const searchText = inputData.searchText;

          // For @mentions feature
          if (inputData.type === 'contact') {
              const filteredUsersData = await __your_api_call__(searchText);
              contactElement.updateContactList(filteredUsersData, { merge: false });
          }

          // For custom list feature
          if (inputData.type === 'custom') {
              const filteredListData = await __your_api_call__(searchText, autocompleteData);
              commentElement.createCustomListDataOnComment({
                  hotkey: "#",
                  type: "custom",
                  data: filteredListData,
              });
          }
      });

      interface AutocompleteSearchEvent {
          event: KeyboardEvent | InputEvent | Event;
          searchText: string;
          type?: 'contact' | 'custom';
          metadata?: VeltEventMetadata;
      }

      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Enable the feature:**

      ```js
      // Enable via attribute
      <velt-comments custom-autocomplete-search="true"></velt-comments>

      // Or, enable via Comment Element API
      const commentElement = Velt.getCommentElement();
      commentElement.enableCustomAutocompleteSearch();
      commentElement.disableCustomAutocompleteSearch();
      ```

      **Set initial list:**

      ```js
      // For @mentions feature
      contactElement.updateContactList(users);

      // For custom list feature
      commentElement.createCustomListDataOnComment({
          hotkey: "#",
          type: "custom",
          data: customListData,
      });
      ```

      **Handle search event:**

      ```js
      commentElement.on('autocompleteSearch').subscribe(async (inputData) => {
          const searchText = inputData.searchText;

          // For @mentions feature
          if (inputData.type === 'contact') {
              const filteredUsersData = await __your_api_call__(searchText);
              contactElement.updateContactList(filteredUsersData, { merge: false });
          }

          // For custom list feature
          if (inputData.type === 'custom') {
              const filteredListData = await __your_api_call__(searchText, autocompleteData);
              commentElement.createCustomListDataOnComment({
                  hotkey: "#",
                  type: "custom",
                  data: filteredListData,
              });
          }
      });

      interface AutocompleteSearchEvent {
          event: KeyboardEvent | InputEvent | Event;
          searchText: string;
          type?: 'contact' | 'custom';
          metadata?: VeltEventMetadata;
      }

      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added `composerClicked` event to detect when comment composer is clicked.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      const composerClickEvent = useCommentEventCallback('composerClicked');
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      const commentElement = Velt.getCommentElement();
      commentElement.on('composerClicked').subscribe((data) => {
          console.log('Composer clicked', data);
      });
      ```
    </Tab>
  </Tabs>

  ### Bug Fixes

  * \[**Comments**]: Fixed assign comment input double border CSS issue.
</Update>

<Update label="4.0.0-beta.22" description="Feb 13 2025">
  ### New Features

  * \[**Folders**]: Added an API to fetch folder metadata and subfolders by organizationId, folderId with pagination.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      // Get all folders for a specific organization
      client.fetchFolders({
        organizationId: 'org1'
      });

      // Get a specific folder's metadata with its immediate subfolders
      client.fetchFolders({
        organizationId: 'org1',
        folderId: 'folder1'
      });

      interface FetchFoldersRequest {
        organizationId?: string;
        folderId?: string;
      }

      interface FetchFoldersResponse {
        data: Record<string, FolderMetadata> | null;
        nextPageToken: string;
      }
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      // Get all folders for a specific organization
      Velt.fetchFolders({
        organizationId: 'org1'
      });

      // Get a specific folder's metadata with its immediate subfolders
      Velt.fetchFolders({
        organizationId: 'org1',
        folderId: 'folder1'
      });

      interface FetchFoldersRequest {
        organizationId?: string;
        folderId?: string;
      }

      interface FetchFoldersResponse {
        data: Record<string, FolderMetadata> | null;
        nextPageToken: string;
      }
      ```
    </Tab>
  </Tabs>

  * \[**Documents**]: Added an API to fetch document metadata by organizationId, folderId or documentIds with pagination.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      // Get all documents for a specific folder
      client.fetchDocuments({
        organizationId: 'org1', 
        folderId: 'folder1',
        allDocuments: true
      });

      // Get specific documents by IDs
      client.fetchDocuments({
        organizationId: 'org1',
        documentIds: ['doc1', 'doc2']
      });

      interface FetchDocumentsRequest {
        organizationId?: string;
        documentIds?: string[];
        folderId?: string;
        allDocuments?: boolean;
      }

      interface FetchDocumentsResponse {
        data: Record<string, DocumentMetadata> | null;
        nextPageToken: string;
      }
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      // Get all documents for a specific folder
      Velt.fetchDocuments({
        organizationId: 'org1', 
        folderId: 'folder1',
        allDocuments: true
      });

      // Get specific documents by IDs
      Velt.fetchDocuments({
      docElement.fetchDocuments({
        organizationId: 'org1',
        documentIds: ['doc1', 'doc2']
      });

      interface FetchDocumentsRequest {
        organizationId?: string;
        documentIds?: string[];
        folderId?: string;
        allDocuments?: boolean;
      }

      interface FetchDocumentsResponse {
        data: Record<string, DocumentMetadata> | null;
        nextPageToken: string;
      }
      ```
    </Tab>
  </Tabs>

  * \[**Comments**]: Added a new API to fetch comment annotations by organizationId, folderId or documentIds with pagination and filtering options. This is different from the existing subscription API which susbcribes to realtime changes to the comments data.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      // Get all annotations for a specific folder
      const commentElement = client.getCommentElement();
      commentElement.fetchCommentAnnotations({
        organizationId: 'org1', 
        folderId: 'folder1',
        allDocuments: true
      });

      // Get annotations for specific documents
      const commentElement = client.getCommentElement();
      commentElement.fetchCommentAnnotations({
        organizationId: 'org1',
        documentIds: ['doc1', 'doc2']
      });

      interface FetchCommentAnnotationsRequest {
        createdAfter?: number;
        createdBefore?: number;
        updatedAfter?: number;
        updatedBefore?: number;
        statusIds?: string[];
        order?: 'asc' | 'desc';
        pageToken?: string;
        allDocuments?: boolean;
        pageSize?: number;
        organizationId?: string;
        locationId?: string;
        documentIds?: string[];
        folderId?: string;
      }

      interface FetchCommentAnnotationsResponse {
        data: Record<string, CommentAnnotation[]> | null;
        nextPageToken: string;
      }
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      // Get all annotations for a specific folder
      const commentElement = Velt.getCommentElement();
      commentElement.fetchCommentAnnotations({
        organizationId: 'org1', 
        folderId: 'folder1',
        allDocuments: true
      });

      // Get annotations for specific documents
      const commentElement = Velt.getCommentElement();
      commentElement.fetchCommentAnnotations({
        organizationId: 'org1',
        documentIds: ['doc1', 'doc2']
      });

      interface FetchCommentAnnotationsRequest {
        createdAfter?: number;
        createdBefore?: number;
        updatedAfter?: number;
        updatedBefore?: number;
        statusIds?: string[];
        order?: 'asc' | 'desc';
        pageToken?: string;
        allDocuments?: boolean;
        pageSize?: number;
        organizationId?: string;
        locationId?: string;
        documentIds?: string[];
        folderId?: string;
      }

      interface FetchCommentAnnotationsResponse {
        data: Record<string, CommentAnnotation[]> | null;
        nextPageToken: string;
      }
      ```
    </Tab>
  </Tabs>
</Update>

<Update label="4.0.0-beta.21" description="Feb 11 2025">
  ### New Features

  * \[**Folders**]: Introducing Folders! Organize documents hierarchically with granular access control. Modeled after Google Drive's folder structure.
    * Folders can contain documents and other folders.
    * Uses same permission model as Organizations and Documents.
    * APIs:
      * **Frontend**: Subscribe to folders and query by folderId.
      * **Backend**: CRUD operations for folders and access control. [Learn More](/api-reference/rest-apis/folders/add-folder)
      * Added folder support to existing relevant APIs.

  * \[**Folders**]: API to subscribe to a particular folder and all its documents at the same time.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Hooks:**

      ```jsx
      const { setDocuments } = useSetDocuments();

      {/* Subscribe to a folder and all its documents */}
      const rootDocument = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        }
      ];

      setDocuments(
        rootDocument,
        {
          folderId: 'folder1',
          allDocuments: true
        }
      );


      {/* Subscribe to a folder and some documents */}
      const documents = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        },
        {
          id: 'document-2',
          metadata: {
            documentName: 'Document 2'
          }
        }
      ];

      setDocuments(
        documents,
        {
          folderId: 'folder1',
        }
      );
      ```

      **Using API:**

      ```jsx
      {/* Subscribe to a folder and all its documents */}
      client.setDocuments(
        rootDocument,
        {
          folderId: 'folder1',
          allDocuments: true
        }
      );

      {/* Subscribe to a folder and some documents */}
      client.setDocuments(
        documents,
        {
          folderId: 'folder1',
        }
      );
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      // Subscribe to a folder and all its documents
      const rootDocument = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        }
      ];

      Velt.setDocuments(
        rootDocument,
        {
          folderId: 'folder1',
          allDocuments: true
        }
      );

      // Subscribe to a folder and some documents

      const documents = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        },
        {
          id: 'document-2',
          metadata: {
            documentName: 'Document 2'
          }
        }
      ];

      Velt.setDocuments(
        documents,
        {
          folderId: 'folder1',
        }
      );
      ```
    </Tab>
  </Tabs>

  * \[**Locations**]: API to subscribe to a particular location within a single or multiple documents. This will only fetch a filtered set of data associated with that location.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Hooks:**

      ```jsx
      const { setDocuments } = useSetDocuments();

      const documents = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        },
        {
          id: 'document-2',
          metadata: {
            documentName: 'Document 2'
          }
        }
      ];

      setDocuments(
        documents,
        { locationId: 'location123' }
      );
      ```

      **Using API:**

      ```jsx

      client.setDocuments(
        documents,
        { locationId: 'location123' }
      );
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      const documents = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        },
        {
          id: 'document-2',
          metadata: {
            documentName: 'Document 2'
          }
        }
      ];

      client.setDocuments(
        documents,
        { locationId: 'location123' }
      );
      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Comments**]: Paste image from clipboard as attachment in the comment composer.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where standalone comment composer was not working.
  * \[**Comments**]: Fixed an issue where line breaks were not being preserved in comments.
  * \[**Comments**]: Fixed an issue where image preview was not opening in sidebar.
  * \[**Comments**]: Fixed an issue where inline comment threads had unnecessary scroll.
  * \[**Comments**]: Fixed an issue where assign user component was not being removed after editing a comment.
</Update>

<Update label="4.0.0-beta.20" description="Feb 6 2025">
  ### Improvements

  * \[**Core**]: Added support for additional regions.

  ### Bug Fixes

  * \[**Core**]: Fixed an issue where setting an avatar image URL would not update all the time.
  * \[**Comments**]: Fixed URL parsing issues when editing comments.
</Update>

<Update label="4.0.0-beta.19" description="Feb 5 2025">
  ### New Features

  * \[**Core**]: Added `useUnsetDocuments` hook to unsubscribe from all documents at once.

  ```jsx
      useUnsetDocuments();
  ```

  ### Bug Fixes

  * \[**Core**]: Fixed performance issues in @mention autocomplete feature.
  * \[**Comments**]: Fixed spacing around mentioned tags when editing comments.
</Update>

<Update label="4.0.0-beta.18" description="Feb 3 2025">
  ### Improvements

  * \[**Core**]: Added `unsetDocuments` method to unsubscribe from all documents at once.

  ```jsx
    client.unsetDocuments();
  ```

  * \[**Comments**]: Added new props to customize inline comments section:
    * `composerPosition`: Position the comment composer at 'top' or 'bottom' of the section
    * `sortBy`: Sort comments by 'createdAt' or 'lastUpdated'
    * `sortOrder`: Sort comments in 'asc' or 'desc' order

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
        <VeltInlineCommentsSection 
          composerPosition="top"
          sortBy="createdAt" 
          sortOrder="desc"
        />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```html
      <velt-inline-comments-section
          composer-position="top"
          sort-by="createdAt"
          sort-order="desc">
      </velt-inline-comments-section>
      ```
    </Tab>
  </Tabs>

  * \[**Core**]: Flushed cached data for Notifications and Comments when the User signs out.
</Update>

<Update label="4.0.0-beta.17" description="Jan 31 2025">
  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where the comments data was not updated in the frontend local cache when all comments were deleted from the document using REST API.
</Update>

<Update label="4.0.0-beta.16" description="Jan 31 2025">
  ### Improvements

  * \[**Comments**]: Removed extra margin appearing around @mention chips in comment text.
  * \[**Comments**]: Improved the alignment of the inline assign dropdown menu.
  * \[**Notifications**]: Removed the people tab by default in notification panel. You can enable it using custom props.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where delete confirmation dialog was appearing behind the sidebar.
  * \[**Comments**]: Fixed an issue where inline comments would disappear from the inline section when comment was clicked in the sidebar.
  * \[**UI**]: Fixed dark mode styling issues in autocomplete tool and copy link button.
  * \[**Notifications**]: Fixed an issue where loading skeleton was visible in notifications "For You" tab when no document was set.
</Update>

<Update label="4.0.0-beta.15" description="Jan 30 2025">
  ### Improvements

  * \[**REST API**]: Added `notificationId` parameter to [Add Notifications REST API](/api-reference/rest-apis/notifications/add-notifications) so you can have more control on the ID being set and prevent duplicate notifications.
  * \[**REST API**]: Added `notifyAll` parameter to [Add Notifications REST API](/api-reference/rest-apis/notifications/add-notifications) to target notifications to specific users. If its set to false, the notification will be sent to only the users specified in the request.

  ### Bug Fixes

  * \[**UI Customization**]: Fixed an issue where [`Velt Button`](/ui-customization/custom-action-component) was not returning context data in the callback.
  * \[**Comments**]: Fixed an issue where `getCommentAnnotationsCount` and `getCommentAnnotations` APIs were first returning empty data before returning the actual data.
</Update>

<Update label="4.0.0-beta.14" description="Jan 29 2025">
  ### Known Issues

  * \[**UI Customization**]: Velt Button component is missing context data in the callback.

  ### Improvements

  * \[**Comments**]: Added loading skeleton in inline comments section.
  * \[**Performance**]: Improved SDK performance for apps with complex UI.

  ### Bug Fixes

  * \[**Comments**]: Fixed multiple documents subscription permission issue. It should now subscribe to 30 documents at a time.
  * \[**Comments**]: Fixed an issue where `selectCommentByAnnotationId` API was not working when triggered after a comment was clicked in the sidebar.
  * \[**UI Customization**]: Fixed an issue where [`Velt Button`](/ui-customization/custom-action-component) was not triggering callback when type was set to `button`.
  * \[**UI Customization**]: Fixed an issue where [`Velt Button`](/ui-customization/custom-action-component) with type `single-select` was incorrectly toggling when clicked again.
</Update>

<Update label="4.0.0-beta.13" description="Jan 28 2025">
  ### New Features

  * \[**Live State**]: Now you can broadcast events with any arbitrary data to any document using the [new REST API](/api-reference/rest-apis/livestate/broadcast-event).

  ### Improvements

  * \[**UI Customization**]: Simplified how UI can be customized using wireframes. React support pending.

    * Conditional Component Rendering: conditionally show/hide any component directly without needing to specify parent or sibling wireframes.
    * Wireframe CSS Classes Support: classes added to wireframes are automatically applied to the rendered components.

    <Warning>
      Breaking change: This only affects you if you added CSS to wireframe component selectors.

      * Wireframe components are no longer rendered within Velt components. There were a few wireframe components that were rendered within Velt components.
      * CSS targeting wireframe component selectors needs to be updated to target Velt component selectors directly.
    </Warning>

  ```jsx {11-13}
  // Old
  <velt-comment-dialog-header-wireframe>
    <velt-if condition="{annotation.status.id} === 'OPEN'" >
        <velt-comment-dialog-status-wireframe>
        </velt-comment-dialog-status-wireframe>
    </velt-if>
  </velt-comment-dialog-header-wireframe>


  // New
  <velt-comment-dialog-status-wireframe velt-if="{annotation.status.id} === 'OPEN'" >
  </velt-comment-dialog-status-wireframe>
  ```

  * \[**Comments**]: Improved comment dialog positioning to be more stable when near screen edges, providing a smoother user experience.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where [custom lists](/async-collaboration/comments/customize-behavior#createcustomlistdataonannotation) were extending out of the comment dialog.
</Update>

<Update label="4.0.0-beta.12" description="Jan 27 2025">
  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where comments was not working for fresh documents if the advanced queries option wasn't enabled. Note this is mandatory for all versions of v4 SDK.
  * \[**Comments**]: Fixed an issue where [updateContactList](/async-collaboration/comments/customize-behavior#updatecontactlist) was not working.
  * \[**Comments**]: Fixed an issue where in inline comments, the resolve button was visible for all messages in a thread.
</Update>

<Update label="4.0.0-beta.11" description="Jan 24 2025">
  ### Features

  * \[**Security**] You can now self-host your user PII metadata.
    * Send only userId instead of full user object and a client side data provider.
    * Components will automatically fetch the user details from the provider and hydrate the user object.
    * The metadata will not be sent to Velt servers.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx

      const fetchUsersFromDB = async (userIds) => {
          // Fetch users from your DB
          const usersData = await getUsersFromYourDB(userIds);
          return formatUsersToRecord(usersData);
      };

      const formatUsersToRecord = (users) => {
          // Format users array into a Record object with userId as key and user data as value
          return users.reduce((record, user) => {
              record[user.userId] = {
                  userId: user.userId,
                  name: user.name,
                  // any other fields
              };
              return record;
          }, {});
      };

      <VeltProvider 
          apiKey='YOUR_API_KEY'
          userDataProvider={{
              getUsers: fetchUsersFromDB
          }}
      >
      </VeltProvider>

      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js

      Velt.setUserDataProvider({
          getUsers: fetchUsersFromDB
      });

      function fetchUsersFromDB(userIds) {
          // Fetch users from your DB
          const usersData = getUsersFromYourDB(userIds);
          return formatUsersToRecord(usersData);
      }

      function formatUsersToRecord(users) {
          // Format users array into a Record object with userId as key and user data as value
          return users.reduce((record, user) => {
              record[user.userId] = {
                  userId: user.userId,
                  name: user.name,
                  // any other fields
              };
              return record;
          }, {});
      }

      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Core**]: Added core performance improvements throughout the SDK.
  * \[**Recorder**]: Added new API methods to get the recorded data.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      const recorderElement = client.getRecorderElement();
      await recorderElement.getRecordingData({
          recorderIds: ['RECORDER_ID']
      });
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```js
      const recorderElement = Velt.getRecorderElement();
      await recorderElement.getRecordingData({
          recorderIds: ['RECORDER_ID']
      });
      ```
    </Tab>
  </Tabs>

  * \[**Recorder**] Added missing props to disable shadow DOM for recorder components in React SDK.

  ```jsx
  <VeltRecorderNotes shadowDom={false} />
  <VeltRecorderTool shadowDom={false} />
  <VeltRecorderPlayer shadowDom={false} />
  ```
</Update>

<Update label="4.0.0-beta.10" description="Jan 20 2025">
  ### Bug Fixes

  * \[**Recording**]: Fixed Safari recording compatibility issues across some macOS versions.
</Update>

<Update label="4.0.0-beta.9" description="Jan 13 2025">
  ### Features

  * \[**Core**]: Added support for React v19 in `sdk-react` library.

  ### Improvements

  * \[**Authentication**]: Made `organizationId` mandatory in `identify` method.
  * \[**New Accounts**]: New accounts or API keys will have advanced queries turned on by default.

  ### Bug Fixes

  * \[**Notifications**]: Fixed an issue where notifications were not working when organizationId was not set.
  * \[**REST API**]: Fixed an issue where the REST API for adding or updating organizations and documents did not allow custom fields in metadata.
</Update>

<Update label="4.0.0-beta.8" description="Jan 10 2025">
  ### Improvements

  * \[**Comments**]: Improved comments performance with optimistic local-first reads and writes.
  * \[**Notifications**]: Added `documentMetadata` object in the properties that are sent to SendGrid for emails.

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where custom metadata added to a comment using `addContext` was not sent to the first notification event (`newlyAdded`).
</Update>

<Update label="4.0.0-beta.7" description="Jan 10 2025">
  ### Features

  * \[**Comments**]: Added a `transcriptionDone` event callback when recording transcription is done.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Hooks:**

      ```jsx
      const onTranscriptionDone = useRecorderEventCallback('transcriptionDone');

      useEffect(() => {
          console.log(onTranscriptionDone);
      }, [onTranscriptionDone])

      ```

      **Using API:**

      ```jsx
      const recorderElement = client.getRecorderElement();

      recorderElement.on('transcriptionDone').subscribe((data) => {
      	console.log('transcriptionDone', data);
      });

      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Using API:**

      ```js
      const recorderElement = Velt.getRecorderElement();

      recorderElement.on('transcriptionDone').subscribe((data) => {
      	console.log('transcriptionDone', data);
      });

      ```
    </Tab>
  </Tabs>

  ### Improvements

  * \[**Comments**]: Disabled @here in the contacts dropdown by default. You can turn it on using [this](/async-collaboration/comments/customize-behavior#enableathere).

  ### Bug Fixes

  * \[**Comments**]: Removed virtual scroll from autocomplete panel and removed fixed height. This was causing weird UI issues. We are rewriting the autocomplete panel with virtual scroll.
  * \[**Comments**]: Fixed an issue where horizontal scroll was visible on sidebar in some scenarios.
  * \[**Comments**]: Fixed an issue where the `shadowDom` prop was not passed down to page mode composer in comment sidebar.
  * \[**Comments**]: Fixed an issue where `sortData` prop was not working in comments sidebar.
</Update>

<Update label="4.0.0-beta.6" description="Jan 6 2025">
  ### Bug Fixes

  * \[**Comments**]: Fixed an issue with `getCommentAnnotationsCount` API when filtering by specific document IDs in the query.
</Update>

<Update label="4.0.0-beta.5" description="Dec 24 2024">
  ### Improvements

  * \[**Security**]: Merged security patch in the React package

  ### Bug Fixes

  * \[**Recording**]: Fixed an issue where the floating recording player was visible for threaded recorder notes
  * \[**Comments**]: Fixed an issue where the sidebar button border color was using light mode colors in dark mode
</Update>

<Update label="4.0.0-beta.4" description="Dec 19 2024">
  ## New APIs

  ### 1. setDocuments

  * Set multiple documents at the same time. You can specify 30 documents at a time.

  * The first document in the list will be considered as the root document.

  * For features like comments, notifications, recorder, reactions etc. you will be able to read and write to multiple documents at the same time.

  * For features like cursors, presence, huddle, live state sync etc. it will default to the root document.

  * Sidebar will automatically show data from all the documents.

  * Params:
    * `documents`: [Document\[\]](/api-reference/sdk/models/data-models#document)
    * `options?`: [SetDocumentsRequestOptions](/api-reference/sdk/models/data-models#setdocumentsrequestoptions)

  <Tabs>
    <Tab title="React / Next.js">
      **Using Hooks:**

      ```jsx
      const documents = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        },
        {
          id: 'document-2',
          metadata: {
            documentName: 'Document 2'
          }
        }
      ];
      const { setDocuments } = useSetDocuments();
      setDocuments(documents);
      ```

      **Using API:**

      ```jsx
      const documents = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        },
        {
          id: 'document-2',
          metadata: {
            documentName: 'Document 2'
          }
        }
      ];
      client.setDocuments(documents);
      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Using API:**

      ```js
      const documents = [
        {
          id: 'document-1',
          metadata: {
            documentName: 'Document 1'
          }
        },
        {
          id: 'document-2',
          metadata: {
            documentName: 'Document 2'
          }
        }
      ];
      Velt.setDocuments(documents);
      ```
    </Tab>
  </Tabs>

  ### 2. getCommentAnnotations

  * Get all the comment annotations for all the specified documents.
  * You can specify 30 documents at a time.
  * If you don't specify any query, it will return data from the documents specified in the `setDocuments` method.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Hooks:**

      ```jsx
      const { data } = useGetCommentAnnotations(query);
      // initial data value will be null while the request is in progress
      ```

      **Using API:**

      ```jsx
      const commentElement = client.getCommentElement();
      commentElement.getCommentAnnotations(query).subscribe((response) => {
        console.log(response.data);
        // initial data value will be null while the request is in progress
      });
      ```

      ```jsx
      CommentRequestQuery {
        documentIds!: string[],
        locationIds!: string[],
        statusIds!: string[]
      };

      GetCommentAnnotationsResponse {
        data: Record<string, CommentAnnotation[]> | null; // Key: documentId, Value: CommentAnnotation[]
      };
      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Using API:**

      ```js
      const commentElement = Velt.getCommentElement();
      commentElement.getCommentAnnotations(query).subscribe((response) => {
        console.log(response.data);
        // initial data value will be null while the request is in progress
      });
      ```

      ```js
      CommentRequestQuery {
        documentIds!: string[],
        locationIds!: string[],
        statusIds!: string[]
      };

      GetCommentAnnotationsResponse {
        data: Record<string, CommentAnnotation[]>; // Key: documentId, Value: CommentAnnotation[]
      };
      ```
    </Tab>
  </Tabs>

  ### 3. getCommentAnnotationsCount

  * Get the total and unread comment annotations count of all the comment annotations for all the specified documents.
  * You can specify 30 documents at a time.
  * If you don't specify any query, it will return data from the documents specified in the `setDocuments` method.

  <Tabs>
    <Tab title="React / Next.js">
      **Using Hooks:**

      ```jsx
      const { data } = useCommentAnnotationsCount(query);
      // initial data value will be null while the request is in progress
      ```

      **Using API:**

      ```jsx
      const commentElement = client.getCommentElement();
      commentElement.getCommentAnnotationsCount(query).subscribe((response) => {
        console.log(response.data);
        // initial data value will be null while the request is in progress
      });
      ```

      ```jsx
      CommentRequestQuery {
        documentIds!: string[],
        locationIds!: string[],
        statusIds!: string[]
      };

      GetCommentAnnotationsCountResponse {
        data: Record<string, CommentAnnotationsCount> | null; // Key: documentId, Value: CommentAnnotationsCount
      };

      CommentAnnotationsCount {
        unread: number,
        total: number
      }

      ```
    </Tab>

    <Tab title="Other Frameworks">
      **Using API:**

      ```js
      const commentElement = Velt.getCommentElement();
      commentElement.getCommentAnnotationsCount(query).subscribe((response) => {
        console.log(response.data);
      });
      ```

      ```js
      CommentRequestQuery {
        documentIds!: string[],
        locationIds!: string[],
        statusIds!: string[]
      };

      GetCommentAnnotationsCountResponse {
        data: Record<string, CommentAnnotationsCount>; // Key: documentId, Value: CommentAnnotationsCount
      };

      CommentAnnotationsCount {
        unread: number,
        total: number
      }

      ```
    </Tab>
  </Tabs>

  ### 4. Read/Write data from multiple documents on the same page

  * If you want to display data (eg: comments) from multiple documents on the same page, you can add `data-velt-document-id` attribute to the container that contains the `document`.
  * It will be used to identify which part of the DOM belongs to which document.

  ```html
  <div class="document-container" data-velt-document-id="document-1">
    ...
  </div>

  <div class="document-container" data-velt-document-id="document-2">
    ...
  </div>

  <div class="document-container" data-velt-document-id="document-3">
    ...
  </div>
  ```

  ## Other updates

  ### New Features

  * \[**Comments**]: Added support for Status Filter in Comments Sidebar's main filter menu:
    * By default, the status filter is disabled in the main filter menu.
    * Currently, it doesn't support grouping.
    * Added Wireframe support for this. [Learn more](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/status).
    * If you were using wireframes before, you will add this to your wireframes.

  <Tabs>
    <Tab title="React / Next.js">
      ```jsx
      const filterConfig = {
        status: {
          enable: true,
          name: "Status",
          multiSelection: true,
        }
      };

      <VeltCommentsSidebar filterConfig={filterConfig} />
      ```
    </Tab>

    <Tab title="Other Frameworks">
      ```jsx
      const filterConfig = {
        status: {
          enable: true,
          name: "Status",
          multiSelection: true,
        }
      };

      const commentsSidebar = document.querySelector(`velt-comments-sidebar`);
      commentsSidebar?.setAttribute("filter-config",JSON.stringify(filterConfig));
      ```
    </Tab>
  </Tabs>

  ### Bug Fixes

  * \[**Comments**]: Fixed an issue where empty state visibility was not visible when filter is applied and grouping was disabled.
  * \[**Comments**]: Fixed an issue where users could click on the comment in the sidebar and navigate to comments when they shouldn't.
</Update>


# Upgrade Guide
Source: https://docs.velt.dev/release-notes/version-4/upgrade-guide



## Overview

* This is currently in `beta`.
* **Key improvements in this series will focus on**:
  * Advanced data querying capabilities
  * Enhanced security features
  * Powerful customization capabilities that will require significantly less code than before
* We are adding support for multiple document operations:
  * **Multi-Document Handling**:
    * Work with multiple Velt documents on a single page simultaneously
    * Subscribe, view, and perform CRUD operations across multiple documents in real-time
    * Comments from multiple documents are now automatically rendered in the Sidebar
  * **Enhanced Querying**:
    * Query comments, comment counts, unread counts across multiple documents with a simpler API
    * Filter by document IDs, location IDs, and status IDs

## Breaking Changes

* \[**Authentication**] Made `organizationId` mandatory in `identify` method.
* \[**UI Customization**] If you applied CSS to wireframe component selectors, you need to update them to target Velt component selectors directly.
  * Wireframe components are no longer rendered within Velt components. In previous versions, there were a few wireframe components that were rendered within Velt components.
  * If you are an existing customer who is impacted, reach out and we will provide you the updated CSS for your implementation.
* \[**REST APIs**]: v1 GET APIs will not work once you deploy to this series. Use v2 GET APIs instead. All the other REST APIs should work as is.

## How to Upgrade

Use these steps with your test API key first. Once you are ready, follow the same steps on all your production API keys as well.

1. Ensure you are using `organizationId` vs `groupId` in the `identify` method. If you have existing data with groupId, then first migrate your data using [this guide](#migrating-from-groupid-to-organizationid).
2. Enable 'Advanced Queries and Filters' in the Velt Console [here](https://console.velt.dev/dashboard/config/appconfig). It will take 15-30 mins for this to be enabled in your API key depending on the size of your data.
3. Once, the feature is enabled, deploy the latest version of the Velt SDK to your product. Do this within couple of hours of enabling the feature.

### Migrating from `groupId` to `organizationId`

Use these steps with your test API key first. Once you are ready, follow the same steps on all your production API keys as well.

1. Change the `groupId` field to `organizationId` in the `identify` method. Once you do this, you will stop seeing the existing data locally. This is expected.
2. Goto the [data page in Velt Console](https://console.velt.dev/dashboard/data/organization). You will see an option to migrate data to `organizationId` structure.
3. Click on the `Migrate` button. The migration will take 15-30 mins to complete depending on the size of your data.
4. Once, the migration is done, you will start seeing the data. Your original `groupId` data will be retained as backup.
5. Deploy your changes to production. Note: Deploy soon after the migration completes to minimize any data inconsistency.


# Generating Auth Tokens
Source: https://docs.velt.dev/security/auth-tokens



<Steps>
  <Step title="Go to the Velt Console">
    Open the Velt Console at [console.velt.dev](https://console.velt.dev)
  </Step>

  <Step title="Click Generate Token button">
    Under the Auth Token section, click on Generate Token button:

    ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/auth-token-generate.png)
  </Step>

  <Step title="Copy the generated token">
    ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/auth-token.png)
  </Step>
</Steps>


# null
Source: https://docs.velt.dev/security/content-security-policy



## Whitelisting Rules for Content Security Policy (CSP)

If you have a Content Security Policy (CSP) enabled in your app configuration, ensure that the following URLs are whitelisted:

### script-src

* `*.velt.dev`
* `*.api.velt.dev`
* `*.firebaseio.com`
* `*.googleapis.com`
* `wss://*.firebaseio.com`

### connect-src

* `*.velt.dev`
* `*.api.velt.dev`
* `*.firebaseio.com`
* `*.googleapis.com`
* `wss://*.firebaseio.com`

### img-src

* `*.googleapis.com`

### media-src

* `storage.googleapis.com`
* `firebasestorage.googleapis.com`


# JWT Tokens
Source: https://docs.velt.dev/security/jwt-tokens

Generate JWT Tokens for additional security

## Overview

`JWT Tokens` is an optional feature to add additional authentication security to our `client.identify()` method to prevent user impersonation.

<Steps>
  <Step title="Enable JWT Tokens in your console">
    Go to [https://console.velt.dev](https://console.velt.dev/dashboard/config/general) and enable the toggle for `Require JWT Token`. The toggle is listed at the very bottom of the page.

    <Warning>JWT Tokens won't work unless you enable it in your console.</Warning>
  </Step>

  <Step title="Create a server endpoint for generating and sending JWT Tokens to the client">
    Create a server endpoint that will be used to generate and send a `JWT Token` to the client.

    Example server endpoint code:

    ```jsx
    app.get('/generate-velt-jwt-token', async (req,res) => {
        const veltAuthToken = await generateVeltAuthToken(req.body.userId)
        res.json(veltAuthToken)
    })
    ```
  </Step>

  <Step title="Generate a JWT Token using Velt's REST API">
    In your server endpoint, call our `https://api.velt.dev/v1/auth/token/get` endpoint to generate a `JWT Token`.

    Example server code:

    ```jsx
    async function generateVeltAuthToken(userId: string) {
      const url = "https://api.velt.dev/v1/auth/token/get";
      const body = {
        data: {
          userId: userId, // Unique user id of your user
          apiKey: "YOUR_VELT_API_KEY",
          authToken: "YOUR_CLIENT_AUTH_TOKEN", // Get this token from console.velt.dev
          userProperties: {
            isAdmin: true, // Set to true if you want to set user as admin
            organizationId: "YOUR_ORGANIZATION_ID", // If organizationId is provided here then we will validate it with the organizationId used in the identify call
            email: "USER_EMAIL", // If email is provided here then we will validate it with the email used in the identify call
          }
        },
      };

      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(body),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        return data?.result?.data?.token;
      } catch (error) {
        console.error("Error:", error);
      }
    }
    ```

    ### Request Body:

    <Info>
      To get your Auth Token that is required for your request body, [read here](/security/auth-tokens).
    </Info>

    | Field                           | Required | Description                                                                                                                                                                                                |
    | ------------------------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | `apiKey`                        | Yes      | Velt API Key                                                                                                                                                                                               |
    | `authToken  `                   | Yes      | Auth Token from the Velt console                                                                                                                                                                           |
    | `userId `                       | Yes      | Unique user id of the user                                                                                                                                                                                 |
    | `userProperties.isAdmin`        | No       | Set to `true` if you want to set user as `admin`. This is the only way to set a user as an `admin` User. Please do not set this property in the `identify` call as this will unset the `isAdmin` property. |
    | `userProperties.organizationId` | No       | If `organizationId` is provided, it will be validated with the `organizationId` used in the identify call. Recommended if you are setting organizationId.                                                  |
    | `userProperties.email`          | No       | If `email` is provided, it will be validated with the `email` used in the identify call. Recommended if you are setting email.                                                                             |

    ```jsx
    {
      "data": {
        "apiKey": "YOUR_API_KEY", //Velt API Key
        "authToken": "YOUR_AUTH_TOKEN", // Auth Token from the Velt console
        "userId": "yourUserId", // unique user id of the user you are generating a JWT Token for
        "userProperties": {
            isAdmin: true, // Set to true if you want to set user as admin
            organizationId: "YOUR_ORGANIZATION_ID", // If organizationId is provided here then we will validate it with the organizationId used in the identify call
            email: "USER_EMAIL", // If email is provided here then we will validate it with the email used in the identify call
        }
      }
    }
    ```

    ### Success Response:

    ```jsx
    {
      "result": {
        "status": "success",
        "message": "Token generated successfully.",
        "data": {
          "token": "YOUR_JWT_TOKEN"
        }
      }
    }
    ```

    ### Failure Response:

    ```jsx
    {
      "error": {
        "message": "Auth token not found.",
        "status": "INVALID_ARGUMENT"
      }
    }

    ```

    <Warning>Make sure to generate the JWT Token from your server, not your client. Otherwise, your JWT Token will not be secure.</Warning>
  </Step>

  <Step title="Call your server endpoint from your client to pass your JWT Token to your client">
    Call your server endpoint from your client to pass your `JWT Token` to your client.

    ```jsx
      const yourJWTToken = await callToYourServerToGetJWTToken(userId)
    ```
  </Step>

  <Step title="Pass the JWT Token to client.identify()">
    Once the JWT Token is generated, you can pass it into the `client.identify()` method. The `client.identify()` method has an optional second parameter that takes in a configuration object that includes the `JWT Token` as a field.

    ```jsx
      const yourJWTToken = await callToYourServerToGetJWTToken(userId)
      client.identify(user, {
        authToken: yourJWTToken,
      });
    ```
  </Step>

  <Step title="Your All Done!">
    You are all done! Now you have added an additional level of security with `JWT Tokens`.
  </Step>
</Steps>

<RequestExample>
  ```jsx Server Code
  import express from 'express';

  const app = express();
  const PORT = 8080;

  async function generateVeltAuthToken(userId) {
    const url = "https://api.velt.dev/v1/auth/token/get";
    const body = {
      data: {
        userId: userId, // Unique user id of your user
        apiKey: "YOUR_VELT_API_KEY",
        authToken: "YOUR_CLIENT_AUTH_TOKEN", // Get this token from console.velt.dev
        userProperties: {
          isAdmin: true, // Set to true if you want to set user as admin
          organizationId: "YOUR_ORGANIZATION_ID", // If organizationId is provided here then we will validate it with the organizationId used in the identify call
          email: "USER_EMAIL", // If email is provided here then we will validate it with the email used in the identify call
        }
      },
    };

    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data?.result?.data?.token;
    } catch (error) {
      console.error("Error:", error);
    }
  }

  app.get('/generate-velt-jwt-token', async (req,res) => {
      const veltAuthToken = await generateVeltAuthToken(req.body.userId)
      res.json(veltAuthToken)
  })

  app.listen(PORT, () => {
    console.log(`JWT Server listening on port ${PORT}`);
  });

  ```

  ```jsx Client Code
  import { useVeltClient } from "@veltdev/react";
  import { useEffect, useState } from "react";

  export default function YourAuthComponent() {
    let [user, setUser] = useState(null);

    const userService = () => {
      return {
        uid: "user1",
        displayName: "User 1",
        email: "user1@velt.dev",
        photoURL: "https://i.pravatar.cc/301",
        organizationId: "YOUR_ORGANIZATION_ID"
      };
    };

    // Fetch user data from user service
    let yourAuthenticatedUser = userService();

    // Get the Velt Client
    const { client } = useVeltClient();

    // Call to your Server to get JWT Token
    async function callToYourServerToGetJWTToken(userId){

      let baseUrl = "your-server.com"

      let result = await fetch(`${baseUrl}/generate-velt-jwt-token`, {
        method: "POST", 
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          userId:userId
        }),
      })

      let data = await result.json();
      return data;

    }


    useEffect(() => {
      const initVelt = async () => {
        if (client && yourAuthenticatedUser) {
          const { uid, displayName, email, photoURL } = yourAuthenticatedUser;

          // Create the Velt user object
          const user = {
            userId: uid,
            name: displayName,
            email: email,
            photoUrl: photoURL,
            organizationId: "YOUR_ORGANIZATION_ID"
          };


          //Get JWT Token from your server
          const yourJWTToken = await callToYourServerToGetJWTToken(user.userId)

          // Identify the user with the Velt client, with JWT Token
          await client.identify(user, {
              authToken: yourJWTToken,
          });

          setUser(user);
        }
      };
      initVelt().catch(console.error);
    }, [client]);

    return <div>User: {user?.userId}</div>;
  }


  ```
</RequestExample>


# Proxy Server
Source: https://docs.velt.dev/security/proxy-server



If you want to use a Proxy Server, such as `nginx`, to redirect to the Velt SDK instead of using our servers, you can pass a `proxyDomain` to the configuration prop of the `VeltProvider`.

Example:

```jsx
<VeltProvider 
  config={{
    proxyDomain: 'https://cdn.velt.dev'
  }}
></VeltProvider>
```

## Proxy Path

We will append `/lib/sdk@[VERSION_NUMBER]/velt.js` to the end of your `proxyDomain` to use as the full proxy path. Make sure that you host the proxy in the correct path.

Example: if you pass `https://cdn.velt.dev` as the `proxyDomain`, we will use `https://cdn.velt.dev/lib/sdk@[VERSION_NUMBER]/velt.js` as the full proxy path.


# Supported Regions
Source: https://docs.velt.dev/security/supported-regions



Persistent features like Comments, Notifications, Recording, etc. are available in the following regions:

## North America

| Region name             | Region description |
| ----------------------- | ------------------ |
| us-west1                | Oregon             |
| us-west2                | Los Angeles        |
| us-west3                | Salt Lake City     |
| us-west4                | Las Vegas          |
| us-central1             | Iowa               |
| northamerica-northeast1 | Montréal           |
| northamerica-northeast2 | Toronto            |
| northamerica-south1     | Queretaro          |
| us-east1                | South Carolina     |
| us-east4                | Northern Virginia  |
| us-east5                | Columbus           |
| us-south1               | Dallas             |

## South America

| Region name        | Region description |
| ------------------ | ------------------ |
| southamerica-west1 | Santiago           |
| southamerica-east1 | São Paulo          |

## Europe

| Region name       | Region description |
| ----------------- | ------------------ |
| europe-west2      | London             |
| europe-west1      | Belgium            |
| europe-west4      | Netherlands        |
| europe-west8      | Milan              |
| europe-southwest1 | Madrid             |
| europe-west9      | Paris              |
| europe-west12     | Turin              |
| europe-west10     | Berlin             |
| europe-west3      | Frankfurt          |
| europe-north1     | Finland            |
| europe-north2     | Stockholm          |
| europe-central2   | Warsaw             |
| europe-west6      | Zürich             |

## Middle East

| Region name | Region description |
| ----------- | ------------------ |
| me-central1 | Doha               |
| me-central2 | Dammam             |
| me-west1    | Tel Aviv           |

## Asia

| Region name     | Region description |
| --------------- | ------------------ |
| asia-south1     | Mumbai             |
| asia-south2     | Delhi              |
| asia-southeast1 | Singapore          |
| asia-southeast2 | Jakarta            |
| asia-east2      | Hong Kong          |
| asia-east1      | Taiwan             |
| asia-northeast1 | Tokyo              |
| asia-northeast2 | Osaka              |
| asia-northeast3 | Seoul              |

## Australia

| Region name          | Region description |
| -------------------- | ------------------ |
| australia-southeast1 | Sydney             |
| australia-southeast2 | Melbourne          |

## Africa

| Region name   | Region description |
| ------------- | ------------------ |
| africa-south1 | Johannesburg       |

## Multi-Regions

| Multi-region name | Multi-region description | Read-Write regions                                            | Witness region            |
| ----------------- | ------------------------ | ------------------------------------------------------------- | ------------------------- |
| eur3              | Europe                   | europe-west1 (Belgium), europe-west4 (Netherlands)            | europe-north1 (Finland)   |
| nam5              | United States            | us-central1 (Iowa), us-central2 (Oklahoma—private GCP region) | us-east1 (South Carolina) |


# Comments
Source: https://docs.velt.dev/self-host-data/comments

Self-host your comments data while using Velt's components. Keep comment storage on your infrastructure with minimal metadata stored on Velt servers.

<Warning>
  * This feature is currently in beta and is subject to change.
  * This is currently only compatible with `setDocuments` method.
  * Ensure that the data providers are set prior to calling `identify` method.
</Warning>

# Overview

Velt supports self-hosting your comments and related data:

* Comments can be stored on your own infrastructure, with only necessary identifiers on Velt servers.
* Velt Components automatically hydrate comment data in the frontend by fetching from your configured data provider.
* This gives you full control over comment data while maintaining all Velt collaboration features.
* This automatically also ensures that the in-app notifications content is not stored on Velt servers. The content is generated using the comments data in the frontend.

# How does it work?

* When comments are created, updated, deleted or requested, the SDK uses your configured [`CommentAnnotationDataProvider`](/api-reference/sdk/models/data-models#commentannotationdataprovider) to handle storage and retrieval
* The data provider implements `get`, `save`, and `delete` methods to interact with your database
* Velt handles the data mapping and realtime synchronization while delegating persistence of actual content to your infrastructure
* The data provider works at the Comment Annotation (Thread) level not at the individual Comment (Message) level.
* For write requests (save, delete), the operation is first performed on your database and only if we get a success response, the SDK will perform the operation on the Velt server. If the operation fails on your database, the SDK will not perform the operation on the Velt server.
* You can configure retries, timeouts, etc. for the data provider.

Here are the methods that you need to implement on the data provider:

## get

Method to fetch comments from your database. On error we will retry.

* Param: [`GetCommentRequest`](/api-reference/sdk/models/api-request-objects#getcommentrequest)
* Return: [`Promise<ResolverResponse<Record<string, PartialCommentAnnotation>>>`](/api-reference/sdk/models/data-models#resolverresponse)

## save

Save comments to your database. Return a success or error response. On error we will retry.

* Param: [`SaveCommentRequest`](/api-reference/sdk/models/api-request-objects#savecommentrequest)
  * Note in the `SaveCommentRequest` object, you will receive [the event name](/api-reference/sdk/models/data-models#resolveractions) that triggered the save.
* Return: [`Promise<ResolverResponse<T>>`](/api-reference/sdk/models/data-models#resolverresponse)

## delete

Delete comments from your database. Return a success or error response. On error we will retry.

* Param: [`DeleteCommentRequest`](/api-reference/sdk/models/api-request-objects#deletecommentrequest)
* Return: [`Promise<ResolverResponse<T>>`](/api-reference/sdk/models/data-models#resolverresponse)

## config

Configuration for the comment data provider.

* Type: [`ResolverConfig`](/api-reference/sdk/models/data-models#resolverconfig)

# Example Implementation

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const fetchCommentsFromDB = async (request: GetCommentRequest) => {
        // Fetch comment annotations from your DB
        const result = await __getCommentsFromYourDB__(request)
          .then((response) => {
            return { data: response, success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
          });

        return result;
    };

    const saveCommentsToDB = async (request: SaveCommentRequest) => {
        const result = await __saveCommentsToYourDB__(request)
          .then((response) => {
            return { success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
        });
        return result;
    };

    const deleteCommentsFromDB = async (request: DeleteCommentRequest) => {
        const result = await __deleteCommentsFromYourDB__(request)
          .then((response) => {
            return { success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
        });
        return result;
    };

    const commentResolverConfig: ResolverConfig = {
        resolveTimeout: 2000,
        saveRetryConfig: {
            retryCount: 3,
            retryDelay: 2000
        },
        deleteRetryConfig: {
            retryCount: 3,
            retryDelay: 2000
        }
    };


    const commentAnnotationDataProvider: CommentAnnotationDataProvider = {
        get: fetchCommentsFromDB,
        save: saveCommentsToDB,
        delete: deleteCommentsFromDB,
        config: commentResolverConfig
    };

    <VeltProvider 
        apiKey='YOUR_API_KEY'
        dataProviders={{
            comment: commentAnnotationDataProvider
        }}
    >
    </VeltProvider>

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    const fetchCommentsFromDB = async (request) => {
        // Fetch comment annotations from your DB
        const result = await __getCommentsFromYourDB__(request)
          .then((response) => {
            return { data: response, success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
          });

        return result;
    };

    const saveCommentsToDB = async (request) => {
        const result = await __saveCommentsToYourDB__(request)
          .then((response) => {
            return { success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
        });
        return result;
    };

    const deleteCommentsFromDB = async (request) => {
        const result = await __deleteCommentsFromYourDB__(request)
          .then((response) => {
            return { success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
        });
        return result;
    };

    const commentResolverConfig = {
        resolveTimeout: 2000,
        saveRetryConfig: {
            retryCount: 3,
            retryDelay: 2000
        },
        deleteRetryConfig: {
            retryCount: 3,
            retryDelay: 2000
        }
    };


    const commentAnnotationDataProvider = {
        get: fetchCommentsFromDB,
        save: saveCommentsToDB,
        delete: deleteCommentsFromDB,
        config: commentResolverConfig
    };

    Velt.setDataProviders({
        comment: commentAnnotationDataProvider
    });
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/self-host-data/overview

Self-host the user generated content on your infrastructure while storing only minimal identifiers on Velt servers.

# Self-Hosting Data

Velt allows you to self-host sensitive content while still using most of the collaboration features and components:

* **Comments**: Store comment content on your infrastructure with only identifiers on Velt servers
* **In-app notifications**: In-app notification content is automatically handled when you use comments and reactions self-hosted solutions
* **Reactions**: Store reaction data on your systems with only identifiers on Velt servers
* **Users**: Store sensitive user PII on your servers, with only identifiers on Velt servers

For each data type, you configure a data provider that implements specific methods (get, save, delete) to interact with your database. Velt Components automatically hydrate data in the frontend by fetching from your configured providers.

This approach gives you complete control and ownership of your data while maintaining all Velt collaboration features and real-time functionality.

# Supported Infrastructure

You can self-host your data on any infrastructure that you want as long as you can receive and return the data in the provided format. Here are some examples:

* AWS
* GCP
* Azure
* Any Custom Infrastructure


# Reactions
Source: https://docs.velt.dev/self-host-data/reactions

Self-host your reactions data while using Velt's components. Keep reaction storage on your infrastructure with minimal metadata stored on Velt servers.

<Warning>
  * This feature is currently in beta and is subject to change.
  * This is currently only compatible with `setDocuments` method.
  * Ensure that the data providers are set prior to calling `identify` method.
</Warning>

# Overview

Velt supports self-hosting your reactions and related data:

* Reactions can be stored on your own infrastructure, with only necessary identifiers on Velt servers.
* Velt Components automatically hydrate reaction data in the frontend by fetching from your configured data provider.
* This gives you full control over reaction data while maintaining all Velt collaboration features.
* This automatically also ensures that the in-app notifications content related to reactions is not stored on Velt servers. The content is generated using the reactions data in the frontend.

# How does it work?

* When reactions are created, updated, deleted or requested, the SDK uses your configured [`ReactionAnnotationDataProvider`](/api-reference/sdk/models/data-models#reactionannotationdataprovider) to handle storage and retrieval
* The data provider implements `get`, `save`, and `delete` methods to interact with your database
* Velt handles the data mapping and realtime synchronization while delegating persistence of actual content to your infrastructure
* For write requests (save, delete), the operation is first performed on your database and only if we get a success response, the SDK will perform the operation on the Velt server. If the operation fails on your database, the SDK will not perform the operation on the Velt server.
* You can configure retries, timeouts, etc. for the data provider.

Here are the methods that you need to implement on the data provider:

## get

Method to fetch reactions from your database. On error we will retry.

* Param: [`GetReactionRequest`](/api-reference/sdk/models/api-request-objects#getreactionrequest)
* Return: [`Promise<ResolverResponse<Record<string, PartialReactionAnnotation>>>`](/api-reference/sdk/models/data-models#resolverresponse)

## save

Save reactions to your database. Return a success or error response. On error we will retry.

* Param: [`SaveReactionRequest`](/api-reference/sdk/models/api-request-objects#savereactionrequest)
* Return: [`Promise<ResolverResponse<T>>`](/api-reference/sdk/models/data-models#resolverresponse)

## delete

Delete reactions from your database. Return a success or error response. On error we will retry.

* Param: [`DeleteReactionRequest`](/api-reference/sdk/models/api-request-objects#deletereactionrequest)
* Return: [`Promise<ResolverResponse<T>>`](/api-reference/sdk/models/data-models#resolverresponse)

## config

Configuration for the reaction data provider.

* Type: [`ResolverConfig`](/api-reference/sdk/models/data-models#resolverconfig)

# Example Implementation

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    const fetchReactionsFromDB = async (request: GetReactionRequest) => {
        // Fetch reaction annotations from your DB
        const result = await __getReactionsFromYourDB__(request)
          .then((response) => {
            return { data: response, success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
          });

        return result;
    };

    const saveReactionsToDB = async (request: SaveReactionRequest) => {
        const result = await __saveReactionsToYourDB__(request)
          .then((response) => {
            return { success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
        });
        return result;
    };

    const deleteReactionsFromDB = async (request: DeleteReactionRequest) => {
        const result = await __deleteReactionsFromYourDB__(request)
          .then((response) => {
            return { success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
        });
        return result;
    };

    const reactionResolverConfig: ResolverConfig = {
        resolveTimeout: 2000,
        saveRetryConfig: {
            retryCount: 3,
            retryDelay: 2000
        },
        deleteRetryConfig: {
            retryCount: 3,
            retryDelay: 2000
        }
    };


    const reactionAnnotationDataProvider: ReactionAnnotationDataProvider = {
        get: fetchReactionsFromDB,
        save: saveReactionsToDB,
        delete: deleteReactionsFromDB,
        config: reactionResolverConfig
    };

    <VeltProvider 
        apiKey='YOUR_API_KEY'
        dataProviders={{
            reaction: reactionAnnotationDataProvider
        }}
    >
    </VeltProvider>

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    const fetchReactionsFromDB = async (request) => {
        // Fetch reaction annotations from your DB
        const result = await __getReactionsFromYourDB__(request)
          .then((response) => {
            return { data: response, success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
          });

        return result;
    };

    const saveReactionsToDB = async (request) => {
        const result = await __saveReactionsToYourDB__(request)
          .then((response) => {
            return { success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
        });
        return result;
    };

    const deleteReactionsFromDB = async (request) => {
        const result = await __deleteReactionsFromYourDB__(request)
          .then((response) => {
            return { success: true, statusCode: 200 };
          })
          .catch((error) => {
            return { success: false, statusCode: 500 };
        });
        return result;
    };

    const reactionResolverConfig = {
        resolveTimeout: 2000,
        saveRetryConfig: {
            retryCount: 3,
            retryDelay: 2000
        },
        deleteRetryConfig: {
            retryCount: 3,
            retryDelay: 2000
        }
    };


    const reactionAnnotationDataProvider = {
        get: fetchReactionsFromDB,
        save: saveReactionsToDB,
        delete: deleteReactionsFromDB,
        config: reactionResolverConfig
    };

    Velt.setDataProviders({
        reaction: reactionAnnotationDataProvider
    });

    ```
  </Tab>
</Tabs>


# Users
Source: https://docs.velt.dev/self-host-data/users

Self-host your users' PII while using Velt's collaboration features. Keep sensitive user data on your infrastructure with only user IDs stored on Velt servers.

Velt supports self-hosting your users' personally identifiable information (PII):

* Only the userId is stored on Velt servers, keeping sensitive user metadata on your infrastructure
* Velt Components automatically hydrate user details in the frontend by fetching from your configured data provider
* This gives you full control over user data while maintaining all Velt functionality

## How does it work?

* When the SDK is initialized, it will call the [`UserDataProvider`](/api-reference/sdk/models/data-models#userdataprovider) you configure with the list of userIds that it needs to fetch for the currently set user, organization, document, etc.
* The [`UserDataProvider`](/api-reference/sdk/models/data-models#userdataprovider) takes in a list of userIds and returns a Record object with the userIds as keys and the user data as values.

Here are the methods that you need to implement on the data provider:

## get

Method to fetch users from your database.

* Param: `string[]`: Array of userIds to fetch
* Return: `Promise<Record<string, User>>`

## Example Implementation

<Tabs>
  <Tab title="React / Next.js">
    ```jsx {22-29}
    const formatUsersToRecord = (users) => {
        // Format users array into a Record object with userId as key and user data as value
        return users.reduce((record, user) => {
            record[user.userId] = {
                userId: user.userId,
                name: user.name,
                // any other fields
            };
            return record;
        }, {});
    };

    const fetchUsersFromDB = async (userIds) => {
        // Fetch users from your DB
        const usersData = await __getUsersFromYourDB__(userIds);
        return formatUsersToRecord(usersData);
    };

    const userDataProvider: UserDataProvider = {
        get: fetchUsersFromDB
    };

    <VeltProvider 
        apiKey='YOUR_API_KEY'
        dataProviders={{
            user: userDataProvider
        }}
    >
    </VeltProvider>

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js {22-25}
    const formatUsersToRecord = (users) => {
        // Format users array into a Record object with userId as key and user data as value
        return users.reduce((record, user) => {
            record[user.userId] = {
                userId: user.userId,
                name: user.name,
                // any other fields
            };
            return record;
        }, {});
    };

    const fetchUsersFromDB = async (userIds) => {
        // Fetch users from your DB
        const usersData = await __getUsersFromYourDB__(userIds);
        return formatUsersToRecord(usersData);
    };

    const userDataProvider = {
        get: fetchUsersFromDB
    };

    Velt.setDataProviders({
        user: userDataProvider
    });
    ```
  </Tab>
</Tabs>


# Conditional Templates
Source: https://docs.velt.dev/ui-customization/conditional-templates



* Conditional Templates let you conditionally show or hide parts of the Velt Component Wireframes.
* You can add conditions based on the same data models available in [Template Variables](/ui-customization/template-variables).

There are two ways to use Conditional Templates:

## 1. Using `Velt If` component

* Wrap wireframe components and html elements in `Velt If` component.
* If the condition is not met, the component will not be rendered.
* Good for targeting groups of components at once.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltIf condition="{annotation.status.id} === 'OPEN' && {annotation.comments.length} === 3">
      {/* Content to render if condition is true */}
    </VeltIf>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-if condition="{annotation.status.id} === 'OPEN' && {annotation.comments.length} === 3">
      <!-- Content to render if condition is true -->
    </velt-if>
    ```
  </Tab>
</Tabs>

## 2. Using `Velt If` attribute

* Add `Velt If` attribute to existing wireframe components.
* If the condition is not met, the component will not be rendered.
* Good for targeting a single component.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentDialogWireframe.Header veltIf="{user.isAdmin} === true" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-dialog-wireframe-header velt-if="{user.isAdmin} === true">
    ```
  </Tab>
</Tabs>

## Syntax

The condition is specified as a string that will be evaluated as a JavaScript expression. Here is a sample syntax:

Syntax: `{<variable>} <operator> <value>`

Example: `{annotation.status.id} === 'OPEN'`

* Template variables need to be enclosed in curly braces: `{variable.property}`
* Operators:
  * Comparison operators: `===`, `==`, `!==`, `>`, `<`, `>=`, `<=`
  * Logical operators: `&&`, `||`, `!`
* Value can be a string, number or boolean.

## Examples

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    {/* 1. Show content only for open annotations: */}
    <VeltIf condition="{annotation.status.id} === 'OPEN'">
      <p>This annotation is currently open.</p>
    </VeltIf>

    {/* 2. Display a message for annotations with more than 5 comments: */}
    <VeltIf condition="{annotation.comments.length} > 5">
      <p>This is a popular annotation!</p>
    </VeltIf>

    {/* 3. Combine multiple conditions: */}
    <VeltIf condition="{annotation.status.id} === 'OPEN' && {annotation.comments.length} === 0">
      <p>This is a new open annotation without any comments yet.</p>
    </VeltIf>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <!-- 1. Show content only for open annotations: -->
    <velt-if condition="{annotation.status.id} === 'OPEN'">
      <p>This annotation is currently open.</p>
    </velt-if>

    <!-- 2. Display a message for annotations with more than 5 comments: -->
    <velt-if condition="{annotation.comments.length} > 5">
      <p>This is a popular annotation!</p>
    </velt-if>

    <!-- 3. Combine multiple conditions: -->
    <velt-if condition="{annotation.status.id} === 'OPEN' && {annotation.comments.length} === 0">
      <p>This is a new open annotation without any comments yet.</p>
    </velt-if>
    ```
  </Tab>
</Tabs>


# Action Components
Source: https://docs.velt.dev/ui-customization/custom-action-component



* A customizable button component that can be used to add custom actions and extend the functionality of any Velt component. Some examples include:
  * Add custom filtering, sorting and grouping to the Comment Sidebar
  * Add custom actions to each item in the Notifications panel.
  * Add custom actions to the Comment Dialog.
* In the [callback event](#callback-event), in addition to returning the button context, it also returns the key component data that it sits within Eg: `CommentAnnotation`, `Comment`, `Notification`, `CommentSidebarData` etc.

## Types

* `button`: Basic clickable button
* `button-toggle`: Toggleable button that maintains state
* `single-select`: Single select (radio button) group
* `multi-select`: Multi select (checkbox) group

## Component Props

| Property   | Type    | Required | Description                                                                                                                                                                        |
| ---------- | ------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `id`       | string  | Yes      | Unique identifier for the button                                                                                                                                                   |
| `type`     | string  | No       | Button type: 'button' (default), 'button-toggle', 'multi-select', or 'single-select'                                                                                               |
| `disabled` | boolean | No       | Whether the button is disabled                                                                                                                                                     |
| `active`   | boolean | No       | Whether the button is in active/selected state. Use this if you want to add a default state to the button. Applies to 'button-toggle', 'multi-select', or 'single-select' buttons. |
| `group`    | string  | No       | Group identifier for single-select/multi-select buttons                                                                                                                            |

## Usage

### Button

<Tabs>
  <Tab title="React / Next.js">
    ```jsx {6-8}
    <VeltWireframe>
      <VeltCommentsSidebarWireframe.Header>
        <VeltCommentsSidebarWireframe.Search />
        <VeltCommentsSidebarWireframe.FilterButton />

        <VeltButtonWireframe id="close-sidebar" type="button">
            <div className="custom-button">Close Sidebar</div>
        </VeltButtonWireframe>

      </VeltCommentsSidebarWireframe.Header>
    </VeltWireframe>
    ```

    **Handle the button click event:**

    ```jsx
    // Hook
    const veltButtonClickEventData = useVeltEventCallback('veltButtonClick');
    useEffect(() => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext.clickedButtonId === 'close-sidebar') {
          // Close sidebar
        }
      }
    }, [veltButtonClickEventData]);

    // API Method
    client.on('veltButtonClick').subscribe(veltButtonClickEventData => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext.clickedButtonId === 'close-sidebar') {
          // Close sidebar
        }
      }
    });

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html {6-8}
    <velt-wireframe style="display:none;">
      <velt-comments-sidebar-wireframe-header>
        <velt-comments-sidebar-wireframe-search></velt-comments-sidebar-wireframe-search>
        <velt-comments-sidebar-wireframe-filter-button></velt-comments-sidebar-wireframe-filter-button>

        <velt-button-wireframe id="close-sidebar" type="button">
            <div class="custom-button">Close Sidebar</div>
        </velt-button-wireframe>

      </velt-comments-sidebar-wireframe-header>
    </velt-wireframe>
    ```

    **Handle the button click event:**

    ```js
    Velt.on('veltButtonClick').subscribe(veltButtonClickEventData => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext.clickedButtonId === 'close-sidebar') {
          // Close sidebar
        }
      }
    });

    ```
  </Tab>
</Tabs>

### Button Toggle

<Tabs>
  <Tab title="React / Next.js">
    ```jsx {6-8}
    <VeltWireframe>
      <VeltCommentsSidebarWireframe.Header>
        <VeltCommentsSidebarWireframe.Search />
        <VeltCommentsSidebarWireframe.FilterButton />
        {/* Optional: Set the active prop to true if you want to add a default state to the button */}
        <VeltButtonWireframe id="toggleCommentPins" type="button-toggle" active={true}>
            <div className="custom-button">Toggle Comment Pins</div>
        </VeltButtonWireframe>

      </VeltCommentsSidebarWireframe.Header>
    </VeltWireframe>
    ```

    **Handle the button click event:**

    ```jsx
    // Hook
    const veltButtonClickEventData = useVeltEventCallback('veltButtonClick');
    useEffect(() => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.clickedButtonId === 'toggleCommentPins') {
          if (veltButtonClickEventData.buttonContext?.selections?.ungrouped['toggleCommentPins']) {
            commentElement.showCommentsOnDom();
          } else {
            commentElement.hideCommentsOnDom(); 
          }
        }
      }
    }, [veltButtonClickEventData]);

    // API Method
    client.on('veltButtonClick').subscribe(veltButtonClickEventData => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.clickedButtonId === 'toggleCommentPins') {
          if (veltButtonClickEventData.buttonContext?.selections?.ungrouped['toggleCommentPins']) {
            commentElement.showCommentsOnDom();
          } else {
            commentElement.hideCommentsOnDom(); 
          }
        }
      }
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html {6-8}
    <velt-wireframe style="display:none;">
      <velt-comments-sidebar-wireframe-header>
        <velt-comments-sidebar-wireframe-search></velt-comments-sidebar-wireframe-search>
        <velt-comments-sidebar-wireframe-filter-button></velt-comments-sidebar-wireframe-filter-button>

        <!-- Optional: Set the active prop to true if you want to add a default state to the button -->
        <velt-button-wireframe id="toggleCommentPins" type="button-toggle" active="true">
            <div class="custom-button">Toggle Comment Pins</div>
        </velt-button-wireframe>

      </velt-comments-sidebar-wireframe-header>
    </velt-wireframe>
    ```

    **Handle the button click event:**

    ```js
    Velt.on('veltButtonClick').subscribe(veltButtonClickEventData => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.clickedButtonId === 'toggleCommentPins') {
          if (veltButtonClickEventData.buttonContext?.selections?.ungrouped['toggleCommentPins']) {
            commentElement.showCommentsOnDom();
          } else {
            commentElement.hideCommentsOnDom(); 
          }
        }
      }
    });
    ```
  </Tab>
</Tabs>

### Single Select Button Group

<Tabs>
  <Tab title="React / Next.js">
    ```jsx {6-12}
    <VeltWireframe>
      <VeltCommentsSidebarWireframe.Panel>
          <VeltCommentsSidebarWireframe.Header />
          <div className="custom-filter-chip-container">

              <VeltButtonWireframe id="unread" type="single-select" group="custom-filter">
                  <div className="custom-filter-chip-button">Unread</div>
              </VeltButtonWireframe>

              <VeltButtonWireframe id="mentions" type="single-select" group="custom-filter">
                  <div className="custom-filter-chip-button">Mentions</div>
              </VeltButtonWireframe>

          </div>
      </VeltCommentsSidebarWireframe.Panel>
    </VeltWireframe>
    ```

    **Handle the button click event:**

    ```jsx
    // Hook
    const veltButtonClickEventData = useVeltEventCallback('veltButtonClick');
    useEffect(() => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.groupId === 'custom-filter') {
          const selectedFilter = veltButtonClickEventData.buttonContext?.selections?.['custom-filter'];
          if (selectedFilter?.unread) {
            // show unread comments
          } else if (selectedFilter?.mentions) {
            // show comments with mentions
          }
        }
      }
    }, [veltButtonClickEventData]);

    // API Method
    client.on('veltButtonClick').subscribe(veltButtonClickEventData => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.groupId === 'custom-filter') {
          const selectedFilter = veltButtonClickEventData.buttonContext?.selections?.['custom-filter'];
          if (selectedFilter?.unread) {
            // show unread comments
          } else if (selectedFilter?.mentions) {
            // show comments with mentions
          }
        }
      }
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html {6-12}
    <velt-wireframe style="display:none;">
      <velt-comments-sidebar-wireframe-panel>
        <velt-comments-sidebar-wireframe-header></velt-comments-sidebar-wireframe-header>
        <div class="custom-filter-chip-container">

            <velt-button-wireframe id="unread" type="single-select" group="custom-filter">
                <div class="custom-filter-chip-button">Unread</div>
            </velt-button-wireframe>

            <velt-button-wireframe id="mentions" type="single-select" group="custom-filter">
                <div class="custom-filter-chip-button">Mentions</div>
            </velt-button-wireframe>

        </div>
      </velt-comments-sidebar-wireframe-panel>
    </velt-wireframe>
    ```

    **Handle the button click event:**

    ```js
    Velt.on('veltButtonClick').subscribe(veltButtonClickEventData => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.groupId === 'custom-filter') {
          const selectedFilter = veltButtonClickEventData.buttonContext?.selections?.['custom-filter'];
          if (selectedFilter?.unread) {
            // show unread comments
          } else if (selectedFilter?.mentions) {
            // show comments with mentions
          }
        }
      }
    });
    ```
  </Tab>
</Tabs>

### Multi Select Button Group

<Tabs>
  <Tab title="React / Next.js">
    ```jsx {6-12}
    <VeltWireframe>
      <VeltCommentsSidebarWireframe.Panel>
          <VeltCommentsSidebarWireframe.Header />
          <div className="custom-filter-chip-container">

              <VeltButtonWireframe id="unread" type="multi-select" group="custom-filter">
                  <div className="custom-filter-chip-button">Unread</div>
              </VeltButtonWireframe>

              <VeltButtonWireframe id="mentions" type="multi-select" group="custom-filter">
                  <div className="custom-filter-chip-button">Mentions</div>
              </VeltButtonWireframe>

          </div>
      </VeltCommentsSidebarWireframe.Panel>
    </VeltWireframe>
    ```

    **Handle the button click event:**

    ```jsx
    // Hook
    const veltButtonClickEventData = useVeltEventCallback('veltButtonClick');
    useEffect(() => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.groupId === 'custom-filter') {
          const selections = veltButtonClickEventData.buttonContext?.selections?.['custom-filter'];
          if (selections?.unread) {
            // show unread comments
          }
          if (selections?.mentions) {
            // show comments with mentions
          }
        }
      }
    }, [veltButtonClickEventData]);

    // API Method
    client.on('veltButtonClick').subscribe(veltButtonClickEventData => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.groupId === 'custom-filter') {
          const selections = veltButtonClickEventData.buttonContext?.selections?.['custom-filter'];
          if (selections?.unread) {
            // show unread comments
          }
          if (selections?.mentions) {
            // show comments with mentions
          }
        }
      }
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html {6-12}
    <velt-wireframe style="display:none;">
      <velt-comments-sidebar-wireframe-panel>
        <velt-comments-sidebar-wireframe-header></velt-comments-sidebar-wireframe-header>
        <div class="custom-filter-chip-container">

            <velt-button-wireframe id="unread" type="multi-select" group="custom-filter">
                <div class="custom-filter-chip-button">Unread</div>
            </velt-button-wireframe>

            <velt-button-wireframe id="mentions" type="multi-select" group="custom-filter">
                <div class="custom-filter-chip-button">Mentions</div>
            </velt-button-wireframe>

        </div>
      </velt-comments-sidebar-wireframe-panel>
    </velt-wireframe>
    ```

    **Handle the button click event:**

    ```js
    Velt.on('veltButtonClick').subscribe(veltButtonClickEventData => {
      if (veltButtonClickEventData) {
        if (veltButtonClickEventData.buttonContext?.groupId === 'custom-filter') {
          const selections = veltButtonClickEventData.buttonContext?.selections?.['custom-filter'];
          if (selections?.unread) {
            // show unread comments
          }
          if (selections?.mentions) {
            // show comments with mentions
          }
        }
      }
    });
    ```
  </Tab>
</Tabs>

### Callback Event

The Velt Button Wireframe emits events when users interact with it. You can listen to these events to implement custom behaviors.

* Returns: [VeltButtonClickEvent](/api-reference/sdk/models/api-event-objects#veltbuttonclickevent)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Hook
    const veltButtonClickEventData = useVeltEventCallback('veltButtonClick');
    useEffect(() => {
      if (veltButtonClickEventData) {
        // Handle button click event response
      }
    }, [veltButtonClickEventData]);

    // API Method
    client.on('veltButtonClick').subscribe((veltButtonClickEventData) => {
        // Handle button click event response
    });

    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    Velt.on('veltButtonClick').subscribe((veltButtonClickEventData) => {
        // Handle button click event response
    });
    ```
  </Tab>
</Tabs>


# Custom Button
Source: https://docs.velt.dev/ui-customization/features/async/arrows/custom-button



## Custom Arrow Button

If you want to replace the default arrow button with your own custom button, you can pass it in as a child component.

<RequestExample>
  ```js React / Next.js
  import { VeltArrowTool } from '@veltdev/react';

  function YourComponent() {

  return (
      <VeltArrowTool>
          //custom arrow button goes here
          <button className="myButton"></button
      </VeltArrowTool>
    )
    
  }
  ```

  ```html HTML
  <velt-arrow-tool>
      <!-- custom arrow button goes here -->
      <button class="myButton"></button
  </velt-arrow-tool>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/arrows/parts



<Steps titleSize="h2">
  <Step title="Select the part you want to modify">
    We offer several parts which can be used like classes. Full list below.
    The component is encapsulated in Shadow DOM, which is isolated from the normal DOM.
  </Step>

  <Step title="Apply your CSS rules">
    Set whatever CSS rules you want.
    The part lets you target a specific element within a Shadow DOM.
  </Step>

  <Step title="Check out the table below">
    Reference the table below to see what parts we expose.
    Alternatively, you can directly inspect the component HTML to see what parts are available.

    | property           | description                               |
    | ------------------ | ----------------------------------------- |
    | `container`        | Targets the comment tool container        |
    | `button-container` | Targets the comment tool button container |
    | `button-icon`      | Targets the comment tool button SVG icon  |
  </Step>
</Steps>

<RequestExample>
  ```css Tool
  velt-arrow-tool::part(button-icon) {
    width: 1.5rem;
    height: 1.5rem;
  }
  ```
</RequestExample>


# Slots
Source: https://docs.velt.dev/ui-customization/features/async/arrows/slots



<Steps titleSize="h2">
  <Step stepNumber="1" title="Replace the Arrow Tool">
    Provide a template for the Arrow Tool.

    Target the `button` slot with your own custom template.
  </Step>
</Steps>

<RequestExample>
  ```js React / Next.js
  import {
    VeltArrowTool
  } from '@veltdev/react';

  export default function App() {

    return (
      <>

        <VeltArrowTool>
          <button slot="button">Arrow</button>
        </VeltArrowTool>

      </>
    );
  }
  ```

  ```html HTML

  <!doctype html>
  <html lang="en">
    <head>
      <title>Arrow documentation</title>
    </head>
    <body>

      <velt-user-invite-tool>
          <button slot="button">Arrow</button>
      </velt-user-invite-tool>

    </body>
  </html>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/arrows/variables



To update CSS variables for the Arrow Tool, please refer to [Global Styles](/global-styles/global-styles)


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-bubble/overview

This button shows the comment count and the author's avatar. This is used in Popover comments feature.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default comment bubble component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-bubble-light.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentBubbleWireframe>
          <VeltCommentBubbleWireframe.CommentsCount />
          <VeltCommentBubbleWireframe.Avatar />
      </VeltCommentBubbleWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-bubble-wireframe>
          <velt-comment-bubble-comments-count-wireframe></velt-comment-bubble-comments-count-wireframe>
          <velt-comment-bubble-avatar-wireframe></velt-comment-bubble-avatar-wireframe>
      </velt-comment-bubble-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-bubble/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```jsx
    <VeltCommentBubble shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```jsx
    <velt-comment-bubble shadow-dom="false"></velt-comment-bubble>
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-bubble-1.png)

By default, all components are in Light Mode, but there are several properties and methods to enable Dark Mode.

`Default: false`

Below are examples to enable dark mode for comment bubble component.

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```js
    <VeltCommentBubble darkMode={true} />
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```HTML
    <velt-comment-bubble dark-mode="true"></velt-comment-bubble>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-bubble/subcomponents/avatar

The subcomponent on the Comment Bubble that shows the User avatar

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-bubble-sub-2.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentBubbleWireframe.Avatar />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-bubble-avatar-wireframe></velt-comment-bubble-avatar-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-bubble/subcomponents/comments-count

The subcomponent on the Comment Bubble that shows the number of Comments made on a thread.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-bubble-sub-1.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentBubbleWireframe.CommentsCount />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-bubble-comments-count-wireframe></velt-comment-bubble-comments-count-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/overview

The interface that appears when you try to read an existing Comment or make a new Comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default comment dialog component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-1.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-2.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe>
          {/*  Ghost Banner - Only shown for ghost comments */}
          <VeltCommentDialogWireframe.GhostBanner />
          {/*  Private Banner - Only shown for private comments */}
          <VeltCommentDialogWireframe.PrivateBanner />
          {/*  Assignee Banner - Only shown for assigned comments */}
          <VeltCommentDialogWireframe.AssigneeBanner />
          {/*  Header */}
          <VeltCommentDialogWireframe.Header />
          {/* Body */}
          <VeltCommentDialogWireframe.Body />
          {/* Composer */}
          <VeltCommentDialogWireframe.Composer />
          {/* All Comments */}
          <VeltCommentDialogWireframe.AllComment />
          {/* Approve - Only when moderator mode is on */}
          <VeltCommentDialogWireframe.Approve />
          {/* Sign In - Only when user is anonymous and sign in button is enabled */}
          <VeltCommentDialogWireframe.SignIn />
          {/* Upgrade - Not visible by default */}
          <VeltCommentDialogWireframe.Upgrade />
          {/* Suggestion Action - Only when suggestion mode is on */}
          <VeltCommentDialogWireframe.SuggestionAction />
      </VeltCommentDialogWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-wireframe>
          <!-- Ghost Banner - Only shown for ghost comments -->
          <velt-comment-dialog-ghost-banner-wireframe></velt-comment-dialog-ghost-banner-wireframe>
          <!-- Private Banner - Only shown for private comments -->
          <velt-comment-dialog-private-banner-wireframe></velt-comment-dialog-private-banner-wireframe>
          <!-- Assignee Banner - Only shown for assigned comments -->
          <velt-comment-dialog-assignee-banner-wireframe></velt-comment-dialog-assignee-banner-wireframe>
          <!-- Header -->
          <velt-comment-dialog-header-wireframe></velt-comment-dialog-header-wireframe>
          <!-- Private Badge - Only shown for private comments -->
          <velt-comment-dialog-private-badge-wireframe></velt-comment-dialog-private-badge-wireframe>
          <!-- Body -->
          <velt-comment-dialog-body-wireframe></velt-comment-dialog-body-wireframe>
          <!-- Composer -->
          <velt-comment-dialog-composer-wireframe></velt-comment-dialog-composer-wireframe>
          <!-- All Comments -->
          <velt-comment-dialog-all-comment-wireframe></velt-comment-dialog-all-comment-wireframe>
          <!-- Approve - Only when moderator mode is on -->
          <velt-comment-dialog-approve-wireframe></velt-comment-dialog-approve-wireframe>
          <!-- Sign In - Only when user is anonymous and sign in button is enabled -->
          <velt-comment-dialog-sign-in-wireframe></velt-comment-dialog-sign-in-wireframe>
          <!-- Upgrade - Not visible by default -->
          <velt-comment-dialog-upgrade-wireframe></velt-comment-dialog-upgrade-wireframe>
          <!-- Suggestion Action - Only when suggestion mode is on -->
          <velt-comment-dialog-suggestion-action-wireframe></velt-comment-dialog-suggestion-action-wireframe>
      </velt-comment-dialog-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Variants
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/pre-defined-variants



## Pre-defined Variants

The Comment Dialog has 2 pre-defined variants:

* `dialog`: this will customize the Comment Dialog only within Pin, Area, and Text Comments
* `sidebar`: this will customize the Comment Dialog only within Sidebar comments

To use them, set the `variant` name in the wireframe template equal to one of the pre-defined variants. You do not need to add it to the actual Velt component.

<RequestExample>
  ```jsx React / Next.js
   <VeltWireframe>
      {/* This pre-defined variant will change the appearance of the Comment Dialog within Pin, Area, and Text comments only */}
      <VeltCommentDialogWireframe variant="dialog">
          ...
      </VeltCommentDialogWireframe>

      {/* This pre-defined variant will change the appearance of the Comment Dialog within the Sidebar only */}
      <VeltCommentDialogWireframe variant="sidebar">
          ...
      </VeltCommentDialogWireframe>

      {/* If you dont use any variants, then customization will be applied to the Comment Dialog globally */}
      <VeltCommentDialogWireframe>
          ...
      </VeltCommentDialogWireframe>
  </VeltWireframe>
  ```

  ```jsx HTML
  <velt-wireframe style="display:none;">
  <!-- This pre-defined variant will change the appearance of the Comment Dialog within Pin, Area, and Text comments only -->
      <velt-comment-dialog-wireframe variant="dialog">
          <velt-comment-dialog-body-wireframe></velt-comment-dialog-body-wireframe>
          <velt-comment-dialog-composer-wireframe></velt-comment-dialog-composer-wireframe>
          <velt-comment-dialog-header-wireframe></velt-comment-dialog-header-wireframe>
      </velt-comment-dialog-wireframe>

      <!-- This pre-defined variant will change the appearance of the Comment Dialog within the Sidebar only -->
      <velt-comment-dialog-wireframe variant="sidebar">
          <velt-comment-dialog-body-wireframe></velt-comment-dialog-body-wireframe>
          <velt-comement-dialog-composer-wireframe></velt-comement-dialog-composer-wireframe>
          <velt-comment-dialog-header-wireframe></velt-comment-dialog-header-wireframe>
      </velt-comment-dialog-wireframe>

      <!--  If you dont use any variants, then customization will be applied to the Comment Dialog globally -->
      <velt-comment-dialog-wireframe>
          <velt-comment-dialog-body-wireframe></velt-comment-dialog-body-wireframe>
          <velt-comement-dialog-composer-wireframe></velt-comement-dialog-composer-wireframe>
          <velt-comment-dialog-header-wireframe></velt-comment-dialog-header-wireframe>
      </velt-comment-dialog-wireframe>

  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```jsx
    <VeltComments dialogShadowDom={false} />
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDialogShadowDOM();
    commentElement.disableDialogShadowDOM();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```
    <velt-comments dialog-shadow-dom="false"></velt-comments>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDialogShadowDOM();
    commentElement.disableDialogShadowDOM();
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/dark-light-mode.png)

By default, all components are in Light Mode, but there are several properties and methods to enable Dark Mode.

`Default: false`

Below are the examples to enable Dark Mode for comments dialog:

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```js
    <VeltComments dialogDarkMode={true}/>
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```js
    <velt-comments dialog-dark-mode="true"></velt-comments>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/all-comments

The subcomponent of the Comment Dialog that is used to show the All Comments button that opens the Comments Sidebar

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any of the components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-8.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.AllComment />
  </VeltWireframe>
  ```

  ```HTML HTML 
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-all-comment-wireframe></velt-comment-dialog-all-comment-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/approve

The subcomponent of the Comment Dialog that is used approve Comments in Moderator Mode

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-9.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Approve />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-approve-wireframe></velt-comment-dialog-approve-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/assignee-banner

The subcomponent of the Comment Dialog that is used assign a Comment as a task

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-3.png)

<RequestExample>
  ```jsx "React / Next.js"
  <VeltWireframe>
      <VeltCommentDialogWireframe.AssigneeBanner>
          <VeltCommentDialogWireframe.AssigneeBanner.ResolveButton />
          <VeltCommentDialogWireframe.AssigneeBanner.UserAvatar />
          <VeltCommentDialogWireframe.AssigneeBanner.UserName />
      </VeltCommentDialogWireframe.AssigneeBanner>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-assignee-banner-wireframe>
          <velt-comment-dialog-assignee-banner-user-avatar-wireframe></velt-comment-dialog-assignee-banner-user-avatar-wireframe>
          <velt-comment-dialog-assignee-banner-user-name-wireframe></velt-comment-dialog-assignee-banner-user-name-wireframe>
          <velt-comment-dialog-assignee-banner-resolve-button-wireframe></velt-comment-dialog-assignee-banner-resolve-button-wireframe>
      </velt-comment-dialog-assignee-banner-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/autocomplete-chip-tooltip

The subcomponent of the Comment Dialog that represents the tooltip that appears when you hover over an Autocomplete Chip.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/autocomplete-chip-tooltip.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltAutocompleteChipTooltipWireframe>
          <VeltAutocompleteChipTooltipWireframe.Icon />
          <VeltAutocompleteChipTooltipWireframe.Name />
          <VeltAutocompleteChipTooltipWireframe.Description />
      </VeltAutocompleteChipTooltipWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-autocomplete-chip-tooltip-wireframe>
          <velt-autocomplete-chip-tooltip-icon-wireframe></velt-autocomplete-chip-tooltip-icon-wireframe>
          <velt-autocomplete-chip-tooltip-name-wireframe></velt-autocomplete-chip-tooltip-name-wireframe>
          <velt-autocomplete-chip-tooltip-description-wireframe></velt-autocomplete-chip-tooltip-description-wireframe>
      </velt-autocomplete-chip-tooltip-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/autocomplete-group-option

The subcomponent of the Comment Dialog that represents the Group contact list item that appears when `expandMentionGroups` is enabled.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltAutocompleteGroupOptionWireframe />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-autocomplete-group-option-wireframe></velt-autocomplete-group-option-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/autocomplete-option

The subcomponent of the Comment Dialog that represents the dropdown list that appears when you press an Autocomplete hotkey.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-user-selector-dropdown-1.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-user-selector-dropdown-2.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltAutocompleteOptionWireframe>
          <VeltAutocompleteOptionWireframe.Icon />
          <VeltAutocompleteOptionWireframe.Name />
          <VeltAutocompleteOptionWireframe.Description field='name' />
          <VeltAutocompleteOptionWireframe.ErrorIcon />
      </VeltAutocompleteOptionWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-autocomplete-option-wireframe>
          <velt-autocomplete-option-icon-wireframe></velt-autocomplete-option-icon-wireframe>
          <velt-autocomplete-option-name-wireframe></velt-autocomplete-option-name-wireframe>
          <velt-autocomplete-option-description-wireframe field="name"></velt-autocomplete-option-description-wireframe>
          <velt-autocomplete-option-error-icon-wireframe></velt-autocomplete-option-error-icon-wireframe>
      <velt-autocomplete-option-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/body/overview

The subcomponent of the Comment Dialog that is used to show all Comment Replies as well as the Comment Composer.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-6.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Body>
          <VeltCommentDialogWireframe.Threads>
              <VeltCommentDialogWireframe.ThreadCard />
              <VeltCommentDialogWireframe.MoreReply />
          </VeltCommentDialogWireframe.Threads>
          <VeltCommentDialogWireframe.ToggleReply />
      </VeltCommentDialogWireframe.Body>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-wireframe>
          ...
          <velt-comment-dialog-body-wireframe>
              <velt-comment-dialog-threads-wireframe>
                  <velt-comment-dialog-thread-card-wireframe></velt-comment-dialog-thread-card-wireframe>
                  <velt-comment-dialog-more-reply-wireframe></velt-comment-dialog-more-reply-wireframe>
              </velt-comment-dialog-threads-wireframe>
              <velt-comment-dialog-toggle-reply-wireframe></velt-comment-dialog-toggle-reply-wireframe>
          </velt-comment-dialog-body-wireframe>
          ...
      </velt-comment-dialog-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# ThreadCard
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/threadcard

The subcomponent of the Body of the Comment Dialog that is used to show attachments added to a Comment reply.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/threadcard-attachments.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.ThreadCard>
          <VeltCommentDialogWireframe.ThreadCard.Avatar />
          <VeltCommentDialogWireframe.ThreadCard.Name />
          <VeltCommentDialogWireframe.ThreadCard.Unread /> {/* Unread indicator */}
          <VeltCommentDialogWireframe.ThreadCard.SeenDropdown /> {/* Seen indicator with dropdown */}
          <VeltCommentDialogWireframe.ThreadCard.Draft /> {/* Draft indicator */}
          <VeltCommentDialogWireframe.ThreadCard.Time />
          <VeltCommentDialogWireframe.ThreadCard.DeviceType />
          <VeltCommentDialogWireframe.ThreadCard.Options />
          <VeltCommentDialogWireframe.ThreadCard.Message />
          <VeltCommentDialogWireframe.ThreadCard.ReactionTool />
          <VeltCommentDialogWireframe.ThreadCard.Reactions />
          <VeltCommentDialogWireframe.ThreadCard.Attachments>
              ... customizable
          </VeltCommentDialogWireframe.ThreadCard.Attachments>    
          <VeltCommentDialogWireframe.ThreadCard.Recordings />
      </VeltCommentDialogWireframe.ThreadCard>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-thread-card-wireframe>
          <velt-comment-dialog-thread-card-avatar-wireframe></velt-comment-dialog-thread-card-avatar-wireframe>
          <velt-comment-dialog-thread-card-name-wireframe></velt-comment-dialog-thread-card-name-wireframe>
          <velt-comment-dialog-thread-card-unread-wireframe></velt-comment-dialog-thread-card-unread-wireframe> <!-- Unread indicator -->
          <velt-comment-dialog-thread-card-seen-dropdown-wireframe></velt-comment-dialog-thread-card-seen-dropdown-wireframe> <!-- Seen indicator with dropdown -->
          <velt-comment-dialog-thread-card-draft-wireframe></velt-comment-dialog-thread-card-draft-wireframe> <!-- Draft indicator -->
          <velt-comment-dialog-thread-card-time-wireframe></velt-comment-dialog-thread-card-time-wireframe>
          <velt-comment-dialog-thread-card-device-type-wireframe></velt-comment-dialog-thread-card-device-type-wireframe>
          <velt-comment-dialog-thread-card-options-wireframe></velt-comment-dialog-thread-card-options-wireframe>
          <velt-comment-dialog-thread-card-message-wireframe></velt-comment-dialog-thread-card-message-wireframe>
          <velt-comment-dialog-thread-card-reaction-tool-wireframe></velt-comment-dialog-thread-card-reaction-tool-wireframe>
          <velt-comment-dialog-thread-card-reactions-wireframe></velt-comment-dialog-thread-card-reactions-wireframe>
          <velt-comment-dialog-thread-card-attachments-wireframe>
              ... customizable
          </velt-comment-dialog-thread-card-attachments-wireframe>
          <velt-comment-dialog-thread-card-recordings-wireframe></velt-comment-dialog-thread-card-recordings-wireframe>
      </velt-comment-dialog-thread-card-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# ThreadCard Attachments
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/threadcard-attachments

The subcomponent of the Body of the Comment Dialog that is used to show attachments added to a Comment reply.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/threadcard-attachments.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.ThreadCard.Attachments>
          <VeltCommentDialogWireframe.ThreadCard.Attachments.Image>
              <VeltCommentDialogWireframe.ThreadCard.Attachments.Image.Preview />
              <VeltCommentDialogWireframe.ThreadCard.Attachments.Image.Download />
              <VeltCommentDialogWireframe.ThreadCard.Attachments.Image.Delete />
          </VeltCommentDialogWireframe.ThreadCard.Attachments.Image>
          <VeltCommentDialogWireframe.ThreadCard.Attachments.Other>
              <VeltCommentDialogWireframe.ThreadCard.Attachments.Other.Icon />
              <VeltCommentDialogWireframe.ThreadCard.Attachments.Other.Name />
              <VeltCommentDialogWireframe.ThreadCard.Attachments.Other.Size />
              <VeltCommentDialogWireframe.ThreadCard.Attachments.Other.Download />
              <VeltCommentDialogWireframe.ThreadCard.Attachments.Other.Delete />
          </VeltCommentDialogWireframe.ThreadCard.Attachments.Other>                                     
      </VeltCommentDialogWireframe.ThreadCard.Attachments>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-thread-card-attachments-wireframe>
          <velt-comment-dialog-thread-card-attachments-image-wireframe>
              <velt-comment-dialog-thread-card-attachments-image-preview-wireframe></velt-comment-dialog-thread-card-attachments-image-preview-wireframe>
              <velt-comment-dialog-thread-card-attachments-image-download-wireframe></velt-comment-dialog-thread-card-attachments-image-download-wireframe>
              <velt-comment-dialog-thread-card-attachments-image-delete-wireframe></velt-comment-dialog-thread-card-attachments-image-delete-wireframe>
          </velt-comment-dialog-thread-card-attachments-image-wireframe>
          <velt-comment-dialog-thread-card-attachments-other-wireframe>
              <velt-comment-dialog-thread-card-attachments-other-icon-wireframe></velt-comment-dialog-thread-card-attachments-other-icon-wireframe>
              <velt-comment-dialog-thread-card-attachments-other-name-wireframe></velt-comment-dialog-thread-card-attachments-other-name-wireframe>
              <velt-comment-dialog-thread-card-attachments-other-size-wireframe></velt-comment-dialog-thread-card-attachments-other-size-wireframe>
              <velt-comment-dialog-thread-card-attachments-other-download-wireframe></velt-comment-dialog-thread-card-attachments-other-download-wireframe>
              <velt-comment-dialog-thread-card-attachments-other-delete-wireframe></velt-comment-dialog-thread-card-attachments-other-delete-wireframe>
          </velt-comment-dialog-thread-card-attachments-other-wireframe>
      </velt-comment-dialog-thread-card-attachments-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# ThreadCard Options
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/threadcard-options

The subcomponent of the Body of the Comment Dialog that is used to show the options dropdown

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

There are two set of options wireframes:

* `Velt Comment Dialog Options Wireframe`: Scopes the changes to the header options dropdown.
* `Velt Comment Dialog Thread Card Options Wireframe`: Scopes the changes to the individual message card options dropdown.

They share the same children components. However, the children components show conditionally based on their parent:

* Thread level actions: Copy link, subscribe, delete thread. They only appear in the header.
* Message level actions: Edit, delete. They only appear in the individual message cards.

The wireframes covered here are used to customize the individual **message card options dropdown**.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/threadcard-options.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.ThreadCard.Options> {/* This parent wireframe scopes the changes to only the individual message options dropdown. */}
          <VeltCommentDialogWireframe.ThreadCard.Options.Trigger />
          <VeltCommentDialogWireframe.ThreadCard.Options.Content>
              <VeltCommentDialogWireframe.ThreadCard.Options.Content.Edit />
              <VeltCommentDialogWireframe.ThreadCard.Options.Content.Delete>
                  <VeltCommentDialogWireframe.ThreadCard.Options.Content.Delete.Thread />
                  <VeltCommentDialogWireframe.ThreadCard.Options.Content.Delete.Comment />
              </VeltCommentDialogWireframe.ThreadCard.Options.Content.Delete>
          </VeltCommentDialogWireframe.ThreadCard.Options.Content>
      </VeltCommentDialogWireframe.ThreadCard.Options>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
     <velt-comment-dialog-thread-card-options-wireframe> <!-- This parent wireframe scopes the changes to only the individual message card options dropdown. -->
         <velt-comment-dialog-options-dropdown-trigger-wireframe></velt-comment-dialog-options-dropdown-trigger-wireframe>
         <velt-comment-dialog-options-dropdown-content-wireframe> <!-- This parent wireframe scopes the changes to only the individual message card options dropdown. -->
             <velt-comment-dialog-options-dropdown-content-edit-wireframe></velt-comment-dialog-options-dropdown-content-edit-wireframe>
             <velt-comment-dialog-options-dropdown-content-delete-wireframe>
                 <velt-comment-dialog-options-dropdown-content-delete-thread-wireframe></velt-comment-dialog-options-dropdown-content-delete-thread-wireframe>
                 <velt-comment-dialog-options-dropdown-content-delete-comment-wireframe></velt-comment-dialog-options-dropdown-content-delete-comment-wireframe>
             </velt-comment-dialog-options-dropdown-content-delete-wireframe>
         </velt-comment-dialog-options-dropdown-content-wireframe>
     </velt-comment-dialog-thread-card-options-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# ThreadCard Seen
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/threadcard-seen



<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Frame>
  ![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/seen-feature.png)
</Frame>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.ThreadCard.SeenDropdown>
          <VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Trigger />
          <VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content>
              <VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content.Title />
              <VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content.Items>
                  <VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content.Items.Item>
                      <VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content.Items.Item.Time />
                      <VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content.Items.Item.Name />
                      <VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content.Items.Item.Avatar />
                  </VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content.Items.Item>
              </VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content.Items>
          </VeltCommentDialogWireframe.ThreadCard.SeenDropdown.Content>
      </VeltCommentDialogWireframe.ThreadCard.SeenDropdown>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
     <velt-comment-dialog-thread-card-seen-dropdown-wireframe>
        <velt-comment-dialog-thread-card-seen-dropdown-trigger-wireframe></velt-comment-dialog-thread-card-seen-dropdown-trigger-wireframe>
        <velt-comment-dialog-thread-card-seen-dropdown-content-wireframe>
           <velt-comment-dialog-thread-card-seen-dropdown-content-title-wireframe></velt-comment-dialog-thread-card-seen-dropdown-content-title-wireframe>
           <velt-comment-dialog-thread-card-seen-dropdown-content-items-wireframe>
              <velt-comment-dialog-thread-card-seen-dropdown-content-item-wireframe>
                 <velt-comment-dialog-thread-card-seen-dropdown-content-item-avatar-wireframe></velt-comment-dialog-thread-card-seen-dropdown-content-item-avatar-wireframe>
                 <velt-comment-dialog-thread-card-seen-dropdown-content-item-name-wireframe></velt-comment-dialog-thread-card-seen-dropdown-content-item-name-wireframe>
                 <velt-comment-dialog-thread-card-seen-dropdown-content-item-time-wireframe></velt-comment-dialog-thread-card-seen-dropdown-content-item-time-wireframe>
              </velt-comment-dialog-thread-card-seen-dropdown-content-item-wireframe>
           </velt-comment-dialog-thread-card-seen-dropdown-content-items-wireframe>
        </velt-comment-dialog-thread-card-seen-dropdown-content-wireframe>
     </velt-comment-dialog-thread-card-seen-dropdown-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# ToggleReply
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/body/subcomponents/togglereply

The reply button in the comment dialog that expands to show the replies and the composer.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.ToggleReply>
  		<VeltCommentDialogWireframe.ToggleReply.Icon />
  		<VeltCommentDialogWireframe.ToggleReply.Count />
  		<VeltCommentDialogWireframe.ToggleReply.Text />
  	</VeltCommentDialogWireframe.ToggleReply>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-toggle-reply-wireframe>
  		<velt-comment-dialog-toggle-reply-icon-wireframe></velt-comment-dialog-toggle-reply-icon-wireframe>
  		<velt-comment-dialog-toggle-reply-count-wireframe></velt-comment-dialog-toggle-reply-count-wireframe>
  		<velt-comment-dialog-toggle-reply-text-wireframe></velt-comment-dialog-toggle-reply-text-wireframe>
  	</velt-comment-dialog-toggle-reply-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/composer/overview

The subcomponent of the Comment Dialog that is used to compose new Comment replies.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Note>
  When the composer is in focus, a dynamic CSS class `velt-composer-focused` is added to the composer container.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-7.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Composer>
          <VeltCommentDialogWireframe.Composer.PrivateBadge />
          <VeltCommentDialogWireframe.Composer.Avatar /> {/* used for inline comments */}
          <VeltCommentDialogWireframe.Composer.Attachments>
              ... customizable
          </VeltCommentDialogWireframe.Composer.Attachments>
          <VeltCommentDialogWireframe.Composer.Recordings />
          <VeltCommentDialogWireframe.Composer.Input placeholder='Custom Placeholder' />
          <VeltCommentDialogWireframe.Composer.ActionButton type="autocomplete" hotkey="@" /> {/* used for @mentions */}
          <VeltCommentDialogWireframe.Composer.ActionButton type="autocomplete" hotkey="#" /> {/* used for custom hotkey lists. The # is just an example. Whatever you use as the hotkey in the API should be used here as well. */}
          <VeltCommentDialogWireframe.Composer.ActionButton type="attachments" />
          <VeltCommentDialogWireframe.Composer.ActionButton type="audio" />
          <VeltCommentDialogWireframe.Composer.ActionButton type="video" />
          <VeltCommentDialogWireframe.Composer.ActionButton type="screen" />
          <VeltCommentDialogWireframe.Composer.ActionButton type="submit" />
          <VeltCommentDialogWireframe.Composer.AssignUser />
      </VeltCommentDialogWireframe.Composer>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-composer-wireframe>
          <velt-comment-dialog-composer-private-badge-wireframe></velt-comment-dialog-composer-private-badge-wireframe>
          <velt-comment-dialog-composer-avatar-wireframe></velt-comment-dialog-composer-avatar-wireframe> <!-- Used for inline comments-->
          <velt-comment-dialog-composer-attachments-wireframe>
              ... customizable 
          </velt-comment-dialog-composer-attachments-wireframe>
          <velt-comment-dialog-composer-recordings-wireframe></velt-comment-dialog-composer-recordings-wireframe>
          <velt-comment-dialog-composer-input-wireframe placeholder="Custom Placeholder"></velt-comment-dialog-composer-input-wireframe>
          <velt-comment-dialog-composer-action-button-wireframe type="autocomplete" hotkey="@"></velt-comment-dialog-composer-action-button-wireframe> <!-- used for @mentions-->
          <velt-comment-dialog-composer-action-button-wireframe type="autocomplete" hotkey="#"></velt-comment-dialog-composer-action-button-wireframe> <!-- used for custom hotkey lists. The # is just an example. Whatever you use as the hotkey in the API should be used here as well. -->
          <velt-comment-dialog-composer-action-button-wireframe type="attachments"></velt-comment-dialog-composer-action-button-wireframe>
          <velt-comment-dialog-composer-action-button-wireframe type="audio"></velt-comment-dialog-composer-action-button-wireframe>
          <velt-comment-dialog-composer-action-button-wireframe type="video"></velt-comment-dialog-composer-action-button-wireframe>
          <velt-comment-dialog-composer-action-button-wireframe type="screen"></velt-comment-dialog-composer-action-button-wireframe>
          <velt-comment-dialog-composer-action-button-wireframe type="submit"></velt-comment-dialog-composer-action-button-wireframe>
          <velt-comment-dialog-composer-assign-user-wireframe></velt-comment-dialog-composer-assign-user-wireframe>
      </velt-comment-dialog-composer-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Composer Attachments
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/composer/subcomponents/composer-attachments

The subcomponent of the Comoposer of the Comment Dialog that is used to show attachments on a Comment that has been composed but hasn't been sent yet.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/composer-attachments.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Composer.Attachments>
          <VeltCommentDialogWireframe.Composer.Attachments.Selected>
              <VeltCommentDialogWireframe.Composer.Attachments.Selected.Image>
                  <VeltCommentDialogWireframe.Composer.Attachments.Selected.Image.Preview />
                  <VeltCommentDialogWireframe.Composer.Attachments.Selected.Image.Loading />
                  <VeltCommentDialogWireframe.Composer.Attachments.Selected.Image.Delete />
              </VeltCommentDialogWireframe.Composer.Attachments.Selected.Image>
              <VeltCommentDialogWireframe.Composer.Attachments.Selected.Other>
                  <VeltCommentDialogWireframe.Composer.Attachments.Selected.Other.Icon />
                  <VeltCommentDialogWireframe.Composer.Attachments.Selected.Other.Name />
                  <VeltCommentDialogWireframe.Composer.Attachments.Selected.Other.Size />
                  <VeltCommentDialogWireframe.Composer.Attachments.Selected.Other.Loading />
                  <VeltCommentDialogWireframe.Composer.Attachments.Selected.Other.Delete />
              </VeltCommentDialogWireframe.Composer.Attachments.Selected.Other>
          </VeltCommentDialogWireframe.Composer.Attachments.Selected>
          <VeltCommentDialogWireframe.Composer.Attachments.Invalid>
              <VeltCommentDialogWireframe.Composer.Attachments.Invalid.Item>
                  <VeltCommentDialogWireframe.Composer.Attachments.Invalid.Item.Preview />
                  <VeltCommentDialogWireframe.Composer.Attachments.Invalid.Item.Message />
                  <VeltCommentDialogWireframe.Composer.Attachments.Invalid.Item.Delete />
              </VeltCommentDialogWireframe.Composer.Attachments.Invalid.Item>
          </VeltCommentDialogWireframe.Composer.Attachments.Invalid>
      </VeltCommentDialogWireframe.Composer.Attachments>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-composer-attachments-wireframe>
          <velt-comment-dialog-composer-attachments-selected-wireframe>
              <velt-comment-dialog-composer-attachments-image-wireframe>
                  <velt-comment-dialog-composer-attachments-image-preview-wireframe></velt-comment-dialog-composer-attachments-image-preview-wireframe>
                  <velt-comment-dialog-composer-attachments-image-loading-wireframe></velt-comment-dialog-composer-attachments-image-loading-wireframe>
                  <velt-comment-dialog-composer-attachments-image-delete-wireframe></velt-comment-dialog-composer-attachments-image-delete-wireframe>
              </velt-comment-dialog-composer-attachments-image-wireframe>
              <velt-comment-dialog-composer-attachments-other-wireframe>
                  <velt-comment-dialog-composer-attachments-other-icon-wireframe></velt-comment-dialog-composer-attachments-other-icon-wireframe>
                  <velt-comment-dialog-composer-attachments-other-name-wireframe></velt-comment-dialog-composer-attachments-other-name-wireframe>
                  <velt-comment-dialog-composer-attachments-other-size-wireframe></velt-comment-dialog-composer-attachments-other-size-wireframe>
                  <velt-comment-dialog-composer-attachments-other-loading-wireframe></velt-comment-dialog-composer-attachments-other-loading-wireframe>
                  <velt-comment-dialog-composer-attachments-other-delete-wireframe></velt-comment-dialog-composer-attachments-other-delete-wireframe>
              </velt-comment-dialog-composer-attachments-other-wireframe>
          </velt-comment-dialog-composer-attachments-selected-wireframe>
          <velt-comment-dialog-composer-attachments-invalid-wireframe>
              <velt-comment-dialog-composer-attachments-invalid-item-wireframe>
                  <velt-comment-dialog-composer-attachments-invalid-item-preview-wireframe></velt-comment-dialog-composer-attachments-invalid-item-preview-wireframe>
                      <velt-comment-dialog-composer-attachments-invalid-item-message-wireframe></velt-comment-dialog-composer-attachments-invalid-item-message-wireframe>
                      <velt-comment-dialog-composer-attachments-invalid-item-delete-wireframe></velt-comment-dialog-composer-attachments-invalid-item-delete-wireframe>
                  </velt-comment-dialog-composer-attachments-invalid-item-wireframe>
              </velt-comment-dialog-composer-attachments-invalid-wireframe>
         </velt-comment-dialog-composer-attachments-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/composer/subcomponents/private-badge

The subcomponent of the Comment Dialog that is shown in the Composer when Private Mode is turned on.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-5.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Composer.PrivateBadge />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-composer-private-badge-wireframe></velt-comment-dialog-composer-private-badge-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Custom Annotation Dropdown
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/custom-annotation-dropdown

The subcomponent of the Comment Dialog that represents the custom annotation dropdown.

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/comments-dialog-annotation.png)
![](https://mintlify.s3.us-west-1.amazonaws.com/velt/gifs/comments-dialog-annotation-breakdown.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltCommentDialogWireframe.CustomAnnotationDropdown>
      <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger>
          <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.List>
              <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.RemainingCount></VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.RemainingCount>
              
              <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.Placeholder>
                  Select a category
              </VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.Placeholder>
              
              <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.Arrow></VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.Arrow>
              <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.List.Item>
                  <VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.List.Item></VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.List.Item>
              </VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.List.Item>
          </VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger.List>
      </VeltCommentDialogWireframe.CustomAnnotationDropdown.Trigger>
      <VeltCommentDialogWireframe.CustomAnnotationDropdown.Content>
          <VeltCommentDialogWireframe.CustomAnnotationDropdown.Content.Item>
              <VeltCommentDialogWireframe.CustomAnnotationDropdown.Content.Item.Label></VeltCommentDialogWireframe.CustomAnnotationDropdown.Content.Item.Label>
              <VeltCommentDialogWireframe.CustomAnnotationDropdown.Content.Item.Icon></VeltCommentDialogWireframe.CustomAnnotationDropdown.Content.Item.Icon>
          </VeltCommentDialogWireframe.CustomAnnotationDropdown.Content.Item>
      </VeltCommentDialogWireframe.CustomAnnotationDropdown.Content>
  </VeltCommentDialogWireframe.CustomAnnotationDropdown>
  ```

  ```HTML HTML 
   <velt-comment-dialog-custom-annotation-dropdown-wireframe>
      <velt-comment-dialog-custom-annotation-dropdown-trigger-wireframe>
          <velt-comment-dialog-custom-annotation-dropdown-trigger-list-wireframe>
              <velt-comment-dialog-custom-annotation-dropdown-trigger-list-item-wireframe></velt-comment-dialog-custom-annotation-dropdown-trigger-list-item-wireframe>
          </velt-comment-dialog-custom-annotation-dropdown-trigger-list-wireframe>
          <velt-comment-dialog-custom-annotation-dropdown-trigger-remaining-count-wireframe></velt-comment-dialog-custom-annotation-dropdown-trigger-remaining-count-wireframe>
          
          <velt-comment-dialog-custom-annotation-dropdown-trigger-placeholder-wireframe>
              Select a category
          </velt-comment-dialog-custom-annotation-dropdown-trigger-placeholder-wireframe>
          
          <velt-comment-dialog-custom-annotation-dropdown-trigger-arrow-wireframe></velt-comment-dialog-custom-annotation-dropdown-trigger-arrow-wireframe>
      </velt-comment-dialog-custom-annotation-dropdown-trigger-wireframe>
      <velt-comment-dialog-custom-annotation-dropdown-content-wireframe>
          <velt-comment-dialog-custom-annotation-dropdown-content-item-wireframe>
              <velt-comment-dialog-custom-annotation-dropdown-content-item-label-wireframe></velt-comment-dialog-custom-annotation-dropdown-content-item-label-wireframe>
              <velt-comment-dialog-custom-annotation-dropdown-content-item-icon-wireframe></velt-comment-dialog-custom-annotation-dropdown-content-item-icon-wireframe>
          </velt-comment-dialog-custom-annotation-dropdown-content-item-wireframe>
      </velt-comment-dialog-custom-annotation-dropdown-content-wireframe>
  </velt-comment-dialog-custom-annotation-dropdown-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/ghost-banner

The subcomponent of the Comment Dialog that indicates if a Comment has become a Ghost Comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-2.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.GhostBanner />
  </VeltWireframe>
  ```

  ```HTML HTML 
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-private-banner-wireframe></velt-comment-dialog-private-banner-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/header

The subcomponent of the Comment Dialog that represents the Header.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-4.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Header>
          {/* Following subcomponents can be used outside header as well */}
          {/* Pin Dialog Header */}
          <VeltCommentDialogWireframe.Status />
          <VeltCommentDialogWireframe.Priority />
          <VeltCommentDialogWireframe.Options />
          <VeltCommentDialogWireframe.ResolveButton />
          <VeltCommentDialogWireframe.UnresolveButton />
          <VeltCommentDialogWireframe.CopyLink />

          {/* Close Button. Not added to the default components. You can explicitly add it. */}
          <VeltCommentDialogWireframe.CloseButton />

          {/* Sidebar Dialog Header */}
          <VeltCommentDialogWireframe.CommentCategory />
          <VeltCommentDialogWireframe.CommentIndex />
          <VeltCommentDialogWireframe.CommentSuggestionStatus />
          {/* Navigation Button - Only shown on sidebar when focused thread mode is on */}
          <VeltCommentDialogWireframe.NavigationButton />
          {/* Delete Button. Not added to the default components. You can explicitly add it. */}
          <VeltCommentDialogWireframe.DeleteButton></VeltCommentDialogWireframe.DeleteButton>

      </VeltCommentDialogWireframe.Header>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-header-wireframe>
          <!-- Following subcomponents can be used outside header as well -->
          <!-- Pin Dialog Header -->
          <velt-comment-dialog-status-wireframe></velt-comment-dialog-status-wireframe>
          <velt-comment-dialog-priority-wireframe></velt-comment-dialog-priority-wireframe>
          <velt-comment-dialog-options-wireframe></velt-comment-dialog-options-wireframe>
          <velt-comment-dialog-copy-link-wireframe></velt-comment-dialog-copy-link-wireframe>

          <!-- Close Button. Not added to the default components. You can explicitly add it. -->
          <velt-comment-dialog-close-button-wireframe></velt-comment-dialog-close-button-wireframe>

          <velt-comment-dialog-resolve-button-wireframe></velt-comment-dialog-resolve-button-wireframe>
          <velt-comment-dialog-unresolve-button-wireframe></velt-comment-dialog-unresolve-button-wireframe>
          <!-- Sidebar Dialog Header -->
          <velt-comment-dialog-comment-index-wireframe></velt-comment-dialog-comment-index-wireframe>
          <velt-comment-dialog-comment-category-wireframe></velt-comment-dialog-comment-category-wireframe>
          <velt-comment-dialog-comment-suggestion-status-wireframe></velt-comment-dialog-comment-suggestion-status-wireframe>
          <!-- Navigation Button - Only shown on sidebar when focused thread mode is on -->
          <velt-comment-dialog-navigation-button-wireframe></velt-comment-dialog-navigation-button-wireframe>
          <!-- Delete Button. Not added to the default components. You can explicitly add it. -->
          <velt-comment-dialog-delete-button-wireframe></velt-comment-dialog-delete-button-wireframe>
      </velt-comment-dialog-header-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/navigation-button

Navigation button that appears on sidebar. Clicking on it will navigate to the comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.NavigationButton />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-navigation-button-wireframe></velt-comment-dialog-navigation-button-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/options-dropdown

The subcomponent of the Comment Dialog that represents the Options Dropdown

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

There are two set of options wireframes:

* `Velt Comment Dialog Options Wireframe`: Scopes the changes to the header options dropdown.
* `Velt Comment Dialog Thread Card Options Wireframe`: Scopes the changes to the individual message card options dropdown.

They share the same children components. However, the children components show conditionally based on their parent:

* Thread level actions: Copy link, subscribe, delete thread. They only appear in the header.
* Message level actions: Edit, delete. They only appear in the individual message cards.

The wireframes covered here are used to customize the **header options dropdown**.

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/options-dropdown-customization.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Options> {/* This parent wireframe scopes the changes to only the header options dropdown. */}
          <VeltCommentDialogWireframe.Options.Trigger />
          <VeltCommentDialogWireframe.Options.Content>
              <VeltCommentDialogWireframe.Options.Content.MakePrivate>
                  <VeltCommentDialogWireframe.Options.Content.MakePrivate.Enable />
                  <VeltCommentDialogWireframe.Options.Content.MakePrivate.Disable />
              </VeltCommentDialogWireframe.Options.Content.MakePrivate>
              <VeltCommentDialogWireframe.Options.Content.Assign />
              <VeltCommentDialogWireframe.Options.Content.Edit />
              <VeltCommentDialogWireframe.Options.Content.Delete>
                  <VeltCommentDialogWireframe.Options.Content.Delete.Thread />
                  <VeltCommentDialogWireframe.Options.Content.Delete.Comment />
              </VeltCommentDialogWireframe.Options.Content.Delete>
              <VeltCommentDialogWireframe.Options.Content.Notification>
                  <VeltCommentDialogWireframe.Options.Content.Notification.Subscribe />
                  <VeltCommentDialogWireframe.Options.Content.Notification.Unsubscribe />
              </VeltCommentDialogWireframe.Options.Content.Notification>
          </VeltCommentDialogWireframe.Options.Content>
      </VeltCommentDialogWireframe.Options>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-options-wireframe> <!-- This parent wireframe scopes the changes to only the header options dropdown. -->
          <velt-comment-dialog-options-dropdown-trigger-wireframe></velt-comment-dialog-options-dropdown-trigger-wireframe>
          <velt-comment-dialog-options-dropdown-content-wireframe> 
              <velt-comment-dialog-options-dropdown-content-make-private-wireframe>
                  <velt-comment-dialog-options-dropdown-content-make-private-enable-wireframe></velt-comment-dialog-options-dropdown-content-make-private-enable-wireframe>
                  <velt-comment-dialog-options-dropdown-content-make-private-disable-wireframe></velt-comment-dialog-options-dropdown-content-make-private-disable-wireframe>
              </velt-comment-dialog-options-dropdown-content-make-private-wireframe>
              <velt-comment-dialog-options-dropdown-content-assign-wireframe></velt-comment-dialog-options-dropdown-content-assign-wireframe>
              <velt-comment-dialog-options-dropdown-content-edit-wireframe></velt-comment-dialog-options-dropdown-content-edit-wireframe>
              <velt-comment-dialog-options-dropdown-content-delete-wireframe>
                  <velt-comment-dialog-options-dropdown-content-delete-thread-wireframe></velt-comment-dialog-options-dropdown-content-delete-thread-wireframe>
                  <velt-comment-dialog-options-dropdown-content-delete-comment-wireframe></velt-comment-dialog-options-dropdown-content-delete-comment-wireframe>
              </velt-comment-dialog-options-dropdown-content-delete-wireframe>
              <velt-comment-dialog-options-dropdown-content-notification-wireframe>
                  <velt-comment-dialog-options-dropdown-content-notification-subscribe-wireframe></velt-comment-dialog-options-dropdown-content-notification-subscribe-wireframe>
                  <velt-comment-dialog-options-dropdown-content-notification-unsubscribe-wireframe></velt-comment-dialog-options-dropdown-content-notification-unsubscribe-wireframe>
              </velt-comment-dialog-options-dropdown-content-notification-wireframe>
          </velt-comment-dialog-options-dropdown-content-wireframe>
      </velt-comment-dialog-options-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/priority-dropdown

The subcomponent of the Comment Dialog that represents the Priority Dropdown

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/priority-dropdown-customization.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Priority>
          <VeltCommentDialogWireframe.Priority.Trigger>
              <VeltCommentDialogWireframe.Priority.Trigger.Icon />
              <VeltCommentDialogWireframe.Priority.Trigger.Name />
              <VeltCommentDialogWireframe.Priority.Trigger.Arrow />
          </VeltCommentDialogWireframe.Priority.Trigger>
          <VeltCommentDialogWireframe.Priority.Content>
              <VeltCommentDialogWireframe.Priority.Content.Item>
                  <VeltCommentDialogWireframe.Priority.Content.Item.Icon />
                  <VeltCommentDialogWireframe.Priority.Content.Item.Name />
                  <VeltCommentDialogWireframe.Priority.Content.Item.Tick />
              </VeltCommentDialogWireframe.Priority.Content.Item>
          </VeltCommentDialogWireframe.Priority.Content>
      </VeltCommentDialogWireframe.Priority>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-priority-dropdown-trigger-wireframe>
          <velt-comment-dialog-priority-dropdown-trigger-icon-wireframe></velt-comment-dialog-priority-dropdown-trigger-icon-wireframe>
          <velt-comment-dialog-priority-dropdown-trigger-name-wireframe></velt-comment-dialog-priority-dropdown-trigger-name-wireframe>
          <velt-comment-dialog-priority-dropdown-trigger-arrow-wireframe></velt-comment-dialog-priority-dropdown-trigger-arrow-wireframe>
      </velt-comment-dialog-priority-dropdown-trigger-wireframe>
      <velt-comment-dialog-priority-dropdown-content-wireframe>
          <velt-comment-dialog-priority-dropdown-content-item-wireframe>
              <velt-comment-dialog-priority-dropdown-content-item-icon-wireframe></velt-comment-dialog-priority-dropdown-content-item-icon-wireframe>
              <velt-comment-dialog-priority-dropdown-content-item-name-wireframe></velt-comment-dialog-priority-dropdown-content-item-name-wireframe>
              <velt-comment-dialog-priority-dropdown-content-item-tick-wireframe></velt-comment-dialog-priority-dropdown-content-item-tick-wireframe>
          </velt-comment-dialog-priority-dropdown-content-item-wireframe>
      </velt-comment-dialog-priority-dropdown-content-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/private-banner

The subcomponent of the Comment Dialog that is shown near the Header when the Comment is a Private Comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-1.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.PrivateBanner />
  </VeltWireframe>
  ```

  ```HTML HTML 
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-ghost-banner-wireframe></velt-comment-dialog-ghost-banner-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/reaction-pin

The subcomponent of the Comment Dialog that represents the the Reaction Pin that appears after a User selects a Reaction.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/reaction-pin-customization.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltReactionPinWireframe>
          <VeltReactionPinWireframe.Emoji />
          <VeltReactionPinWireframe.Count />
      </VeltReactionPinWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-reaction-pin-wireframe>
          <velt-reaction-pin-emoji-wireframe><velt-reaction-pin-emoji-wireframe>
          <velt-reaction-pin-count-wireframe><velt-reaction-pin-count-wireframe>
      </velt-reaction-pin-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/reaction-pin-tooltip

The subcomponent of the Comment Dialog that represents the tooltip that appears when a User hovers over a Reaction

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/reaction-tooltip-customization.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltReactionPinTooltipWireframe>
          <VeltReactionPinTooltipWireframe.Users>
              <VeltReactionPinTooltipWireframe.Users.User>
                  <VeltReactionPinTooltipWireframe.Users.User.Avatar />
                  <VeltReactionPinTooltipWireframe.Users.User.Name />
              </VeltReactionPinTooltipWireframe.Users.User>
          </VeltReactionPinTooltipWireframe.Users>
      </VeltReactionPinTooltipWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML 
  <velt-wireframe style="display:none;">
      <velt-reaction-pin-tooltip-wireframe>
          <velt-reaction-pin-tooltip-users-wireframe>
              <velt-reaction-pin-tooltip-user-wireframe>
                  <velt-reaction-pin-tooltip-user-avatar-wireframe></velt-reaction-pin-tooltip-user-avatar-wireframe>
                  <velt-reaction-pin-tooltip-user-name-wireframe></velt-reaction-pin-tooltip-user-name-wireframe>
              </velt-reaction-pin-tooltip-user-wireframe>
          </velt-reaction-pin-tooltip-users-wireframe>
      </velt-reaction-pin-tooltip-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/reaction-tool

The subcomponent of the Comment Dialog that represents the button used to add a Reaction

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/reaction-tool-customization.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltReactionToolWireframe>
      # Your custom element
      </VeltReactionToolWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
       <velt-reaction-tool-wireframe>
      # Your custom element
      </velt-reaction-tool-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/reactions-panel

The subcomponent of the Comment Dialog that represents the panel of all Reactions that have been added to a Comment

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/reaction-panel-customization.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltReactionsPanelWireframe>
          <VeltReactionsPanelWireframe.Items>
              <VeltReactionsPanelWireframe.Items.Item>
                  <VeltReactionsPanelWireframe.Items.Item.Emoji />
              </VeltReactionsPanelWireframe.Items.Item>
          </VeltReactionsPanelWireframe.Items>
       </VeltReactionsPanelWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-reactions-panel-wireframe>
          <velt-reactions-panel-items-wireframe>
              <velt-reactions-panel-item-wireframe>
                  <velt-reactions-panel-item-emoji-wireframe></velt-reactions-panel-item-emoji-wireframe>
              </velt-reactions-panel-item-wireframe>
          </velt-reactions-panel-items-wireframe>
      </velt-reactions-panel-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/sign-in

The subcomponent of the Comment Dialog that represents the Sign In button that appears when a User is a Guest User

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-10.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.SignIn />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-sign-in-wireframe></velt-comment-dialog-sign-in-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/status-dropdown

The subcomponent of the Comment Dialog that represents the Status Dropdown

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/status-dropdown-customization.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Status>
          <VeltCommentDialogWireframe.Status.Trigger>
              <VeltCommentDialogWireframe.Status.Trigger.Icon />
              <VeltCommentDialogWireframe.Status.Trigger.Name />
              <VeltCommentDialogWireframe.Status.Trigger.Arrow />
          </VeltCommentDialogWireframe.Status.Trigger>
          <VeltCommentDialogWireframe.Status.Content>
              <VeltCommentDialogWireframe.Status.Content.Item>
                  <VeltCommentDialogWireframe.Status.Content.Item.Icon />
                  <VeltCommentDialogWireframe.Status.Content.Item.Name />
              </VeltCommentDialogWireframe.Status.Content.Item>
          </VeltCommentDialogWireframe.Status.Content>
      </VeltCommentDialogWireframe.Status>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-status-dropdown-trigger-wireframe>
          <velt-comment-dialog-status-dropdown-trigger-icon-wireframe></velt-comment-dialog-status-dropdown-trigger-icon-wireframe>
          <velt-comment-dialog-status-dropdown-trigger-name-wireframe></velt-comment-dialog-status-dropdown-trigger-name-wireframe>
          <velt-comment-dialog-status-dropdown-trigger-arrow-wireframe></velt-comment-dialog-status-dropdown-trigger-arrow-wireframe>
      </velt-comment-dialog-status-dropdown-trigger-wireframe>

      <velt-comment-dialog-status-dropdown-content-wireframe>
          <velt-comment-dialog-status-dropdown-content-item-wireframe>
              <velt-comment-dialog-status-dropdown-content-item-icon-wireframe></velt-comment-dialog-status-dropdown-content-item-icon-wireframe>
              <velt-comment-dialog-status-dropdown-content-item-name-wireframe></velt-comment-dialog-status-dropdown-content-item-name-wireframe>
          </velt-comment-dialog-status-dropdown-content-item-wireframe>
      </velt-comment-dialog-status-dropdown-content-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/suggestion-action

The subcomponent of the Comment Dialog that represents the Accept or Reject button is Moderator Mode.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-12.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.SuggestionAction>
          <VeltCommentDialogWireframe.SuggestionAction.Accept />
          <VeltCommentDialogWireframe.SuggestionAction.Reject />
      </VeltCommentDialogWireframe.SuggestionAction>
  </VeltWireframe>
  ```

  ```HTML HTML 
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-suggestion-action-wireframe>
          <velt-comment-dialog-suggestion-action-accept-wireframe></velt-comment-dialog-suggestion-action-accept-wireframe>
          <velt-comment-dialog-suggestion-action-reject-wireframe></velt-comment-dialog-suggestion-action-reject-wireframe>
      </velt-comment-dialog-suggestion-action-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-dialog/subcomponents/upgrade

The subcomponent of the Comment Dialog that represents the Upgrade button.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-11.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentDialogWireframe.Upgrade />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-dialog-upgrade-wireframe></velt-comment-dialog-upgrade-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-pin/overview

The Pin that appears on the DOM when you place a Comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default comment pin component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-pin-light.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-pin-all-states-light.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentPinWireframe>
          {/* Ghost Comment Indicator */}
          <VeltCommentPinWireframe.GhostCommentIndicator/>
          {/* Index */}
          <VeltCommentPinWireframe.Index/>
          {/* Private Comment Indicator */}
          <VeltCommentPinWireframe.PrivateCommentIndicator/>
          {/* Triangle */}
          <VeltCommentPinWireframe.Triangle/>
          {/* Unread Comment Indicator */}
          <VeltCommentPinWireframe.UnreadCommentIndicator/>
      </VeltCommentPinWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-pin-wireframe>
          <!-- Ghost Comment Indicator -->
          <velt-comment-pin-ghost-comment-indicator-wireframe></velt-comment-pin-ghost-comment-indicator-wireframe>
          <!-- Index -->
          <velt-comment-pin-index-wireframe></velt-comment-pin-index-wireframe>
          <!-- Private Comment Indicator -->
          <velt-comment-pin-private-comment-indicator-wireframe></velt-comment-pin-private-comment-indicator-wireframe>
          <!-- Triangle -->
          <velt-comment-pin-triangle-wireframe></velt-comment-pin-triangle-wireframe>
          <!-- Unread Comment Indicator -->
          <velt-comment-pin-unread-comment-indicator-wireframe></velt-comment-pin-unread-comment-indicator-wireframe>
      </velt-comment-pin-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-pin/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```jsx
    <VeltComments pinShadowDOM={false} />
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enablePinShadowDOM();
    commentElement.disablePinShadowDOM();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```jsx
    <velt-comments pin-shadow-dom="false"></velt-comments>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enablePinShadowDOM();
    commentElement.disablePinShadowDOM();
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-pin-1.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-pin-2.png)
By default, all components are in Light Mode, but there are several properties and methods to enable Dark Mode.

`Default: false`

Below are the examples to enable Dark Mode for comments pin:

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```js
    <VeltComments pinDarkMode={true}/>
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```js
    <velt-comments pin-dark-mode="true"></velt-comments>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-pin/subcomponents/ghost-comment-indicator

The subcomponent on the Comment Pin that indicates whether the Comment is a Ghost Comment

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/Ghost_comments.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentPinWireframe.GhostCommentIndicator />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-pin-ghost-comment-indicator-wireframe></velt-comment-pin-ghost-comment-indicator-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-pin/subcomponents/index

The subcomponent on the Comment Pin that indicates the index number of the Comment

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/Index_counter.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentPinWireframe.Index/>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-pin-index-wireframe></velt-comment-pin-index-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-pin/subcomponents/private-comment-indicator

The subcomponent on the Comment Pin that indicates whether the Comment is a Private Comment

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/Private_comments.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentPinWireframe.PrivateCommentIndicator/>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-pin-private-comment-indicator-wireframe></velt-comment-pin-private-comment-indicator-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-pin/subcomponents/triangle

The subcomponent on the Comment Pin that appears as a triangle in the top right corner of a Popover Comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/Cell_indicator.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentPinWireframe.Triangle/>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-pin-triangle-wireframe></velt-comment-pin-triangle-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-pin/subcomponents/unread-comment-indicator

The subcomponent on the Comment Pin that indicates whether a Comment hasn't been read yet by the User.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/Unread_indicator.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentPinWireframe.UnreadCommentIndicator/>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-pin-unread-comment-indicator-wireframe></velt-comment-pin-unread-comment-indicator-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-player-timeline/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

### Example

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentPlayerTimeline shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comment-player-timeline shadow-dom="false"></velt-comment-player-timeline>
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-tool/overview

The button to add new comments.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default comment tool component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-tool-light.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentToolWireframe>
      # Your custom element
      </VeltCommentToolWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-tool-wireframe>
      # Your custom element
      </velt-comment-tool-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-tool/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentTool shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comment-tool shadow-dom="false"></velt-comment-tool>
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-tool-1.png)

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltCommentTool darkMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-comment-tool dark-mode="true"></velt-comment-tool>
    ```
  </Tab>
</Tabs>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/comment-video-player/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

### Example

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltVideoPlayer shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-video-player shadow-dom="false"></velt-video-player>
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/overview



<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default comments sidebar component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/sidebar-light.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/sidebar-breakdown-light.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe>
          {/* Skeleton */}
          <VeltCommentsSidebarWireframe.Skeleton />
          <VeltCommentsSidebarWireframe.Panel>
              {/* Header - Contains search, status filters, close button etc */}
              <VeltCommentsSidebarWireframe.Header />
              {/* Custom Action Button - Use to define custom filter, sorting, grouping */}
              <VeltCommentsSidebarWireframe.ActionButton id="all" type="toggle" />
              {/* Filter - The filter panel that contains the default system filters */}
              <VeltCommentsSidebarWireframe.Filter />
              {/* List - The list of comments that appear in the sidebar */}
              <VeltCommentsSidebarWireframe.List />
              {/* Empty Placeholder - The placeholder that appears when there are no comments */}
              <VeltCommentsSidebarWireframe.EmptyPlaceholder />
              {/* Reset Filter Button - Not included in default component */}
              <VeltCommentsSidebarWireframe.ResetFilterButton />
              {/* Page Mode Composer - The composer that appears when the page mode is enabled */}
              <VeltCommentsSidebarWireframe.PageModeComposer />
          </VeltCommentsSidebarWireframe.Panel>
          {/* Focused Thread - This only appears when focused thread mode is enabled */}
          <VeltCommentsSidebarWireframe.FocusedThread />
      </VeltCommentsSidebarWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-wireframe>
          <!-- Skeleton -->
          <velt-comments-sidebar-skeleton-wireframe></velt-comments-sidebar-skeleton-wireframe>
          <velt-comments-sidebar-panel-wireframe>
              <!-- Header -->
              <velt-comments-sidebar-header-wireframe></velt-comments-sidebar-header-wireframe>
              <!-- Custom Action Button - Use to define custom filter, sorting, grouping -->
              <velt-comments-sidebar-action-button-wireframe id="all" type="toggle"></velt-comments-sidebar-action-button-wireframe>
              <!-- Comments Sidebar -->
              <velt-comments-sidebar-filter-wireframe></velt-comments-sidebar-filter-wireframe>
              <!-- List -->
              <velt-comments-sidebar-list-wireframe></velt-comments-sidebar-list-wireframe>
              <!-- Empty Placeholder -->
              <velt-comments-sidebar-empty-placeholder-wireframe></velt-comments-sidebar-empty-placeholder-wireframe>
              <!-- Reset Filter Button - Not included in default component -->
              <velt-comments-sidebar-reset-filter-button-wireframe></velt-comments-sidebar-reset-filter-button-wireframe>
              <!-- Page Mode Composer-->
              <velt-comments-sidebar-page-mode-composer-wireframe></velt-comments-sidebar-page-mode-composer-wireframe>
          </velt-comments-sidebar-panel-wireframe>
      </velt-comments-sidebar-wireframe>
      
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```jsx
    <VeltCommentsSidebar shadowDom={false} />
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableSidebarShadowDOM();
    commentElement.disableSidebarShadowDOM();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```jsx
    <velt-comments-sidebar shadow-dom="false"></velt-comments-sidebar>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableSidebarShadowDOM();
    commentElement.disableSidebarShadowDOM();
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-sidebar-1.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/sidebar-breakdown-dark.png)
By default, all components are in Light Mode, but there are several properties and methods to enable Dark Mode.

`Default: false`

To enable Dark Mode for comments sidebar:

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```js
    <VeltCommentsSidebar darkMode={true} />
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```js
    <velt-comments-sidebar dark-mode="true"></velt-comments-sidebar>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/empty-placeholder

The subcomponent of the Comments Sidebar that represents the placeholder when there are no Comments

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/sidebar-placeholder.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.EmptyPlaceholder/>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-empty-placeholder-wireframe></velt-comments-sidebar-empty-placeholder-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/overview

The subcomponent of the Comments Sidebar that represents the filter that is used to filter what Comments appear in the Sidebar

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/sidebar-filter.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter>
          {/* Title */}
          <VeltCommentsSidebarWireframe.Filter.Title />
          {/* Close Button */}
          <VeltCommentsSidebarWireframe.Filter.CloseButton />
          {/* Location */}
          <VeltCommentsSidebarWireframe.Filter.Location />
          {/* People */}
          <VeltCommentsSidebarWireframe.Filter.People />
          {/* Tagged */}
          <VeltCommentsSidebarWireframe.Filter.Tagged />
          {/* Assigned */}
          <VeltCommentsSidebarWireframe.Filter.Assigned />
          {/* Category */}
          <VeltCommentsSidebarWireframe.Filter.Category />
          {/* Priority */}
          <VeltCommentsSidebarWireframe.Filter.Priority />
          {/* CommentType */}
          <VeltCommentsSidebarWireframe.Filter.CommentType />
          {/* Versions */}
          <VeltCommentsSidebarWireframe.Filter.Versions />
          {/* Status */}
          <VeltCommentsSidebarWireframe.Filter.Status />
          {/* GroupBy */}
          <VeltCommentsSidebarWireframe.Filter.GroupBy />
          {/* Reset Button */}
          <VeltCommentsSidebarWireframe.Filter.ResetButton />
          {/* Done Button */}
          <VeltCommentsSidebarWireframe.Filter.DoneButton />
      </VeltCommentsSidebarWireframe.Filter>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-wireframe>
          <!--  Title -->
          <velt-comments-sidebar-filter-title-wireframe></velt-comments-sidebar-filter-title-wireframe>
          <!--  Close Button -->
          <velt-comments-sidebar-filter-close-button-wireframe></velt-comments-sidebar-filter-close-button-wireframe>
          <!--  Location -->
          <velt-comments-sidebar-filter-location-wireframe></velt-comments-sidebar-filter-location-wireframe>
          <!-- People -->
          <velt-comments-sidebar-filter-people-wireframe></velt-comments-sidebar-filter-people-wireframe>
          <!-- Tagged -->
          <velt-comments-sidebar-filter-tagged-wireframe></velt-comments-sidebar-filter-tagged-wireframe>
          <!-- Assigned -->
          <velt-comments-sidebar-filter-assigned-wireframe></velt-comments-sidebar-filter-assigned-wireframe>
          <!-- Category -->
          <velt-comments-sidebar-filter-category-wireframe></velt-comments-sidebar-filter-category-wireframe>
          <!-- Comment Type -->
          <velt-comments-sidebar-filter-comment-type-wireframe></velt-comments-sidebar-filter-comment-type-wireframe>
          <!-- Priority -->
          <velt-comments-sidebar-filter-priority-wireframe></velt-comments-sidebar-filter-priority-wireframe>
          <!-- Status -->
          <velt-comments-sidebar-filter-status-wireframe></velt-comments-sidebar-filter-status-wireframe>
          <!-- Versions -->
          <velt-comments-sidebar-filter-versions-wireframe></velt-comments-sidebar-filter-versions-wireframe>
          <!-- Group By -->
          <velt-comments-sidebar-filter-group-by-wireframe></velt-comments-sidebar-filter-group-by-wireframe>
          <!-- Reset Button -->
          <velt-comments-sidebar-filter-reset-button-wireframe></velt-comments-sidebar-filter-reset-button-wireframe>
          <!-- Done Button -->
          <velt-comments-sidebar-filter-done-button-wireframe></velt-comments-sidebar-filter-done-button-wireframe>
      </velt-comments-sidebar-filter-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Assigned
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/assigned

The subcomponent of the Comments Sidebar Filter that represents the Tagged filter

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Assigned>
          <VeltCommentsSidebarWireframe.Filter.Assigned.Name />

          {/* Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. */}
          <VeltCommentsSidebarWireframe.Filter.Assigned.Search>
              <VeltCommentsSidebarWireframe.Filter.Assigned.Search.Tags>
                  <VeltCommentsSidebarWireframe.Filter.Assigned.Search.Tags.Item>
                      <VeltCommentsSidebarWireframe.Filter.Assigned.Search.Tags.Item.Name />
                      <VeltCommentsSidebarWireframe.Filter.Assigned.Search.Tags.Item.Close />
                  </VeltCommentsSidebarWireframe.Filter.Assigned.Search.Tags.Item>
              </VeltCommentsSidebarWireframe.Filter.Assigned.Search.Tags>
              <VeltCommentsSidebarWireframe.Filter.Assigned.Search.HiddenCount />
              <VeltCommentsSidebarWireframe.Filter.Assigned.Search.Input />
              <VeltCommentsSidebarWireframe.Filter.Assigned.Search.DropdownIcon />
          </VeltCommentsSidebarWireframe.Filter.Assigned.Search>

          {/* Checklist: It's visible by default. */}
          <VeltCommentsSidebarWireframe.Filter.Assigned.Item>
              <VeltCommentsSidebarWireframe.Filter.Assigned.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.Assigned.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.Assigned.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.Assigned.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.Assigned.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.Assigned.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.Assigned.Item>
      </VeltCommentsSidebarWireframe.Filter.Assigned>
  </VeltWireframe>
  ```

  ```HTML HTML  
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-assigned-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>

          <!-- Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. -->
          <velt-comments-sidebar-filter-search-wireframe>
              <velt-comments-sidebar-filter-search-tags-wireframe>
                  <velt-comments-sidebar-filter-search-tags-item-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-name-wireframe></velt-comments-sidebar-filter-search-tags-item-name-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-close-wireframe></velt-comments-sidebar-filter-search-tags-item-close-wireframe>
                  </velt-comments-sidebar-filter-search-tags-item-wireframe>
              </velt-comments-sidebar-filter-search-tags-wireframe>
              <velt-comments-sidebar-filter-search-hidden-count-wireframe></velt-comments-sidebar-filter-search-hidden-count-wireframe>
              <velt-comments-sidebar-filter-search-input-wireframe></velt-comments-sidebar-filter-search-input-wireframe>
              <velt-comments-sidebar-filter-search-dropdown-icon-wireframe></velt-comments-sidebar-filter-search-dropdown-icon-wireframe>
          </velt-comments-sidebar-filter-search-wireframe>

          <!-- Checklist: It's visible by default. -->
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-assigned-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Category
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/category

The subcomponent of the Comments Sidebar Filter that represents the Category

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-category.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Category>
          <VeltCommentsSidebarWireframe.Filter.Category.Name />

          {/* Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. */}
          <VeltCommentsSidebarWireframe.Filter.Category.Search>
              <VeltCommentsSidebarWireframe.Filter.Category.Search.Tags>
                  <VeltCommentsSidebarWireframe.Filter.Category.Search.Tags.Item>
                      <VeltCommentsSidebarWireframe.Filter.Category.Search.Tags.Item.Name />
                      <VeltCommentsSidebarWireframe.Filter.Category.Search.Tags.Item.Close />
                  </VeltCommentsSidebarWireframe.Filter.Category.Search.Tags.Item>
              </VeltCommentsSidebarWireframe.Filter.Category.Search.Tags>
              <VeltCommentsSidebarWireframe.Filter.Category.Search.HiddenCount />
              <VeltCommentsSidebarWireframe.Filter.Category.Search.Input />
              <VeltCommentsSidebarWireframe.Filter.Category.Search.DropdownIcon />
          </VeltCommentsSidebarWireframe.Filter.Category.Search>

          {/* Checklist: It's visible by default. */}
          <VeltCommentsSidebarWireframe.Filter.Category.Item>
              <VeltCommentsSidebarWireframe.Filter.Category.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.Category.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.Category.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.Category.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.Category.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.Category.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.Category.Item>
      </VeltCommentsSidebarWireframe.Filter.Category>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-category-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>

          <!-- Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. -->
          <velt-comments-sidebar-filter-search-wireframe>
              <velt-comments-sidebar-filter-search-tags-wireframe>
                  <velt-comments-sidebar-filter-search-tags-item-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-name-wireframe></velt-comments-sidebar-filter-search-tags-item-name-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-close-wireframe></velt-comments-sidebar-filter-search-tags-item-close-wireframe>
                  </velt-comments-sidebar-filter-search-tags-item-wireframe>
              </velt-comments-sidebar-filter-search-tags-wireframe>
              <velt-comments-sidebar-filter-search-hidden-count-wireframe></velt-comments-sidebar-filter-search-hidden-count-wireframe>
              <velt-comments-sidebar-filter-search-input-wireframe></velt-comments-sidebar-filter-search-input-wireframe>
              <velt-comments-sidebar-filter-search-dropdown-icon-wireframe></velt-comments-sidebar-filter-search-dropdown-icon-wireframe>
          </velt-comments-sidebar-filter-search-wireframe>

          <!-- Checklist: It's visible by default. -->
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-category-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/close-button

The subcomponent of the Comments Sidebar Filter that represents the Close button

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-close.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.CloseButton />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-close-button-wireframe></velt-comments-sidebar-filter-close-button-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Comment Type
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/comment-type

The subcomponent of the Comments Sidebar Filter that represents the Comment Type filter

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/comment-type-filter.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.CommentType>
          <VeltCommentsSidebarWireframe.Filter.CommentType.Name />
          <VeltCommentsSidebarWireframe.Filter.CommentType.Item>
              <VeltCommentsSidebarWireframe.Filter.CommentType.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.CommentType.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.CommentType.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.CommentType.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.CommentType.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.CommentType.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.CommentType.Item>
      </VeltCommentsSidebarWireframe.Filter.CommentType>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-comment-type-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-comment-type-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/done-button

The subcomponent of the Comments Sidebar Filter that represents the Done Button

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-done.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.DoneButton />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-done-button-wireframe></velt-comments-sidebar-filter-done-button-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item

Used to customize all the filter option items of the Comments Sidebar Filter at once

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-item.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Item>
          <VeltCommentsSidebarWireframe.Filter.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.Item.Checkbox.Checked />
              <VeltCommentsSidebarWireframe.Filter.Item.Checkbox.Unchecked />
          </VeltCommentsSidebarWireframe.Filter.Item.Checkbox>
          <VeltCommentsSidebarWireframe.Filter.Item.Name />
          <VeltCommentsSidebarWireframe.Filter.Item.Count />
     </VeltCommentsSidebarWireframe.Filter.Item>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-item-wireframe>
          <velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-checked-wireframe></velt-comments-sidebar-filter-item-checkbox-checked-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-unchecked-wireframe></velt-comments-sidebar-filter-item-checkbox-unchecked-wireframe>
          </velt-comments-sidebar-filter-item-checkbox-wireframe>
          <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
          <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
      </velt-comments-sidebar-filter-item-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/groupby

The subcomponent of the Comments Sidebar Filter that represents the Groupby filter option

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-groupby.png)

<RequestExample>
  ```jsx eact / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.GroupBy>
          <VeltCommentsSidebarWireframe.Filter.GroupBy.Name />
          <VeltCommentsSidebarWireframe.Filter.GroupBy.Item>
              <VeltCommentsSidebarWireframe.Filter.GroupBy.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.GroupBy.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.GroupBy.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.GroupBy.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.GroupBy.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.GroupBy.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.GroupBy.Item>
      </VeltCommentsSidebarWireframe.Filter.GroupBy>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-group-by-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-group-by-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Location
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/location

The subcomponent of the Comments Sidebar Filter that represents the Location filter

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-location.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Location>
          <VeltCommentsSidebarWireframe.Filter.Location.Name />

          {/* Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. */}
          <VeltCommentsSidebarWireframe.Filter.Location.Search>
              <VeltCommentsSidebarWireframe.Filter.Location.Search.Tags>
                  <VeltCommentsSidebarWireframe.Filter.Location.Search.Tags.Item>
                      <VeltCommentsSidebarWireframe.Filter.Location.Search.Tags.Item.Name />
                      <VeltCommentsSidebarWireframe.Filter.Location.Search.Tags.Item.Close />
                  </VeltCommentsSidebarWireframe.Filter.Location.Search.Tags.Item>
              </VeltCommentsSidebarWireframe.Filter.Location.Search.Tags>
              <VeltCommentsSidebarWireframe.Filter.Location.Search.HiddenCount />
              <VeltCommentsSidebarWireframe.Filter.Location.Search.Input />
              <VeltCommentsSidebarWireframe.Filter.Location.Search.DropdownIcon />
          </VeltCommentsSidebarWireframe.Filter.Location.Search>

          {/* Checklist: It's visible by default. */}
          <VeltCommentsSidebarWireframe.Filter.Location.Item>
              <VeltCommentsSidebarWireframe.Filter.Location.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.Location.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.Location.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.Location.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.Location.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.Location.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.Location.Item>

          <VeltCommentsSidebarWireframe.Filter.Location.ViewAll />
      </VeltCommentsSidebarWireframe.Filter.Location>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-location-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>

          <!-- Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. -->
          <velt-comments-sidebar-filter-search-wireframe>
              <velt-comments-sidebar-filter-search-tags-wireframe>
                  <velt-comments-sidebar-filter-search-tags-item-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-name-wireframe></velt-comments-sidebar-filter-search-tags-item-name-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-close-wireframe></velt-comments-sidebar-filter-search-tags-item-close-wireframe>
                  </velt-comments-sidebar-filter-search-tags-item-wireframe>
              </velt-comments-sidebar-filter-search-tags-wireframe>
              <velt-comments-sidebar-filter-search-hidden-count-wireframe></velt-comments-sidebar-filter-search-hidden-count-wireframe>
              <velt-comments-sidebar-filter-search-input-wireframe></velt-comments-sidebar-filter-search-input-wireframe>
              <velt-comments-sidebar-filter-search-dropdown-icon-wireframe></velt-comments-sidebar-filter-search-dropdown-icon-wireframe>
          </velt-comments-sidebar-filter-search-wireframe>

          <!-- Checklist: It's visible by default. -->
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>

          <velt-comments-sidebar-filter-view-all-wireframe></velt-comments-sidebar-filter-view-all-wireframe>
      </velt-comments-sidebar-filter-location-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Author
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/people

The subcomponent of the Comments Sidebar Filter that represents the People filter

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-people.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.People>
          <VeltCommentsSidebarWireframe.Filter.People.Name />

          {/* Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. */}
          <VeltCommentsSidebarWireframe.Filter.People.Search>
              <VeltCommentsSidebarWireframe.Filter.People.Search.Tags>
                  <VeltCommentsSidebarWireframe.Filter.People.Search.Tags.Item>
                      <VeltCommentsSidebarWireframe.Filter.People.Search.Tags.Item.Name />
                      <VeltCommentsSidebarWireframe.Filter.People.Search.Tags.Item.Close />
                  </VeltCommentsSidebarWireframe.Filter.People.Search.Tags.Item>
              </VeltCommentsSidebarWireframe.Filter.People.Search.Tags>
              <VeltCommentsSidebarWireframe.Filter.People.Search.HiddenCount />
              <VeltCommentsSidebarWireframe.Filter.People.Search.Input />
              <VeltCommentsSidebarWireframe.Filter.People.Search.DropdownIcon />
          </VeltCommentsSidebarWireframe.Filter.People.Search>

          {/* Checklist: It's visible by default. */}
          <VeltCommentsSidebarWireframe.Filter.People.Item>
              <VeltCommentsSidebarWireframe.Filter.People.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.People.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.People.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.People.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.People.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.People.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.People.Item>
      </VeltCommentsSidebarWireframe.Filter.People>
  </VeltWireframe>
  ```

  ```HTML HTML  
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-people-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>

          <!-- Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. -->
          <velt-comments-sidebar-filter-search-wireframe>
              <velt-comments-sidebar-filter-search-tags-wireframe>
                  <velt-comments-sidebar-filter-search-tags-item-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-name-wireframe></velt-comments-sidebar-filter-search-tags-item-name-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-close-wireframe></velt-comments-sidebar-filter-search-tags-item-close-wireframe>
                  </velt-comments-sidebar-filter-search-tags-item-wireframe>
              </velt-comments-sidebar-filter-search-tags-wireframe>
              <velt-comments-sidebar-filter-search-hidden-count-wireframe></velt-comments-sidebar-filter-search-hidden-count-wireframe>
              <velt-comments-sidebar-filter-search-input-wireframe></velt-comments-sidebar-filter-search-input-wireframe>
              <velt-comments-sidebar-filter-search-dropdown-icon-wireframe></velt-comments-sidebar-filter-search-dropdown-icon-wireframe>
          </velt-comments-sidebar-filter-search-wireframe>

          <!-- Checklist: It's visible by default. -->
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-people-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Priority
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/priority

The subcomponent of the Comments Sidebar Filter that represents the Priority filter

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-priority.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Priority>
          <VeltCommentsSidebarWireframe.Filter.Priority.Name />

          {/* Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. */}
          <VeltCommentsSidebarWireframe.Filter.Priority.Search>
              <VeltCommentsSidebarWireframe.Filter.Priority.Search.Tags>
                  <VeltCommentsSidebarWireframe.Filter.Priority.Search.Tags.Item>
                      <VeltCommentsSidebarWireframe.Filter.Priority.Search.Tags.Item.Name />
                      <VeltCommentsSidebarWireframe.Filter.Priority.Search.Tags.Item.Close />
                  </VeltCommentsSidebarWireframe.Filter.Priority.Search.Tags.Item>
              </VeltCommentsSidebarWireframe.Filter.Priority.Search.Tags>
              <VeltCommentsSidebarWireframe.Filter.Priority.Search.HiddenCount />
              <VeltCommentsSidebarWireframe.Filter.Priority.Search.Input />
              <VeltCommentsSidebarWireframe.Filter.Priority.Search.DropdownIcon />
          </VeltCommentsSidebarWireframe.Filter.Priority.Search>

          {/* Checklist: It's visible by default. */}
          <VeltCommentsSidebarWireframe.Filter.Priority.Item>
              <VeltCommentsSidebarWireframe.Filter.Priority.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.Priority.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.Priority.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.Priority.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.Priority.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.Priority.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.Priority.Item>
      </VeltCommentsSidebarWireframe.Filter.Priority>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-priority-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>

          <!-- Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. -->
          <velt-comments-sidebar-filter-search-wireframe>
              <velt-comments-sidebar-filter-search-tags-wireframe>
                  <velt-comments-sidebar-filter-search-tags-item-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-name-wireframe></velt-comments-sidebar-filter-search-tags-item-name-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-close-wireframe></velt-comments-sidebar-filter-search-tags-item-close-wireframe>
                  </velt-comments-sidebar-filter-search-tags-item-wireframe>
              </velt-comments-sidebar-filter-search-tags-wireframe>
              <velt-comments-sidebar-filter-search-hidden-count-wireframe></velt-comments-sidebar-filter-search-hidden-count-wireframe>
              <velt-comments-sidebar-filter-search-input-wireframe></velt-comments-sidebar-filter-search-input-wireframe>
              <velt-comments-sidebar-filter-search-dropdown-icon-wireframe></velt-comments-sidebar-filter-search-dropdown-icon-wireframe>
          </velt-comments-sidebar-filter-search-wireframe>

          <!-- Checklist: It's visible by default. -->
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-priority-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/reset-button

The subcomponent of the Comments Sidebar Filter that represents the Reset Filter Button

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.ResetButton />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-reset-button-wireframe></velt-comments-sidebar-filter-reset-button-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Status
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/status

The subcomponent of the Comments Sidebar Filter that represents the Priority filter

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Status>
          <VeltCommentsSidebarWireframe.Filter.Status.Name />

          {/* Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. */}
          <VeltCommentsSidebarWireframe.Filter.Status.Search>
              <VeltCommentsSidebarWireframe.Filter.Status.Search.Tags>
                  <VeltCommentsSidebarWireframe.Filter.Status.Search.Tags.Item>
                      <VeltCommentsSidebarWireframe.Filter.Status.Search.Tags.Item.Name />
                      <VeltCommentsSidebarWireframe.Filter.Status.Search.Tags.Item.Close />
                  </VeltCommentsSidebarWireframe.Filter.Status.Search.Tags.Item>
              </VeltCommentsSidebarWireframe.Filter.Status.Search.Tags>
              <VeltCommentsSidebarWireframe.Filter.Status.Search.HiddenCount />
              <VeltCommentsSidebarWireframe.Filter.Status.Search.Input />
              <VeltCommentsSidebarWireframe.Filter.Status.Search.DropdownIcon />
          </VeltCommentsSidebarWireframe.Filter.Status.Search>

          {/* Checklist: It's visible by default. */}
          <VeltCommentsSidebarWireframe.Filter.Status.Item>
              <VeltCommentsSidebarWireframe.Filter.Status.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.Status.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.Status.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.Status.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.Status.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.Status.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.Status.Item>
      </VeltCommentsSidebarWireframe.Filter.Status>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-status-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>

          <!-- Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. -->
          <velt-comments-sidebar-filter-search-wireframe>
              <velt-comments-sidebar-filter-search-tags-wireframe>
                  <velt-comments-sidebar-filter-search-tags-item-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-name-wireframe></velt-comments-sidebar-filter-search-tags-item-name-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-close-wireframe></velt-comments-sidebar-filter-search-tags-item-close-wireframe>
                  </velt-comments-sidebar-filter-search-tags-item-wireframe>
              </velt-comments-sidebar-filter-search-tags-wireframe>
              <velt-comments-sidebar-filter-search-hidden-count-wireframe></velt-comments-sidebar-filter-search-hidden-count-wireframe>
              <velt-comments-sidebar-filter-search-input-wireframe></velt-comments-sidebar-filter-search-input-wireframe>
              <velt-comments-sidebar-filter-search-dropdown-icon-wireframe></velt-comments-sidebar-filter-search-dropdown-icon-wireframe>
          </velt-comments-sidebar-filter-search-wireframe>

          <!-- Checklist: It's visible by default. -->
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-status-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Tagged
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/tagged

The subcomponent of the Comments Sidebar Filter that represents the Tagged filter

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Tagged>
          <VeltCommentsSidebarWireframe.Filter.Tagged.Name />

          {/* Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. */}
          <VeltCommentsSidebarWireframe.Filter.Tagged.Search>
              <VeltCommentsSidebarWireframe.Filter.Tagged.Search.Tags>
                  <VeltCommentsSidebarWireframe.Filter.Tagged.Search.Tags.Item>
                      <VeltCommentsSidebarWireframe.Filter.Tagged.Search.Tags.Item.Name />
                      <VeltCommentsSidebarWireframe.Filter.Tagged.Search.Tags.Item.Close />
                  </VeltCommentsSidebarWireframe.Filter.Tagged.Search.Tags.Item>
              </VeltCommentsSidebarWireframe.Filter.Tagged.Search.Tags>
              <VeltCommentsSidebarWireframe.Filter.Tagged.Search.HiddenCount />
              <VeltCommentsSidebarWireframe.Filter.Tagged.Search.Input />
              <VeltCommentsSidebarWireframe.Filter.Tagged.Search.DropdownIcon />
          </VeltCommentsSidebarWireframe.Filter.Tagged.Search>

          {/* Checklist: It's visible by default. */}
          <VeltCommentsSidebarWireframe.Filter.Tagged.Item>
              <VeltCommentsSidebarWireframe.Filter.Tagged.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.Tagged.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.Tagged.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.Tagged.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.Tagged.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.Tagged.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.Tagged.Item>
      </VeltCommentsSidebarWireframe.Filter.Tagged>
  </VeltWireframe>
  ```

  ```HTML HTML  
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-tagged-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>

          <!-- Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. -->
          <velt-comments-sidebar-filter-search-wireframe>
              <velt-comments-sidebar-filter-search-tags-wireframe>
                  <velt-comments-sidebar-filter-search-tags-item-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-name-wireframe></velt-comments-sidebar-filter-search-tags-item-name-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-close-wireframe></velt-comments-sidebar-filter-search-tags-item-close-wireframe>
                  </velt-comments-sidebar-filter-search-tags-item-wireframe>
              </velt-comments-sidebar-filter-search-tags-wireframe>
              <velt-comments-sidebar-filter-search-hidden-count-wireframe></velt-comments-sidebar-filter-search-hidden-count-wireframe>
              <velt-comments-sidebar-filter-search-input-wireframe></velt-comments-sidebar-filter-search-input-wireframe>
              <velt-comments-sidebar-filter-search-dropdown-icon-wireframe></velt-comments-sidebar-filter-search-dropdown-icon-wireframe>
          </velt-comments-sidebar-filter-search-wireframe>

          <!-- Checklist: It's visible by default. -->
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-tagged-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/title

The subcomponent of the Comments Sidebar Filter that represents the Title

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-title.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Title />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-title-wireframe></velt-comments-sidebar-filter-title-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Filter Type - Versions
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/versions

The subcomponent of the Comments Sidebar Filter that represents the Version filter

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<Warning>
  You can either use this or use the global filter item wireframe to customize all the filter types of filter options at once. [Learn More](/ui-customization/features/async/comments/comments-sidebar/subcomponents/filter/subcomponents/filter-item)
</Warning>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-versions.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Filter.Versions>
          <VeltCommentsSidebarWireframe.Filter.Versions.Name />

          {/* Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. */}
          <VeltCommentsSidebarWireframe.Filter.Versions.Search>
              <VeltCommentsSidebarWireframe.Filter.Versions.Search.Tags>
                  <VeltCommentsSidebarWireframe.Filter.Versions.Search.Tags.Item>
                      <VeltCommentsSidebarWireframe.Filter.Versions.Search.Tags.Item.Name />
                      <VeltCommentsSidebarWireframe.Filter.Versions.Search.Tags.Item.Close />
                  </VeltCommentsSidebarWireframe.Filter.Versions.Search.Tags.Item>
              </VeltCommentsSidebarWireframe.Filter.Versions.Search.Tags>
              <VeltCommentsSidebarWireframe.Filter.Versions.Search.HiddenCount />
              <VeltCommentsSidebarWireframe.Filter.Versions.Search.Input />
              <VeltCommentsSidebarWireframe.Filter.Versions.Search.DropdownIcon />
          </VeltCommentsSidebarWireframe.Filter.Versions.Search>

          {/* Checklist: It's visible by default. */}
          <VeltCommentsSidebarWireframe.Filter.Versions.Item>
              <VeltCommentsSidebarWireframe.Filter.Versions.Item.Checkbox>
                  <VeltCommentsSidebarWireframe.Filter.Versions.Item.Checkbox.Checked />
                  <VeltCommentsSidebarWireframe.Filter.Versions.Item.Checkbox.Unchecked />
              </VeltCommentsSidebarWireframe.Filter.Versions.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Filter.Versions.Item.Name />
              <VeltCommentsSidebarWireframe.Filter.Versions.Item.Count />
          </VeltCommentsSidebarWireframe.Filter.Versions.Item>
      </VeltCommentsSidebarWireframe.Filter.Versions>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-filter-versions-wireframe>
          <velt-comments-sidebar-filter-name-wireframe></velt-comments-sidebar-filter-name-wireframe>

          <!-- Searchable Dropdown: It's not visible by default. You need to add the wireframe to the sidebar. -->
          <velt-comments-sidebar-filter-search-wireframe>
              <velt-comments-sidebar-filter-search-tags-wireframe>
                  <velt-comments-sidebar-filter-search-tags-item-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-name-wireframe></velt-comments-sidebar-filter-search-tags-item-name-wireframe>
                      <velt-comments-sidebar-filter-search-tags-item-close-wireframe></velt-comments-sidebar-filter-search-tags-item-close-wireframe>
                  </velt-comments-sidebar-filter-search-tags-item-wireframe>
              </velt-comments-sidebar-filter-search-tags-wireframe>
              <velt-comments-sidebar-filter-search-hidden-count-wireframe></velt-comments-sidebar-filter-search-hidden-count-wireframe>
              <velt-comments-sidebar-filter-search-input-wireframe></velt-comments-sidebar-filter-search-input-wireframe>
              <velt-comments-sidebar-filter-search-dropdown-icon-wireframe></velt-comments-sidebar-filter-search-dropdown-icon-wireframe>
          </velt-comments-sidebar-filter-search-wireframe>

          <!-- Checklist: It's visible by default. -->
          <velt-comments-sidebar-filter-item-wireframe>
              <velt-comments-sidebar-filter-item-checkbox-wireframe></velt-comments-sidebar-filter-item-checkbox-wireframe>
              <velt-comments-sidebar-filter-item-name-wireframe></velt-comments-sidebar-filter-item-name-wireframe>
              <velt-comments-sidebar-filter-item-count-wireframe></velt-comments-sidebar-filter-item-count-wireframe>
          </velt-comments-sidebar-filter-item-wireframe>
      </velt-comments-sidebar-filter-versions-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/focused-thread



<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.FocusedThread>
          {/* Back Button to back to default view with all threads */}
          <VeltCommentsSidebarWireframe.FocusedThread.BackButton />
          {/* Container that contains the comment dialog */}
          <VeltCommentsSidebarWireframe.FocusedThread.DialogContainer />
      </VeltCommentsSidebarWireframe.FocusedThread>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-focused-thread-wireframe>
          <!-- Back Button to back to default view with all threads -->
          <velt-comments-sidebar-focused-thread-back-button-wireframe></velt-comments-sidebar-focused-thread-back-button-wireframe>
          <!-- Container that contains the comment dialog -->
          <velt-comments-sidebar-focused-thread-dialog-container-wireframe></velt-comments-sidebar-focused-thread-dialog-container-wireframe>
      </velt-comments-sidebar-focused-thread-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/overview

The subcomponent of the Comments Sidebar that represents the Header of the Sidebar

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/sidebar-header.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Header>
          <VeltCommentsSidebarWireframe.CloseButton /> {/* Not shown for embedded comments sidebar */}
          <VeltCommentsSidebarWireframe.Search placeholder="Search Comments" />
          <VeltCommentsSidebarWireframe.Status/>

          {/* Not included in the default component */}
          <VeltCommentsSidebarWireframe.LocationFilterDropdown/>

          {/* Not included in the default component */}
          <VeltCommentsSidebarWireframe.MinimalFilterDropdown/>

          {/* Not included in the default component */}
          <VeltCommentsSidebarWireframe.MinimalActionsDropdown/>

          <VeltCommentsSidebarWireframe.FilterButton/>
      </VeltCommentsSidebarWireframe.Header>
  </VeltWireframe>
  ```

  ```HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-header-wireframe>
          <velt-comments-sidebar-close-button-wireframe></velt-comments-sidebar-close-button-wireframe> <!-- Not shown for embedded comments sidebar -->
          <velt-comments-sidebar-search-wireframe placeholder="Search Comments"></velt-comments-sidebar-search-wireframe>
          <velt-comments-sidebar-status-wireframe></velt-comments-sidebar-status-wireframe>

          <!-- Not included in the default component -->
          <velt-comments-sidebar-location-filter-dropdown-wireframe></velt-comments-sidebar-location-filter-dropdown-wireframe>

          <!-- Not included in the default component -->
          <velt-comments-sidebar-minimal-filter-dropdown-wireframe></velt-comments-sidebar-minimal-filter-dropdown-wireframe>

          <!-- Not included in the default component -->
          <velt-comments-sidebar-minimal-actions-dropdown-wireframe></velt-comments-sidebar-minimal-actions-dropdown-wireframe>

          <velt-comments-sidebar-filter-button-wireframe></velt-comments-sidebar-filter-button-wireframe>
      </velt-comments-sidebar-header-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/location-filter-dropdown/overview



<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

This component is not included in the default Comments Sidebar component. You need to explicitly add it to the sidebar wireframe.

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.LocationFilterDropdown>
          <VeltCommentsSidebarWireframe.LocationFilterDropdown.Trigger>
              <VeltCommentsSidebarWireframe.LocationFilterDropdown.Trigger.Label />
          </VeltCommentsSidebarWireframe.LocationFilterDropdown.Trigger>
          <VeltCommentsSidebarWireframe.LocationFilterDropdown.Content />
      </VeltCommentsSidebarWireframe.LocationFilterDropdown>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-location-filter-dropdown-wireframe>
          <velt-comments-sidebar-location-filter-dropdown-trigger-wireframe>
              <velt-comments-sidebar-location-filter-dropdown-trigger-label-wireframe></velt-comments-sidebar-location-filter-dropdown-trigger-label-wireframe>
          </velt-comments-sidebar-location-filter-dropdown-trigger-wireframe>
          <velt-comments-sidebar-location-filter-dropdown-content-wireframe></velt-comments-sidebar-location-filter-dropdown-content-wireframe>
      </velt-comments-sidebar-location-filter-dropdown-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/minimal-action-dropdown/overview



<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

* This enables actions like `Mark all read` and `Mark all resolved` in the sidebar. By default it's not enabled. You need to explicitly add the wireframe to the sidebar.

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.MinimalActionsDropdown>
          <VeltCommentsSidebarWireframe.MinimalActionsDropdown.Trigger />
          <VeltCommentsSidebarWireframe.MinimalActionsDropdown.Content>
              <VeltCommentsSidebarWireframe.MinimalActionsDropdown.Content.MarkAllRead />
              <VeltCommentsSidebarWireframe.MinimalActionsDropdown.Content.MarkAllResolved />
          </VeltCommentsSidebarWireframe.MinimalActionsDropdown.Content>
      </VeltCommentsSidebarWireframe.MinimalActionsDropdown>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-minimal-actions-dropdown-wireframe>
          <velt-comments-sidebar-minimal-actions-dropdown-trigger-wireframe></velt-comments-sidebar-minimal-actions-dropdown-trigger-wireframe>
          <velt-comments-sidebar-minimal-actions-dropdown-content-wireframe>
              <velt-comments-sidebar-minimal-actions-dropdown-content-mark-all-read-wireframe></velt-comments-sidebar-minimal-actions-dropdown-content-mark-all-read-wireframe>
              <velt-comments-sidebar-minimal-actions-dropdown-content-mark-all-resolved-wireframe></velt-comments-sidebar-minimal-actions-dropdown-content-mark-all-resolved-wireframe>
          </velt-comments-sidebar-minimal-actions-dropdown-content-wireframe>
      </velt-comments-sidebar-minimal-actions-dropdown-wireframe>

  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/minimal-filter-dropdown/overview



<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

* This enables minimal filtering and sorting dropdown in the sidebar. By default it's not enabled. You need to explicitly add the wireframe to the sidebar. It includes options like:
* Filter by `All`
* Filter by `Unread`
* Filter by `Read`
* Filter by `Resolved`
* Sort by `Unread`
* Sort by `Last Updated Timestamp`

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.MinimalFilterDropdown>
          <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Trigger />
          <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content>
              <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SortDate>
                  <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SelectedIcon />
                  Sort date
              </VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SortDate>
              <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SortUnread>
                  <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SelectedIcon />
                  Sort unread
              </VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SortUnread>
              <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.FilterAll>
                  <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SelectedIcon />
                  Filter all
              </VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.FilterAll>
              <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.FilterUnread>
                  <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SelectedIcon />
                  Filter unread
              </VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.FilterUnread>
              <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.FilterRead>
                  <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SelectedIcon />
                  Filter read
              </VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.FilterRead>
              <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.FilterResolved>
                  <VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.SelectedIcon />
                  Filter resolved
              </VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content.FilterResolved>
          </VeltCommentsSidebarWireframe.MinimalFilterDropdown.Content>
      </VeltCommentsSidebarWireframe.MinimalFilterDropdown>

  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-minimal-filter-dropdown-wireframe>
          <velt-comments-sidebar-minimal-filter-dropdown-trigger-wireframe></velt-comments-sidebar-minimal-filter-dropdown-trigger-wireframe>
          <velt-comments-sidebar-minimal-filter-dropdown-content-wireframe>
              <velt-comments-sidebar-minimal-filter-dropdown-content-sort-date-wireframe>
                  <velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe></velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe>
                  Sort by date
              </velt-comments-sidebar-minimal-filter-dropdown-content-sort-date-wireframe>

              <velt-comments-sidebar-minimal-filter-dropdown-content-sort-unread-wireframe>
                  <velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe></velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe>
                  Sort by unread
              </velt-comments-sidebar-minimal-filter-dropdown-content-sort-unread-wireframe>

              <velt-comments-sidebar-minimal-filter-dropdown-content-filter-all-wireframe>
                  <velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe></velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe>
                  Unread or Read
              </velt-comments-sidebar-minimal-filter-dropdown-content-filter-all-wireframe>

              <velt-comments-sidebar-minimal-filter-dropdown-content-filter-unread-wireframe>
                  <velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe></velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe>
                  Unread only
              </velt-comments-sidebar-minimal-filter-dropdown-content-filter-unread-wireframe>

              <velt-comments-sidebar-minimal-filter-dropdown-content-filter-read-wireframe>
                  <velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe></velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe>
                  Read only
              </velt-comments-sidebar-minimal-filter-dropdown-content-filter-read-wireframe>

              <velt-comments-sidebar-minimal-filter-dropdown-content-filter-resolved-wireframe>
                  <velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe></velt-comments-sidebar-minimal-filter-dropdown-content-selected-icon-wireframe>
                  Resolved
              </velt-comments-sidebar-minimal-filter-dropdown-content-filter-resolved-wireframe>
          </velt-comments-sidebar-minimal-filter-dropdown-content-wireframe>
      </velt-comments-sidebar-minimal-filter-dropdown-wireframe>

  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/status/overview



<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/comments-sidebar-dropdown.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Status>
          <VeltCommentsSidebarWireframe.Status.Trigger />
          <VeltCommentsSidebarWireframe.Status.Content />
      </VeltCommentsSidebarWireframe.Status>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-status-dropdown-wireframe>
          <velt-comments-sidebar-status-dropdown-trigger-wireframe></velt-comments-sidebar-status-dropdown-trigger-wireframe>
          <velt-comments-sidebar-status-dropdown-content-wireframe></velt-comments-sidebar-status-dropdown-content-wireframe>
      </velt-comments-sidebar-status-dropdown-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Content
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/status/subcomponents/content



<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-status-content.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Status.Content>
          <VeltCommentsSidebarWireframe.Status.Content.Item>
          <VeltCommentsSidebarWireframe.Status.Content.Item.Icon />
          <VeltCommentsSidebarWireframe.Status.Content.Item.Name />
          <VeltCommentsSidebarWireframe.Status.Content.Item.Count />
          <VeltCommentsSidebarWireframe.Status.Content.Item.Checkbox>
              <VeltCommentsSidebarWireframe.Status.Content.Item.Checkbox.Checked />
              <VeltCommentsSidebarWireframe.Status.Content.Item.Checkbox.Unchecked />
          </VeltCommentsSidebarWireframe.Status.Content.Item.Checkbox>
          </VeltCommentsSidebarWireframe.Status.Content.Item>
      </VeltCommentsSidebarWireframe.Status.Content>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-status-dropdown-content-wireframe>
          <velt-comments-sidebar-status-dropdown-content-item-wireframe>
              <velt-comments-sidebar-status-dropdown-content-item-icon-wireframe></velt-comments-sidebar-status-dropdown-content-item-icon-wireframe>
              <velt-comments-sidebar-status-dropdown-content-item-name-wireframe></velt-comments-sidebar-status-dropdown-content-item-name-wireframe>
              <velt-comments-sidebar-status-dropdown-content-item-count-wireframe></velt-comments-sidebar-status-dropdown-content-item-count-wireframe>
              <velt-comments-sidebar-status-dropdown-content-item-checkbox-wireframe>
                  <velt-comments-sidebar-status-dropdown-content-item-checkbox-unchecked-wireframe></velt-comments-sidebar-status-dropdown-content-item-checkbox-unchecked-wireframe>
                  <velt-comments-sidebar-status-dropdown-content-item-checkbox-checked-wireframe></velt-comments-sidebar-status-dropdown-content-item-checkbox-checked-wireframe>
              </velt-comments-sidebar-status-dropdown-content-item-checkbox-wireframe>
          </velt-comments-sidebar-status-dropdown-content-item-wireframe>
      </velt-comments-sidebar-status-dropdown-content-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Trigger
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/header/subcomponents/status/subcomponents/trigger



<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/filter-status-trigger.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Status.Trigger>
          <VeltCommentsSidebarWireframe.Status.Trigger.Name />
          <VeltCommentsSidebarWireframe.Status.Trigger.Arrow />
          <VeltCommentsSidebarWireframe.Status.Trigger.Indicator />
      </VeltCommentsSidebarWireframe.Status.Trigger>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-status-dropdown-trigger-wireframe>
          <velt-comments-sidebar-status-dropdown-trigger-name-wireframe></velt-comments-sidebar-status-dropdown-trigger-name-wireframe>
          <velt-comments-sidebar-status-dropdown-trigger-arrow-wireframe></velt-comments-sidebar-status-dropdown-trigger-arrow-wireframe>
          <velt-comments-sidebar-status-dropdown-trigger-indicator-wireframe></velt-comments-sidebar-status-dropdown-trigger-indicator-wireframe>
      </velt-comments-sidebar-status-dropdown-trigger-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/list/overview

The subcomponent of the Comments Sidebar that represents the List of Comments in the Sidebar

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/list.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.List>
          <VeltCommentsSidebarWireframe.List.Item>
              <VeltCommentsSidebarWireframe.List.Item.Group />
              <VeltCommentsSidebarWireframe.List.Item.DialogContainer />
          </VeltCommentsSidebarWireframe.List.Item>
      </VeltCommentsSidebarWireframe.List>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-list-wireframe>
          <velt-comments-sidebar-list-item-wireframe>
              <velt-comments-sidebar-list-item-group-wireframe></velt-comments-sidebar-list-item-group-wireframe>
              <velt-comments-sidebar-list-item-dialog-container-wireframe></velt-comments-sidebar-list-item-dialog-container-wireframe>
          </velt-comments-sidebar-list-item-wireframe>
      </velt-comments-sidebar-list-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/list/subcomponents/dialog-container

You can customize the Comment Dialog that appears inside the Sidebar with this subcomponent

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

You can customize the Comment Dialog that appears in the Sidebar by adding a Comment Dialog Wireframe inside this subcomponent and modifying it to your liking.

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.List.Item.DialogContainer>
          <VeltCommentDialogWireframe>
              ...
          </VeltCommentDialogWireframe>
      </VeltCommentsSidebarWireframe.List.Item.DialogContainer> 
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-list-item-dialog-container-wireframe>
          <velt-comment-dialog-wireframe>
          ...
          </velt-comment-dialog-wireframe>
      </velt-comments-sidebar-list-item-dialog-container-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/list/subcomponents/group

The subcomponent of the Comments Sidebar List that represents the Group

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.List.Item.Group>
          <VeltCommentsSidebarWireframe.List.Item.Group.Name />
          <VeltCommentsSidebarWireframe.List.Item.Group.Count />
          <VeltCommentsSidebarWireframe.List.Item.Group.Arrow />
      </VeltCommentsSidebarWireframe.List.Item.Group>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-list-item-group-wireframe>
          <velt-comments-sidebar-list-item-group-name-wireframe></velt-comments-sidebar-list-item-group-name-wireframe>
          <velt-comments-sidebar-list-item-group-count-wireframe></velt-comments-sidebar-list-item-group-count-wireframe>
          <velt-comments-sidebar-list-item-group-arrow-wireframe></velt-comments-sidebar-list-item-group-arrow-wireframe>
      </velt-comments-sidebar-list-item-group-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/page-mode-composer

The subcomponent of the Comments Sidebar that represents the Composer that appears in Page Mode.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/sidebar-composer.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.PageModeComposer />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-page-mode-composer-wireframe></velt-comments-sidebar-page-mode-composer-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/reset-filter-button



<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.ResetFilterButton />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-reset-filter-button-wireframe></velt-comments-sidebar-reset-filter-button-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/sidebar-button/overview

The button that is used to open the Comments Sidebar panel.

<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default sidebar button looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/sidebar-button-light.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltSidebarButtonWireframe>
          <VeltSidebarButtonWireframe.Icon />
          <VeltSidebarButtonWireframe.CommentsCount />
      </VeltSidebarButtonWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-sidebar-button-wireframe>
          <velt-sidebar-button-icon-wireframe></velt-sidebar-button-icon-wireframe>
          <velt-sidebar-button-comments-count-wireframe></velt-sidebar-button-comments-count-wireframe>
      </velt-sidebar-button-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/sidebar-button/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```jsx
    <VeltSidebarButton shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```jsx
    <velt-sidebar-button shadow-dom="false"></velt-sidebar-button>
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/sidebar-button-dark.png)

By default, all components are in Light Mode, but there are several properties and methods to enable Dark Mode.

`Default: false`

To enable Dark Mode for sidebar button:

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```js
    <VeltSidebarButton darkMode={true} />
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```js
    <velt-sidebar-button dark-mode="true"></velt-sidebar-button>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/sidebar-button/subcomponents/comments-count

The subcomponent on the Sidebar Button that shows the total

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/sidebar-button-count.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltSidebarButtonWireframe.CommentsCount />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-sidebar-button-comments-count-wireframe></velt-sidebar-button-comments-count-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/sidebar-button/subcomponents/icon

The subcomponent on the Sidebar Button that shows the total

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/sidebar-button-icon.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltSidebarButtonWireframe.Icon />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-sidebar-button-icon-wireframe></velt-sidebar-button-icon-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/subcomponents/skeleton

The subcomponent of the Comments Sidebar that represents the Skeleton loader that appears when the Sidebar is first loading.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/sidebar-skeleton.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentsSidebarWireframe.Skeleton />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comments-sidebar-skeleton-wireframe></velt-comments-sidebar-skeleton-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/comments-sidebar/variants



## Variants

Here are the variants that you can use in Comments Sidebar:

* `variant`: This is the variant for the entire Comments Sidebar.
* `dialogVariant`: This is the variant for the Comment Dialog that appears in the Comments Sidebar.
* `pageModeComposerVariant`: This is the variant for the Comment Composer that appears in the Comments Sidebar in page mode.
* `focusedThreadDialogVariant`: This is the variant for the Comment Dialog that appears when a focused thread mode is enabled.

<RequestExample>
  ```jsx React / Next.js
  <VeltCommentsSidebar
    variant="sidebar1"
    dialogVariant="dialogInSidebar"
    pageModeComposerVariant="pageModeDialogInSidebar"
    focusedThreadDialogVariant="focusedThreadDialogInSidebar"
  />
  ```

  ```HTML HTML
  <velt-comments-sidebar
    variant="sidebar1"
    dialog-variant="dialogInSidebar"
    page-mode-composer-variant="pageModeDialogInSidebar"
    focused-thread-dialog-variant="focusedThreadDialogInSidebar"
  ></velt-comments-sidebar>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/confirm-dialog/overview

The Confirmation Dialog that appears when you delete a comment annotation.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default confirmation dialog component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/confirmation-dialog.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltConfirmDialogWireframe>
          <VeltConfirmDialogWireframe.Title></VeltConfirmDialogWireframe.Title>
          <VeltConfirmDialogWireframe.Message></VeltConfirmDialogWireframe.Message>
          <VeltConfirmDialogWireframe.RejectButton></VeltConfirmDialogWireframe.RejectButton>
          <VeltConfirmDialogWireframe.ApproveButton></VeltConfirmDialogWireframe.ApproveButton>
      </VeltConfirmDialogWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none">
      <velt-confirm-dialog-wireframe>
         <velt-confirm-dialog-title-wireframe></velt-confirm-dialog-title-wireframe>
         <velt-confirm-dialog-message-wireframe></velt-confirm-dialog-message-wireframe>
         <velt-confirm-dialog-reject-button-wireframe></velt-confirm-dialog-reject-button-wireframe>
         <velt-confirm-dialog-approve-button-wireframe></velt-confirm-dialog-approve-button-wireframe>
     </velt-confirm-dialog-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/confirm-dialog/styling



## Disable ShadowDOM

ShadowDOM is not used in this component. You can apply your styling directly to the component.

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/ui-customization/features/async/comments/confirm-dialog/images/customization/confirmation-dialog-dark.png)
This component takes the dark mode property from the parent feature (eg: comments) where this used.
If the parent feature component is in dark mode, this component will also be in dark mode.


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/inline-comments-section/overview

Components that appear when using Inline Comments

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default inline comment component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/inline-comments-overview.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltInlineCommentsSectionWireframe>
          <VeltInlineCommentsSectionWireframe.Skeleton />
          <VeltInlineCommentsSectionWireframe.Panel>
              <VeltInlineCommentsSectionWireframe.ComposerContainer />
              <VeltInlineCommentsSectionWireframe.CommentCount />
              <VeltInlineCommentsSectionWireframe.SortingDropdown />
              <VeltInlineCommentsSectionWireframe.List />
          </VeltInlineCommentsSectionWireframe.Panel>
      </VeltInlineCommentsSectionWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-inline-comments-section-wireframe>
          <velt-inline-comments-section-skeleton-wireframe></velt-inline-comments-section-skeleton-wireframe>
          <velt-inline-comments-section-panel-wireframe>
              <velt-inline-comments-section-composer-container-wireframe></velt-inline-comments-section-composer-container-wireframe>
              <velt-inline-comments-section-comment-count-wireframe></velt-inline-comments-section-comment-count-wireframe>
              <velt-inline-comments-section-sorting-dropdown-wireframe></velt-inline-comments-section-sorting-dropdown-wireframe>
              <velt-inline-comments-section-list-wireframe></velt-inline-comments-section-list-wireframe>
          </velt-inline-comments-section-panel-wireframe>
      </velt-inline-comments-section-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Variants
Source: https://docs.velt.dev/ui-customization/features/async/comments/inline-comments-section/pre-defined-variants



## Pre-defined Variants

This has two pre-deinfed variants:

1. `dialog-variant`: Use this to customize the `Comment Dialog` that appears within the `Inline Comments Section` component.
2. `variant`: Use this to customize the entire `Inline Comments Section` component itself.
3. `composer-variant`: Use this to customize the main Composer that appears within the `Inline Comments Section` component.

<RequestExample>
  ```jsx React / Next.js
  <VeltInlineCommentsSection
      targetInlineCommentElementId="custom-id"	
  	dialogVariant="dialog-variant-name"
      variant="inline-comment-section-variant-name"
      composerVariant="inline"
  />
  ```

  ```HTML HTML
  <velt-inline-comments-section
      dialog-variant="dialog-variant-name"
      variant="inline-comment-section-variant-name"
      composer-variant="inline"
  >
  </velt-inline-comments-section>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/inline-comments-section/subcomponents/panel/comment-count

The subcomponent of the Inline Comments Section that contains the Comment Count

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/inline-comments-count.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltInlineCommentsSectionWireframe.CommentCount />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-inline-comments-section-comment-count-wireframe></velt-inline-comments-section-comment-count-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/inline-comments-section/subcomponents/panel/composer-container

The subcomponent of the Inline Comments Section that contains the Composer Container

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/inline-comments-composer.png)

You can customize the Comment Dialog that appears in the Inline Comments Section by adding a Comment Dialog Wireframe inside this subcomponent and modifying it to your liking.

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltInlineCommentsSectionWireframe.ComposerContainer>
          <VeltCommentDialogWireframe.Composer>
          ...Custom Composer
          </VeltCommentDialogWireframe.Composer>
      </VeltInlineCommentsSectionWireframe.ComposerContainer>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-inline-comments-section-composer-container-wireframe>
          <velt-comment-dialog-composer-wireframe>
              ...Custom Composer
          </velt-comment-dialog-composer-wireframe>
      </velt-inline-comments-section-composer-container-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/inline-comments-section/subcomponents/panel/list

The subcomponent of the Inline Comments Section that contains the List

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/inline-comments-list.png)

You can customize the Comment Dialog that appears in the List of the Inline Comments Section by adding a Comment Dialog Wireframe inside this subcomponent and modifying it to your liking.

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltInlineCommentsSectionWireframe.List>
          <VeltCommentDialogWireframe>
          ...Custom Dialog
          </VeltCommentDialogWireframe>
      </VeltInlineCommentsSectionWireframe.List>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-inline-comments-section-list-wireframe>
          <velt-comment-dialog-wireframe>
              ...Custom Dialog
          </velt-comment-dialog-wireframe>
      </velt-inline-comments-section-list-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/inline-comments-section/subcomponents/panel/overview

The subcomponent of the Inline Comments Section that contains the Panel

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/ui-customization/features/async/comments/inline-comments-section/subcomponents/panel/images/inline-comments-breakdown.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltInlineCommentsSectionWireframe.Panel>
          <VeltInlineCommentsSectionWireframe.ComposerContainer />
          <VeltInlineCommentsSectionWireframe.CommentCount />
          <VeltInlineCommentsSectionWireframe.SortingDropdown />
          <VeltInlineCommentsSectionWireframe.List />
      </VeltInlineCommentsSectionWireframe.Panel>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-inline-comments-section-panel-wireframe>
          <velt-inline-comments-section-composer-container-wireframe></velt-inline-comments-section-composer-container-wireframe>
          <velt-inline-comments-section-comment-count-wireframe></velt-inline-comments-section-comment-count-wireframe>
          <velt-inline-comments-section-sorting-dropdown-wireframe></velt-inline-comments-section-sorting-dropdown-wireframe>
          <velt-inline-comments-section-list-wireframe></velt-inline-comments-section-list-wireframe>
      </velt-inline-comments-section-panel-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/inline-comments-section/subcomponents/panel/sorting-dropdown

The subcomponent of the Inline Comments Section that contains the Sorting Dropdown

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
       <VeltInlineCommentsSectionWireframe.SortingDropdown>

          <VeltInlineCommentsSectionWireframe.SortingDropdown.Trigger>
              <VeltInlineCommentsSectionWireframe.SortingDropdown.Trigger.Name />
              <VeltInlineCommentsSectionWireframe.SortingDropdown.Trigger.Icon />
          </VeltInlineCommentsSectionWireframe.SortingDropdown.Trigger>

          <VeltInlineCommentsSectionWireframe.SortingDropdown.Content>

              <VeltInlineCommentsSectionWireframe.SortingDropdown.Content.Item>
                  <VeltInlineCommentsSectionWireframe.SortingDropdown.Content.Item.Tick />
                  <VeltInlineCommentsSectionWireframe.SortingDropdown.Content.Item.Icon />
                  <VeltInlineCommentsSectionWireframe.SortingDropdown.Content.Item.Name />
              </VeltInlineCommentsSectionWireframe.SortingDropdown.Content.Item>

          </VeltInlineCommentsSectionWireframe.SortingDropdown.Content>

       </VeltInlineCommentsSectionWireframe.SortingDropdown>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-inline-comments-section-sorting-dropdown-wireframe>

          <velt-inline-comments-section-sorting-dropdown-trigger-wireframe>
              <velt-inline-comments-section-sorting-dropdown-trigger-name-wireframe></velt-inline-comments-section-sorting-dropdown-trigger-name-wireframe>
              <velt-inline-comments-section-sorting-dropdown-trigger-icon-wireframe></velt-inline-comments-section-sorting-dropdown-trigger-icon-wireframe>
          </velt-inline-comments-section-sorting-dropdown-trigger-wireframe>

          <velt-inline-comments-section-sorting-dropdown-content-wireframe>

              <velt-inline-comments-section-sorting-dropdown-content-item-wireframe>
                  <velt-inline-comments-section-sorting-dropdown-content-item-icon-wireframe></velt-inline-comments-section-sorting-dropdown-content-item-icon-wireframe>
                  <velt-inline-comments-section-sorting-dropdown-content-item-tick-wireframe></velt-inline-comments-section-sorting-dropdown-content-item-tick-wireframe>
                  <velt-inline-comments-section-sorting-dropdown-content-item-name-wireframe></velt-inline-comments-section-sorting-dropdown-content-item-name-wireframe>
              </velt-inline-comments-section-sorting-dropdown-content-item-wireframe>

          </velt-inline-comments-section-sorting-dropdown-content-wireframe>
      </velt-inline-comments-section-sorting-dropdown-wireframe>

  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/inline-comments-section/subcomponents/skeleton

The subcomponent of the Inline Comments Section that contains the Skeleton loader that appears when the Inline Comments Section is first loading.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default skeleton subcomponent looks like:
![](https://mintlify.s3.us-west-1.amazonaws.com/velt/ui-customization/features/async/comments/inline-comments-section/subcomponents/images/inline-comments-loading.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltInlineCommentsSectionWireframe.Skeleton />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-inline-comments-section-skeleton-wireframe></velt-inline-comments-section-skeleton-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/multithread-comment-dialog/overview



<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltMultiThreadCommentDialogWireframe>
          <VeltMultiThreadCommentDialogWireframe.CommentCount />
          <VeltMultiThreadCommentDialogWireframe.MinimalFilterDropdown />
          <VeltMultiThreadCommentDialogWireframe.MinimalActionsDropdown />
          <VeltMultiThreadCommentDialogWireframe.NewThreadButton />
          <VeltMultiThreadCommentDialogWireframe.CloseButton />
          <VeltMultiThreadCommentDialogWireframe.List />
          <VeltMultiThreadCommentDialogWireframe.ResetFilterButton />
          <VeltMultiThreadCommentDialogWireframe.ComposerContainer />
      </VeltMultiThreadCommentDialogWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-multi-thread-comment-dialog-wireframe>
          <velt-multi-thread-comment-dialog-comment-count-wireframe></velt-multi-thread-comment-dialog-comment-count-wireframe>
          <velt-multi-thread-comment-dialog-minimal-filter-dropdown-wireframe></velt-multi-thread-comment-dialog-minimal-filter-dropdown-wireframe>
          <velt-multi-thread-comment-dialog-minimal-actions-dropdown-wireframe></velt-multi-thread-comment-dialog-minimal-actions-dropdown-wireframe>
          <velt-multi-thread-comment-dialog-new-thread-button-wireframe></velt-multi-thread-comment-dialog-new-thread-button-wireframe>
          <velt-multi-thread-comment-dialog-close-button-wireframe></velt-multi-thread-comment-dialog-close-button-wireframe>
          <velt-multi-thread-comment-dialog-list-wireframe></velt-multi-thread-comment-dialog-list-wireframe>
          <velt-multi-thread-comment-dialog-reset-filter-button-wireframe></velt-multi-thread-comment-dialog-reset-filter-button-wireframe>
          <velt-multi-thread-comment-dialog-composer-container-wireframe></velt-multi-thread-comment-dialog-composer-container-wireframe>
      </velt-multi-thread-comment-dialog-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/persistent-comment-mode-banner/overview

The persistent comment mode banner that appears when persistent mode is enabled and user is adding a comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltPersistentCommentModeWireframe>
          <VeltPersistentCommentModeWireframe.CloseButton />
          <VeltPersistentCommentModeWireframe.Label>
              <VeltPersistentCommentModeWireframe.Label.Public />
              <VeltPersistentCommentModeWireframe.Label.Private />
          </VeltPersistentCommentModeWireframe.Label>
      </VeltPersistentCommentModeWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-persistent-comment-mode-wireframe>
         <velt-persistent-comment-mode-close-button-wireframe></velt-persistent-comment-mode-close-button-wireframe>
         <velt-persistent-comment-mode-label-wireframe>
             <velt-persistent-comment-mode-label-public-wireframe></velt-persistent-comment-mode-label-public-wireframe>
             <velt-persistent-comment-mode-label-private-wireframe></velt-persistent-comment-mode-label-private-wireframe>
         </velt-persistent-comment-mode-label-wireframe>
     </velt-persistent-comment-mode-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/standalone-components/comment-composer/overview



<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

This component is a thin wrapper around the [Comment Dialog Composer](/ui-customization/features/async/comments/comment-dialog/subcomponents/composer/overview) component.

## Default Component

Here's how the default comment composer component looks like:
![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-sub-7.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentComposerWireframe>
          <VeltCommentDialogWireframe.Composer>
              ... Custom Composer Wirefame
          </VeltCommentDialogWireframe.Composer>
      </VeltCommentComposerWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-composer-wireframe>
          <velt-comment-dialog-composer-wireframe>
              ... custom composer wireframe
          </velt-comment-dialog-composer-wireframe>
      </velt-comment-composer-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/standalone-components/comment-composer/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentComposer shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-composer shadow-dom="false"></velt-comment-composer>
    ```
  </Tab>
</Tabs>

## Dark Mode

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentComposer darkMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-composer dark-mode="true"></velt-comment-composer>
    ```
  </Tab>
</Tabs>


# Variants
Source: https://docs.velt.dev/ui-customization/features/async/comments/standalone-components/comment-composer/variants



* Define variants for the entire Comment Composer component. This will enable you to show different Composer UI in different parts of your app.
* Alternatively, define a variant for the Comment Dialog component and use it here. This will enable you to show different Comment Dialog UI on the DOM vs here.
* Learn more about how to define and use variants [here](/ui-customization/layout#variants).

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentComposer 
      variant="component-variant" 
      dialogVariant="dialog-variant"
    />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-composer 
      dialog-variant="dialog-variant"
      variant="component-variant"
    ></velt-comment-composer> 
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/standalone-components/comment-pin/overview

The Pin that appears on the DOM when you place a Comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default comment pin component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-pin-light.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/comment-pin-all-states-light.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentPinWireframe>
          {/* Ghost Comment Indicator */}
          <VeltCommentPinWireframe.GhostCommentIndicator/>
          {/* Index */}
          <VeltCommentPinWireframe.Index/>
          {/* Private Comment Indicator */}
          <VeltCommentPinWireframe.PrivateCommentIndicator/>
          {/* Triangle */}
          <VeltCommentPinWireframe.Triangle/>
          {/* Unread Comment Indicator */}
          <VeltCommentPinWireframe.UnreadCommentIndicator/>
      </VeltCommentPinWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-pin-wireframe>
          <!-- Ghost Comment Indicator -->
          <velt-comment-pin-ghost-comment-indicator-wireframe></velt-comment-pin-ghost-comment-indicator-wireframe>
          <!-- Index -->
          <velt-comment-pin-index-wireframe></velt-comment-pin-index-wireframe>
          <!-- Private Comment Indicator -->
          <velt-comment-pin-private-comment-indicator-wireframe></velt-comment-pin-private-comment-indicator-wireframe>
          <!-- Triangle -->
          <velt-comment-pin-triangle-wireframe></velt-comment-pin-triangle-wireframe>
          <!-- Unread Comment Indicator -->
          <velt-comment-pin-unread-comment-indicator-wireframe></velt-comment-pin-unread-comment-indicator-wireframe>
      </velt-comment-pin-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Variants
Source: https://docs.velt.dev/ui-customization/features/async/comments/standalone-components/comment-pin/variants



* Define variants for the `Velt Comment Pin` component. This is useful for customizing how the pin looks on different elements like charts, tables, etc.
* Learn more about how to define and use variants [here](/ui-customization/layout#variants).

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentPin variant="CUSTOM_VARIANT" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-pin variant="CUSTOM_VARIANT"></velt-comment-pin>
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/standalone-components/comment-thread/overview



<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

This component is a thin wrapper around the Comment Dialog component.

## Default Component

Here's how the default comment thread component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-1.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-comment-dialog-2.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltCommentThreadWireframe>
          <VeltCommentDialogWireframe />
      </VeltCommentThreadWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-comment-thread-wireframe>
          <velt-comment-dialog-wireframe>
          </velt-comment-dialog-wireframe>
      </velt-comment-thread-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/standalone-components/comment-thread/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentThread shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-thread shadow-dom="false"></velt-comment-thread>
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/dark-light-mode.png)

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltCommentThread darkMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-thread dark-mode="true"></velt-comment-thread>
    ```
  </Tab>
</Tabs>


# Variants
Source: https://docs.velt.dev/ui-customization/features/async/comments/standalone-components/comment-thread/variants



* Define variants for the entire Comment Thread component. This will enable you to show different Thread UI in different parts of your app.
* Alternatively, define a variant for the Comment Dialog component and use it here. This will enable you to show different Comment Dialog UI on the DOM vs here.
* Learn more about how to define and use variants [here](/ui-customization/layout#variants).

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentThread 
      variant="component-variant" 
      dialogVariant="dialog-variant"
    />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comment-thread 
      dialog-variant="dialog-variant"
      variant="component-variant"
    ></velt-comment-thread> 
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/text-comment-tool/overview

The Comment Tool that appears when you highlight some text.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default text comment tool component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/text-comment-light.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltTextCommentToolWireframe>
          # Your custom element
      </VeltTextCommentToolWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-text-comment-tool-wireframe>
          # Your custom element
      </velt-text-comment-tool-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/text-comment-tool/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```jsx
    <VeltComments shadowDom={false} textCommentToolShadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```jsx
    <velt-comments shadow-dom="false" text-comment-tool-shadow-dom="false"></velt-comments>
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/velt-text-comment-1.png)
By default, all components are in Light Mode, but there are several properties and methods to enable Dark Mode.

`Default: false`

Below are the examples to enable Dark Mode for text comment tool.

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```js
    <VeltComments textCommentToolDarkMode={true} />
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```js
    <velt-comments text-comment-tool-dark-mode="true"></velt-comments>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/comments/text-comment-toolbar/overview

The Toolbar that appears when you highlight some text

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default text comment toolbar component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/text-comment-toolbar-light.png)

There are 4 `Subcomponents` within the `Text Comment Toolbar` component.

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltTextCommentToolbarWireframe>
          <VeltTextCommentToolbarWireframe.CommentAnnotation />
          <VeltTextCommentToolbarWireframe.Divider />
          <VeltTextCommentToolbarWireframe.Copywriter />
          <VeltTextCommentToolbarWireframe.Generic />
      </VeltTextCommentToolbarWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-text-comment-toolbar-wireframe>
          <velt-text-comment-toolbar-comment-annotation-wireframe></velt-text-comment-toolbar-comment-annotation-wireframe>
          <velt-text-comment-toolbar-divider-wireframe></velt-text-comment-toolbar-divider-wireframe>
          <velt-text-comment-toolbar-copywriter-wireframe></velt-text-comment-toolbar-copywriter-wireframe>
          <velt-text-comment-toolbar-generic-wireframe></velt-text-comment-toolbar-generic-wireframe>
      </velt-text-comment-toolbar-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/comments/text-comment-toolbar/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```jsx
    <VeltComments shadowDom={false} textCommentToolbarShadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```jsx
    <velt-comments shadow-dom="false" text-comment-toolbar-shadow-dom="false"></velt-comments>
    ```
  </Tab>
</Tabs>

## Dark Mode

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/text-comment-toolbar-dark.png)

By default, all components are in Light Mode, but there are several properties and methods to enable Dark Mode.

`Default: false`

Below are the examples to enable Dark Mode for text comment toolbar.

<Tabs>
  <Tab title="React / Next.js">
    ### Example

    ```jsx
    <VeltComments textCommentToolbarDarkMode={true} />
    ```

    ### API methods

    ```jsx
    const commentElement = client.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ### Example

    ```jsx
    <velt-comments text-comment-toolbar-dark-mode="true"></velt-comments>
    ```

    ### API methods

    ```jsx
    const commentElement = Velt.getCommentElement();
    commentElement.enableDarkMode();
    commentElement.disableDarkMode();
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/text-comment-toolbar/subcomponents/comment-annotation

The subcomponent on the Text Comment Toolbar that is used to add a new Text Comment.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/text-comment-toolbar-sub-1.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltTextCommentToolbarWireframe.CommentAnnotation />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-text-comment-toolbar-comment-annotation-wireframe></velt-text-comment-toolbar-comment-annotation-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/text-comment-toolbar/subcomponents/copywriter

The subcomponent on the Text Comment Toolbar that is used to rewrite text on the page using AI.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/text-comment-toolbar-sub-3.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltTextCommentToolbarWireframe.Copywriter />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-text-comment-toolbar-copywriter-wireframe></velt-text-comment-toolbar-copywriter-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/text-comment-toolbar/subcomponents/divider

The subcomponent on the Text Comment Toolbar that is used to divide other subcomponents in the UI using a thin line.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/text-comment-toolbar-sub-2.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltTextCommentToolbarWireframe.Divider />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-text-comment-toolbar-divider-wireframe></velt-text-comment-toolbar-divider-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/comments/text-comment-toolbar/subcomponents/generic

The subcomponent on the Text Comment Toolbar that is used to query ChatGPT.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Subcomponent

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/text-comment-toolbar-sub-4.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltTextCommentToolbarWireframe.Generic />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-text-comment-toolbar-generic-wireframe></velt-text-comment-toolbar-generic-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/overview

The Notification Panel contains all notifications within the current organization. It appears when you click the notification tool or embed it directly on a page.

<Note>
  We recommend that you familiarize yourselves with [Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications-overview.png)

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications-overview-breakdown.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe>
          <VeltNotificationsPanelWireframe.Title />
          <VeltNotificationsPanelWireframe.ReadAllButton />

          <VeltNotificationsPanelWireframe.Skeleton />

          {/* Header with Tabs */}
          <VeltNotificationsPanelWireframe.Header />

          {/* Main Content */}
          <VeltNotificationsPanelWireframe.Content>
          
              {/* For You Tab */}
              <VeltNotificationsPanelWireframe.Content.ForYou />

              {/* Documents Tab */}
              <VeltNotificationsPanelWireframe.Content.Documents />

              {/* People Tab */}
              <VeltNotificationsPanelWireframe.Content.People />

              {/* All Tab */}
              <VeltNotificationsPanelWireframe.Content.All />

          </VeltNotificationsPanelWireframe.Content>

      </VeltNotificationsPanelWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-wireframe>
          <velt-notifications-panel-title-wireframe></velt-notifications-panel-title-wireframe>
          <velt-notifications-panel-read-all-button-wireframe></velt-notifications-panel-read-all-button-wireframe>
          
          <velt-notifications-panel-skeleton-wireframe></velt-notifications-panel-skeleton-wireframe>
          
          <!-- Header with Tabs -->
          <velt-notifications-panel-header-wireframe></velt-notifications-panel-header-wireframe>
          
          <!-- Main Content -->
          <velt-notifications-panel-content-wireframe>
                  <!-- For You Tab -->
                  <velt-notifications-panel-content-for-you-wireframe></velt-notifications-panel-content-for-you-wireframe>
      
                  <!-- Documents Tab -->
                  <velt-notifications-panel-content-documents-wireframe></velt-notifications-panel-content-documents-wireframe>
      
                  <!-- People Tab -->
                  <velt-notifications-panel-content-people-wireframe></velt-notifications-panel-content-people-wireframe>

                  <!-- All Tab -->
                  <velt-notifications-panel-content-all-wireframe></velt-notifications-panel-content-all-wireframe>
          </velt-notifications-panel-content-wireframe>
              
      </velt-notifications-panel-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltNotificationsPanel shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-notifications-panel shadow-dom="false"></velt-notifications-panel>
    ```
  </Tab>
</Tabs>

## Dark Mode

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltNotificationsPanel darkMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-notifications-panel dark-mode="true"></velt-notifications-panel>
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/content/common-content-list

Common Content List component used within all the tab content sections. This renders the list of notifications. You can customize it for all tabs using this or customize it individually within each tab.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications-item.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.Content.List>
          <VeltNotificationsPanelWireframe.Content.List.Item>
              <VeltNotificationsPanelWireframe.Content.List.Item.Avatar />
              <VeltNotificationsPanelWireframe.Content.List.Item.Unread />
              <VeltNotificationsPanelWireframe.Content.List.Item.Headline />
              <VeltNotificationsPanelWireframe.Content.List.Item.Body />
              <VeltNotificationsPanelWireframe.Content.List.Item.FileName />
              <VeltNotificationsPanelWireframe.Content.List.Item.Time />
          </VeltNotificationsPanelWireframe.Content.List.Item>
      </VeltNotificationsPanelWireframe.Content.List>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-content-list-wireframe>
          <velt-notifications-panel-content-list-item-wireframe>
              <velt-notifications-panel-content-list-item-avatar-wireframe></velt-notifications-panel-content-list-item-avatar-wireframe>
              <velt-notifications-panel-content-list-item-unread-wireframe></velt-notifications-panel-content-list-item-unread-wireframe>
              <velt-notifications-panel-content-list-item-headline-wireframe></velt-notifications-panel-content-list-item-headline-wireframe>
              <velt-notifications-panel-content-list-item-body-wireframe></velt-notifications-panel-content-list-item-body-wireframe>
              <velt-notifications-panel-content-list-item-file-name-wireframe></velt-notifications-panel-content-list-item-file-name-wireframe>
              <velt-notifications-panel-content-list-item-time-wireframe></velt-notifications-panel-content-list-item-time-wireframe>
          </velt-notifications-panel-content-list-item-wireframe>
      </velt-notifications-panel-content-list-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/content/overview

This contains the main body of the Notifications Panel with the content of each tab.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications-content.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.Content>
          
          {/* For You Tab */}
          <VeltNotificationsPanelWireframe.Content.ForYou />

          {/* Documents Tab */}
          <VeltNotificationsPanelWireframe.Content.Documents />

          {/* People Tab */}
          <VeltNotificationsPanelWireframe.Content.People />

          {/* All Tab */}
          <VeltNotificationsPanelWireframe.Content.All />

      </VeltNotificationsPanelWireframe.Content>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-content-wireframe>
          <!-- For You Tab -->
          <velt-notifications-panel-content-for-you-wireframe></velt-notifications-panel-content-for-you-wireframe>

          <!-- Documents Tab -->
          <velt-notifications-panel-content-documents-wireframe></velt-notifications-panel-content-documents-wireframe>

          <!-- People Tab -->
          <velt-notifications-panel-content-people-wireframe></velt-notifications-panel-content-people-wireframe>

          <!-- All Tab -->
          <velt-notifications-panel-content-all-wireframe></velt-notifications-panel-content-all-wireframe>
      </velt-notifications-panel-content-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/content/subcomponents/all-tab-content

All Tab content that contains it's notifications.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications_all_tab_content.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.Content.All>
       <VeltNotificationsPanelWireframe.Content.All.List>
         <VeltNotificationsPanelWireframe.Content.All.List.Item>
           <VeltNotificationsPanelWireframe.Content.All.List.Item.Label />
           <VeltNotificationsPanelWireframe.Content.All.List.Item.Content>
             {/* Refer to the Common Content List section for this definition */}
             <VeltNotificationsPanelWireframe.Content.List />
             <VeltNotificationsPanelWireframe.Content.LoadMore />
           </VeltNotificationsPanelWireframe.Content.All.List.Item.Content>
         </VeltNotificationsPanelWireframe.Content.All.List.Item>
       </VeltNotificationsPanelWireframe.Content.All.List>
       {/* This only renders when there are no unread notifications */}
       <VeltNotificationsPanelWireframe.Content.AllReadContainer />
     </VeltNotificationsPanelWireframe.Content.All>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-content-all-wireframe>
          <velt-notifications-panel-content-all-list-wireframe>
              <velt-notifications-panel-content-all-list-item-wireframe>
                  <velt-notifications-panel-content-all-list-item-label-wireframe></velt-notifications-panel-content-all-list-item-label-wireframe>
                  <velt-notifications-panel-content-all-list-item-content-wireframe>
                      <!-- Refer to the Common Content List section for this definition -->
                      <velt-notifications-panel-content-list-wireframe></velt-notifications-panel-content-list-wireframe>
                      <velt-notifications-panel-content-load-more-wireframe></velt-notifications-panel-content-load-more-wireframe>
                  </velt-notifications-panel-content-all-list-item-content-wireframe>
              </velt-notifications-panel-content-all-list-item-wireframe>
          </velt-notifications-panel-content-all-list-wireframe>
          <!-- This only renders when there are no unread notifications -->
          <velt-notifications-panel-content-all-read-container-wireframe></velt-notifications-panel-content-all-read-container-wireframe>
      </velt-notifications-panel-content-all-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/content/subcomponents/documents-tab-content

Document tab content that contains it's notifications.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications_documents_tab_content.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.Content.Documents>
          <VeltNotificationsPanelWireframe.Content.Documents.List>
              <VeltNotificationsPanelWireframe.Content.Documents.List.Item>
                  <VeltNotificationsPanelWireframe.Content.Documents.List.Item.Unread />
                  <VeltNotificationsPanelWireframe.Content.Documents.List.Item.Name />
                  <VeltNotificationsPanelWireframe.Content.Documents.List.Item.Count />
                  <VeltNotificationsPanelWireframe.Content.Documents.List.Item.Content>
                      {/* Refer to the Common Content List section for this definition */}
                      <VeltNotificationsPanelWireframe.Content.List />
                      <VeltNotificationsPanelWireframe.Content.LoadMore />
                  </VeltNotificationsPanelWireframe.Content.Documents.List.Item.Content>
              </VeltNotificationsPanelWireframe.Content.Documents.List.Item>
          </VeltNotificationsPanelWireframe.Content.Documents.List>
          {/* This only renders when there are no unread notifications */}
          <VeltNotificationsPanelWireframe.Content.AllReadContainer />
      </VeltNotificationsPanelWireframe.Content.Documents>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-content-documents-wireframe>
          <velt-notifications-panel-content-documents-list-wireframe>
              <velt-notifications-panel-content-documents-list-item-wireframe>
                  <velt-notifications-panel-content-documents-list-item-unread-wireframe></velt-notifications-panel-content-documents-list-item-unread-wireframe>
                  <velt-notifications-panel-content-documents-list-item-name-wireframe></velt-notifications-panel-content-documents-list-item-name-wireframe>
                  <velt-notifications-panel-content-documents-list-item-count-wireframe></velt-notifications-panel-content-documents-list-item-count-wireframe>
                  <velt-notifications-panel-content-documents-list-item-content-wireframe>
                      <!-- Refer to the Common Content List section for this definition -->
                      <velt-notifications-panel-content-list-wireframe></velt-notifications-panel-content-list-wireframe>
                      <velt-notifications-panel-content-load-more-wireframe></velt-notifications-panel-content-load-more-wireframe>
                  </velt-notifications-panel-content-documents-list-item-content-wireframe>
              </velt-notifications-panel-content-documents-list-item-wireframe>
          </velt-notifications-panel-content-documents-list-wireframe>
          <!-- This only renders when there are no unread notifications -->
          <velt-notifications-panel-content-all-read-container-wireframe></velt-notifications-panel-content-all-read-container-wireframe>
      </velt-notifications-panel-content-documents-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/content/subcomponents/for-you-tab-content

For You tab content that contains it's notifications.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications_for_you_tab_content.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.Content.ForYou>
          {/* Refer to the Common Content List section for this definition */}
          <VeltNotificationsPanelWireframe.Content.List />
          <VeltNotificationsPanelWireframe.Content.LoadMore />
          {/* This only renders when there are no unread notifications */}
          <VeltNotificationsPanelWireframe.Content.AllReadContainer />
      </VeltNotificationsPanelWireframe.Content.ForYou>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-content-for-you-wireframe>
          <!-- Refer to the Common Content List section for this definition -->
          <velt-notifications-panel-content-list-wireframe></velt-notifications-panel-content-list-wireframe>
          <velt-notifications-panel-content-load-more-wireframe></velt-notifications-panel-content-load-more-wireframe>
          <!-- This only renders when there are no unread notifications -->
          <velt-notifications-panel-content-all-read-container-wireframe></velt-notifications-panel-content-all-read-container-wireframe>
      </velt-notifications-panel-content-for-you-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/content/subcomponents/people-tab-content

People tab content that contains it's notifications.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications_people_tab_content.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.Content.People>
          <VeltNotificationsPanelWireframe.Content.People.List>
              <VeltNotificationsPanelWireframe.Content.People.List.Item>
                  <VeltNotificationsPanelWireframe.Content.People.List.Item.Avatar />
                  <VeltNotificationsPanelWireframe.Content.People.List.Item.Name />
                  <VeltNotificationsPanelWireframe.Content.People.List.Item.Count />
                  <VeltNotificationsPanelWireframe.Content.People.List.Item.Content>
                      {/* Refer to the Common Content List section for this definition */}
                      <VeltNotificationsPanelWireframe.Content.List />
                      <VeltNotificationsPanelWireframe.Content.LoadMore />
                  </VeltNotificationsPanelWireframe.Content.People.List.Item.Content>
              </VeltNotificationsPanelWireframe.Content.People.List.Item>
          </VeltNotificationsPanelWireframe.Content.People.List>
          {/* This only renders when there are no unread notifications */}
          <VeltNotificationsPanelWireframe.Content.AllReadContainer />
      </VeltNotificationsPanelWireframe.Content.People>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-content-people-wireframe>
          <velt-notifications-panel-content-people-list-wireframe>
              <velt-notifications-panel-content-people-list-item-wireframe>
                  <velt-notifications-panel-content-people-list-item-avatar-wireframe></velt-notifications-panel-content-people-list-item-avatar-wireframe>
                  <velt-notifications-panel-content-people-list-item-name-wireframe></velt-notifications-panel-content-people-list-item-name-wireframe>
                  <velt-notifications-panel-content-people-list-item-count-wireframe></velt-notifications-panel-content-people-list-item-count-wireframe>
                  <velt-notifications-panel-content-people-list-item-content-wireframe>
                      <!-- Refer to the Common Content List section for this definition -->
                      <velt-notifications-panel-content-list-wireframe></velt-notifications-panel-content-list-wireframe>
                      <velt-notifications-panel-content-load-more-wireframe></velt-notifications-panel-content-load-more-wireframe>
                  </velt-notifications-panel-content-people-list-item-content-wireframe>
              </velt-notifications-panel-content-people-list-item-wireframe>
          </velt-notifications-panel-content-people-list-wireframe>
          <!-- This only renders when there are no unread notifications -->
          <velt-notifications-panel-content-all-read-container-wireframe></velt-notifications-panel-content-all-read-container-wireframe>
      </velt-notifications-panel-content-people-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/header

This contains all the tabs that are present in the Notifications Panel Header

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications-tab.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.Header>
          <VeltNotificationsPanelWireframe.Header.TabForYou />
          <VeltNotificationsPanelWireframe.Header.TabDocuments />
          <VeltNotificationsPanelWireframe.Header.TabPeople />
          <VeltNotificationsPanelWireframe.Header.TabAll />
      </VeltNotificationsPanelWireframe.Header>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-header-wireframe>
          <velt-notifications-panel-header-tab-for-you-wireframe></velt-notifications-panel-header-tab-for-you-wireframe>
          <velt-notifications-panel-header-tab-documents-wireframe></velt-notifications-panel-header-tab-documents-wireframe>
          <velt-notifications-panel-header-tab-people-wireframe></velt-notifications-panel-header-tab-people-wireframe>
          <velt-notifications-panel-header-tab-all-wireframe></velt-notifications-panel-header-tab-all-wireframe>
      </velt-notifications-panel-header-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/read-all-button

This button marks all notifications as read.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications-read-all-button.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.ReadAllButton />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-read-all-button-wireframe></velt-notifications-panel-read-all-button-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-panel/subcomponents/title

The component that displays the title of the Notification Panel.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notifications-title.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsPanelWireframe.Title />
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-panel-title-wireframe></velt-notifications-panel-title-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-tool/overview

The button that opens or closes the notification panel.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

## Default Component

Here's how the default notification tool component looks like:

![](https://mintlify.s3.us-west-1.amazonaws.com/velt/images/customization/notification-tool-dark.png)

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltNotificationsToolWireframe>
          <VeltNotificationsToolWireframe.Icon />
          <VeltNotificationsToolWireframe.UnreadIcon />
          <VeltNotificationsToolWireframe.UnreadCount />
          <VeltNotificationsToolWireframe.Label />
      </VeltNotificationsToolWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-notifications-tool-wireframe>
          <velt-notifications-tool-icon-wireframe></velt-notifications-tool-icon-wireframe>
          <velt-notifications-tool-unread-icon-wireframe></velt-notifications-tool-unread-icon-wireframe>
          <velt-notifications-tool-unread-count-wireframe></velt-notifications-tool-unread-count-wireframe>
          <velt-notifications-tool-label-wireframe></velt-notifications-tool-label-wireframe>
      </velt-notifications-tool-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-tool/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

### Example

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltNotificationsTool shadowDom={false} panelShadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-notifications-tool shadow-dom="false" panel-shadow-dom="false"></velt-notifications-tool>
    ```
  </Tab>
</Tabs>

## Dark Mode

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    ```js
    <VeltNotificationsTool darkMode={true} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    <velt-notifications-tool dark-mode="true"></velt-notifications-tool>
    ```
  </Tab>
</Tabs>


# null
Source: https://docs.velt.dev/ui-customization/features/async/notifications/notifications-tool/variant



You can define and use [variants](/ui-customization/layout#variants) for the Notification Tool or the Notification Panel.

1. `variant`: For the Notification Tool.
2. `panelVariant`: For the Notification Panel.

<RequestExample>
  ```jsx React / Next.js
  <VeltNotificationsTool variant='tool1' panelVariant='panel1'/>
  ```

  ```html HTML
  <velt-notifications-tool variant='tool1' panel-variant='panel1'/>
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/ui-customization/features/async/reactions/overview

This component is used to render the reaction tool and all the reactions.

<Note>
  We recommend that you familiarize yourselves with [UI Customization Concepts](/ui-customization/overview) before attempting to modify any components.
</Note>

{/* ## Default Component

  Here's how the default component looks like: */}

<RequestExample>
  ```jsx React / Next.js
  <VeltWireframe>
      <VeltInlineReactionsSectionWireframe>
         <VeltInlineReactionsSectionWireframe.Panel>

             {/* This renders the reaction tool */}
             <VeltInlineReactionsSectionWireframe.ToolContainer>
                 <VeltReactionToolWireframe />
             </VeltInlineReactionsSectionWireframe.ToolContainer>

             {/* This renders the list of reactions added by the users */}
             <VeltInlineReactionsSectionWireframe.List>
                 <VeltReactionPinWireframe />
             </VeltInlineReactionsSectionWireframe.List>

         </VeltInlineReactionsSectionWireframe.Panel>
     </VeltInlineReactionsSectionWireframe>
  </VeltWireframe>
  ```

  ```HTML HTML
  <velt-wireframe style="display:none;">
      <velt-inline-reactions-section-wireframe>
         <velt-inline-reactions-section-panel-wireframe>

             <!-- This renders the reaction tool -->
             <velt-inline-reactions-section-tool-container-wireframe>
                 <velt-reaction-tool-wireframe></velt-reaction-tool-wireframe>
             </velt-inline-reactions-section-tool-container-wireframe>

             <!-- This renders the list of reactions added by the users -->
             <velt-inline-reactions-section-list-wireframe>
                 <velt-reaction-pin-wireframe></velt-reaction-pin-wireframe>
             </velt-inline-reactions-section-list-wireframe>

         </velt-inline-reactions-section-panel-wireframe>
     </velt-inline-reactions-section-wireframe>
  </velt-wireframe>
  ```
</RequestExample>


# Styling
Source: https://docs.velt.dev/ui-customization/features/async/reactions/styling



## Disable ShadowDOM

* By default, ShadowDOM is used to ensure that your app's CSS does not interfere with the styling of the SDK components.
* Disable the shadow dom to apply your custom CSS to the component.

`Default: true`

### Example

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltInlineReactionsSection shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-inline-reactions-section shadow-dom="false"></velt-inline-reactions-section>
    ```
  </Tab>
</Tabs>

## Dark Mode

`Default: false`

<Tabs>
  <Tab title="React / Next.js">
    Using Props:

    ```js
    <VeltInlineReactionsSection darkMode={true} />
    ```

    Using API Methods:

    ```js
    const reactionElement = client.getReactionElement();
    reactionElement.enableDarkMode();
    reactionElement.disableDarkMode();
    ```
  </Tab>

  <Tab title="Other Frameworks">
    Using Props:

    ```html
    <velt-inline-reactions-section dark-mode="true"></velt-inline-reactions-section>
    ```

    Using API Methods:

    ```js
    const reactionElement = Velt.getReactionElement();
    reactionElement.enableDarkMode();
    reactionElement.disableDarkMode();
    ```
  </Tab>
</Tabs>


# Variants
Source: https://docs.velt.dev/ui-customization/features/async/reactions/variants



## Pre-defined Variants

The Inline Reactions has 1 pre-defined variant:

* `inline`: This will customize the default components inside the Inline Reactions Component.

You can define your own variants and use them in different places of your app.

<RequestExample>
  ```jsx React / Next.js
   <VeltWireframe>
      <VeltInlineReactionsSection variant="inline">
      </VeltInlineReactionsSection>
  </VeltWireframe>
  ```

  ```jsx HTML
  <velt-wireframe style="display:none;">
      <velt-inline-reactions-section variant="inline">
      </velt-inline-reactions-section>
  </velt-wireframe>
  ```
</RequestExample>


# Create Your Own UI
Source: https://docs.velt.dev/ui-customization/features/realtime/cursors/create-your-own-ui



<Tabs>
  <Tab title="React / Next.js with Hooks">
    <Steps>
      <Step title="Get the useCursorUsers Hook">
        Import the `useCursorUsers` hook.

        ```js
        import { useCursorUsers } from '@veltdev/react';
        ```

        ```js
        const cursorUsers = useCusorUsers()
        ```
      </Step>

      <Step title="Display Cursor Users List with your own UI">
        The  `cursorUsers` hook will return an array of [User objects](/api-reference/sdk/models/data-models#user).

        You can map the Cursor Users List to generate your own custom UI.

        The hook will automatically unsubscribe from the subscription when the component dismounts.

        ```jsx
        return (
          <div>
            Cursor Users: {cursorUsers.length}
            {
              cursorUsers.map( x => <div>{x.name} </div>)
            }
          </div>
        )
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="React / Next.js">
    <Steps>
      <Step title="Get the Velt client">
        Import the `useVeltClient` React hook.

        You can use this hook within your component to fetch the Velt client.

        ```js
        import { useVeltClient } from '@veltdev/react';
        ```
      </Step>

      <Step title="Create a useEffect hook">
        Create the hook with the client as a dependency.

        Make sure to check if the client is null or undefined before you use it.

        ```js
        useEffect(() => {
            if (client) {
                //...
            }
          }, [client]);
        ```
      </Step>

      <Step title="Subscribe to live cursors">
        Subscribe to the realtime Cursor users data on the current document and location.

        We will send you a new list of cursors everytime there is a change so you can build out your own cursor UI.

        ```js
        const cursorElement = client.getCursorElement();

        let subscription = cursorElement.getOnlineUsersOnCurrentDocument().subscribe((_cursorUsers) => {
        // Do something with Cursor Users list
        });
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps>
      <Step title="Get an instance of the cursor element">
        Fetch the cursor element from the Velt client.

        ```js
        const cursorElement = window.Velt.getCursorElement();
        ```

        At this point, the Velt instance should be loaded and available to you on the window object.
      </Step>

      <Step title="Subscribe to live cursors">
        Subscribe to constant cursor changes.

        We will send you a new list of cursors everytime there is a change so you can build out your own cursor UI and logic.

        ```js
        let subscription = cursorElement.getOnlineUsersOnCurrentDocument().subscribe((cursors) => {
            // Do something with cursors list
        });
        ```

        To unsubscribe from the subscription:

        ```jsx
        subscription?.unsubscribe()
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js with Hooks
  import { useCursorUsers } from '@veltdev/react';

  export default function App() {
    const cursorUsers = useCursorUsers()

    return (
      <div>
        Cursor Users: {cursorUsers.length}
        {
          cursorUsers.map( x => <div>{x.name} </div>)
        }
      </div>
    );
  }
  ```

  ```js React / Next.js
  import { useVeltClient } from '@veltdev/react';
  import { useEffect } from 'react';

  export default function App() {

    const { client } = useVeltClient();

    useEffect(() => {
      if (client) {

        const cursorElement = client.getCursorElement();

        let subscription = cursorElement.getOnlineUsersOnCurrentDocument().subscribe((_cursorUsers) => {
          // Do something with Cursor Users list
        });

        //To unsubscribe from the subscription:
        subscription?.unsubscribe()


      }
    }, [client]);

    return (
      <>
      </>
    );
  }
  ```

  ```html HTML
  <!doctype html>
  <html lang="en">
    <head>
      <title>Cursors documentation</title>
    </head>
    <body>

      <velt-cursor></velt-cursor>

      <script>

        if (window.Velt) {

          const cursorElement = window.Velt.getCursorElement();

          let subscription = cursorElement.getOnlineUsersOnCurrentDocument().subscribe((cursors) => {
            // Do something with cursors list
          });

          //To unsubscribe from the subscription:
          subscription?.unsubscribe()


        }

      </script>

    </body>
  </html>
  ```
</RequestExample>


# Parts
Source: https://docs.velt.dev/ui-customization/features/realtime/cursors/parts



<Steps>
  <Step title="Select the part you want to modify">
    We offer several parts which can be used like classes. Full list below.

    The component is encapsulated in Shadow DOM, which is isolated from the normal DOM.
  </Step>

  <Step title="Apply your CSS rules">
    Set whatever CSS rules you want.

    The part lets you target a specific element within a Shadow DOM.
  </Step>

  <Step title="Check out the table below">
    Reference the table below to see what parts we expose.

    Alternatively, you can directly inspect the component HTML to see what parts are available.

    ```java
    velt-cursor::part(label-container) {
      border-radius: 0;
    }
    ```

    <br />

    | Part Name               | What does it do?                                                                                        |
    | ----------------------- | ------------------------------------------------------------------------------------------------------- |
    | container               | Targets the root cursor container.                                                                      |
    | huddle-avatar-container | Targets the cursor avatar specific to huddle mode. You can learn more about this in the Huddle Feature. |
    | avatar-container        | Targets the avatar container specific to avatar mode.                                                   |
    | label-container         | Targets the label container.                                                                            |
    | label                   | Targets the label text.                                                                                 |
  </Step>
</Steps>


# Slots
Source: https://docs.velt.dev/ui-customization/features/realtime/cursors/slots



<Tabs>
  <Tab title="React / Next.js">
    ## Add a custom icon for the cursor

    You can provide any HTML inside the cursor element.

    Just provide the correct slot attribute and the cursor icon that we use will be replaced.

    ```js
    <VeltCursor>
      <img src="..." slot="cursor" />
    </VeltCursor>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ## Add a custom icon for the cursor

    You can provide any HTML inside the cursor element.

    Just provide the correct slot attribute and the cursor icon that we use will be replaced.

    ```html
    <velt-cursor>
      <img src="..." slot="cursor" />
    </velt-cursor>
    ```
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import { VeltCursor } from '@veltdev/react';

  export default function App() {

    return (
      <>
        <VeltCursor>
          <img src="..." slot="cursor" />
        </VeltCursor>

        {/* ... */}
      </>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Cursors documentation</title>
    </head>
    <body>
      <velt-cursor>
        <img src="..." slot="cursor" />
      </velt-cursor>

      <!-- ... -->
    </body>
  </html>
  ```
</RequestExample>


# Variables
Source: https://docs.velt.dev/ui-customization/features/realtime/cursors/variables



<Steps>
  <Step title="Select the Cursor component">
    You can select the Cursor component.

    Our CSS variables are set at the component level.
  </Step>

  <Step title="Modify a CSS variable">
    Set the variable to anything you want.

    We expose a set of variables so you can customize the component to better match your UI.
  </Step>

  <Step title="Check out the table below">
    Reference the table below to see what variables we expose.

    Alternatively, you can directly inspect the component CSS to see what variables are available.

    | Default                     | Default | What does it do?                                                                                       |
    | --------------------------- | ------- | ------------------------------------------------------------------------------------------------------ |
    | `--velt-cursor-avatar-size` | 2rem    | Sets the Cursor avatar size in avatar mode.                                                            |
    | `--velt-cursor-video-size`  | 4.2rem  | Sets the Cursor video bubble size in Huddle mode. You can learn more about this in the Huddle Feature. |
  </Step>
</Steps>

```css
velt-cursor {
  --velt-cursor-avatar-size: 1.5rem;
}
```


# null
Source: https://docs.velt.dev/ui-customization/features/realtime/huddle/parts



<Steps titleSize="h2">
  <Step title="Select the part you want to modify">
    We offer several parts which can be used like classes. Full list below.
    The component is encapsulated in Shadow DOM, which is isolated from the normal DOM.
  </Step>

  <Step title="Apply your CSS rules">
    Set whatever CSS rules you want.
    The part lets you target a specific element within a Shadow DOM.
  </Step>

  <Step title="Check out the table below">
    Reference the table below to see what parts we expose.
    Alternatively, you can directly inspect the component HTML to see what parts are available.

    | property           | description                               |
    | ------------------ | ----------------------------------------- |
    | `container`        | Targets the comment tool container        |
    | `button-container` | Targets the comment tool button container |
    | `button-icon`      | Targets the comment tool button SVG icon  |
  </Step>
</Steps>

<RequestExample>
  ```css Tool
  velt-huddle-tool::part(button-icon) {
    width: 1.5rem;
    height: 1.5rem;
  }
  ```
</RequestExample>


# Slots
Source: https://docs.velt.dev/ui-customization/features/realtime/huddle/slots



<Tabs>
  <Tab title="React / Next.js">
    <Steps titleSize="h2">
      <Step stepNumber="1" title="Replace the Huddle Tool">
        Provide a template for the Huddle Tool.

        Target the `button` slot with your own custom template.

        ```js
        <VeltHuddleTool>
          <button slot="button">Huddle</button>
        </VeltCommentTool>
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps titleSize="h2">
      <Step stepNumber="1" title="Replace the Huddle Tool">
        Provide a template for the Huddle Tool.

        Target the `button` slot with your own custom template.

        ```html
        <velt-user-invite-tool>
          <button slot="button">Huddle</button>
        </velt-user-invite-tool>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```js React / Next.js
  import {
    VeltHuddleTool
  } from '@veltdev/react';

  export default function App() {

    return (
      <>

        <VeltHuddleTool>
          <button slot="button">Huddle</button>
        </VeltHuddleTool>

      </>
    );
  }
  ```

  ```html HTML

  <!doctype html>
  <html lang="en">
    <head>
      <title>Huddle documentation</title>
    </head>
    <body>

      <velt-user-invite-tool>
          <button slot="button">Huddle</button>
      </velt-user-invite-tool>

    </body>
  </html>
  ```
</RequestExample>


# null
Source: https://docs.velt.dev/ui-customization/features/realtime/huddle/variables



To update CSS variables for the Huddle Tool, please refer to [Global Styles](/global-styles/global-styles)


# Overview
Source: https://docs.velt.dev/ui-customization/features/realtime/live-selection



## 1. Enable/Disable Default Styling

* When enabled, the SDK will apply default styling to the selected elements.
* When disabled, the SDK will not apply any styling to the selected elements. You can use these classes to style the selected elements:
  * `.velt-live-selection-on-element`: This dynamic class will be added to the selected element only when there is a user on that element.
  * `.velt-live-selection-on-text`: This dynamic class will be added to the text node only when a user has selected that text.
* Default: `Enabled`.

<Tabs>
  <Tab title="React / Next.js">
    ```javascript
    const selectionElement = client.getSelectionElement();

    selectionElement.enableDefaultStyling();
    selectionElement.disableDefaultStyling();
    ```

    **Custom Styling:**

    ```css
    .velt-live-selection-on-element {
      outline: 2px solid var(--velt-color);
      outline-offset: -2px;
    }
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```javascript
    const selectionElement = Velt.getSelectionElement();

    selectionElement.enableDefaultStyling();
    selectionElement.disableDefaultStyling();
    ```

    **Custom Styling:**

    ```css
    .velt-live-selection-on-element {
      outline: 2px solid var(--velt-color);
      outline-offset: -2px;
    }
    ```
  </Tab>
</Tabs>


# Create Your Own UI
Source: https://docs.velt.dev/ui-customization/features/realtime/presence/create-your-own-ui



<Tabs>
  <Tab title="React / Next.js with Hooks">
    <Steps>
      <Step title="Get the usePresenceUsers Hook">
        Import the `usePresenceUsers` hook.

        ```js
        import { usePresenceUsers } from '@veltdev/react';
        ```

        ```js
        const presenceUsers = usePresenceUsers()
        ```
      </Step>

      <Step title="Display Presence Users List with your own UI">
        The  `usePresenceUsers` hook will return an array of [User objects](/api-reference/sdk/models/data-models#user).

        You can map the Presence Users List to generate your own custom UI.

        ```jsx
        return (
          <div>
            Presence Users: {presenceUsers.length}
            {
              presenceUsers.map( x => <div>{x.name} </div>)
            }
          </div>
        )
        ```

        The hook will automatically unsubscribe from the subscription when the component dismounts.
      </Step>
    </Steps>
  </Tab>

  <Tab title="React / Next.js">
    <Steps>
      <Step title="Get the Velt client">
        Import the `useVeltClient` React hook.

        You can use this hook within your component to fetch the Velt client.

        ```js
        import { useVeltClient } from '@veltdev/react';
        ```

        ```js
        const { client } = useVeltClient();
        ```
      </Step>

      <Step title="Create a useEffect hook">
        Create an effect with the client as a dependency.

        Make sure to check if the client is null or undefined before you use it.

        ```js React
        useEffect(() => {
            if (client) {

              //...
            }
          }, [client]);
        ```
      </Step>

      <Step title="Subscribe to Presence users">
        Subscribe to the realtime `Presence` users data on the current document and location.

        We will send you a new list of users everytime there is a change in the status of any user, so you can build out your own `Presence` UI.

        ```js React
        useEffect(() => {
            if (client) {

              const presenceElement = client.getPresenceElement();

              let subscription = presenceElement.getOnlineUsersOnCurrentDocument().subscribe((users) => {
                // Take user list data and render your own component
              });

              // To unsubscribe from the subscription:
              subscription?.unsubscribe()


            }
          }, [client]);
        ```
      </Step>
    </Steps>
  </Tab>

  <Tab title="Other Frameworks">
    <Steps>
      <Step title="Subscribe to Presence users">
        Subscribe to the realtime `Presence` users data on the current document and location.

        We will send you a new list of users everytime there is a change in the status of any user, so you can build out your own `Presence` UI.

        ```js

        <script>
            if (Velt){

              const presenceElement = Velt.getPresenceElement();

              let subscription = presenceElement.getOnlineUsersOnCurrentDocument().subscribe((users) => {
                  // Take user list data and render your own component
              });

              // To unsubscribe from the subscription:
              subscription?.unsubscribe()

          
            }
        </script>
        ```
      </Step>
    </Steps>
  </Tab>
</Tabs>

<RequestExample>
  ```jsx React / Next.js with Hooks
  import { usePresenceUsers } from '@veltdev/react';

  export default function App() {
    const presenceUsers = usePresenceUsers()

    return (
      <div>
        Presence Users: {presenceUsers.length}
        {
          presenceUsers.map( x => <div>{x.name} </div>)
        }
      </div>
    );
  }
  ```

  ```js React / Next.js
  import { useVeltClient } from '@veltdev/react';
  import {useEffect} from 'react';

  export default function App() {
    const { client } = useVeltClient();

    useEffect(() => {
      if (client) {

        const presenceElement = client.getPresenceElement();

        let subscription = presenceElement.getOnlineUsersOnCurrentDocument().subscribe((users) => {
          // Take users list data and render your own component
        });

        // To unsubscribe from the subscription:
        subscription?.unsubscribe()


      }
    }, [client]);

    return (
      <div className="toolbar">
        // example of rendering your own component
        // presenceUsers.map((presenceUser) => { return ( <div key={presenceUser.userId}> {/* Add custom UI code here */} </div> ) })
      </div>
    );
  }
  ```

  ```html HTML
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title>Presence documentation</title>
      <script type="module" src="https://cdn.velt.dev/lib/sdk@latest/velt.js" onload="loadVelt()"></script>

      <script>

          async function loadVelt() {
              await Velt.init("YOUR_VELT_API_KEY");

              if (Velt){
                const presenceElement = Velt.getPresenceElement();

                let subscription = presenceElement.getOnlineUsersOnCurrentDocument().subscribe((users) => {
                    // Take users list data and render your own component
                });

                // To unsubscribe from the subscription:
                subscription?.unsubscribe()

              }
          }

          
  </script>
    </head>
    <body>
      <div class="toolbar">
        <velt-presence></velt-presence>
      </div>
    </body>
  </html>
  ```
</RequestExample>


# Parts
Source: https://docs.velt.dev/ui-customization/features/realtime/presence/parts



<Steps>
  <Step title="Select the part you want to modify">
    We offer several parts which can be used like classes. Full list below.

    The component is encapsulated in Shadow DOM, which is isolated from the normal DOM.
  </Step>

  <Step title="Apply your CSS rules">
    Set whatever CSS rules you want.

    The part lets you target a specific element within a Shadow DOM.
  </Step>

  <Step title="Check out the table below">
    Reference the table below to see what parts we expose.

    Alternatively, you can directly inspect the component HTML to see what parts are available.

    | Part Name      | What does it do?                   |
    | -------------- | ---------------------------------- |
    | tooltip        | Targets the tooltip container      |
    | tooltip-avatar | Targets the tooltip avatar         |
    | tooltip-text   | Targets the tooltip text container |
    | user-avatar    | Targets the user avatar container  |
    | more-users     | Targets the more users container   |
  </Step>
</Steps>

<RequestExample>
  ```css Parts
  velt-presence::part(user-avatar)::before {
    content: "";
    position: absolute;
    border-radius: 50%;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(255, 0, 0, 0.5), rgba(0, 255, 0, 0.5));
    pointer-events: none;
  }
  ```
</RequestExample>


# Variables
Source: https://docs.velt.dev/ui-customization/features/realtime/presence/variables



<Steps>
  <Step title="Select the Presence component">
    You can select the `Presence` component.
    Our CSS variables are set at the component level.
  </Step>

  <Step title="Modify a CSS variable">
    Set the variable to anything you want.

    We expose a set of variables so you can customize the component to better match your UI.
  </Step>

  <Step title="Check out the table below">
    Reference the table below to see what variables we expose.

    Alternatively, you can directly inspect the component CSS to see what variables are available.

    | Variable Name                        | Default (light) | Default (dark) | What does it do?                  |
    | ------------------------------------ | --------------- | -------------- | --------------------------------- |
    | --velt-presence-avatar-size          | 2rem            | 2rem           | Sets the Presence avatar size     |
    | --velt-presence-primary-text-color   | #141416         | #E5E5E9        | Sets the primary text color       |
    | --velt-presence-secondary-text-color | #777E90         | #91919C        | Sets the secondary text color     |
    | --velt-presence-tooltip-bg-color     | #FCFCFD         | #141416        | Sets the tooltip background color |
    | --velt-presence-tooltip-border-color | #E6E8EC         | #303034        | Sets the tooltip border color     |
    | --velt-pressence-more-users-color    | #D4D6DF         | #404044        | Sets the more users color         |
  </Step>
</Steps>

<RequestExample>
  ```css Variables
  velt-presence, velt-presence-tooltip {
  	// Below values are for demo purpose only,
    // you can use different avatar-size and colors according to your usecase
    --velt-presence-avatar-size: 6rem !important;
    --velt-presence-primary-text-color: red !important;
    --velt-presence-secondary-text-color: blue !important;
    --velt-presence-tooltip-bg-color: grey !important;
    --velt-presence-tooltip-border-color: red !important;
    --velt-presence-more-users-color: purple !important;
  }
  ```
</RequestExample>


# Layout Customization
Source: https://docs.velt.dev/ui-customization/layout



# Overview

This lets you modify how components are structured and rendered in your app. You can:

* Replace default HTML with your own components and HTML structure
* Remove or reorder components
* Create multiple variants of the same component

<Note>All layout customizations are done using Wireframe components that act as templates. Changes apply globally wherever that component is used.</Note>

# Ways to Customize Layout

### Single Component Customization (Targeted)

This lets you customize individual parts of a component without dealing with the entire structure. **We recommend this approach for most use cases**.

**Benefits:**

* Simpler, more maintainable code
* Focus on just the parts you need to change
* Greater flexibility for specific UI elements

**Example:** Customizing just the Comment Dialog header:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltWireframe>
        <VeltCommentDialogWireframe.Header>
            <div className="custom-header">
                <VeltCommentDialogWireframe.Status />
                <VeltCommentDialogWireframe.Priority />
                <VeltCommentDialogWireframe.Options />
                <VeltCommentDialogWireframe.CopyLink />
                <VeltCommentDialogWireframe.ResolveButton />
            </div>
        </VeltCommentDialogWireframe.Header>
    </VeltWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-wireframe style="display:none;">
        <velt-comment-dialog-header-wireframe>
            <div class="custom-header">
                <velt-comment-dialog-status-wireframe></velt-comment-dialog-status-wireframe>
                <velt-comment-dialog-priority-wireframe></velt-comment-dialog-priority-wireframe>
                <velt-comment-dialog-options-wireframe></velt-comment-dialog-options-wireframe>
                <velt-comment-dialog-copy-link-wireframe></velt-comment-dialog-copy-link-wireframe>
                <velt-comment-dialog-resolve-button-wireframe></velt-comment-dialog-resolve-button-wireframe>
            </div>
        </velt-comment-dialog-header-wireframe>
    </velt-wireframe>
    ```
  </Tab>
</Tabs>

### Full Component Tree Customization (Comprehensive)

Use this pattern when you need to modify the entire component structure or multiple related components.

**Benefits:**

* Complete control over component hierarchy
* Easier to modify relationships between components
* Better for large-scale structural changes

**Drawbacks:**

* Custom CSS required for the entire component tree since adding children components to wireframes removes Velt's default styles.

**Example:** Customizing the entire Comment Dialog structure:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltWireframe>
        <VeltCommentDialogWireframe>
            <VeltCommentDialogWireframe.GhostBanner />
            <VeltCommentDialogWireframe.AssigneeBanner />
            <div className="dialog-content">
                <VeltCommentDialogWireframe.Header />
                <VeltCommentDialogWireframe.Body />
                <VeltCommentDialogWireframe.Composer />
                <VeltCommentDialogWireframe.AllComment />
            </div>
        </VeltCommentDialogWireframe>
    </VeltWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-wireframe style="display:none;">
        <velt-comment-dialog-wireframe>
            <velt-comment-dialog-ghost-banner-wireframe></velt-comment-dialog-ghost-banner-wireframe>
            <velt-comment-dialog-assignee-banner-wireframe></velt-comment-dialog-assignee-banner-wireframe>
            <div class="dialog-content">
                <velt-comment-dialog-header-wireframe></velt-comment-dialog-header-wireframe>
                <velt-comment-dialog-body-wireframe></velt-comment-dialog-body-wireframe>
                <velt-comment-dialog-composer-wireframe></velt-comment-dialog-composer-wireframe>
                <velt-comment-dialog-all-comment-wireframe></velt-comment-dialog-all-comment-wireframe>
            </div>
        </velt-comment-dialog-wireframe>
    </velt-wireframe>
    ```
  </Tab>
</Tabs>

# Variants

Variants allow you to:

* Create multiple styled versions of the same component
* Switch between them dynamically in different parts of your app
* Maintain consistent behavior while having different looks

### Create Custom Variants

Custom variants let you define your own versions of components. For example: You can have a variant of Comment Sidebar for one page and another for another page.

<Steps>
  <Step title="Define variants">
    On the wireframe component, add the `variant` prop to define your custom variants.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltWireframe>
            {/* Variant for preview page */}
            <VeltCommentsSidebarWireframe variant="preview-page">
                {/* Custom layout for preview */}
            </VeltCommentsSidebarWireframe>

            {/* Variant for editor page */}
            <VeltCommentsSidebarWireframe variant="editor-page">
                {/* Custom layout for editor */}
            </VeltCommentsSidebarWireframe>
        </VeltWireframe>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-wireframe style="display:none;">
            {/* Variant for preview page */}
            <velt-comments-sidebar-wireframe variant="preview-page">
                {/* Custom layout for preview */}
            </velt-comments-sidebar-wireframe>

            {/* Variant for editor page */}
            <velt-comments-sidebar-wireframe variant="editor-page">
                {/* Custom layout for editor */}
            </velt-comments-sidebar-wireframe>
        </velt-wireframe>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Use variants">
    * Use the `variant` prop on the related Velt component to apply the custom variant you defined. The value should match the variant name from step 1.
    * For example, use `variant="preview-page"` to apply the preview page variant you created above.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltCommentsSidebar variant="preview-page" />
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-comments-sidebar variant="preview-page"></velt-comments-sidebar>
        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>

### Use Pre-defined Variants

Many components come with built-in variants optimized for specific use cases. For example, the Comment Dialog has two pre-defined variants for different contexts:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltWireframe>
        {/* For Pin, Area, and Text comments */}
        <VeltCommentDialogWireframe variant="dialog">
            {/* Custom layout */}
        </VeltCommentDialogWireframe>

        {/* For Sidebar comments */}
        <VeltCommentDialogWireframe variant="sidebar">
            {/* Custom layout */}
        </VeltCommentDialogWireframe>
    </VeltWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-wireframe style="display:none;">
        {/* For Pin, Area, and Text comments */}
        <velt-comment-dialog-wireframe variant="dialog">
            {/* Custom layout */}
        </velt-comment-dialog-wireframe>

        {/* For Sidebar comments */}
        <velt-comment-dialog-wireframe variant="sidebar">
            {/* Custom layout */}
        </velt-comment-dialog-wireframe>
    </velt-wireframe>
    ```
  </Tab>
</Tabs>

<Note>
  * Each component's documentation lists its supported pre-defined variants
  * Pre-defined variants are optimized for specific use cases but can still be customized
  * You can combine pre-defined variants with your own custom styling
</Note>

# Common Customization Tasks

### Replace Default Layout

Simply provide your own HTML or components as children of the wireframe component:

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltWireframe>
        <VeltCommentDialogWireframe.Composer.ActionButton type="attachments">
            <button className="custom-attachment-btn">
                <CustomIcon />
                Add Files
            </button>
        </VeltCommentDialogWireframe.Composer.ActionButton>
    </VeltWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-wireframe style="display:none;">
        <velt-comment-dialog-composer-action-button-wireframe type="attachments">
            <button class="custom-attachment-btn">
                <custom-icon></custom-icon>
                Add Files
            </button>
        </velt-comment-dialog-composer-action-button-wireframe>
    </velt-wireframe>
    ```
  </Tab>
</Tabs>

### Remove Components

To remove a component, you either:

* simply omit it from the wireframe template as shown below, or
* use [Conditional Templates](/ui-customization/conditional-templates)

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltWireframe>
        <VeltCommentDialogWireframe.Header>
            {/* Priority and CopyLink buttons removed */}
            <VeltCommentDialogWireframe.Status />
            <VeltCommentDialogWireframe.Options />
            <VeltCommentDialogWireframe.ResolveButton />
        </VeltCommentDialogWireframe.Header>
    </VeltWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-wireframe style="display:none;">
        <velt-comment-dialog-header-wireframe>
            {/* Priority and CopyLink buttons removed */}
            <velt-comment-dialog-status-wireframe></velt-comment-dialog-status-wireframe>
            <velt-comment-dialog-options-wireframe></velt-comment-dialog-options-wireframe>
            <velt-comment-dialog-resolve-button-wireframe></velt-comment-dialog-resolve-button-wireframe>
        </velt-comment-dialog-header-wireframe>
    </velt-wireframe>
    ```
  </Tab>
</Tabs>

### Reorder Components

To reorder components, simply rearrange them within the wireframe template.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltWireframe>
        <VeltCommentDialogWireframe.Header>
            <VeltCommentDialogWireframe.Priority />
            <VeltCommentDialogWireframe.Status />
            <VeltCommentDialogWireframe.CopyLink />
            <VeltCommentDialogWireframe.ResolveButton />
            <VeltCommentDialogWireframe.Options />
        </VeltCommentDialogWireframe.Header>
    </VeltWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-wireframe style="display:none;">
        <velt-comment-dialog-header-wireframe>
            <velt-comment-dialog-priority-wireframe></velt-comment-dialog-priority-wireframe>
            <velt-comment-dialog-status-wireframe></velt-comment-dialog-status-wireframe>
            <velt-comment-dialog-copy-link-wireframe></velt-comment-dialog-copy-link-wireframe>
            <velt-comment-dialog-resolve-button-wireframe></velt-comment-dialog-resolve-button-wireframe>
            <velt-comment-dialog-options-wireframe></velt-comment-dialog-options-wireframe>
        </velt-comment-dialog-header-wireframe>
    </velt-wireframe>
    ```
  </Tab>
</Tabs>


# Overview
Source: https://docs.velt.dev/ui-customization/overview



Velt Components can be customized in 5 key ways:

1. [**Layout**](#1-layout): For structure and organization of components
2. [**Styling**](#2-styling): For visual design using CSS, themes, or your CSS framework
3. [**Template Variables**](#3-template-variables): For rendering dynamic content
4. [**Conditional Templates**](#4-conditional-templates): For custom rendering logic
5. [**Action Components**](#5-action-components): For interactivity and custom behaviors

# 1. Layout

### Understanding Wireframes

Think of Wireframes like blueprints - they're templates that let you customize how Velt components render in your app. When you create a wireframe:

* It acts as a global template
* Changes apply everywhere that component is used
* You can use your own components and HTML structure

What you can do:

* ✅ Use your own Components/HTML
* ✅ Apply your styling
* ✅ Nest regular HTML elements
* ✅ Use other Velt wireframe components
* ❌ Cannot nest regular Velt components inside wireframes

<Warning>
  Empty wireframes keep Velt's default styling. Adding children removes default styles.
</Warning>

### a. Replace Layout

Replace Velt's default HTML with your own structure.
[Learn more](/ui-customization/layout#replace-default-layout)

### b. Remove Components

Remove specific parts of a Velt component you don't need.
[Learn more](/ui-customization/layout#remove-components)

### c. Reorder Components

Change the order of elements within a Velt component.
[Learn more](/ui-customization/layout#reorder-components)

### d. Use Variants

Need different versions of the same component? Use variants to:

* Create multiple styled versions
* Switch between them dynamically
* Maintain consistent behavior with different looks

[Learn more about variants](/ui-customization/layout#variants)

# 2. Styling

Velt components can be styled in two main ways:

### a. Themes

<Info>
  **NEW:** Try the [Theme Playground](https://playground.velt.dev/themes) to visually customize and preview themes.
</Info>

1. **CSS Variables:** Quickest way to match your design system using CSS variables. This gets applied to all components globally. [Learn more](/ui-customization/styling#themes)
2. **Dark Mode:** Built in support for light and dark modes. [Learn more](/ui-customization/styling#dark-mode)

### b. Custom CSS or libraries

1. **Custom CSS or frameworks:** Gives you full control over the styling of Velt components using your own CSS or frameworks. This requires disabling Shadow DOM. [Learn more](/ui-customization/styling#custom-css-or-libraries)
2. **Conditional Classes:** Apply classes conditionally based available template variables. [Learn more](/ui-customization/styling#conditional-classes)

# 3. Template Variables

Template Variables let you work with dynamic data in two ways:

a. **Use Existing Velt Component Data**

* Access and render data that's already present inside Velt components.
* eg: Customer metadata set on comment threads.

b. **Inject Your App's Data**

* Inject and render custom dynamic data from your application into Velt components.

[Learn more](/ui-customization/template-variables)

# 4. Conditional Templates

Add logic to show/hide components based on the template variables.
[Learn more](/ui-customization/conditional-templates)

# 5. Action Components

* Extend the functionality of any Velt component.
* Clicking an action button provides a callback where you can write your own custom code.
  [Learn more](/ui-customization/custom-action-component)


# Setup Wireframes
Source: https://docs.velt.dev/ui-customization/setup



# Understanding Wireframes

Wireframes are templates that define how Velt components should render in your app:

* Act as global templates. Changes apply everywhere the component is used.
* Allow full customization of layout and styling.
* Wireframes themselves don't render in the DOM.

<Warning>
  Adding any children to a wireframe template removes its default styling. This gives you full control over the layout.
</Warning>

## Step-by-Step Setup

<Steps>
  <Step title="Add the root Wireframe Container">
    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        import { VeltWireframe, VeltProvider } from '@veltdev/react'

        <VeltProvider>
            <VeltWireframe>
                {/* Your customization templates */}
            </VeltWireframe>
        </VeltProvider>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <!-- Add style="display:none;" to prevent flash before SDK init -->
        <velt-wireframe style="display:none;">
            <!-- Your customization templates -->
        </velt-wireframe>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Add Component Wireframes">
    Copy the wireframe template of the component you want to customize. You can find the wireframe templates in the component's UI Customization documentation.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltWireframe>
            {/* Example: Customizing Comment Dialog Header */}
            <VeltCommentDialogWireframe.Header>
                <div className="flex items-center gap-2">
                    <VeltCommentDialogWireframe.Status />
                    <VeltCommentDialogWireframe.Priority />
                    <div className="flex-grow" />
                    <VeltCommentDialogWireframe.Options />
                    <VeltCommentDialogWireframe.ResolveButton />
                </div>
            </VeltCommentDialogWireframe.Header>
        </VeltWireframe>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-wireframe style="display:none;">
            <!-- Example: Customizing Comment Dialog Header -->
            <velt-comment-dialog-header-wireframe>
                <div class="flex items-center gap-2">
                    <velt-comment-dialog-status-wireframe></velt-comment-dialog-status-wireframe>
                    <velt-comment-dialog-priority-wireframe></velt-comment-dialog-priority-wireframe>
                    <div class="flex-grow"></div>
                    <velt-comment-dialog-options-wireframe></velt-comment-dialog-options-wireframe>
                    <velt-comment-dialog-resolve-button-wireframe></velt-comment-dialog-resolve-button-wireframe>
                </div>
            </velt-comment-dialog-header-wireframe>
        </velt-wireframe>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Customize the Template">
    You can customize using the options like:

    * [Layout](/ui-customization/layout): Customize the layout of the component
    * [Styling](/ui-customization/styling): Apply custom CSS and [themes](https://playground.velt.dev/themes)
    * [Template Variables](/ui-customization/template-variables): Add dynamic content to your templates
    * [Conditional Templates](/ui-customization/conditional-templates): Add conditional rendering logic
    * [Custom Actions](/ui-customization/custom-action-component): Add custom interactivity

    **Example:**

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        <VeltWireframe>
            <VeltCommentDialogWireframe.Header>
                <div>
                    Custom HTML
                </div>
                <VeltCommentDialogWireframe.Status />
                <VeltCommentDialogWireframe.Priority />
                <VeltCommentDialogWireframe.Options />
                <VeltCommentDialogWireframe.CopyLink />
                <VeltCommentDialogWireframe.ResolveButton />
            </VeltCommentDialogWireframe.Header>
        </VeltWireframe>
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <velt-wireframe style="display:none;">
            <velt-comment-dialog-header-wireframe>
                <div>
                    Custom HTML
                </div>
                <velt-comment-dialog-status-wireframe></velt-comment-dialog-status-wireframe>
                <velt-comment-dialog-priority-wireframe></velt-comment-dialog-priority-wireframe>
                <velt-comment-dialog-options-wireframe></velt-comment-dialog-options-wireframe>
                <velt-comment-dialog-copy-link-wireframe></velt-comment-dialog-copy-link-wireframe>
                <velt-comment-dialog-resolve-button-wireframe></velt-comment-dialog-resolve-button-wireframe>
            </velt-comment-dialog-header-wireframe>
        </velt-wireframe>
        ```
      </Tab>
    </Tabs>
  </Step>

  <Step title="Add the Feature Components">
    * After defining templates, use the actual feature components in your app as normal.
    * The wireframe components are not meant to be rendered directly in your application. They merely serve as template definitions.

    <Tabs>
      <Tab title="React / Next.js">
        ```jsx
        function MyApp() {
          return (
            <div className="my-app">
              <VeltComments /> {/* Will use your custom template */}
            </div>
          )
        }
        ```
      </Tab>

      <Tab title="Other Frameworks">
        ```html
        <div class="my-app">
          <velt-comments></velt-comments> <!-- Will use your custom template -->
        </div>
        ```
      </Tab>
    </Tabs>
  </Step>
</Steps>


# CSS Customization
Source: https://docs.velt.dev/ui-customization/styling



<Info>
  **NEW:** Try out the [Theme Playground](https://playground.velt.dev/themes) to visually customize and preview your themes.
</Info>

Velt components can be styled in two main ways:

1. **Themes**
2. **Custom CSS**

# Themes

You can use the [Theme Playground](https://playground.velt.dev/themes) to customize and preview the themes fast.

### CSS Variables

* You can customize:
  * Border radius
  * Spacing
  * Typography
  * Colors for light and dark modes
  * Z-Index
* Set CSS variables on your `<body>` tag to customize all Velt components:

**Example:**

```css
body {
  /* Colors */
  --velt-light-mode-accent: #0BA528;
  /* Border Radius */
  --velt-border-radius-sm: 4px;
  /* Spacing */
  --velt-spacing-sm: 8px;
}
```

**Available Theme Variables:**

<Tabs>
  <Tab title="Border Radius">
    ```css
    --velt-border-radius-2xs: 0.125rem; // 2px
    --velt-border-radius-xs: 0.25rem;   // 4px
    --velt-border-radius-sm: 0.5rem;    // 8px
    --velt-border-radius-md: 0.75rem;   // 12px
    --velt-border-radius-lg: 1rem;      // 16px
    --velt-border-radius-xl: 1.25rem;   // 20px
    --velt-border-radius-2xl: 1.5rem;   // 24px
    --velt-border-radius-3xl: 2rem;     // 32px
    --velt-border-radius-full: 5rem;    // 80px
    ```
  </Tab>

  <Tab title="Spacing">
    ```css
    --velt-spacing-2xs: 0.125rem; // 2px
    --velt-spacing-xs: 0.25rem;   // 4px
    --velt-spacing-sm: 0.5rem;    // 8px
    --velt-spacing-md: 0.75rem;   // 12px
    --velt-spacing-lg: 1rem;      // 16px
    --velt-spacing-xl: 1.25rem;   // 20px
    --velt-spacing-2xl: 1.5rem;   // 24px
    ```
  </Tab>

  <Tab title="Typography">
    ```css
    --velt-default-font-family: sans-serif;
    --velt-font-size-2xs: 0.625rem; // 10px
    --velt-font-size-xs: 0.75rem;   // 12px
    --velt-font-size-sm: 0.875rem;  // 14px
    --velt-font-size-md: 1rem;      // 16px
    --velt-font-size-lg: 1.5rem;    // 24px
    --velt-font-size-xl: 1.75rem;   // 28px
    --velt-font-size-2xl: 2rem;     // 32px
    ```
  </Tab>

  <Tab title="Colors - Light Mode">
    ```css
    /* Base Colors */
      --velt-light-mode-green: #0DCF82;
      --velt-light-mode-magenta: #A259FE;
      --velt-light-mode-amber: #FF7162;
      --velt-light-mode-purple: #625DF5;
      --velt-light-mode-cyan: #4BC9F0;
      --velt-light-mode-orange: #FE965C;
      --velt-light-mode-black: #080808;
      --velt-light-mode-white: #FFFFFF;
      --velt-light-mode-gray: #EBEBEB;

      /* Accent Colors */
      --velt-light-mode-accent: #625DF5;
      --velt-light-mode-accent-text: #9491F8;
      --velt-light-mode-accent-hover: #534FCF;
      --velt-light-mode-accent-foreground: #FFFFFF;
      --velt-light-mode-accent-light: #F2F2FE;
      --velt-light-mode-accent-transparent: rgba(148, 145, 248, 0.08);

      /* Text Shades */
      --velt-light-mode-text-0: #0A0A0A;
      --velt-light-mode-text-1: #141414;
      --velt-light-mode-text-2: #1F1F1F;
      --velt-light-mode-text-3: #292929;
      --velt-light-mode-text-4: #3D3D3D;
      --velt-light-mode-text-5: #525252;
      --velt-light-mode-text-6: #666666;
      --velt-light-mode-text-7: #7A7A7A;
      --velt-light-mode-text-8: #858585;
      --velt-light-mode-text-9: #999999;
      --velt-light-mode-text-10: #B8B8B8;
      --velt-light-mode-text-11: #A3A3A3;
      --velt-light-mode-text-12: #8F8F8F;

      /* Background Shades */
      --velt-light-mode-background-0: #FFFFFF;
      --velt-light-mode-background-1: #FAFAFA;
      --velt-light-mode-background-2: #F5F5F5;
      --velt-light-mode-background-3: #F0F0F0;
      --velt-light-mode-background-4: #EBEBEB;
      --velt-light-mode-background-5: #E5E5E5;
      --velt-light-mode-background-6: #E0E0E0;
      --velt-light-mode-background-7: #DBDBDB;
      --velt-light-mode-background-8: #D6D6D6;
      --velt-light-mode-background-9: #D1D1D1;
      --velt-light-mode-background-10: #CCCCCC;

      /* Border Shades */
      --velt-light-mode-border-0: #FFFFFF;
      --velt-light-mode-border-1: #FAFAFA;
      --velt-light-mode-border-2: #F5F5F5;
      --velt-light-mode-border-3: #F0F0F0;
      --velt-light-mode-border-4: #EBEBEB;
      --velt-light-mode-border-5: #E5E5E5;
      --velt-light-mode-border-6: #E0E0E0;
      --velt-light-mode-border-7: #DBDBDB;
      --velt-light-mode-border-8: #D6D6D6;
      --velt-light-mode-border-9: #D1D1D1;
      --velt-light-mode-border-10: #CCCCCC;

      /* Status Colors */
      /* Error */
      --velt-light-mode-error: #FF7162;
      --velt-light-mode-error-hover: #DE5041;
      --velt-light-mode-error-foreground: #FFFFFF;
      --velt-light-mode-error-light: #FFF4F2;
      --velt-light-mode-error-transparent: rgba(255, 113, 98, 0.08);

      /* Warning */
      --velt-light-mode-warning: #FFCD2E;
      --velt-light-mode-warning-hover: #C69400;
      --velt-light-mode-warning-foreground: #474747;
      --velt-light-mode-warning-light: #FFFBEE;
      --velt-light-mode-warning-transparent: rgba(255, 205, 46, 0.08);

      /* Success */
      --velt-light-mode-success: #198F65;
      --velt-light-mode-success-hover: #006B41;
      --velt-light-mode-success-foreground: #FFFFFF;
      --velt-light-mode-success-light: #EDF6F3;
      --velt-light-mode-success-transparent: rgba(25, 143, 101, 0.08);

      /* Transparent Colors */
      --velt-light-mode-background-transparent: rgba(255, 255, 255, 0.80);
      --velt-light-mode-border-transparent: rgba(0, 0, 0, 0.16);
      --velt-light-mode-animation-transparent: rgba(255, 255, 255, 0.2);
    ```
  </Tab>

  <Tab title="Colors - Dark Mode">
    ```css
    /* Base Colors */
      --velt-dark-mode-green: #0DCF82;
      --velt-dark-mode-magenta: #A259FE;
      --velt-dark-mode-amber: #FF7162;
      --velt-dark-mode-purple: #625DF5;
      --velt-dark-mode-cyan: #4BC9F0;
      --velt-dark-mode-orange: #FE965C;
      --velt-dark-mode-black: #080808;
      --velt-dark-mode-white: #FFFFFF;
      --velt-dark-mode-gray: #EBEBEB;

      /* Accent Colors */
      --velt-dark-mode-accent: #625DF5;
      --velt-dark-mode-accent-text: #9491F8;
      --velt-dark-mode-accent-hover: #534FCF;
      --velt-dark-mode-accent-foreground: #FFFFFF;
      --velt-dark-mode-accent-light: #F2F2FE;
      --velt-dark-mode-accent-transparent: rgba(148, 145, 248, 0.08);

      /* Text Shades */
      --velt-dark-mode-text-0: #FFFFFF;
      --velt-dark-mode-text-1: #F5F5F5;
      --velt-dark-mode-text-2: #EBEBEB;
      --velt-dark-mode-text-3: #E0E0E0;
      --velt-dark-mode-text-4: #D6D6D6;
      --velt-dark-mode-text-5: #C2C2C2;
      --velt-dark-mode-text-6: #ADADAD;
      --velt-dark-mode-text-7: #8F8F8F;
      --velt-dark-mode-text-8: #7A7A7A;
      --velt-dark-mode-text-9: #666666;
      --velt-dark-mode-text-10: #525252;
      --velt-dark-mode-text-11: #474747;
      --velt-dark-mode-text-12: #3D3D3D;

      /* Background Shades */
      --velt-dark-mode-background-0: #0F0F0F;
      --velt-dark-mode-background-1: #1A1A1A;
      --velt-dark-mode-background-2: #1F1F1F;
      --velt-dark-mode-background-3: #242424;
      --velt-dark-mode-background-4: #292929;
      --velt-dark-mode-background-5: #2E2E2E;
      --velt-dark-mode-background-6: #333333;
      --velt-dark-mode-background-7: #383838;
      --velt-dark-mode-background-8: #3D3D3D;
      --velt-dark-mode-background-9: #424242;
      --velt-dark-mode-background-10: #474747;

      /* Border Shades */
      --velt-dark-mode-border-0: #0F0F0F;
      --velt-dark-mode-border-1: #1A1A1A;
      --velt-dark-mode-border-2: #1F1F1F;
      --velt-dark-mode-border-3: #242424;
      --velt-dark-mode-border-4: #292929;
      --velt-dark-mode-border-5: #2E2E2E;
      --velt-dark-mode-border-6: #333333;
      --velt-dark-mode-border-7: #383838;
      --velt-dark-mode-border-8: #3D3D3D;
      --velt-dark-mode-border-9: #424242;
      --velt-dark-mode-border-10: #474747;

      /* Status Colors */
      /* Error */
      --velt-dark-mode-error: #FF7162;
      --velt-dark-mode-error-hover: #DE5041;
      --velt-dark-mode-error-foreground: #FFFFFF;
      --velt-dark-mode-error-light: #FFF4F2;
      --velt-dark-mode-error-transparent: rgba(255, 113, 98, 0.08);

      /* Warning */
      --velt-dark-mode-warning: #FFCD2E;
      --velt-dark-mode-warning-hover: #C69400;
      --velt-dark-mode-warning-foreground: #474747;
      --velt-dark-mode-warning-light: #FFFBEE;
      --velt-dark-mode-warning-transparent: rgba(255, 205, 46, 0.08);

      /* Success */
      --velt-dark-mode-success: #198F65;
      --velt-dark-mode-success-hover: #006B41;
      --velt-dark-mode-success-foreground: #FFFFFF;
      --velt-dark-mode-success-light: #EDF6F3;
      --velt-dark-mode-success-transparent: rgba(25, 143, 101, 0.08);

      /* Transparent Colors */
      --velt-dark-mode-background-transparent: rgba(0, 0, 0, 0.80);
      --velt-dark-mode-border-transparent: rgba(255, 255, 255, 0.16);
      --velt-dark-mode-animation-transparent: rgba(255, 255, 255, 0.2);
    ```
  </Tab>

  <Tab title="Z-Index">
    ```css
    /* Comment Pin, Triangle */
      --velt-comment-pin-z-index: 2147483557;

        /* Comments Minimap */
      --velt-comments-minimap-z-index: 2147483637;

      /* Persistent Comment Frame */
      --velt-persistent-comment-frame-z-index: 2147483647;

      /* Global Overlay */
      --velt-global-overlay-z-index: 2147483637;

      /* Recorder Player */
      --velt-recorder-player-z-index: 2147483557;

      /* Cursor */
      --velt-cursor-z-index: 2147483647;

      /* Arrow */
      --velt-arrow-z-index: 2147483557;

      /* Toast Popup */
      --velt-toast-popup-z-index: 2147483647;

      /* Live State Sync Overlay */
      --velt-live-state-sync-overlay-z-index: 2147483647;

      /* Follow Mode Overlay */
      --velt-follow-mode-overlay-z-index: 2147483647;
    ```
  </Tab>
</Tabs>

### Dark Mode

* Enable dark mode globally or per component.
* Most components accept a `darkMode` prop (`dark-mode="true"` for non-React).
* Some components that are not directly injected by you like dialogs and pins use specific props (e.g. `dialogDarkMode`, `pinDarkMode`). You can add these props to the root component responsible for injecting them.
* Check each component's UI customization documentation for its dark mode props.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Global
    const client = useVeltClient();
    client.setDarkMode(true);

    // Per component example
    <VeltComments 
      darkMode={true}
      dialogDarkMode={true}
      pinDarkMode={true}
    />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    // Global
    const client = useVeltClient();
    client.setDarkMode(true);

    // Per component example
    <velt-comments 
      dark-mode="true"
      dialog-dark-mode="true"
      pin-dark-mode="true"
    ></velt-comments>
    ```
  </Tab>
</Tabs>

# Custom CSS or libraries

### Custom CSS

You can use your own CSS or libraries like Tailwind CSS to style the Velt components. You will need to disable the Shadow DOM to apply your styles.

1. **Using CSS on rendered components.**

* Inspect the DOM using browser dev tools to find the class names and selectors of the target Velt components.
* Override the styles using your CSS.
* Make sure to [disable the Shadow DOM](#disable-shadow-dom) to apply your styles.

<Tabs>
  <Tab title="React / Next.js">
    ```css
    .velt-composer--input-button {
      background-color: red;
      border-radius: 0;
    }
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```css
    .velt-composer--input-button {
      background-color: red;
      border-radius: 0;
    }
    ```
  </Tab>
</Tabs>

2. **Using CSS on Wireframes.**

* Add the relevant wireframe component.
* Add class or inline styles to the wireframe component like you would on a normal HTML element.
* When the actual component is rendered, the styles will be applied to that component.
* Make sure to [disable the Shadow DOM](#disable-shadow-dom) to apply your styles.

<Warning>
  **Note:** Support for adding class names directly to React wireframe components is coming soon.
</Warning>

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltWireframe>
      <VeltCommentsSidebarWireframe.Header>
        {/* Use CSS classes */}
        <div className="bg-white shadow-lg p-4">
        <VeltCommentsSidebarWireframe.Search />
        <VeltCommentsSidebarWireframe.FilterButton />
      </div>
      
      {/* Or inline styles */}
        <VeltCommentsSidebarWireframe.Status style={{backgroundColor: 'red'}} />
      </VeltCommentsSidebarWireframe.Header>
    </VeltWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-wireframe style="display:none;">
      <velt-comments-sidebar-header-wireframe>
        <!-- Use CSS classes -->
        <div class="bg-white shadow-lg p-4">
          <velt-comments-sidebar-search-wireframe class="w-full"></velt-comments-sidebar-search-wireframe>
          <velt-comments-sidebar-filter-button-wireframe class="mt-2"></velt-comments-sidebar-filter-button-wireframe>
        </div>
        
        <!-- Or inline styles -->
        <velt-comments-sidebar-status-wireframe style="background-color: red"></velt-comments-sidebar-status-wireframe>
      </velt-comments-sidebar-header-wireframe>
    </velt-wireframe>
    ```
  </Tab>
</Tabs>

#### Disable Shadow DOM

* By default, Velt components use Shadow DOM to isolate their styles from your application's CSS. This ensures that styles don't conflict with each other.
* If you want your application's CSS to affect the styling of Velt components, you can disable the Shadow DOM.
* Most components accept a `shadowDom` prop (`shadow-dom="false"` for non-React).
* Some components that are not directly injected by you like dialogs and pins use specific props (e.g. `dialogShadowDom`, `pinShadowDom`).
* Check each component's UI customization documentation for its shadow DOM props.

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltComments shadowDom={false} />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-comments shadow-dom="false"></velt-comments>
    ```
  </Tab>
</Tabs>

### Conditional Classes

Apply classes conditionally based available [template variables](/ui-customization/template-variables).

**Syntax:**

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <SomeVeltWireframe veltClass="<evaluation-string>" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <some-velt-wireframe velt-class="<evaluation-string>"></some-velt-wireframe>
    ```
  </Tab>
</Tabs>

`<evaluation-string>: 'class-name': {velt-template-variable} <operator> 'value'`

* **class-name:** The class name to apply. This should be within single quotes `'`.
* **template-variable:** The template variable to evaluate. This should be within curly braces `{}`.
* **operator:** The operator to use for the comparison. This should be one of the following: `===`, `!==`, `>`, `>=`, `<`, `<=`. You can also use `&&` and `||` to combine multiple conditions.
* **value:** The value to compare the template variable to. This should be within single quotes `'`.

**Example:**

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltWireframe>
      <VeltCommentDialogWireframe.Header  veltClass="'bg-yellow-500': {annotation.status.id} === 'IN_PROGRESS'" />
    </VeltWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```html
    <velt-wireframe style="display:none;">
      <velt-comment-dialog-header-wireframe velt-class="bg-yellow-500: {annotation.status.id} === 'IN_PROGRESS'"></velt-comment-dialog-header-wireframe>
    </velt-wireframe>
    ```
  </Tab>
</Tabs>


# Template Variables
Source: https://docs.velt.dev/ui-customization/template-variables



Template variables allow you to:

* Display dynamic data within Velt components.
* Use the dynamic data to apply conditional templates or CSS classes.

There are two main ways to use them:

1. Using built-in Velt data
2. Injecting your own application data

## 1. Using Built-in Velt Data

Velt provides access to various data objects that you can display in your components using the `VeltData` component.

### Basic Usage

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Display user name
    <VeltData field="user.name" />

    // Access nested properties
    <VeltData field="userContact.organizationName" />
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    // Display user name
    <velt-data field="user.name"></velt-data>

    // Access nested properties
    <velt-data field="userContact.organizationName"></velt-data>
    ```
  </Tab>
</Tabs>

### Available Data Objects

#### Global Variables

These are available across all Velt components:

| Variable                       | Description                  | Data Fields                                                                    |
| ------------------------------ | ---------------------------- | ------------------------------------------------------------------------------ |
| `user`                         | Current logged-in user       | You can find all the fields [here](/api-reference/sdk/models/data-models#user) |
| `unreadCommentAnnotationCount` | Number of unread annotations | -                                                                              |
| `unreadCommentCount`           | Total unread comments        | -                                                                              |

#### Context-Specific Variables

These are only available within relevant components they are used in:

| Variable            | Available In              | Common Fields                                                                               |
| ------------------- | ------------------------- | ------------------------------------------------------------------------------------------- |
| `userContact`       | Autocomplete components   | You can find all the fields [here](/api-reference/sdk/models/data-models#user)              |
| `commentAnnotation` | Comment components        | You can find all the fields [here](/api-reference/sdk/models/data-models#commentannotation) |
| `comment`           | Comment thread components | You can find all the fields [here](/api-reference/sdk/models/data-models#comment)           |

### Example: Building a Custom User Card

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltAutocompleteOptionWireframe>
      <div className="user-card">
        <h3><VeltData field="userContact.name" /></h3>
        <p><VeltData field="userContact.email" /></p>
        <span className="org"><VeltData field="userContact.organizationName" /></span>
      </div>
    </VeltAutocompleteOptionWireframe>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-autocomplete-option-wireframe>
      <div class="user-card">
        <h3><velt-data field="userContact.name"></velt-data></h3>
        <p><velt-data field="userContact.email"></velt-data></p>
        <span class="org"><velt-data field="userContact.organizationName"></velt-data></span>
      </div>
    </velt-autocomplete-option-wireframe>
    ```
  </Tab>
</Tabs>

## 2. Injecting Your Own Data

* You can inject custom data from your application to use within Velt components.
* This data is available in all Velt Wireframes, Velt If and Velt Data components.

### Setting Custom Data

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    // Set custom data
    client.setUiState({
      projectName: 'Dashboard 2.0',
      teamSize: 5,
      customFlag: true
    });

    // Read custom data
    client.getUiState().subscribe((data) => {
      console.log('Custom Data:', data);
    });
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```js
    // Set custom data
    Velt.setUiState({
      projectName: 'Dashboard 2.0',
      teamSize: 5,
      customFlag: true
    });

    // Read custom data
    Velt.getUiState().subscribe((data) => {
      console.log('Custom Data:', data);
    });
    ```
  </Tab>
</Tabs>

### Using Custom Data in Components

<Tabs>
  <Tab title="React / Next.js">
    ```jsx
    <VeltCommentDialogWireframe.Header>
      <div className="header">
        <h2><VeltData field="projectName" /></h2>
        <span>Team Size: <VeltData field="teamSize" /></span>
      </div>
    </VeltCommentDialogWireframe.Header>
    ```
  </Tab>

  <Tab title="Other Frameworks">
    ```jsx
    <velt-comment-dialog-wireframe>
      <div class="header">
        <h2><velt-data field="projectName"></velt-data></h2>
        <span>Team Size: <velt-data field="teamSize"></velt-data></span>
      </div>
    </velt-comment-dialog-wireframe>
    ```
  </Tab>
</Tabs>


# Comments Webhooks
Source: https://docs.velt.dev/webhooks/comments-webhooks



The `Comments` component will emit webhook notifications whenever an `action type` occurs on a comment.

To read more about how to setup webhooks with our SDK, [click here](https://docs.velt.dev/webhooks/overview).

## List of Action Types

| Action Type         | Description                                                                                                  |
| ------------------- | ------------------------------------------------------------------------------------------------------------ |
| `newlyAdded`        | When the first comment in a thread is added                                                                  |
| `added`             | When a new comment is added. Not used for the first comment in a thread - see `newlyAdded`                   |
| `updated`           | When an existing comment content gets updated                                                                |
| `deleted`           | When an existing comments gets deleted                                                                       |
| `approved`          | When the comment is approved by the moderator. This is only applicable if you have turned on Moderator Mode. |
| `assigned`          | When a comment gets assigned to a user                                                                       |
| `statusChanged`     | When a comment has its status changed (e.g. in progress, resolved, opened)                                   |
| `priorityChanged`   | When a comment has its priority changed (e.g. P0, P1, P2 or custom set priorities)                           |
| `accessModeChanged` | When a comment is changed from private to public or vice-versa                                               |
| `accepted`          | When a comment gets accepted by the moderator. This is only applicable if you have turned on Moderator Mode. |
| `rejected`          | When a comment gets rejected by the moderator. This is only applicable if you have turned on Moderator Mode. |
| `reactionAdded`     | When a reaction is added to a comment.                                                                       |
| `reactionDeleted`   | When a reaction is removed from a comment.                                                                   |
| `subscribed`        | When a user subscribes to a comment annotation using the option in the UI.                                   |
| `unsubscribed`      | When a user unsubscribes from a comment annotation using the option in the UI.                               |

## Webhook Data

| Field                | Type              | Required | Description                                                                                                                                                                                                          |
| -------------------- | ----------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `webhookId`          | string            | Yes      | The unique identifier for the webhook event.                                                                                                                                                                         |
| `commentAnnotation`  | CommentAnnotation | Yes      | The target CommentAnnotation object on which the event happened.                                                                                                                                                     |
| `targetComment`      | Comment           | Optional | The target Comment object on which the event happened. This field will not be present if the event was at CommentAnnotation level. Eg: deleted the entire comment annotation, resolved comment, approved comment.    |
| `actionType`         | string            | Yes      | This can have the values listed above                                                                                                                                                                                |
| `notificationSource` | string            | Yes      | Indicates the source of the notification                                                                                                                                                                             |
| `actionUser`         | string            | Yes      | Contains information about the user who performed the action, including their name, email, and user ID.                                                                                                              |
| `metadata`           | string            | Yes      | This field contains additional metadata related to the annotation, such as the API key, client document ID, document ID, and information about various locations where the annotation is associated with a web page. |

<ResponseExample>
  ```js Webhook Data
  {
    "webhookId": "-Nvmw84XtUUHIsrcKAvI",
    "commentAnnotation": {
      "annotationId": "-O7Yi14ES3EPayuzQ54J",
      "annotationIndex": 20,
      "comments": [
        {
          "commentHtml": "@Jim Halpert can you take a look?",
          "commentId": 822004,
          "commentText": "@Jim Halpert can you take a look?",
          "from": {
            "clientOrganizationId": "velt-sample-app",
            "color": "#67DBF4",
            "email": "peppa.pig@velt.dev",
            "initial": "P",
            "isAdmin": false,
            "name": "Peppa Pig",
            "organizationId": "392580a690394bfadd823101f2b05513",
            "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Fpeppa_pig.svg?alt=media&token=a9fc83f7-b347-4868-8d52-0e888f0de73a&_gl=1*jzxghx*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMTQ5LjQyLjAuMA..",
            "textColor": "#fff",
            "type": "signedIn",
            "userId": "user0",
            "userSnippylyId": "195298461116078"
          },
          "lastUpdated": "2024-09-24T11:08:49.724Z",
          "status": "added",
          "taggedUserContacts": [
            {
              "contact": {
                "email": "jim.halpert@dundermifflin.com",
                "initial": "J",
                "name": "Jim Halpert",
                "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Frosy_rabbit.svg?alt=media&token=4e65a9e3-080d-4416-839d-e761b6b37181&_gl=1*156om5t*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMjUzLjYwLjAuMA..",
                "userId": "e54d19af-0e43-4364-819f-0a8b18a280fb",
                "userSnippylyId": "5236622904561187"
              },
              "text": "@Jim Halpert",
              "userId": "e54d19af-0e43-4364-819f-0a8b18a280fb"
            }
          ],
          "to": [
            {
              "email": "jim.halpert@dundermifflin.com",
              "initial": "J",
              "name": "Jim Halpert",
              "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Frosy_rabbit.svg?alt=media&token=4e65a9e3-080d-4416-839d-e761b6b37181&_gl=1*156om5t*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMjUzLjYwLjAuMA..",
              "userId": "e54d19af-0e43-4364-819f-0a8b18a280fb",
              "userSnippylyId": "5236622904561187"
            }
          ],
          "type": "text"
        },
        {
          "commentHtml": "test",
          "commentId": 719893,
          "commentText": "test",
          "from": {
            "clientOrganizationId": "velt-sample-app",
            "color": "#2c83fc",
            "email": "freddy.froglet@velt.dev",
            "initial": "F",
            "isAdmin": false,
            "name": "Freddy Froglet",
            "organizationId": "392580a690394bfadd823101f2b05513",
            "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Ffreddy_froglet.svg?alt=media&token=e3b2e292-6480-4507-9da3-21a62a1346d4&_gl=1*s4yycs*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMDQzLjcuMC4w",
            "textColor": "#fff",
            "type": "signedIn",
            "userId": "user8",
            "userSnippylyId": "4291391246842733"
          },
          "lastUpdated": "2024-09-24T11:11:58.344Z",
          "status": "added",
          "type": "text"
        }
      ],
      "from": {
        "clientOrganizationId": "velt-sample-app",
        "color": "#67DBF4",
        "email": "peppa.pig@velt.dev",
        "initial": "P",
        "isAdmin": false,
        "name": "Peppa Pig",
        "organizationId": "392580a690394bfadd823101f2b05513",
        "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Fpeppa_pig.svg?alt=media&token=a9fc83f7-b347-4868-8d52-0e888f0de73a&_gl=1*jzxghx*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMTQ5LjQyLjAuMA..",
        "textColor": "#fff",
        "type": "signedIn",
        "userId": "user0",
        "userSnippylyId": "195298461116078"
      },
      "lastUpdated": 1727176311596,
      "metadata": {
        "apiKey": "AN5s6iaYIuLLXul0X4zf",
        "documentId": "toolbar",
        "organizationId": "velt-sample-app"
      },
      "pageInfo": {
        "baseUrl": "https://velt-vercel-style-toolbar-demo.vercel.app",
        "commentUrl": "https://velt-vercel-style-toolbar-demo.vercel.app/?scommentId=-O7Yi14ES3EPayuzQ54J",
        "deviceInfo": {
          "browserName": "Chrome",
          "browserVersion": "128",
          "deviceType": "Mobile",
          "orientation": "landscape",
          "osName": "Macintosh",
          "osVersion": "10.15.7",
          "screenHeight": 900,
          "screenWidth": 1440,
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36"
        },
        "path": "/",
        "screenWidth": 804,
        "title": "Web App | Velt Demo",
        "url": "https://velt-vercel-style-toolbar-demo.vercel.app/"
      },
      "status": {
        "color": "#625DF5",
        "id": "OPEN",
        "lightColor": "#E7E8FA",
        "name": "Open",
        "svg": "\n      <svg\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M8.00016 13.3333C10.9457 13.3333 13.3335 10.9455 13.3335 8.00001C13.3335 5.05449 10.9457 2.66668 8.00016 2.66668C5.05464 2.66668 2.66683 5.05449 2.66683 8.00001C2.66683 10.9455 5.05464 13.3333 8.00016 13.3333ZM8.00016 14.6667C11.6821 14.6667 14.6668 11.6819 14.6668 8.00001C14.6668 4.31811 11.6821 1.33334 8.00016 1.33334C4.31826 1.33334 1.3335 4.31811 1.3335 8.00001C1.3335 11.6819 4.31826 14.6667 8.00016 14.6667Z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n      ",
        "type": "default"
      },
      "subscribedUsers": {
        "3604c43f40557d7aa27ff4d0f72202a3": {
          "type": "auto",
          "user": {
            "email": "jim.halpert@dundermifflin.com",
            "initial": "J",
            "name": "Jim Halpert",
            "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Frosy_rabbit.svg?alt=media&token=4e65a9e3-080d-4416-839d-e761b6b37181&_gl=1*156om5t*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMjUzLjYwLjAuMA..",
            "userId": "e54d19af-0e43-4364-819f-0a8b18a280fb",
            "userSnippylyId": "5236622904561187"
          }
        },
        "3d517fe6ebab7b8cfcf98db6259c8a59": {
          "type": "auto",
          "user": {
            "clientOrganizationId": "velt-sample-app",
            "color": "#67DBF4",
            "email": "peppa.pig@velt.dev",
            "initial": "P",
            "isAdmin": false,
            "name": "Peppa Pig",
            "organizationId": "392580a690394bfadd823101f2b05513",
            "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Fpeppa_pig.svg?alt=media&token=a9fc83f7-b347-4868-8d52-0e888f0de73a&_gl=1*jzxghx*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMTQ5LjQyLjAuMA..",
            "textColor": "#fff",
            "type": "signedIn",
            "userId": "user0",
            "userSnippylyId": "195298461116078"
          }
        },
        "7668f673d5669995175ef91b5d171945": {
          "type": "manual",
          "user": {
            "clientOrganizationId": "velt-sample-app",
            "color": "#2c83fc",
            "email": "freddy.froglet@velt.dev",
            "initial": "F",
            "isAdmin": false,
            "name": "Freddy Froglet",
            "organizationId": "392580a690394bfadd823101f2b05513",
            "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Ffreddy_froglet.svg?alt=media&token=e3b2e292-6480-4507-9da3-21a62a1346d4&_gl=1*s4yycs*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMDQzLjcuMC4w",
            "textColor": "#fff",
            "type": "signedIn",
            "userId": "user8",
            "userSnippylyId": "4291391246842733"
          }
        }
      },
      "type": "comment"
    },
    "targetComment": {
      "commentHtml": "test",
      "commentId": 719893,
      "commentText": "test",
      "from": {
        "clientOrganizationId": "velt-sample-app",
        "color": "#2c83fc",
        "email": "freddy.froglet@velt.dev",
        "initial": "F",
        "isAdmin": false,
        "name": "Freddy Froglet",
        "organizationId": "392580a690394bfadd823101f2b05513",
        "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Ffreddy_froglet.svg?alt=media&token=e3b2e292-6480-4507-9da3-21a62a1346d4&_gl=1*s4yycs*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMDQzLjcuMC4w",
        "textColor": "#fff",
        "type": "signedIn",
        "userId": "user8",
        "userSnippylyId": "4291391246842733"
      },
      "lastUpdated": "2024-09-24T11:11:58.344Z",
      "status": "added",
      "type": "text"
    },
    "actionType": "added",
    "notificationSource": "comment",
    "actionUser": {
      "clientOrganizationId": "velt-sample-app",
      "color": "#2c83fc",
      "email": "freddy.froglet@velt.dev",
      "initial": "F",
      "isAdmin": false,
      "name": "Freddy Froglet",
      "organizationId": "392580a690394bfadd823101f2b05513",
      "photoUrl": "https://firebasestorage.googleapis.com/v0/b/snippyly-sdk-external/o/avatars%2Ffreddy_froglet.svg?alt=media&token=e3b2e292-6480-4507-9da3-21a62a1346d4&_gl=1*s4yycs*_ga*NTc3MjEzMjIwLjE2NjEwODkwMDU.*_ga_CW55HF8NVT*MTY5NzE0MTIzNC4zMzMuMS4xNjk3MTQyMDQzLjcuMC4w",
      "textColor": "#fff",
      "type": "signedIn",
      "userId": "user8",
      "userSnippylyId": "4291391246842733"
    },
    "metadata": {
      "apiKey": "AN5s6iaYIuLLXul0X4zf",
      "clientDocumentId": "toolbar",
      "clientOrganizationId": "velt-sample-app",
      "documentId": "toolbar",
      "documentName": "Your_Document_Name",
      "organizationId": "velt-sample-app",
      "pageInfo": {
        "baseUrl": "https://velt-vercel-style-toolbar-demo.vercel.app",
        "path": "/",
        "title": "Web App | Velt Demo",
        "url": "https://velt-vercel-style-toolbar-demo.vercel.app/"
      }
    },
    "platform": "sdk"
  }
  ```
</ResponseExample>


# Huddle Webhooks
Source: https://docs.velt.dev/webhooks/huddle-webhooks



The `Huddle` component will emit webhook notifications when a user creates or joins a group huddle.

To read more about how to setup webhooks with our SDK, [click here](https://docs.velt.dev/webhooks/overview).

## List of Action Types

| Action Type | Description                      |
| ----------- | -------------------------------- |
| `created`   | When a `User` created a `Huddle` |
| `join`      | When a `User` joins a `Huddle`   |

## Webhook data

| Field                | Type       | Required | Description                                  |
| -------------------- | ---------- | -------- | -------------------------------------------- |
| `webhookId`          | string     | Yes      | The unique identifier for the webhook event. |
| `actionType`         | string     | Yes      | Type of action: created or joined            |
| `notificationSource` | string     | Yes      | Source of notification: huddle               |
| `actionUser`         | UserObject | Yes      | The user who performed the action            |
| `metadata`           | object     | Yes      | Metadata related to the action               |

<RequestExample>
  ```jsx Huddle Created
  {
    "webhookId": "-Nvmw84XtUUHIsrcKAvI",
    "actionType": "created",
    "notificationSource": "huddle",
    "actionUser": {
      "clientOrganizationId": "7e2aed5bc102d06f740ab92afdf58e78f9d34d409555d19a35389309c80f4b4f",
      "color": "#19bcfe",
      "email": "john@trysnippyly.com",
      "organizationId": "7e2aed5bc102d06f740ab92afdf58e78f9d34d409555d19a35389309c80f4b4f",
      "name": "John Smith",
      "plan": "free",
      "type": "signedIn",
      "userId": "1",
    },
    "metadata": {
      "apiKey": "Emcfab4ysRXaC1CZ8hmG",
      "clientDocumentId": "12-4-24",
      "documentId": "1856907974154638",
      "locations": {
        "5638605251172150": {
          "location": {
            "id": "location1",
            "locationName": "Location 1"
          },
          "locationId": 5638605251172150,
          "pageInfo": {
            "baseUrl": "http://localhost:3000",
            "path": "/",
            "title": "Velt React Demo",
            "url": "http://localhost:3000/"
          }
        }
      },
      "pageInfo": {
        "baseUrl": "http://localhost:3000",
        "path": "/",
        "title": "Velt React Demo",
        "url": "http://localhost:3000/"
      }
    },
    "platform": "sdk"
  }
  ```

  ```jsx Huddle Joined
  {
    "webhookId": "-Nvmw84XtUUHIsrcKAvI",
    "actionType": "joined",
    "notificationSource": "huddle",
    "actionUser": {
      "clientOrganizationId": "7e2aed5bc102d06f740ab92afdf58e78f9d34d409555d19a35389309c80f4b4f",
      "color": "#ff7162",
      "contacts": [
        {
          "email": "john@trysnippyly.com",
          "name": "John Smith",
          "userId": "1"
        },
        {
          "email": "sarah@trysnippyly.com",
          "name": "Sarah Wilson",
          "userId": "3"
        }
      ],
      "email": "maria@trysnippyly.com",
      "organizationId": "7e2aed5bc102d06f740ab92afdf58e78f9d34d409555d19a35389309c80f4b4f",
      "name": "Maria Garcia",
      "plan": "paid",
      "type": "signedIn",
      "userId": "2",
    },
    "metadata": {
      "apiKey": "Emcfab4ysRXaC1CZ8hmG",
      "clientDocumentId": "12-4-24",
      "documentId": "1856907974154638",
      "pageInfo": {
        "baseUrl": "http://localhost:3000",
        "path": "/",
        "title": "Velt React Demo",
        "url": "http://localhost:3000/"
      }
    },
    "platform": "sdk"
  }
  ```
</RequestExample>


# Overview
Source: https://docs.velt.dev/webhooks/overview



Set up a webhook endpoint to receive real-time notifications for the following Velt events:

* [Comments](/webhooks/comments-webhooks)
* [Huddle](/webhooks/huddle-webhooks)

## Setting up a Webhook

To enable Webhooks go to the Configurations -> Webhook Service in the Velt Console, or [click here](https://console.velt.dev/dashboard/config/webhook)

### **Webhook Auth Token**

* Optional security feature to authenticate webhook requests.
* Set a unique auth token in your Velt console's webhook settings.
* We add this token to the Authorization header of each request as `Basic YOUR_AUTH_TOKEN`.
* Helps you verify that requests are from Velt, not from unauthorized sources.

### **Endpoint URL**

* This is the endpoint that we will send the webhook data to. This is usually hosted on your server.

### **Payload Encoding**

* Enable Base64 encoding for webhook payloads (disabled by default).
* Addresses issues with payloads containing HTML tags that may fail due to strict endpoint policies.
* If enabled, ensure your server can decode Base64 encoded payloads.
* Example of decoding a Base64 encoded payload:

  ```js
  const encodedData = "eyJ0ZXN0IjoxLCJ0ZXN0MSI6IjxkaXY+PC9kaXY+In0="
  const decodedData = Buffer.from(encodedData, 'base64').toString('utf-8');
  console.log(JSON.parse(decodedData));
  ```

### **Payload Encryption**

* Enable payload encryption for enhanced security (disabled by default).
* Configure this option in the [Velt Console](https://console.velt.dev/dashboard/config/webhook).
* Encryption details:
  * Payload encryption: AES-256-CBC
  * Key encryption: RSA with PKCS1 OAEP padding and SHA-256 hash
* Public key format:
  * Provide only the base64-encoded key string, without PEM headers/footers
  * Recommended key size: 2048 bits
* Example of setting up decryption for Node.js:

<Tabs>
  <Tab title="Sample Encrypted Payload">
    ```js
    {
      "encryptedData": "1rtsa9UVvXzkP+u0ax2TOlz6xKcwKXhmtHyQF1I4II8X4n9uYb944Q/6AfUNFc2zQj9+AWJIV1Gtoo0j+j5VI8qS4kCVnP4In6v0I3wVECldgZsNAwwD4wKp85OJZUJL4scQmJJK+XXmMNGOW094BcIIa6zKRqYKja5RBm5zEj3k1qsP3WZkUXpggJ4FNuHkWX2nkoDLP5Rby6CY186TEeBIxY+aKS6FyWmOiDDC6ZfuY++BFNJbksNvsbBogDqHB2qa30nK9oEcOKSsXdU4AYof/mPOG01fK2diK3vyk4qcL83mJ0cXm7+SbM+FBFeJpdR+A7iIez1XrdnGlAqppnSfDoNBv2WZ/lRyZJWOyW7QHySMNTn746+JDr8oltIBDVUx5c2m8A/YeQ6E3wWEjjRZcfz3GNSzpEx+jqeNxS0StN7BUXUyHt3786EaXiUtjb2OtrP56mlidXytdHhPZPOy7stRwHnwgXfm5aLsS2yJSs3gSSUubL+ka4fhaJsqxtgXQATSh0RtNXSmAbx930DKn2DipbP23fJRduju/GP1nHnKuy8bOuyB5Du//RrysvKVC4+lMd4mVIc7cSXe25qcPjJFZGpJtJdkNwOZoWCmxMSdR32HBgo7KWJeOWqnWyuLdjQOaxol+JtTu8lopeQk7qfncEXMLcT7YRVQ4t1LZ5T9o4pZEtaOg1LwyX58VQS1OHvgBFWlEPxLfdS1r4c1YzMXLNA4sfYEp06Z11IlEFVCtWobK5//tLc+sIpwfMzdJ3VtVl9Z2XB9kASlnHf88eOdtzvn5A0CRhVBY/v855CttAy/WlPINtXxXSxm9oVMjrBFueWAZ3LQiXDl25to62L5i0NR93zEBKj1BG8egy3F27o8s5kcvrwpc3NGrmDe7x3S11noDAFsxZRWpHnRIapHcsrLWOjWVEumvUxlApKGKL3Ax80XBoN+aTNG4SXGq3dRHSneIs/MNSb0BGWoOD5U5ow58R1tvpzJHtLLnmesL1Vhr23Cug8KHU2q7+e8AnGGPTJIRKfVXjocMDclhDAk5/nuvtUTYG/hRZEQ1yCx3T7H08I6GvyOv4ErtKr+r883hXSYzf1K9eqk7de5mnmxwSEiAh0zagvZ+lMYhWpayeo+xHvtoyzfTsLNyXKc6AYZxfoIVK6UuBfkDnXiAh+NuJDa3wKwig13gQX8GmdJXeSSatI6uuXI1IU5xKIXysaHeAOaHfni+cfDgvUZTtVbWc1qDcNOVEUSl9KsjOUUgdzvST1tJ1ezMNZFbhlrPB3t5y0XvM9QQh1GyyeABxHl8nH/Icrp2Shf5vBntNbRZ3PlzK7nVtgTxXaKhZnGobwY7uruPpahNfkEi83JvOOnHeHBMXrVMAr8GHDRi8099wzvJRHYcb2p6eWocQsDV1X6tcTLuxj3EHGwykWREkkTDQ5C/F40n97PP0U2cxSGJIMePUwgAYw5OFo0dJMsU1HvXjm+2JoO8DkdwPl3Bc9F22trvsA3QecUCKQDGMTuFrFxtlubtJYtVl7w3pBST0SCKx3G2QiycRz0FMWv2FJpazQl6jE4xEqeKf7fiUn/QIo4Levk745LPhfr2tzlXbkdZ2q9TtmSAs5hjpK7ndswbIbvV8Ju5V8mDJXSR0y0NKG2C/8/vTB0xfqYtW/Bv3cXj6do9UQzP6fOFC4SGvYh/l8yohJmCTFq0tETqvZr9Atw9ZOz2cIBFx76wlS/eR9iB/JZ3DGM+2THC6Mjv70ipWX32UW7620Bb5KONm3Vw0eeIHckUn6QaHGfFL/URT6mr7YCJhG5lZynWYZcLv/ffWuFcSmO9p0xCrwqqPEjdaaGs52mqmA4Ikt9MulKAEp6p65V1vxt7Tdy6m9UVjzbEy1zFuU9iOHBAAaj6A8Mj1EEUe6sNx3fLHnC2c0+2Zf3eUxMZPm5dQZPOUXLI28yoCliBIhTYTSh7ATULDDvcnNMs/ziuG7WT/U1wuIHkT5kEE73tnG1EZY4RDODbQobmpBegcuUEh64HEGS7+aK/KPYWxFxWW5oVd0Dc7kvpariXqEhlNdDY65b2T8uBw8bI/HrfvT8d0EnsPz26B1xKZYqyusWnlR+10KdYzPNoupx8vWk74PW8zI5qlcV497SPtvn12a3wvZ8adJzMuP4hsBoKHG/M2nf0lOMbo1gcbHbT0FqcHE3mixY3lU+UnNC5jpmNCs1tK8yqeQdVtHE3YM4Y5SsnBTJddUWVpUxZ6rlU+H2NW/uGcDLBs3HmERTn1l6E1mmqKB2kPA/+Y/YbILXNojbkgRE/3lki5kX4+pjHDxF/mWEEeXpjIl4yKG97mVS2J0dGoJ5CqLv6/CdHhtwu35UydBVDVGHywufVLwPgEiDA9RklM/bQw3ojdlTrn6+irDcz8/Tj7KmK2votLaN6yIEM8Ex2htyBlyX/47eEsh63nSNwSx+uPcTxjH9N5cJpWzJ2KcBMIqZsWOTgISBUndgRdoVTFySY2XwbHlDjh8RCLLBsYRhvOK+nvNqEBnrfzz81B/sqDO1whQDTKT3ZcFnZouaVImRGHcOt0sRioq/JGHAHzRjyc/V9Gb/zTlI8QQob5y5k7dfReAy1rGdkeIa3LXSwWGz8hDjEnGsGGIC4evdiefgoJHkhzEywi/QUEOOnqms/0BzexbLP+89qMgGMlEbA9iLAW/BZgsAkxm+NHqGNtz9HDJStpqewElgjMQ+wV3TUGbrmY0O/FyQn/CXyhXjdRC0/5S1tZnzBMyolHF2a5L5EAzGck2MuV7TgLs6LcvGm7kIeq0vmBCkiUB4IBHMhraU7Ba+cC+CW7tDK0Tkanri5KSMXSXamJpU869Jcsk1JLm69ATMl3eIb5rPx5+GbPUrRogEUP3HQeLMQP8jjq6fVwzGPQByF70t0fE+Z23NuCLzhVss0YkMmzcKK8GjKCJ0vnCA0qanxovpDgCOHjgxvy44N+QNWfUynIKVHS9m7FDE3RgKf7rOfSM9vJ7F/KWo7kywi36ajuFbWcON/MTvlpPUhGm5dboiz3vyfpTWkQbd9XX7SPVBWCkvGg+A87R7RSN8bsWbmYm5m2wt3jrkBVSDn5FV3rek6X0GSpTDTWJ9ktmjKtshplXn7fx7XAKtS4hpEMGhZwi/LWvfTsGqOJlqi2FwYPLI7SVunch2VSfssejrfwxJHPqF50wTv6ax28lp7wToqsVunZprdhyY++gds/LAz083dZLM3EYcbHuGVXiNRFxptpiQNjEnyjZX0fc8UF1W2icDt7Gd5Pp2ckaPERLE+tJ+ackMxomH2/HjFB3XRXlDCoKuljtJ2cbw/gVPmHtV7Qw2w6tWaCzYP3g1D47BlrIqBV4RWjcPRjthfcWPnwUSSHwlJ4dLMQ+cJ402ol+HUukAKpkh5lcjME0uaD8KKReD/Ee9r4kubIR7z9JViXjnJJl3Jxr6KtK3abrg8cG8qVFRr5NDhxbfs9NY/zGDvbgt0GMWXRTi4oMrSkDKthZSWjVezDzPk11AMQ1E+SJSoSXgwUl1rbWPg0O29prkQdfdKQmZcaO5oj7+f3kSPsIOE9+Qn43VOxOWWybkCzSvEbzLgmuov5C8EWYeJgh13qDcNSwNdt4PgAqIq+tikKNUo9qeM9/q20an+i20fatPAcvrRes+xxnIBXmlPDCj02THjX4EulV2KE+nNxFnCrNvFKYp2bEAegJ2neqfeefDDDhn+t7OK9/73v3O3qnEwSyBlt+pEyHfLjv3Cm7Ik7JA5NUQ/nsS3JdC8OYy2i1DWSvi1qsP3ixAVCR7qBVdoOF2Lv5y2GWrJ0EvVcGqaPBnUezMGMdozNjreschNJvRlp3D72dGGQgs00GHyHbIQ5wicC5p+PiZ2z1EUBN7DiDy9ShQPKEDJtISiSrSaPkDPKpW7SxmSfDaLOIxEy4daAupV0gj7yTtrkpEvJjRECpa0kuKFP3/eFVVp/nIjWDzFASfDvYiry90dDrvLxO3tosuvMVfhXcOy/zbyeCkObaFgc3OkO4z2r4X4Vwt18BoRAammiEfgCbnhywl/CmLrSwV1qSjUgALh/XUPkqXCkqerNjYTlZw5NdRUKmheUXHYGwo4Z+xPfDtiHk1N5vRgNL9/qXsgt813spju9kDMGQGiXlrOgIyhArHR5p2B4S3FjRQ/lEoP5+5wN+9tBKYrR79sZXNS8CwR0BPrOoY9GQCYFdxrBtyH6KOWg29FVXNodt2Yvot7ktofcen1zwQJOAr0KTyqF9/TIltO+hS7swSzZMjV368SEPYjrtXfnXNWYltOS2zJAWYeqr0XLrL+iHbbOQLC7Rk0mnizmUt9wdefz4MtfXZNcdKR4LPsOqYyIz5ux90XiCbvcNZJaRa2/dzecv/koLQPbKzFPGxKiUOsHAa5SEGgbWFZE4Y9CBFS4nCuEOgUnVz9XtFAEP4dazc2cxjYLVzaG5msOiOY1O5ZygYMeVZfdKaITg7gMPbkL3Lpzo7QBMXcHmT5YAUeNaSbHxvgg45Jn8r7W72EQP9tF7SPKiPvxo91xkB7MA3JOcZXC1qymTUWqjO038wSShK48kE+qgu7V9rjP5fOCDW3+3338eifxqS7Zq6FSO053c5W2c8wFR4iw==",
      "encryptedKey": "OzSHFXzrXFC5wDvM5NPRkriY/NaC/USvFUPE+f4NZ30tiD2qb8sJM2XT2K7uNIZ05uDLfsJ6/BbEoYC1SOPXcFJMYqRiYFiI9RWrNgR4EtPWZ84RgrmxGcZZjzSqHzjuls8g++cuqJGRV+ePbTRH+z2OuZZu0vMKZiemaZpHL46Ewi9HUnbRDXvOlKFFHmQm5tayZ7m7Mv5iu4T5R3DPEAHlZnGqtP98ToLxUJUS2Eku/iLHXRmhmZXn55Qt5GYiyss8P5/miPqJCu1QG0CStn5Nsl4KvU+I4QYAOcMFWWUAGofOwPWtt8vPh8Bx+7t7BbayKpA4ZUEWWAjC+zASxg==",
      "iv": "SHM0UHU5WXoyTG03TnExWA=="
    }
    ```
  </Tab>

  <Tab title="Sample Decryption Code">
    ```javascript
        const crypto = require('crypto');

        /**
         * Decrypts the symmetric key using the provided private key.
         * @param {string} encryptedKey - Base64 encoded encrypted symmetric key
         * @param {string} privateKey - RSA private key
         * @returns {Buffer} Decrypted symmetric key
         */
        function decryptSymmetricKey(encryptedKey, privateKey) {
            try {
                const encryptedSymmetricKey = Buffer.from(encryptedKey, 'base64');
                const decryptedSymmetricKey = crypto.privateDecrypt(
                    {
                        key: `-----BEGIN RSA PRIVATE KEY-----\n${privateKey}\n-----END RSA PRIVATE KEY-----`,
                        padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
                        oaepHash: 'sha256',
                    },
                    encryptedSymmetricKey
                );
                return decryptedSymmetricKey;
            } catch (error) {
                console.error('Error decrypting symmetric key:', error);
                throw new Error('Failed to decrypt symmetric key');
            }
        }

        /**
         * Decrypts the webhook data using the provided symmetric key and IV.
         * @param {string} encryptedWebhookData - Base64 encoded encrypted webhook data
         * @param {Buffer} symmetricKey - Decrypted symmetric key
         * @param {string} payloadIv - Base64 encoded initialization vector
         * @returns {Object} Decrypted webhook data as a JSON object
         */
        function decryptWebhookData(encryptedWebhookData, symmetricKey, payloadIv) {
            try {
                const iv = Buffer.from(payloadIv, 'base64');
                const decipher = crypto.createDecipheriv('aes-256-cbc', symmetricKey, iv);
                let decryptedData = decipher.update(encryptedWebhookData, 'base64', 'utf8');
                decryptedData += decipher.final('utf8');
                return JSON.parse(decryptedData);
            } catch (error) {
                console.error('Error decrypting webhook data:', error);
                throw new Error('Failed to decrypt webhook data');
            }
        }

        // Example usage:
        // const decryptedKey = decryptSymmetricKey(encryptedKey, privateKey);
        // const decryptedData = decryptWebhookData(encryptedWebhookData, decryptedKey, payloadIv);
    ```
  </Tab>
</Tabs>


