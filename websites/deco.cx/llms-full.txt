# Product Updates
Source: https://docs.deco.cx/changelog/overview

New updates and improvements

<Update label="February 2025">
  ## üéâ Celebrating 1000 PRs on deco-cx/apps! üéâ

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/decocx/images/changelog/2025-jan-rjsf.png" alt="Form Selection" />
  </Frame>

  ### Timeline of Significant Features

  #### 2025

  * PR #996: Enhanced Product Data Handling in Schema.org Transformation
  * PR #992: Support for displaying videos on Shopify products
  * PR #988: Implementation of VTEX promotion loader
  * PR #986: Reviews ordering system improvements

  #### 2024

  * PR #976: Blog features - Related posts functionality
  * PR #963: Added pickup holidays type
  * PR #958: Introduction of OneDollarStats collector
  * PR #947: Optimization of asset proxying
  * PR #920: Shopify signUp action implementation
  * PR #917: Wake integration - Partner token functionality

  #### 2023

  * PR #830: SAP Commerce App integration
  * PR #751: Wake buyList query implementation
  * PR #703: Linx Commerce integration improvements
  * PR #671: Smarthint Integration
  * PR #634: Verified reviews product aggregation
  * PR #435: Mailchimp integration

  ### Key Features Added

  #### Commerce Integrations

  * VTEX Integration enhancements
  * Shopify features expansion
  * Wake Commerce implementation
  * SAP Commerce integration
  * Linx Commerce improvements
  * Nuvemshop Integration

  #### Analytics & Marketing

  * OneDollarStats collector
  * Mailchimp integration
  * Google Sheets functionality
  * Enhanced analytics tracking
  * Improved SEO capabilities

  #### Product Features

  * Enhanced product data handling
  * Video support for products
  * Reviews and ratings system
  * Product aggregation in verified reviews
  * Improved product listing capabilities

  #### User Experience

  * Blog functionality
  * Pickup scheduling system
  * Partner token system
  * Enhanced shipping calculations
  * Improved cart management

  ### Notable Contributors

  #### Top Contributors

  * @guitavano
  * @mcandeia
  * @tlgimenes
  * @matheusgr
  * @vitoUwu

  #### New Contributors in Recent Milestones

  * @gabriel-kerchner
  * @AlexWasHeree
  * @aline-pereira
  * @gsbenevides2
  * @pedrobernardina

  ### Impact

  The repository has grown significantly, with contributions spanning various aspects of e-commerce and web development. The additions have enhanced the platform's capabilities in:

  * Commerce platform integrations
  * Analytics and tracking
  * Content management
  * User experience
  * Performance optimization
  * Marketing tools

  This milestone represents the collaborative effort of the community in building a robust and feature-rich platform for digital commerce.
</Update>

<Update label="January 2025">
  ## Form select now keeps the correct type

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/decocx/images/changelog/2025-jan-rjsf.png" alt="Form Selection" />
  </Frame>

  Some types, such as the product listing page properties type selection, are now **correctly selected**.

  This issue was caused by three main problems:

  * RJSF was unable to distinguish between properties that have multiple types (e.g., `[string, number]`).
  * There was an issue with schemas generated from apps before version 0.64.21, where a property type such as `[]` (empty array) was not allowed.
  * RJSF didn't correctly cache a root schema with `$id`, as it also needed to cache the same root schema with `ROOT_SCHEMA_PREFIX` as the id.

  If you are still experiencing issues with this bug, please **update to the latest version of the app**.

  ## AI Input form fill

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/decocx/images/changelog/2025-jan-aiinput.png" alt="AI Inputs" />
  </Frame>

  We added a tool for select input that uses contextual information to generate text.

  Under the hood, we use the Sonnet 3.5 model to generate information, expanding the prompt by extracting context from the page itself.

  An additional prompt can be used to improve the result of the task. A diff between the current input and the proposed AI input is shown before confirmation.

  For each string property, you can use the `@aiContext` annotation to provide additional context for the user.

  We aim to expand this utility across all our products and allow your own AI apps to edit and create data for your site!

  ## Webdrawm in admin

  <Frame>
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/decocx/images/changelog/2025-jan-webdraw.png" alt="Webdraw" />
  </Frame>

  Introducing Webdraw! This new tool allows you to create AI-driven sections directly within our admin interface.

  To create a section, use Webdraw and press `‚åò (CTRL) + P` to push your section to the admin and start using it.

  You may need a tailored prompt to achieve the best results. For example, you can copy the code from an existing section as a reference.

  We have made our default [deco prompt available here](https://gist.github.com/matheusgr/bbdcab6747cccb83e18254304d0970fc).

  Please note that AI may sometimes generate invalid TSX code, so some manual adjustments might be necessary.

  <Warning>Note: This feature is still experimental!</Warning>
</Update>


# null
Source: https://docs.deco.cx/pt/api-reference/invoke

Invoke Client API Reference

A API Invoke √© um cliente RPC (Remote Procedure Call) tipado. Ela torna a
intera√ß√£o com loaders e actions mais segura e t√£o f√°cil quanto chamar uma
fun√ß√£o, abstraindo os detalhes do transporte de rede acontecendo por baixo dos
panos.

Um √∫nico cliente Invoke pode ser usado para interagir com a√ß√µes e carregadores
do seu site e de qualquer App instalado. O Invoke pode ser usado tanto no
Cliente quanto no Servidor e suporta padr√µes mais complexos, como chamar
m√∫ltiplos loaders/actions em uma √∫nica requisi√ß√£o (Veja o Exemplo 4: Invoke em
Batch) ou enviar arquivos via uma requisi√ß√£o multipart.

A assinatura de tipo de Invoke ser√° sempre din√¢mica e ser√° inferida com base no
tipo do seu manifesto e no tipo da a√ß√£o/carregador que voc√™ est√° chamando:

Por exemplo:

```typescript
import { invoke } from "site/runtime.ts";

const resultado = await invoke.site.loaders.exemplo(
    props: T, // Este ser√° o tipo das props da action/loader sendo chamado
    init?: InvokerRequestInit // Este √© um objeto de inicializa√ß√£o de requisi√ß√£o fetch estendido com algumas op√ß√µes extras
);

console.log(resultado); // Este ser√° o tipo do valor de retorno da action/loader
```

## Importando a API

### Uso no Browser (client-side)

Para uso no Cliente, o Invoke √© exportado da `runtime.ts` no raiz do projeto.

Abaixo est√° um exemplo de um arquivo `runtime.ts` t√≠pico, que cria um cliente
para interagir com actions e loaders do seu site, e de dois apps: VTEX e Linx
Impulse. Todos os Apps podem ser usados da mesma forma, j√° que exportam um
`Manifest`.

```typescript
import { proxy } from "deco/clients/withManifest.ts";
import type { Manifest } from "./manifest.gen.ts";
import type { Manifest as ManifestVTEX } from "apps/vtex/manifest.gen.ts";
import type { Manifest as ManifestLinxImpulse } from "apps/linx-impulse/manifest.gen.ts";

export const invoke = proxy<Manifest & ManifestVTEX & ManifestLinxImpulse>();
```

### Uso no Servidor

Para uso no Servidor, o Invoke pode sempre ser acessado a partir do *Contexto*
da Aplica√ß√£o. Isso torna o Invoke mais f√°cil de usar dentro de actions e
loaders.

Abaixo est√° um exemplo de um loader que utiliza o Invoke para chamar outro
loader da mesma Aplica√ß√£o:

```typescript
import type { AppContext } from "site/apps/site.ts";

export const async function getUserNotes(
    props: Props, req: Request, ctx: AppContext
): Promise<User> {
    const user = await ctx.invoke.site.loaders.getUser({ token: req.headers.get("Authorization") });

    if (!user) {
        throw new Error("Usu√°rio n√£o encontrado");
    }

    return user.notes;
}
```

## Exemplos de Uso

### Exemplo 1: Chamando uma Action ou Loader a partir do Navegador

Suponha que temos um loader chamado `getUser`, que retorna um objeto de usu√°rio,
baseado em um `id` de usu√°rio enviado.

```typescript
import type { AppContext } from "site/apps/site.ts";

export interface Props {
    id: string;
}

export const async function getUser(
    props: Props, req: Request, ctx: AppContext
): Promise<User> {
    return fetchUser(props.id);
}
```

Podemos agora chamar esse loader a partir do Navegador, usando o cliente invoke
exportado do arquivo runtime.ts:

```typescript
import { invoke } from "site/runtime.ts";

const user = await invoke.site.loaders.getUser({ id: "123" });
```

Como o cliente Invoke √© tipado, o tipo de retorno do `getUser` √© automaticamente
inferido, e o tipo da vari√°vel `user` √© `User`. Todos os tipos de par√¢metros s√£o
tamb√©m inferidos, ent√£o temos mais confian√ßa para interagir com nossas APIs.

**Importante**: Isso deve ser usado apenas no Navegador. Tentar importar e usar
o cliente Invoke do arquivo `runtime.ts` no servidor resultar√° em um erro. Para
chamar actions/loaders a partir do servidor, veja o pr√≥ximo exemplo.

### Exemplo 2: Chamando uma Action ou Loader a partir do Servidor

Suponha que estamos criando uma a√ß√£o chamada `addItem` que adiciona um item a um
carrinho.

Suponha tamb√©m que j√° temos um loader chamado `cart`, que retorna o carrinho
atual para um usu√°rio, baseado em uma sess√£o contida nos cookies da requisi√ß√£o:

```typescript
import type { AppContext } from "site/apps/site.ts";
import { getSessionFromRequest } from "site/lib/session.ts";
import { getCartFromDatabase } from "site/lib/cart.ts";

export interface CartItem {
  productId: string;
  quantity: number;
}

export interface Cart {
  items: CartItem[];
  id: string;
}

export const async function cart(
    _props: unknown, req: Request, ctx: AppContext
): Promise<Cart> {
    // Pegar a sess√£o a partir da requisi√ß√£o
    const session = await getSessionFromRequest(req);

    // Pegar o carrinho a partir da base de dados usando o ID vindo da sess√£o
    const cart = await getCartFromDatabase(session.cartId);

    return cart;
}
```

Agora, quando criamos a a√ß√£o `addItem`, podemos reutilizar o loader `cart` para
buscar o carrinho atual e ent√£o adicionar o item ao carrinho:

```typescript
import type { AppContext } from "site/apps/site.ts";
import { saveCartToDatabase } from "site/lib/cart.ts";

export interface Props {
    item: CartItem;
}

export const async function addItem(
    props: Props, req: Request, ctx: AppContext
): Promise<Cart> {
    const currentCart = await ctx.invoke.site.loaders.cart();

    // Adicionar o item ao carrinho
    cart.items.push(props.item);

    // Salvar o carrinho atualizado na base de dados
    await saveCartToDatabase(cart);

    return cart;
}
```

O cliente Invoke que vem do Contexto da Aplica√ß√£o √© tamb√©m tipado, baseado no
tipo `AppContext` exportado por conven√ß√£o do seu `site` app.

### Exemplo 3: Enviando um arquivo para o Servidor

Suponha que temos uma a√ß√£o chamada `uploadFile`, que envia um arquivo para um
destino. A a√ß√£o recebe uma propriedade `file`, que √© um objeto de arquivo que
cont√©m os dados do arquivo, e uma propriedade `destination`, que √© uma string
que especifica o destino para onde o arquivo deve ser enviado.

```typescript
import type { AppContext } from "site/apps/site.ts";

export interface Props {
    file: File;
    destination: string;
}

export const async function uploadFile(
    props: Props, req: Request, ctx: AppContext
): Promise<void> {
    // Enviar o arquivo para o destino
    await uploadFileToDestination(props.file, props.destination);
}
```

Estamos usando a web API `File` como tipo de propriedade aqui, mas isso cria um
problema:

O objeto `File` n√£o √© serializ√°vel via JSON, que √© o que o Invoke usa
internamente. Isso significa que tentar passar um objeto File como propriedade
para uma a√ß√£o resultar√° em um erro ao tentar acessar a propriedade file dentro
da sua action.

Para resolver isso, o cliente Invoke oferece uma maneira de fazer upload de
arquivos via uma requisi√ß√£o multipart, que √© uma maneira pr√°tica de enviar
arquivos para o servidor, usando a API FormData e o tipo de conte√∫do
multipart/form-data.

Para usar isso, voc√™ s√≥ precisa adicionar uma op√ß√£o multipart: true ao
`InvokerRequestInit` do Invoke (que √© o segundo argumento para qualquer chamada
de invoke), e o cliente usar√° automaticamente um protocolo personalizado para
enviar o payload via multipart, tornando poss√≠vel enviar arquivos para o
servidor.

Podemos agora chamar essa a√ß√£o a partir do Navegador, usando o cliente invoke
exportado do arquivo runtime.ts:

```tsx
import { invoke } from "site/runtime.ts";

export function UploadFileInput() {
  const uploadFile = async (file: File) => {
    await invoke.site.actions.uploadFile({
      file: file,
      destination: "/uploads/files",
    }, { multipart: true });
  };

  return (
    <input
      type="file"
      onChange={async (e) => {
        const file = e.target.files[0];
        if (file) {
          await uploadFile(file);
        }
      }}
    />
  );
}
```

Agora o arquivo `file` pode ser acessado seguramente na action!

**Importante**: Quando usando a op√ß√£o `multipart`, o cliente Invoke enviar√° um
FormData objeto para o servidor, que s√≥ suporta arquivos e strings. Isso
significa que qualquer propriedade que seja um n√∫mero ou um booleano ser√°
convertida para uma string.

### Exemplo 4: Batch Invoke

Batch Invoke √© √∫til quando voc√™ precisa realizar m√∫ltiplas opera√ß√µes
simultaneamente e quer minimizar a lat√™ncia de rede, reduzindo o n√∫mero de
requisi√ß√µes.

Aqui est√° um exemplo de cen√°rio onde usar Batch Invoke faz sentido: recuperar
m√∫ltiplos conjuntos de dados relacionados em uma √∫nica requisi√ß√£o.

Suponha que temos um usu√°rio logado e temos tr√™s diferentes loaders que retornam
dados relacionados ao usu√°rio: um para anota√ß√µes (notes), um para o endere√ßo
(address) e um para os pedidos (orders).

Podemos recuperar todos esses tr√™s conjuntos de dados em uma √∫nica requisi√ß√£o
usando um Batch Invoke:

```typescript
import { invoke } from "site/runtime.ts";

// Podemos sempre desstructurar o cliente Invoke
// para escrever c√≥digo mais f√°cil de ler
const { loaders } = invoke.site;

const user = ...; // Obtenha o usu√°rio atual de alguma maneira

const {
  userNotes,
  userAddress,
  userOrders,
} = await invoke({
  userNotes: loaders.getUserNotes({ userId: user.id, orderBy: "latest" }),
  userAddress: loaders.getUserAddress({ token: user.token }),
  userOrders: loaders.getUserOrders({ userId: user.id }),
});
```

Passando um objeto com os loaders/actions como propriedades, o cliente Invoke
automaticamente faz o batch das requisi√ß√µes e retorna os resultados no mesmo
formato que o objeto passado. Continuamos tendo todos os tipos inferidos
automaticamente ao fazer Batch Invoke desta maneira!


# null
Source: https://docs.deco.cx/pt/api-reference/use-script

useScript API reference

### Descri√ß√£o

A fun√ß√£o `useScript` foi projetada para ajudar os desenvolvedores a inserir
scripts diretamente em uma p√°gina da web com uma carga m√≠nima. Ela recebe uma
fun√ß√£o e seus argumentos como par√¢metros e retorna a vers√£o convertida em string
e minificada da fun√ß√£o. Isso √© particularmente √∫til para inserir manipuladores
de eventos e outros scripts diretamente no HTML, otimizando o desempenho ao
reduzir a quantidade de JavaScript enviado pela rede. Ela se integra
perfeitamente com os manipuladores `hx-on:` do HTMX.

### Importa√ß√£o

```typescript
import { useScript } from "deco/hooks/useScript.ts";
```

### Par√¢metros

* **fn**: `Function`
  * A fun√ß√£o a ser convertida em string e minificada.

* **args**: `...any[]`
  * Os argumentos a serem passados para a fun√ß√£o quando ela for chamada.

### Valor de Retorno

* **string**
  * Uma vers√£o convertida em string e minificada da fun√ß√£o, pronta para ser
    inserida no HTML.

### Exemplos de Uso

#### Exemplo 1: Script Inline com `dangerouslySetInnerHTML`

Neste exemplo, `useScript` √© usado para inserir um script simples que registra
uma mensagem quando a janela √© carregada.

```tsx
import { useScript } from "deco/hooks/useScript.ts";

const onLoad = () => {
  console.log("Window loaded");
};

function ExampleComponent() {
  return (
    <div>
      <h1>Hello, World!</h1>
      <script
        type="module"
        dangerouslySetInnerHTML={{ __html: useScript(onLoad) }}
      />
    </div>
  );
}

export default ExampleComponent;
```

#### Exemplo 2: Script Inline com Atributo `hx-on`

Neste exemplo, `useScript` √© usado para criar um manipulador de eventos
minificado para um atributo `hx-on:click` que altera o texto de um bot√£o quando
clicado.

```tsx
import { useScript } from "deco/hooks/useScript.ts";

const onClick = () => {
  event!.currentTarget.innerText = "Clicked!";
};

function ExampleButton() {
  return (
    <button hx-on:click={useScript(onClick)}>
      Click me
    </button>
  );
}

export default ExampleButton;
```

### Notas

* Certifique-se de que a fun√ß√£o passada para `useScript` n√£o dependa de
  vari√°veis externas ou closures que n√£o estar√£o dispon√≠veis quando o script for
  executado inline.
* Ao usar com manipuladores `hx-on:`, certifique-se de que a fun√ß√£o minificada
  n√£o exceda os limites de comprimento de atributos que podem ser impostos pelos
  navegadores ou especifica√ß√µes HTML.


# null
Source: https://docs.deco.cx/pt/api-reference/use-section

useSection API reference

O hook `useSection` no deco.cx √© uma ferramenta poderosa projetada para gerar
automaticamente links para atualiza√ß√£o e renderiza√ß√£o de se√ß√µes. Com este hook,
voc√™ pode usar os Partials do HTMX ou Fresh para renderizar estados espec√≠ficos
de se√ß√µes. Abaixo est√° uma explica√ß√£o detalhada de seu uso, par√¢metros e
exemplos.

## Importando o Hook useSection

Para usar o hook useSection, voc√™ precisa import√°-lo do arquivo
deco/hooks/useSection.ts:

```tsx
import { useSection } from "deco/hooks/useSection.ts";
```

## Par√¢metros

O hook useSection aceita um objeto de op√ß√µes com as seguintes propriedades:

1. **props**: Um objeto contendo as propriedades da se√ß√£o a serem substitu√≠das.
   Isso permite que voc√™ especifique novos valores para as propriedades que
   ser√£o usadas para renderizar a se√ß√£o. Lembre-se de que as propriedades s√£o
   mescladas com aquelas da inst√¢ncia atual da se√ß√£o.
2. **href**: Uma string que representa a nova URL para avaliar esta se√ß√£o. Esta
   URL ser√° usada para o par√¢metro `Request` em todos os loaders/actions dos
   quais esta se√ß√£o pode depender.

## Valor de Retorno

O hook useSection retorna uma string de URL da se√ß√£o com as propriedades
aplicadas parcialmente.

## Exemplo de Uso

Vamos construir um componente que imprime um n√∫mero inteiro e nos permite ver o
pr√≥ximo n√∫mero inteiro. Aqui est√° uma ilustra√ß√£o:

![1234](https://github.com/deco-cx/community/assets/1753396/f4abdeaf-9801-4f4a-8f57-2f3eaa22804e)

Este componente pode ser constru√≠do com o seguinte c√≥digo:

```tsx
import { useSection } from "deco/hooks/useSection.ts";

export default function Section({ count = 0 }: { count: number }) {
  return (
    <div class="flex items-center justify-center gap-4">
      <span>{count}</span>
      <a href={useSection({ props: { count: count + 1 } })}>
        Ver pr√≥ximo n√∫mero inteiro
      </a>
    </div>
  );
}
```

Onde useSection retorna um link para o pr√≥ximo n√∫mero inteiro.

## Avisos

1. **Limites de Tamanho de URL**: Esteja atento aos limites de tamanho da URL ao
   passar propriedades para useSection. Tente manter os payloads pequenos e use
   tipos de dados leves, como booleanos e IDs.
2. **Seguran√ßa**: Garanta que quaisquer dados sens√≠veis passados como
   propriedades estejam devidamente protegidos e n√£o exponham vulnerabilidades
   atrav√©s da URL.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/advanced/actions

Actions (execu√ß√£o de a√ß√µes)

As actions representam fun√ß√µes que tipicamente s√£o invocadas pelos usu√°rios no
browser. Por exemplo, se cadastrar em uma newsletter, adicionar um item a um
carrinho de compras ou qualquer opera√ß√£o que exija a interven√ß√£o de um servidor.

Na plataforma, voc√™ pode testar tais a√ß√µes, ou mesmo ter actions que s√£o apenas
executadas nessa interface administrativa.

Ao contr√°rio de sections e loaders, √© poss√≠vel salvar entidades
pr√©-configuradas, mas n√£o h√° muita utilidade nisto. Neste sentido, acessando a
barra lateral `Advanced > Actions`, voc√™ ter√° acesso a biblioteca de actions e a
possibilidade de criar, salver, editar e executar actions existentes.

<Frame>
  <img width="640" alt="Listagem de Actions" src="https://deco.cx/docs/cms-capabilities/actions/actions1.png" />
</Frame>

As diferentes categorias presentes na listagem s√£o obtidas a partir do diret√≥rio
que a action se encontra ou da **App** na qual ela origina (uma **App** pode
importar diferentes actions).

A partir desta tela √© poss√≠vel:

* **Saved**: Listar as actions salvas
* **Library**: Listar e testar todas as actions dispon√≠veis para uso
* **Create new Action**: Criar novas actions

## Listar e testar actions

Ao listar as actions na library, e ao clicar em uma action, voc√™ passa a ter
acesso a uma visualiza√ß√£o da Action, bem como acesso ao c√≥digo original daquele
elemento. √â tamb√©m poss√≠vel editar o c√≥digo, para testar altera√ß√µes na
funcionalidade do componente.

<Frame>
  <img width="640" alt="Visualiza√ß√£o de uma action" src="https://deco.cx/docs/cms-capabilities/actions/actions2.png" />
</Frame>

Na barra lateral a direita, √© poss√≠vel acessar:

* `üåê` Visuzaliza√ß√£o do elemento
* `‚ò∞` Formul√°rio com propriedades
* `{}` Descri√ß√£o textual das propriedades
* `</>` Editor de c√≥digo
* `üñ•Ô∏è` Logs relacionados a visualiza√ß√£o do loader
* `‚ú®` Decopilot: IA para altera√ß√£o do c√≥digo

## Criar nova Action

√â poss√≠vel criar uma action salva ou a base (template) de uma action.

<Frame>
  <img width="320" alt="Criando uma action" src="https://deco.cx/docs/cms-capabilities/actions/actions3.png" />
</Frame>

* **Create template**: Cria uma action que ser√° disponibilizada na biblioteca de
  componentes. Isto significa criar uma base de c√≥digo que definir√° um conjunto
  de propriedades e um programa para retornar dados.
* **Using a template**: Cria uma action salva a partir de uma base existente. O
  nome ser√° a identifica√ß√£o deste elemento.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/advanced/apps

Instalando apps

# Pr√©-requisitos

Antes de come√ßar, certifique-se de ter um site deco pronto, e a App desejado
deve estar dispon√≠vel no diret√≥rio Apps. Se voc√™ n√£o tem certeza de como fazer
isso, consulte o
[tutorial de tornar uma app instal√°vel](https://deco.cx/docs/pt/developing/making-an-app-installable).

# Apps

Uma `App` permite adicionar novas funcionalidades no seu site de maneira bem
direta.

# Instalando a app

1. **Acesse o deco Admin:** Comece fazendo login na sua conta do
   [deco Admin](https://admin.deco.cx).

2. **Escolha o Site de Destino:** Ap√≥s fazer login, selecione o site espec√≠fico
   onde deseja instalar o App. Voc√™ ser√° direcionado para a p√°gina inicial do
   site.

3. **Acesse a Se√ß√£o "Apps":** Na p√°gina inicial do site, navegue at√© a se√ß√£o
   "Apps". Esta √© a se√ß√£o onde voc√™ encontrar√° todos os Apps dispon√≠veis para
   instala√ß√£o. Selecione para ver todos os Apps dispon√≠veis.

   ![Se√ß√£o de Apps](https://github.com/deco-cx/apps/assets/882438/e2533612-6828-4fb6-9959-96f000ca3537)

4. **Adicione um Bloco da app:** Clique em adicionar App. Isto inicia o processo
   de criar um bloco. Configure o bloco e clique em criar. (d√™ a ele um nome; √©
   comum usar a vers√£o, como `site@v0`).

5. **Explore os Blocos Instalados:** Depois de instalado, voc√™ ter√° acesso a
   todos os blocos e componentes que um App inclui. Esses blocos podem ser
   integrados ao seu site deco para fornecer funcionalidades adicionais.

Parab√©ns! Voc√™ instalou com sucesso um App usando o deco Admin. Explore as novas
capacidades e recursos que um App instalado traz para o seu site deco. Sinta-se
√† vontade para personalizar o App ainda mais ou explorar outros Apps dispon√≠veis
para expandir as funcionalidades do seu projeto deco. Aproveite para gerenciar e
aprimorar o seu site deco! üöÄ

> √â poss√≠vel sempre alterar as configura√ß√µes do Apps clicando no bloco criado.

![Alterando configura√ß√µes do App](https://github.com/deco-cx/apps/assets/882438/5cf7fe48-89b1-47cd-be82-2f7ff601e640)


# null
Source: https://docs.deco.cx/pt/cms-capabilities/advanced/experiments

Guia sobre experimentos.


Funcionalidade ainda em desenvolvimento.

Para saber mais, acesse a documenta√ß√£o sobre
[Teste A/B](https://deco.cx/docs/pt/developing-capabilities/apps/ab-test).


# null
Source: https://docs.deco.cx/pt/cms-capabilities/advanced/loaders

Loaders (carregamento de dados)

Os loaders representam componentes que podem ser utilizados para carregar dados.
Especialmente, os loaders podem ser usados para preencher dados de propriedades
de sections. Se uma section espera receber um dado estruturado que representa um
produto, isto pode ser preenchido manualmente para uma p√°gina, mas pode ser
carregado atrav√©s de um loader.

Loaders podem fazer uso do contexto da requisi√ß√£o que o usu√°rio faz, por
exemplo, a URL que o usu√°rio usou para acessar, sua localiza√ß√£o, ou outros dados
para determinar o dado a ser carregado. Da mesma forma, os Loaders tamb√©m podem
fazer uso das configura√ß√£oes de uma App que ele faz parte.

E, por fim, os pr√≥prios loaders podem ter propriedades que s√£o definidas pelos
usu√°rios que os usam.

Ao abrir os loaders (barra lateral `Advanced > Loaders`), voc√™ ter√° acesso a um
conjunto de loaders salvos, a biblioteca de loaders e a possibilidade de criar,
editar e salvar loaders.

<Frame>
  <img width="640" alt="Listagem de Loaders" src="https://deco.cx/docs/cms-capabilities/loaders/loaders1.png" />
</Frame>

As diferentes categorias presentes na listagem s√£o obtidas a partir do diret√≥rio
que o loader se encontra ou da **App** na qual ele origina (uma **App** pode
importar diferentes loaders).

A partir desta tela √© poss√≠vel:

<Frame>
  <img width="480" alt="Op√ß√µes na listagem de Loaders" src="https://deco.cx/docs/cms-capabilities/loaders/loaders2.png" />
</Frame>

* **Saved**: Listar os loaders salvos
* **Library**: Listar e testar todos os loaders dispon√≠veis para uso
* **Create new Loader**: Criar novos Loaders

## Alterar loaders salvos

Um **loader salvo** representa um loader que pode ser utilizado em diferentes
sections. Desta forma, um mesmo loader pode ter a mesma configura√ß√£o a ser
aplicada em diferentes lugares do site. Ao mesmo tempo, isto permite que uma
√∫nica altera√ß√£o ao loader salvo impacte v√°rias partes do sistema.

> Caso uma p√°gina fa√ßa uso de um mesmo loader salvo em diferentes sections de
> uma p√°gina, este loader √© carregado apenas uma vez. Isto torna o sistema
> extremamente eficiente! Por exemplo, um componente como `SearchResult` e
> `SEOPLP` podem precisar carregar os produtos de uma prateleira durante o
> carregamento de uma p√°gina. Caso ambas as sections que estejam nessa p√°gina
> fa√ßam uso de um mesmo loader salvo (ex.: `PLP Loader`), este ser√° carregado
> apenas uma vez.

Ao clicar em um loader salvo √© poss√≠vel alterar suas propriedades configuradas
anteriormente.

<Frame>
  <img width="480" alt="Alterando um loader salvo" src="https://deco.cx/docs/cms-capabilities/loaders/loaders3.png" />
</Frame>

Ao selecionar um loader, ser√° poss√≠vel definir suas propriedades. Algumas das
propriedades podem pedir a sele√ß√£o de uma imagem, texto, sele√ß√£o de itens, ou
mesmo outro **loader**!

√â poss√≠vel executar um loader para verificar quais dados s√£o retornados durante
sua execu√ß√£o. Para tanto, √© poss√≠vel cirar no bot√£o `Run`, que executar√° o
c√≥digo associado a esse loader, e mostrar√° os dados de resposta.

## Listar e testar demais loaders

Ao listar os loaders na library, e clicar em um loader, voc√™ passa a ter acesso
a uma visualiza√ß√£o do Loader, bem como acesso ao c√≥digo original daquele
elemento. √â tamb√©m poss√≠vel editar o c√≥digo, para testar altera√ß√µes na
funcionalidade do componente.

<Frame>
  <img width="640" alt="Visualiza√ß√£o de um loader" src="https://deco.cx/docs/cms-capabilities/loaders/loaders4.png" />
</Frame>

Na barra lateral a direita, √© poss√≠vel acessar:

* `üåê` Visuzaliza√ß√£o do elemento
* `‚ò∞` Formul√°rio com propriedades
* `{}` Descri√ß√£o textual das propriedades
* `</>` Editor de c√≥digo
* `üñ•Ô∏è` Logs relacionados a visualiza√ß√£o do loader
* `‚ú®` Decopilot: IA para altera√ß√£o do c√≥digo

## Criar novo Loader

√â poss√≠vel criar um loader salvo (um componente compartilh√°vel entre v√°rias
sections ou blocos) ou a base (template) de um loader.

<Frame>
  <img width="320" alt="Criando uma section" src="https://deco.cx/docs/cms-capabilities/loaders/loaders5.png" />
</Frame>

* **Create template**: Cria um loader que ser√° disponibilizado na biblioteca de
  componentes. Isto significa criar uma base de c√≥digo que definir√° um conjunto
  de propriedades e um programa para retornar dados.
* **Using a template**: Cria um loader salvo a partir de uma base existente. O
  nome ser√° a identifica√ß√£o deste elemento.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/advanced/redirects

Aprenda como criar proxies e redirecionamentos para uma rota espec√≠fica

Adicionar **proxies** e **redirecionamentos** s√£o pr√°ticas comuns no
desenvolvimento web para *melhorar a experi√™ncia do usu√°rio* e *otimizar a
entrega de conte√∫do*. Proxies e redirecionamentos t√™m finalidades diferentes e
podem ser ben√©ficos em diversos cen√°rios.

Os **redirecionamentos** s√£o principalmente utilizados quando voc√™ tem uma
p√°gina que pode *n√£o existir mais*, mas que ainda √© acessada pelos usu√°rios
atrav√©s de marcadores salvos ou links externos. Em vez de retornar um erro 404
(n√£o encontrado), voc√™ pode criar um redirecionamento para garantir uma
transi√ß√£o tranquila para seus usu√°rios. Ao implementar redirecionamentos, seu
site pode continuar servindo o conte√∫do desejado para essas rotas espec√≠ficas,
mantendo uma experi√™ncia positiva para o usu√°rio.

Ao utilizar proxies e redirecionamentos, voc√™ pode otimizar a entrega de
conte√∫do, gerenciar transi√ß√µes e fornecer uma experi√™ncia de usu√°rio perfeita.
Nas se√ß√µes a seguir, vamos explorar como adicionar proxies e redirecionamentos
usando o Admin da deco, passo a passo.

O processo geral envolve a altera√ß√£o do mapa de rotas do site e a associa√ß√£o de
um proxy ou redirecionamento, dependendo do caso de uso espec√≠fico. Ao final do
processo, saberemos como criar uma rota de exemplo `/example-proxy` que faz
proxy de solicita√ß√µes para o deco.cx e uma rota `/example-redirect` que
redireciona para a p√°gina inicial do google.com. Observe a diferen√ßa: o primeiro
manter√° voc√™ no mesmo dom√≠nio, enquanto o √∫ltimo o levar√° para fora do dom√≠nio
do seu site.

## Adicionando um redirect

### 1. Acessar a P√°gina de Redirects

Acesse a p√°gina de `redirects`. Isto permite acesso a cria√ß√£o de redirects.

<Frame>
  <img width="640" alt="Redirects view" src="https://deco.cx/docs/cms-capabilities/redirects/redirects1.png" />
</Frame>

### 2. Pressione o Create a redirect

Fa√ßa a configura√ß√£o do redirecionamento de acordo com sua necessidade:

* **From**: o campo de origem, que representa o caminho que o usu√°rio est√°
  tentando acessar, e na qual ele ser√° redirecionado. Este campo suporta o
  [URLPattern](http://mdn.io/urlpattern).
* **To**: o campo de destino. Pode ser um endere√ßo absoluto ou um caminho
  relativo
* **Type**: a defini√ß√£o do tipo de redirect (`permanent` ou `temporary`)

> Escolha o tipo como `temporary`, quando o redirecionamento pode mudar ao longo
> do tempo. Se o redirecionamento n√£o deve mudar ao longo do tempo, voc√™ pode
> selecionar `permanent` (o que pode resultar em respostas mais r√°pidas, j√° que
> os redirecionamentos permanentes s√£o armazenados em cache pelo navegador do
> usu√°rio).

<Frame>
  <img width="320" alt="Add redirect form" src="https://deco.cx/docs/cms-capabilities/redirects/redirects2.png" />
</Frame>

### 3. Crie o redirect

Para o redirect entrar em efeito, √© preciso publicar as altera√ß√µes do seu site.

Em seguida, voc√™ pode acessar `https://seu-site.deco.site/example-redirect` e
verificar se o redirecionamento est√° funcionando corretamente.

## Adicionando um Proxy \[via apps de ecommerce e website]

Proxies s√£o utilizados quando voc√™ deseja *manter o usu√°rio* dentro do *mesmo
site, mas fornecendo um conte√∫do diferente*. Os **proxies** permitem o
compartilhamento de recursos sob o mesmo dom√≠nio, proporcionando uma experi√™ncia
de usu√°rio unificada. Isso pode ser especialmente √∫til quando voc√™ precisa
servir conte√∫do de diferentes fontes ou plataformas, mantendo uma interface de
usu√°rio consistente. Os proxies s√£o comumente usados durante processos de
migra√ß√£o de plataforma, permitindo que voc√™ adote gradualmente o Deco e decida
se uma p√°gina espec√≠fica deve ser proxied ou servida diretamente pelo Deco.

Para criar ou editar um proxy em vez de um redirecionamento, voc√™ pode seguir os
seguintes passos:

### 1. Acesso o `App` de site

Acesse a visualiza√ß√£o de apps do site, e procure pelo `App` de site. Para
edit√°-lo, clique na descri√ß√£o do app.

<Frame>
  <img width="480" alt="Configure site app" src="https://deco.cx/docs/cms-capabilities/redirects/proxies1.png" />
</Frame>

### 2. Procure peloRoutes Map

Procure no formul√°rio de edi√ß√£o do app, pela propriedade de routes map.

<Frame>
  <img width="320" alt="Configure site app" src="https://deco.cx/docs/cms-capabilities/redirects/proxies2.png" />
</Frame>

Edite o proxy existente para adicionar novas rotas a serem proxiadas (quando for
o caso) ou adicione um proxy obtido de algum app de e-commerce.

Publique as altera√ß√µes para que a nova rota de proxy entre em efeito.

## Adicionando um arquivo de redirects.

Repita o passo 1 da se√ß√£o anterior e procure pelo `Route Maps`.

Em seguida:

1. Suba um arquivo como `redirect.csv` para a base do projeto. Ele deve ter o
   formato indicado abaixo:

   ```
   from,to,type
   /example-redirect,/test,temporary
   /google,https://www.google.com,permanent
   ```

2. Adicione a rota do tipo `redirectsFromCsv.ts`.

3. Selecione `redirect.csv` como arquivo de redirects.

4. Publique as altera√ß√µes.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/advanced/segments

Aprenda como criar varia√ß√µes de conte√∫do com base em condi√ß√µes espec√≠ficas

**Variantes** permitem segmentar o conte√∫do com base em certas *condi√ß√µes*,
permitindo personalizar e adaptar as p√°ginas para diferentes *segmentos* de
usu√°rios. Por exemplo, voc√™ pode criar uma variante para alterar o layout da
p√°gina toda **sexta-feira** para **50% dos usu√°rios**. Ao utilizar variantes,
voc√™ pode modificar dinamicamente o conte√∫do direcionado a segmentos espec√≠ficos
de sua audi√™ncia.

As **variantes** s√£o impulsionadas por **Matchers** (ou **Segments**), que s√£o
*blocos* usados para avaliar *condi√ß√µes* espec√≠ficas com base em
*caracter√≠sticas do usu√°rio*, *data e hora*, *sele√ß√£o aleat√≥ria* (testes A/B),
*hist√≥rico de navega√ß√£o do usu√°rio*, *dispositivo do usu√°rio*, ou *qualquer
informa√ß√£o externa extra√≠da da solicita√ß√£o*. **Matchers** s√£o configurados para
determinar se um usu√°rio pertence a um determinado **Segmento** ou n√£o.
**Segmentos** se referem a uma parte dos usu√°rios do seu site que satisfazem as
condi√ß√µes definidas pelos matchers. Um usu√°rio pode pertencer a v√°rios
**segmentos** simultaneamente. Por exemplo, um usu√°rio pode fazer parte do
segmento `S√£o Paulo`, que segmenta usu√°rios localizados em `S√£o Paulo`, e tamb√©m
pode fazer parte de um experimento que inclui 50% dos usu√°rios. **Segmentos**
podem ser combinados para criar crit√©rios de segmenta√ß√£o mais espec√≠ficos.

A tela de segmentos permite listar os **Matchers**/**Segmentos** salvos, uma
listagem de onde s√£o utilizados, e bem como criar novos Segmentos.

<Frame>
  <img width="640" alt="Biblioteca de Segmentos" src="https://deco.cx/docs/cms-capabilities/segments/segments1.png" />
</Frame>

**Matchers** podem ser usados *inline* ou salvos com um **nome espec√≠fico**. A
principal diferen√ßa entre as duas abordagens √© que um matcher salvo ser√°
avaliado apenas uma vez, e seu resultado permanecer√° consistente durante todo o
ciclo de solicita√ß√£o. Isso significa que, uma vez que um matcher √© avaliado como
`true` ou `false` para uma determinada visualiza√ß√£o de p√°gina do usu√°rio, esse
valor ser√° mantido durante toda a solicita√ß√£o.

Esse comportamento permite que voc√™ reutilize o **mesmo resultado do matcher em
v√°rias variantes dentro da mesma p√°gina ou em lugares diferentes em seu site**.
Dessa forma, voc√™ garante um comportamento consistente e evita avalia√ß√µes
redundantes da mesma condi√ß√£o.

Al√©m disso, alguns matchers t√™m um comportamento `sticky`, o que significa que o
resultado do matcher pode ser armazenado na sess√£o do usu√°rio e permanecer
consistente at√© o t√©rmino da sess√£o. Isso √© especialmente √∫til para testes A/B,
onde os usu√°rios s√£o atribu√≠dos a uma variante espec√≠fica e devem ter uma
experi√™ncia consistente durante a sess√£o.

Aproveitando os Matchers e suas capacidades, voc√™ pode criar experi√™ncias
din√¢micas e personalizadas para seus usu√°rios, ao mesmo tempo em que otimiza o
desempenho, reduzindo avalia√ß√µes redundantes e mantendo a consist√™ncia entre as
variantes.

## Testes A/B

Voc√™ pode criar **testes A/B** manualmente selecionando a condi√ß√£o
`Random Matcher` e configurando a porcentagem de tr√°fego a ser dividido.
Alternativamente, se voc√™ n√£o estiver usando uma condi√ß√£o `Random Matcher`,
nosso bot√£o "Publicar" solicitar√° automaticamente a cria√ß√£o de um novo teste. O
resultado √© exatamente o mesmo que criar o teste manualmente.

## Criando segmentos

Para criar um segmento a ser usado em diferentes sites, basta entrar na opera√ß√£o
de "Create New Segment".

<Frame>
  <img width="320" alt="Criando um novo Segmento" src="https://deco.cx/docs/cms-capabilities/segments/segments2.png" />
</Frame>

√â poss√≠vel:

* **Create template**: Cria um segmento que ser√° disponibilizado na biblioteca
  de segmentos. Isto significa criar uma base de c√≥digo que definir√° um conjunto
  de propriedades e um programa para retornar dados.
* **Using a template**: Cria um segmento salvo a partir de uma base existente. O
  nome ser√° a identifica√ß√£o deste elemento.

A implementa√ß√£o padr√£o oferece um conjunto rico de sele√ß√µes poss√≠veis para uso,
mas √© poss√≠vel criar qualquer segmento que se baseie na requisi√ß√£o, contexto do
site ou propriedades definidas pelo usu√°rio.

<Frame>
  <img width="480" alt="Selecionando uma base" src="https://deco.cx/docs/cms-capabilities/segments/segments3.png" />
</Frame>


# null
Source: https://docs.deco.cx/pt/cms-capabilities/advanced/seo

Como configurar meta-tags e media sharing no admin


O SEO (Search Engine Optimization) representa um conjunto de a√ß√µes feitas ao
site para facilitar sua busca e indexa√ß√£o por rob√¥s, especialmente de busca.
Nesta p√°gina configuramos parte desses elementos (meta-tags) que s√£o utilizados
pelos buscadores, mas tamb√©m por sistemas para gera√ß√£o da visualiza√ß√£o de links
compartilhados.

Nesta edi√ß√£o, √© poss√≠vel configurar altera√ß√µes que ser√£o aplicadas a todo o
site.

<Frame>
  <img width="640" alt="Configura√ß√£o de SEO" src="https://deco.cx/docs/cms-capabilities/seo/seo1.png" />
</Frame>

Fique atento a algumas das configura√ß√µes dispon√≠veis para configura√ß√£o do t√≠tulo
da p√°gina:

* Title: T√≠tulo do site
* Title template: Base para t√≠tulos criados dinamicamentes por outros
  componentes (no `app` de ecommerce, temos os blocos `SEOPLP` e `SEOPDP`)

E a configura√ß√£o se o site deve, ou n√£o, ser indexado (`Disable indexing`).

## Configurando SEO de uma p√°gina

Apesar da configura√ß√£o global de SEO, √© poss√≠vel especializar o SEO de uma
p√°gina espec√≠fica. Para isto, √© preciso entrar na edi√ß√£o da p√°gina, e listar as
propriedades de SEO da p√°gina.

## Sitemap

O sitemap da deco √© gerado automaticamente a partir da listagem de p√°ginas.
Sites de ecommerce processam o sitemap recebido do backend para gerar um sitemap
v√°lido.

## Robots.txt

O `robots.txt` representa um arquivo padr√£o usado por bots na internet para
definir como devem processar o seu site.

Para isto, √© poss√≠vel editar o arquivo no pr√≥prio admin:

<Frame>
  <img width="320" alt="Robots.txt" src="https://deco.cx/docs/cms-capabilities/seo/seo2.png" />
</Frame>

O robots segue um formato bem definido e que deve ser respeitado para permitir o
processamento adequado do seu site.

```
User-agent: AIBadBot
Disallow: /

User-agent: Googlebot
Allow: /

User-agent: NomeDoBot
User-agent: NomeDoBot2
Disallow: /
Allow: /cgi-bin
Allow: /institucional
```

Cada diretiva (conjunto de regras para um bot), √© feita por um (ou mais)
`User-agent`s, pelo menos uma regra de `allow` ou `disallow`, e outras regras
opcionais (a depender do bot).

Os valores para essas regras podem incluir `*` para representar todos ou
qualquer conjunto de bots ou paths.

> Com o crescimento de bots de AI generativas, n√≥s n√£o recomendamos liberar por
> padr√£o o acesso para qualquer bot e qualquer path. Uma configura√ß√£o ideal:

> * para os buscadores (como google/bing/etc): liberar ao acesso a todos os
>   paths, com algumas exce√ß√µes
> * para todos os bots, barrar tudo exceto paths bem precisos ou orientados a
>   AI, como p√°ginas institucionais, ou mesmo pratileiras ou catalogos de
>   produtos representativos para a AI


# null
Source: https://docs.deco.cx/pt/cms-capabilities/content/assets

Recursos digitais do site

Os `assets` representam bens digitais como as imagens que s√£o carregadas na
infraestrutura da deco.

Esta √© a tela de ger√™ncia desses recursos e, por ela, √© poss√≠vel adicionar novas
m√≠dias digitais, bem como copiar a URL final do recurso, bem como apagar o que
foi carregado.

<Frame>
  <img width="480" alt="Assets" src="https://deco.cx/docs/cms-capabilities/assets/assets.png" />
</Frame>


# null
Source: https://docs.deco.cx/pt/cms-capabilities/content/blog

Adicionando um blog

O Blog representa um espa√ßo para gest√£o de um blog no seu site. Nesta
documenta√ß√£o, vamos adicionar um blog ao seu site, que √© um dos Apps do deco. Um
`App` permite que voc√™ adicione novas funcionalidades ao seu site de maneira
simples.

Para adicionar um app ao seu site, clique na guia Apps. Voc√™ ver√° todos os apps
dispon√≠veis. Neste caso, vamos adicionar o App de Blog, que adiciona ao seu site
se√ß√µes, integra√ß√µes e funcionalidades para escrever e gerenciar posts de blog.
Clique no bot√£o de altern√¢ncia e o app ser√° instalado no seu site.

<Frame>
  <img width="640" alt="Instalar blog" src="https://deco.cx/docs/cms-capabilities/blog/install-app.png" />
</Frame>

Agora voc√™ pode gerenciar seu blog e adicionar posts, autores e categorias.

<Frame>
  <img width="640" alt="P√°gina do blog" src="https://deco.cx/docs/cms-capabilities/blog/blog.png" />
</Frame>

> Especificamente para o app de Blog, voc√™ pode acessar as funcionalidades do
> app atrav√©s do seu pr√≥prio espa√ßo. Para a maioria dos apps, suas fun√ß√µes e
> componentes ser√£o exibidos nos outros espa√ßos (se√ß√µes, a√ß√µes, carregadores,
> ...).

## P√°ginas de blog

O template de blog j√° apresenta `sections` e `pages` configuradas.

Caso tenha criado seu site a partir de outro template, recomendamos copiar estes
elementos do reposit√≥rio do template de blog.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/content/pages

Aprenda como criar p√°ginas na deco.cx sem precisar de c√≥digo

A listagem de p√°ginas de um site pode ser acessada na barra lateral em
`Content > Pages`.

<Frame>
  <img width="640" alt="Listagem de p√°ginas" src="https://deco.cx/docs/cms-capabilities/pages/pages1.png" />
</Frame>

Uma **Page** √© um bloco fundamental na cria√ß√£o de um Site *deco.cx* que
normalmente ter√° v√°rias Pages. Cada `Page` consiste em:

* **uma ou mais [Sections](https://deco.cx/docs/pt/concepts/section)** configuradas, que podem
  ser consideradas como componentes modulares que comp√µem o conte√∫do da p√°gina.
* **um nome:** um nome significativo para entender o que essa p√°gina representa.
  N√£o afeta a interface do usu√°rio ou os metadados da p√°gina, apenas exibido na
  listagem de p√°ginas do admin.
* **um path:** representa a URL que aquela p√°gina estar√° acess√≠vel para seus
  usu√°rios. Pode ser est√°tico (por exemplo: `/posts`) ou din√¢mico (por exemplo:
  `/posts/:slug`, `/search/*`), seguindo o esquema
  [URLPattern](http://mdn.io/urlpattern).

## Criar uma nova p√°gina

Clique em **Pages** no menu superior e voc√™ poder√° ver todas as p√°ginas
publicadas no site, juntamente com o *path* que elas s√£o acess√≠veis aos seus
usu√°rios.

<Frame>
  <img width="640" alt="A√ß√µes extras" src="https://deco.cx/docs/cms-capabilities/pages/pages2.png" />
</Frame>

> √â poss√≠vel duplicar ou apagar p√°ginas usando as a√ß√µes extras na listagem de
> p√°ginas (√≠cone de 3 pontos).

Para criar uma nova p√°gina em seu site, **clique no bot√£o Criar no canto
superior direito da lista de p√°ginas**. Um formul√°rio ser√° aberto com os campo:
**nome**, **path** e **template**. Template permite criar uma p√°gina tomando o
conte√∫do de outra como base (campo opcional).

Ap√≥s criada, voc√™ ser√° redirecionado para o editor de p√°gina. Agora √© poss√≠vel
editar e adicionar novas Sections dispon√≠veis em seu site e configurar a p√°gina
do jeito que voc√™ quiser.

## Editar uma p√°gina

Para adicionar uma nova Section √† p√°gina, clique no bot√£o **Add Sections** no
editor e verifique todas as op√ß√µes dispon√≠veis.

<Frame>
  <img width="320" alt="Adicionar uma nova section" src="https://deco.cx/docs/cms-capabilities/pages/pages3.png" />
</Frame>

Ao adicionar uma nova section, √© poss√≠vel selecionar sections que s√£o globais ou
locais (obtidas da library). H√° uma diferen√ßa entre elas:

* Uma section global j√° foi configurada e pode ser utilizada por 1 ou mais
  p√°ginas. Ao alterar a propriedade de uma section global, essa altera√ß√£o √©
  refletida em todas as p√°ginas que as usam
* Uma section local ser√° configurada dentro da p√°gina, e s√≥ existe com essa
  configura√ß√£o nessa p√°gina (n√£o √© compartilhada entre outras p√°ginas).

<Frame>
  <img width="640" alt="Biblioteca de sections" src="https://deco.cx/docs/cms-capabilities/pages/pages4.png" />
</Frame>

Ao selecionar uma section, ser√° poss√≠vel definir suas propriedades. Algumas das
propriedades podem pedir a sele√ß√£o de uma imagem, texto, sele√ß√£o de itens, ou
mesmo de um **loader**. Um **loader** √© uma entidade que carrega dados e que
pode receber configura√ß√µes (selecionando um loader da library) ou j√° estar
configurado (loaders salvos).

<Frame>
  <img width="640" alt="Biblioteca de sections" src="https://deco.cx/docs/cms-capabilities/pages/pages4-1.png" />
</Frame>

Al√©m disso, √© poss√≠vel variar uma section a partir da sele√ß√£o do √≠cone de
bandeira (üè≥Ô∏è).

## Variar uma Section

Uma variante permite que a section tenha outra configura√ß√£o quando determinada
condi√ß√£o (**matcher**) √© satisfeita. Essa condi√ß√£o pode ser algo j√° previamente
configurado (a partir de um **matcher** salvo) ou voc√™ poder√° configurar a
partir de um elemento da biblioteca de matchers.

<Frame>
  <img width="320" alt="Biblioteca de sections" src="https://deco.cx/docs/cms-capabilities/pages/pages4-2.png" />
</Frame>

√â bem comum criar variantes especialmente para campanhas ou eventos de tempo
limitado. Para isso, uma estrat√©gia √© configurar um matcher de data e hora.

<Frame>
  <img width="320" alt="Configura√ß√£o de uma condi√ß√£o" src="https://deco.cx/docs/cms-capabilities/pages/pages4-3.png" />
</Frame>

A variante "default" representa a p√°gina a ser exibida quando nenhum matcher √©
satisfeito.

> **Importante**: os matchers s√£o testado na ordem que s√£o colocados do primeiro
> (mais acima) at√© o √∫ltimo (default). Quando um matcher √© satisfeito, ele √©
> imeditamente executado e nenhuma outra condi√ß√£o posterior √© testada,
> independente de qualquer outro matcher em seguida que possa satisfazer a
> condi√ß√£o configurada.

## Editar um SEO de uma p√°gina

O SEO de uma p√°gina segue o padr√£o definido no site. √â poss√≠vel especializar o
SEO de uma p√°gina editando o SEO a partir da op√ß√£o de edi√ß√£o de SEO.

<Frame>
  <img width="640" alt="Biblioteca de sections" src="https://deco.cx/docs/cms-capabilities/pages/pages-seo.png" />
</Frame>

## Publicar altera√ß√µes

A p√°gina ser√° alterada a cada edi√ß√£o feita. Estas altera√ß√µes s√£o pertinentes ao
ambiente que voc√™ esteja trabalhando (inicialmente, staging). Uma altera√ß√£o no
ambiente n√£o √© refletido no ambiente em produ√ß√£o at√© que essa altera√ß√£o esteja
publicada.

<Frame>
  <img width="320" alt="Ambiente e publica√ß√£o" src="https://deco.cx/docs/cms-capabilities/pages/pages5.png" />
</Frame>

## Variar uma p√°gina (segmentando uma p√°ginas)

Uma variante permite criar uma vis√£o diferente de uma p√°gina a partir de
condi√ß√µes espec√≠ficas. Uma variante pode ser adicionada a partir do s√≠mbolo de
banderira (üè≥Ô∏è).

<Frame>
  <img width="320" alt="Criando uma variante" src="https://deco.cx/docs/cms-capabilities/pages/pages6.png" />
</Frame>

Adicione um "**Matcher**" que representa uma regra que ser√° testada para avaliar
quais sections ser√£o atendidas. No nosso exemplo, selecionamos um Matcher local
para selecionar um tipo de dispositivo e, mais especificamente, o desktop.

<Frame>
  <img width="320" alt="Criando uma variante" src="https://deco.cx/docs/cms-capabilities/pages/pages7.png" />
</Frame>

A variante √© criada com todas as sections copiadas da p√°gina original. Cada
variante pode ter sections editadas de forma independente. Clique na variante
criada e altera as sections da forma que quiser. A variante "default" representa
a p√°gina a ser exibida quando nenhum matcher √© satisfeito.

Quando voc√™ tem v√°rias variantes em uma √∫nica p√°gina, a deco automaticamente
exibe a pr√©-visualiza√ß√£o da variante selecionada por padr√£o. Se nenhuma variante
estiver selecionada, a deco mostra o que o usu√°rio veria se fosse atribu√≠do √†
variante. Isso permite que voc√™ navegue entre as variantes selecionadas e
visualize como seria a experi√™ncia do usu√°rio para cada variante.

Voc√™ tamb√©m pode ter uma variante dentro de outra variante. Voc√™ pode usar
matchers diferentes ou uma combina√ß√£o deles.

> **Importante**: os matchers s√£o testado na ordem que s√£o colocados do primeiro
> (mais acima) at√© o √∫ltimo (default). Quando um matcher √© satisfeito, ele √©
> imeditamente executado e nenhuma outra condi√ß√£o posterior √© testada,
> independente de qualquer outro matcher em seguida que possa satisfazer a
> condi√ß√£o configurada.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/content/records

Records - Banco de dados embutido

A `deco` oferece um banco de dados embutido que pode ser usado como fonte de
dados para os componentes do site.

Nesta tela, √© poss√≠vel gerenciar esta base de dados, listando elementos da
tabela ou adicionando novos dados.

<Frame>
  <img width="640" alt="Records" src="https://deco.cx/docs/reference/deco-records/records-view-tables.webp" />
</Frame>


# null
Source: https://docs.deco.cx/pt/cms-capabilities/content/releases

Ambientes de edi√ß√£o e evolu√ß√µes do site

Na tela de releases, √© poss√≠vel avaliar os diferentes ambientes de edi√ß√£o
(`environment`) do site, bem como as diferentes publica√ß√µes (`releases`)
realizadas. Cada ambiente de edi√ß√£o oferece um espa√ßo √∫nico para que m√∫ltiplos
usu√°rios possam fazer altera√ß√µes e possa enviar tais altera√ß√µes para produ√ß√£o
(para o endere√ßo do site oficial).

<Frame>
  <img width="640" alt="Tela de Releases e envs" src="https://deco.cx/docs/cms-capabilities/releases/releases1.png" />
</Frame>

Ao realizar qualquer altera√ß√£o no site, o seletor de ambientes sinaliza que h√°
altera√ß√µes realizadas no ambiente atual. O `Staging` √© o ambiente padr√£o e
inicia sem altera√ß√µes. Isto √© indicado no canto superior direito, no seletor de
ambientes. O nome staging, sem um n√∫mero associado e na cor verde, indica que o
ambiente atual n√£o difere do ambiente em produ√ß√£o.

<Frame>
  <img width="480" alt="Estado do ambiente" src="https://deco.cx/docs/cms-capabilities/releases/releases2.png" />
</Frame>

Para publicar um ambiente, √© preciso ir na op√ß√£o de `publish`. Nela, ser√°
poss√≠vel verificar as altera√ß√µes realizadas, bem como realizar a publica√ß√£o para
o endere√ßo em produ√ß√£o. Observe que cada ambiente pode realizar mudan√ßas e
altera√ß√µes de forma independente. Antes de publicar uma altera√ß√£o, ou mesmo
quando achar necess√°rio, o usu√°rio realizar√° um `Rebase`.

O processo de `rebase` se traduz em incorporar o estado atual do ambiente de
produ√ß√£o na pr√≥prio ambiente. Tenha em mente as seguintes dicas de uso sobre
ambientes:

* Para realizar um conjunto de altera√ß√µes, fa√ßa isso num ambiente em separado.
  Isto permite ver altera√ß√µes que s√£o espec√≠ficas daquele ambiente.
* Por exemplo, crie um ambiente **home** para altera√ß√µes na home, ou **header**
  para altera√ß√µes no header global, ou um ambiente **blackfriday** para
  altera√ß√µes especificas de um evento.
* Caso queira testar altera√ß√µes, mas que ser√£o descartadas, crie um ambiente
  como **rascunho** ou **teste**.
* Ao come√ßar a trabalhar em um ambiente, e tamb√©m antes de publicar altera√ß√µes,
  fa√ßa **rebase** e teste a p√°gina. Isto garante que o ambiente atual ter√° o que
  est√° em produ√ß√£o mais suas altera√ß√µes realizadas.

Vamos dar um exemplo de mudan√ßas em um cen√°rio com dois ambientes: `staging` e
`matheus`. As seguintes a√ß√µes foram realizadas:

<Frame>
  <img width="640" alt="Exemplo de opera√ß√µes de releases" src="https://deco.cx/docs/cms-capabilities/releases/releases3.png" />
</Frame>

1. Um, ou dois usu√°rios, realizaram o total de duas mudan√ßas no ambiente
   `staging`
2. Um usu√°rio realizou uma altera√ß√£o no ambiente `matheus`. Neste momento, todos
   os dois ambientes divergem entre si e divergem do ambiente em produ√ß√£o.
3. Uma publica√ß√£o √© feita a partir do ambiente staging. Neste momento, o estado
   atual do `staging` e produ√ß√£o s√£o iguais.
4. No ambiente `matheus` um usu√°rio faz o rebase. Dessa forma, o ambiente
   `matheus` incorpora as altera√ß√µes que foram inseridas a partir de staging,
   mas mantendo a altera√ß√£o que existia antes.
5. Em seguida, √© feita uma publica√ß√£o a partir do ambiente `matheus`. Neste
   momento, o ambiente `matheus` e produ√ß√£o apresentam o mesmo estado.
6. Por fim, `staging` faz um rebase, fazendo com que todos os ambientes estejam
   no mesmo estado.

# Environment (ambientes de desenvolvimento)

Um ambiente representa um espa√ßo de trabalho onde √© poss√≠vel realizar um
conjunto de altera√ß√µes ou modifica√ß√µes que poder√£o ser publicadas. Todo ambiente
√© compartilh√°vel: ou seja, multiplos usu√°rios podem fazer altera√ß√µes no mesmo
ambiente, de forma que todas possam ser publicadas ao mesmo tempo.

O `Staging` √© o ambiente padr√£o e inicia sem altera√ß√µes. Isto √© indicado no
canto superior direito, no seletor de ambientes. O nome staging, sem um n√∫mero
associado e na cor verde, indica que o ambiente atual n√£o difere do ambiente em
produ√ß√£o.

<Frame>
  <img width="640" alt="Biblioteca de sections" src="https://deco.cx/docs/cms-capabilities/releases/releases5.png" />
</Frame>

# Releases (Lan√ßamentos)

`Releases` cont√©m o hist√≥rico de todas as vers√µes publicadas do seu site e
permite que voc√™ restaure para vers√µes anteriores, se necess√°rio.

<Frame>
  <img width="640" alt="Lista de releases" src="https://deco.cx/docs/cms-capabilities/releases/releases4.png" />
</Frame>

## Passo a passo

1. Apenas o primeiro lan√ßamento representa o estado atual no site. Procure a
   vers√£o para qual deseja retornar e acesse a opera√ß√£o de `Revert`.
2. Essa opera√ß√£o ir√° restaurar o c√≥digo para o estado anterior, incluindo
   altera√ß√µes no estado da p√°ginas e c√≥digo do reposit√≥rio.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/content/sections

Trabalhando com sections

As sections representam componentes que podem ser utilizadas para montar uma
p√°gina. Uma section √© um componente Preact, ou seja, um elemento que transforma
algumas propriedades passadas para este componente em HTML.

Ao abrir as sections (barra lateral `Content > Sections`), voc√™ ter√° acesso a um
conjunto de sections salvas, a biblioteca de componentes e a possibilidade de
criar e salvar sections.

<Frame>
  <img width="640" alt="Listagem de Sections" src="https://deco.cx/docs/cms-capabilities/sections/sections1.png" />
</Frame>

As diferentes categorias presentes na listagem s√£o obtidas a partir do diret√≥rio
que a section se encontra ou da **App** na qual ela origina (uma **App** pode
importar diferentes sections).

A partir desta tela √© poss√≠vel:

<Frame>
  <img width="480" alt="Op√ß√µes na listagem de Sections" src="https://deco.cx/docs/cms-capabilities/sections/sections2.png" />
</Frame>

* **Saved**: Listar as sections salvas
* **Library**: Listar e testar todas as sections dispon√≠veis pra uso
* **Create new Section**: Criar novas Sections

## Alterar sections salvas

Uma **sections salva** representa um compoente que pode ser comparitlhado entre
v√°rias p√°ginas. Elementos como **Footer** e **Header** podem ser compartilhado
entre diferentes p√°ginas, da forma que estes elementos podem ter suas
propriedades configuradas apenas uma vez.

<Frame>
  <img width="480" alt="Sections salvas" src="https://deco.cx/docs/cms-capabilities/sections/sections3.png" />
</Frame>

As sections salvas podem ser configuradas a partir desta tela, de forma afetar
todas as sections do sistema. Ao clicar em uma section salva √© poss√≠vel alterar
suas propriedades configuradas anteriormente.

<Frame>
  <img width="640" alt="Alterando uma section salva" src="https://deco.cx/docs/cms-capabilities/sections/sections4.png" />
</Frame>

## Configurando uma section

Ao selecionar uma section, ser√° poss√≠vel definir suas propriedades. Algumas das
propriedades podem pedir a sele√ß√£o de uma imagem, texto, sele√ß√£o de itens, ou
mesmo de um **loader**. Um **loader** √© uma entidade que carrega dados e que
pode receber configura√ß√µes (selecionando um loader da library) ou j√° estar
configurado (loaders salvos).

<Frame>
  <img width="640" alt="Biblioteca de sections" src="https://deco.cx/docs/cms-capabilities/pages/pages4-1.png" />
</Frame>

## Listar e testar demais sections

Ao listar as sections na library, e clicar em uma section, voc√™ passa a ter
acesso a uma visualiza√ß√£o da Section, bem como acesso ao c√≥digo original daquele
elemento. √â tamb√©m poss√≠vel editar o c√≥digo, para testar altera√ß√µes na
funcionalidade do componente.

<Frame>
  <img width="640" alt="Visualiza√ß√£o de uma section" src="https://deco.cx/docs/cms-capabilities/sections/sections5.png" />
</Frame>

Na barra lateral a direita, √© poss√≠vel acessar:

* `üåê` Visuzaliza√ß√£o do elemento
* `‚ò∞` Formul√°rio com propriedades
* `{}` Descri√ß√£o textual das propriedades
* `</>` Editor de c√≥digo
* `üñ•Ô∏è` Logs relacionados a visualiza√ß√£o da section
* `‚ú®` Decopilot: IA para altera√ß√£o do c√≥digo

## Criar nova Section

√â poss√≠vel criar uma section salva (um componente compartilh√°vel entre v√°rias
p√°ginas) ou a base (template) de uma section.

<Frame>
  <img width="320" alt="Criando uma section" src="https://deco.cx/docs/cms-capabilities/sections/sections6.png" />
</Frame>

* **New template**: Cria uma section que ser√° disponibilizada na biblioteca de
  componentes. Isto significa criar uma base de c√≥digo que definir√° um conjunto
  de propriedades e um programa para gerar o HTML associado.
* **Using a template**: Cria uma section salva a partir de uma base existente. O
  nome ser√° a identifica√ß√£o deste elemento entre as diferentes p√°ginas.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/home

Home: gest√£o de times, sites e perfil do usu√°rio


A `home` representa o espa√ßo inicial do usu√°rio. A partir desta tela, √© poss√≠vel
acessar sites, times, bem como a pr√≥pria documenta√ß√£o da deco.

<Frame>
  <img width="640" alt="Home" src="https://deco.cx/docs/cms-capabilities/home/home1.png" />
</Frame>

## Command Bar

Na home, e ao longo do uso do admin, uma `command bar` estar√° sempre dispon√≠vel
na barra superior da tela. A barra de comando opera de acordo com o contexto
aberto. Na `home`, ela permite buscar, e abrir, sites e times do usu√°rio.

<Frame>
  <img width="480" alt="Command Bar" src="https://deco.cx/docs/cms-capabilities/home/home3.png" />
</Frame>

Al√©m disso, √© poss√≠vel realizar comandos espec√≠ficos. Na `home` est√£o
dispon√≠veis os comandos:

* **/open**: para abrir sites ou times (comando padr√£o ao selecionar um time ou
  site a partir da busca)
* **/delete**: para apagar sites ou times

## Perfil

Al√©m da `command bar`, √© sempre poss√≠vel acessar o perfil do seu usu√°rio a
partir de qualquer espa√ßo no admin. Para isto, acesse a foto do seu usu√°rio no
canto superior direito.

<Frame>
  <img width="320" alt="Acesso ao Perfil" src="https://deco.cx/docs/cms-capabilities/home/home2.png" />
</Frame>

Nele, √© poss√≠vel definir configura√ß√µes a respeito de seu perfil (incluindo sua
foto), detalhes de pagamento (para usu√°rios que executam tarefas), e uma API key
para uso do admin.

<Frame>
  <img width="640" alt="Perfil do usu√°rio" src="https://deco.cx/docs/cms-capabilities/home/home5.png" />
</Frame>

### API Key (Dev)

A API Key permite executar opera√ß√µes no admin (loaders e actions), com as
permiss√µes do seu usu√°rio. Na requisi√ß√£o para loaders/actions do admin, defina o
header `x-api-key` que √© disponibilizado nesta tela.

<Frame>
  <img width="480" alt="API Key" src="https://deco.cx/docs/cms-capabilities/home/home6.png" />
</Frame>

## Times

A gest√£o de time permite a configura√ß√£o de:

* **Sites**: Listagem dos sites do time, bem como capacidade de mover, apagar e
  abrir site
* **Members**: Listagem dos membros do time, permitindo a ger√™ncia de pap√©is e o
  convite de membros
* **Billing**: Permite a contrata√ß√£o e gest√£o do tipo de conta para o time
* **Settings**: Altera o nome do time ou apaga o pr√≥prio time

<Frame>
  <img width="640" alt="Home" src="https://deco.cx/docs/cms-capabilities/home/home4.png" />
</Frame>


# null
Source: https://docs.deco.cx/pt/cms-capabilities/management/apex-domains

Como redirecionar dom√≠nio sem www

## O que √© dom√≠nio apex?

Dom√≠nio apex √© o termo utilizado para dom√≠nio raiz, sem subdom√≠nio.

Exemplo:

* `www.example.com.br` -> Subdom√≠nio
* `loja.example.com.br` -> Subdom√≠nio
* `example.com.br` - Dom√≠nio Apex

## Posso apontar um site deco.cx para o dom√≠nio apex?

N√£o, ainda n√£o √© poss√≠vel apontar um site deco.cx para o seu dom√≠nio apex.

Por isso, criamos uma solu√ß√£o f√°cil de redirecionamento, para que os acessos ao
dom√≠nio Apex n√£o sejam perdidos.

## Como redirecionar um dom√≠nio apex na deco.cx?

1 - No painel do seu site na deco.cx, acesse a p√°gina de Configura√ß√µes.

2 - Clique em "Adicionar dom√≠nio existente"

3 - Insira o seu dom√≠nio apex (sem subdom√≠nio):

![Domain step](https://github.com/deco-cx/apps/assets/76620866/85b1bcd5-5dec-4a61-bb0b-635e0b8a3d3a)

4 - Defina para qual subdom√≠nio redirecionar:

![Sudomain step](https://github.com/deco-cx/apps/assets/76620866/ab92d6cb-ef08-4f98-a0e5-b241f932722d)

5 - Agora, voc√™ ver√° os apontamentos que devem ser feitos na sua plataforma de
hospedagem de dom√≠nio:

![DNS Setup](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/70b54756-44d8-431b-9fba-2c533863541d)

6 - Ap√≥s realizar as configura√ß√µes, clique em Validar Dom√≠nio.

A etapa de valida√ß√£o √© essencial para o funcionamento e ela depende da
propaga√ß√£o do DNS configurado no servi√ßo de hospedagem.

No geral, a propaga√ß√£o ocorre dentro algumas horas, mas pode levar at√© 48 horas
em alguns casos.


# null
Source: https://docs.deco.cx/pt/cms-capabilities/management/custom-domains

Adicionando dom√≠nios pr√≥prios

# T√≥picos

1. O que √© um dom√≠nio pr√≥prio?
2. Adicionando um dom√≠nio
   * Requisitos
   * Adicionando um dom√≠nio no admin
3. Validando o dom√≠nio adicionado
   * Passo-a-passo
   * Testando sua configura√ß√£o
4. Erros comuns

# O que √© um dom√≠nio pr√≥prio?

Cada site deco recebe um dom√≠nio p√∫blico na qual ela √© acess√≠vel, como o dom√≠nio
`your.deco.site` que √© usado no endere√ßo `https://your.deco.site`. No entanto, √©
comum contratar um dom√≠nio pr√≥prio para fortalecer a marca ou facilitar o acesso
a um site.

A deco n√£o oferece (ainda) um servidor pr√≥prio de nomes de dom√≠nios, mas √©
poss√≠vel contratar esse servi√ßo por outras empresas como godaddy, google e
cloudflare. Do ponto de vista t√©cnico, √© importante que esse servidor permita a
cria√ß√£o de apontamentos do tipo `CNAME`. √â preciso ter cuidado pois alguns
servi√ßos de hospedagem podem oferecer o servi√ßo de nomes, mas n√£o permitir este
tipo de configura√ß√£o!

# Adicionando um dom√≠nio pr√≥prio

## Requisitos

Para adicionar um dom√≠nio:

* o site precisa ter um dom√≠nio `deco.site` oferecido pela deco
* o usu√°rio precisa ser administrador do site
* o usu√°rio precisa contratar um dom√≠nio pr√≥prio em um servidor de nomes que
  permita configura√ß√£o de `CNAME`
* o usu√°rio ou administrador do dom√≠nio pr√≥prio precisa criar um apontamento
  `CNAME` indicado na etapa de valida√ß√£o
* APENAS caso o dom√≠nio j√° tenha algum apontamento `CAA`, √© preciso adicionar
  novos apontamentos

## Antes de adicionar um dom√≠nio

Pode ser necess√°ria alguma configura√ß√£o adicional em seu site dependendo da
integra√ß√£o utilizada.

Caso o dom√≠nio tenha algum apontamento `CAA`, √© preciso adicionar novos dom√≠nios
para que possamos gerar o certificado do seu novo dom√≠nio. Importante:
`caso seu dom√≠nio n√£o tenha apontamentos CAA, esta etapa n√£o √© necess√°ria (e n√£o √© recomendada)`.

√â poss√≠vel verificar se o dom√≠nio tem esses apontamentos atrav√©s da ferramenta
[Google Admin Toolbox Dig](https://toolbox.googleapps.com/apps/dig/#CAA/) ou o
comando `dig seudominio.com.br caa +short`. Caso a consulta n√£o retorne dados
(`Record not found!`), ignore esta etapa.

Caso seu site tenha certificados, √© preciso adicionar os registros abaixo,
especialmente os dois √∫ltimos (`pki.goog`). Adicione no dom√≠nio do seu site (ou
`@` como nome do campo).

```
0 issue "digicert.com; cansignhttpexchanges=yes"
0 issuewild "digicert.com; cansignhttpexchanges=yes"
0 issue "sectigo.com"
0 issuewild "sectigo.com"
0 issue "letsencrypt.org"
0 issuewild "letsencrypt.org"
0 issue "pki.goog; cansignhttpexchanges=yes"
0 issuewild "pki.goog; cansignhttpexchanges=yes"
```

Alguns provedores de dom√≠nios n√£o aceitam o CAA com `cansignhttpexchanges`,
neste caso, configure sem essa propriedade:

```
0 issue "digicert.com"
0 issuewild "digicert.com"
0 issue "sectigo.com"
0 issuewild "sectigo.com"
0 issue "letsencrypt.org"
0 issuewild "letsencrypt.org"
0 issue "pki.goog"
0 issuewild "pki.goog"
```

Veja mais instru√ß√µes no seu provedor de dom√≠nios em como adicionar esses campos.

## Adicionando um dom√≠nio no admin

1. Entre na p√°gina inicial do site, e navegue para a aba de Configura√ß√µes.

   ![Configura√ß√£os do site](https://github.com/deco-cx/apps/assets/882438/7c60ddbd-7164-42ea-bd16-d8c5d70603df)

2. Em Configura√ß√µes, na listagem de Dom√≠nios, verifique que h√° um dom√≠nio
   `deco.site` e adicione um dom√≠nio existente. **Caso n√£o tenha um dom√≠nio
   `deco.site`, entre em contato conosco**.

3. Adicione o dom√≠nio pr√≥prio do site no modal aberto. O dom√≠nio deve ser apenas
   o nome, sem protocolo (http/https) ou barras. Aguarde o processo de
   configura√ß√£o inicial.

   ![Adicionar dom√≠nio](https://github.com/deco-cx/apps/assets/882438/8c19ae5c-e522-4a60-9b8b-28e4815cced6)

4. Depois da adi√ß√£o, o dom√≠nio est√° registrado na deco, mas ainda n√£o √©
   operante. √â preciso agora fazer o setup do dom√≠nio. Em `...`, clicando em
   setup, haver√° instru√ß√µes de configura√ß√£o.

5. Adicione a configura√ß√£o de dom√≠nio no seu servidor de dom√≠nios. Isto
   representa um apontamento `CNAME` do dom√≠nio pr√≥pio, para o dom√≠nio da deco.
   No exemplo, isto representa um apontamento do dom√≠nio `www.example.com` para
   `startest.deco.site`.

   ![Valida√ß√£o do dom√≠nio](https://github.com/deco-cx/apps/assets/882438/0d9d876e-2a5e-4e05-8767-dc77e69c548b)

6. Uma vez configurado, clique em validar configura√ß√£o para que a deco valide se
   o apontamento foi corretamente realizado. **Importante: O dom√≠nio continuar√°
   no estado de em espera por valida√ß√£o at√© que o apontamento seja realizado na
   nossa infraestrutura**.

7. Aguarde alguns minutos e teste acessar seu dom√≠nio no browser.

# Erros Comuns

## O dom√≠nio n√£o √© validado

Verifique se o mesmo foi cadastrado corretamente no servidor de nomes. Use uma
ferramenta como o ][DNS da google](https://dns.google/) para verificar se h√° um
registro de `CNAME` apontando o dom√≠nio corretamente para um dom√≠nio
`deco.site`. Alguns provedores de dom√≠nios podem levar at√© 12 horas para
efetivar o novo apontamento.

## Ap√≥s a valida√ß√£o, as configura√ß√µes ainda exibem meu dom√≠nio como "Awaiting"

Por vezes, o dom√≠nio pode fazer a gera√ß√£o de certificados mesmo depois de sair
da tela de valida√ß√£o. No entanto, mesmo nesse caso, o dom√≠nio pr√≥prio pode j√°
estar operante.

## Quero transferir o apex (nome ra√≠z) para a deco.

Atualmente, n√£o √© poss√≠vel fazer esse apontamento na deco.

## Outras situa√ß√µes

Procure o discord da deco caso precise de ajuda!


# null
Source: https://docs.deco.cx/pt/concepts/action

Uma Action na deco.cx √© uma fun√ß√£o que modifica dados.

Uma **Action** no deco.cx √© uma fun√ß√£o em typescript que **modifica** dados
dentro da aplica√ß√£o. As **Action** s√£o acionadas por *intera√ß√µes* espec√≠ficas do
**usu√°rio** ou **eventos** e s√£o respons√°veis por atualizar o estado da
aplica√ß√£o de acordo. Ao contr√°rio dos **Loaders**, que buscam dados de fontes
externas, as **Action** concentram-se em modificar os dados j√° presentes na
aplica√ß√£o. Elas podem realizar opera√ß√µes como **atualiza√ß√£o**, **cria√ß√£o** ou
**exclus√£o** de dados com base na l√≥gica especificada. As **Action**
proporcionam *controle* preciso e flexibilidade sobre a muta√ß√£o de dados e
integram-se perfeitamente a outros blocos, como os **Loaders**, para permitir um
fluxo cont√≠nuo de dados na aplica√ß√£o.

As **Action**, assim como os **Loaders**, s√£o implementadas como fun√ß√µes em
typescript e est√£o localizadas na pasta `/actions/` do seu projeto. Elas podem
ser invocadas em resposta a intera√ß√µes do usu√°rio, envios de formul√°rios ou
qualquer outro gatilho definido. Ao encapsular a l√≥gica de muta√ß√£o de dados nas
**Action**, os desenvolvedores podem gerenciar e rastrear as altera√ß√µes feitas
no estado da aplica√ß√£o, proporcionando aos usu√°rios experi√™ncias din√¢micas e
interativas.

## C√≥digo de exemplo

Esta √© a implementa√ß√£o da Action `newsletter/subscribe.ts`:

```tsx
import { AppContext } from "../../mod.ts";

export interface Props {
  email: string;
  name?: string;
  page?: string;
  part?: string;
  campaign?: string;
}

const action = async (
  props: Props,
  _req: Request,
  ctx: AppContext,
): Promise<void> => {
  const { vcsDeprecated } = ctx;
  const form = new FormData();
  const {
    email,
    name = "",
    part = "newsletter",
    page = "_",
    campaign = "newsletter:opt-in",
  } = props;

  form.append("newsletterClientName", name);
  form.append("newsletterClientEmail", email);
  form.append("newsInternalPage", page);
  form.append("newsInternalPart", part);
  form.append("newsInternalCampaign", campaign);

  await vcsDeprecated["POST /no-cache/Newsletter.aspx"]({}, {
    body: form,
  });
};

export default action;
```

[Fonte](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/vtex/actions/newsletter/subscribe.ts#L1C1-L37C23)

## Leitura recomendada

* [Buscando dados de API](https://deco.cx/docs/pt/developing-guide/fetching-data)
* [Invocando fun√ß√µes atrav√©s da API](https://deco.cx/docs/pt/developing-capabilities/islands/fetching-data-client)


# null
Source: https://docs.deco.cx/pt/concepts/app

Apps - Capacidades de Neg√≥cios para os seus Sites deco

As Apps s√£o poderosos conjuntos de capacidades de neg√≥cios que podem ser
importados e configurados em sites deco. Uma App na deco √© essencialmente uma
**cole√ß√£o** de v√°rios **componentes**, como **a√ß√µes**, **se√ß√µes**,
**carregadores**, **fluxos de trabalho**, **manipuladores**, ou quaisquer outros
elementos deco que podem ser usados para aprimorar a funcionalidade dos seus
projetos deco.

## Vis√£o Geral

Na deco, os Apps funcionam como blocos de constru√ß√£o modulares que encapsulam
recursos ou capacidades espec√≠ficas. Eles permitem que os desenvolvedores
empacotem e compartilhem funcionalidades espec√≠ficas do neg√≥cio em diferentes
projetos, tornando mais f√°cil a manuten√ß√£o e a expans√£o dos seus sites deco.

Ao executar o comando `deno run -Ar https://deco.cx/start` no terminal, voc√™
pode come√ßar a desenvolver um App do zero e coloc√°-lo em funcionamento
rapidamente.

## Configura√ß√£o da App

Cada App pode ser configurado com par√¢metros espec√≠ficos, tornando-o vers√°til e
adapt√°vel a diferentes casos de uso. Os desenvolvedores podem importar e
configurar Apps em seus sites deco, permitindo uma integra√ß√£o perfeita e
personaliza√ß√£o da funcionalidade.

## Suporte a Monorepo

Os deco Apps podem ser gerenciados em um monorepo, proporcionando um local
centralizado para armazenar e organizar v√°rios Apps. Essa abordagem agiliza o
processo de desenvolvimento e permite um controle de vers√£o e manuten√ß√£o
eficiente dos Apps.

## Primeiros Passos

Para criar seus pr√≥prios deco Apps, siga estes passos:

1. Execute o comando `deno run -Ar https://deco.cx/start` para inicializar um
   novo deco App.
2. Defina as funcionalidades ou componentes que voc√™ deseja empacotar na app.
3. Organize as fun√ß√µes, se√ß√µes, carregadores ou outros componentes deco dentro
   do diret√≥rio do App.
4. Configure o App para aceitar par√¢metros e ser personaliz√°vel dentro do deco
   Admin.
5. Exporte o App para ser usado em outros projetos deco.

## Importando e Desinstalando Apps

Para usar um deco App no seu site deco, voc√™ pode executar os seguintes
comandos:

1. Para instalar o App:

   ```sh
   deno task install $APP_URL
   ```

   Substitua `$APP_URL` pelo local do diret√≥rio ou URL HTTP do App.

2. Para desinstalar o App:

   ```sh
   deno task uninstall $APP_URL
   ```

   Substitua `$APP_URL` pelo local do diret√≥rio ou URL HTTP do App.

## Observa√ß√£o

Os deco Apps fornecem um mecanismo poderoso para criar e compartilhar
capacidades de neg√≥cios reutiliz√°veis em seus projetos deco. Ao organizar
componentes em Apps modulares, voc√™ pode melhorar significativamente a
manuten√ß√£o e a escalabilidade dos seus sites deco. Sinta-se √† vontade para
explorar as Apps existentes e criar os seus pr√≥prios para agilizar o processo de
desenvolvimento e construir projetos deco robustos.

## Leitura Recomendada

* [Conceitos da deco: Entendendo Se√ß√µes](https://deco.cx/docs/pt-br/concepts/section)
* [Buscando Dados de APIs](https://deco.cx/docs/pt-br/developing-guide/fetching-data)
* [Invoca√ß√£o de Fun√ß√µes no Lado do Cliente](https://deco.cx/docs/pt-br/developing-capabilities/islands/fetching-data-client)


# null
Source: https://docs.deco.cx/pt/concepts/block

O Block empoderam o ecossistema da deco

## Vis√£o Geral

Imagine poder **serializar** uma fun√ß√£o e salv√°-la em um **banco de dados**. E
se essa fun√ß√£o pudesse ser combinada com v√°rias op√ß√µes diferentes? Como isso
mudaria a forma como voc√™ desenvolve aplica√ß√µes web?

No deco, tudo gira em torno dos **Blocks** (blocos). Esses Blocks s√£o fun√ß√µes
serializadas que podem ser combinadas perfeitamente, permitindo possibilidades e
personaliza√ß√µes ilimitadas.

Com o deco, voc√™ tem a flexibilidade de usar um `Inline Block` (bloco em linha),
onde voc√™ pode criar e usar Blocks instantaneamente, ou criar um Block com um
nome espec√≠fico e salv√°-lo para uso futuro, conhecido como `Saved Block` (bloco
salvo).

Usando o *deco*, os desenvolvedores t√™m a capacidade de definir **Blocks**
(blocos). Esses **Blocks** s√£o constru√≠dos em cima do Deno, fornecendo
*"capacidades encapsuladas"* reutiliz√°veis e configur√°veis que podem ser
combinadas para criar e implantar aplica√ß√µes web robustas em quest√£o de minutos.
Eles permitem que os desenvolvedores criem unidades de funcionalidade modulares
e combin√°veis. Com os Blocks, voc√™ pode facilmente combinar e integrar
diferentes capacidades para construir aplica√ß√µes complexas e personalizadas
adaptadas √†s suas necessidades espec√≠ficas.

## Personalizando a Interface do Admin

O pr√≥prio Admin UI do deco √© constru√≠do usando **Blocks**, tornando-o altamente
personaliz√°vel e expans√≠vel. Os desenvolvedores t√™m a liberdade de compor suas
pr√≥prias interfaces personalizadas de administra√ß√£o de experi√™ncia digital que
se adequam perfeitamente aos requisitos de seus usu√°rios de neg√≥cios. Com o
deco, voc√™ tem total controle sobre sua interface de administra√ß√£o, garantindo
que ela atenda precisamente √†s suas necessidades exclusivas.

## Biblioteca Visual: Explore e Personalize os Blocks

Al√©m do poderoso framework de **Blocks**, o deco oferece uma *abrangente
biblioteca visual* que permite que voc√™ **navegue por seus blocos**. Essa
biblioteca visual capacita voc√™ a explorar v√°rias op√ß√µes e configura√ß√µes para os
componentes e recursos do seu site.

Com a Biblioteca Visual, voc√™ tem a flexibilidade de personalizar e ajustar os
Blocks de acordo com seus requisitos espec√≠ficos. Voc√™ pode editar e visualizar
facilmente os Blocks com diferentes configura√ß√µes, garantindo que eles se
alinhem perfeitamente com os elementos visuais e funcionais desejados.


# null
Source: https://docs.deco.cx/pt/concepts/loader

Um Loader na deco.cx √© uma fun√ß√£o que retorna os dados necess√°rios para um Site.

Um **Loader** em *deco.cx* √© uma fun√ß√£o Typescript que retorna tipicamente os
dados necess√°rios em uma [Section](https://deco.cx/docs/pt/concepts/section). Essas fun√ß√µes s√£o
executadas antes da renderiza√ß√£o de cada p√°gina e seu principal objetivo √©
**buscar dados de fontes externas**, transform√°-los se necess√°rio e
**fornec√™-los √†s Se√ß√µes do site que precisam.** Os Loaders podem ser usados para
buscar dados de APIs, bancos de dados ou qualquer outra fonte externa. As
implementa√ß√µes locais de Loaders vivem na pasta `/loaders` do seu projeto, por√©m
√© poss√≠vel [Instalar novas apps](https://deco.cx/docs/pt/getting-started/installing-an-app) que
cont√©m outros loaders.

Al√©m de buscar dados, os Loaders na *deco.cx* **tamb√©m podem exportar um tipo de
Props Typescript**, o que permite que sejam configurados no
[Admin](https://deco.cx/admin) assim como as
[Sections](https://deco.cx/docs/pt/concepts/section). Isso significa que os usu√°rios de neg√≥cio
podem configurar detalhes sobre como o Loader ir√° operar, como **configurar
filtros** ou **passar par√¢metros para APIs.** Ao tornar os Loaders configur√°veis
dessa maneira, fica mais f√°cil gerenciar os dados que fluem para as Sections e
garantir que o Site esteja exibindo as informa√ß√µes corretas para os visitantes.

Outro benef√≠cio dos Loaders na *deco.cx* √© que **v√°rios loaders podem retornar o
mesmo tipo de dados**. Isso permite que as [Sections](https://deco.cx/docs/pt/concepts/section)
que recebem, por exemplo, um *array* de Produtos can√¥nico obtenham dados de
diferentes Loaders, dependendo da configura√ß√£o do usu√°rio. Isso significa que as
UIs podem ser reutilizadas em [Sites](https://deco.cx/docs/pt/concepts/site) ou entre times,
facilitando o gerenciamento e a escala do seu projeto.

> Todas as Sections para lojas de *ecommerce* criadas por *deco.cx* na
> [Fashion](https://github.com/deco-sites/fashion) usam um tipo de Produt
> can√¥nico e tamb√©m cada Loader que se conecta √†s APIs dos *ecommerce
> providers*. Isso significa que voc√™ pode reutilizar a mesma UI para mostrar
> dados de diferentes locais, dependendo da configura√ß√£o.

<Frame>
  <img width="1259" alt="image" src="https://user-images.githubusercontent.com/18706156/224897214-a45b2731-5799-4007-8084-a8a772ddf5d2.png" />
</Frame>

## C√≥digo de exemplo

Esta √© a implementa√ß√£o do Loader `shopify/loaders/ProductList.ts`:

```tsx
import type { Product } from "../../commerce/types.ts";
import { AppContext } from "../../shopify/mod.ts";
import { ListProducts } from "../utils/storefront/queries.ts";
import {
  ListProductsQuery,
  ListProductsQueryVariables,
} from "../utils/storefront/storefront.graphql.gen.ts";
import { toProduct } from "../utils/transform.ts";

export interface Props {
  /** @description search term to use on search */
  query: string;
  /** @description total number of items to display */
  count: number;
}

/**
 * @title Shopify Integration
 * @description Product List loader
 */
const loader = async (
  props: Props,
  _req: Request,
  ctx: AppContext,
): Promise<Product[] | null> => {
  const { storefront } = ctx;

  const count = props.count ?? 12;
  const query = props.query || "";

  const data = await storefront.query<
    ListProductsQuery,
    ListProductsQueryVariables
  >({
    variables: { first: count, query },
    ...ListProducts,
  });

  // Transform Shopify product format into schema.org's compatible format
  // If a property is missing from the final `products` array you can add
  // it in here
  const products = data?.products.nodes.map((p) =>
    toProduct(p, p.variants.nodes[0], new URL(_req.url))
  );

  return products ?? [];
};

export default loader;
```

[Fonte](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/shopify/loaders/ProductList.ts#L1)

## Leitura recomendada

* [Buscando dados de API](https://deco.cx/docs/pt/develping/fetching-data)
* [Invocando um loader atrav√©s da API](https://deco.cx/docs/pt/developing-capabilities/islands/fetching-data-client)


# null
Source: https://docs.deco.cx/pt/concepts/matcher

Um Matcher na deco √© uma fun√ß√£o que retorna um booleano

## Matchers: Potencializando as Variants

Os **Matchers** s√£o blocos essenciais no deco que desempenham um papel
fundamental ao potencializar as [Variants](https://deco.cx/docs/pt/getting-started/variants).
Eles permitem que voc√™ avalie condi√ß√µes espec√≠ficas e segmente seu p√∫blico com
base em v√°rios crit√©rios. Ao aproveitar os Matchers, voc√™ pode criar
experi√™ncias personalizadas e din√¢micas para seus usu√°rios. Ao criar um novo
**Matcher Block**, voc√™ pode cham√°-lo de [Segmento](https://deco.cx/docs/pt/concepts/segment).

### Compreendendo os Matchers

No deco, os **Matchers** s√£o criados usando *fun√ß√µes* dentro do c√≥digo do seu
site. Eles s√£o ferramentas poderosas que permitem que voc√™ defina condi√ß√µes e
avalie se um usu√°rio pertence a um determinado segmento. Os Matchers servem como
base para segmentar grupos espec√≠ficos de usu√°rios e personalizar o conte√∫do com
base em suas caracter√≠sticas ou comportamentos.

Os **Matchers padr√£o** est√£o prontamente dispon√≠veis no deco e abrangem uma
variedade de condi√ß√µes comuns, como caracter√≠sticas do usu√°rio, data e hor√°rio,
tipo de dispositivo, localiza√ß√£o geogr√°fica e sele√ß√£o aleat√≥ria (testes A/B).
Esses Matchers predefinidos oferecem *flexibilidade* e permitem que voc√™
personalize as varia√ß√µes de conte√∫do com base nessas condi√ß√µes.

No entanto, o poder dos Matchers vai al√©m das op√ß√µes padr√£o. O deco oferece a
capacidade de criar **Matchers personalizados** para atender √†s necessidades
espec√≠ficas do seu neg√≥cio. Com Matchers personalizados, voc√™ pode estender a
funcionalidade do deco para integrar fontes de dados externas, como buscar dados
de um sistema Salesforce ERP, e usar esses dados para determinar o segmento ao
qual um usu√°rio pertence.

### Matchers Nativos

| Matcher        | Casos de Uso Comuns                                                                             | Sticky  |
| -------------- | ----------------------------------------------------------------------------------------------- | ------- |
| Random Matcher | Testar A/B na p√°gina com 50% do tr√°fego                                                         | session |
| Cron Matcher   | Alterar uma p√°gina toda sexta-feira entre 10h e 11h                                             | none    |
| Date Matcher   | Criar a p√°gina da Black Friday/ Agendar banners para aparecerem em datas e hor√°rios espec√≠ficos | none    |
| Device Matcher | Exibir uma p√°gina diferente com base no dispositivo do usu√°rio                                  | none    |

### Desenvolvendo um Novo Matcher

Em seu reposit√≥rio, os Matchers est√£o localizados na pasta `matchers`, assim
como as se√ß√µes e loaders. Vamos criar um novo matcher chamado `MeuMatcher.ts`
para ilustrar o processo.

A assinatura do nosso matcher seguir√° a seguinte estrutura:

```ts
import { MatchContext } from "deco/blocks/matcher.ts";

export interface Props {
}

/**
 * @title Meu Matcher
 */
export default function MeuMatcher(
  props: Props,
  ctx: MatchContext,
) {
  return true;
}
```

No exemplo acima, a fun√ß√£o `MeuMatcher` aceita `props` como entrada, permitindo
que voc√™ passe quaisquer dados necess√°rios para o matcher. Al√©m disso, ela
recebe um objeto `ctx` do tipo `MatchContext`, que cont√©m as informa√ß√µes da
solicita√ß√£o. Voc√™ tem a flexibilidade de realizar as opera√ß√µes desejadas dentro
da fun√ß√£o do matcher e retornar um valor booleano com base na avalia√ß√£o.

Vamos dar uma olhada no exemplo `MatchDate` da biblioteca do deco:

```ts
/**
 * @title Por in√≠cio
 */
export interface Props {
  /**
   * @format date-time
   */
  start?: string;
  /**
   * @format date-time
   */
  end?: string;
}

/**
 * @title Matcher de Data
 */
const MatchDate = (props: Props) => {
  const now = new Date();
  const start = props.start ? now > new Date(props.start) : true;
  const end = props.end ? now < new Date(props.end) : true;
  return start && end;
};

export default MatchDate;
```

Neste exemplo, a fun√ß√£o `MatchDate` atua como um Matcher. Ela aceita `props`
como entrada, que inclui as propriedades `start` e `end`. A fun√ß√£o avalia se a
data atual est√° dentro do intervalo de datas especificado. Se nenhum valor de
`start` ou `end` for fornecido, ele ser√° considerado `true`. A fun√ß√£o
`MatchDate` retorna um valor booleano com base na avalia√ß√£o.

Os

Matchers tamb√©m podem ter um comportamento "sticky", o que √© particularmente
√∫til para cen√°rios de testes A/B. Para tornar um Matcher "sticky" na sess√£o do
usu√°rio, voc√™ pode exportar uma constante chamada `sticky` com o valor
`"session"`, conforme mostrado abaixo:

```ts
export const sticky = "session";
```

Aqui est√° um exemplo de implementa√ß√£o do `MatchRandom` usando a funcionalidade
de sess√£o "sticky":

```ts
/**
 * @title Teste A/B {{{percentage traffic}}}
 */
export interface Props {
  traffic: number;
}

// Uma vez selecionado, a sess√£o reutilizar√° o mesmo valor
export const sticky = "session";

/**
 * @title Matcher Aleat√≥rio
 */
const MatchRandom = ({ traffic }: Props) => {
  return Math.random() < traffic;
};

export default MatchRandom;
```

No exemplo `MatchRandom`, a fun√ß√£o matcher `MatchRandom` aceita `traffic` como
prop, representando a porcentagem de tr√°fego que deve corresponder √† condi√ß√£o.
Ao gerar um n√∫mero aleat√≥rio entre 0 e 1, a fun√ß√£o determina se o valor gerado √©
menor que a porcentagem `traffic` especificada. O Matcher retorna `true` ou
`false` com base nessa avalia√ß√£o.

Os Matchers oferecem grande flexibilidade para personalizar e estender a
funcionalidade do deco para atender √†s suas necessidades espec√≠ficas. Com a
capacidade de criar Matchers personalizados, voc√™ pode integrar fontes de dados
externas, realizar c√°lculos complexos e implementar l√≥gicas intrincadas para
determinar a segmenta√ß√£o do usu√°rio e fornecer experi√™ncias personalizadas.

### Aproveitando o Poder dos Matchers nas Variants

Os **Matchers** s√£o a base das Variants no deco. Ao *combinar Matchers com
diferentes condi√ß√µes*, voc√™ pode criar varia√ß√µes de conte√∫do direcionadas para
segmentos de usu√°rios espec√≠ficos. As **Variants** permitem que voc√™ modifique e
personalize o conte√∫do dinamicamente com base na avalia√ß√£o dos **Matchers**.

Ao configurar as **Variants**, voc√™ pode selecionar o Matcher apropriado para
cada segmento e definir as condi√ß√µes que determinam se um usu√°rio pertence a
esse segmento. Ao utilizar Matchers nas Variants, voc√™ pode ajustar a
experi√™ncia do usu√°rio, otimizar a entrega de conte√∫do e fornecer intera√ß√µes
personalizadas.


# null
Source: https://docs.deco.cx/pt/concepts/section

Uma Section representa um elemento de UI configur√°vel para um Site deco.cx.

As Sections s√£o **componentes de UI criados com
[Preact](https://preactjs.com/)** que pode receber `props` configuradas por
usu√°rios no Admin da *deco.cx*. As implementa√ß√µes locais de Section vivem na
pasta `sections/` no c√≥digo do Site, por√©m √© poss√≠vel
[Instalar novas apps](https://deco.cx/docs/pt/getting-started/installing-an-app).

Alguns exemplos de Section para uma loja de ecomemerce seriam:

* **ProductShelf.tsx:** exibe uma prateleira com imagem, t√≠tulo e pre√ßo.
* **Header.tsx:** exibe o cabe√ßalho padr√£o da loja, contendo logotipo,
  categorias de menu e links para carrinho e login.
* **Banner.tsx:** exibe imagem, texto e alguns *Call to action* para campanha ou
  departamento espec√≠fico.

## Interatividade

Observe que as se√ß√µes s√£o executadas **somente no lado do servidor**, portanto,
gerenciamento de estado e ciclo de vida como `useState`, `useEffect` e callbacks
como `onClick`, `onInput` n√£o ir√£o funcionar. Para que funcionem, voc√™ precisar√°
usar [Islands](https://fresh.deno.dev/docs/concepts/islands).

No Admin da *deco.cx* √© poss√≠vel interagir com as Sections em dois locais:

* **Library:** permite que desenvolvedores configurem as propriedades das
  Section e visualizaem automaticamente a UI renderizada. (Funciona semelhante
  ao [Storybook](https://storybook.js.org/))
* **Pages:** Permite que a Section seja adicionada √† Pages no Site, sendo tamb√©m
  configur√°veis por l√°.

## Leitura adicional

* [Tutorial: Codificando uma nova se√ß√£o](https://deco.cx/docs/en/developing-guide/hello-world)
* [Desenvolvendo: Se√ß√µes personaliz√°veis](https://deco.cx/docs/en/developing-guide/editable-sections)


# null
Source: https://docs.deco.cx/pt/concepts/segment

Um Segment na deco √© um Matcher configurado juntamente com uma Variant

## Segmento: Direcionando Grupos Espec√≠ficos de Usu√°rios

No Deco, um **Segmento** se refere a um grupo espec√≠fico ou subset de usu√°rios
que atendem a certas condi√ß√µes ou crit√©rios. Segmentos s√£o uma ferramenta
poderosa que permite direcionar e personalizar o conte√∫do para grupos de
usu√°rios espec√≠ficos, proporcionando experi√™ncias sob medida e otimizando a
entrega de conte√∫do.

### Compreendendo os Segmentos

Segmentos s√£o definidos por [Matchers](https://deco.cx/docs/pt/concepts/matchers), que avaliam
condi√ß√µes e determinam se um usu√°rio pertence a um segmento espec√≠fico. Matchers
podem considerar v√°rios fatores, como caracter√≠sticas do usu√°rio, data e
hor√°rio, tipo de dispositivo, localiza√ß√£o geogr√°fica e muito mais. Ao aproveitar
os Matchers, voc√™ pode criar varia√ß√µes de conte√∫do din√¢micas e personalizadas
com base nessas condi√ß√µes.

### Utilizando os Segmentos

Segmentos desempenham um papel crucial em v√°rias √°reas do Deco, especialmente no
contexto de [Variants](https://deco.cx/docs/pt/getting-started/variants). Variantes permitem
criar varia√ß√µes de conte√∫do e personalizar a experi√™ncia do usu√°rio com base em
diferentes segmentos. Ao combinar Matchers com diferentes condi√ß√µes, voc√™ pode
direcionar grupos espec√≠ficos de usu√°rios e fornecer conte√∫do personalizado para
melhorar o envolvimento e a satisfa√ß√£o.

Segmentos oferecem grande flexibilidade e permitem definir diferentes
estrat√©gias de direcionamento com base em seus objetivos espec√≠ficos e
caracter√≠sticas do p√∫blico. Seja conduzindo testes A/B, exibindo conte√∫do
diferente com base nas caracter√≠sticas do usu√°rio ou personalizando experi√™ncias
com base em localiza√ß√£o ou tipo de dispositivo, Segmentos capacitam voc√™ a
otimizar o desempenho do seu site e fornecer uma jornada personalizada ao
usu√°rio.

Com a capacidade de definir e utilizar Segmentos no Deco, voc√™ pode criar uma
experi√™ncia do usu√°rio altamente direcionada e envolvente, melhorando a
satisfa√ß√£o do usu√°rio e alcan√ßando seus objetivos de neg√≥cios.

Lembre-se de que Segmentos s√£o definidos por Matchers, portanto, compreender
como os Matchers funcionam e criar Matchers personalizados que atendam aos seus
requisitos espec√≠ficos permitir√° que voc√™ aproveite efetivamente o poder dos
Segmentos no Deco.


# null
Source: https://docs.deco.cx/pt/decopilot/assistant

Decopilot como seu assistente de c√≥digo

## Decopilot: Seu Assistente de C√≥digo

Como seu assistente, o Decopilot pode ajudar a melhorar e desenvolver seu site.
Abaixo, voc√™ pode ver diferentes exemplos de uso, mas sinta-se √† vontade para
explorar o poder da IA. Para a gera√ß√£o de c√≥digo, o Decopilot suporta tanto
texto com a solicita√ß√£o desejada quanto a inser√ß√£o de imagens locais. Em ambos
os casos, voc√™ pode escolher **aceitar as altera√ß√µes**, **descartar** ou
**recriar o c√≥digo fornecido.**

### Criando Blocos

Blocos s√£o um dos conceitos mais importantes na deco.cx, ent√£o o Decopilot est√°
pronto para ser chamado para criar qualquer um desses componentes. √â s√≥ pedir!
Desde loaders e actions at√© sections, o Decopilot perguntar√° se pode prosseguir
com o processo de cria√ß√£o ou n√£o. Aqui est√° um exemplo de como funciona com
sections:

> Prompt: Crie uma section dizendo Ol√° Mundo!

![Criar Section](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/10642/7f67b4af-fac1-41e2-91e5-a6d9e9c1910d)

### Criando e Editando C√≥digo

Voc√™ pode explorar a gera√ß√£o e edi√ß√£o de c√≥digo com base no seu c√≥digo atual e
na cria√ß√£o de novos componentes com o Decopilot. Por exemplo, ao usar o prompt:

> Prompt: Crie um Hero dizendo Hello World em tons de verde.

Ap√≥s gerar o c√≥digo, o Decopilot substitui o c√≥digo usado, e voc√™ pode ver o
resultado na pr√©-visualiza√ß√£o.

![Gerando C√≥digo](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/10664/7fd346ee-1b5b-49e5-be5a-4a288068c4fd)

### Criando e Editando com Base em uma Imagem

Se voc√™ deseja usar uma imagem como inspira√ß√£o, o Decopilot pode reproduzi-la ao
receber uma imagem local em um dos formatos suportados (JPEG, PNG, GIF e WebP)
junto com a solicita√ß√£o do que fazer. Aqui est√° um exemplo de prompt:

> Prompt: Reproduza este componente para mim.

![Image into code](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/10628/16cf5448-c54c-4a21-9632-c6c21d77feb4)

### Explicar e Corrigir Erros

Para ajudar ainda mais no processo de desenvolvimento, o Decopilot pode ajudar a
explicar algo para voc√™ ou at√© mesmo corrigir erros no seu c√≥digo. Exemplo de
prompt:

> Prompt: O que este c√≥digo faz?

![Explain and fix](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/10628/40710dbe-c6d3-4b2e-b0ea-893372fccf12)

### Analisar Desempenho

Seu assistente de c√≥digo pode ser √∫til para consultar o desempenho do seu site e
fornecer feedback sobre como melhor√°-lo. Aqui est√° um exemplo de prompt:

> Prompt: Como est√° o desempenho do meu site?

## Conclus√£o

Com base nas funcionalidades apresentadas, o potencial do Decopilot para
simplificar e acelerar o desenvolvimento de c√≥digo √© evidente.
[Experimente agora](https://admin.deco.cx/) e descubra como ele pode transformar
sua experi√™ncia de programa√ß√£o, tornando-a mais eficiente e produtiva!


# null
Source: https://docs.deco.cx/pt/decopilot/how-to-access

Como acessar o decopilot

## Introdu√ß√£o

O Decopilot √© uma ferramenta de gera√ß√£o de c√≥digo projetada para acelerar ainda
mais o processo de cria√ß√£o de sites. Buscando combinar a praticidade do uso de
intelig√™ncia artificial com a agilidade proporcionada pelo
[Admin da Deco](https://admin.deco.cx/) para o desenvolvimento de aplica√ß√µes
web, o Decopilot oferece a liberdade para criar um site e seu conte√∫do em
quest√£o de minutos, enquanto auxilia voc√™ na identifica√ß√£o e corre√ß√£o de
eventuais erros durante o desenvolvimento.

## Como acessar

Ap√≥s [criar seu site](https://deco.cx/docs/pt/getting-started/creating-a-site),
abra um arquivo de c√≥digo em qualquer section do seu site. Voc√™ pode fazer isso
atrav√©s da barra de pesquisa do nosso CMS ou clicando no √≠cone de c√≥digo como
mostrado abaixo:
![Vai para o c√≥digo](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/10475/e92ec929-45eb-4dfc-bc90-b517001ef5f7)

Na barra lateral direita voc√™ poder√° acessar o decopilot conforme a imagem:
![Decopilot](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/10664/3a7f448c-e5f4-4aa5-9328-9c573695be4f)

Pronto! Agora voc√™ pode experimentar as funcionalidades do nosso decopilot. Para
isso, vale a pena acessar o
[Assistant](https://deco.cx/docs/pt/decopilot/assistant).


# null
Source: https://docs.deco.cx/pt/developing-capabilities/analytics

TODO

## Enviando eventos para o dataLayer

O `dataLayer` √© a camada de dados utilizada pelo Google Tag Manager ou Google
Tag (utilizado pelo Google Analytics) para gerenciar os eventos dos pixels que
est√£o configurados na tag.

Em um projeto deco.cx existe uma
[sdk/analytics.ts](https://github.com/deco-sites/fashion/blob/main/sdk/analytics.tsx)
que contem a fun√ß√£o **sendEvents**, que recebe um objeto do tipo
[AnalyticsEvent](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/commerce/types.ts#L754)
e adiciona o dado no dataLayer. Neste mesmo arquivo, tamb√©m contem 2
componentes, que recebe uma propriedade `event` do tipo AnalyticsEvent e envia o
evento para o dataLayer. O **SendEventOnLoad** dispara o evento quando ocorrer o
evento de `load` do navegador, ele √© √∫til para enviar os eventos, cujo nome tem
padr√£o `view_*`. J√° o **SendEventOnClick** dispara o evento quando o elemento
for clicado.

Exemplos:

1. Enviando evento de `add_to_cart` quando o usu√°rio clicar no bot√£o de
   adicionar produto ao Carrinho. Este componente deve ser utilizado dentro de
   uma Island.

```tsx
import { sendEvent } from "$store/sdk/analytics.tsx";

interface Props {
  name: string;
  sku: string;
  id: string;
  price: number;
  discount?: number;
  currency: string;
}

function AddToCart({ name, sku, id, price, discount, currency }: Props) {
  const handleClick = () => {
    addSkuToCart({ sku, quantity: 1 }); // function that call api to add sku
    sendEvent({
      name: "add_to_cart",
      params: {
        currency,
        value: price,
        items: [{
          item_id: id,
          quantity: 1,
          price: price + (discount ?? 0),
          discout,
          name,
        }],
      },
    });
  };

  return <button onClick={handleClick}>Add to cart</button>;
}
```

2. Enviando evento de `view_item` na p√°gina de produto ao carregar a p√°gina,
   utilizando SendEventOnLoad.

```tsx
import type { Product } from "apps/commerce/types.ts";
import { mapProductToAnalyticsItem } from "apps/commerce/utils/productToAnalyticsItem.ts";
import { SendEventOnLoad } from "$store/sdk/analytics.tsx";
import { useOffer } from "$store/sdk/useOffer.ts";

interface Props {
  product: Product;
  currency: string;
}

function ProductDetails({ product, currency }: Props) {
  const { price, listPrice } = useOffer(product.offers);

  return (
    <>
      <ProductInfo product={product} />
      <SendEventOnLoad
        event={{
          name: "view_item",
          params: {
            currency,
            value: price,
            items: [mapProductToAnalyticsItem({ product, price, listPrice })],
          },
        }}
      />
    </>
  );
}
```

3. Enviando evento de `select_item` ao clicar num link de produto, utilizando
   SendEventOnClick. Utilizar o SendEventOnClick √© √∫til quando o componente √©
   renderizado no servidor.

```tsx
import type { Product } from "apps/commerce/types.ts";
import { mapProductToAnalyticsItem } from "apps/commerce/utils/productToAnalyticsItem.ts";
import { SendEventOnClick } from "$store/sdk/analytics.tsx";
import { useOffer } from "$store/sdk/useOffer.ts";

interface Props {
  product: Product;
  itemListId?: string;
  itemListName?: string;
}

function ProductCard({ product, itemListName, itemListId }: Props) {
  const { price, listPrice } = useOffer(product.offers);

  return (
    <>
      <a id={product.productID} href={product.url}>
        <Frame><img src={product.images[0]} /></Frame>
        <span>{product.name}</span>
      </a>
      <SendEventOnClick
        id={product.productID}
        event={{
          name: "select_item",
          params: {
            name: "select_item",
            params: {
              item_list_name: itemListName,
              item_list_id: itemListId,
              items: [
                mapProductToAnalyticsItem({
                  product,
                  price,
                  listPrice,
                }),
              ],
            },
          },
        }}
      />
    </>
  );
}
```

## Customizando fun√ß√£o de sendEvents

√â poss√≠vel extender a fun√ß√£o `sendEvents` para disparar eventos para outras
camadas de dados diferente do `dataLayer`. No arquivo `sdk/analytics.tsx` do seu
projeto deco, voc√™ pode customizar a fun√ß√£o `sendEvent` adicionando novos
integra√ß√µes.

Exemplo:

```diff
export const sendEvent = <E extends AnalyticsEvent>(event: E) => {
  if (typeof window.DECO_SITES_STD?.sendAnalyticsEvent !== "function") {
    console.info(
      "Cannot find Analytics section in your page. Press `.` to add Analytics and supress this warning",
    );

    return;
  }
+
+ if (!window.gtag) {
+   window.gtag = function () {
+   window.dataLayer.push(arguments);
+ };
+ }
+
  window.DECO_SITES_STD.sendAnalyticsEvent(event);
+ window.gtag("event", event.name, event.params)
};
```

## Integrando dado do carrinho com o tipo AnalyticsItem

Para integrar um novo modelo de dados de carrinho, adicione um mapeador de dados
no hook de `useCart.ts` da plataforma que est√° implementando. Exemplo do
[VTEX useCart](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/vtex/hooks/useCart.ts#L1).


# null
Source: https://docs.deco.cx/pt/developing-capabilities/apps/ab-test

Como criar um Teste A/B e acompanhar os resultados?

<div>
  <iframe width="915" height="435" src="https://www.youtube.com/embed/_tXQw2Cew44" title="Creating A/B Tests (Guilherme Tavano) | Short Demos | Brazilian Portuguese üáßüá∑" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />
</div>

# Como criar um Teste A/B e acompanhar os resultados?

Os testes A/B para websites consistem em dividir e direcionar o publico para
duas vers√µes diferentes do site e ver em qual delas o engajamento √© maior.

Vamos conhecer cada uma das etapas:

* Criando um experimento
* Segmenta√ß√£o do tr√°fego
* Editando sua variante
* Cria√ß√£o de eventos e coleta de dados
* Funil e resultado

## Criando um experimento

No menu lateral, clique em Experiments

![Experiments screen](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/7060003d-e0ae-4ec1-8a22-a7a88d0dfe71)

Essa tela lista os seus experimentos, clique em "Create new Experiment"

Alguns dados ser√£o necess√°rios:

* Name
* Description
* Traffic (porcentagem que ir√° para vers√£o nova)

## Segmenta√ß√£o do tr√°fego

Voc√™ acabou escolher a porcentagem do tr√°fego para o seu teste, mas pode
personalizar isso ainda mais.

A cria√ß√£o do Experimento, gerou um novo Segmento, que pode ser conferido na aba
lateral, em Segments:

![Segments screen](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/f25a1aab-3c16-45a3-8083-742d88b52e1e)

Assim, voc√™ tamb√©m pode combinar segmentos para fazer Testes para p√∫blicos
espec√≠ficos:

Selecione o Teste criado e fa√ßa as altera√ß√µes que deseja.

Exemplos de segmenta√ß√£o:

* **50%** do tr√°fego **Mobile**
* **30%** do tr√°fego da **Campanha do Facebook**
* **10%** do tr√°fego do **Rio de Janeiro**

## Editando sua variante

Agora com o segmento criado, voc√™ pode escolher se deseja fazer o teste para uma
p√°gina completa ou uma section espec√≠fica.

Crie uma variante:
![Create variants](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/ef0f35c3-e98a-4523-96df-e811102aafa6)

Selecione o segmento:
![Select a segment](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/e9cd11bd-c389-448a-97f5-f915e18e6712)

Fa√ßa as altera√ß√µes que deseja:
![Variants](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/c3eeba19-8163-4892-923b-4323c6c3216a)

## Cria√ß√£o de eventos e coleta de dados

Os templates j√° iniciam com alguns eventos, mas voc√™ pode criar novos eventos.

Veja como criar pelo c√≥digo ou pelo painel:

Exemplo no c√≥digo:

```javascript
import { sendEvent } from "./sdk/analytics.tsx";

<button
  onClick={() => sendEvent({ name: "add_to_cart" }, params)}
>
  Adicionar ao Carrinho
</button>;
```

## Funil e resultado

Al√©m disso, √© poss√≠vel conferir os resultados do Teste A/B

Na tela que lista os Experimentos, selecione o Teste desejado.

Confira os recursos:

### Tamanho da amostra

Indica√ß√£o de tamanho m√≠nimo da amostra para que o teste seja considerado
estatisticamente relevante.

### Probabilidade

Veja a probabilidade da sua varia√ß√£o ser a vencedora em rela√ß√£o a outra.

### Configura√ß√£o de metas

Selecione as metas que deseja comparar, n√£o existe nenhum limite.

### Filtro por per√≠odo

Filtre por per√≠odo para entender se houve pontos fora da curva durante o teste.

### Funil

Veja a taxa de convers√£o de cada uma das suas m√©tricas para entender onde est√°
perdendo o seu usu√°rio.

### Tempo real

Os dados s√£o transferidos em tempo real, chega de esperar um ou dois dias para
analis√°-los.

![Experiments screen](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/6ddc740d-9590-431b-b1e7-f0a0130bc5f6)

![Experiments screen](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/cc637298-e938-494c-9253-b7d1bef6f99a)

## Setup do GA4 para Teste A/B

Para assegurar a consist√™ncia dos dados fornecidos fornecidos ao navegar em um
Teste A/B na deco.cx, utilizamos um cookie, chamado *deco\_segment*.

Esse cookie dura por padr√£o 30 dias e pode ser utilizado para entender em qual
vers√£o o usu√°rio est√°.

Todos os dados que v√£o para o Analytics da deco.cx, j√° s√£o separados por
segmento.

Por√©m, para que isso tamb√©m aconte√ßa no GA4, √© necess√°rio verificar esse cookie
e segmentar os eventos com base nessa informa√ß√£o.

* Exemplo de cookie

```
deco_segment=TdCJTIyYWN0aXZlJTIyJTNBJTVCJTVEJTJDJTIyaW5hY3RpdmVEcmF3biUyMiUzQSU1QiUyMlRlc3RlJTIwVGF2YW5vJTIyJTVEJTdE
```

* Para extrair o dado leg√≠vel deste hash, utilize a fun√ß√£o:

```javascript
getData(myCookie) {
	return JSON.parse(decodeURIComponent(atob(myCookie)))
}
```

* Isso ir√° devolver um objeto como:

```json
{
  "active": [],
  "inactiveDrawn": ["Teste Tavano"]
}
```

Dessa forma, no GTM, voc√™ consegue identificar se o usu√°rio est√° participando do
Teste X, permitindo o envio de eventos de forma segmentada e precisa.


# null
Source: https://docs.deco.cx/pt/developing-capabilities/apps/creating-an-app

Desenvolvendo um App

# Pr√©-requisitos

Antes de come√ßar, verifique se voc√™ possui os seguintes itens instalados no seu
sistema:

* [Deno](https://deno.land/)

## Passo 1: Inicializando o App deco

Para iniciar o desenvolvimento do seu App deco, execute o seguinte comando no
seu terminal:

```bash
deno run -A -r https://deco.cx/start
```

Este comando inicializar√° um novo projeto de App deco no diret√≥rio atual.
Escolha um nome significativo para o seu app quando solicitado.

## Passo 2: Navegando at√© o Diret√≥rio do App deco

Ap√≥s a inicializa√ß√£o ser conclu√≠da, navegue at√© o diret√≥rio do seu App deco
usando o seguinte comando:

```bash
cd $NOME_DO_SEU_APP
```

Substitua `$NOME_DO_SEU_APP` pelo nome que voc√™ escolheu para o seu App deco
durante a inicializa√ß√£o.

## Passo 3: Entendendo o Arquivo `mod.ts`

Agora, vamos dar uma olhada no arquivo `mod.ts` do seu App deco:

```ts
import manifest from "./manifest.gen.ts";
import type { Manifest } from "./manifest.gen.ts";
import type { App, AppContext as AC } from "deco/mod.ts";

export interface State {
  url: string;
}
export type MyApp = App<Manifest, State>;
export default function App(
  state: State,
): MyApp {
  return {
    manifest,
    state,
  };
}

export type AppContext = AC<MyApp>;
```

O arquivo `mod.ts` √© o cora√ß√£o do seu App deco e √© escrito pelo desenvolvedor.
Neste arquivo, voc√™ importa o `manifest` gerado automaticamente e define a
interface `State`, que representa as propriedades do seu app. Pode ser usado
para configurar API keys para uma chamada a alguma dada API.

A fun√ß√£o `App` √© exportada e recebe o objeto `state` como argumento,
representando o estado do seu app. Em seguida, ela retorna um objeto contendo o
`manifest` e o `state` definidos. Essa fun√ß√£o √© fundamental para que o seu app
funcione corretamente.

Por fim, √© exportado o tipo `AppContext`, que representa o contexto do seu app e
permite acessar as propriedades definidas no `mod.ts`.

## Passo 4: Desenvolvendo o seu App deco

Agora que voc√™ entende a estrutura b√°sica do seu App deco, voc√™ pode come√ßar a
desenvolv√™-lo. Sinta-se √† vontade para adicionar mais componentes, como se√ß√µes,
a√ß√µes, fluxos de trabalho ou manipuladores, para aprimorar a funcionalidade do
seu app.

## Passo 5: Construindo o seu App deco

Para ver o seu App deco em a√ß√£o, execute o seguinte comando:

```bash
deno task start
```

<Frame>
  <img width="466" alt="image" src="https://github.com/deco-sites/starting/assets/5839364/a0dfa130-91e0-4542-84e6-29d4539c7cff" />
</Frame>

Este comando iniciar√° o seu app e automaticamente gerar√° os arquivos necess√°rios
para torn√°-lo utiliz√°vel em qualquer site deco.

## Conclus√£o

Parab√©ns! Voc√™ criou e desenvolveu com sucesso o seu pr√≥prio App deco. Voc√™
aprendeu sobre o arquivo `mod.ts`, o cora√ß√£o do seu app, que permite que voc√™
defina o `manifest` e o `state` do seu app. Os Apps deco oferecem uma maneira
poderosa de agrupar e compartilhar capacidades empresariais, tornando mais f√°cil
a manuten√ß√£o e escalabilidade dos seus projetos deco. Divirta-se codificando e
sinta-se √† vontade para explorar mais recursos do deco para aprimorar ainda mais
os seus apps! üöÄ

## Leitura Adicional

* [Tornando um App Instal√°vel](https://deco.cx/docs/en/developing-capabilities/apps/making-an-app-installable)


# null
Source: https://docs.deco.cx/pt/developing-capabilities/apps/making-an-app-installable

Tornando um app Instal√°vel

Para tornar o seu App deco instal√°vel em um site deco, siga estes simples
passos:

1. Execute o seguinte comando em seu terminal para instalar o seu App:

```bash
deno task install $NOME_DO_SEU_APP
```

Substitua `$NOME_DO_SEU_APP` pela localiza√ß√£o da sua App, que pode ser uma pasta
no seu sistema de arquivos ou uma URL http do github ou denopkg/denoland.

2. Em seguida, execute o comando a seguir para atualizar o esquema e o manifesto
   do seu App:

```bash
deno task start
```

Ap√≥s concluir essas etapas, o seu App deco estar√° instalado e pronto para ser
usado em qualquer site deco que voc√™ desejar. Agora voc√™ pode compartilhar e
aproveitar suas capacidades empresariais de forma pr√°tica e eficiente.
Divirta-se construindo e usando os seus Apps deco! üöÄ


# null
Source: https://docs.deco.cx/pt/developing-capabilities/blocks/exporting-default-props

Exportando Propriedades Padr√£o em um Bloco

# Resumo

1. Vis√£o Geral
2. Cen√°rio Atual
3. Exportando Propriedades Padr√£o nos Par√¢metros da Fun√ß√£o
4. Implementa√ß√£o
5. Conclus√£o

# Vis√£o Geral

Este documento detalha o comportamento atual dos valores padr√£o nos componentes
dentro do Admin e apresenta um novo recurso que permite aos desenvolvedores
especificar propriedades padr√£o diretamente nos par√¢metros da fun√ß√£o. Esta
melhoria melhora a experi√™ncia do usu√°rio garantindo que os valores padr√£o sejam
refletidos corretamente tanto na interface do Admin quanto nos componentes
renderizados.

# Cen√°rio Atual

Na configura√ß√£o atual, os valores padr√£o para props s√£o codificados diretamente
no c√≥digo do componente. Isso leva a uma inconsist√™ncia entre a interface do
Admin e o componente renderizado:

1. **Admin:** Quando um componente tem valores padr√£o definidos em seu c√≥digo, o
   formul√°rio na interface do Admin exibe campos vazios em vez desses valores
   padr√£o.
2. **Componente Renderizado:** Apesar dos campos de formul√°rio vazios, o
   componente ainda √© renderizado com os valores padr√£o codificados.
3. **JSON:** O arquivo JSON exibido para o desenvolvedor na interface do Admin
   n√£o inclui esses valores padr√£o, o que leva a confus√£o e uma experi√™ncia de
   usu√°rio ruim.

## Exemplo

Considere o seguinte cen√°rio: Um componente de rodap√© tem props padr√£o definidas
em seu c√≥digo. Na interface do Admin, os campos de formul√°rio para essas props
est√£o vazios, mas o componente √© renderizado com os valores codificados. Essa
desconex√£o torna dif√≠cil para os desenvolvedores e gerentes de conte√∫do mapear o
texto de entrada para os dados da p√°gina com precis√£o.

```tsx
import { ImageWidget } from "apps/admin/widgets.ts";
import Image from "apps/website/components/Image.tsx";

interface Props {
  href?: string;
  image?: ImageWidget;
  alt?: string;
  width?: number;
  height?: number;
  text?: string;
  list?: {
    listItem: string;
    listItemArray: string[];
  };
}

export default function Footer(
  { image, href, text, alt, height, width, list }: Props,
) {
  const defaultImage =
    "https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/4959/d7aa9290-074f-417c-99c3-5b0587c8c2ee";
  const defaultHref = "https://deco.cx/";
  const defaultText = "Made with";
  const defaultAlt = "Made with deco.cx";
  const defaultHeight = 20;
  const defaultWidth = 50;
  const defaultList = {
    listItem: "1",
    listItemArray: ["1", "2"],
  };

  return (
    <div>
      <div class="bg-white">
        <a
          href={href || defaultHref}
          class="flex flex-row gap-1 items-center justify-center text-xs"
          target="_blank"
        >
          {text && <p>{text || defaultText}</p>}
          {image && (
            <Image
              src={image || defaultImage}
              alt={alt || defaultAlt}
              height={height || defaultHeight}
              width={width || defaultWidth}
            />
          )}
        </a>
      </div>
      {list && <div>{list || defaultList}</div>}
    </div>
  );
}
```

# Exportando Propriedades Padr√£o nos Par√¢metros da Fun√ß√£o

Para resolver este problema, o Admin agora suporta a especifica√ß√£o de
propriedades padr√£o diretamente nos par√¢metros da fun√ß√£o de qualquer bloco. Isso
garante que os valores padr√£o sejam refletidos de forma consistente na
interface, no componente renderizado e no arquivo JSON mostrado aos
desenvolvedores, proporcionando benef√≠cios como:

* **Consist√™ncia:** Os valores padr√£o s√£o vis√≠veis e edit√°veis na interface do
  admin, garantindo uma experi√™ncia de usu√°rio consistente.
* **Clareza:** Os desenvolvedores podem ver os valores padr√£o reais no arquivo
  JSON, reduzindo a confus√£o.
* **Simplicidade:** Mais f√°cil de gerenciar e atualizar os valores padr√£o
  diretamente nos par√¢metros da fun√ß√£o.

Este recurso suporta cen√°rios mais simples, cobrindo tipos de dados b√°sicos e
objetos aninhados.

# Implementa√ß√£o

Para especificar propriedades padr√£o em seu componente, inclua-os diretamente no
par√¢metro da fun√ß√£o. Abaixo est√° um exemplo de como fazer isso:

```tsx
import { ImageWidget } from "apps/admin/widgets.ts";
import Image from "apps/website/components/Image.tsx";

interface Props {
  href?: string;
  image?: ImageWidget;
  alt?: string;
  width?: number;
  height?: number;
  text?: string;
  list?: {
    listItem: string;
    listItemArray: string[];
  };
}

export default function Footer(
  { image, href, text, alt, height, width, list }: Props = {
    image:
      "https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/4959/d7aa9290-074f-417c-99c3-5b0587c8c2ee",
    href: "https://deco.cx/",
    text: "Made with",
    alt: "Made with deco.cx",
    height: 20,
    width: 50,
    list: {
      listItem: "1",
      listItemArray: ["1", "2"],
    },
  },
) {
  return (
    <div>
      <div class="bg-white">
        <a
          href={href}
          class="flex flex-row gap-1 items-center justify-center text-xs"
          target="_blank"
        >
          {text && <p>{text}</p>}
          {image && (
            <Image
              src={image}
              alt={alt}
              height={height}
              width={width}
            />
          )}
        </a>
      </div>
      {list && <div>{list}</div>}
    </div>
  );
}
```

## Explica√ß√£o

1. **Valores Padr√£o de Props:** Os valores padr√£o para image, href, text, alt,
   height, width e list s√£o especificados diretamente no par√¢metro da fun√ß√£o.
2. **Interface de Props:** A interface Props define a estrutura e os tipos das
   props.
3. **L√≥gica do Componente:** A l√≥gica do componente usa esses valores padr√£o,
   garantindo que sejam aplicados de forma consistente.

Ent√£o as propriedades definidas no Admin, o preview, o c√≥digo e o JSON da
section dever√° parecer como a imagem a seguir, em vez de aparecer com valores
vazios:

![Tela atual com props padr√µes exportadas](https://deco.cx/docs/exporting-default-props/export-default-props-example.png)

# Conclus√£o

Ao especificar propriedades padr√£o diretamente nos par√¢metros da fun√ß√£o, este
novo recurso melhora a integra√ß√£o entre a interface do admin e a renderiza√ß√£o do
componente. Essa mudan√ßa simplifica o fluxo de trabalho para os desenvolvedores
e aprimora a experi√™ncia do usu√°rio, garantindo que os valores padr√£o sejam
vis√≠veis e gerenci√°veis em todas as partes do Admin.


# null
Source: https://docs.deco.cx/pt/developing-capabilities/deco-records

Deco records √© um banco de dados sqlite, pronto para produ√ß√£o de f√°cil instala√ß√£o, que est√° localizado pr√≥ximo do usu√°rio.

## Instalando o deco records no seu site

> Para iniciar o processo de instala√ß√£o, crie um ambiente novo, no admin deco do
> seu site, ou resete o ambiente que esteja utilizando, por que ser√° feito um
> publish ao fim desta etapa.

Siga o passo a passo abaixo para realizar a instala√ß√£o no seu site ou siga o
v√≠deo.

<iframe width="100%" height="400" src="https://www.loom.com/embed/8414aab7837c4930b92bcbe97651f427?sid=27354f03-3206-464f-987e-22e703b9ed79" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />

1. Entre no admin do seu site na deco
2. Na barra lateral clique no menu records
3. Em seguida clique em `Setup Deco Records`, aguarde o processo de instala√ß√£o
   da app e cria√ß√£o do banco de dados. Nesta etapa, ser√° criado e editado alguns
   arquivos do seu site (deno.json, .gitignore, manifest.gen.ts,
   apps/deco/records.ts, drizzle.config.ts, db/schema.ts,
   .deco/blocks/deco-records.json)
   ![setup deco records](https://deco.cx/docs/reference/deco-records/setup.webp)
4. Ap√≥s a instala√ß√£o, clique em `Show diff and publish` para publicar a
   instala√ß√£o da sua app e cria√ß√£o do banco de dados.
5. Revise os arquivos alterados, edite a descri√ß√£o e, por fim, clique em
   `Publish now`.

Ap√≥s o processo de publica√ß√£o finalizar, ao acessar o menu de records, ter√° a
visualiza√ß√£o do seu banco de dados.
![Visualiza√ß√£o do banco de dados no admin](https://deco.cx/docs/reference/deco-records/records-view.webp)

## Criando tabelas

> Ser√° necess√°rio ter os arquivos que foram criados durante a instala√ß√£o do deco
> records no computador. Caso seja necess√°rio realize um git pull do seu projeto
> remoto.

Siga o passo a passo abaixo para criar novas tabelas no seu banco de dados ou
siga o v√≠deo. Neste processo ser√° utilizado o
[drizzle-orm](https://orm.drizzle.team/) e
[drizzle-kit](https://orm.drizzle.team/) para cria√ß√£o das tabelas e
gerenciamento delas no seu banco de dados, atrav√©s de
[schema migrations](https://medium.com/@joelrodrigues/o-que-s%C3%A3o-database-migrations-f817448870a2).
No exemplo a seguir, ser√° criado uma tabela com nome profiles, com as colunas:
`id`, `name` e `email`.

<iframe width="100%" height="400" src="https://www.loom.com/embed/7d7442496a8c45109eaf67f1e00fc2f1?sid=2124b27e-d754-44f0-b7a2-8fc0e977d945" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />

{/* Use span due to a bug in markdown parser deno-gfm */}

<span>1.</span> Edite o arquivo `db/schema.ts` para criar tabelas.

```ts
import { integer, sqliteTable, text } from "drizzle-orm/sqlite-core";

export const profiles = sqliteTable("profiles", {
  id: integer("id").primaryKey({ autoIncrement: true }),
  name: text("name").notNull(),
  email: text("email"),
});
```

<span>2.</span> Entre no admin do seu site, clique no menu de `Settings`, em
seguida, na se√ß√£o Database credentials, clique em `Generate now`. Por fim,
clique no icone de copiar as credenciais.

<span>3.</span> Adicione as credenciais, nas vari√°veis de ambiente do sistema
operacional do seu computador.
![Visualiza√ß√£o do bot√£o de gerar credenciais](https://deco.cx/docs/reference/deco-records/generate-credentials.webp)

<span>4.</span> Execute a deno task `db:setup:deps` no seu terminal para
instalar as depend√™ncias necess√°rias para realizar o schema migration. √â
necess√°rio vers√£o do deno maior ou igual a 1.43.0 e utilizar a vari√°vel de
ambiente `DENO_FUTURE=1` para habilitar a instala√ß√£o de m√≥dulos npm.

<span>5.</span> Execute a deno task `db:schema:update`, para criar os arquivos
sql respons√°veis pela schema migration e aplica-los ao banco de dados. Execute
este comando sempre que realizar uma altera√ß√£o nas suas tabelas para gerar novas
schema migrations.

```sh
deno task db:setup:deps
```

<span>6.</span> No menu de records do seu site, no admin da deco, ter√° as
tabelas de `profiles` e `__drizzle__migrations`. A tabela drizzle\_\_migrations √©
auto gerada e utilizada pelo drizzle-kit para gerenciar os schema migrations.
![Visualiza√ß√£o das tabelas do deco records](https://deco.cx/docs/reference/deco-records/records-view-tables.webp)

> Adicione os arquivos auto gerados em um git commit e realize um push para o
> git remoto.

## Lendo e escrevendo dados

Com a tabela de profiles criada, agora podemos criar uma
[section](https://deco.cx/docs/pt/concepts/section) de gerenciar perfis, onde
lista, remove e cria um perfil.

Crie uma section que ser√° o gerenciador de perfis.

```ts
import { eq } from "drizzle-orm";
import { SectionProps } from "deco/types.ts";
import type { AppContext } from "site/apps/deco/records.ts";
import { profiles } from "site/db/schema.ts";
import { useSection } from "deco/hooks/useSection.ts";
import Icon from "site/components/ui/Icon.tsx";

type ProfileInsert = typeof profiles.$inferInsert;
type ProfilesKeys = keyof ProfileInsert;
type ProfileValue<K extends keyof ProfileInsert> = ProfileInsert[K];

/**
 * Checa se `key` √© uma chave v√°lida do tipo profile.
 */
const isProfilePropKey = (
  key: string,
): key is ProfilesKeys => key in profiles.$inferInsert;

/**
 * Checa se `value` √© do mesmo tipo de profiles[key]
 */
const isProfilePropType = (
  key: ProfilesKeys,
  value: unknown,
): value is ProfileValue<typeof key> =>
  typeof value === typeof profiles.$inferInsert[key];

interface Props {
  mode?: "create" | "delete";
  email?: string;
}

export async function loader(
  { mode, email }: Props,
  req: Request,
  { invoke }: AppContext,
) {
  // Client do ORM drizzle
  const drizzle = await invoke.records.loaders.drizzle();

  // Se o mode for create e o request possuir body, ent√£o cria um profile novo
  if (mode === "create" && req.body) {
    const newProfile: Partial<typeof profiles.$inferInsert> = {};
    const formData = await req.formData();
    formData.forEach((value, key) =>
      isProfilePropKey(key) &&
      isProfilePropType(key, value) &&
      (newProfile[key] = value as any)
    );

    // Insere newProfile no banco de dados.
    await drizzle.insert(profiles).values(
      newProfile as typeof profiles.$inferInsert,
    );
  } // Se mode for delete e email for definido e n√£o vazio, ent√£o remova todos or perfis com este email.
  else if (mode === "delete" && email) {
    await drizzle.delete(profiles).where(eq(profiles.email, email));
  }

  // Seleciona todos os perfils do banco de dados, trazendo somenente email e nome.
  const profilesData = await drizzle.select({
    email: profiles.email,
    name: profiles.name,
  }).from(profiles);
  return { profiles: profilesData };
}

export default function ManageProfiles(
  { profiles = [] }: SectionProps<typeof loader>,
) {
  // Url da section, com a propriedade mode = create, ser√° utilizada para submit do form e cria√ß√£o de novo perfil.
  const createUrl = useSection<Props>({
    props: { mode: "create" },
  });
  return (
    <>
      <div>
        <form
          hx-post={createUrl}
          hx-trigger="click"
          hx-target="closest section"
          hx-swap="outerHTML"
          class="p-2 flex flex-col gap-2"
        >
          <div class="flex gap-2">
            <label for="name">Name</label>
            <input
              // propriedade name do profiles
              name="name"
              id="name"
              required
              class="border border-gray-300 rounded"
            />
          </div>

          <div class="flex gap-2">
            <label for="description">email</label>
            <input
              // propriedade email do profiles
              name="email"
              id="email"
              required
              class="border border-gray-300 rounded"
            />
          </div>

          <div>
            <button type="submit">Create</button>
          </div>
        </form>
      </div>

      <div class="divide-y divide-gray-300 p-2 w-fit">
        <h3>Members List</h3>
        {profiles.map((profile) => {
          // Url da section, com a propriedade mode = delete e email do perfil a ser removido, ser√° utilizada para submit do form e remo√ß√£o  do perfil.
          const profileDeleteUrl = useSection<Props>({
            props: { mode: "delete", email: profile.email ?? "" },
          });
          return (
            <div class="flex gap-2 items-center">
              <span>{profile.name}</span>
              <span>{profile.email}</span>
              <form
                hx-post={profileDeleteUrl}
                hx-trigger="click"
                hx-target="closest section"
                hx-swap="outerHTML"
                class="w-4 h-4"
              >
                <button type="submit" class="w-4 h-4">
                  <Icon id="Trash" size={16} />
                </button>
              </form>
            </div>
          );
        })}
      </div>
    </>
  );
}
```

No exemplo anterior, o inline loader que faz utiliza o cliente `drizzle`, que √©
fornecido pela app do records, e faz uma consulta no banco de dados, insere e
remove perfis.

## Desenvolvendo localmente

Para desenvolver localmente √© necess√°rio ter as credenciais de acesso ao banco
de dados, que pode ser criada no admin do seu site na deco. Ap√≥s ter adicionado
as vari√°veis de ambiente fornecidas pelo admin, execute a deno task
`db:pull:prod` para fazer um dump do seu banco de dados e em seguida, inserir no
banco de dados localmente no arquivo `sqlite.db`.

```sh
deno task db:pull:prod
```

Para acessar o banco do deco records durante o desenvolvimento, √© necess√°rio ter
as credenciais nas vari√°veis de ambiente, que podem ser criadas no admin da
deco. Al√©m das credenciais, precisa de uma nova vari√°vel de ambiente, chamada
`USE_PRODUCTION_DB` com valor `1`.

### Links referencia

* [drizzle-orm docs](https://orm.drizzle.team/docs/overview)
* [schema migrations](https://medium.com/@joelrodrigues/o-que-s%C3%A3o-database-migrations-f817448870a2)


# null
Source: https://docs.deco.cx/pt/developing-capabilities/interactive-sections/partial

Defira computa√ß√£o do navegador para o servidor

# Fresh Partials: Revolucionando o Desenvolvimento Web com Deno

Partials capacita os desenvolvedores a otimizar as intera√ß√µes na web,
descarregando determinadas tarefas do dispositivo do usu√°rio para os Servidores
Edge da Deco. Essa abordagem inovadora reduz significativamente a quantidade de
JavaScript necess√°ria para executar websites, resultando em tempos de
carregamento de p√°gina mais r√°pidos e melhores taxas de convers√£o.

## Introdu√ß√£o aos Partials

Partials, inspirados em [htmx](https://htmx.org/docs/), operam interceptando
intera√ß√µes do usu√°rio em elementos de bot√£o, √¢ncora e formul√°rio. Essas
intera√ß√µes s√£o automaticamente transferidas para nosso servidor, onde geram um
novo estado da Interface do Usu√°rio (UI). Esse novo estado fresco √© transmitido
como HTML puro de volta para o navegador do usu√°rio. Nosso tempo de execu√ß√£o
substitui e hidrata o novo estado da UI, criando a ilus√£o de interatividade do
lado do cliente. Na realidade, todo o processo de computa√ß√£o ocorre em
milissegundos em nossos Servidores Edge. Para obter informa√ß√µes mais detalhadas
sobre Partials, consulte a
[documenta√ß√£o](https://github.com/denoland/fresh/issues/1609) do Fresh.

## Simplificando o Desenvolvimento

Embora os Fresh Partials introduzam um novo dom√≠nio de otimiza√ß√£o de desempenho,
tamb√©m trazem complexidade adicional ao ciclo de desenvolvimento. Agora, os
desenvolvedores precisam considerar v√°rios modos de renderiza√ß√£o, seu impacto
nos tamanhos de pacote e HTML, lat√™ncias de intera√ß√£o e como navegar
corretamente em p√°ginas parcialmente renderizadas. Para simplificar esse
processo, a Deco integrou os Partials em uma camada de abstra√ß√£o mais alta do
nosso framework, eliminando a necessidade de os desenvolvedores lidarem com
essas complexidades.

## Usando Partials nas Section

Na Deco, todas as [Sections](https://deco.cx/docs/en/concepts/section) s√£o tratadas como
parciais. Isso significa que voc√™ pode incorporar facilmente interatividade do
lado do cliente em qualquer Section sem comprometer os tamanhos de pacote ou os
carregamentos iniciais da p√°gina. Isso √© especialmente ben√©fico para a cria√ß√£o
de componentes de IU comuns, como seletores de SKU, recursos de rolagem infinita
e abas. Nas Sections a seguir, vamos aprofundar como aproveitar todo o potencial
dos Partials criando um seletor de SKU super-r√°pido.

## Exemplo: Seletor de SKU

Os seletores de SKU permitem que os compradores explorem diferentes varia√ß√µes de
um produto, cada um com seu conjunto √∫nico de pre√ßos, imagens e disponibilidade.
Considere o exemplo a seguir:
![sku-selector](https://github.com/deco-sites/starting/assets/1753396/cdaca2fc-34cd-404b-8679-d159872f7faa)

Como demonstrado, a altera√ß√£o do SKU selecionado pode resultar em altera√ß√µes
significativas na p√°gina. Uma abordagem direta √© criar um sinal para armazenar o
SKU atualmente selecionado e atualiz√°-lo a cada clique:

```tsx
// sections/ProductDetails.tsx
export default function DetalhesDoProduto ({ skus }) {
  const skuSelecionado = useSignal(skus[0]);
  
  return (
    <div>
      <ImageSlider sku={skuSelecionado} />
      <ProductPrice sku={skuSelecionado}>

      Cor:
      <ul>
        <li>
          <button onClick={() => { skuSelecionado.value = skus[0] }}>Vermelho</button>
        </li>
        <li>
          <button onClick={() => { skuSelecionado.value = skus[1] }}>Azul</button>
        </li>
        <li>
          <button onClick={() => { skuSelecionado.value = skus[2] }}>Verde</button>
        </li>
      </ul>
    </div>
  )
}
```

No entanto, essa implementa√ß√£o tem uma desvantagem. Para habilitar a
interatividade, toda a Section, incluindo todos os dados de SKU e o c√≥digo do
componente, √© enviada para o navegador, resultando em um desempenho reduzido do
site.

> Observa√ß√£o: Se voc√™ isolar apenas os bot√µes como ilhas, a sele√ß√£o de um SKU
> n√£o atualizar√° seu pre√ßo ou imagem, levando a uma IU inconsistente.

Uma abordagem alternativa √© transformar os bot√µes em tags de √¢ncora, acionando
um novo carregamento de p√°gina a cada sele√ß√£o de SKU:

```tsx
// sections/ProductDetails.tsx
export default function DetalhesDoProduto ({ skus }) {
  return (
    <div>
      <ImageSlider sku={skuSelecionado} />
      <ProductPrice sku={skuSelecionado}>

      Cor:
      <ul>
        <li>
          <a href={skus[0].url}>Vermelho</a>
        </li>
        <li>
          <a href={skus[1].url}>Azul</a>
        </li>
        <li>
          <a href={skus[2].url}>Verde</a>
        </li>
      </ul>
    </div>
  )
}
```

Embora essa abordagem ofere√ßa um desempenho ideal, eliminando a necessidade de
ilhas, ela tem um custo em termos de experi√™ncia do usu√°rio (UX). A cada sele√ß√£o
de SKU, a p√°gina √© recarregada e o usu√°rio √© levado de volta ao topo da p√°gina.
Para encontrar um equil√≠brio entre UX e desempenho, vamos refatorar esse
componente usando Partials.

### Aprimorando UX e Desempenho com Partials

```tsx
// sections/ProductDetails.tsx
import { usePartialSection } from "deco/hooks/usePartialSection.ts";

export default function DetalhesDoProduto ({ skus }) {
  return (
    <div>
      <ImageSlider sku={skuSelecionado} />
      <ProductPrice sku={skuSelecionado}>

      Cor:
      <ul>
        <li>
          <button {...usePartialSection({ href: skus[0].url })}>Vermelho</button>
        </li>
        <li>
          <button {...usePartialSection({ href: skus[1].url })}>Azul</button>
        </li>
        <li>
          <button {...usePartialSection({ href: skus[2].url })}>Verde</button>
        </li>
      </

ul>
    </div>
  )
}
```

A m√°gica aqui est√° no gancho `usePartial` combinado com a tag `button`. Este
gancho aceita um par√¢metro `href` e aprimora a tag do bot√£o. Quando o usu√°rio
clica no bot√£o, ele desencadeia a navega√ß√£o do lado do cliente e aplica
atualiza√ß√µes de diferen√ßas de HTML. Essa abordagem elimina a necessidade de
ilhas, aumentando o desempenho, ao mesmo tempo em que mant√©m a posi√ß√£o de
rolagem para uma experi√™ncia do usu√°rio aprimorada.

## Exemplo: Abas

Embora tenhamos explorado como aproveitar os Partials para seletores de SKU, a
navega√ß√£o por abas apresenta um desafio √∫nico. As abas n√£o possuem URLs
can√¥nicos, tornando dif√≠cil gerenciar transi√ß√µes de estado. No entanto, o gancho
`usePartial` nos permite substituir as props que uma Section usa para
renderiza√ß√£o, simplificando o processo:

```tsx
import { usePartialSection } from "deco/hooks/usePartialSection.ts";

interface Props {
  activeIndex: number;
}

const SectionDeAbas = ({ activeIndex }) => {
  return (
    <div>
      <button
        class={activeIndex === 0 && "active"}
        {...usePartialSection<typeof SectionDeAbas>({
          props: { activeIndex: 0 },
        })}
      >
        Aba 1
      </button>
      <button
        class={activeIndex === 1 && "active"}
        {...usePartialSection<typeof SectionDeAbas>({
          props: { activeIndex: 1 },
        })}
      >
        Aba 2
      </button>
      <button
        class={activeIndex === 2 && "active"}
        {...usePartialSection<typeof SectionDeAbas>({
          props: { activeIndex: 2 },
        })}
      >
        Aba 3
      </button>
    </div>
  );
};
```

Neste exemplo, a prop `activeIndex` √© substitu√≠da a cada chamada de
`usePartialSection`, simplificando o uso de Partials e eliminando a necessidade
de gerenciar URLs e par√¢metros de pesquisa em nossas Sections.


# null
Source: https://docs.deco.cx/pt/developing-capabilities/islands/actions

Uma Action na deco.cx √© uma fun√ß√£o que modifica dados.

Uma **Action** no deco.cx √© uma fun√ß√£o em typescript que **modifica** dados
dentro da aplica√ß√£o. As **Action** s√£o acionadas por *intera√ß√µes* espec√≠ficas do
**usu√°rio** ou **eventos** e s√£o respons√°veis por atualizar o estado da
aplica√ß√£o de acordo. Ao contr√°rio dos **Loaders**, que buscam dados de fontes
externas, as **Action** concentram-se em modificar os dados j√° presentes na
aplica√ß√£o. Elas podem realizar opera√ß√µes como **atualiza√ß√£o**, **cria√ß√£o** ou
**exclus√£o** de dados com base na l√≥gica especificada. As **Action**
proporcionam *controle* preciso e flexibilidade sobre a muta√ß√£o de dados e
integram-se perfeitamente a outros blocos, como os **Loaders**, para permitir um
fluxo cont√≠nuo de dados na aplica√ß√£o.

As **Action**, assim como os **Loaders**, s√£o implementadas como fun√ß√µes em
typescript e est√£o localizadas na pasta `/actions/` do seu projeto. Elas podem
ser invocadas em resposta a intera√ß√µes do usu√°rio, envios de formul√°rios ou
qualquer outro gatilho definido. Ao encapsular a l√≥gica de muta√ß√£o de dados nas
**Action**, os desenvolvedores podem gerenciar e rastrear as altera√ß√µes feitas
no estado da aplica√ß√£o, proporcionando aos usu√°rios experi√™ncias din√¢micas e
interativas.

## C√≥digo de exemplo

Esta √© a implementa√ß√£o da Action `newsletter/subscribe.ts`:

```tsx
import { AppContext } from "../../mod.ts";

export interface Props {
  email: string;
  name?: string;
  page?: string;
  part?: string;
  campaign?: string;
}

const action = async (
  props: Props,
  _req: Request,
  ctx: AppContext,
): Promise<void> => {
  const { vcsDeprecated } = ctx;
  const form = new FormData();
  const {
    email,
    name = "",
    part = "newsletter",
    page = "_",
    campaign = "newsletter:opt-in",
  } = props;

  form.append("newsletterClientName", name);
  form.append("newsletterClientEmail", email);
  form.append("newsInternalPage", page);
  form.append("newsInternalPart", part);
  form.append("newsInternalCampaign", campaign);

  await vcsDeprecated["POST /no-cache/Newsletter.aspx"]({}, {
    body: form,
  });
};

export default action;
```

[Fonte](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/vtex/actions/newsletter/subscribe.ts#L1C1-L37C23)

## Leitura recomendada

* [Buscando dados de API](https://deco.cx/docs/pt/developing-guide/fetching-data)
* [Invocando fun√ß√µes atrav√©s da API](https://deco.cx/docs/pt/developing-capabilities/islands/fetching-data-client)


# null
Source: https://docs.deco.cx/pt/developing-capabilities/islands/fetching-data-client

Aprenda a invocar fun√ß√µes atrav√©s da API.

## Leitura sugerida

* [Conceitos b√°sicos: Loader](https://deco.cx/docs/pt/concepts/loader)
* [Conceitos b√°sicos: Action](https://deco.cx/docs/pt/concepts/action)

A Invoca√ß√£o de fun√ß√µes client-side √© um recurso poderoso do live.ts que permite
que voc√™ obtenha dados diretamente dos seus fun√ß√µes sem enviar JavaScript para o
navegador. Esse recurso garante que sua obten√ß√£o de dados seja √∫nica em todo o
seu reposit√≥rio e ajuda a reduzir a lat√™ncia do lado do cliente.

Para come√ßar a usar a Invoca√ß√£o de fun√ß√µes client-side, siga estes passos:

1. Importe o objeto `invoke` do arquivo `runtime.ts`

2. Agora voc√™ pode emitir invoca√ß√µes usando a fun√ß√£o `invoke`. Por exemplo, para
   buscar dados de uma fun√ß√£o, voc√™ usaria o seguinte c√≥digo:

> N√£o conseguiu achar esse arquivo?
> [Tente este](https://github.com/deco-sites/fashion/blob/main/runtime.ts)

```ts
import { invoke } from "../runtime.ts";
import { useCallback } from "preact/hooks";

export default function MyIsland() {

  const fetchData = useCallback(() => {
    const data = await invoke["deco-sites/minha-loja"].loaders.myLoader({/* your function input props */});
  }, [])

  return <div>
    {...}
    <button onClick={fetchData}>Load</button>
  </div>
}
```

Aqui, a fun√ß√£o `invoke` recebe um objeto com uma propriedade `key` que
especifica o caminho para sua fun√ß√£o e uma propriedade `props` que cont√©m suas
props de entrada da fun√ß√£o. Quando voc√™ chama `invoke`, o live.ts ir√° invocar
sua fun√ß√£o como faz para renderizar se√ß√µes e retorn√°-lo para voc√™ como um objeto
JavaScript. √â poss√≠vel tamb√©m chamar fun√ß√µes definidas em um App instalado no
projeto. Por exemplo,

```ts
const dataAppVtex = await invoke.vtex.loaders.vtexLoader({
  /* your function input props */
});
```

Voc√™ tamb√©m pode agrupar solicita√ß√µes passando um objeto com v√°rias chaves, cada
uma representando uma invoca√ß√£o desejada. Por exemplo:

```ts
const { data1, data2 } = await invoke({
  data1: invoke.path1({/* your function input props */}),
  data2: invoke.path2({/* your function input props */}),
});
```

Com esses passos, agora voc√™ pode come√ßar a usar a Invoca√ß√£o de fun√ß√µes
client-side em sua aplica√ß√£o Live.ts, happy coding!


# null
Source: https://docs.deco.cx/pt/developing-capabilities/loaders

Um Loader na deco.cx √© uma fun√ß√£o que retorna os dados necess√°rios para um Site.

Um **Loader** em *deco.cx* √© uma fun√ß√£o Typescript que retorna tipicamente os
dados necess√°rios em uma [Section](https://deco.cx/docs/pt/concepts/section). Essas fun√ß√µes s√£o
executadas antes da renderiza√ß√£o de cada p√°gina e seu principal objetivo √©
**buscar dados de fontes externas**, transform√°-los se necess√°rio e
**fornec√™-los √†s Se√ß√µes do site que precisam.** Os Loaders podem ser usados para
buscar dados de APIs, bancos de dados ou qualquer outra fonte externa. As
implementa√ß√µes locais de Loaders vivem na pasta `/loaders` do seu projeto, por√©m
√© poss√≠vel [Instalar novas apps](https://deco.cx/docs/pt/getting-started/installing-an-app) que
cont√©m outros loaders.

Al√©m de buscar dados, os Loaders na *deco.cx* **tamb√©m podem exportar um tipo de
Props Typescript**, o que permite que sejam configurados no
[Admin](https://deco.cx/admin) assim como as
[Sections](https://deco.cx/docs/pt/concepts/section). Isso significa que os usu√°rios de neg√≥cio
podem configurar detalhes sobre como o Loader ir√° operar, como **configurar
filtros** ou **passar par√¢metros para APIs.** Ao tornar os Loaders configur√°veis
dessa maneira, fica mais f√°cil gerenciar os dados que fluem para as Sections e
garantir que o Site esteja exibindo as informa√ß√µes corretas para os visitantes.

Outro benef√≠cio dos Loaders na *deco.cx* √© que **v√°rios loaders podem retornar o
mesmo tipo de dados**. Isso permite que as [Sections](https://deco.cx/docs/pt/concepts/section)
que recebem, por exemplo, um *array* de Produtos can√¥nico obtenham dados de
diferentes Loaders, dependendo da configura√ß√£o do usu√°rio. Isso significa que as
UIs podem ser reutilizadas em [Sites](https://deco.cx/docs/pt/concepts/site) ou entre times,
facilitando o gerenciamento e a escala do seu projeto.

> Todas as Sections para lojas de *ecommerce* criadas por *deco.cx* na
> [Fashion](https://github.com/deco-sites/fashion) usam um tipo de Produt
> can√¥nico e tamb√©m cada Loader que se conecta √†s APIs dos *ecommerce
> providers*. Isso significa que voc√™ pode reutilizar a mesma UI para mostrar
> dados de diferentes locais, dependendo da configura√ß√£o.

<Frame>
  <img width="1259" alt="image" src="https://user-images.githubusercontent.com/18706156/224897214-a45b2731-5799-4007-8084-a8a772ddf5d2.png" />
</Frame>

## C√≥digo de exemplo

Esta √© a implementa√ß√£o do Loader `shopify/loaders/ProductList.ts`:

```tsx
import type { Product } from "../../commerce/types.ts";
import { AppContext } from "../../shopify/mod.ts";
import { ListProducts } from "../utils/storefront/queries.ts";
import {
  ListProductsQuery,
  ListProductsQueryVariables,
} from "../utils/storefront/storefront.graphql.gen.ts";
import { toProduct } from "../utils/transform.ts";

export interface Props {
  /** @description search term to use on search */
  query: string;
  /** @description total number of items to display */
  count: number;
}

/**
 * @title Shopify Integration
 * @description Product List loader
 */
const loader = async (
  props: Props,
  _req: Request,
  ctx: AppContext,
): Promise<Product[] | null> => {
  const { storefront } = ctx;

  const count = props.count ?? 12;
  const query = props.query || "";

  const data = await storefront.query<
    ListProductsQuery,
    ListProductsQueryVariables
  >({
    variables: { first: count, query },
    ...ListProducts,
  });

  // Transform Shopify product format into schema.org's compatible format
  // If a property is missing from the final `products` array you can add
  // it in here
  const products = data?.products.nodes.map((p) =>
    toProduct(p, p.variants.nodes[0], new URL(_req.url))
  );

  return products ?? [];
};

export default loader;
```

[Fonte](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/shopify/loaders/ProductList.ts#L1)

## Leitura recomendada

* [Buscando dados de API](https://deco.cx/docs/pt/develping/fetching-data)
* [Invocando um loader atrav√©s da API](https://deco.cx/docs/pt/developing-capabilities/islands/fetching-data-client)


# null
Source: https://docs.deco.cx/pt/developing-capabilities/manage-block-access



# Gerenciando Acesso de Loaders/Actions

Por padr√£o, todos os loaders e actions no deco.cx s√£o publicamente acess√≠veis. No entanto, voc√™ pode precisar restringir o acesso a certos loaders/actions que lidam com opera√ß√µes sens√≠veis ou APIs privadas. Este guia explica como controlar a visibilidade de loaders/actions.

## Op√ß√µes de Visibilidade

Existem dois n√≠veis de visibilidade dispon√≠veis:

* `private`: Pode ser invocado apenas no lado do servidor atrav√©s do `ctx.invoke`
* `public`: Pode ser chamado tanto do servidor quanto do cliente atrav√©s de:
  * Chamadas `invoke` em tempo de execu√ß√£o
  * Acesso direto via path `/live/invoke/{path/to/block.ts}`

## Definindo Visibilidade Padr√£o

Para definir o n√≠vel de visibilidade de um loader/action, exporte uma vari√°vel `defaultVisibility`:

```typescript
// Torna o loader publicamente acess√≠vel
export const defaultVisibility = 'public'

// Torna o loader privado (apenas lado do servidor)
export const defaultVisibility = 'private'
```

## Sobrescrevendo Visibilidade

Voc√™ pode sobrescrever as configura√ß√µes de visibilidade padr√£o no seu arquivo `fresh.config.ts` usando a op√ß√£o `visibilityOverrides`:

```typescript
import { defineConfig } from "$fresh/server.ts";
import { plugins } from "deco/plugins/deco.ts";
import manifest from "./manifest.gen.ts";

export default defineConfig({
  plugins: plugins<typeof manifest>({
    manifest,
    htmx: true,
    visibilityOverrides: {
      "site/loaders/minicart.ts": "public",
      "vtex/loaders/cart.ts": "private"
    },
  }),
});
```

## Boas Pr√°ticas de Seguran√ßa

Ao decidir os n√≠veis de visibilidade:

### Use `private` para

* Acessar APIs privadas/internas
* Opera√ß√µes envolvendo credenciais ou segredos
* Processamento de dados sens√≠veis de usu√°rios/neg√≥cios
* Integra√ß√µes backend que requerem autentica√ß√£o

### Use `public` para

* Leitura de dados p√∫blicos de produtos
* Busca de conte√∫do p√∫blico
* Carregamento de dados no lado do cliente
* Opera√ß√µes voltadas ao usu√°rio que n√£o exp√µem dados sens√≠veis

## Documenta√ß√£o Relacionada

* [Buscando Dados](/docs/pt/developing-guide/fetching-data)
* [Carregamento de Dados no Cliente](/docs/pt/developing-capabilities/islands/fetching-data-client)
* [Conceitos Principais: Loaders](/docs/pt/concepts/loader)


# null
Source: https://docs.deco.cx/pt/developing-capabilities/modifying-status

Modificando o status de retorno de uma pagina

## Vis√£o Geral

A modifica√ß√£o do status de retorno permite que voc√™ informe ao navegador de
forma correta qual o retorno que esta sendo enviado na pagina com base em
qualquer criterio desejado. Isso garante uma melhor indexa√ß√£o por mecanismos de
pesquisa uma vez que, por exemplo, uma pagina n√£o encontrada com status correto
n√£o ser√° indexada por eles.

## Implementa√ß√£o

Para modificar o status de retorno de uma pagina a partir de uma se√ß√£o, siga
estes passos simples:

1. Crie um carregador inline dentro do componente da sua se√ß√£o.

```tsx
export default function MyComponent(props: Props) {
  // Sua l√≥gica de componente vai aqui
  // ...
}

export const loader = (props: Props, req: Request, ctx: AppContext) => {
  // Sua condi√ß√£o para a modifica√ß√£o de status
  if (SUA_CONDICAO_PARA_MODIFICAR_O_STATUS) {
    ctx.response.status = STATUS_DESEJADO;
  }

  // Retorne as props do componente
  return props;
};
```

2. Dentro da fun√ß√£o `loader`, defina a condi√ß√£o que determina se o status deve
   ser modificado. Se a condi√ß√£o for atendida, atribua o status desejado a
   resposta contida no contexto.

## Exemplo

Digamos que voc√™ deseje que se sua busca n√£o retornou nenhum elemento o retorno
da pagina seja `404 (Not Found)`:

```tsx
export default function MyComponent(props: Props) {
  // Sua l√≥gica de componente vai aqui
  // ...
}

export const loader = (props: Props, req: Request, ctx: AppContext) => {
  // Verifique se n√£o h√° nenhum elemento
  if (!props.items || !props.items.length) {
    ctx.response.status = 404;
  }

  // Retorne as props do componente
  return props;
};
```

Neste exemplo, se a propriedade `items` n√£o existir ou n√£o conter nenhum
elemento a se√ß√£o modificar√° o status de retorno de toda a pagina para `404`

## Lembre-se

* A se√ß√£o modificar√° o status de toda pagina em que estiver sendo chamada e que
  a condi√ß√£o for satisfeita.
* Use os codigos de status correto para cada situa√ß√£o para seu SEO n√£o ser
  afetado negativamente.


# null
Source: https://docs.deco.cx/pt/developing-capabilities/section-properties/annotations

Customize o comportamento do formul√°rio do Admin da Deco com annotations nas suas propriedades.

Customize o comportamento do formul√°rio do
[Admin da Deco](https://admin.deco.cx) com annotations nas suas propriedades.

Ao usar tipos nativos (number, string, etc.), o editor usar√° o nome da
propriedade como a *label* padr√£o do formul√°rio. Mas √© poss√≠vel personalizar
isso usando tags [JSDoc](https://jsdoc.app/).

* Exemplo:

```tsx
export interface Props {
  /** @title Numero de produtos */
  /** @description Total de produtos para mostrar na vitrine */
  count: number;
}
```

* Editor:

<Frame>
  <img src="https://deco.cx/docs/annotations/example.png" alt="Example" width="400" />
</Frame>

Lista com todas as annotations suportadas:

| Annotation          | Descri√ß√£o                                                                                                                                                                                                                                                                                                                                                                     | Uso                                                                                       |
| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `@title`            | Recebe texto que ser√° usado como t√≠tulo da label daquele input no formul√°rio.                                                                                                                                                                                                                                                                                                 | `@title N√∫mero de produtos`                                                               |
| `@description`      | Recebe texto que ser√° usado como descri√ß√£o na label daquele input no formul√°rio.                                                                                                                                                                                                                                                                                              | `@description Total de produtos para mostrar na vitrine`                                  |
| `@format`           | Configura um campo para ser formatado de forma diferente. Isso pode fazer com que seu [Widget](https://deco.cx/docs/pt/developing-capabilities/section-properties/widgets) mude.                                                                                                                                                                                              | `@format [Format value](#valores-poss√≠veis-para-o-format)`                                |
| `@hide`             | Esconde essa propriedade no formul√°rio do Admin. O valor continua presente no JSON da Section.                                                                                                                                                                                                                                                                                | `@hide true`                                                                              |
| `@ignore`           | O valor e a propriedade s√£o completamente ignorados.                                                                                                                                                                                                                                                                                                                          | `@ignore`                                                                                 |
| `@maximum`          | Configura um valor m√°ximo para aquele campo. Funciona em propriedades do tipo `number`. (valor \<= X)                                                                                                                                                                                                                                                                         | `@maximum 10`                                                                             |
| `@minimum`          | Configura um valor m√≠nimo para aquele campo. Funciona em propriedades do tipo `number`. (valor >= X)                                                                                                                                                                                                                                                                          | `@minimum 15`                                                                             |
| `@exclusiveMaximum` | Configura um valor m√°ximo para aquele campo. Funciona em propriedades do tipo `number`. √â a contraparte exclusiva do `@maximum`. (valor \< X)                                                                                                                                                                                                                                 | `@exclusiveMaximum 10`                                                                    |
| `@exclusiveMinimum` | Configura um valor m√≠nimo para aquele campo. Funciona em propriedades do tipo `number`. √â a contraparte exclusiva do `@minimum`. (valor > X)                                                                                                                                                                                                                                  | `@exclusiveMinimum 15`                                                                    |
| `@maxLength`        | Configura um tamanho m√°ximo para o texto de um campo. Funciona em propriedades do tipo `string`.                                                                                                                                                                                                                                                                              | `@maxLength 30`                                                                           |
| `@minLength`        | Configura um tamanho m√≠nimo para o texto de um campo. Funciona em propriedades do tipo `string`.                                                                                                                                                                                                                                                                              | `@minLength 8`                                                                            |
| `@readOnly`         | Faz com que um campo n√£o possa ser editado no formul√°rio de admin, mas possa ser lido.                                                                                                                                                                                                                                                                                        | `@readOnly`                                                                               |
| `@uniqueItems`      | Faz com que campos do tipo `array` n√£o possam ter valores duplicados.                                                                                                                                                                                                                                                                                                         | `@uniqueItems true`                                                                       |
| `@maxItems`         | Faz com que campos do tipo `array` n√£o possam ter mais que X valores.                                                                                                                                                                                                                                                                                                         | `@maxItems 3`                                                                             |
| `@minItems`         | Faz com que campos do tipo `array` n√£o possam ter menos que X valores.                                                                                                                                                                                                                                                                                                        | `@minItems 2`                                                                             |
| `@default`          | Configura um valor padr√£o para aquele campo. Funciona somente com tipos primitivos.                                                                                                                                                                                                                                                                                           | `@default Testando`                                                                       |
| `@deprecated`       | Marca um campo como descontinuado.                                                                                                                                                                                                                                                                                                                                            | `@deprecated vamos remover esse campo na pr√≥xima atualiza√ß√£o`                             |
| `@options`          | √â necess√°rio para o funcionamento das widgets [dynamic options](https://deco.cx/docs/pt/developing-capabilities/section-properties/widgets#dynamic-options), [button group](https://deco.cx/docs/pt/developing-capabilities/section-properties/widgets#button-group) e [icon select](https://deco.cx/docs/pt/developing-capabilities/section-properties/widgets#icon-select). | `@options deco-sites/minhaloja/loaders/produtos.ts`                                       |
| `@language`         | Usado em conjunto com `@format code`, para definir a linguagem do editor.                                                                                                                                                                                                                                                                                                     | `@language javascript`                                                                    |
| `@aiContext`        | Usado para definir o contexto do campo, melhorando as sugest√µes por Intelig√™ncia Artifical.                                                                                                                                                                                                                                                                                   | `@aiContext Sugira um t√≠tulo chamativo para uma prateleira, relacionado ao mundo Fashion` |

## Valores poss√≠veis para o @format

* `@format color`: Renderiza um input de cor no lugar de um de texto.

<Frame>
  <img src="https://deco.cx/docs/annotations/color2.png" alt="@format color example" width="300" />
</Frame>

* `@format date`: Renderiza um input de data no lugar de um de texto.

<Frame>
  <img src="https://deco.cx/docs/annotations/date.png" alt="@format date example" width="300" />
</Frame>

* `@format html`: Renderiza um input que abre um Editor WYSIWYG para edi√ß√£o
  avan√ßada do texto por html.

<Frame>
  <img src="https://deco.cx/docs/widgets/html-open.png" alt="@format html example" width="300" />
</Frame>

* `@format dynamic-options`:
  [Ler sobre aqui](https://deco.cx/docs/pt/developing-capabilities/section-properties/widgets#dynamic-options).

# Templates em annotations com Mustache

Nossas annotations tamb√©m suportam templating, atrav√©s do
[Mustache](https://mustache.github.io/).

Para utiliz√°-las, √© bem simples:

```ts
/**
 * @title {{{nome}}}
 */
interface Pessoa {
  nome: string;
}

export interface Props {
  pessoas: Pessoa[];
}
```

Resultado no Admin:

<Frame>
  <img src="https://deco.cx/docs/annotations/mustache.png" alt="mustache example" width="300" />
</Frame>


# null
Source: https://docs.deco.cx/pt/developing-capabilities/section-properties/standard-data-types

Aprenda como criar componentes universais para que possam ser usados em qualquer lugar

Componentes universais s√£o componentes que n√£o dependente de uma *fonte*
espec√≠fica de dado para determinar seu comportamento. A √∫nica coisa que lhes
importa √© o `formato` do dado, isso geralmente acontece quando o componente √©
feito para ser usado em v√°rios lugares diferentes (inclusive h√° possibilidade
entre usa-lo entre sites distintos) sem que seja necess√°rio ler de alguma API
espec√≠fica, ou seja, sem nenhuma depend√™ncia externa (a.k.a implicit
dependency).

Um exemplo de um componente universal √© a
[ProductShelf da loja Fashion](https://github.com/deco-sites/fashion/blob/main/components/product/ProductShelf.tsx#L15),
vamos dar uma olhada nele;

```tsx
export interface Props {
  title: string;
  products: Product[] | null;
  itemsPerPage?: number;
}

function ProductShelf({
  title,
  products,
}: Props) {
  // ...implementation
}
```

Perceba que, apesar da ProductShelf depender de uma lista de "Product" pra
funcionar, ela n√£o depende de qual √© a fonte do dado que vai prover essa
informa√ß√£o. Isso s√≥ √© poss√≠vel porque o tipo `Product` √© um tipo criado por uma
entidade central no `schema.org`. Uma outra forma poss√≠vel de pensar nossa
ProductShelf seria escrever um
[Inline Loader](https://deco.cx/docs/pt/developing-guide/fetching-data) e fazer com que esse
inline loader leia os dados da API de um e-commerce em espec√≠fico (e.g Shopify)
e s√≥ ent√£o renderizar a ProductShelf.

Isso √© totalmente poss√≠vel e fact√≠vel, no entanto, deve-se atentar que quando
isso √© feito, o nosso usu√°rio de neg√≥cio perde a possibilidade de, por exemplo,
trocar a fonte de dados de Shopify para VTEX, o que √© uma feature bastante
poderosa para evitar lock-in em uma plataforma especifica. Nesse sentido, um
component universal faz com que as dependencias nos tipo sejam invertidas, ao
inv√©s do componente depender da API, na verdade o componente depende apenas do
`formato` do dado e permite com que `loaders` sejam implementados de forma a
retornarem esse tipo em comum, fazendo com que seja poss√≠vel escolher o dado
loader ao configurar as propriedades do componente no Editor Admin.

<Frame>
  <img width="699" alt="image" src="https://user-images.githubusercontent.com/5839364/230793613-5671c042-99ef-469e-be5c-6503be3b6889.png" />
</Frame>

De fato, nossa ProductShelf possui ao menos quatro implementa√ß√µes distintas para
ler produtos de APIs e at√© mesmo plataformas de e-commerce distintas, s√£o elas:
[VNDAProductList](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/vnda/loaders/productList.ts#L1),
[VTEXProductList](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/vtex/loaders/intelligentSearch/productList.ts#L1),
[VTEXLegacyProductList](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/vtex/loaders/legacy/productList.ts#L1),
It is
[ShopifyProductList](https://github.com/deco-cx/apps/blob/3e337b6b2996d7ecd72db34174896638c92f8811/shopify/loaders/ProductList.ts#L1)

Isso faz com que Universal Components sejam algo que tem um valor e usabilidade
muito grande comparado a componentes que dependem de dados de APIs!

## Leitura sugerida

Componentes universais faz com que a interoperabilidade entre plataformas seja
poss√≠vel e o mais f√°cil poss√≠vel. Leia mais sobre como criar loaders abaixo nos
nossos tutoriais;

* [Carregando dados de uma API](https://deco.cx/docs/pt/developing-guide/fetching-data)
* [Conceitos b√°sicos: Loaders](https://deco.cx/docs/pt/concepts/loader)


# null
Source: https://docs.deco.cx/pt/developing-capabilities/section-properties/using-secrets

Utilizando Secrets em Sites Deco

# Utilizando Secrets em Sites Deco

secrets s√£o uma funcionalidade poderosa em sites deco que permitem armazenar
informa√ß√µes sens√≠veis com seguran√ßa, como chaves de API ou senhas. Ao utilizar
secrets, voc√™ pode gerenciar e proteger facilmente os dados confidenciais do seu
site.

## Pr√©-requisitos

Antes de come√ßar, verifique se voc√™ possui o seguinte:

* Um projeto de site deco configurado.
* Compreens√£o sobre props e loaders no deco.

## Passo 1: Declarando um Prop de secret

Para usar secrets no seu site, voc√™ precisa declarar um prop de secret nos seus
componentes. Aqui est√° um exemplo de como fazer isso em uma se√ß√£o usando um
inline loader:

```tsx
import { Secret } from "apps/website/loaders/secret.ts";

export interface Props {
  secret: Secret;
}

export const loader = async (props: Props) => {
  const secretValue = props?.secret?.get();
  // Use o secret aqui
};
```

Neste exemplo, o prop `secret` √© declarado na interface `Props`. A fun√ß√£o
`loader` recupera o valor do secret usando o m√©todo `get()` e, em seguida, voc√™
pode usar o secret no seu c√≥digo.

## Passo 2: Configurando secrets

Ap√≥s declarar o prop de secret, os usu√°rios podem configurar secrets para o seu
site. No entanto, observe que a configura√ß√£o de secrets apontando para
`localhost` n√£o funcionar√°. Voc√™ deve apontar para o dom√≠nio de produ√ß√£o, o que
significa que voc√™ precisa de pelo menos um deployment declarando a depend√™ncia
do secret.

> Importante: Uma vez que o Secret for configurado, o valor original dele n√£o √©
> revelado na UI do Admin, ou seja, voc√™ precisa ter acesso ao segredo para
> saber o valor original dele.

## Passo 3: Lidando com o Desenvolvimento Local

Ao desenvolver localmente, um secret tem um "nome" na interface do admin. Esse
nome pode ser preenchido como uma vari√°vel de ambiente, que ser√° usada
localmente em vez da chave real usada em produ√ß√£o.

Importante: Voc√™ pode setar uma vari√°vel de ambiente passando o valor dela antes
de rodar o commando final, por exemplo:

```sh
ENV_VAR=mysecretvalue deno task start
```

Isto far√° com que o valor de `ENV_VAR` (que deve ser o nome da sua secret) seja
`mysecretvalue` quando usada localmente.


# null
Source: https://docs.deco.cx/pt/developing-capabilities/section-properties/utility-types

Sections podem ser codificadas por desenvolvedores e configuradas por usu√°rios de neg√≥cio no Admin. Aprenda todas as suas capacidades.

## Leitura sugerida

* [Conceitos: Section](https://deco.cx/docs/pt/concepts/section)
* [Codificando uma nova Section](https://deco.cx/docs/pt/developing-guide/hello-world)

Voc√™ j√° sabe que √© f√°cil criar uma [Section](https://deco.cx/docs/pt/concepts/section)
configur√°vel na *deco.cx*. Neste post vamos detalhar todas as formas poss√≠veis
de declarar os types das `props` e como isso afeta o formul√°rio que renderizamos
no Admin da *deco.cx*.

## Personalizando Sections

As Sections, como componentes [Preact](https://preactjs.org), aceitam `props`
como seus primeiro argumento e usam esses valores em seus *markups* para exibir
textos, imagens ou configurar algum comportamento.

Normalmente, essas `props` s√£o passadas a partir de outro componente, mas quando
voc√™ usa *deco.cx* **essas props s√£o configuradas no Admin**, o que facilita
usu√°rios de neg√≥cios alterarem o conte√∫do em seus Sites.

Para declarar como essas `props` ser√£o configuradas voc√™ usa o **Typescript
type**, especificando quais props e seus respectivos tipos como `string`,
`number`, `Array<T>`, etc.

*Exemplo:*

* Configura√ß√£o de Section em um site *deco.cx*.

```tsx
interface Props {
  t√≠tulo: string;
}

export default function LatestPosts({ title }: Props) {
  return (
    <div>
      <h1 class="font-bold">{title}</h1>
      <p>Esta √© uma Section de exemplo</p>
    </div>
  );
}
```

* Como fica o editor no Admin:

<Frame>
  <img width="640" alt="Formul√°rio da Section no Admin" src="https://deco.cx/docs/dev-capabilities/utility-types/section-form.png" />
</Frame>

## Tipos suportados

O editor aceita um subconjunto de tipos Typescript para configura√ß√£o da Section.
Esta √© a lista de tipos suportados atualmente:

### Tipos nativos

#### string

```ts
export interface Props {
  title: string;
}
```

#### number

```ts
export interface Props {
  lineNumber: n√∫mero;
}
```

#### object

```ts
export interface Props {
  address: {
    street: string;
    postalCode: string;
  };
}
```

#### array

```ts
export default {
   menuItems: Array<{ label: string; value: string }>;
}
```

#### string options

```ts
export interface Props {
  variant: "primary" | "secondary" | "tertiary";
}
```

### Tipos Especiais

#### Imagem

Este tipo renderiza um *widget* de upload de imagem no editor, possibilitando os
usu√°rios **fazer upload de imagens**.

O tipo √© um *wrapper* para `string`, ent√£o a Section receber√° a URL da imagem
hospedada nos servidores da *deco.cx*.

**Opcional:** A *deco.cx* fornece um componente que otimiza o carregamento da
imagens e pode ser usado em conjunto com esta propriedade.

Exemplo:

```tsx
import type { ImageWidget as Image } from "apps/admin/widgets.ts";

export interface props {
  bannerImg: Image;
}
```

#### V√≠deo

Semelhante √† Imagem, as propriedades com este tipo ser√£o editadas atrav√©s de um
*widget* com a possibilidade de upload de v√≠deos.

[Exemplo de uso aqui](https://github.com/deco-sites/fashion/blob/e15a0320fe9e0b7503eb4723f7c230b23886c2b5/sections/VideoCarousel.tsx#L3).

```ts
import type { VideoWidget as Video } from "apps/admin/widgets.ts";

export interface props {
  myVideo: Video;
}
```

### Enriquecendo o editor

Ao usar tipos nativos, o editor usar√° o nome do prop como a *label* padr√£o do
formul√°rio. Mas √© poss√≠vel personalizar isso usando tags
[JSDoc](https://jsdoc.app/).

* Exemplo: C√≥digo da Section:

```tsx
export interface props {
  /** @title Numero de produtos */
  /** @description Total de produtos para mostrar na vitrine */
  count: number;
}
```

* Editor:

<Frame>
  <img width="640" alt="Formul√°rio da Section com label e descri√ß√£o costumizadas" src="https://deco.cx/docs/dev-capabilities/utility-types/label-and-description.png" />
</Frame>

As tags dispon√≠veis s√£o os campos compat√≠veis com
[JSON Schema](https://json-schema.org/), ou seja, `@title`, `@description`,
`@format` entre outros. Por exemplo, para aceitar apenas e-mails:

```tsx
export interface props {
  /** @format email */
  color: string;
}
```

Outros tipos de formatos v√°lidos s√£o: `uri`, `color`. Voc√™ pode ler mais sobre
isso
[na documenta√ß√£o de Annotations](https://deco.cx/docs/pt/developing-capabilities/section-properties/annotations).


# null
Source: https://docs.deco.cx/pt/developing-capabilities/section-properties/widgets

Lista de widgets dispon√≠veis no Admin da Deco.

Widgets s√£o componentes que aparecem no formul√°rio do
[Admin da Deco](https://admin.deco.cx) de forma correspondente as propriedades
de um [Bloco](https://deco.cx/docs/pt/concepts/block). Aqui est√° uma lista dos Widgets
existentes:

## TextArea

<Frame>
  <img src="https://deco.cx/docs/widgets/textarea.png" alt="Exemplo textarea" width="400" />
</Frame>

Este Widget renderiza um campo de texto especial. Basta utilizar o tipo
TextArea. Exemplo:

```ts
import { TextArea } from "apps/admin/widgets.ts";

export interface Props {
  context: TextArea;
}
```

## CheckBox

<Frame>
  <img src="https://deco.cx/docs/widgets/checkbox.png" alt="Exemplo checkbox" height="200" />
</Frame>

Este widget √© renderizado para campos do tipo `boolean`. Exemplo:

```ts
export interface Props {
  showTopbar: boolean;
}
```

## ImageUri

<Frame>
  <img src="https://deco.cx/docs/widgets/image.png" alt="Exemplo image" width="400" />
</Frame>

Este widget √© renderizado para campos do tipo `ImageWidget`. Este tipo pode ser
importado de `deco-cx/apps`. Exemplo:

```ts
import { ImageWidget as Image } from "apps/admin/widgets.ts";

export interface Props {
  imagem: Image;
}
```

## VideoUri

<Frame>
  <img src="https://deco.cx/docs/widgets/video.png" alt="Exemplo video" width="400" />
</Frame>

Este widget √© renderizado para campos do tipo `VideoWidget`. Este tipo pode ser
importado de `deco-cx/apps`. Exemplo:

```ts
import { VideoWidget as Video } from "apps/admin/widgets.ts";

export interface Props {
  video: Video;
}
```

## Section

<Frame>
  <img src="https://deco.cx/docs/widgets/section.png" alt="Exemplo section" width="400" />
</Frame>

O widget `Section` √© utilizado para criar Sections que podem receber outras
Sections como propriedades. Funciona de forma bem similar a receber outros
componentes por props.

Ao utilizar este campo, voc√™ pode selecionar qualquer Section do seu projeto. O
formul√°rio renderizado nesta widget toma forma do mesmo formul√°rio que seria
renderizado para a Section que foi selecionada.

Este widget √© renderizado para campos do tipo `Section`. Este tipo pode ser
importado de `deco-cx/apps`. Exemplo:

```ts
import { Section } from "deco/blocks/section.ts";

export interface Props {
  innerSection: Section;
}
```

## Select

<Frame>
  <img src="https://deco.cx/docs/widgets/select.png" alt="Exemplo select" width="300" />
</Frame>

O widget Select √© empregado para criar listas suspensas ou menus de op√ß√µes,
proporcionando aos usu√°rios a capacidade de escolher entre diferentes
alternativas. Esse widget √© renderizado para campos cujo tipo √© uma
[Union](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types)
do Typescript. Exemplo:

```ts
export interface Props {
  layout: "Grid" | "Table" | "List";
}
```

## HTML

<Frame>
  <img src="https://deco.cx/docs/widgets/html-open.png" alt="Exemplo html" width="600" />
</Frame>

O widget HTML √© renderizado para campos do tipo `HTMLWidget`. Este widget
permite a edi√ß√£o do conte√∫do de seu campo atrav√©s de um
[Editor WYSIWYG (What You See Is What You Get)](https://tecnoblog.net/responde/o-que-e-um-editor-wysiwyg/).
Este tipo pode ser importado de `deco-cx/apps`. Exemplo:

```ts
import { HTMLWidget as HTML } from "apps/admin/widgets.ts";

export interface Props {
  content: HTML;
}
```

## RichText

<Frame>
  <img src="https://deco.cx/docs/widgets/rich-text.png" alt="Exemplo rich text" width="600" />
</Frame>

O widget RichText representa texto formatado com suporte para v√°rias op√ß√µes de
estilos e formata√ß√£o. Este widget permite que os desenvolvedores incluam
conte√∫do de texto que pode ter diferentes fontes, tamanhos, cores e outros
estilos de formata√ß√£o aplicados.

```ts
import { RichText } from "apps/admin/widgets.ts";

export interface Props {
  content: RichText;
}
```

## Secret

<Frame>
  <img src="https://deco.cx/docs/widgets/secret.png" alt="Exemplo secret" width="400" />
</Frame>

O widget Secret √© destinado a campos sens√≠veis, como senhas, e garante que o
conte√∫do seja encriptado para proteger informa√ß√µes confidenciais. Ele √©
renderizado para campos do tipo `Secret`. Este tipo pode ser importado de
`deco-cx/apps`. Exemplo:

```ts
import { Secret } from "apps/website/loaders/secret.ts";

export interface Props {
  password: Secret;
}
```

## Dynamic Options

Este widget √© especialmente √∫til quando as op√ß√µes dispon√≠veis em um campo
dependem de dados din√¢micos. Ele exibe em sua interface o mesmo que o
[Select](#select), por√©m suas op√ß√µes podem ser carregadas dinamicamente de outra
prop ou via loader!

Exemplo 1:

`MySection.tsx`

```ts
export interface Props {
  names: string[];
  /**
   * @format dynamic-options
   * @options {{{names}}}
   */
  name: string;
}
```

Exemplo 2:

`MinhaSection.tsx`

```ts
export interface Props {
  /**
   * @format dynamic-options
   * @options deco-sites/minhaloja/loaders/produtos.ts
   */
  produto: string;
}
```

`minhaloja/loaders/produtos.ts`

```ts
import { allowCorsFor, FnContext } from "deco/mod.ts";

interface Props {
  term?: string;
}

export default function ProductsLoader(
  props: Props,
  req: Request,
  ctx: FnContext,
) {
  // Allow Cors
  Object.entries(allowCorsFor(req)).map(([name, value]) => {
    ctx.response.headers.set(name, value);
  });

  // fetch X api
  const products = ["Product X", "Product Y", "Product Z"];

  return products.filter((p) => p.includes(props.term));
}
```

Perceba que o seu loader pode receber um `term`, isso vai se comportar como uma
busca.

## Color Input

O widget Color Input exibe um c√≠rculo preenchido representando a cor selecionada
juntamente com seu valor hexadecimal correspondente. Os usu√°rios podem interagir
com o widget clicando nele para abrir um seletor de cores. Valor padr√£o: "#000".

<Frame>
  <img src="https://deco.cx/docs/widgets/color-input.png" alt="Example color input" width="400" />
</Frame>

Exemplo:

`MySection.tsx`

```ts
import { Color } from "apps/admin/widgets.ts";

export interface Props {
  "primary"?: Color;
}
```

## Code

O Widget Code exibe um Editor de c√≥digo.

Utilize os tipos `CSS`, `TypeScript` ou `Json`. Exemplo:

```ts
import { CSS, Json, TypeScript } from "apps/admin/widgets.ts";

export interface Props {
  myCSSCode?: CSS;
  myTSCode?: TypeScript;
  myJsonCode?: Json;
}
```

![Code Widget](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/084fffc4-5a1c-47c2-ac8e-88a1c4829864)

## Button Group

O widget Button Group permite que voc√™ renderize op√ß√µes de sele√ß√£o em um formato
de √≠cone, fornecendo uma maneira visualmente atraente de escolher op√ß√µes. Cada
op√ß√£o √© representada por um √≠cone, oferecendo flexibilidade e personaliza√ß√£o
para sua aplica√ß√£o.

<Frame>
  <img src="https://deco.cx/docs/widgets/button-group.png" alt="Example button group" width="400" />
</Frame>

Exemplo:

`MySection.tsx`

```ts
export interface Props {
  /**
   * @format button-group
   * @options site/loaders/icons.ts
   */
  textAlignment?: "Left" | "Center" | "Right";
}
```

Para garantir que os √≠cones estejam dispon√≠veis para sele√ß√£o no widget, √©
essencial que cada √≠cone seja definido explicitamente como uma string SVG em
`static/adminIcons.ts` e exportado como uma constante:

`mystore/static/adminIcons.ts`

```ts
// adminIcons.ts cont√©m todos os √≠cones dispon√≠veis necess√°rios para renderizar o widget, em um formato de string.
export const AlignLeft =
  `<svg id="AlignLeft" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
<path ... />
</svg>`;
```

`mystore/loaders/icons.ts`

```ts
import { allowCorsFor, FnContext } from "deco/mod.ts";
// Importe √≠cones em formato de string
import { AlignCenter, AlignLeft, AlignRight } from "../static/adminIcons.ts";

// Defina √≠cones com seus labels e props correspondentes conforme definido na sua interface Props
const icons = [
  { component: AlignLeft, label: "Left", prop: "textAlignment" },
  { component: AlignCenter, label: "Center", prop: "textAlignment" },
  { component: AlignRight, label: "Right", prop: "textAlignment" },
];

// Loader para mapear √≠cones para o formato esperado pelo widget Button Group
export default function IconsLoader(
  _props: unknown,
  req: Request,
  ctx: FnContext,
) {
  Object.entries(allowCorsFor(req)).map(([name, value]) => {
    ctx.response.headers.set(name, value);
  });

  const iconsMap = icons.map((icon) => ({
    value: icon.component,
    label: icon.label,
    prop: icon.prop,
  }));

  return iconsMap;
}
```

## Icon Select

O widget Icon Select permite criar um seletor de entrada para √≠cones, onde cada
op√ß√£o consiste em um √≠cone e sua etiqueta. Isso permite aos usu√°rios visualizar
e escolher facilmente o √≠cone certo. Todos os √≠cones renderizados no widget
devem ser definidos explicitamente como strings SVG.

<Frame>
  <img src="https://deco.cx/docs/widgets/icon-select.png" alt="Example icon select" width="400" />
</Frame>

Exemplo:

`MySection.tsx`

```ts
export interface Props {
  /**
   * @format icon-select
   * @options deco-sites/storefront/loaders/availableIcons.ts
   */
  icon: AvailableIcons;
}
```

Para garantir que todos os √≠cones sejam devidamente integrados e selecion√°veis
em nosso widget, cada √≠cone do seu arquivo `static/sprites.svg` deve ser
explicitamente definido como uma string SVG e exportado de um arquivo separado,
`static/adminIcons.ts`. N√≥s simplificamos esse processo com o script
`generate-icons.ts` no template da loja Deco, que automatiza a convers√£o dos
√≠cones de `sprites.svg` para o formato de string e os grava em `adminIcons.ts`.

Para adicionar novos √≠cones, basta inseri-los no seu `sprites.svg`. Em seguida,
interrompa a execu√ß√£o do projeto e reinicie-o usando `deno task run`. Isso
aciona o script `generate-icons.ts`, atualizando o arquivo `adminIcons.ts` com
os novos √≠cones, tornando-os imediatamente dispon√≠veis para sele√ß√£o no widget.
Essa abordagem centraliza as atualiza√ß√µes de √≠cones em `sprites.svg`, garantindo
um processo de atualiza√ß√£o suave.

Esteja ciente de que, se um √≠cone n√£o foi gerado como uma string em
static/adminIcons.ts, ele n√£o ser√° exibido como uma op√ß√£o no seletor.

`mystore/loaders/availableIcons.ts`

```ts
import { allowCorsFor, FnContext } from "deco/mod.ts";
import { AvailableIcons } from "../static/adminIcons.ts";

const icons = Object.keys(AvailableIcons).map((iconName) => ({
  component: AvailableIcons[iconName as keyof typeof AvailableIcons],
  label: iconName,
}));

// Loader para mapear todos os √≠cones dispon√≠veis que ser√£o usados nos widgets IconSelect.
export default function IconsLoader(
  _props: unknown,
  req: Request,
  ctx: FnContext,
) {
  // Permitir Cors
  Object.entries(allowCorsFor(req)).map(([name, value]) => {
    ctx.response.headers.set(name, value);
  });

  // Mapeamento de √≠cones para { value, label, icon }
  const iconsMap = icons.map((icon) => ({
    icon: icon.component,
    label: icon.label,
    value: icon.label,
  }));

  return iconsMap;
}
```


# null
Source: https://docs.deco.cx/pt/developing-capabilities/sections/accept-a-section

Aceitando Outras Se√ß√µes como Par√¢metros em Sua Se√ß√£o

# Aceitando Outras Se√ß√µes como Par√¢metros em Sua Se√ß√£o

No deco, voc√™ pode criar [Se√ß√µes](https://deco.cx/docs/pt-br/concepts/section) poderosas e
flex√≠veis ao aceitar outras se√ß√µes como par√¢metros. Isso permite que voc√™
construa componentes modulares e compon√≠veis que podem ser facilmente
personalizados e reutilizados em diferentes contextos.

## Vis√£o Geral

Ao criar uma Se√ß√£o que aceita outras se√ß√µes como par√¢metros, voc√™ define uma
interface para as props do seu componente de Se√ß√£o. Essa interface inclui uma
propriedade com o nome da sua escolha, que √© do tipo `Section`. O tipo `Section`
√© um tipo gen√©rico que representa qualquer outra se√ß√£o no deco.

## Implementa√ß√£o

Para criar uma Se√ß√£o que aceita outras Se√ß√µes como par√¢metros, siga estas
etapas:

1. Importe o tipo `Section` de `deco/blocks/section.ts`.

2. Defina uma interface para as props do seu componente de se√ß√£o. Inclua uma
   propriedade com nome de sua escolha, que √© do tipo `Section`.

```tsx
// MySection.tsx

import { Section } from "deco/blocks/section.ts";

export interface Props {
  myProp: Section;
}

export default function MySection({ myProp: { Component, props } }: Props) {
  return (
    <div>
      <Component {...props} />
    </div>
  );
}
```

3. Dentro do seu componente de se√ß√£o, acesse as propriedades `Component` e
   `props` da prop `myProp`. A propriedade `Component` representa a fun√ß√£o do
   componente da se√ß√£o passada como par√¢metro, e a propriedade `props` cont√©m as
   props dessa se√ß√£o.

## Exemplo

Digamos que voc√™ tenha uma se√ß√£o chamada `ProductCardSection` que renderiza um
cart√£o de produto com base em algumas props:

```tsx
// ProductCardSection.tsx

export interface Props {
  title: string;
  price: number;
  imageUrl: string;
}

export default function ProductCardSection({ title, price, imageUrl }: Props) {
  return (
    <div>
      <Frame><img src={imageUrl} alt={title} /></Frame>
      <h3>{title}</h3>
      <p>{price}</p>
    </div>
  );
}
```

Agora, voc√™ deseja criar uma se√ß√£o de ordem superior chamada
`ProductContainerSection`, que aceita uma `ProductCardSection` como par√¢metro e
a envolve em um cont√™iner:

```tsx
// ProductContainerSection.tsx

import { Section } from "deco/blocks/section.ts";

export interface Props {
  myProp: Section;
}

export default function ProductContainerSection(
  { myProp: { Component, props } }: Props,
) {
  return (
    <div className="flex gap-4">
      <Component {...props} />
    </div>
  );
}
```

Com essa configura√ß√£o, agora voc√™ pode usar `ProductContainerSection` para
envolver qualquer outra se√ß√£o, incluindo `ProductCardSection`, e adicionar um
cont√™iner ao redor dela.

Agora, suponha que voc√™ queira restringir sua se√ß√£o a `ProductCard` porque tem
muitas se√ß√µes em seu site, mas apenas essa deve se encaixar nesse local, voc√™
pode fazer o seguinte:

```tsx
// ProductCardSection.tsx

import { JSX } from "preact";

// Defina um tipo nomeado, por exemplo, "ProductCard," apontando para `JSX.Element`
export type ProductCard = JSX.Element;

// Defina a interface de props
export interface Props {
  title: string;
  price: number;
  imageUrl: string;
}

// Implemente a se√ß√£o e especifique o tipo de retorno como "ProductCard"
export default function ProductCardSection(
  { title, price, imageUrl }: Props,
): ProductCard {
  return (
    <div>
      <Frame><img src={imageUrl} alt={title} /></Frame>
      <h3>{title}</h3>
      <p>{price}</p>
    </div>
  );
}
```

Agora, voc√™ pode depender diretamente de `ProductCard`:

```tsx
// ProductContainerSection.tsx

import { Section } from "deco/blocks/section.ts";
import { ProductCard } from "./ProductCardSection.tsx";

// Especifique a interface de propriedades com `Section<ProductCard>`
export interface Props {
  myProp: Section<ProductCard>;
}

// Implemente a se√ß√£o
export default function ProductContainerSection(
  { myProp: { Component, props } }: Props,
) {
  return (
    <div className="flex gap-4">
      <Component {...props} />
    </div>
  );
}
```

Isso garante consist√™ncia e refor√ßa o conceito de um tipo nomeado, tornando mais
f√°cil para os desenvolvedores e usu√°rios de neg√≥cios restringirem suas se√ß√µes
conforme desejado!

## Nota

Com a capacidade de aceitar outras se√ß√µes como par√¢metros, voc√™ pode criar
se√ß√µes altamente modulares e personaliz√°veis que se adaptam a diferentes casos
de uso e tornam suas aplica√ß√µes deco ainda mais poderosas e flex√≠veis. Boa
codifica√ß√£o! üß©üöÄ


# null
Source: https://docs.deco.cx/pt/developing-capabilities/sections/error-fallback

Limitador de Erros lan√ßados durante a renderiza√ß√£o de uma Se√ß√£o

# Limitador de Erros

## Vis√£o Geral

Captura e tratamento de erro √© um conceito poderoso dispon√≠vel desde a vers√£o
1.54.0, que permite lidar com erros que ocorrem durante a renderiza√ß√£o de
componentes. Eles permitem que voc√™ lide elegantemente com erros e evite que
toda a aplica√ß√£o seja interrompida devido a um erro n√£o tratado.

Na deco, criar um limite de erro √© t√£o simples como exportar uma fun√ß√£o de
componente chamada `ErrorFallback` que recebe um objeto com uma propriedade:
`error`. A propriedade `error` armazena o objeto de erro que foi lan√ßado pelo
componente.

Os pr√©-requisitos para fazer o seu componente funcionar com tratamento de erro
s√£o ter as seguintes depend√™ncias nas vers√µes iguais ou superiores √†s abaixo:

```json
{
  "imports": {
    "deco/": "https://denopkg.com/deco-cx/deco@1.54.0/",
    "$fresh/": "https://denopkg.com/deco-cx/fresh@1.3.2/",
    "preact": "https://esm.sh/preact@10.16.0",
    "preact/": "https://esm.sh/preact@10.16.0/",
    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.3.0"
  }
}
```

## Exemplo: Criando um Limitador de Exce√ß√£o

Para criar um limite de erro, voc√™ pode seguir estes passos:

* Escolha a Se√ß√£o selecionada (por exemplo, `ProductShelf.tsx`)
* Exporte uma fun√ß√£o chamada `ErrorFallback`, a fun√ß√£o deve receber um objeto
  com uma propriedade: `error`.

```tsx
// ProductShelf.tsx
export interface Props {
    myProp: string;
}

export function ErrorFallback({ error }: { error?: Error }) {
  // Sua l√≥gica de tratamento de erro vai aqui
  // Voc√™ pode exibir uma mensagem de erro, registrar o erro ou renderizar uma interface de substitui√ß√£o
  return (
    <div>
      <h2>Oops! Algo deu errado.</h2>
      <p>{error.message}</p>
    </div>
  );
}

export default function ProductShelf(props: Props) {
    ...
}
```

Se ocorrer um erro durante a renderiza√ß√£o de `ProductShelf`, o componente
`ErrorFallback` sera renderizado no lugar de `ProductShelf`

Lembre-se de usar os limites de erro com cuidado e envolver apenas os
componentes propensos a erros. Usar os limites de erro de forma eficaz pode
melhorar muito a estabilidade e a experi√™ncia do usu√°rio em suas aplica√ß√µes.
Caso nao haja nenhum `ErrorFallback` definido, um fallback padrao ser√° utilizado


# null
Source: https://docs.deco.cx/pt/developing-capabilities/sections/loading-fallback

Adi√ß√£o de fallback de carregamento para se√ß√µes

# Fallback de Carregamento

## Vis√£o Geral

Os fallbacks de carregamento s√£o um conceito poderoso dispon√≠vel para uso desde
a vers√£o 1.54.0, para lidar com o estado de carregamento de se√ß√µes usando dados
de APIs de terceiros. Eles permitem que voc√™ lide graciosamente com estados de
carregamento e evite que toda a aplica√ß√£o pare devido a alguma API de terceiros.

No deco, criar um fallback de carregamento √© t√£o simples quanto exportar uma
fun√ß√£o de componente chamada `LoadingFallback`.

Os pr√©-requisitos para fazer com que seu componente funcione s√£o ter as
seguintes depend√™ncias em vers√µes iguais ou superiores √†s listadas abaixo:

```json
{
  "imports": {
    "deco/": "https://denopkg.com/deco-cx/deco@1.54.0/",
    "$fresh/": "https://denopkg.com/deco-cx/fresh@1.3.2/",
    "preact": "https://esm.sh/preact@10.16.0",
    "preact/": "https://esm.sh/preact@10.16.0/",
    "preact-render-to-string": "https://esm.sh/*preact-render-to-string@6.2.0",
    "@preact/signals": "https://esm.sh/*@preact/signals@1.1.3",
    "@preact/signals-core": "https://esm.sh/@preact/signals-core@1.3.0"
  }
}
```

## Exemplo: Criando um Fallback de Carregamento

Para criar um fallback de carregamento, voc√™ pode seguir estes passos:

* Escolha sua Se√ß√£o selecionada (por exemplo, `ProductShelf.tsx`)
* Exporte uma fun√ß√£o chamada `LoadingFallback`.

```tsx
// ProductShelf.tsx
export interface Props {
    myProp: string;
}

export function LoadingFallback() {
  // Renderize spinners, esqueletos e outros espa√ßos reservados
  return (
    <div>
      <h2>carregando...</h2>
    </div>
  );
}

export default function ProductShelf(props: Props) {
    ...
}
```

Se `ProductShelf` usar dados provenientes de uma API de terceiros lenta, o
componente `LoadingFallback` ser√° renderizado em seu lugar. Se nenhum fallback
de carregamento for definido, um fallback padr√£o ser√° renderizado em seu lugar.


# null
Source: https://docs.deco.cx/pt/developing-capabilities/sections/redirecting-users

Redirecionando usu√°rios a partir de uma Se√ß√£o

# Realizando Redirecionamentos em Se√ß√µes

Os redirecionamentos em se√ß√µes permitem que voc√™ direcione eficientemente os
usu√°rios para diferentes p√°ginas com base em determinadas condi√ß√µes,
proporcionando uma experi√™ncia de navega√ß√£o suave e cont√≠nua. Com o Live.ts,
voc√™ pode implementar facilmente redirecionamentos usando carregadores inline e
a fun√ß√£o `redirect` do m√≥dulo `deco/mod.ts`.

## Vis√£o Geral

Os redirecionamentos permitem que voc√™ evite a fase inteira de renderiza√ß√£o,
contornando a necessidade de gera√ß√£o desnecess√°ria de conte√∫do quando um
redirecionamento √© necess√°rio. Eles s√£o especialmente √∫teis quando voc√™ deseja
guiar os usu√°rios para p√°ginas espec√≠ficas com base em determinados crit√©rios,
como autentica√ß√£o do usu√°rio, geolocaliza√ß√£o ou qualquer outra condi√ß√£o
personalizada.

## Implementa√ß√£o

Para criar um redirecionamento em uma se√ß√£o, siga estes passos simples:

1. Crie um carregador inline dentro do componente da sua se√ß√£o e importe a
   fun√ß√£o `redirect` do m√≥dulo `deco/mod.ts`.

```tsx
import { redirect } from "deco/mod.ts";

export default function MyComponent(props: Props) {
  // Sua l√≥gica de componente vai aqui
  // ...
}

export const loader = (props: Props, req: Request) => {
  // Sua condi√ß√£o de redirecionamento aqui
  if (SUA_CONDICAO_PARA_REDIRECIONAR_USUARIO) {
    const url = new URL(req.url);
    url.pathname = "/seu_caminho_de_redirecionamento"; // Atualize isso com o caminho de redirecionamento desejado
    redirect(url.toString()); // Voc√™ tamb√©m pode usar a URL completa de qualquer lugar
  }

  // Retorne as props do componente
  return props;
};
```

2. Dentro da fun√ß√£o `loader`, defina a condi√ß√£o que determina se o
   redirecionamento deve ser acionado. Se a condi√ß√£o for atendida, construa a
   nova URL usando a classe `URL` e especifique o caminho para o qual voc√™
   deseja redirecionar.

3. Por fim, chame a fun√ß√£o `redirect` com a URL rec√©m-criada. Isso direcionar√°
   instantaneamente o usu√°rio para a p√°gina especificada sem a necessidade de
   renderiza√ß√£o adicional.

Observe que voc√™ precisa retornar algo (neste caso, as `props`) na fun√ß√£o
`loader`, mesmo se estiver usando um redirecionamento. Isso √© para garantir que
a fun√ß√£o se comporte conforme o esperado e atenda aos requisitos do compilador
TypeScript.

## Exemplo

Digamos que voc√™ deseje redirecionar os usu√°rios para uma p√°gina de login caso
eles n√£o estejam autenticados:

```tsx
import { redirect } from "deco/mod.ts";

export default function MyComponent(props: Props) {
  // Sua l√≥gica de componente vai aqui
  // ...
}

export const loader = (props: Props, req: Request) => {
  // Verifique se o usu√°rio n√£o est√° autenticado
  if (!props.isAuthenticated) {
    const url = new URL(req.url);
    url.pathname = "/login"; // Redirecionar para a p√°gina de login
    redirect(url.toString());
  }

  // Retorne as props do componente
  return props;
};
```

Neste exemplo, se o usu√°rio n√£o estiver autenticado, ele ser√° redirecionado para
a p√°gina de login. Caso contr√°rio, o componente continuar√° sendo renderizado
normalmente.

## Lembre-se

* Use redirecionamentos com cuidado e apenas quando necess√°rio para garantir uma
  experi√™ncia de usu√°rio suave.
* Sempre teste seus redirecionamentos cuidadosamente para garantir que eles se
  comportem conforme o esperado.
* Mantenha seus redirecionamentos organizados e f√°ceis de manter para evitar
  comportamentos indesejados.

Com redirecionamentos em se√ß√µes, voc√™ tem o poder de guiar os usu√°rios de forma
perfeita em suas aplica√ß√µes Live.ts com base em condi√ß√µes espec√≠ficas. Boa
navega√ß√£o! üöÄüîÄ


# null
Source: https://docs.deco.cx/pt/developing-capabilities/troubleshooting

Problemas comuns

## Problemas ao rodar o deno localmente

Ao rodar o projeto localmente, o `deno` exibe erros ou problemas ao executar o
site.

### Atualize o deno

Execute o comando a seguir para atualizar o deno a √∫ltima vers√£o...

`deno upgrade`

Em alguns casos muito espec√≠ficos, √© poss√≠vel tamb√©m testar outras vers√µes do
deno especificando uma vers√£o a ser atualizada...

`deno upgrade --version X.Y.Z`

### Limpe o cache do deno

O deno √© eficiente ao fazer um cache agressivo das depend√™ncias de forma que o
tempo para reiniciar o servidor √© muito r√°pido. Ao mesmo tempo, as depend√™ncias
em cache podem ter problemas ou erros nas vers√µes que foram baixadas.

Assim, recomendamos limpar o cache dos arquivos relacionados:

`deno cache -r dev.ts main.ts`

Em caso de erros relacionados a elementos de tipagem ou de execu√ß√£o, tente
limpar tamb√©m o storage local:

`deno eval 'localStorage.clear()'`

Dependendo da instala√ß√£o e configura√ß√£o do site, o deno pode puxar as
depend√™ncias do npm no diret√≥rio "node\_modules". Apagar este diret√≥rio pode
resolver problemas relacionados a depend√™ncias do npm.

### Verifique se outra aplica√ß√£o est√° executando na porta 8000

Caso outra aplica√ß√£o esteja executando na porta 8000, o processo do deno pode
entrar em "loop" ou apresentar uma falha de inicializa√ß√£o na porta em quest√£o.
Observe se h√° outras aplica√ß√µes executando na porta 8000.

## Minhas altera√ß√µes n√£o foram refletidas no site em produ√ß√£o

### Verifique se o deploy foi realizado com sucesso

No reposit√≥rio do site, verifique uma marca√ß√£o referente ao √∫ltimo *commit*. O
*deploy* deve ter sido realizado com sucesso para que o c√≥digo possa ser
considerado em produ√ß√£o:

![Deploy bem sucedido](https://github.com/deco-sites/starting/assets/882438/6f4e853f-23bf-4ed1-9f4f-b16a97690a6a).

Em caso de falha, passe o cursor na sinaliza√ß√£o de erro para ver uma indica√ß√£o
do problema.

Caso o sistema tenha falhado na nossa infraestrutura, pode enviar um commit
vazio para for√ßar um novo *deploy* com o comando:

`git commit --allow-empty -n -m "Redeploy"`

### Verifique o seletor de ambiente

Verifique se o seletor de ambientes (preview) aponta para o endere√ßo correto.

## Estou com erros em uma se√ß√£o, p√°gina, ou funcionalidade espec√≠fica

### Atualize a deco e std

Novas vers√µes do framework da deco e do std trazem corre√ß√µes de falhas comuns ao
projeto:

`deno eval 'import "deco/scripts/update.ts"'`

## Um componente n√£o est√° interativo, o click/bot√£o n√£o funciona

Todo componente interativo deve ser uma ilha. Para isso, deve estar dentro da
p√°gina `islands/` e n√£o pode estar euma sub-pasta.

Caso o carregamento de algum JS no browser falhe, os componentes podem perder a
interatividade. Abra o `console.log` para procurar por erros de JS.


# Criando Loaders
Source: https://docs.deco.cx/pt/developing-guide/creating-loaders

Criando loaders

Agora que voc√™ aprendeu mais sobre loaders e como eles podem ser usados junto
com uma se√ß√£o, vamos criar um loader que pode ser usado em diferentes se√ß√µes.

## 1. Criando um Loader

Para fazer isso, vamos criar um loader separado da se√ß√£o, na pasta `loaders/` do
seu projeto.

Crie o arquivo `DogFactsLoader.ts` na pasta `loaders/` do seu projeto. Ele ter√°
a mesma l√≥gica do loader que criamos no tutorial anterior, mas temos que lembrar
de definir a interface Props e exportar o loader como padr√£o.

```tsx
export type DogFacts = string[];

export interface Props {
  numberOfFacts?: number;
}

async function loader(
  { numberOfFacts = 1 }: Props,
  _req: Request,
): Promise<DogFacts> {
  const { facts } = await fetch(
    `https://dogapi.dog/api/facts?number=${numberOfFacts ?? 1}`,
  ).then((r) => r.json());

  return facts;
}

export default loader;
```

## 2. Usando o Loader em uma Se√ß√£o

Agora que criamos o loader, podemos us√°-lo em uma se√ß√£o. O importante aqui √© que
uma das props da se√ß√£o deve corresponder ao tipo de retorno do loader.

Modifique o arquivo `DogFacts.tsx` na pasta `sections/` do seu projeto.

```tsx
import type { DogFacts } from "../loaders/DogFactsLoader.ts";

// Tipo de Props que ser√° configurado no Admin do deco.cx
export interface Props {
  title: string;
  dogFacts?: DogFacts;
}

export default function DogFactsSection(
  { title, dogFacts }: Props,
) {
  return (
    <div class="p-4">
      <h1 class="font-bold">{title}</h1>
      <ul>
        {dogFacts?.map((fact) => <li>{fact}</li>)}
      </ul>
    </div>
  );
}
```

Agora, em vez de ter um loader embutido, a se√ß√£o recebe os dados como uma prop,
e como o loader retorna o mesmo tipo que a prop dogFacts da se√ß√£o, o Admin
reconhece o loader dogFacts como o loader para a se√ß√£o DogFacts.

![Se√ß√£o DogFacts no Admin](https://deco.cx/docs/developing-guide/creating-loaders/dog-facts-section.png)

## √â isso!

Voc√™ criou com sucesso um loader que pode ser usado em diferentes se√ß√µes.
Continue lendo para ver o que mais voc√™ pode desenvolver com deco.


# Editando se√ß√µes
Source: https://docs.deco.cx/pt/developing-guide/editable-sections

Editando se√ß√µes

## Introdu√ß√£o √†s Se√ß√µes (dev)

Uma Se√ß√£o representa um elemento de UI configur√°vel para um site deco. √â
essencial entender o que isso significa para um desenvolvedor.

Uma Section √© um c√≥digo `tsx` dentro da pasta `sections` e que:

* √© um componente [Preact](https://preactjs.com/)
* tem propriedades serializ√°veis
* exporta o tipo de suas propriedades

Um componente Preact √© uma fun√ß√£o exportada por padr√£o (`export default`). Ele
recebe propriedades, retorna JSX e √© invocado durante cada renderiza√ß√£o do
elemento definido.

Vamos explorar como podemos manipular essas se√ß√µes e ver as mudan√ßas refletidas
na interface do Admin.

## 1. Abra a se√ß√£o Hero

Como exemplo, abra a se√ß√£o `Hero.tsx` na interface do Admin do site que voc√™
criou em um [tutorial anterior](https://deco.cx/docs/pt/getting-started/creating-a-site).
Clique no √≠cone `</>` na barra direita para ver o c√≥digo da se√ß√£o.

O c√≥digo deste elemento √© escrito em HTML com JavaScript, como mostrado no
exemplo abaixo.

![C√≥digo da Se√ß√£o Hero](https://deco.cx/docs/editable-section/hero-section-code.png)

Observe os tipos exportados neste arquivo. Esses mesmos tipos s√£o acess√≠veis no
formul√°rio de propriedades da se√ß√£o quando voc√™ clica no √≠cone de lista na barra
direita.

![Editando propriedades da Se√ß√£o Hero](https://deco.cx/docs/editable-section/section-props.png)

**Se√ß√£o e seus tipos de propriedades**

## 2. Execute seu site localmente

Siga os passos de [configura√ß√£o do ambiente](https://deco.cx/docs/pt/developing-guide/setup) e
execute seu projeto localmente para ver as mudan√ßas que voc√™ fizer no c√≥digo
refletidas na interface do Admin.

## 3. Adicione uma nova propriedade √† se√ß√£o Hero

Modifique o c√≥digo de `sections/Hero.tsx` para receber uma nova propriedade
opcional, o `size` (tamanho) de um bot√£o CTA. Adicione ao tipo `CTA` uma nova
propriedade, `size`, que deve ser uma dessas strings: "xs", "sm", "md" e "lg".

```tsx
export interface CTA {
  id?: string;
  href: string;
  text: string;
  outline?: boolean;
  size?: "xs" | "sm" | "md" | "lg";
}
```

Esse tipo de campo indica ao Admin que essa propriedade s√≥ pode assumir esses
valores, fazendo a plataforma mostrar um componente de sele√ß√£o para editar esse
campo.

Voc√™ pode ler mais sobre esses formatos e tipos de campo na
[documenta√ß√£o de Widgets](https://deco.cx/docs/pt/developing-capabilities/section-properties/widgets).

Vamos adicionar um bot√£o CTA na nossa se√ß√£o Hero para ver a modifica√ß√£o:

![Exemplo de Bot√£o CTA](https://deco.cx/docs/editable-section/cta-button-example.png)

Agora o CTA tem o campo de tamanho:

![Campo de Tamanho do CTA](https://deco.cx/docs/editable-section/cta-size-field.png)

Tamb√©m vamos modificar o conte√∫do JSX para fazer o tamanho do bot√£o CTA mudar de
acordo com a op√ß√£o selecionada no formul√°rio do Admin:

```tsx
...

<div class="flex items-center gap-3">
  {cta?.map((item) => (
    <a
      key={item?.id}
      id={item?.id}
      href={item?.href}
      target={item?.href.includes("http") ? "_blank" : "_self"}
      class={`font-normal btn btn-primary ${item.outline && "btn-outline"} ${
        item.size && `btn-${item.size}`
      }`}
    >
      {item?.text}
    </a>
  ))}
</div>

...
```

Com essa mudan√ßa, voc√™ pode ajustar o tamanho do bot√£o atrav√©s do formul√°rio do
Admin:

![Ajuste de Tamanho do Bot√£o CTA](https://deco.cx/docs/editable-section/cta-button-size-adjustment.gif)

## 4. Pronto para come√ßar!

Agora voc√™ pode configurar `props` para as Se√ß√µes do seu site e ver como elas
s√£o renderizadas. A pr√©-visualiza√ß√£o ser√° automaticamente atualizada se voc√™
modificar o c√≥digo da Se√ß√£o localmente.

Para publicar as mudan√ßas, fa√ßa um *git push* para a branch principal ou
publique seu ambiente diretamente na interface do Admin.


# Newsletter com HTMX e Deco Records
Source: https://docs.deco.cx/pt/developing-guide/examples

Newsletter com HTMX e Deco Records

## Principais ferramentas

* Deco.cx como hospedagem e CMS.
* Deco Records como banco de dados SQLite, utilizando o
  [Drizzle ORM](https://orm.drizzle.team/)
* App da Resend para envio de e-mails de confirma√ß√£o. API de envio de e-mails
  que oferece um plano gratuito de 3.000 e-mails por m√™s.

## Configura√ß√µes necess√°rias

1. Criar um site na [deco.cx](https://deco.cx/new)
2. Configurar o [Deco Records](https://deco.cx/docs/en/reference/deco-records)

> Para esse tutorial, criamos uma tabela "newsletter" com as colunas `id`,
> `email`, `confirmed_at`, `confirmation_key`.

3. Instalar a app da Resend no menu "Apps", configurando a API Key. Ao instalar
   a app Resend na deco, voc√™ encontrar√° instru√ß√µes de como fazer isso.

## Criando as sections utilizadas

Duas sections foram utilizadas nesse tutorial:

1. `newsletterSubsbribe.tsx`: Formul√°rio de inscri√ß√£o na Newsletter (campo de
   e-mail) + [action](https://deco.cx/docs/pt/concepts/action) inline que
   realiza o processo de inclus√£o do e-mail no banco de dados e envio do e-mail
   usando a app da Resend. Principais componentes da section:

   ```tsx
   export async function action(
   props: Props,
   req: Request,
   ctx: AppContext & RecordsApp & ResendApp,
   ): Promise<Props> {

   const form = await req.formData(); // Obt√©m os dados do banco de dados
   const email = `${form.get("email") ?? ""}`;

   if (!email) {
       console.log("Email is empty");
       return { ...props, submissionResponse: { email: "" } };
   }

   const drizzle = await ctx.invoke("records/loaders/drizzle.ts"); // Carrega o drizzle para interagir com o banco de dados

   try {
       const recs = await drizzle // Verifica se o email j√° est√° registrado no banco de dados
           .select({ email: newsletter.email })
           .from(newsletter)
           .where(eq(newsletter.email, email));

       if (recs.length) {
       return {
           ...props,
           submissionResponse: { error: "Email already exists.", email },
       };
       }

       const confirmationKey = crypto.randomUUID(); // Gera uma chave de confirma√ß√£o √∫nica para a verifica√ß√£o

       await drizzle.insert(newsletter).values({ // Insere o novo registro de newsletter no banco de dados
           email,
           confirmed_at: null,
           confirmation_Key: confirmationKey,
       });

       
       await ctx.invoke("resend/actions/emails/send.ts", {
           subject: `Personal Blog - Confirm your subscription`,
           from: no-reply@blog.owner
           html: `<h1>Thanks for subscribing!</h1><br/><br/>Click <a href="https://sites-blog.decocdn.com/confirm-newsletter?key=${confirmationKey}">here</a> to confirm your subscription.`,
           to: email,
       });

       return { ...props, submissionResponse: { email: "" } };

   } catch (e) {
       console.log(e);
       ctx.monitoring?.logger?.error(e);
       return {
       ...props, submissionResponse: { error: "System error", email },
       };
     }
   }

   export function loader(props: Props) {
   return props;
   }
   ```

   E no formul√°rio cont√©m a utiliza√ß√£o do HTMX para realizar a requisi√ß√£o de
   forma ass√≠ncrona e atualizar apenas a se√ß√£o necess√°ria.

   ```tsx
   <form
     class="form-control"
     hx-post={useComponent(import.meta.url, props)} // URL com a utiliza√ß√£o do hook useComponent para onde a requisi√ß√£o ser√° enviada
     hx-target="closest section" // Elemento alvo que ser√° atualizado com a resposta do servidor, a ideia aqui √© chamar o mesmo componente para n√£o precisar alterar a p√°gina inteira
     hx-swap="outerHTML" // Modo de substitui√ß√£o do conte√∫do do alvo
   >
     <input
       type="email"
       value={submissionResponse?.email}
       placeholder="Email address"
       class="input input-bordered"
       name="email"
       required
     />
     <button class="btn btn-primary" type="submit">
       <span class="inline [.htmx-request_&]:hidden">{buttonText}</span>
       <span class="hidden [.htmx-request_&]:inline loading loading-spinner" />
       {" "}
       {/*spinner usado enquanto o HTMX recebe a requesi√ß√£o*/}
     </button>
   </form>;
   ```

2. `newsletterConfirmation.tsx`: Section a ser inclu√≠da na p√°gina `/confirm` do
   site para que os usu√°rios possam confirmar a inscri√ß√£o e receber um feedback
   positivo. O principal uso dessa section foi a utiliza√ß√£o do loader para
   processar os dados:

   ```tsx
   export const loader = async (
     props: Props,
     req: Request,
     ctx: AppContext & RecordsApp,
   ) => {
     const url = new URL(req.url);

     const reallyQs = url.searchParams.get("really");

     if (!reallyQs) {
       return props;
     }

     const confirmationKey = url.searchParams.get("key");

     if (!confirmationKey) {
       return { ...props, error: "No confirmation key." };
     }

     const drizzle = await ctx.invoke("records/loaders/drizzle.ts");

     await drizzle
       .update(newsletter)
       .set({
         confirmed_at: new Date().toISOString(),
         confirmation_key: null,
       })
       .where(eq(newsletter.confirmation_key, confirmationKey ?? ""));

     return { ...props, really: true };
   };
   ```

## Conclus√£o

Este tutorial demonstra como implementar um sistema de inscri√ß√£o em newsletter
utilizando as ferramentas deco.cx, Deco Records e Resend. A solu√ß√£o apresentada
oferece um fluxo completo, desde a captura do e-mail do usu√°rio at√© a
confirma√ß√£o da inscri√ß√£o, garantindo a integridade dos dados e a experi√™ncia do
usu√°rio. A utiliza√ß√£o de tecnologias modernas como HTMX e Drizzle ORM
proporciona uma implementa√ß√£o eficiente e de f√°cil manuten√ß√£o. Este sistema pode
ser facilmente adaptado e expandido para atender √†s necessidades espec√≠ficas de
diferentes projetos web.


# Pegando Dados
Source: https://docs.deco.cx/pt/developing-guide/fetching-data

Aprenda como carregar dados usando Loaders e Sections, permitindo que usu√°rios de neg√≥cios personalizem a busca.

Buscar dados de APIs √© um requisito comum ao criar sites ou aplica√ß√µes. A
*deco.cx* oferece uma solu√ß√£o de *data-fetching* que ocorre **no server-side** e
√© flex√≠vel para permitir que os usu√°rios de neg√≥cios configurem como os dados
s√£o buscados, da mesma forma que configuram `props` das Sections.

Neste tutorial, voc√™ aprender√° como buscar dados de uma API externa e injet√°-los
em uma Section usando [Loaders](https://deco.cx/docs/pt/concepts/loader).

## O que vamos construir

O exemplo que usaremos √© simples, mas tem complexidades comuns √† outros casos:

* Fazer *fetch* de fatos sobre cachorros usando a [Dog API](https://dogapi.dog/)
  **permitindo ao usu√°rio configurar quantos fatos ser√£o retornados** no Admin
  da *deco.cx*.
* Apresentar esses fatos em uma Section.

<Frame>
  <img width="1512" alt="Dados de renderiza√ß√£o de Section obtidos da API" src="https://user-images.githubusercontent.com/18706156/225758802-7277e774-921d-46e5-b384-bc9245b8eef1.png" />
</Frame>

*Visualiza√ß√£o da Section DogFacts mostrando os dados retornados da API*

<Frame>
  <img width="941" alt="Dados retornados da API Dog Facts" src="https://user-images.githubusercontent.com/18706156/225752374-0882d0ec-966b-4074-a49d-d18ffc17d8b9.png" />
</Frame>

*Dados retornados da API Dog Facts sendo chamada no browser*

## 1. Criando a Section

Primeiro, vamos criar uma Section que renderizar√° os dados buscados da API. Crie
a se√ß√£o `DogFacts.tsx` na pasta sections/ do seu projeto.

Se executarmos um http request para a API da Dog Fact veremos que ele retorna um
JSON no seguinte formato,

> Abra no seu browser:
> [esta URL com par√¢metros para a API](https://dogapi.dog/api/facts?number=1)

```json
{
  "facts": [
    "The Labrador is so popular, in 2006 there were approximately 
    3-5 times more Labs as there were German Shepherds or Golden Retrievers."
  ],
  "success": true
}
```

Perceba que a √∫nica coisa que nos importa s√£o os facts, logo vamos criar nossa
section preparada para receber esses facts re renderiza-los da maneira que
desejarmos.

Para isso, vamos criar um tipo `DoctFact` que cont√©m apenas uma propriedade
chamada `fact` que √© a `string` representada pela mensagem.

Vamos ver isso em a√ß√£o criando uma nova Section:

Cole o seguinte c√≥digo:

```tsx
export interface DogFact {
  fact: string;
}

export interface Props {
  title: string;
  dogFacts: string[];
}

export default function DogFacts({ title, dogFacts }: Props) {
  return (
    <div class="p-4">
      <h1 class="font-bold">{title}</h1>
      <ul>
        {dogFacts.map((fact) => <li>{fact}</li>)}
      </ul>
    </div>
  );
}
```

> Nesse momento podemos rodar o `deno task start` e verificar no nosso admin que
> esse componente j√° consegue ser utilizado com dados est√°ticos, oque n√£o faz
> muito sentido para nosso caso de uso.

## 2. Criando o Loader e testando a Section

Agora vamos criar um Loader que buscar√° os dados da Dog Fact API e os passar√°
para a Section.

Os Loaders permitem que voc√™ defina como os dados s√£o buscados e transformados
antes de serem passados para uma Section. Eles s√£o **fun√ß√µes regulares de
Typescript** que podem usar fun√ß√µes *async* como `fetch`. Os Loaders podem ser
"plugados" em uma Section via uma das `props` da Section, e isso acontece com
base no **tipo de retorno do Loader** (o tipo de retorno do Loader √© o tipo de
entrada da Section).

1. Defina qual ser√° as `Props` de input do seu loader.
2. Exporte uma fun√ß√£o chamada `loader` dentro do mesmo arquivo da sua section.

No nosso caso, vamos deixar configur√°vel qual n√∫mero de facts que vamos mostrar
no nosso componente. Perceba que agora, o que aparecer√° parece ser configurado
n√£o ser√° mais as props da section mas sim as props do seu loader.

```tsx
import type { SectionProps } from "deco/mod.ts";

// Props type that will be configured in deco.cx's Admin
export interface Props {
  title: string;
  numberOfFacts?: number;
}

export async function loader(
  { numberOfFacts, title }: Props,
  _req: Request,
) {
  const { facts: dogFacts } = (await fetch(
    `https://dogapi.dog/api/facts?number=${numberOfFacts ?? 1}`,
  ).then((r) => r.json())) as { facts: string[] };
  return { dogFacts, title };
}

export default function DogFacts(
  { title, dogFacts }: SectionProps<typeof loader>,
) {
  return (
    <div class="p-4">
      <h1 class="font-bold">{title}</h1>
      <ul>
        {dogFacts.map((fact) => <li>{fact}</li>)}
      </ul>
    </div>
  );
}
```

> Observa√ß√£o: O tipo `SectionProps` √© um tipo auxiliar usado para inferir o tipo
> de retorno do loader.

## 3. Testando a Section

1. Execute o servidor localmente com
   `DECO_ENV_NAME={environment_name} deno task start`.
2. Acesse `https://deco.cx/admin` no seu site e certifique-se de que seu
   ambiente est√° selecionado no Seletor de Ambiente no canto superior direito do
   Admin.
3. V√° para `Sections` e procure por DogFacts na barra lateral esquerda.
4. Configure as props do Loader selecionado (`numberOfFacts`) com um n√∫mero
   desejado (por exemplo, 4).

Agora, vamos ver isso funcionando conectando-o a uma Section.

![DogFacts Section rendering data fetched from the API](https://deco.cx/docs/developing-guide/fetching-data/dog-facts-section.png)

**√â isso!** Agora voc√™ criou uma Section que exibe os dados obtidos de um API
externa usando um Loader, tornando tudo configur√°vel por usu√°rios de neg√≥cios
como desejado. Recomendamos exportar filtros e *sort* nos `props` do Loader para
torn√°-lo mais reutiliz√°vel no Admin da *deco.cx*.

## Leitura adicional

Os loaders s√£o componentes poderosos para lidar com dados din√¢micos e resolvem a
maior parte dos requisitos quando lidamos com dados vindos de API. A plataforma
da `deco.cx` possui uma outra infinidade de casos de usos relacionados com dados
din√¢micos que podemos utilizar.

* [Componentes Universais](https://deco.cx/docs/pt/developing-capabilities/section-properties/standard-data-types)
* [Conceitos b√°sicos: Loaders](https://deco.cx/docs/pt/concepts/loader)


# Go-Live com Teste A/B
Source: https://docs.deco.cx/pt/developing-guide/go-live-ab-testing

Go-Live com Teste A/B

Trabalhar com dois ambientes ao mesmo tempo √© algo sens√≠vel em termos de
consist√™ncia de dados. Recomendamos que seja seguido um processo detalhado e
cuidadoso, prestando aten√ß√£o a alguns pontos, como:

* Replicar o GTM de forma id√™ntica em ambos os ambientes
* Atualizar ambos os ambientes ao longo do teste
* Garantir a igualdade de features

Na deco.cx, existem alguns m√©todos de teste antes de realizar a migra√ß√£o
completa de um site.

## M√©todo de subdom√≠nio

O m√©todo de subdom√≠nio, consiste em associar o site constru√≠do na deco.cx a um
novo subdom√≠nio.

Exemplo: Meu site atual `www.deco.cx`, vamos associar o novo site ao dom√≠nio
`store.deco.cx`.

### Como fazer:

1 - Registrar um sub-dom√≠nio na [deco.cx](https://deco.cx)

* [Doc](https://deco.cx/docs/en/getting-started/custom-domains/)

2 - Criar um script para divis√£o de tr√°fego

* Crie um loader na deco.cx, como
  [esse](https://gist.github.com/guitavano/aca72370b74081289d5d2b86143828e6)
* Preencha as informa√ß√µes desse loader na sua app `site`
* Insira na tag `<head>` do seu site atual, esse loader em uma tag `<script>`:

```html
<script
  src="https://store.deco.cx/live/invoke/site/loaders/abTestScript.ts"
></script>
```

Esse script, ir√° sortear os usu√°riso para mant√™-los no site ou redirecion√°-los
para o subdom√≠nio.

### Como medir o resultado?

* Configurar o G.A e o GTM em ambos os sites

#### Vantagens

* O cliente s√≥ paga a infraestrutura proporcional ao uso
* Setup simples

#### Desvantagens

* O cliente final v√™ uma URL diferente
* A divis√£o de tr√°fego √© feita com Javascript no Front

## M√©todo de Proxy da deco.cx

O m√©todo de proxy consiste em manter todo o tr√°fego no mesmo dom√≠nio, mas
realizar um proxy transparente para parte dos usu√°rios.

<Frame>
  <img src="https://deco-sites-assets.s3.sa-east-1.amazonaws.com/starting/650953a6-0ae4-448d-b911-943565cf9094/Screenshot-2024-09-04-at-09.58.03.png" width="500" />
</Frame>

Repare que dessa forma, voc√™ precisa colocar o seu antigo site em outro dom√≠nio,
para que a deco.cx utilize-o para o Proxy.

### Como fazer:

Facilitamos a ativa√ß√£o desse proxy com esse fluxo:

1 - No painel deco.cx, acesse `Apps`

2 - Abra o app `site`

3 - Voc√™ deve ver essa configura√ß√£o:

<Frame>
  <img src="https://deco-sites-assets.s3.sa-east-1.amazonaws.com/starting/bdacf591-d141-44b5-b85c-3c4068c67c8a/Screenshot-2024-09-04-at-09.59.05.png" width="500" />
</Frame>

O segmento da imagem, √© o `Random`, com split de 50%, mas voc√™ pode utilizar
outros segmentos.

### Como medir o resultado?

* Configurar o G.A e o GTM em ambos os sites

* Acompanhar os resultados na deco.cx

Para acompanhar os resultados na deco.cx, o Matcher a ser utilizado precisa ser
criado atrav√©s da aba de Experiments, confira como em
[Teste A/B](https://deco.cx/docs/pt/developing-capabilities/apps/ab-test).

Al√©m disso, repare que nas configura√ß√µes, existe a op√ß√£o `Scripts to include`;
selecione e inclua o script `DecoAnalytics`.

#### Vantagens

* Mantem a experi√™ncia toda no mesmo dom√≠nio
* Setup de divis√£o de tr√°fego pronto
* Setup de Analytics pront

#### Desvantagens

* Paga o custo de todo tr√°fego, independente do escalonamento

## M√©todo de Proxy externo

Este m√©todo, √© o inverso do proxy na deco.cx: a responsabilidade de dividir o
tr√°fego e fazer o proxy √© do antigo website.

> Nota: Para lojas VTEX, deco.cx est√° construindo um APP no Vtex IO para
> realizar esse proxy

Caso esteja em d√∫vida sobre como desenvolver esse proxy na sua tecnologia,
estamos no [Discord](https://deco.cx/discord) para ajudar.

#### Vantagens

* O cliente s√≥ paga a infraestrutura proporcional ao uso

#### Desvantagens

* Setup n√£o vem pronto, a depender da tecnologia

## Informa√ß√µes extras

### Configura√ß√£o GTM

Para auxiliar a configura√ß√£o dos eventos no GTM, recomendamos a consulta do
cookie `deco_matcher...`, que indica em qual vers√£o o usu√°rio est√°.

### Orderform VTEX

Como fonte extra de dados, recomendamos a inser√ß√£o no OrderForm de uma marca√ß√£o
no marketingData, indicando em qual vers√£o o usu√°rio est√°, pois essa informa√ß√£o
vai para o painel de pedidos da VTEX.

* [Script exemplo](https://gist.github.com/guitavano/6de5f1068c85800b0702937b97c51ef2)


# Criando uma Section
Source: https://docs.deco.cx/pt/developing-guide/hello-world

Criando uma Section

Agora que voc√™ est√° mais familiarizado com Sections e como elas s√£o usadas no
admin, vamos criar uma Section do zero. Neste guia, voc√™ aprender√° a criar uma
Section, a adicionar propriedades a ela e a estiliz√°-la com seus temas.

Abra a pasta do seu site em uma IDE e execute as seguintes a√ß√µes:

## 1. Crie um arquivo `.tsx` na pasta `sections/`

Crie um arquivo `.tsx` na pasta `sections/` em seu Site com o nome desejado para
Section (*e.g*: `Post.tsx`).

A Section √© um componente [Preact](https://preactjs.com/) que √© configur√°vel no
Admin. Para que a Section seja vis√≠vel no Admin, √© preciso criar esse componente
na pasta `sections/` ou em algum de seus sub-diret√≥rios.

## 2. Exporte o componente

Exporte um componente [Preact](https://preactjs.com/) **usando
`export default`** como o exemplo abaixo:

`sections/Post.tsx`

```tsx
export interface Props {
  title: string;
}

export default function Post({ title }: Props) {
  return (
    <div>
      <h1 class="font-bold">{title}</h1>
      <p>This is an example section</p>
    </div>
  );
}
```

**Pronto!** A Section foi criada localmente no seu projeto.

## 3. Visualize a Section no Admin

Execute o projeto localmente como foi feito anteriormente no
[setup](https://deco.cx/docs/pt/developing-guide/setup). Ao selecionar seu ambiente local no
Admin, voc√™ poder√° visualizar a nova Section na biblioteca de Sections
(**Sections**) e adicion√°-la a uma p√°gina.

![Nova section na section library](https://deco.cx/docs/hello-world/new-section.png)

## 4. Adicionando propriedades √† Section

Vamos adicionar tr√™s novas propriedades ao nosso componente `Post`, uma para
imagem (`photo`), outro para o corpo da postagem (`post`) e um para a hora da
postagem.

```tsx
import type { ImageWidget } from "apps/admin/widgets.ts";
import Image from "apps/website/components/Image.tsx";

export interface Props {
  /**
   * @title Post image.
   */
  photo?: ImageWidget;
  /**
   * @title Post body.
   * @format textarea
   */
  post: string;
  /**
   * @title Publish date.
   * @format datetime
   */
  datetime: string;
  /**
   * @title Post title.
   */
  title: string;
}

export default function Post({ title, photo, datetime, post }: Props) {
  return (
    <div>
      {photo && (
        <Image
          src={photo}
          alt={`${title} image`}
          height={300}
          width={300}
          class="rounded"
        />
      )}
      <h1 class="font-bold text-lg">{title}</h1>
      <p>Published at: {datetime}</p>
      <p>This is an example section</p>
      <p>{post}</p>
    </div>
  );
}
```

Uma Section pode ter como propriedade qualquer elemento que seja serializ√°vel, e
interpret√°vel no formul√°rio de propriedades no admin da deco. Isto inclue:

* `strings` e `numbers`
* Tipos simples de objetos serializ√°veis
* Tipos gerados de uni√£o, extens√£o, `Pick` ou `Omit`
* `Sections` ( `import { Section } from "deco/blocks/section.ts"` )
* `ImageWidget` (`import type { ImageWidget } from "apps/admin/widgets.ts";`) e
  outros components do admin
* Arrays dos tipos indicados acima

Al√©m dos tipos acima, √© poss√≠vel anotar algumas propriedades para que o
formul√°rio do admin altere o mecanismo de inser√ß√£o ou para determinar alguns
aspectos do comportamento da propriedade (atrav√©s da anota√ß√£o `@format`, por
exemplo). Leia mais sobre
[essas anota√ß√µes aqui](https://deco.cx/docs/pt/developing-capabilities/section-properties/widgets)

## 5. Visualizando as novas propriedades no Admin

Com o projeto executando localmente, abra novamente a Section no Admin. Voc√™
ver√° as novas propriedades adicionadas ao componente `Post`. √â poss√≠vel ver que
o admin prepara componentes pr√≥prios de formul√°rio para a inser√ß√£o de imagens,
data, bem como sinaliza o que √© cada campo a partir do `title` indicado em
c√≥digo.

![Formul√°rio da section no admin](https://deco.cx/docs/hello-world/section-properties.png)

## 6. Tematizando a Section

### 6.1 Tema do Site

No projeto base deco, √© poss√≠vel acessar uma Section especial, a `Theme.tsx`.
Esta section define tokens e nomes especiais de classes que podem ser utilizadas
por outras Sections seguindo a estrutura da ferramenta DaisyUI. Dentro do
`Theme.tsx` √© poss√≠vel observar alguns tokens como o de cores principais:

```tsx
export interface MainColors {
  /**
   * @format color
   * @title Base
   * @default #FFFFFF
   */
  "base-100": string;
  /**
   * @format color
   * @title Primary
   * @default #003232
   */
  "primary": string;
  /**
   * @format color
   * @title Scondary
   * @default #8C3D3D
   */
  "secondary": string;
  /**
   * @format color
   * @title Tertiary
   * @default #00FF7F
   */
  "tertiary": string;
}
```

As cores de cada token podem ser alteradas no Admin, na aba de Themes. Nela,
voc√™ pode alterar as cores do seu tema atual ou criar um novo tema.

![Alterando as cores do tema](https://deco.cx/docs/hello-world/themes.png)

### 6.2 Tema de uma p√°gina

Al√©m do tema do site, √© poss√≠vel alterar o tema de uma p√°gina espec√≠fica. Para
isso, basta acessar uma p√°gina espec√≠fica no Admin adicionar a section do tema
desejado.

![Escolhendo o tema de uma p√°gina](https://deco.cx/docs/hello-world/add-section.png)

![Alterando o tema de uma p√°gina](https://deco.cx/docs/hello-world/section-themes.png)

Neste caso, adicionamos na p√°gina My New Page a Section do tema Groovy Vibes.
Esta p√°gina em espec√≠fico agora tem um tema diferente do restante do site.

![Adicionando o tema Groovy Vibes](https://deco.cx/docs/hello-world/page-theme.png)

### 6.3 Estilizando a Section

Adapte a classe de postagens para fazer uso de alguns tokens. Por exemplo, o
t√≠tulo principal da postagem agora segue a cor prim√°ria do tema.

```tsx
import type { ImageWidget } from "apps/admin/widgets.ts";
import Image from "apps/website/components/Image.tsx";

export interface Props {
  /**
   * @title Post image.
   */
  photo?: ImageWidget;
  /**
   * @title Post body.
   * @format textarea
   */
  post: string;
  /**
   * @title Publish date.
   * @format datetime
   */
  datetime: string;
  /**
   * @title Post title.
   */
  title: string;
}

export default function Post({ title, photo, datetime, post }: Props) {
  return (
    <div>
      {photo && (
        <Image
          src={photo}
          alt={`${title} image`}
          height={300}
          width={300}
          class="rounded"
        />
      )}
      <h1 class="font-bold text-lg text-primary">{title}</h1>
      <p>Published at: {datetime}</p>
      <p>This is an example section</p>
      <p>{post}</p>
    </div>
  );
}
```

Agora, a Section `Post` segue o tema do site (ou da p√°gina) e utiliza as cores
definidas no tema.

![Section com tema do site](https://deco.cx/docs/hello-world/new-section-with-theme.png)


# Interatividade com HTMX
Source: https://docs.deco.cx/pt/developing-guide/htmx

Interatividade com HTMX

Este tutorial vai te guiar na integra√ß√£o do HTMX ao seu projeto deco, permitindo
maior interatividade com o m√≠nimo de JavaScript. Vamos criar um contador como
exemplo para ver como deco.cx integra com HTMX.

## O que √© o HTMX?

HTMX permite acessar recursos modernos do navegador diretamente do HTML,
facilitando a constru√ß√£o de aplica√ß√µes web interativas com menos JavaScript.

## Passo 1: Adicionando HTMX ao Seu Projeto

Primeiro, voc√™ precisa incluir a biblioteca HTMX no seu projeto. Voc√™ pode fazer
isso adicionando a seguinte tag de script ao seu HTML:

```html
<script src="https://unpkg.com/htmx.org@1.7.0"></script>
```

## Passo 2: Criando a Vers√£o Preact do Contador

Vamos criar um componente Preact para o contador e ver a diferen√ßa para a vers√£o
com HTMX:

```tsx
import { useState } from "preact/hooks";

export default function Section() {
  const [count, setCount] = useState(0);

  return (
    <div class="container h-screen flex items-center justify-center gap-4">
      <button
        class="btn btn-sm btn-circle btn-outline no-animation"
        onClick={() => setCount(count - 1)}
      >
        <span>-</span>
      </button>
      <span>{count}</span>
      <button
        class="btn btn-sm btn-circle btn-outline no-animation"
        onClick={() => setCount(count + 1)}
      >
        <span>+</span>
      </button>
    </div>
  );
}
```

Aqui, estamos usando o hook `useState` do Preact para gerenciar o estado do
contador e o evento `onClick` para atualizar o contador quando os bot√µes s√£o
clicados.

## Passo 3: Criando a Vers√£o HTMX do Contador

Na vers√£o HTMX, n√£o usaremos mais o hook `useState` nem o evento `onClick`. Ao
usar HTMX, precisamos de uma rota para cada estado da UI, ent√£o faremos uma
solicita√ß√£o ao servidor para atualizar o estado do contador.

√â a√≠ que o [hook `useSection`](https://deco.cx/docs/pt/api-reference/use-section) √© √∫til. Este
hook cria automaticamente rotas para renderizar seus estados de UI sem exigir
que os desenvolvedores lidem manualmente com o roteamento.

Vamos ver o que muda na vers√£o HTMX:

```tsx
import { useSection } from "deco/hooks/useSection.ts";

export default function Section({ count = 0 }: { count: number }) {
  return (
    <div class="container h-screen flex items-center justify-center gap-4">
      <button
        hx-get={useSection({ props: { count: count - 1 } })}
        hx-target="closest section"
        hx-swap="outerHTML"
        class="btn btn-sm btn-circle btn-outline no-animation"
      >
        <span>-</span>
      </button>
      <span>{count}</span>
      <button
        hx-get={useSection({ props: { count: count + 1 } })}
        hx-target="closest section"
        hx-swap="outerHTML"
        class="btn btn-sm btn-circle btn-outline no-animation"
      >
        <span>+</span>
      </button>
    </div>
  );
}
```

Para atualizar o estado, como mencionado antes, estamos usando `hx-get` com o
hook `useSection`. O atributo `hx-get` faz uma solicita√ß√£o GET para a URL
retornada pelo hook `useSection`. A resposta √© um novo HTML com o novo estado da
UI do contador. O atributo `hx-target` define o elemento alvo onde a resposta
ser√° inserida, neste caso, a se√ß√£o mais pr√≥xima do bot√£o. O atributo `hx-swap`
define como a resposta ser√° inserida, neste caso, substituindo todo o elemento
da se√ß√£o pela resposta.

Para ilustrar a diferen√ßa entre as vers√µes Preact e HTMX, vamos us√°-las e ver
como se comportam na aba de Network das ferramentas de desenvolvedor do
navegador.

Enquanto a vers√£o Preact atualiza o estado do contador localmente, a vers√£o HTMX
faz uma requisi√ß√£o ao servidor para atualizar o estado do contador.

![Requisi√ß√µes da vers√£o HTMX](https://deco.cx/docs/developing-guide/htmx/htmx-network.gif)

![Requisi√ß√µes da vers√£o Preact](https://deco.cx/docs/developing-guide/htmx/preact-network.gif)

## Conclus√£o

HTMX √© uma ferramenta poderosa que pode simplificar o processo de adicionar
interatividade √†s suas aplica√ß√µes web. Usando HTMX, voc√™ pode reduzir a
quantidade de JavaScript que precisa escrever e manter, tornando seu c√≥digo mais
limpo e gerenci√°vel.

Para mais informa√ß√µes, confira a [documenta√ß√£o do HTMX](https://htmx.org/docs/)
e a [documenta√ß√£o do deco.cx](https://deco.cx/docs/).


# Configura√ß√£o do ambiente.
Source: https://docs.deco.cx/pt/developing-guide/setup

Configura√ß√£o do ambiente.

* Leia o guia em **Comece agora** para entender os conceitos base e a ferramenta
  de admin da deco

* **Importante**, √© poss√≠vel acessar [nosso Discord](https://deco.cx/discord)
  para reportar d√∫vidas ou problemas com a *deco.cx*. Participe tamb√©m da nossa
  comunidade!

## T√≥picos

1. Tecnologias utilizadas na deco
2. Comece a desenvolver com a deco
3. Desenvolvendo com a deco

## Tecnologias utilizadas na deco

Ao criar um site ou loja online com a *deco.cx*, o usu√°rio tem a flexibilidade
de criar [Sections](https://deco.cx/docs/pt/concepts/section) e
[Loaders](https://deco.cx/docs/pt/concepts/loader) que atendem √†s suas necessidades exclusivas.
Para ajud√°-la a criar esses componentes com facilidade e rapidez, contamos com
um conjunto de tecnologias poderosas e eficientes.

Nossa pilha de tecnologia √© focada em **simplicidade e desempenho**, tornando-a
acess√≠vel a desenvolvedores com experi√™ncia anterior em HTML, CSS, JavaScript e
React. Estas s√£o as principais ferramentas que usamos para alimentar os sites
deco.cx:

### [Preact](https://preactjs.com/)

**Preact** √© uma alternativa r√°pida e leve ao [React.js](https://reactjs.org/),
usado para renderizar componentes de UI no servidor e no cliente. Ele usa *JSX*
para criar componentes da web e geralmente √© bem simples de aprender.

### [Tailwind](https://tailwindcss.com)

**Tailwind** √© uma solu√ß√£o de estilos CSS baseada em classes utilit√°rias, o que
o torna ideal para iniciantes. O Tailwind tamb√©m √© otimizado para performance.

### [Deno](https://deno.com/deploy)

O **Deno** √© um ambiente de execu√ß√£o JavaScript e TypeScript. √â usado para fazer
Sites na deco, escritos em Typescript, executados por um servidor. Deno √©
semelhante a Node.js (*curiosidade*: eles foram
[criados pela mesma pessoa](https://www.youtube.com/watch?v=M3BM9TB-8yA)).

### [Fresh](https://fresh.deno.dev)

O **Fresh** √© um framework web fullstack (backend e frontend) para
desenvolvedores JavaScript e TypeScript. Foi projetado para tornar f√°cil a
cria√ß√£o de aplica√ß√µes web de alta qualidade, alta performance e altamente
personaliz√°veis.

## Comece a desenvolver com a deco

### Ferramentas necess√°rias

A √∫nica configura√ß√£o necess√°ria para codificar sites *deco.cx* √© **instalar o
Deno** em sua m√°quina. Para instalar o Deno, siga as
[instru√ß√µes na p√°gina deno.land](https://deno.land/manual/getting_started/installation).

> Certifique-se de manter o deno atualizado! Caso j√° tenha o deno instalado,
> rode o `deno upgrade` para atualiz√°-lo.

Recomendamos fortemente o uso do
[Visual Studio Code](https://code.visualstudio.com/download) como IDE e do
[Git](https://github.com/git-guides/install-git) para controle de vers√£o.

{/* ## Teste a deco localmente (opcional)!

  A deco oferece um mecanismo para testar e explorar nosso sistema sem a
  necessidade de subir c√≥digo ou fazer um deployment na nossa infraestrutura. Para
  isso, acesse [o Deco Play](https://play.deco.cx/)

  ![deco play](https://github.com/deco-cx/apps/assets/882438/e52c7727-b1c2-44cc-b709-10adba203341) */}

### 1. Crie um site deco.cx

Siga o tutorial de
[Criar um Site Deco](https://deco.cx/docs/pt/getting-started/creating-a-site).

### 2. Clone o reposit√≥rio do seu site

Aceite o convite para se juntar ao reposit√≥rio criado para o seu Site. Esse
convite √© enviado para o endere√ßo de e-mail do seu perfil do Github.

Caso n√£o tenha utilizado uma conta do github para entrar no admin ou caso n√£o
tenha recebido um convite, √© poss√≠vel adicionar uma conta do github como
colaborador do Site na aba Configura√ß√µes do site no Admin.

{/* ![Adicionando colaborador no reposit√≥rio](https://github.com/deco-cx/apps/assets/882438/0cdcc7a7-90fd-4cbe-9eea-0ca68ee533d9) */}

![Adicionando colaborador no reposit√≥rio](https://deco.cx/docs/setup/repository-access.png)

Use o comando `git clone` para baixar o c√≥digo do site para o seu m√°quina.
Recomendamos o uso de SSH. Abra o terminal e execute o comando:

```bash
git clone git@github.com:deco-sites/site-name.git
```

**Lembre-se de alterar `site-name` para o nome do seu site.**

Se preferir, √© poss√≠vel clonar o reposit√≥rio usando outros m√©todos, como *git
https*, por meio da ferramenta *Github* ou atrav√©s de uma IDE. Na p√°gina do
reposit√≥rio no *Github* h√° detalhes sobre algumas diferentes maneiras para fazer
o clone.

### 3. Executar servidor local

Para rodar seu site localmente, editar e ver as mudan√ßas no Admin, voc√™ precisa
ter um ambiente local (um ambiente com `localhost` como host). Para isso, voc√™
pode usar o ambiente `localhost` criado por padr√£o ou criar um novo.

#### 3.1 Crie um novo ambiente

Abra a aba de Releases e clique no bot√£o Novo ambiente no Admin.

![Criar novo ambiente](https://deco.cx/docs/setup/create-environment.png)

#### 3.2 Defina o nome e o host do seu ambiente

Escolha um nome para o seu ambiente e defina seu host como localhost.

![Definindo nome e host do ambiente](https://deco.cx/docs/setup/choose-host.png)

#### 3.3 Execute seu site localmente

Copie o comando mostrado depois da cria√ß√£o do ambiente e cole-o no seu terminal
na pasta do site.

![Comando de iniciar server](https://deco.cx/docs/setup/start-server-command.png)

![Iniciando server no terminal](https://deco.cx/docs/setup/start-server-terminal.png)

Aguarde a inicializa√ß√£o do projeto. Na primeira execu√ß√£o, o deno ir√° baixar e
realizar um cache das depend√™ncias do projeto, e a deco ir√° preparar detalhes do
site.

O site estar√° acess√≠vel em https\://\{nome-do-ambiente}--\{nome-do-site}.deco.site.

{/* > Alguns browsers impedem acessar ou executar c√≥digo no dom√≠nio `localhost`!
  > Desative prote√ß√µes de acesso ou privacidade do browser para acessar esse
  > endere√ßo. */}

Caso o c√≥digo de alguma se√ß√£o em uso na p√°gina inicial do site seja alterado,
isto ser√° refletido no endere√ßo acima.

#### 3.4 Publicando altera√ß√µes

Considerando que voc√™ escolheu o Deco Hosting para o deploy de seu site, o
processo de *deploy* em development √© muito simples: apenas fazer um *git push*
das altera√ß√µes na *branch* ***main***.

Voc√™ tamb√©m pode publicar seu ambiente no pr√≥prio Admin clicando no bot√£o de
Publicar agora, na p√°gina do seu ambiente.

![Publicar mudan√ßas](https://deco.cx/docs/setup/publish-button.png)

## Agora voc√™ pode come√ßar a criar sites cada vez mais do seu jeito! :)

Continue estando a deco para entender o potencial e como criar ou alterar
sections, loaders e outros elementos da deco para criar sites e experi√™ncias
cada vez ,mais personalizadas.

Certifique-se de se juntar ao nosso
[comunidade no Discord](https://deco.cx/discord). Acompanhe as novidades e
continue evoluindo junto com a gente!


# Adicionando um App
Source: https://docs.deco.cx/pt/getting-started/adding-an-app

Adicionando um App

Nesta documenta√ß√£o, vamos te guiar na adi√ß√£o de um `App` ao seu site. Um `App`
permite que voc√™ integre facilmente novas funcionalidades, se√ß√µes e recursos ao
seu site.

## 1. Acessar a P√°gina de Apps

Para adicionar um app ao seu site, clique na aba Apps. Voc√™ ver√° uma lista de
todos os apps dispon√≠veis. Neste caso, vamos adicionar o Weather App.

## 2. Instalar o App

Clique no bot√£o de switch para instalar o app no seu site.

![Instalar app](https://deco.cx/docs/getting-started/adding-an-app/install-app.png)

O Weather App fornece uma se√ß√£o que exibe uma mensagem com a temperatura atual.
Al√©m da se√ß√£o, este app tamb√©m inclui um loader, uma fun√ß√£o TypeScript que
retorna dados tipicamente utilizados em Sections. Este loader espec√≠fico obt√©m a
temperatura de um local determinado (ou da localiza√ß√£o atual se nenhum local for
especificado). Vamos usar ambos e ver como podem ser integrados.

## 3. Usar as Funcionalidades do App

### 3.1 V√° para a Se√ß√£o WhatsTheTemperature

Navegue at√© a P√°gina de Se√ß√µes e clique na Se√ß√£o WhatsTheTemperature. Voc√™ pode
filtrar a lista pelo app.

![P√°gina de Se√ß√µes](https://deco.cx/docs/getting-started/adding-an-app/sections-page.png)

Abra as propriedades da se√ß√£o. A √∫nica propriedade que esta se√ß√£o possui √© a
temperatura, que √© um n√∫mero representando a temperatura em Celsius.

### 3.2 Configure a Se√ß√£o para Usar o Loader do App

Clique no campo Temperatura para escolher como voc√™ vai fornecer a informa√ß√£o de
temperatura.

![Selecionar Fonte de Temperatura](https://deco.cx/docs/getting-started/adding-an-app/select-source.png)

Voc√™ tem tr√™s op√ß√µes:

1. **Entrada Manual**: Forne√ßa um n√∫mero arbitr√°rio para a temperatura.

   ![Entrada Manual](https://deco.cx/docs/getting-started/adding-an-app/manual-entry.png)

2. **Valor Padr√£o**: Deixe o campo de temperatura em branco. A se√ß√£o aceita um
   valor nulo, e uma temperatura fixa padr√£o ser√° exibida.

   ![Valor Padr√£o](https://deco.cx/docs/getting-started/adding-an-app/default-value.png)

3. **Usar o Loader**: Utilize o loader disponibilizado pelo Weather App.

   ![Usar o Loader](https://deco.cx/docs/getting-started/adding-an-app/use-loader.png)

   Se voc√™ n√£o fornecer latitude e longitude, o loader buscar√° a temperatura da
   sua localiza√ß√£o atual. Alternativamente, fornecendo a latitude e a longitude
   de um local espec√≠fico, ser√° retornada a temperatura atual desse local:

   ![Temperatura do Loader](https://deco.cx/docs/getting-started/adding-an-app/loader-temperature.png)

   > Parece que est√° um pouco frio na Groenl√¢ndia.

## 4. Usar a Se√ß√£o em Suas P√°ginas

Agora voc√™ pode usar a se√ß√£o configurada nas p√°ginas do seu site, assim como fez
em [um tutorial anterior](https://deco.cx/docs/pt/getting-started/creating-a-new-page). √â isso!
Aproveite para explorar este e outros apps no deco.cx!


# Gerenciando Mudan√ßas e Publicando
Source: https://docs.deco.cx/pt/getting-started/changes-and-publishing

Aprenda como restaurar vers√µes anteriores do seu site

√â muito importante ter controle e autonomia para gerenciar suas p√°ginas e blocos
e ter a capacidade de fazer e desfazer altera√ß√µes facilmente, se necess√°rio. Com
isso em mente, o *deco.cx* permite que voc√™ crie e gerencie **ambientes**.

## Ver Altera√ß√µes e Publicar

Vamos dar uma olhada nas mudan√ßas que fizemos neste ambiente. Clique no dropdown
e selecione a op√ß√£o staging. Voc√™ ver√° esta p√°gina, mostrando o que foi alterado
em compara√ß√£o com o site em produ√ß√£o. No nosso caso, adicionamos uma nova p√°gina
com algumas se√ß√µes. Essa diferen√ßa √© exibida via JSON, que representa o estado
do site de forma estruturada.

![Mudan√ßas no Ambiente](https://deco.cx/docs/getting-started/changing-and-publishing/env-changes.png)

A partir daqui, voc√™ pode publicar nossas mudan√ßas para a produ√ß√£o clicando no
bot√£o "Publicar agora" ou no bot√£o "Publicar" ao lado do dropdown do ambiente.

### Rebaseando suas Altera√ß√µes

Ao publicar com m√∫ltiplos ambientes, pode ser necess√°rio mesclar suas altera√ß√µes
com as feitas em outros ambientes. Por exemplo, se voc√™ estiver editando seu
site no seu novo ambiente, `maria`, enquanto um colega estiver editando no
ambiente `staging`, e seu colega publicar suas mudan√ßas, voc√™ precisar√° rebasear
seu ambiente para incorporar as novas mudan√ßas que agora est√£o em produ√ß√£o.

Nesse cen√°rio, em vez de ver o bot√£o "Publicar agora" na p√°gina de Lan√ßamentos,
voc√™ ver√° um bot√£o "Rebase", como mostrado abaixo.

![Rebase no ambiente](https://deco.cx/docs/getting-started/changing-and-publishing/rebase.png)

Clique neste bot√£o para incorporar as mudan√ßas de produ√ß√£o no seu ambiente.
Depois de rebasear, voc√™ pode publicar suas altera√ß√µes clicando no bot√£o
"Publicar agora".


# Criando uma P√°gina
Source: https://docs.deco.cx/pt/getting-started/creating-a-new-page

Aprenda como criar p√°ginas na deco.cx sem precisar de c√≥digo

Agora vamos criar uma nova p√°gina para o seu site. O processo √© muito simples:

## 1. Acesse a aba de P√°ginas

P√°ginas t√™m um space dedicado no Admin do Deco.cx, acess√≠vel pela barra lateral.

![Space de p√°ginas](https://deco.cx/docs/getting-started/creating-a-new-page/pages-space.png)

Nesta p√°gina, voc√™ pode ver todas as p√°ginas publicadas no site, junto com os
caminhos pelos quais elas s√£o acess√≠veis aos seus usu√°rios.

Aqui voc√™ pode clicar no bot√£o "Criar nova p√°gina" para criar uma p√°gina.

> Alternativamente, voc√™ pode clicar no bot√£o "Criar p√°gina" na P√°gina Inicial
> do Site ou digitar `/new page` na barra de comando localizada no topo central
> da p√°gina do Admin.

## 2. D√™ um nome e um caminho √† p√°gina

Preencha o formul√°rio de cria√ß√£o de p√°gina com as seguintes informa√ß√µes:

* **Nome:** nome significativo para entender o que essa p√°gina representa. N√£o
  afeta a interface do usu√°rio ou os metadados da p√°gina.
* **Path:** representa a URL que aquela p√°gina estar√° acess√≠vel para seus
  usu√°rios. Pode ser est√°tico (por exemplo: `/posts`) ou din√¢mico (por exemplo:
  `/posts/:slug`, `/search/*`), seguindo o esquema
  [URLPattern](http://mdn.io/urlpattern).
* **Template** (opcional): selecione uma p√°gina j√° existente e comece a partir
  dela.

Aqui, vamos criar uma p√°gina em branco.

![Criando uma nova p√°gina](https://deco.cx/docs/getting-started/creating-a-new-page/new-page.png)

## 3. Edite o conte√∫do da p√°gina

Agora √© poss√≠vel editar e adicionar novas Sections dispon√≠veis em seu site e
configurar a p√°gina do jeito que voc√™ quiser.

Para adicionar um novo componente √† p√°gina, clique no bot√£o "Adicionar Se√ß√µes"
no editor e explore todas as op√ß√µes dispon√≠veis. Se√ß√µes s√£o componentes de UI
(pequenas partes do site) que podem receber propriedades e serem editadas
atrav√©s de um formul√°rio no Admin.

![Adicionando uma se√ß√£o](https://deco.cx/docs/getting-started/creating-a-new-page/add-section.png)

> Se voc√™ deseja desenvolver/codar uma nova se√ß√£o, consulte nosso
> [Guia de desenvolvimento](https://deco.cx/docs/pt/developing-guide/setup).

Vamos selecionar a se√ß√£o Hero.

![Se√ß√£o Hero](https://deco.cx/docs/getting-started/creating-a-new-page/hero.png)

Ap√≥s a sele√ß√£o, podemos ver o formul√°rio onde podemos editar suas propriedades.
Essas propriedades s√£o obtidas a partir das props do TypeScript dessa se√ß√£o.

![Formul√°rio da Se√ß√£o](https://deco.cx/docs/getting-started/creating-a-new-page/section-form.png)

> Nota: O exemplo que voc√™ v√™ acima √© de um bloco reutiliz√°vel, que √© um recurso
> global que pode ser usado por outras p√°ginas. Por isso, voc√™ n√£o pode editar
> essa se√ß√£o a menos que a desanexe para alterar apenas nessa p√°gina ou a edite
> em um novo espa√ßo (o que afetar√° todas as p√°ginas que a utilizam).

Vamos desanexar a se√ß√£o para editar suas propriedades para essa p√°gina. Vamos
mudar o T√≠tulo na propriedade Title. √Ä medida que voc√™ faz altera√ß√µes, a
pr√©-visualiza√ß√£o ser√° atualizada em tempo real para mostrar como a se√ß√£o ficar√°
com os novos valores de propriedade.

![Mudando a Se√ß√£o](https://deco.cx/docs/getting-started/creating-a-new-page/changing-section.png)

Cada componente pode ter diferentes propriedades que podem ser personalizadas.
Essas propriedades s√£o definidas no c√≥digo da se√ß√£o e podem ser acessadas
atrav√©s do objeto props.


# Criando um Site
Source: https://docs.deco.cx/pt/getting-started/creating-a-site

Passo a passo de como criar um site na Deco.cx.


Esta documenta√ß√£o vai te guiar pelo processo de cria√ß√£o e configura√ß√£o do seu
primeiro site usando o Deco.cx. Um site Deco √© o principal ativo para os
usu√°rios do Deco, servindo como o centro para criar, editar e gerenciar seu
pr√≥prio espa√ßo na web.

## 1. Selecionar um Template

V√° para o [Deco Admin](https://admin.deco.cx/spaces/new) e selecione um template
para come√ßar. Neste exemplo, vamos escolher o template de landing page, que tem
a estrutura e componentes comuns a p√°ginas de aterrissagem.

![Escolhendo um template](https://deco.cx/docs/getting-started/creating-site/choose-template.png)

## 2. Explorar o Template

Depois de selecionar um template, voc√™ pode explorar seus componentes em modo
compartilhado de visualiza√ß√£o apenas. Isso permite que voc√™ explore as
configura√ß√µes e recursos do template sem fazer nenhuma altera√ß√£o.

![Editar um site](https://deco.cx/docs/getting-started/creating-site/site-editor.png)

## 3. Salvar Seu Site

Para criar oficialmente seu site a partir do template, clique no bot√£o "Use this
template" no canto superior direito da p√°gina de administra√ß√£o para reivindicar
a propriedade do site.

![Salvar site para sua equipe](https://deco.cx/docs/getting-started/creating-site/save-site-btn.png)

### 3.1. Fa√ßa login na Plataforma

### 3.2. D√™ um Nome ao Seu Site e Escolha uma Equipe

Voc√™ ser√° solicitado a escolher um nome para o seu site e uma equipe para
salv√°-lo:

![Escolhendo um nome e uma equipe para salvar o site](https://deco.cx/docs/getting-started/creating-site/save-site.png)

Se voc√™ ainda n√£o tiver uma equipe, uma ser√° criada com um nome √† sua escolha:

![Escolhendo um nome e uma equipe que voc√™ vai criar](https://deco.cx/docs/getting-started/creating-site/save-site-and-team.png)

A Deco vai configurar seu site de acordo com o template que voc√™ escolheu.

## 4. Finalizar Configura√ß√£o do Site

Voc√™ ser√° redirecionado para a p√°gina inicial do site:

![P√°gina Inicial do Site](https://deco.cx/docs/getting-started/creating-site/site-home.png)

A partir daqui, voc√™ tem duas op√ß√µes:

1. Rodar seu site localmente usando seu ambiente de desenvolvimento local.
   * Isso te d√° o poder de modificar seu site alterando seu c√≥digo, bem como
     usando o Deco Admin.
2. Criar um novo ambiente para editar seu site apenas atrav√©s do Deco Admin.
   * Aqui voc√™ pode fazer altera√ß√µes no seu site sem precisar ter acesso ao
     c√≥digo do site.

### Op√ß√£o 1: Rodar Seu Site Localmente

Para rodar seu site localmente, voc√™ precisa:

1. Instalar o Deno na sua m√°quina. Voc√™ pode seguir as instru√ß√µes no
   [site do Deno](https://deno.land/).
2. Clonar o reposit√≥rio do site:
   ```bash
   git clone git@github.com:deco-sites/maria-landing.git
   ```
3. Entrar na pasta do reposit√≥rio e iniciar o servidor:
   ```bash
   cd maria-landing
   DECO_ENV_NAME=localhost deno task start
   ```

Agora, voc√™ pode modificar o c√≥digo e ver as mudan√ßas no Admin e vice-versa.

### Op√ß√£o 2: Criar um Novo Ambiente

Ambientes s√£o espa√ßos de trabalho isolados onde voc√™ pode fazer altera√ß√µes no
seu site sem afetar o site ao vivo. Para criar um novo ambiente:

1. Clique no bot√£o "New" no dropdown de ambientes no Admin.
   ![Bot√£o Novo Ambiente](https://deco.cx/docs/getting-started/creating-site/new-env-btn.png)
2. Escolha um nome e um host para o seu ambiente. Como n√£o vamos rodar o site
   localmente, selecione a op√ß√£o Web para o host.
   ![Formul√°rio Novo Ambiente](https://deco.cx/docs/getting-started/creating-site/new-env-form.png)

Agora voc√™ tem seu pr√≥prio ambiente e espa√ßo de trabalho isolado para fazer
altera√ß√µes no seu site sem precisar rodar seu c√≥digo.

## (Opcional) 5. Deploy do Seu Site

Se voc√™ quiser fazer o deploy do seu site usando o Hosting da Deco, voc√™ pode
fazer isso clicando no bot√£o "Add Deco Hosting" na p√°gina inicial do site ou no
bot√£o "Go live" no dropdown de ambientes.

<Frame>
  <img src="https://deco.cx/docs/getting-started/creating-site/go-live-btn.png" alt="Bot√£o de Deploy do site" width="340" />
</Frame>

Seu site se tornar√° acess√≠vel atrav√©s de uma URL p√∫blica como
`https://deco-sites-maria-landing.deno.dev/`.

Esse deploy incluir√° 5.000 visualiza√ß√µes de p√°gina (compartilhadas entre todos
os sites da equipe). Se voc√™ precisar de mais visualiza√ß√µes de p√°gina, voc√™ pode
[atualizar seu plano](https://deco.cx/en/pricing) no Deco Admin.

## 6. Parab√©ns! Voc√™ Criou Seu Primeiro Site Deco

√â isso a√≠! Agora voc√™ pode editar seu site como quiser. N√£o se esque√ßa de seguir
os pr√≥ximos tutoriais para descobrir mais recursos e capacidades do Deco.cx.


# Redirecionando sem WWW
Source: https://docs.deco.cx/pt/getting-started/custom-domains/apex-domains

Como redirecionar dom√≠nio sem www

## O que √© dom√≠nio apex?

Dom√≠nio apex √© o termo utilizado para dom√≠nio raiz, sem subdom√≠nio.

Exemplo:

* `www.example.com.br` -> Subdom√≠nio
* `loja.example.com.br` -> Subdom√≠nio
* `example.com.br` - Dom√≠nio Apex

## Posso apontar um site deco.cx para o dom√≠nio apex?

N√£o, ainda n√£o √© poss√≠vel apontar um site deco.cx para o seu dom√≠nio apex.

Por isso, criamos uma solu√ß√£o f√°cil de redirecionamento, para que os acessos ao
dom√≠nio Apex n√£o sejam perdidos.

## Como redirecionar um dom√≠nio apex na deco.cx?

1 - No painel do seu site na deco.cx, acesse a p√°gina de Configura√ß√µes.

2 - Clique em "Adicionar dom√≠nio existente"

3 - Insira o seu dom√≠nio apex (sem subdom√≠nio):

![Domain step](https://deco.cx/docs/getting-started/custom-domains/apex-domain.png)

4 - Defina para qual subdom√≠nio redirecionar:

![Sudomain step](https://deco.cx/docs/getting-started/custom-domains/subdomain.png)

5 - Agora, voc√™ ver√° os apontamentos que devem ser feitos na sua plataforma de
hospedagem de dom√≠nio:

![DNS Setup](https://deco.cx/docs/getting-started/custom-domains/validate-apex.png)

6 - Ap√≥s realizar as configura√ß√µes, clique em Validar Dom√≠nio.

A etapa de valida√ß√£o √© essencial para o funcionamento e ela depende da
propaga√ß√£o do DNS configurado no servi√ßo de hospedagem.

No geral, a propaga√ß√£o ocorre dentro algumas horas, mas pode levar at√© 48 horas
em alguns casos.


# Configurando GTM
Source: https://docs.deco.cx/pt/getting-started/gtm

Aprenda como configurar o GTM na Deco

Adicionar o Google Tag Manager (GTM) √© uma pr√°tica comum em muitos sites. A
plataforma deco.cx oferece uma section que facilita a integra√ß√£o autom√°tica do
GTM ao seu site. No entanto, √© importante notar que o uso de um GTM com muitos
scripts pode impactar negativamente a experi√™ncia de navega√ß√£o e desempenho do
site.

## Adicionando uma Section Global para Carregamento no Site

Uma boa pr√°tica √© adicionar a section que carrega o script GTM em todas as
p√°ginas do site. Isso pode ser feito utilizando sections globais, que s√£o
carregadas automaticamente em todas as p√°ginas geradas no admin. No caso de
p√°ginas proxied, √© necess√°rio inserir o script diretamente na origem.

Comece selecionando o app do site:

![Selecionando o app do site](https://deco.cx/docs/gtm/select-app.png)

Em seguida, localize as propriedades das sections globais:

![Sections Globais](https://deco.cx/docs/gtm/global-sections.png)

Por fim, adicione a section de Analytics:

![Adicionando section de Analytics](https://deco.cx/docs/gtm/add-analytics.png)

## Configurando sua Section

A section padr√£o de Analytics oferece v√°rias op√ß√µes de configura√ß√£o. Se voc√™ j√°
tem o ID do container GTM, basta inseri-lo no campo "Tracking ID" para ativar o
uso no site. Se estiver utilizando um Measurement ID, tamb√©m pode configurar
essa propriedade.

Al√©m disso, √© poss√≠vel configurar fontes (sources) personalizadas para o site.

![Configurando sua section](https://deco.cx/docs/gtm/configure-your-section.png)

## Configurando um GTM por P√°gina

Tamb√©m existe a op√ß√£o de adicionar a section de Analytics em p√°ginas
espec√≠ficas. Dessa forma, cada p√°gina pode ter seu pr√≥prio GTM, permitindo o uso
de diferentes configura√ß√µes para diferentes se√ß√µes do site.


# O que √© deco.cx
Source: https://docs.deco.cx/pt/getting-started/overview

deco.cx √© um construtor de sites que permite criar, personalizar e implantar sites com facilidade. Com foco na personaliza√ß√£o, voc√™ pode criar experimentos, segmentar conte√∫do por p√∫blico-alvo e muito mais.


## A Web est√° quebrada, complicada e fragmentada.

Nos √∫ltimos 10 anos, nossa equipe construiu sites e aplicativos de alto volume e
miss√£o cr√≠tica. Testamos a maioria dos novos frameworks e arquiteturas frontend,
desde KnockoutJS at√© React e GraphQL. Refletindo sobre nossos desafios e
resultados, acreditamos que <u>o estado atual do desenvolvimento web est√°
quebrado</u>:

<div>
  üß© <u>A complexidade para construir e implantar um aplicativo web tem
  aumentado</u> constantemente, desencorajando desenvolvedores juniores a
  construir para a web.

  üòì <u>Desenvolvedores e criadores de conte√∫do frequentemente t√™m dificuldade em
  colaborar</u> porque o CMS Headless se torna um silo, exigindo muito tempo para
  integrar e evoluir;

  üê¢ <u>Aplicativos orientados para o cliente t√™m um desempenho terr√≠vel para
  sites de alto volume</u>, impulsionados por conte√∫do, como lojas de com√©rcio
  eletr√¥nico, que enviam quantidades cada vez maiores de c√≥digo JavaScript.
</div>

Quer√≠amos uma maneira mais simples para os desenvolvedores web constru√≠rem e
colaborarem com seus colegas de marketing, usando tecnologias web modernas e sem
precisar configurar tantas coisas. "No-code" n√£o √© suficiente e muitas vezes
retira poder dos desenvolvedores. Quer√≠amos ter um ambiente √∫nico, desde o
c√≥digo at√© o conte√∫do e os dados. Quer√≠amos construir o outro lado do c√≥digo, um
construtor de experi√™ncias colaborativo para desenvolvedores e criadores de
conte√∫do trabalharem juntos.

<iframe width="100%" height="396" src="https://www.youtube.com/embed/HAOy2wXASBA?si=UdeZM3XGhpPx9G3T" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen />

## Tornando o desenvolvimento web simples para equipes de todos os tamanhos

√â por isso que criamos deco.cx: uma plataforma completa de desenvolvimento web
para desenvolvedores e equipes de conte√∫do constru√≠rem experi√™ncias
colaborativas juntos. <u>Os desenvolvedores escrevem componentes e fun√ß√µes
usando Deno, JSX, HTMX, TypeScript e Tailwind</u>. N√≥s geramos automaticamente
uma bela interface de administra√ß√£o visual a partir do c√≥digo TypeScript!

Esque√ßa a configura√ß√£o cara e complexa de um CMS Headless, ou a estrutura
inflex√≠vel de uma pris√£o no-code. deco.cx oferece uma solu√ß√£o perfeita, tornando
o desenvolvimento web simples para equipes de todos os tamanhos:

<div>
  üîß Editor de c√≥digo local ou baseado na web com visualiza√ß√£o de conte√∫do em
  tempo real

  üìù Convers√£o autom√°tica de c√≥digo TypeScript para Esquemas de Conte√∫do

  üë• Colabora√ß√£o em tempo real e hist√≥rico de lan√ßamento baseado em Git com
  rollback f√°cil

  ü§ñ Decopilot, nosso assistente de IA para cria√ß√£o de c√≥digo e conte√∫do

  üåç Editor de SEO global e espec√≠fico da p√°gina

  üé® Editor de Temas personaliz√°vel usando Tailwind e DaisyUI (importa√ß√£o com IA!)

  üè¢ Recursos de n√≠vel empresarial, incluindo controle total sobre ciclos de
  lan√ßamento, permiss√µes baseadas em fun√ß√µes, an√°lise web em tempo real com
  Plausible e monitoramento de erros com HyperDX.
</div>

## Por que escolher deco.cx

### Do c√≥digo ao conte√∫do colaborativo - crie sua pr√≥pria solu√ß√£o no-code personalizada

Lidar com editores de "tipo de conte√∫do" √© uma dor de cabe√ßa. Com deco.cx, voc√™
apenas <u>escreve componentes React (JSX) com TypeScript</u> e n√≥s <u>geramos
automaticamente um editor no-code</u> que corresponde √†s suas Props.

<Frame>
  <img width="640" alt="TS to props" src="https://deco.cx/docs/overview/tstoprops.png" />
</Frame>

### Pacote poderoso: an√°lise em tempo real e observabilidade prontas para uso

Configurar sua pilha de observabilidade e an√°lise pode ser devastador. Deco vem
com ferramentas abrangentes que permitem a qualquer pessoa <u>verificar logs de
erros, rastreamento e m√©tricas para ter controle total</u>.

<Frame>
  <img width="640" alt="TS to props" src="https://deco.cx/docs/overview/analytics.png" />
</Frame>

### Biblioteca de componentes baseada em SSR JSX + HTMX tailwind ultra leve

Escolhemos cuidadosamente uma pilha que prioriza o desempenho sem sacrificar a
simplicidade. Nossa pilha inclui tecnologias como htmx, que permite uma

<u>comunica√ß√£o perfeita e eficiente entre o cliente e o servidor</u>.

<Frame>
  <img width="640" alt="TS to props" src="https://deco.cx/docs/overview/stack.png" />
</Frame>

## Comunidade, aprendizado e Get Site Done

* [Junte-se √† nossa comunidade no Discord!](https://deco.cx/discord)
* [Matricule-se em nossos cursos deco.camp](https://deco.camp)
* [Get Site Done!](https://www.getsitedone.com/)

## Pr√≥ximos passos!

* [Primeiros passos](https://deco.cx/docs/pt/getting-started/creating-a-site): D√™ seus
  primeiros passos com deco! Saiba mais sobre nosso CMS e os conceitos b√°sicos.
* [Guia de Desenvolvimento](https://deco.cx/docs/pt/developing-guide/setup): Aprenda a
  programar seu site usando nosso framework.
* [Recursos do CMS](https://deco.cx/docs/pt/cms-capabilities/home): Explore o que nosso CMS
  pode fazer al√©m do b√°sico.
* [Recursos de Desenvolvimento](https://deco.cx/docs/pt/developing-capabilities/blocks):
  Encontre refer√™ncias para implementar funcionalidades avan√ßadas em nosso
  framework.


# null
Source: https://docs.deco.cx/pt/performance/edge-async-render

Documentation on async rendering in Deco.cx.

## Introdu√ß√£o

A renderiza√ß√£o ass√≠ncrona √© uma t√©cnica essencial para melhorar a performance e
a experi√™ncia do usu√°rio em aplica√ß√µes web modernas. Este recurso na deco.cx
utiliza o paradigma de carregamento progressivo para carregar se√ß√µes de uma
p√°gina de forma ass√≠ncrona: renderizando o conte√∫do das requisi√ß√µes r√°pidas e
recorrendo a esqueletos e estados de carregamento para o conte√∫do de requisi√ß√µes
lentas, oferecendo aos usu√°rios uma experi√™ncia visual imediata.

## Como funciona

A renderiza√ß√£o ass√≠ncrona na deco.cx √© baseada em loaders, que s√£o componentes
respons√°veis por carregar os dados necess√°rios para alguma se√ß√£o. Os loaders
est√£o vinculados a um or√ßamento de tempo. Uma vez atingido esse limite, os
loaders que conclu√≠ram seu trabalho ter√£o seu conte√∫do renderizado no HTML final
como de costume. Os loaders que consomem APIs lentas levantar√£o uma exce√ß√£o e um
estado de carregamento ser√° renderizado nas se√ß√µes que consomem este carregador.
Este estado de carregamento usar√° nosso recurso
[Partials](https://deco.cx/docs/en/developing-capabilities/interactive-sections/partial) para
hidratar e substituir a se√ß√£o ausente pregui√ßosamente.

### Stale Edge Cache

O async render na deco.cx tamb√©m conta com o recurso de "Stale Edge Cache", uma
abordagem que permite caching de se√ß√µes lazy-loaded, reduzindo
significativamente os tempos de resposta e melhorando o tempo de carregamento.
Com o Stale Edge Cache, a primeira resposta do servidor da se√ß√£o √© armazenada em
cache no CDN. As requisi√ß√µes subsequentes s√£o respondidas com essa resposta em
cache, reduzindo drasticamente o tempo total de resposta para apenas a lat√™ncia
entre o navegador e o CDN, mais o tempo de download do conte√∫do.

![Stale Edge Cache](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/3d9ee3b7-cce2-47f3-a320-2a72b2e63e2a)

Essa funcionalidade est√° ativada por padr√£o para todas as se√ß√µes, mas pode ser
desativada se necess√°rio.

### Como ativar a renderiza√ß√£o ass√≠ncrona

Esse recurso √© ativado por padr√£o nas sections dos sites na deco. Para
desativar, basta desabilitar a op√ß√£o `Otimization` nas propriedades da section
no Admin.

![Desativar renderiza√ß√£o ass√≠ncrona](https://deco.cx/docs/performance/disable-async-render.png)

### Benef√≠cios

* **Melhoria de Performance**: Carrega apenas os componentes necess√°rios no
  momento, reduzindo o tempo de carregamento inicial da p√°gina.
* **Redu√ß√£o de Lat√™ncia**: Com o cache das respostas, os tempos de resposta s√£o
  significativamente reduzidos.
* **Melhor UX**: Evita o bloqueio da interface e minimiza mudan√ßas de layout
  durante o carregamento.

### Minimiza√ß√£o de Content Layout Shifts (CLS)

Para garantir uma experi√™ncia de usu√°rio suave, recomenda-se a implementa√ß√£o do
componente `LoadingFallback` em todas as se√ß√µes do site. Esse componente fornece
um estado de carregamento personalizado durante o processo de renderiza√ß√£o
ass√≠ncrona, minimizando poss√≠veis mudan√ßas de layout.

Voc√™ pode encontrar mais informa√ß√µes sobre o componente
[`LoadingFallback` em nossa documenta√ß√£o](https://deco.cx/docs/en/developing-capabilities/sections/loading-fallback).

## Conclus√£o

A renderiza√ß√£o ass√≠ncrona √© uma t√©cnica poderosa para melhorar a performance e a
experi√™ncia do usu√°rio em aplica√ß√µes web. Com a implementa√ß√£o e evolu√ß√£o da
renderiza√ß√£o ass√≠ncrona na plataforma deco.cx, ficou ainda mais f√°cil e
eficiente adotar essa t√©cnica em seus projetos.

Para mais informa√ß√µes, consulte os blogposts
[Renderiza√ß√£o Ass√≠ncrona](https://deco.cx/en/blog/async-rendering) e
[Mais sobre Renderiza√ß√£o Ass√≠ncrona](https://deco.cx/en/blog/async-render-default).


# O guia deco para performance
Source: https://docs.deco.cx/pt/performance/guide

O guia deco para performance

## Tr√™s regras para o alto desempenho

### Entenda o framework e arquitetura do sistema

Usar uma ferramenta de forma eficiente implica em entender seus componentes e
capacidades. Isso permite ter uma base de c√≥digo saud√°vel desde o come√ßo.

> **Exemplo**: a deco oferece componentes como `Image` que ajudam a acelerar a
> entrega de imagens de forma eficiente, mas nada impede que o usu√°rio continue
> usando o elemento `img`.

### Aprenda a analisar o desempenho

Aprenda a analisar o desempenho das suas p√°ginas. Navegar em uma p√°gina n√£o deve
ser algo lento, nem mesmo para voc√™. **Se est√° lento para o desenvolvedor,
estar√° para o usu√°rio**. Entenda as ferramentas dispon√≠veis e como elas
funcionam.

### Acompanhar o desempenho √© uma tarefa cont√≠nua

Uma vez que o sistema para de performar, √© comum deixar de se importar com este
aspecto at√© que se torne bem mais dif√≠cil fazer corre√ß√µes. A detec√ß√£o de
problemas de desempenho √© uma tarefa cont√≠nua, mas n√£o deve ser um fim por si
s√≥.

> **Importante**: o mais importante (a regra de ouro) √© a experi√™ncia do
> usu√°rio. Por vezes, o sistema pode n√£o entregar o melhor desempenho, desde que
> isso seja uma decis√£o consciente para entregar a melhor experi√™ncia ao
> usu√°rio.

## Analisando o desempenho de uma p√°gina

Testar o desempenho passa por entender uma s√©rie de ferramentas e poss√≠veis
m√©tricas que buscadm entender o que deve ser melhorado (e como). Existem
ferramentas que ajudam neste processo. Entenda como e quando utiliz√°-las.

### Testando localmente

![Exemplo de uso de ferramentas do browser para depura√ß√£o](https://github.com/deco-sites/starting/assets/882438/bf441a9a-5af7-4c83-aa4a-c409c2cfb84c)

**Sempre teste localmente a sua p√°gina, section, loader ou action. Por vezes,
n√£o precisa ser um teste estruturado**. Se j√° estiver lento para voc√™, j√° estar√°
para o usu√°rio.

Execute as vers√µes de teste deployadas. Em seguida, use as ferramentas
dispon√≠veis no pr√≥prio browser para depurar problemas de desmpenho. Com elas √©
poss√≠vel acompanhar o desempenho da p√°gina em detalhes, e simular condi√ß√µes
adversas (como uma rede ou cpu de menor qualidade). Mais informa√ß√µes no guia
abaixo:

### Teste de pagespeed

![Exemplo de teste no pagespeed](https://github.com/deco-sites/starting/assets/882438/35d915a9-1fa0-4c87-b5b5-74cd60bec8f0)

O [pagespeed](https://pagespeed.web.dev/) √© uma ferramenta de teste desenvolvida
pela google para avaliar principais aspectos de desempenho de uma p√°gina.
Explora m√©tricas como quanto tempo at√© que seja exibido algum conte√∫do, quanto
tempo o sistema passa a ser interag√≠vel, etc.

As principais m√©tricas s√£o descritas abaixo:

| M√©trica     | Significado                                                | exemplo de bom valor |
| ----------- | ---------------------------------------------------------- | -------------------- |
| FCP         | Tempo at√© a primeira exibi√ß√£o de conte√∫do                  | at√© 1,8s             |
| LCP         | Tempo at√© a maior exibi√ß√£o de conte√∫do                     | at√© 2,5s             |
| TBT         | Tempo cr√≠tico bloqueante at√© que o usu√°rio possa interagir | 200ms                |
| Speed Index | √çndice do desempenho da p√°gina em popular conte√∫do         | at√© 3,4              |
| CLS         | √çndice da quantidade de mudan√ßas de layout cumulativa      | at√© 0,1              |

> [fonte (adaptado)](https://web.dev/articles/fcp?hl=pt-br)

A google agrega essas m√©tricas em um √≠ndice entre 0 e 100, gerando a nota do
pagespeed.

Como √© um teste execut√°vel em um ambiente em produ√ß√£o, ele √© sujeito a
varia√ß√µes, no entanto, uma queda abrupta no valor do pagespeed implica em olhar
para o desempenho da p√°gina o quanto antes.

### Teste de m√©tricas deco

![Exemplos de m√©tricas deco](https://github.com/deco-sites/starting/assets/882438/af592b39-0f4d-405f-a0c6-a212b1677058)

Por padr√£o a deco oferece um conjunto de m√©tricas que s√£o avaliadas em uma
p√°gina. Estas m√©tricas s√£o especializadas especialmente para sistemas como a
deco (SSR com hidrata√ß√£o e com muito carregamento de dados externos).

| M√©trica           | Significado                                               |
| ----------------- | --------------------------------------------------------- |
| Config LCP        | Configura√ß√µes de carregamento do maior conte√∫do da p√°gina |
| Page HTML         | Tamanho da p√°gina em bytes                                |
| Page Islands      | N√∫mero de ilhas na p√°ginas                                |
| Islands Props     | Tamanho em bytes das propriedades das ilhas               |
| Loaders latencies | Tempo de resposta dos loaders da p√°gina                   |

Cada m√©trica √© decomposta nas partes que a comp√µe, permitindo identificar melhor
uma poss√≠vel fonte de perda de performance. N√£o existe um valor ideal para cada
m√©trica, mas √© importante entender que uma HTML grande impacta no tempo de
resposta para o usu√°rio e em m√©tricas como pagespeed.

Um usu√°rio que baixa a `100 kb/s` levar√° `5s` para baixar uma p√°gina de
`500 kb`. Isto √© especialmente impactante para usu√°rios de dispositivos m√≥veis
operando em redes ou situa√ß√µes de baixa capacidade de banda.

### Teste do Core Web Vitals

![Exemplo de teste do CWV](https://github.com/deco-sites/starting/assets/882438/f911058f-34b4-4c49-a24b-9351d630a752)

At√© agora, exploramos apenas testes sint√©ticos, ou seja, testes que s√£o
realizados de maneira artificial e que s√£o apenas uma aproxima√ß√£o do mundo real.
S√£o testes relevantes pois uma queda de desempenho em um teste sint√©tico,
costuma ser refletido como uam queda de desempenho no mundo real.

O Core Web Vitals representa uma cole√ß√£o de m√©tricas extra√≠das a partir da
experi√™ncia real de usu√°rios. Ela inclui m√©tricas do pagespeed bem como outras
m√©tricas espec√≠ficas da intera√ß√£o real de usu√°rios.

> Acesse atrav√©s do site
> [CrUX da google](https://developer.chrome.com/docs/crux/dashboard) ou
> diretamente da App CrUX no seu site deco.

Por ser uma m√©trica coletada, ela s√≥ tem significado agregado. A google
categoriza os valores tipicamente m√™s-a-m√™s, por isso √© mais uma m√©trica de
acompanhamento para diagnosticar eventuais problemas de comportamento que
passaram desapercebidos ao longo do tempo, ou que refletem a mudan√ßa de p√∫blico
da p√°gina.

### Depurando problemas de performance

Se, no entanto, nenhuma das ferramentas auxiliar no processo de identifica√ß√£o de
um problema de desempenho, execute alguns testes manuais que podem identificar a
causa do problema:

* Se voc√™ n√£o souber que mudan√ßa causou uma perda de performance:
  * Teste vers√µes antigas do sistema para verificar qual vers√£o impactou no
    desempenho

* Caso n√£o esteja claro, dentro de uma vers√£o, o que a torna lenta, elimine
  parte do sistema at√© identificar a causa.
  * Para uma p√°gina lenta, elimine algumas `sections`, at√© que a p√°gina volte a
    ter um bom desempenho. A `section` mais recentemente apagada (ou seus
    `loaders` ou `ilhas`) pode ser a causa do problema.
  * Elimine depend√™ncias que tenha adicionado. Verifique se o sistema melhora
    com isso.

* Atualize as suas depend√™ncias.
  * Melhorias de desempenho s√£o constantemente adicionadas ao sistema e podem
    corrigir problemas que levam a lentid√£o.

## Melhorias de desempenhos

Ap√≥s identificar um problema, seja por uma experi√™ncia negativa ou por alguns
dos testes indicarem alguma m√©trica com valor inadequado, √© preciso atuar.

Cada teste acima indica, para cada m√©trica, poss√≠veis culpados e aonde olhar.
Caso tenha identificado o culpado, siga um dos guias abaixo para implementar
melhorias relacionadas.

Observe que as situa√ß√µes em que voc√™ deve atuar s√£o s√≥ exemplos de alguns casos.

### üñºÔ∏è Imagens (jpg, png, gifs, ...)

**Quando atuar**...

* Valor alto de LCP (maior imagem demora a ser baixada / vista)
* P√°ginas "sambando" na tela
* Grande tamanho das imagens baixadas

**Guia**: [Otimizando imagens](https://deco.cx/docs/performance/medias/images)

> **Dica**: use os componentes deco de imagens, como `<Image>` e `<Picture>`, e
> os configure corretamente, incluindo largura e altura.

### üìà Imagens (SVG)

**Quando atuar**...

* Tamanho das p√°ginas √© grande e as p√°ginas contem SVGs embutidos e repetidos
* Problemas no Speedindex

**Guia**: [Otimizando SVGs](https://deco.cx/docs/performance/medias/svg-sprites)

### üñπ Fontes

**Quando atuar**...

* O texto parece "mudar de tamanho" repentinamente
* O arquivo de fonte demora a ser carregado
* Valor alto de FCP (apontando a fonte como problema)

**Guia**: [Otimizando fontes](https://deco.cx/docs/performance/medias/fonts)

> **Dica**: Use fontes padr√£o oferecidas pela google. Se preciso use fontes de
> pouco tamanho (dando prefer√™ncia a woff/woff2).

### üìú Scripts de terceiros

**Quando atuar**...

* O sistema demora a carregar (TBT alto)
* A tela "samba" por causa de um componente inserido por um script terceiro (CLS
  alto)
* Um script de terceiro √© tem um tamanho grande

**Guia**: [Otimizando scripts](https://deco.cx/docs/performance/lazy-3rd-party-scripts)

> **Dica**: Tente s√≥ usar o que for extritamente necess√°rio ou substituir
> scripts de terceiros por vers√µes mais leves. Se n√£o for poss√≠vel, postergue a
> execu√ß√£o do script para depois que a p√°gina j√° estiver carregado e o usu√°rio
> estiver interagindo com ela.

### üîÑ Efici√™ncia no carregamento de dados (loaders)

**Quando atuar**...

* O sistema indica alta lat√™ncia de um loader
* A p√°gina demora a carregar inicialmente
* O tamanho das props em ilhas √© grande

**Guia**: [Otimizando loaders](https://deco.cx/docs/performance/loaders)

> **Dicas**:
>
> * Use `inline loaders` para transformar dados a serem enviados a uma section
>   e/ou ilha
> * Considere postergar a exibi√ß√£o (`Deferred`) de sections com loaders custosos
> * Altere as props do loader para diminuir a quantidade de dados carregados nos
>   loaders
> * Salve os loaders que s√£o reutilizados em diferentes p√°ginas/sections

### üèùÔ∏è Ilhas

**Quando atuar**...

* O sistema indica um grande n√∫mero de ilhas
* A p√°gina demora a carregar inicialmente
* O tamanho das props em ilhas √© grande

**Guia**: [Otimizando ilhas](https://deco.cx/docs/performance/islands)

> **Dicas**: Prefira CSS puro para evitar ilhas. Utilize `children` para passar
> um JSX para dentro de uma ilha. Reduza o m√°ximo poss√≠vel o escopo da ilha
> (ex.: prefira um bot√£o como ilha, do que todo um `form`).

## Fontes relevantes

* [web.dev - Core Web Vitals](https://web.dev/explore/learn-core-web-vitals?hl=pt-br)

* [MDN - Web Performance](https://developer.mozilla.org/en-US/docs/Learn/Performance)


# null
Source: https://docs.deco.cx/pt/performance/islands

Enviando apenas dados necess√°rios ao cliente

## Resumo

> Uma ilha determina um componente interativo e que ser√° hidratado no lado do
> cliente. O servidor manda todos os dados das `props` de ilhas para fazer a
> hidrata√ß√£o, bem como o browser precisa de tempo para processar e renderizar
> essas ilhas.
>
> Por isso, √© importante tomar alguns cuidados no uso de ilhas:
>
> 1. Reduza ao m√°ximo a quantidade de props a ser enviada / utilizada para uma
>    ilha
> 2. Torne uma ilha apenas o que for necess√°rio, lembrando de usar o `children`
>    para elementos internos que n√£o precisam de hidrata√ß√£o.

## Reduzindo o tamanho do JSON de props enviado para as ilhas

Ao carregar dados de APIs externas usando [Loaders](https://deco.cx/docs/pt/concepts/loader) e
envi√°-los para a [Section](https://deco.cx/docs/pt/concepts/section), √© poss√≠vel que o tamanho
do *payload* impacte negativamente a performance do site. O impacto ocorre tanto
no tempo inicial de carregamento como tamb√©m na
[hidrata√ß√£o](https://blog.saeloun.com/2021/12/16/hydration/), onde a p√°gina √©
"inicializada" no browser para que possa ser interativa (usar `useEffect`,
`useSignal`, etc...). √â poss√≠vel visualizar no tamanho do JSON final atrav√©s da
aba **Performance** de uma das p√°ginas do seu site no CMS deco.

<Frame>
  <img width="640" alt="Informa√ß√µes de performance de uma p√°gina" src="https://deco.cx/docs/performance/performance-tab.png" />
</Frame>

Quando o tamanho do JSON passa de \~500kb, √© prov√°vel que a UI n√£o precise do
dado completo, mas sim alguma parte dele (ou ent√£o uma computa√ß√£o sobre outros
valores). Para diminuir esse tamanho e melhorar a performance da p√°gina, √©
poss√≠vel **filtrar os dados** ainda no Loader para que apenas o necess√°rio seja
passado para a UI.

### Reduzindo dados enviados √†s ilhas

Nesse primeiro exemplo, mostraremos como evitar enviar muitos dados para uma
ilha. Digamos que existe um componente chamado ProductCard, que recebe todo o
JSON de um produto.

```tsx
import Image from "apps/website/components/Image.tsx";

export default function ProductCard({ product }: Props) {
  return (
    <div>
      <Image src={product.image} width="100" height="100" />
    </div>
  );
}
```

Nele, voc√™ deseja incluir uma
[Island](https://fresh.deno.dev/docs/concepts/islands) para criar o bot√£o de
comprar.

```tsx
import BuyButton from "$store/components/ui";
import Image from "apps/website/components/Image.tsx";

export default function ProductCard({ product }: Props) {
  return (
    <div>
      <Image src={product.image} width="100" height="100" />
      <BuyButton />
    </div>
  );
}
```

√â poss√≠vel que esse BuyButton, precise de algumas informa√ß√µes do produto para
poder adicionar ao carrinho.

Aqui que devemos tomar cuidado a quantidade de dados enviados para a Island. Por
exemplo, √© bem poss√≠vel que o bot√£o de comprar n√£o precise receber dados de
imagem.

O ideal √© enviar apenas os dados necess√°rios

> ‚ùå Abordagem inadequada

```tsx
import BuyButton from "$store/components/ui";
import Image from "apps/website/components/Image.tsx";

export default function ProductCard({ product }: Props) {
  return (
    <div>
      <Image src={product.image} width="100" height="100" />
      <BuyButton product={product} />
    </div>
  );
}
```

> ‚úÖ Abordagem correta

```tsx
import BuyButton from "$store/components/ui";
import Image from "apps/website/components/Image.tsx";

export default function ProductCard({ product }: Props) {
  return (
    <div>
      <Image src={product.image} width="100" height="100" />
      <BuyButton id={product.id} seller={product.seller} />
    </div>
  );
}
```

A abordagem correta envia apenas os dados de ID e Seller, que no exemplo, s√£o os
√∫nicos necess√°rios na Island.

Assim, no momento de hidrata√ß√£o, o JSON que a Island ir√° carregar n√£o ser√° t√£o
grande.

### Reduzindo o escopo de uma ilha

Uma ilha e seus componentes ser√£o todos hidratados do lado do cliente para
poderem operar. Isto significa que, para todos os elementos definidos da ilha,
eles ser√£o recursivamente hidratados.

√â poss√≠vel reduzir o escopo da ilha, fazendo com que, qualquer elemento interno,
seja passado como `children` da ilha.

> ‚ùå Abordagem inadequada

No exemplo abaixo, criamos uma ilha que interage com o `localStorage` para
definir um t√≠tulo para uma galeria de itens. No exemplo abaixo, tanto os props
de gallery ser√£o inseridos para hidratar o `TitleContainer`, como ser√£o tamb√©m
inseridos para poder hidratar o `Gallery`.

```tsx
import { computed } from "@preact/signals";
import { IS_BROWSER } from "$fresh/runtime.ts";
import type { GalleryProps } from "../components/Gallery.tsx";
import { Gallery } from "../components/Gallery.tsx";

export default function TitleContainer(
  { galleryProps }: { galleryProps: GalleryProps },
) {
  const title = computed(() => {
    IS_BROWSER ? localStorage.getItem("title") : "Loading...";
  });

  return (
    <div>
      <h1>{title}</h1>
      <Gallery {...galleryProps} />
    </div>
  );
}
```

> ‚úÖ Abordagem correta

Se, no entanto, o `Gallery` for repassado como children para a ilha, ele ser√°
renderizado, serializado e n√£o ser√° hidratado! Para o `TitleContainer`, o
`children` √© um html pronto para ser exibido, e, portanto, n√£o √© uma ilha em si.

```tsx
import { computed } from "@preact/signals";
import type { ComponentChildren } from "preact";
import { IS_BROWSER } from "$fresh/runtime.ts";

export default function TitleContainer(
  { children }: { children: ComponentChildren },
) {
  const title = computed(() => {
    IS_BROWSER ? localStorage.getItem("title") : "Loading...";
  });

  return (
    <div>
      <h1>{title}</h1>
      {children}
    </div>
  );
}
```

Uso do title container (em uma section, por exemplo):

```tsx
//...
<TitleContainer>
    <Gallery {...galleryProps}>
</TitleContainer>
//...
```


# null
Source: https://docs.deco.cx/pt/performance/lazy-3rd-party-scripts

Aprenda como usar scripts de terceiros em seu site sem perder desempenho.

## Resumo

> O uso de scripts de terceiros pode ter um grande impacto no desempenho de um
> site. Tais scripts costumam operar de forma bloqueante e podem atrapalhar o
> tempo de carregamento das p√°ginas.
>
> Para reduzir o tenpo gasto com tais scripts, recomenda-se:
>
> 1. Evitar ao m√°ximo usar scripts de terceiros
> 2. Postergar o carregamento dos scripts para ap√≥s a intera√ß√£o do sistema
> 3. Usar async ou defer nos scripts
> 4. Pr√©-carregar conex√£o com a origem do script

## Postergando o carregamento de scripts.

Caso o script em quest√£o n√£o seja priorit√°rio, isto √©, pode aguardar uma
intera√ß√£o do usu√°rio ou n√£o representa uma funcionalidade vital ao site, uma
recomenda√ß√£o √© postergar seu carregamento para o momento em que o usu√°rio
interage com o site de fato.

Cada script pode exigir uma estrat√©gia diferente para postergar sua execu√ß√£o.
Abaixo, existe um exemplo de uma estrat√©gia comum
([fonte](https://metabox.io/delay-javascript-execution-boost-page-speed/)) para
postergar o script para que seja executado apenas ap√≥s a intera√ß√£o do usu√°rio
seguida de um atraso:

```tsx
<script>
{
    const load = () => {
        // YOUR SCRIPT CONTENT
    }
    const timer = setTimeout(load, 5000);
    const trigger = () => {
        load();
        clearTimeout(timer);
    }
    const events = ["mouseover","keydown","touchmove","touchstart"];
    events.forEach(e => window.addEventListener(e, trigger, {passive: true, once: true}));
}
</script>
```

Outra alternativa √© fazer uso da intersection API, de forma que o c√≥digo seja
executado apenas quando um determinado elemento esteja em tela (√∫til para aquilo
que deve ser executado s√≥ ap√≥s o usu√°rio der scroll em uma tela).

```jsx
const elem = document.getElementById(id);
const observer = new IntersectionObserver((items) => {
  // YOUR SCRIPT CONTENT
  observer.unobserve(elem);
});

observer.observe(elem);
```

## Async e Defer nos script

A presen√ßa de uma tag `<script src="script.js">` ocasiona o atraso da execu√ß√£o
do carregamento da DOM. Isto porque o browser ir√° respeitar a ordem dos scripts
para baix√°-los e execut√°-los.

Caso o script em si n√£o fa√ßa manipula√ß√£o na DOM, ele √© um forte candidato para
ser atrasado via async. Um script async ser√° baixado de forma ass√≠ncrona para s√≥
ent√£o ser executado na primeira oportunidade que der antes do loading da DOM:

```html
<script async src="script.js">
```

J√° para executar o script apenas depois que o parsing do html esteja de fato
completo, √© poss√≠vel fazer uso do atributo defer:

```html
<script defer src="script.js">
```

## Pr√©-carregar conex√£o com a origem do script

Se poss√≠vel, √© uma recomenda√ß√£o servir o script localmente (pasta `static`).
Caso o script esteja em outro dom√≠nio, a recomenda√ß√£o √© fazer uso do prefetch
para acelerar a resolu√ß√£o do DNS do servidor do script:

```jsx
<link rel="dns-prefetch" href="http://example.com">
```

Caso o script seja cr√≠tico, √© poss√≠vel sinalizar, inclusive para o browser j√°
iniciar uma conex√£o com a origem, de forma tornar essa conex√£o ainda mais
eficiente:

```jsx
<link rel="preconnect" href="http://example.com">
```

> **importante**: use o preconnect apenas quando necess√°rio e para os script de
> maior impacto.


# null
Source: https://docs.deco.cx/pt/performance/loaders

Enviando apenas dados necess√°rios ao cliente

## Resumo

> Os loaders s√£o mecanismos para carregamento de dados. Existem algumas dicas em
> como otimizar o seu uso. Seguem algumas dicas:
>
> 1. Quando o loader for reutilizado em diferentes sections ou p√°ginas,
>    recomenda-se utilizar um loader salvo (reus√°vel)
> 2. Sections que carregam dados e que n√£o est√£o sendo exibidas na tela inicial
>    (above the fold), podem ser Deferred

## Reutilizando loaders

As `sections` do sistema podem ter dados carregados via `loaders`. Esses loaders
podem ser definidos na pr√≥pria section ou podem ser carregado de entidades
salvas.

Essas entidades salvas podem ser criadas a partir dos blocos de loaders.

![Criando um loader](https://github.com/deco-sites/starting/assets/882438/47c63784-4839-4d97-aff4-8c1e8e18332a)

Ao salvar um loader, o mesmo √© garantido poder ser reutilizado em diferentes
sections. Al√©m de permitir alterar as props e ter isto refletido em todos os
locais onde esse loader √© utilizado, fazer uso desse loader salvo permite
otimizar o uso do sistema.

Durante uma p√°gina como a p√°gina de descri√ß√£o de produtos (PDP), √© preciso
carregar informa√ß√µes sobre o produto duas vezes: tanto para o carregamentos de
detalhes de SEO como para a exibi√ß√£o do produto em si. Ao utilizar o mesmo
loader, a deco otimiza para que o loader seja executado apenas uma vez durante o
ciclo de renderiza√ß√£o da p√°gina.

![image](https://github.com/deco-sites/starting/assets/882438/a39e3806-89e4-4b22-a179-491c048b18f7)

## Deferred Section

![image](https://github.com/deco-sites/starting/assets/882438/06b0fde3-874f-4b26-84b5-d4a41c94e5de)


# null
Source: https://docs.deco.cx/pt/performance/medias/css

Usando Tailwind CSS de maneira eficiente.

## TL;DR

Evite o uso de tokens personalizados como `h-[15px]` ou `p-[3px]`. Prefira os
tokens do Tailwind, como `h-8` e `p-2`. Al√©m disso, evite especificar cores nos
tokens (por exemplo, `bg-[#fd429a]`). Em vez disso, utilize cores de tema para
uma melhor manuten√ß√£o.

## Introdu√ß√£o

Este guia explora as melhores pr√°ticas para alcan√ßar uma performance ideal no
front-end com o Tailwind CSS na Deco. Vamos mergulhar no processo de gera√ß√£o do
Tailwind CSS, examinar como os tokens inline afetam as m√©tricas do Web Vitals e
estabelecer regras simples para manter uma pontua√ß√£o de alta performance.

### Compreendendo o Processo de Gera√ß√£o do Tailwind CSS

O framework da Deco permite a integra√ß√£o perfeita dos tokens do TailwindCSS em
qualquer componente JSX, aplicando estilos sem configura√ß√£o adicional. Embora
isso seja conveniente para iniciantes, entender o processo subjacente √© crucial
para otimiza√ß√£o de desempenho.

Sempre que s√£o feitas altera√ß√µes no c√≥digo do seu site, o processo de "gera√ß√£o
do Tailwind" examina todos os arquivos `.tsx` em sua base de c√≥digo. Em seguida,
extrai os tokens CSS, mesclando-os em um √∫nico arquivo `styles.css`. Este
arquivo √© ent√£o enviado ao navegador, estilizando seus componentes. Esse
processo se repete sempre que ocorrem altera√ß√µes no c√≥digo.

No entanto, a consequ√™ncia √© um arquivo `styles.css` maior do que o necess√°rio,
contendo estilos para todos os componentes, impactando as m√©tricas de
desempenho. Considere um cen√°rio com uma p√°gina inicial (`Home.tsx`) e uma
p√°gina de produto (`Product.tsx`):

```tsx
// Home.tsx
export default function Home() {
  return <div class="flex justify-center p-2">Foo</div>;
}

// Product.tsx
export default function Product() {
  return <div class="flex justify-center p-4">Bar</div>;
}
```

Ao acionar o processo de "gera√ß√£o do Tailwind", obtemos o seguinte `styles.css`:

```css
.flex {
  display: flex;
}

.justify-center {
  justify-content: center;
}

.p-2 {
  padding: 8px;
}

.p-4 {
  padding: 16px;
}
```

Mesmo que `p-4` n√£o seja usado na p√°gina inicial, ele est√° inclu√≠do em
`styles.css`, aumentando a carga CSS e afetando as m√©tricas do Web Vitals (FCP).

No exemplo anterior, tanto os tokens `flex` quanto `justify-center` s√£o
reutilizados. Em projetos maiores, essa reutiliza√ß√£o de classes tende a crescer.
A reusabilidade √© fundamental para ter um projeto Tailwind perform√°tico. No
entanto, os tokens inline podem quebrar essa tend√™ncia. Exemplos de tokens
inline incluem `p-[3px]`, `h-[4rem]` e `bg-[#fdb43a]`. Essas classes t√™m pouca
probabilidade de serem reutilizadas, levando a um aumento no tamanho do
`styles.css` e prejudicando os Core Web Vitals.

Para evitar a sintaxe inline ao replicar estilos, siga uma regra simples: use
tokens pr√≥ximos. Por exemplo:

* `p-[3px]` -> `p-2`
* `h-[4rem]` -> `p-8`
* `bg-[#fdb43a]` -> `bg-primary`

Isso aumenta significativamente a reusabilidade e melhora o desempenho geral do
site.

### Exemplo do Mundo Real: Redu√ß√£o de 71% no Tamanho do CSS

Ao aplicar essas t√©cnicas a um de nossos projetos, conseguimos uma redu√ß√£o
not√°vel de 71% no tamanho final do CSS. Isso n√£o apenas melhorou as pontua√ß√µes
do Web Vitals, mas tamb√©m permitiu uma f√°cil customiza√ß√£o de temas.

### Conclus√£o

O Tailwind CSS √© uma ferramenta poderosa para estilizar componentes JSX. Ao
compreender o processo de constru√ß√£o e otimizar sua base de c√≥digo, voc√™ pode
equilibrar flexibilidade e efici√™ncia. Incentive o uso de tokens puros do
Tailwind e tokens de tema, promovendo uma aplica√ß√£o mais f√°cil de manter e com
melhor desempenho.

Feliz codifica√ß√£o com o Tailwind CSS na Deco!


# null
Source: https://docs.deco.cx/pt/performance/medias/fonts

Aprenda como usar imagens em seu site sem perder desempenho.

## Resumo

> O carregamento de fontes pode impactar no tempo at√© a primeira renderiza√ß√£o de
> conte√∫do, na mudan√ßa de layout e no pr√≥prio √≠ndice de velocidade da p√°gina.
>
> Para otimizar o uso de fontes, recomenda-se:
>
> 1. Utilize o space de `Themes` padr√£o no template da deco.
> 2. De prefer√™ncia ao uso de uma das
>    [fam√≠lias de fontes padr√µes oferecidas pela google](https://fonts.google.com/)
> 3. Caso precise de uma fonte pr√≥pria, use uma fonte de tamanho pequeno, dando
>    prefer√™ncia aos formatos woff/woff2.

## Fontes no tema da deco

<Frame>
  <img width="640" alt="Configura√ß√£o do tema com fontes" src="https://deco.cx/docs/performance/theme-font.png" />
</Frame>

O componente de `Themes` da deco j√° est√° preparado para o uso de fontes
otimizadas [oferecidas pela google](https://fonts.google.com/) atrav√©s do loader
de fontes `GoogleFont`.

## Fontes personalizadas

Para fazer o uso de fontes personalizadas, a recomenda√ß√£o √© fazer o uso de uma
fonte preferencialmente no formato woff/woff2 e de pouco tamanho (menor do que
25kb).

Esta fonte pode ser servida estaticamente colocando o arquivo no diret√≥rio
`static`.

A partir disso, no space de `Themes`, em um tema espec√≠fico, basta colocar o
nome da fonte da fam√≠lia, e o styleguide associado. Para uma fonte no arquivo
`static/minha_fonte.ttf`, coloque o seguinte estilo:

```css
<style>
@font-face {
  font-family: 'Poppins';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url(/live/invoke/website/loaders/asset.ts?src=https://sualoja.deco.site/minha_fonte.ttf) format('truetype');
}
</style>
```

<Frame>
  <img width="320" alt="Uso de temas pr√≥prios" src="https://deco.cx/docs/performance/custom-font.png" />
</Frame>

> **importante**: a fonte √© cacheada na nossa CDN e browsers dos usu√°rios. Se
> for preciso substituir a fonte e eliminar o cache do usu√°rio, adicione um
> par√¢metro como `?v=2024_01_01` na URL da fonte para invalidar o cache
> original.

O `font-display: swap` permite que o browser possa usar uma fonte de fallback
at√© que a fonte de verdade seja carregada. Isso permite acelerar a renderiza√ß√£o
do conte√∫do de texto, mas pode impactar na movimenta√ß√£o do layout.

> **dica**: Uma alternativa √© fazer uso do `font-display: optional` que permite
> o browser ativar a fonte de fallback apenas se a conex√£o do usu√°rio estiver
> lenta.


# null
Source: https://docs.deco.cx/pt/performance/medias/images

Aprenda como usar imagens em seu site sem perder desempenho.

## Resumo

> Deco oferece componentes de Imagem, Picture e Source para trabalhar com
> imagens. Esses componentes adicionam padr√µes sens√≠veis para acelerar seu site.
> Para adicionar uma imagem ao seu site:
>
> 1. Adicione os componentes de imagem da deco (`<Image/>`, `<Source>`,
>    `<Picture>`) ao seu c√≥digo
> 2. Estilize os componentes com CSS at√© obter a apar√™ncia desejada
> 3. Defina os atributos de largura e altura do componente.

> Os componentes da deco j√° oferecem:
>
> * Imagens responsivas para todos os tamanhos de tela
> * Tags de pr√©-carregamento para melhorar o LCP
> * Processamento das imagens para otimizar o tamanho da imagem

## Image ou Picture

Existem dois componentes para a exibi√ß√£o de imagens: `<Image>` e `<Picture>`. O
componente adequado depende do seu caso de uso:

* `<Image>` exibe uma imagem (internamente usando `<img>`) e √© √∫til para imagens
  que tem sempre a mesma propor√ß√£o (largura vs altura) independente do tamanho
  de tela.

<Frame>
  <img alt="Componente image como uma imagem de produto" src="https://deco.cx/docs/image-aspect-ratio.png" />
</Frame>

* `<Picture>` define imagens que podem variar de tamanho de acordo com a
  resolu√ß√£o de tela.

<Frame>
  <img alt="Componente de Picture como uma imagem de banner" src="https://deco.cx/docs/picture-aspect-ratio.png" />
</Frame>

## Adicionando uma imagem

Utilizando o componente adequado, estilize-o com classes tailwind. √â obrigat√≥rio
definir a src e usar as props height/width:

```tsx
import Image from "apps/website/components/Image.tsx";

export default function MeuComponente() {
  return (
    <Image
      src="https://example.com/image.png"
      class="w-full h-full object-cover"
      width={800}
      height={1200}
    />
  );
}
```

O width/height n√£o altera o tamanho da imagem em tela pois a mesma est√°
estilizada pelo CSS. Esses atributos nem precisam ser o tamanho original da
imagem. A altura e largura est√£o presentes para permitir que o servidor e
browser possa escolher a imagem adequada a ser baixada de acordo com a resolu√ß√£o
da tela do usu√°rio.

## Adicionando uma Picture

Abaixo, voc√™ encontrar√° um exemplo m√≠nimo que renderiza uma imagem para desktop
e outra para dispositivos m√≥veis.

```tsx
import { Picture, Source } from "apps/website/components/Picture.tsx";

function MeuComponente() {
  return (
    <Picture>
      <Source
        media="(max-width: 768px)"
        src="https://example.com/image-mobile.png"
        width={270}
        height={377}
      />
      <Source
        media="(min-width: 768px)"
        src="https://example.com/image-desktop.png"
        width={800}
        height={1200}
      />
      <img
        src="https://example.com/image-desktop.png"
        class="w-full h-full object-cover"
      />
    </Picture>
  );
}
```

> Observe que voc√™ deve usar a tag `<img>` dentro de Picture, n√£o o componente
> `<Image>`. Observe que o atributo `src` na tag `<img>` √â OBRIGAT√ìRIO e deve
> receber a imagem maior, neste caso, a do desktop.

O exemplo acima renderiza a imagem `/image-mobile.png` em tamanhos de tela de
at√© 768px de largura. Em tamanhos de tela maiores, ser√° renderizada a imagem
`/image-desktop.png`.

Para estilizar essa imagem, adicione classes √† tag `<img>`. Por exemplo, para
fazendo a imagem preencher todo o espa√ßo dispon√≠vel, como no exemplo acima.

## Encontrando as propriedades de largura e altura

Os atributos `width` e `height` da imagem podem ser confusos, mesmo para os
desenvolvedores experientes. Essa confus√£o ocorre pelo fato de que esses
atributos N√ÉO alteram o tamanho final da imagem renderizada na tela. Em vez
disso, eles alteram a imagem que o navegador ir√° baixar em um cen√°rio de imagem
responsiva. Escolher valores adequados de largura e altura √© a chave para baixar
uma imagem pequena para obter bons resultados de LCP.

Para descobrir um bom valor para largura e altura:

1. Abra seu site e inspecione o elemento da imagem.
2. Defina o viewport para o tamanho desejado (412px para dispositivos m√≥veis ou
   1440px para desktop).
3. Passe o mouse sobre a tag da imagem. Voc√™ dever√° ver algo como:
   <Frame>
     <img alt="Propriedades da imagem no inspetor do navegador" src="https://deco.cx/docs/width-attribute.png" />
   </Frame>
4. Voil√†! Um bom valor de largura e altura est√° dispon√≠vel no atributo "Rendered
   size". Neste caso, a `width` √© 270px e a `height` √© 377px.

## Carregando imagens de forma otimizada (melhorando o LCP)

Para um bom LCP, n√£o apenas voc√™ precisa enviar payloads pequenos, mas tamb√©m
precisa carreg√°-los na ordem correta, priorizando aqueles que est√£o vis√≠veis na
tela em rela√ß√£o aos demais elementos (bellow the fold). Uma boa heur√≠stica √©:

1. Priorizar a imagem do LCP.
2. Carregar todas as outras imagens de forma pregui√ßosa (lazy load).

Felizmente, os componentes `<Image>` e `<Picture>` do Deco nos ajudam a obter
esse comportamento. Comece localizando o maior elemento na tela (LCP). Em
seguida, abra o c√≥digo do componente e verifique se:

1. O atributo `preload` est√° definido.
2. O atributo `loading` est√° definido como 'eager'.
3. O atributo `fetchPriority` esta definido como 'high'

Por exemplo, para um componente `<Image/>`:

```tsx
import Image from "apps/website/components/Image.tsx";

export default function MyComponent() {
  return (
    <Image
      src="https://example.com/image.png"
      width={270}
      height={377}
      preload
      loading="eager"
      fetchPriority="high"
    />
  );
}
```

Para um `<Picture/>`:

```tsx
import { Picture, Source } from "apps/website/components/Picture.tsx";

function MyComponent() {
  return (
    <Picture preload>
      <Source
        media="(max-width: 768px)"
        src="https://example.com/image-mobile.png"
        width={270}
        height={377}
      />
      <Source
        media="(min-width: 768px)"
        src="https://example.com/image-desktop.png"
        width={800}
        height={1200}
      />
      <img
        loading="eager"
        fetchPriority="high"
        src="https://example.com/image-desktop.png"
        class="w-full h-full object-cover"
      />
    </Picture>
  );
}
```

Verifique que outras imagens nao tenham os atibuto de preload e tenha o
`loading="lazy"` e `fetchPriority="low"`. Ao adicionar essas configura√ß√µes, voc√™
estar√° otimizando o carregamento de imagens para melhorar o LCP.

> **dica**: a pagina final deveria ter somente <u>uma √∫nica imagem
> pr√©-carregada</u>. O pr√©-carregamento de multiplas imagens piora a nota LCP.
> Para verificar que somente uma imagem esteja sendo pr√©-carregada, verifique
> que ha somente uma tag `<link rel="preload"/>`.

## Fontes relevantes

* [LCP](https://web.dev/lcp/)
* [Aspect-ratio CSS](https://www.w3schools.com/cssref/css_pr_aspect-ratio.php)


# null
Source: https://docs.deco.cx/pt/performance/medias/svg-sprites

Aprenda a usar a t√©cnica de SVG sprites para otimizar a performance do seu site

## Resumo

<iframe width="100%" height="339" src="https://www.loom.com/embed/e34d5d715f7c4efaae18e4eca799edca" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen />

> Para reutilizar elementos SVG e diminuir o tamanho do HTML de p√°ginas:
>
> 1. Use um arquivo √∫nico SVG (ex.: `sprites.svg`) e identifique cada s√≠mbolo
>    com um\`\`id\`.
> 2. Para usar o SVG, utilize a tag `use` apontando pra o ID espec√≠fico
> 3. Fa√ßa isso especialmente para os SVG que <u>n√£o est√£o vis√≠veis em tela</u>.

## SVG

SVG (Scalable Vector Graphics, ou Vetores Gr√°ficos Escal√°veis) √© um formato
gr√°fico comumente utilizando em aplica√ß√µes para representar √≠cones, logomarcas
ou elementos que precisam ser escalados sem perder qualidade. Contudo, o seu uso
pode impactar negativamente a performance de uma p√°gina web em diversas
m√©tricas, como: tempo de carregamento da p√°gina (speed index), tempo para exibir
o primeiro conte√∫do vis√≠vel (FCP), tempo para exibir o √∫ltimo conte√∫do vis√≠vel
(LCP).

## A t√©cnica SVG Sprites

SVG sprites consiste em voc√™ ter um arquivo svg que seja cache√°vel e acess√≠vel
pela internet (exemplo: na sua pasta `static`), e nele tenha as as s√≠mbolos de
cada svg utilizando a tag `<symbol>` e adicionando a propriedade `id` em cada um
dos elementos que deseja utilizar.

Segue um exemplo de arquivo svg com um s√≠mbolo e id **XMark**

```html
<svg style="display: none">
  <symbol
    id="XMark"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M6 18L18 6M6 6l12 12"
    />
  </symbol>
</svg>
```

## SVG Sprites para melhorar a performance do seu site

Para utilizar um svg que est√° dentro de um arquivo, √© poss√≠vel referencia-lo
atrav√©s do endere√ßo do arquivo e do id do s√≠mbolo que foi definido no arquivo
atrav√©s da tag `<use>`.

Segue um exemplo:

Digamos que o nome do arquivo svg √© `icons.svg` e ele est√° dispon√≠vel no path
`example.com/icons.svg`

```html
{/* icons.svg */}
<svg style="display: none">
  <symbol
    id="XMark"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M6 18L18 6M6 6l12 12"
    />
  </symbol>
</svg>
```

Voc√™ pode referenciar o s√≠mbolo **XMark** dentro do seu html desta forma:

```html
<svg>
  <use href="/icons.svg#XMark" />
</svg>
```

Desta forma, o tamanho do documento da sua p√°gina n√£o ser√° incrementado com o
tamanho do SVG **XMark**, dado que ele n√£o faz parte do seu documento, pois ele
est√° em outro arquivo. No caso de uso de SVG dentro de ilhas, a quantidade de
JavaScript gerado no bundle ser√° menor.

## Quando utilizar a t√©cnica?

> ‚ö†Ô∏è N√£o √© sempre adequado utilizar a t√©cnica, por√©m √© sempre v√°lido test√°-la.

Considerando que existir√° um ou v√°rios arquivos svgs, com o intuito de melhorar
a performance do seu site e manter uma √≥tima usabilidade, √© sugerido que utilize
desta abordagem nos seguintes casos:

* SVG n√£o √© vis√≠vel na tela inicial do usu√°rio (n√£o est√° no "above the fold")
* SVG √© exibido atrav√©s de intera√ß√£o do usu√°rio na p√°gina, por exemplo: hover,
  dentro de dialogs, ao clicar em bot√µes
* No caso de aplica√ß√µes que utilizam jsx ou afins, que √© o caso do Fresh, pois a
  quantidade de Javascript gerado por SVG √© consideravelmente grande.

**Extra:**

√â poss√≠vel definir um s√≠mbolo dentro do pr√≥prio documento e referencia-lo
posteriormente no mesmo documento. Esta abordagem √© v√°lida para os casos de onde
um √∫nico SVG √© repetido v√°rias vezes na p√°gina e pode ser utilizada para SVGs
que s√£o exibidos acima do "Fold" (i.e. vis√≠veis na tela do usu√°rio antes da
intera√ß√£o do mesmo).

```html
<svg>
  <use href="#XMark" />
</svg>
```


# Por que o desempenho √© importante
Source: https://docs.deco.cx/pt/performance/why

Por que o desempenho √© importante

No cen√°rio digital de hoje, em ritmo acelerado, o desempenho de um site
tornou-se um fator determinante para o sucesso dos neg√≥cios online. N√£o √© apenas
essencial para aprimorar a experi√™ncia do usu√°rio, mas tamb√©m desempenha um
papel fundamental no aumento do envolvimento do usu√°rio e na melhoria das taxas
de convers√£o.

Uma das principais vantagens de ter um site com bom desempenho √© a capacidade de
capturar e reter a aten√ß√£o do usu√°rio. Sites com carregamento lento geralmente
resultam em altas taxas de rejei√ß√£o, em que os visitantes deixam o site antes de
interagir com seu conte√∫do. A pesquisa do
[Google](https://www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/)
revela que, √† medida que o tempo de carregamento da p√°gina aumenta de um a tr√™s
segundos, a probabilidade de rejei√ß√£o aumenta em 32%. Portanto, quanto mais
r√°pido um site carregar, menores ser√£o as chances de os usu√°rios abandon√°-lo.

Um site r√°pido e responsivo n√£o apenas evita taxas de rejei√ß√£o, mas tamb√©m
melhora significativamente a experi√™ncia do usu√°rio. Em um estudo realizado pela
[Akamai Technologies](https://www.akamai.com/uk/en/resources/webinars-and-presentations/webinar-how-web-performance-impacts-business-success.jsp),
descobriu-se que 47% dos consumidores esperam que uma p√°gina da web seja
carregada em dois segundos ou menos, e 40% deles abandonam um site que leva mais
de tr√™s segundos para carregar. Essas estat√≠sticas destacam a import√¢ncia da
otimiza√ß√£o da velocidade da p√°gina para atender √†s expectativas do usu√°rio e
fornecer uma experi√™ncia de navega√ß√£o sem interrup√ß√µes.

Al√©m disso, a velocidade de carregamento de um site afeta diretamente o n√∫mero
de visualiza√ß√µes de p√°gina que ele recebe. A pesquisa do
[Yahoo](https://developer.yahoo.com/performance/rules.html) sugere que um mero
atraso de 400 milissegundos no tempo de carregamento da p√°gina pode levar a uma
diminui√ß√£o de 5-9% nas visualiza√ß√µes de p√°gina. Consequentemente, um site de
carregamento r√°pido incentiva os usu√°rios a navegar mais extensivamente pelo
site, aumentando seu envolvimento geral e intera√ß√£o com o conte√∫do.

No campo do com√©rcio eletr√¥nico, onde o objetivo final √© converter visitantes em
clientes pagantes, o desempenho do site se torna ainda mais cr√≠tico. Um site
r√°pido e eficiente contribui para a satisfa√ß√£o do cliente, fator-chave para
impulsionar as convers√µes. A
[Forrester Consulting](https://www.akamai.com/uk/en/multimedia/documents/analyst-reports/forrester-economic-impact-of-akamai-web-performance-solutions.pdf)
revela que 47% dos consumidores esperam que uma p√°gina da web seja carregada em
dois segundos ou menos, e 40% abandonam uma p√°gina que leva mais de tr√™s
segundos. Ao garantir um tempo de carregamento r√°pido, as empresas podem atender
√†s expectativas do usu√°rio e criar uma impress√£o positiva, o que leva, em √∫ltima
inst√¢ncia, a uma maior satisfa√ß√£o do cliente.

O impacto do desempenho do site nas taxas de convers√£o e vendas n√£o pode ser
subestimado. O gigante varejista
[Walmart](https://www.woorank.com/en/blog/walmart-com-page-load-speed) relatou
um aumento de 2% nas convers√µes para cada melhoria de um segundo no tempo de
carregamento da p√°gina. Essa correla√ß√£o demonstra claramente que um site mais
r√°pido se traduz diretamente em mais convers√µes e receita. Uma experi√™ncia de
compra online tranquila e eficiente n√£o apenas gera vendas imediatas, mas tamb√©m
contribui para uma percep√ß√£o positiva da marca e fidelidade do cliente.

Para apoiar essas afirma√ß√µes, v√°rios estudos e pesquisas foram realizados,
fornecendo evid√™ncias concretas da rela√ß√£o entre o desempenho do site e o
sucesso empresarial no com√©rcio eletr√¥nico. Fontes not√°veis incluem o benchmark
do
[Google](https://www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/)
para velocidade de p√°gina m√≥vel, o estudo da
[Akamai Technologies](https://www.akamai.com/uk/en/resources/webinars-and-presentations/webinar-how-web-performance-impacts-business-success.jsp)
sobre a import√¢ncia do desempenho da web, a pesquisa do
[Yahoo](https://developer.yahoo.com/performance/rules.html) sobre o custo de um
mau desempenho da web, a an√°lise da Forrester Consulting sobre o impacto
econ√¥mico das solu√ß√µes de desempenho da web, o estudo de caso do
[Walmart](https://www.woorank.com/en/blog/walmart-com-page-load-speed) sobre
velocidade de carregamento da p√°gina e vendas e o relat√≥rio do Aberdeen Group
sobre o desempenho de aplicativos web.

No cen√°rio digital altamente competitivo de hoje, otimizar o desempenho do site
√© vital para o sucesso dos neg√≥cios de com√©rcio eletr√¥nico. Um site com bom
desempenho n√£o apenas melhora o envolvimento do usu√°rio, mas tamb√©m aumenta as
taxas de convers√£o, levando a um aumento nas vendas e na receita. Estudos
demonstram consistentemente que tempos de carregamento de p√°gina mais r√°pidos
resultam em taxas de rejei√ß√£o reduzidas, melhor experi√™ncia do usu√°rio, aumento
nas visualiza√ß√µes de p√°gina, maior satisfa√ß√£o do cliente e percep√ß√£o positiva da
marca. Portanto, investir na otimiza√ß√£o do desempenho do site √© uma decis√£o
estrat√©gica para qualquer neg√≥cio online que deseje prosperar no mercado digital
em constante evolu√ß√£o.


# null
Source: https://docs.deco.cx/pt/sdk/ab-test

Criando Teste A/B Headless

## Para quem √© esse conte√∫do?

Esse conte√∫do √© para quem ainda n√£o tem o site na deco.cx e deseja utilizar a
Feature de Teste A/B de forma headless, sem migrar de tecnologia.

Se voc√™ j√° tem o site na deco.cx, a cria√ß√£o de Teste A/B est√° explicada nessa
outra [documenta√ß√£o](https://deco.cx/docs/pt/developing-capabilities/apps/ab-test).

## Como come√ßar?

1 - Criando um projeto deco.cx

2 - Entendendo o Teste A/B

3 - Configura√ß√£o de eventos

4 - Acompanhando resultados

5 - Go Live

## Criando um projeto deco.cx

Acesse o link de [cria√ß√£o de sites](https://admin.deco.cx/spaces/new).

Escolha o template **SDK**.

![deco.cx sdk Template](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/ffd8f072-daf7-48cc-ab14-ad6b9297f903)

Ap√≥s a cria√ß√£o, o projeto ainda n√£o est√° em nenhum time, voc√™ pode associar a
algum time no bot√£o `Save site to your team`.

## Entendendo o Teste A/B

Com o site criado e associado a um time, procure na barra de busca por `abTest`.

Selecione a op√ß√£o mostrada na imagem:

![AbTest Search](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/7658eb54-1f8f-49ca-8483-341e59200a9f)

Voc√™ deve ver um bloco como esse:

![AbTest Block](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/d0ee14cb-5ee4-4b3f-a56a-b5f6b4c84eb9)

Defina ent√£o um nome para o seu teste e depois configure as variantes.

### Variantes

As variantes s√£o vers√µes de c√≥digo que v√£o executar aleatoriamente para uma
parcela do seu p√∫blico.

Aqui voc√™ tem a possibilidade de adicionar `Javascript` e/ou `CSS` para
customizar a experi√™ncia do seu usu√°rio.

Exemplos:

JavaScript to run

```js
document.querySelector("#my-button").textContent = "Buy!";
```

CSS to run

```css
#my-button {
  color: red !important;
}
```

## Configura√ß√£o de Eventos

A configura√ß√£o de eventos √© essencial para Testes A/B, agora voc√™ vai ver como
criar um evento espec√≠fico para o seu teste.

Na mesma tela de configura√ß√£o das Variantes, encontre o campo `Tracked Elements`
e clique para adicionar um.

Voc√™ deve ver algo como:

![Tracked Elements](https://ozksgdmyrqcxcwhnbepg.supabase.co/storage/v1/object/public/assets/530/3933da2b-e55b-4f75-892b-345fd5e1d3d1)

Agora, basta encontrar o `seletor CSS` do elemento que deseja criar um evento e
escolher o nome do evento.

## Acompanhando resultados

Voc√™ pode acompanhar o resultado do seu teste, com as m√©tricas que criou
diretamente pelo painel da deco.cx.

> Importante: Para acompanhar os resultados do Teste pode ser necess√°rio um
> upgrade no plano do seu time, confira em
> [Pricing](https://deco.cx/en/pricing).

1 - Clique na aba `Experiments`.

2 - Clique em `Create New Experiment`

3 - Crie um experimento com o mesmo nome que colocou no seu Teste.

4 - Acompanhe os resultados.

Para entender mais sobre a tela de resultados, olhe essa
[documenta√ß√£o](https://deco.cx/docs/pt/developing-capabilities/apps/ab-test#funil-e-resultado).

## Go-Live

Antes de colocar o c√≥digo em produ√ß√£o, preenche um campo chamado
`plausibleDomain` com o mesmo dom√≠nio registrado na aba `Analytics` do seu
painel deco.cx

Agora, para que tudo isso seja aplicado no seu site:

* Clique em Publish
* Insira esse script no `<head>` do seu site:

```html
<script src="https://seusite.deco.site/live/invoke/abTest" defer="true"></script
>
```

## Pr√≥ximos passos

Features que ainda n√£o est√£o dispon√≠veis, mas j√° estamos trabalhando para
lan√ßar:

* Configura√ß√£o de tr√°fego

No Teste a/b para sites deco.cx j√° √© poss√≠vel definir a quantidade de tr√°fego,
estamos trabalhando para implementar na SDK tamb√©m.

* Testes em paralelo

No Teste a/b para sites deco.cx j√° √© poss√≠vel rodar mais de um teste ao mesmo
tempo, estamos trabalhando para implementar na SDK tamb√©m.

* Testes A/B/C/...

Estamos trabalhando para implementar a possibilidade de testes com mais de duas
vers√µes.


# null
Source: https://docs.deco.cx/pt/sdk/feature-flags

Feature Flags

## O que s√£o Feature Flags?

√â uma t√©cnica de desenvolvimento de software que permite ativar ou desativar
funcionalidades espec√≠ficas de um aplicativo sem alterar o c√≥digo ou fazer um
novo deploy.

Confira as tecnologias j√° suportadas e suas respectivas documenta√ß√µes:

## React

[deco-sdk npm](https://www.npmjs.com/package/deco-sdk)


# null
Source: https://docs.deco.cx/pt/sdk/headless-cms

Aprenda como gerenciar um site ou aplicativo externo com a Deco

Na deco.cx, oferecemos a funcionalidade de criar e gerenciar sites de forma
intuitiva por meio do admin Deco. Cada p√°gina do seu site √© representada por um
conjunto de dados estruturados no formato JSON, que captura todo o conte√∫do
presente nessa p√°gina. Todas as altera√ß√µes feitas no sistema de gerenciamento de
conte√∫do (CMS) para uma p√°gina espec√≠fica s√£o imediatamente refletidas no JSON
correspondente a essa p√°gina. Esse processo de atualiza√ß√£o em tempo real permite
que aplicativos ou sites externos √† plataforma Deco acessem e incorporem essas
mudan√ßas, possibilitando uma integra√ß√£o fluida entre diferentes sistemas e
ambientes, incluindo ambientes de teste (staging) e produ√ß√£o.

O fluxo de atualiza√ß√£o √© ilustrado no diagrama abaixo:

![alt text](https://deco.cx/docs/headless-cms/change-flow.png)

## Obtendo conte√∫do do site Deco em site ou aplicativo externo

Para acessar o conte√∫do do seu site Deco em formato JSON a partir de um site ou
aplicativo externo, voc√™ pode utilizar uma requisi√ß√£o GET simples √† URL do site,
incluindo uma queryString `asJson`.

Por exemplo, ao acessar a p√°gina inicial do seu storefront, voc√™ ver√° a p√°gina
totalmente renderizada e pronta para uso, com todos os elementos visuais e
interativos:

![Home page store front](https://deco.cx/docs/headless-cms/site.png)

No entanto, se voc√™ deseja acessar apenas os dados estruturados da p√°gina para
utiliz√°-los em um contexto diferente, como um aplicativo m√≥vel ou uma integra√ß√£o
com outro sistema, basta adicionar a query string `?asJson` √† URL. Isso
resultar√° em uma resposta JSON contendo os dados estruturados correspondentes ao
conte√∫do da p√°gina, permitindo uma f√°cil integra√ß√£o e manipula√ß√£o desses dados
em seu aplicativo externo:

![JSON response on request with ?asJson query](https://deco.cx/docs/headless-cms/asjson.png)

Essa abordagem de "cabe√ßa sem corpo" (headless) do CMS Deco oferece
flexibilidade e poder, permitindo que voc√™ reutilize o conte√∫do do seu site em
uma variedade de contextos e plataformas.


# null
Source: https://docs.deco.cx/pt/self-host/architecture

Arquitetura Self-host

## Arquitetura de sites na deco.cx

<Frame>
  <img width="640" alt="Arquitetura Deployment" src="https://deco.cx/docs/self-host/architecture.png" />
</Frame>

A arquitetura de alto n√≠vel da deco integra diferentes pap√©is (Usu√°rio, Usu√°rio
de Neg√≥cios, Desenvolvedor), um servidor web do site, uma rede de entrega de
conte√∫do (CDN), funcionalidades administrativas e sistemas externos (bancos de
dados, e-commerce, SaaS). O foco est√° no gerenciamento de conte√∫do e ambientes
de desenvolvimento/configura√ß√£o, com intera√ß√£o entre diversos stakeholders e
componentes.

### Vis√£o Geral da Arquitetura

1. **Usu√°rios:**
   * **Usu√°rio Final:** Acessa o site por meio da CDN da deco.
   * **Usu√°rio de Neg√≥cios:** Interage com o sistema pelo ambiente web para
     visualizar e editar conte√∫do no "Admin".
   * **Desenvolvedor (Dev):** Trabalha localmente, envia altera√ß√µes pelo Git e
     realiza deploy via pipelines de CI/CD.

2. **Componentes do Sistema:**
   * **CDN:** Entrega o site aos usu√°rios finais.
   * **Site:** O servidor web acessado pelos usu√°rios atrav√©s da CDN.
   * **Ambiente Web (Web Env):** Onde desenvolvedores e usu√°rios de neg√≥cios
     visualizam altera√ß√µes que est√£o salvas no ambiente.
   * **Painel Administrativo (Admin):** Centraliza o controle das altera√ß√µes,
     salvando-as no Git e refletindo as altera√ß√µes nos ambientes web e local.
   * **Git:** Sistema de controle de vers√£o, integrando mudan√ßas do Admin e
     desenvolvedores, com deploy via CI/CD.
   * **Sistemas Externos (Banco de Dados, E-commerce, SaaS):** Integram dados e
     servi√ßos consumidos pelo site.

### Componentes e Fluxos de Processo

1. **Entrega de Conte√∫do:**
   * **Usu√°rios:** Interagem com o site ao vivo pela CDN, com conte√∫do otimizado
     para r√°pida entrega.

2. **Fluxo de Trabalho do Usu√°rio de Neg√≥cios:**
   * **Visualizar/Editar:** Usu√°rios de neg√≥cios editam conte√∫do no Admin e
     visualizam as mudan√ßas no ambiente web.
   * **Publicar:** As altera√ß√µes s√£o salvas no Git e propagadas ao site via
     pipeline CI/CD.

3. **Fluxo de Trabalho do Desenvolvedor:**
   * **Ambiente Local:** Desenvolvedores fazem mudan√ßas locais, sincronizam com
     o Admin, e enviam ao Git.
   * **CI/CD:** Ap√≥s o envio ao Git, as mudan√ßas s√£o automaticamente deployadas
     via CI/CD.

## Arquitetura deco.cx com Self-host do Site

<Frame>
  <img width="640" alt="Arquitetura Self-host site" src="https://deco.cx/docs/self-host/self-host-site.png" />
</Frame>

### Mudan√ßa na Arquitetura com Self-Host do Site

Com o self-host, o site passa a ser hospedado na infraestrutura da pr√≥pria
organiza√ß√£o. Veja as principais mudan√ßas e impactos:

### Mudan√ßas Principais

1. **Self-host do Site e Sistemas Internos:**
   * O **Site** √© hospedado localmente ou em infraestrutura pr√≥pria, fora do
     controle direto da deco.cx.
   * **Sistemas Internos** (banco de dados e softwares) se integram diretamente
     com o site self-hosted.

2. **T√∫nel para Acessar o Site:**
   * Usu√°rios e sistemas da deco.cx acessam o site self-hosted via um t√∫nel ou
     acesso p√∫blico, a escolha e controle da organiza√ß√£o.

3. **CI/CD e Git Gerenciam o Site:**
   * Mesmo com o self-host, o **CI/CD** ainda √© necess√°rio para publicar as
     altera√ß√µes de c√≥digo e conte√∫do no Site, sob responsabilidade da
     organiza√ß√£o.

4. **Continuidade da Infraestrutura deco.cx:**
   * O **Web Env** e o **Admin** permanecem na infraestrutura da deco.cx. Caso
     seja necess√°rio, a organiza√ß√£o deve prover e configurar o acesso do
     ambiente web aos sistemas internos via t√∫nel (ou acesso p√∫blico).

### Impacto da Mudan√ßa

* **Maior Controle:** A organiza√ß√£o tem mais controle sobre o site e sistemas
  internos.
* **Complexidade Adicional:** O t√∫nel e CI/CD pr√≥prios aumentam a
  responsabilidade de manuten√ß√£o.
* **Sem Recursos deco.cx:** N√£o h√° acesso √† CDN e outros servi√ßos da deco.cx
  respons√°veis pela seguran√ßa e otimiza√ß√£o do acesso ao site.
* **Customiza√ß√£o Local:** Maior flexibilidade para acesso aos sistemas internos.

### Aspectos Relevantes da Solu√ß√£o Self-Host

* **Cache de Renderiza√ß√£o Ass√≠ncrona:** Por padr√£o, a CDN realiza cache das
  se√ß√µes renderizadas na rota `/deco/render` (HTMX e partials). Sem esse cache,
  o sistema pode ser sobrecarregado com requisi√ß√µes desnecess√°rias. Portanto, √©
  recomend√°vel implementar o cache desses elementos na solu√ß√£o self-host.

* **Cache do Loader:** As chamadas aos loaders recebem cache local no servidor
  web. Esse cache, por padr√£o, ocupa 1GB e pode consumir o espa√ßo em disco da
  imagem se n√£o for montado com um tamanho adequado. Esta e outras op√ß√µes podem
  ser configuradas via vari√°veis de ambiente e s√£o definidas no c√≥digo do deco
  runtime.

## Arquitetura deco.cx com Self-host do Site e Ambientes

<Frame>
  <img width="640" alt="Arquitetura Self-host de Site e Envs" src="https://deco.cx/docs/self-host/self-host-envs.png" />
</Frame>

### Mudan√ßa na Arquitetura com Self-Host do Site e dos Ambientes (Envs)

Com essa mudan√ßa, tanto o **Site** quanto os **Ambientes Web** s√£o
auto-hospedados. Isso d√° √† organiza√ß√£o controle total sobre desenvolvimento,
produ√ß√£o e integra√ß√£o com sistemas internos.

### Mudan√ßas Principais

1. **Self-Host do Site e Ambientes (Envs):**
   * Tanto o **Site** quanto o **Web Env** s√£o hospedados em infraestrutura
     pr√≥pria.

2. **T√∫nel para Acessar o Ambiente Web:**
   * Intera√ß√£o com o ambiente web auto-hospedado ocorre via t√∫nel, mantendo
     conectividade com a deco.cx. √â necess√°ria interven√ß√£o da deco.cx caso o
     t√∫nel n√£o seja acess√≠vel publicamente.

3. **CI/CD e Git:**
   * **CI/CD** gerencia as mudan√ßas localmente, com deploy autom√°tico para o
     site self-hosted, mas sob responsabilidade da organiza√ß√£o.

4. **Continuidade da Infraestrutura deco.cx:**
   * O **Admin** continua conectado √† deco.cx, mas depende do t√∫nel para
     interagir com o ambiente self-hosted.

### Impacto da Mudan√ßa

* **Controle Completo:** Total controle sobre site e ambientes, oferecendo
  flexibilidade.
* **Independ√™ncia da deco.cx:** Menor depend√™ncia de servi√ßos terceirizados para
  desenvolvimento.
* **Complexidade de Manuten√ß√£o:** Maior responsabilidade sobre seguran√ßa e
  desempenho.
* **CI/CD Local:** Pipelines de CI/CD personalizados s√£o necess√°rios para o
  deploy local.

### Conclus√£o

Com self-host do site e dos ambientes, a organiza√ß√£o tem maior controle e
flexibilidade, mas assume mais responsabilidade por seguran√ßa e manuten√ß√£o, al√©m
da conectividade dos sistemas.


# null
Source: https://docs.deco.cx/pt/self-host/envs

Self-host seus envs

## Deploy de Envs (Docker)

Uma env representa um ambiente de modifica√ß√£o de c√≥digo ou conte√∫do. Ela
armazena os arquivos e suas altera√ß√µes, al√©m de se comunicar com o Git para
baixar arquivos e publicar altera√ß√µes.

Para facilitar o processo de deploy, oferecemos uma estrat√©gia Docker para
publica√ß√£o de imagens.

No admin, crie uma env **local** antes de fazer o deploy e capture o nome do
ambiente (`DECO_ENV_NAME`).

## Dockerfile

Para realizar o deploy em Docker, crie e publique o Dockerfile abaixo. N√£o √©
necess√°rio nenhum arquivo adicional, exceto as chaves Git a serem utilizadas no
projeto.

A chave Git √© necess√°ria para que a imagem possa publicar altera√ß√µes. No exemplo
abaixo, utilizaremos dois arquivos:

* `ssh/id_ed25519`: chave privada gerada
* `ssh/id_ed25519.pub`: chave p√∫blica associada √† chave privada acima e ao
  reposit√≥rio Git

Al√©m disso, temos vari√°veis que podem ser alteradas conforme sua necessidade:

* `DECO_ENV_NAME`: Nome do ambiente adicionado no admin
* `DECO_SITE_NAME`: Nome do projeto
* `DECO_REPO_URL`: Endere√ßo de acesso via SSH ao seu reposit√≥rio Git

```dockerfile
# Use the specified Docker image
FROM ghcr.io/deco-cx/deco:latest

# Set environment variables
ENV DECO_ENV_NAME=test-env \
    DECO_SITE_NAME=selfhostmgr \
    DECO_TRACKING_BRANCH=main \
    DECO_APP_NAME=site \
    DECO_REPO_URL=git@github.com:deco-sites/selfhostmgr.git

# Create .ssh directory and add GitHub known hosts
RUN mkdir -p /home/deno/.ssh && \
    ssh-keyscan github.com >> /home/deno/.ssh/known_hosts

# Copy the SSH key into the container (assuming you have it locally)
# Replace "id_rsa" with the actual filename of your private key
COPY ssh/id_ed25519 /home/deno/.ssh/

COPY ssh/id_ed25519.pub /home/deno/.ssh/
USER root
RUN chmod -R 700 /home/deno/.ssh
RUN chown -R deno /home/deno/.ssh
USER deno

# Additional commands for your application (if needed)
# e.g., cloning the repository, setting up dependencies, etc.
# RUN git clone $DECO_REPO_URL /app

CMD DENO_DIR_RUN=/app/deno DENO_DIR=/daemon-deno-dir deno run -A --unstable-http jsr:@deco/deco/scripts/run --build-cmd "deno task build" -- deno run --lock=deno.lock --unstable-http --lock-write --inspect --node-modules-dir=false --allow-ffi=$DENO_DIR"npm/registry.npmjs.org/@libsql" --allow-env --allow-net --allow-sys --allow-hrtime --allow-read --allow-run --allow-write=$HOME/.cache,/tmp,/deno-dir/npm,/deno-dir/deno_esbuild,/deno-dir/deno_esbuild_tmp, --unstable --unstable-hmr --unstable-kv --unstable-cron main.ts
```

### Deploy docker

Para criar a imagem Docker com base no seu projeto, execute o seguinte comando
no diret√≥rio raiz:

* `docker build -t env_image .`

Por fim, crie e execute o container Docker:

* `docker run -p 8000:8000 --name env_container env_image`

Com isso, sua env estar√° rodando em um container Docker, pronto para uso.

### Considera√ß√µes importante

Por padr√£o, o env ser√° acess√≠evel publicamente no endere√ßo oferecido no admin.
Caso tenha considera√ß√µes de privacidade, ser√° preciso criar um t√∫nel entre a env
e o reposit√≥rio.


# null
Source: https://docs.deco.cx/pt/self-host/site

Self-host seu site deco

## Deploy do site (Docker)

O estado e a configura√ß√£o do sistema s√£o totalmente definidos no sistema de
arquivos. Assim, o estado do site √© auto-contido no pr√≥prio sistema de arquivos,
sem a necessidade de comunica√ß√£o com sistemas externos por padr√£o. No entanto, o
site pode acessar bancos de dados, servi√ßos SaaS ou outros servi√ßos web,
conforme o c√≥digo implementado pelo desenvolvedor, mas isso n√£o √© um requisito
obrigat√≥rio do runtime da Deco.

Para facilitar o processo de deploy, oferecemos uma estrat√©gia simples
utilizando um Dockerfile.

## Dockerfile

Para realizar o deploy em Docker, copie o c√≥digo abaixo para um arquivo
Dockerfile na raiz do seu projeto. √â necess√°rio configurar, no m√≠nimo, a
vari√°vel de ambiente `ENV DECO_SITE_NAME` para refletir o nome do seu site ou
projeto.

```dockerfile
FROM denoland/deno:alpine

# The port that your application listens to.
EXPOSE 8000

WORKDIR /app

RUN mkdir -p /home/deno && chown -R deno:deno /home/deno && mkdir /app/deno && chown -R deno:deno /app && mkdir -p /deno-dir && chown -R deno:deno /deno-dir

# Prefer not to run as root.
USER deno

# These steps will be re-run upon each file change in your working directory:
COPY --chown=deno:deno . deco

WORKDIR /app/deco

RUN echo -e 'import "$fresh/src/build/deps.ts";\nimport "$fresh/src/runtime/entrypoints/main.ts";\nimport "$fresh/src/runtime/entrypoints/deserializer.ts";\nimport "$fresh/src/runtime/entrypoints/signals.ts";' >> _docker_deps.ts

RUN deno cache --allow-import --frozen main.ts dev.ts _docker_deps.ts

ARG GIT_REVISION=1

ENV DECO_SITE_NAME=yoursitename

ENV DENO_DEPLOYMENT_ID=$GIT_REVISION

CMD ["run", "--cached-only", "-A", "--unstable-kv", "main.ts"]
```

### Explica√ß√£o do Dockerfile

Aqui est√£o alguns detalhes importantes sobre o `Dockerfile` acima, que podem
precisar de personaliza√ß√£o conforme o seu caso de uso:

* `FROM denoland/deno:alpine`
  * Define a imagem base do Docker. Voc√™ pode especificar uma vers√£o exata, como
    `FROM denoland/deno:2.0.1.`

* `EXPOSE 8000`
  * Exp√µe a porta onde a aplica√ß√£o estar√° dispon√≠vel.

* `RUN echo -e ... >> _docker_deps.ts`
  * Define as depend√™ncias que ser√£o cacheadas para evitar a busca por pacotes
    externos durante a execu√ß√£o.

* `RUN deno cache --allow-import --frozen main.ts dev.ts _docker_deps.ts`
  * Realiza o cache das depend√™ncias do projeto.

* `ARG GIT_REVISION=1`
  * Permite definir um argumento de build para identificar revis√µes do projeto.

* `ENV DECO_SITE_NAME=yoursitename`
  * Define uma vari√°vel de ambiente usada para identificar o site no runtime
    Deco.

* `ENV DENO_DEPLOYMENT_ID=$GIT_REVISION`
  * Vari√°vel usada para gerenciar o cache dos assets do site, devendo ser
    alterada a cada novo build.

* `CMD ["run", "--cached-only", "-A", "--unstable-kv", "main.ts"]`
  * Comando que executa o servidor com as permiss√µes necess√°rias.

### Deploy docker

Para criar a imagem Docker com base no seu projeto, execute o seguinte comando
no diret√≥rio raiz:

* `docker build -t site_image .`

Se necess√°rio, voc√™ pode passar o argumento `GIT_REVISION` para identificar uma
revis√£o espec√≠fica do build:

* `docker build --build-arg GIT_REVISION=2 -t site_image .`

Finalmente, crie e execute o container Docker:

* `docker run -p 8000:8000 --name site_container site_image`

Com isso, seu site estar√° rodando em um container Docker, pronto para uso.


